<Type Name="KeyGesture" FullName="System.Windows.Input.KeyGesture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4fe858a9b6242ac976e2d3f564a1b3c2ad7655bc" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69172071" /></Metadata><TypeSignature Language="C#" Value="public class KeyGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type KeyGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje kombinację klawiaturową, która może służyć do wywoływania polecenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzona z co najmniej jedną <xref:System.Windows.Input.ModifierKeys>. Wyjątkami od tej reguły są klawisze funkcyjne i klawiatury numeryczne, które mogą być poprawne <xref:System.Windows.Input.KeyGesture> . Na przykład można utworzyć <xref:System.Windows.Input.KeyGesture> przy użyciu tylko klawisza F12, ale aby użyć klawisza X <xref:System.Windows.Input.KeyGesture> w, musi być sparowany z klawiszem modyfikującym.  
  
 Ogólnie rzecz biorąc, można  
  
 Można użyć <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.ICommand>, aby <xref:System.Windows.Input.KeyGesture> powiązać z, aby polecenie zostało wywołane po <xref:System.Windows.Input.KeyGesture> wystąpieniu.  
  
 W <xref:System.Windows.Input.KeyGesture> przypadku [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] użycia właściwość, która jest zwykle ustawiona w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] jest <xref:System.Windows.Input.KeyBinding.Gesture%2A>, w przypadkach, gdy gest reprezentuje zarówno klucz standardowy, jak i klawisz modyfikujący. Możesz również ustawić <xref:System.Windows.Input.KeyBinding.Gesture%2A> właściwość jako tylko klucz funkcji lub tylko kombinację klawiszy modyfikujących. Jednak jest to bardziej powszechne, aby ustawić <xref:System.Windows.Input.KeyBinding.Key%2A> właściwość, jeśli odpowiednie powiązanie polecenia jest kluczem funkcji bez modyfikatorów lub <xref:System.Windows.Input.KeyBinding.Modifiers%2A> jeśli odpowiednie powiązanie polecenia dotyczy tylko klawiszy modyfikujących.  
  
<a name="xamlAttributeUsage_KeyGesture"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object property="oneOrMoreModifierKeys+key"/>  
- or -  
<object property="functionKey"/>  
```  
  
<a name="xamlValues_KeyGesture"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 `functionKey`  
 <xref:System.Windows.Input.Key>  
  
 Pojedyncza wartość klucza, która musi być jednym z klawiszy funkcyjnych (F1-12) lub numerycznych klawiszy skrótów.  
  
 `oneOrMoreModifierKeys`  
 Co najmniej jeden klawisz modyfikujący, zdefiniowany przez <xref:System.Windows.Input.ModifierKeys> Wyliczenie, rozdzielany znakiem "+".  
  
 `key`  
 <xref:System.Windows.Input.Key>  
  
 Wartość jednego klucza.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Windows.Input.ApplicationCommands.Close%2A> jak powiązać polecenie <xref:System.Windows.Input.KeyGesture> z przy użyciu a <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 Poniższy przykład pokazuje, jak używać <xref:System.Windows.Input.KeyGesture> programu w programie. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Należy zauważyć, [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] że użycie nie `<KeyGesture>` deklaruje bezpośrednio elementu. Użycie tego elementu obiektu nie jest możliwe, <xref:System.Windows.Input.KeyGesture> ponieważ nie ujawnia publicznego konstruktora bez parametrów. Zamiast tego <xref:System.Windows.Input.KeyGesture> `Gesture` użycie użyje zachowania TypeConverter, aby zadeklarować cały element wbudowany jako wartość atrybutu. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.KeyGesture" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key">Klucz skojarzony z tym gestem.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Input.KeyGesture" /> klasy z określonym <see cref="T:System.Windows.Input.Key" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzona z co najmniej jedną <xref:System.Windows.Input.ModifierKeys>.  Wyjątkami od tej reguły są klawisze funkcyjne i klawiatury numeryczne, które mogą być poprawne <xref:System.Windows.Input.KeyGesture> .  
  
   
  
## Examples  
 Poniższy przykład pokazuje <xref:System.Windows.Input.KeyGesture> , jak używać tego konstruktora do tworzenia i kojarzenia go <xref:System.Windows.Input.KeyBinding>z.  Następnie zostanie dodany <xref:System.Windows.Input.InputBindingCollection> do elementu <xref:System.Windows.Window>. <xref:System.Windows.Input.KeyBinding>  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithnomodifier)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithnomodifier)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="key" />jest nieprawidłowy <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" />jest nieprawidłowy <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="key">Klucz skojarzony z gestem.</param>
        <param name="modifiers">Klawisze modyfikujące skojarzone z gestem.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Input.KeyGesture" /> klasy z określonym <see cref="T:System.Windows.Input.Key" /> i <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzona z co najmniej jedną <xref:System.Windows.Input.ModifierKeys>. Wyjątkami od tej reguły są klawisze funkcyjne i klawiatury numeryczne, które mogą być poprawne <xref:System.Windows.Input.KeyGesture> .  
  
   
  
## Examples  
 Poniższy przykład pokazuje <xref:System.Windows.Input.KeyGesture> , jak używać tego konstruktora do tworzenia i kojarzenia go <xref:System.Windows.Input.KeyBinding>z. Następnie zostanie dodany <xref:System.Windows.Input.InputBindingCollection> do elementu <xref:System.Windows.Window>. <xref:System.Windows.Input.KeyBinding>  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" />nie jest prawidłowy<see cref="T:System.Windows.Input.ModifierKeys" />  
  
—lub— 
 <paramref name="key" />jest nieprawidłowy <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" />i <paramref name="modifiers" /> nie należy tworzyć prawidłowych <see cref="T:System.Windows.Input.KeyGesture" />wartości.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers, string displayString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers, System::String ^ displayString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys * string -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers, displayString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
        <Parameter Name="displayString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Klucz skojarzony z gestem.</param>
        <param name="modifiers">Klawisze modyfikujące skojarzone z gestem.</param>
        <param name="displayString">Reprezentacja <see cref="T:System.Windows.Input.KeyGesture" />ciągu.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Input.KeyGesture" /> klasy z określonym <see cref="T:System.Windows.Input.Key" />, <see cref="T:System.Windows.Input.ModifierKeys" />i wyświetlanym ciągiem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest ustawiona `displayString` na wartość parametru. <xref:System.Windows.Input.KeyGesture.DisplayString%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" />nie jest prawidłowy<see cref="T:System.Windows.Input.ModifierKeys" />  
  
—lub— 
 <paramref name="key" />jest nieprawidłowy <see cref="T:System.Windows.Input.Key" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="displayString" />jest <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" />i <paramref name="modifiers" /> nie należy tworzyć prawidłowych <see cref="T:System.Windows.Input.KeyGesture" />wartości.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="DisplayString">
      <MemberSignature Language="C#" Value="public string DisplayString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.DisplayString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayString : string" Usage="System.Windows.Input.KeyGesture.DisplayString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ciąg reprezentujący tę <see cref="T:System.Windows.Input.KeyGesture" />wartość.</summary>
        <value>Ciąg wyświetlania dla tego <see cref="T:System.Windows.Input.KeyGesture" />elementu. Wartość domyślna to <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli w konstruktorze nie ustawiono ciągu wyświetlania, zwracany jest pusty ciąg.  
  
 Jeśli ta właściwość jest pusta, <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> Metoda zwraca ciąg utworzony <xref:System.Windows.Input.KeyGesture.Key%2A> z i <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplayStringForCulture">
      <MemberSignature Language="C#" Value="public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDisplayStringForCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDisplayStringForCulture (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDisplayStringForCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetDisplayStringForCulture : System.Globalization.CultureInfo -&gt; string" Usage="keyGesture.GetDisplayStringForCulture culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Informacje specyficzne dla kultury.</param>
        <summary>Zwraca ciąg, który może służyć do wyświetlania <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <returns>Ciąg do wyświetlenia</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ciąg wyświetlania został ustawiony przez konstruktora, ten ciąg jest zwracany; w przeciwnym razie ciąg jest tworzony z <xref:System.Windows.Input.KeyGesture.Key%2A> i <xref:System.Windows.Input.KeyGesture.Modifiers%2A> z wszelkimi niezbędnymi konwersjemi podlegającymi określonemu <xref:System.Globalization.CultureInfo> obiektowi.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyGesture.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera klucz skojarzony z tym <see cref="T:System.Windows.Input.KeyGesture" />elementem.</summary>
        <value>Klucz skojarzony z gestem.  Wartość domyślna to <see cref="F:System.Windows.Input.Key.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzona z co najmniej jedną <xref:System.Windows.Input.ModifierKeys>.  Wyjątkami od tej reguły są klawisze funkcyjne i klawiatury numeryczne, które mogą być poprawne <xref:System.Windows.Input.KeyGesture> .  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="keyGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">Element docelowy.</param>
        <param name="inputEventArgs">Dane wejściowe zdarzenia do porównania z tym gestem.</param>
        <summary>Określa, czy <see cref="T:System.Windows.Input.KeyGesture" /> jest to zgodne z danymi wejściowymi <see cref="T:System.Windows.Input.InputEventArgs" /> skojarzonymi z określonym obiektem.</summary>
        <returns><see langword="true" />Jeśli dane zdarzenia pasują <see cref="T:System.Windows.Input.KeyGesture" />do siebie; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `targetElement`może służyć do podejmowania bardziej konkretnej decyzji o tym, czy polecenie powinno być wywoływane dla określonego elementu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak sprawdzić, czy <xref:System.Windows.Input.KeyGesture> pasuje do danych wejściowych skojarzonych z wystąpieniem. <xref:System.Windows.Input.InputEventArgs> Utworzono procedurę obsługi <xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.KeyGesture.Matches%2A> zdarzeń, która porównuje dane zdarzenia z przy użyciu metody. <xref:System.Windows.UIElement.KeyDown>  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlerkeygesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlerkeygesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.KeyGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera klucze modyfikujące skojarzone z tym <see cref="T:System.Windows.Input.KeyGesture" />elementem.</summary>
        <value>Klawisze modyfikujące skojarzone z gestem. Wartość domyślna to <see cref="F:System.Windows.Input.ModifierKeys.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W większości przypadków <xref:System.Windows.Input.KeyGesture> musi być skojarzona z co najmniej jedną <xref:System.Windows.Input.ModifierKeys>. Wyjątkami od tej reguły są klawisze funkcyjne i klawiatury numeryczne, które mogą być poprawne <xref:System.Windows.Input.KeyGesture> . Na przykład można utworzyć <xref:System.Windows.Input.KeyGesture> przy użyciu tylko klawisza F12, ale aby użyć klawisza X <xref:System.Windows.Input.KeyGesture> w, musi być sparowany z klawiszem modyfikującym.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
  </Members>
</Type>
