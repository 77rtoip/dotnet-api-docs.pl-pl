<Type Name="CommandBinding" FullName="System.Windows.Input.CommandBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d5ecf960c21a4ded90a1be512d011436e1af9dbe" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69173484" /></Metadata><TypeSignature Language="C#" Value="public class CommandBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandBinding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandBinding" />
  <TypeSignature Language="F#" Value="type CommandBinding = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Tworzy powiązanie a <see cref="T:System.Windows.Input.RoutedCommand" /> z programami obsługi zdarzeń, które implementują polecenie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Input.CommandBinding> kojarzy polecenie <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / zzdarzeniami<xref:System.Windows.Input.CommandBinding.PreviewCanExecute> i ,/które implementująiokreślająstanpolecenia.<xref:System.Windows.Input.CommandBinding.CanExecute> <xref:System.Windows.Input.CommandBinding.Executed>  
  
 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> <xref:System.Windows.Input.RoutedCommand.Execute%2A> Gdy wywoływana jest<xref:System.Windows.Input.RoutedCommand> Metoda lub, <xref:System.Windows.Input.CommandBinding.PreviewExecuted> zdarzeniasą/ wywoływane w celu polecenia. <xref:System.Windows.Input.CommandBinding.Executed> <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute>  Jeśli obiekt docelowy polecenia ma <xref:System.Windows.Input.CommandBinding> dla polecenia, są wywoływane odpowiednie programy obsługi.  Jeśli obiekt docelowy polecenia nie ma <xref:System.Windows.Input.CommandBinding> dla polecenia, zdarzenia są kierowane przez drzewo elementów do momentu znalezienia elementu, który ma wartość. <xref:System.Windows.Input.CommandBinding>  
  
 A <xref:System.Windows.Input.CommandBinding> ma ograniczone użycie <xref:System.Windows.Input.ICommand> , które nie <xref:System.Windows.Input.RoutedCommand>jest.  Wynika to z <xref:System.Windows.Input.CommandBinding> faktu, że program tworzy powiązanie polecenia <xref:System.Windows.Input.ExecutedRoutedEventHandler> z <xref:System.Windows.Input.CanExecuteRoutedEventHandler> i <xref:System.Windows.Input.CommandManager.Executed> , które nasłuchuje zdarzeń i <xref:System.Windows.Input.CommandManager.CanExecute> zdarzenia kierowane, które <xref:System.Windows.Input.RoutedCommand.Execute%2A> są wywoływane, gdy metoda i <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> <xref:System.Windows.Input.RoutedCommand>są wywoływane.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.CommandBinding" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Input.CommandBinding" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding command" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
      </Parameters>
      <Docs>
        <param name="command">Polecenie, na podstawie którego ma <see cref="T:System.Windows.Input.RoutedCommand" /> zostać utworzona nowa wartość.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Input.CommandBinding" /> klasy przy użyciu określonego <see cref="T:System.Windows.Input.ICommand" />elementu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">Polecenie, na podstawie którego ma <see cref="T:System.Windows.Input.RoutedCommand" /> zostać utworzona nowa wartość.</param>
        <param name="executed">Procedura obsługi dla <see cref="E:System.Windows.Input.CommandBinding.Executed" /> zdarzenia na nowym <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Input.CommandBinding" /> klasy za pomocą określonego <see cref="T:System.Windows.Input.ICommand" /> i określonego <see cref="E:System.Windows.Input.CommandBinding.Executed" /> programu obsługi zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed, class System.Windows.Input.CanExecuteRoutedEventHandler canExecute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler, canExecute As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed, System::Windows::Input::CanExecuteRoutedEventHandler ^ canExecute);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed, canExecute)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
        <Parameter Name="canExecute" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">Polecenie, na podstawie którego ma <see cref="T:System.Windows.Input.RoutedCommand" /> zostać utworzona nowa wartość.</param>
        <param name="executed">Procedura obsługi dla <see cref="E:System.Windows.Input.CommandBinding.Executed" /> zdarzenia na nowym <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <param name="canExecute">Procedura obsługi dla <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> zdarzenia na nowym <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Input.CommandBinding" /> klasy przy użyciu określonych <see cref="T:System.Windows.Input.ICommand" /> i określonych <see cref="E:System.Windows.Input.CommandBinding.Executed" /> programów oraz <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> obsługi zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler CanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event CanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ CanExecute;" />
      <MemberSignature Language="F#" Value="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy polecenie skojarzone z tym <see cref="T:System.Windows.Input.CommandBinding" /> inicjuje sprawdzanie, aby określić, czy polecenie może być wykonywane w celu wykonania polecenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wywoływana jest <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Metoda dla obiektu, zdarzenie jest wywoływane w celu polecenia.  Jeśli zdarzenie nie jest obsługiwane, <xref:System.Windows.Input.CommandBinding.CanExecute> zdarzenie jest zgłaszane.  Jeśli obiekt docelowy polecenia ma <xref:System.Windows.Input.CommandBinding> dla polecenia <xref:System.Windows.Input.CommandBinding.CanExecute> , procedura obsługi <xref:System.Windows.Input.CommandBinding> jest wywoływana.  Jeśli obiekt docelowy polecenia nie ma <xref:System.Windows.Input.CommandBinding> dla polecenia <xref:System.Windows.Input.CommandBinding.CanExecute> , zdarzenie bąbelkowe przeszukuje drzewo elementów dla elementu, który jest <xref:System.Windows.Input.CommandBinding> skojarzony z poleceniem.  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.  
  
   
  
## Examples  
 Poniższy <xref:System.Windows.Input.CommandBinding> przykład tworzy <xref:System.Windows.Input.ExecutedRoutedEventHandler> mapowanie <xref:System.Windows.Input.CanExecuteRoutedEventArgs> iprogramuobsługipolecenia.<xref:System.Windows.Input.ApplicationCommands.Open%2A>  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 Poniżej przedstawiono zestawy, <xref:System.Windows.Input.CanExecuteRoutedEventHandler> do `true`których <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> są ustawiane.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CommandBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.CommandBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.Input.ICommand" /> skojarzoną z tym <see cref="T:System.Windows.Input.CommandBinding" />elementem.</summary>
        <value>Polecenie skojarzone z tym powiązaniem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy <xref:System.Windows.Input.CommandBinding> przykład tworzy <xref:System.Windows.Input.ExecutedRoutedEventHandler> mapowanie <xref:System.Windows.Input.CanExecuteRoutedEventArgs> iprogramuobsługipolecenia.<xref:System.Windows.Input.ApplicationCommands.Open%2A>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 Poniżej przedstawiono zestawy, <xref:System.Windows.Input.CanExecuteRoutedEventHandler> do `true`których <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> są ustawiane.  
  
 [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 Poniżej przedstawiono, który <xref:System.Windows.Input.ExecutedRoutedEventHandler> <xref:System.Windows.MessageBox> tworzy, gdy polecenie jest wykonywane.  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler Executed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler Executed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.Executed" />
      <MemberSignature Language="VB.NET" Value="Public Event Executed As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ Executed;" />
      <MemberSignature Language="F#" Value="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy polecenie skojarzone z tym <see cref="T:System.Windows.Input.CommandBinding" /> działaniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wykonuje, <xref:System.Windows.Input.CommandBinding.PreviewExecuted> wywołuje zdarzenie w obiekcie docelowym polecenia. <xref:System.Windows.Input.RoutedCommand>  Jeśli zdarzenie nie jest obsługiwane <xref:System.Windows.Input.CommandBinding.Executed> , zdarzenie jest zgłaszane w celu polecenia. <xref:System.Windows.Input.CommandBinding.PreviewExecuted>  Jeśli obiekt docelowy polecenia ma <xref:System.Windows.Input.CommandBinding> dla określonego polecenia <xref:System.Windows.Input.CommandBinding.Executed> , program obsługi dla tego <xref:System.Windows.Input.CommandBinding> jest wywoływany.  Jeśli obiekt docelowy polecenia nie ma <xref:System.Windows.Input.CommandBinding> dla tego konkretnego polecenia, <xref:System.Windows.Input.CommandBinding.Executed> zdarzenie bąbelkowe przeszukiwanie drzewa elementów dla elementu, który jest <xref:System.Windows.Input.CommandBinding> skojarzony z poleceniem.  Jeśli nie <xref:System.Windows.Input.CommandBinding> zostanie znaleziona, polecenie nie jest obsługiwane.  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.  
  
   
  
## Examples  
 Poniższy <xref:System.Windows.Input.CommandBinding> przykład tworzy <xref:System.Windows.Input.ExecutedRoutedEventHandler> mapowanie <xref:System.Windows.Input.CanExecuteRoutedEventArgs> iprogramuobsługipolecenia.<xref:System.Windows.Input.ApplicationCommands.Open%2A>  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 Poniżej przedstawiono, który <xref:System.Windows.Input.ExecutedRoutedEventHandler> <xref:System.Windows.MessageBox> tworzy, gdy polecenie jest wykonywane.  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewCanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ PreviewCanExecute;" />
      <MemberSignature Language="F#" Value="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy polecenie skojarzone z tym <see cref="T:System.Windows.Input.CommandBinding" /> inicjuje sprawdzanie, aby określić, czy polecenie można wykonać na bieżącym obiekcie docelowym polecenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wywoływana jest <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> Metoda dla elementu, zdarzenie jest wywoływane w obiekcie docelowym <xref:System.Windows.Input.CommandBinding> polecenia, jeśli element docelowy polecenia ma dla polecenia. <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Następnie procedura obsługi dla tego <xref:System.Windows.Input.CommandBinding> elementu jest wywoływana. <xref:System.Windows.Input.CommandBinding.CanExecute>  Jeśli obiekt docelowy polecenia nie ma <xref:System.Windows.Input.CommandBinding> dla polecenia <xref:System.Windows.Input.CommandBinding.CanExecute> , zdarzenie bąbelkowe przeszukuje drzewo elementów dla elementu, który jest <xref:System.Windows.Input.CommandBinding> skojarzony z poleceniem.  Jeśli zdarzenie nie jest obsługiwane, <xref:System.Windows.Input.CommandBinding.CanExecute> zdarzenie jest zgłaszane.  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.Input.CommandBinding.CanExecute>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewExecuted As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ PreviewExecuted;" />
      <MemberSignature Language="F#" Value="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy polecenie skojarzone z tym <see cref="T:System.Windows.Input.CommandBinding" /> działaniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wykonuje, <xref:System.Windows.Input.CommandBinding.PreviewExecuted> wywołuje zdarzenie w obiekcie docelowym polecenia. <xref:System.Windows.Input.RoutedCommand>  Jeśli obiekt docelowy polecenia ma <xref:System.Windows.Input.CommandBinding> dla polecenia, <xref:System.Windows.Input.CommandBinding.PreviewExecuted> <xref:System.Windows.Input.CommandBinding> jest wywoływany przez program obsługi.  Jeśli obiekt docelowy polecenia nie ma <xref:System.Windows.Input.CommandBinding> dla polecenia, to <xref:System.Windows.Input.CommandBinding.PreviewExecuted> zdarzenie tuneluje w drzewie elementów wyszukiwanie elementu, który jest <xref:System.Windows.Input.CommandBinding> skojarzony z poleceniem.  Jeśli zdarzenie podglądu nie jest obsługiwane, <xref:System.Windows.Input.CommandBinding.Executed> zdarzenie jest wywoływane na obiekcie docelowym polecenia.  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.Input.CommandBinding.Executed>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>
