<Type Name="PhysicalAddress" FullName="System.Net.NetworkInformation.PhysicalAddress">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="60936bae143ea68d22d99243f51e63e4ba126f83" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30558448" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PhysicalAddress" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PhysicalAddress extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PhysicalAddress" />
  <TypeSignature Language="VB.NET" Value="Public Class PhysicalAddress" />
  <TypeSignature Language="C++ CLI" Value="public ref class PhysicalAddress" />
  <AssemblyInfo>
    <AssemblyName>System.Net.NetworkInformation</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza adres kontroli dostępu do nośnika (MAC) dla interfejsu sieciowego (karty).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Adres MAC lub adresu fizycznego jest adres sprzętowy, który unikatowo identyfikuje w każdym węźle, takich jak komputer lub drukarki w sieci.  
  
 Wystąpienia tej klasy są zwracane przez <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia wszystkie interfejsy adresów fizycznych na komputerze lokalnym.  
  
 [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]
 [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PhysicalAddress (byte[] address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PhysicalAddress(cli::array &lt;System::Byte&gt; ^ address);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">A <see cref="T:System.Byte" /> tablicę zawierającą ten adres.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wspólnych scenariuszy, aplikacje nie trzeba wywołać ten konstruktor; wystąpienia tej klasy są zwracane przez <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> metody.  
  
 Należy pamiętać, że można również użyć <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> metodę w celu utworzenia nowego wystąpienia <xref:System.Net.NetworkInformation.PhysicalAddress>.  
  
   
  
## Examples  
 Poniższy przykładowy kod tworzy nową <xref:System.Net.NetworkInformation.PhysicalAddress> obiektu.  
  
 [!code-cpp[NCLPhysicalAddress#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#4)]
 [!code-csharp[NCLPhysicalAddress#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand">
          <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> Do porównania z bieżącym wystąpieniem.</param>
        <summary>Porównuje dwa <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> wystąpień.</summary>
        <returns>
          <see langword="true" /> Jeśli to wystąpienie i określone wystąpienie zawierają ten sam adres; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu porównuje dwa <xref:System.Net.NetworkInformation.PhysicalAddress> wystąpień.  
  
 [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]
 [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddressBytes">
      <MemberSignature Language="C#" Value="public byte[] GetAddressBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetAddressBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddressBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetAddressBytes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca adres bieżącego wystąpienia.</summary>
        <returns>A <see cref="T:System.Byte" /> tablicę zawierającą ten adres.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod wywołuje tę metodę można pobrać adresu <xref:System.Net.NetworkInformation.PhysicalAddress> i formatuje adres do wyświetlenia.  
  
 [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]
 [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość skrótu adres fizyczny.</summary>
        <returns>Wartość skrótu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.NetworkInformation.PhysicalAddress None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.NetworkInformation.PhysicalAddress None" />
      <MemberSignature Language="DocId" Value="F:System.Net.NetworkInformation.PhysicalAddress.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly None As PhysicalAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::NetworkInformation::PhysicalAddress ^ None;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PhysicalAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca nowy <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> wystąpienia z adresem zerowej długości. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> Metoda zwraca <xref:System.Net.NetworkInformation.PhysicalAddress.None> Jeśli określisz `null` adres.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, za pomocą tego pola, aby przetestować wynik analizy adresu.  
  
 [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]
 [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.NetworkInformation.PhysicalAddress Parse (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.NetworkInformation.PhysicalAddress Parse(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (address As String) As PhysicalAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::NetworkInformation::PhysicalAddress ^ Parse(System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PhysicalAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">A <see cref="T:System.String" /> zawierający adres, który będzie służyć do zainicjowania <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> wystąpienia zwracane przez tę metodę.</param>
        <summary>Analizuje określony <see cref="T:System.String" /> i zapisuje jego zawartość w postaci bajtów adres <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> zwracane przez tę metodę.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> wystąpienia o określonym adresie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `address` Parametr musi zawierać ciąg, który może zawierać tylko cyfry i wielkich liter w wartości szesnastkowe. Przykładowe formaty ciągu, które są dopuszczalne są następujące:  
  
 `001122334455`  
  
 `00-11-22-33-44-55`  
  
 `F0-E1-D2-C3-B4-A5`  
  
 Należy pamiętać, że adres zawiera `f0-e1-d2-c3-b4-a5` zakończy się niepowodzeniem przeanalizować i zgłosić wyjątek.  
  
 Użyj <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> metoda pobierania adresu z istniejącego <xref:System.Net.NetworkInformation.PhysicalAddress> wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Net.NetworkInformation.PhysicalAddress> wystąpienia przez wywołanie metody <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> metody.  
  
 [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]
 [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="address" /> Parametr zawiera adres niedozwolony sprzętu.  
  
 Ten wyjątek ma miejsce, gdy <paramref name="address" /> parametr zawiera niepoprawny format ciągu.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.String" /> reprezentację adres tego wystąpienia.</summary>
        <returns>A <see cref="T:System.String" /> zawierający adres zawarte w tym wystąpieniu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, wyświetlanie adres w <xref:System.Net.NetworkInformation.PhysicalAddress> wystąpienia.  
  
 [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]
 [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>