<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc00d57ce6356a2a133f00722352bceb41134894" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36552348" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Umożliwia aplikacji ustalić, czy komputer zdalny jest dostępny za pośrednictwem sieci.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje używają <xref:System.Net.NetworkInformation.Ping> klasę, aby wykryć, czy komputer zdalny jest nieosiągalny.  
  
 Topologia sieci można określić, czy <xref:System.Net.NetworkInformation.Ping> pomyślnie można skontaktować się z hostem zdalnym. Obecność i konfiguracji serwera proxy, urządzeń translacji adresów adresów sieciowych lub zapory można zapobiec <xref:System.Net.NetworkInformation.Ping> pomyślne. Pomyślnie <xref:System.Net.NetworkInformation.Ping> oznacza to, że tylko zdalnego hosta jest osiągalny w sieci; obecności wyższej poziomu usług (takich jak serwer sieci Web) na hoście zdalnym nie jest gwarantowana.  
  
 Ta klasa udostępnia funkcjonalność podobną do narzędzia wiersza polecenia Ping.exe. <xref:System.Net.NetworkInformation.Ping.Send%2A> i <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metod wysyłania komunikatu żądania echa protokołu komunikatu sterowania Internetem (ICMP) na komputerze zdalnym i czeka na komunikat odpowiedzi echa ICMP z tego komputera. Aby uzyskać szczegółowy opis komunikatów protokołu ICMP, zapoznaj się z RFC 792, dostępne pod adresem [ https://www.ietf.org ](https://www.ietf.org/).  
  
 Używane są następujące typy z <xref:System.Net.NetworkInformation.Ping> klasy i opisano szczegółowo poniżej.  
  
|**Nazwa typu**|**Opis**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|Definiuje kodów stanu, opisujące wynik komunikatu żądania echa protokołu ICMP.|  
|<xref:System.Net.NetworkInformation.PingOptions>|Zezwala na konfigurowanie lub pobierania ustawień, które kontrolują, ile razy pakiet żądania mogą być przekazywane (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>), i czy mogą być pofragmentowane (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ).|  
|<xref:System.Net.NetworkInformation.PingReply>|Zawiera wyniki żądanie echa ICMP.|  
|<xref:System.Net.NetworkInformation.PingException>|Element zgłaszany, gdy wystąpienia nieodwracalnego błędu.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Zawiera dane skojarzone z <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenia, które są wywoływane, gdy <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania zakończeniu lub została anulowana.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|Delegata, który udostępnia metody wywołania zwrotnego wywoływana, gdy <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania zakończeniu lub została anulowana.|  
  
 <xref:System.Net.NetworkInformation.Ping.Send%2A> i <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody zwracają odpowiedź w <xref:System.Net.NetworkInformation.PingReply> obiektu. <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType> Zwraca <xref:System.Net.NetworkInformation.IPStatus> wartości wskazującej, wynik żądania.  
  
 Podczas wysyłania żądania, należy określić komputera zdalnego. Aby to zrobić, podając ciąg nazwy i adresu IP w formacie ciągu hosta lub <xref:System.Net.IPAddress> obiektu.  
  
 Można również określić jedną z następujących typów informacji:  
  
-   Dane towarzyszący żądaniu. Określanie `buffer` pozwala dowiedzieć się czas wymagany dla pakietu o rozmiarze określonym do i z hosta zdalnego i maksymalna jednostka transmisji ścieżki sieciowej. (Zobacz <xref:System.Net.NetworkInformation.Ping.Send%2A> lub <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads które trwają `buffer` parametru.)  
  
-   Określa, czy pakiet Echo protokołu ICMP może fragmentacji podczas przesyłania. (Zobacz <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości i <xref:System.Net.NetworkInformation.Ping.Send%2A> lub <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads które trwają `options` parametru.)  
  
-   Ile razy węzłów routingu, takie jak routery czy bramy, może przekazywać pakiety przed jego albo dociera do komputera docelowego lub zostaną odrzucone. (Zobacz <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> i <xref:System.Net.NetworkInformation.Ping.Send%2A> lub <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads które trwają `options` parametru.)  
  
-   Limit czasu, w którym można odebrać odpowiedzi. (Zobacz <xref:System.Net.NetworkInformation.Ping.Send%2A> lub <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads które trwają `timeout` parametru.  
  
 <xref:System.Net.NetworkInformation.Ping> Klasy oferuje synchroniczne i asynchroniczne metody wysyłania żądania. Jeśli aplikacja powinna zablokować podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne. Jeśli aplikacja nie powinny blokować, użycie asynchronicznego <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody. Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wykonuje we własnym wątku, który jest automatycznie przydzielone z puli wątków. Po zakończeniu operacji asynchronicznej, zgłasza <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> pełnomocnika, aby określić metodę, która jest wywoływana dla <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenia. Należy dodać <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda obiektu delegowanego <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który zawiera <xref:System.Net.NetworkInformation.PingReply> obiekt, który opisano wynik <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania.  
  
 Nie można użyć tego samego wystąpienia <xref:System.Net.NetworkInformation.Ping> klasę, aby wygenerować wiele równoczesnych żądań echa protokołu ICMP. Wywoływanie <xref:System.Net.NetworkInformation.Ping.Send%2A> podczas <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołanie jest w toku lub wywoływania <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wielokrotnie ukończenie wszystkich poprzednich wywołań ma przyczyny <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, przy użyciu <xref:System.Net.NetworkInformation.Ping> klasy synchronicznie.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 Poniższy przykład kodu pokazuje, przy użyciu <xref:System.Net.NetworkInformation.Ping> klasy asynchronicznie.  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.NetworkInformation.Ping" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie kodu pokazano tworzenie <xref:System.Net.NetworkInformation.Ping> wystąpienia. Pełny przykład jest dostępny w <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> powoduje zwolnienie tylko niezarządzane zasoby.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Net.NetworkInformation.Ping" /> obiektu i opcjonalnie usuwa zarządzane zasoby.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną `Dispose()` — metoda i <xref:System.ComponentModel.Component.Finalize%2A> metody. Publicznego `Dispose()` wywołuje chronioną metodę metody <xref:System.Net.NetworkInformation.Ping.Dispose%2A> metody z `disposing` ustawiono parametr `true`. <xref:System.ComponentModel.Component.Finalize%2A> wywołuje `Dispose` z `disposing` ustawioną `false`.  
  
 Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Net.NetworkInformation.Ping> obiektu odwołania. Ta metoda wywołuje `Dispose()` metody każdego odwołuje się do obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> obiekt, który zawiera dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które dziedziczą z <xref:System.Net.NetworkInformation.Ping> klasy mogą przesłaniać tę metodę do wykonywania dodatkowych zadań, takich jak rejestrowanie danych zawartych w `e` parametru.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy operacja asynchroniczna, aby wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) i odbierać odpowiedniego komunikatu odpowiedzi echa ICMP zakończeniu lub została anulowana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje używają <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie, aby uzyskać informacje na temat stanu ukończenia i danych zbieranych przez wywołanie do jednego z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody. <xref:System.Net.NetworkInformation.PingCompletedEventHandler> Delegata zawiera wywołanie wstecz metoda wywoływana, gdy <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> zgłasza to zdarzenie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, określając metodę wywołania zwrotnego <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Pełny przykład jest dostępny w <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z komputerem zdalnym i odbierać odpowiedniego ICMP echo komunikat odpowiedzi z komputera zdalnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Adres IP zwrócony przez <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia może prowadzić złośliwego komputera zdalnego. Nie należy nawiązywać połączenia z komputerem zdalnym za pomocą tego. Korzystania z serwera DNS, aby określić adres IP komputera, z którym chcesz się połączyć.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> , Które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP.</param>
        <summary>Próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, uprawnia do odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> obiektu, który zawiera informacje o komunikatu odpowiedzi echa ICMP, jeśli zostało odebrane lub opisuje przyczynę błędu, jeśli wiadomość nie została odebrana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wysyła do hosta, który jest określony przez `address` 32 <xref:System.Byte> buforu danych z komunikatem echa protokołu ICMP. Metoda oczekuje 5 sekund dla komunikatu odpowiedzi echa ICMP. Jeśli nie otrzyma odpowiedź w tym czasie, metoda zwraca i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Pakiet lub fragmenty pakietu (gdy pofragmentowany) mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wywołanie tej metody.  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> , które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <summary>Próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) na określony komputer i odbierania odpowiedniego ICMP echo komunikat odpowiedzi z tego komputera.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> obiekt zawierający informacje o komunikatu odpowiedzi echa ICMP, jeśli zostało odebrane lub udostępnia przyczynę błędu, jeśli wiadomość nie została odebrana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wysyła 32 <xref:System.Byte> buforu danych z komunikatem echa protokołu ICMP. Metoda oczekuje 5 sekund dla komunikatu odpowiedzi echa ICMP. Jeśli nie otrzyma odpowiedź w tym czasie, metoda zwraca i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Pakiet lub fragmenty pakietu (gdy pofragmentowany) mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje wywołanie tej metody.  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP. Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> , Które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <summary>Próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, uprawnia do odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera. Ta metoda służy do określenia wartości limitu czasu dla operacji.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> obiekt, który zawiera informacje o komunikatu odpowiedzi echa ICMP, jeśli zostało odebrane lub udostępnia przyczynę błędu, jeśli wiadomość nie została odebrana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli w określonym w czasie nie odebrano komunikat odpowiedzi echa ICMP `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Pakiet lub fragmenty pakietów mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Na przykład, który demonstruje wywołania <xref:System.Net.NetworkInformation.Ping.Send%2A> metody, zobacz <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> , które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <summary>Próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) na określony komputer i odbierania odpowiedniego ICMP echo komunikat odpowiedzi z tego komputera. Ta metoda służy do określenia wartości limitu czasu dla operacji.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> obiekt, który zawiera informacje o komunikatu odpowiedzi echa ICMP, jeśli zostało odebrane lub udostępnia przyczynę błędu, jeśli wiadomość nie została odebrana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli w określonym w czasie nie odebrano komunikat odpowiedzi echa ICMP `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Pakiet lub fragmenty pakietu (gdy pofragmentowany) mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Na przykład, który demonstruje wywołania <xref:System.Net.NetworkInformation.Ping.Send%2A> metody, zobacz <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> , Które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <summary>Próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, uprawnia do odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> obiekt zawierający informacje o komunikatu odpowiedzi echa ICMP, jeśli zostało odebrane lub udostępnia przyczynę błędu, jeśli wiadomość nie została odebrana. Metoda zwróci <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> Jeśli pakiet przekracza maksymalna jednostka transmisji (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli w określonym w czasie nie odebrano komunikat odpowiedzi echa ICMP `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Pakiet lub fragmenty pakietów mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak wywołać tę metodę.  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.  - lub - <paramref name="buffer" /> jest <see langword="null" />, lub <paramref name="buffer" /> rozmiar jest większy niż 65 500 bajtów.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> , które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <summary>Próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu na określonym komputerze i odbierania odpowiedniego ICMP echo komunikat odpowiedzi z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> obiekt, który zawiera informacje o komunikatu odpowiedzi echa ICMP, jeśli zostało odebrane lub udostępnia przyczynę błędu, jeśli wiadomość nie została odebrana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli w określonym w czasie nie odebrano komunikat odpowiedzi echa ICMP `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Pakiet lub fragmenty pakietów mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Na przykład, który pokazuje sposób wywoływania <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, zobacz <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> jest <see langword="null" /> lub jest pustym ciągiem ("").  - lub - <paramref name="buffer" /> jest <see langword="null" />, lub <paramref name="buffer" /> rozmiar jest większy niż 65 500 bajtów.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> , Które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> obiektu kontrolować fragmentacji i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</param>
        <summary>Próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu do komputera, który ma określony <see cref="T:System.Net.IPAddress" /> uprawnia do odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji i fragmentacja kontroli i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> obiekt zawierający informacje o komunikatu odpowiedzi echa ICMP, jeśli zostało odebrane lub udostępnia przyczynę błędu, jeśli wiadomość nie została odebrana. Metoda zwróci <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> Jeśli pakiet przekracza maksymalna jednostka transmisji (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie odebrano komunikat odpowiedzi echa ICMP w czasie określonym przez `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 Jeśli <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwość jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Użyj <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> właściwość, aby określić maksymalną liczbę razy komunikat echa ICMP może być przekazywany przed osiągnięciem miejsca docelowego. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak wywołać tę metodę.  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.  - lub - <paramref name="buffer" /> jest <see langword="null" />, lub <paramref name="buffer" /> rozmiar jest większy niż 65 500 bajtów.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> , które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> obiektu kontrolować fragmentacji i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</param>
        <summary>Próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu na określonym komputerze i odbierania odpowiedniego ICMP echo komunikat odpowiedzi z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji i fragmentacja kontroli i Time-to-Live wartości dla pakietów protokołu ICMP.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> obiekt, który zawiera informacje o komunikatu odpowiedzi echa ICMP, jeśli zostało odebrane lub udostępnia przyczynę błędu, jeśli wiadomość nie została odebrana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie odebrano komunikat odpowiedzi echa ICMP w czasie określonym przez `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 Jeśli <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwość jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Użyj <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> właściwość, aby określić maksymalną liczbę razy komunikat echa ICMP może być przekazywany przed osiągnięciem miejsca docelowego. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak wywołać tę metodę.  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> jest <see langword="null" /> lub ciągiem o zerowej długości.  - lub - <paramref name="buffer" /> jest <see langword="null" />, lub <paramref name="buffer" /> rozmiar jest większy niż 65 500 bajtów.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asynchronicznie próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) do komputera i odbierać odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Te metody powodują wątku głównego aplikacji zablokować. Jeśli chcesz zablokować podczas oczekiwania na komunikat odpowiedzi echa ICMP, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metody.  
  
> [!NOTE]
>  Adres IP zwrócony przez <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody może prowadzić złośliwego komputera zdalnego. Nie należy nawiązywać połączenia z komputerem zdalnym za pomocą tego. Korzystania z serwera DNS, aby określić adres IP komputera, z którym chcesz się połączyć.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> , Które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP.</param>
        <param name="userToken">Obiekt, który jest przekazywany do metody wywoływane po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, uprawnia do odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła wiadomość echo asynchronicznie, a po zakończeniu operacji (pomyślnie lub nie), zwraca informacje o stanie do aplikacji. Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, gdy aplikacja nie powinny blokować. Wykonuje każde wywołanie tej metody w oddzielnym wątku, który jest automatycznie przydzielone z puli wątków. Po zakończeniu operacji asynchronicznej, zgłasza <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Aby określić metodę, która jest wywoływana po <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> zgłasza zdarzenie, należy dodać <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda obiektu delegowanego <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który zawiera <xref:System.Net.NetworkInformation.PingReply> obiekt, który opisano wynik <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt dziedziczy <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> właściwości. Ta właściwość zawiera `userToken` przekazany obiekt <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania.  
  
> [!NOTE]
>  Jeśli aplikacja powinna zablokować podczas oczekiwania na odpowiedź, użyj jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Ta metoda wysyła 32 <xref:System.Byte> buforu danych z komunikatem echa protokołu ICMP. Metoda oczekuje 5 sekund dla komunikatu odpowiedzi echa ICMP. Jeśli nie otrzyma odpowiedź w tym czasie, metoda zwraca i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Pakiet lub fragmenty pakietów mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Na przykład kod, który demonstruje wywołania <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, zobacz <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> metoda jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> , które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="userToken">Obiekt, który jest przekazywany do metody wywoływane po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) na określony komputer i odbierać odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła wiadomość echo asynchronicznie, a po zakończeniu operacji (pomyślnie lub nie), zwraca informacje o stanie do aplikacji. Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, gdy aplikacja nie powinny blokować. Wykonuje każde wywołanie tej metody w oddzielnym wątku, który jest automatycznie przydzielone z puli wątków. Po zakończeniu operacji asynchronicznej, zgłasza <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Aby określić metodę, która jest wywoływana po <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> zgłasza zdarzenie, należy dodać <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda obiektu delegowanego <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który zawiera <xref:System.Net.NetworkInformation.PingReply> obiekt, który opisano wynik <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt dziedziczy <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> właściwości. Ta właściwość zawiera `userToken` przekazany obiekt <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania.  
  
> [!NOTE]
>  Jeśli aplikacja powinna zablokować podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Ta metoda wysyła 32 <xref:System.Byte> buforu danych z komunikatem echa protokołu ICMP. Metoda oczekuje 5 sekund dla komunikatu odpowiedzi echa ICMP. Jeśli otrzymasz odpowiedź w tym czasie metoda zwraca i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Pakiet lub fragmenty pakietów mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Na przykład kod, który demonstruje wywołania <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, zobacz <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> metoda jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> Nie można rozpoznać prawidłowy adres IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> , Które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="userToken">Obiekt, który jest przekazywany do metody wywoływane po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, uprawnia do odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła wiadomość Echo asynchronicznie, a po zakończeniu operacji (pomyślnie lub nie), zwraca informacje o stanie do aplikacji. Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, gdy aplikacja nie powinny blokować. Wykonuje każde wywołanie w oddzielnym wątku, który jest automatycznie przydzielone z puli wątków. Po zakończeniu operacji asynchronicznej, zgłasza <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> pełnomocnika, aby określić metodę, która jest wywoływana po <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołuje zdarzenie. Należy dodać <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda obiektu delegowanego <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który zawiera <xref:System.Net.NetworkInformation.PingReply> obiekt, który opisano wynik <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt dziedziczy <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> właściwości. Ta właściwość zawiera `userToken` przekazany obiekt <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania.  
  
 Jeśli aplikacja powinna zablokować podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli nie odebrano komunikat odpowiedzi echa ICMP w czasie określonym przez `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Pakiet lub fragmenty pakietu (gdy pofragmentowany) mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Na przykład kod, który demonstruje wywołania <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, zobacz <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> metoda jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> , które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="userToken">Obiekt, który jest przekazywany do metody wywoływane po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) na określony komputer i odbierać odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła wiadomość Echo asynchronicznie, a po zakończeniu operacji (pomyślnie lub nie), zwraca informacje o stanie do aplikacji. Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, gdy aplikacja nie powinny blokować. Wykonuje każde wywołanie w oddzielnym wątku, który jest automatycznie przydzielone z puli wątków. Po zakończeniu operacji asynchronicznej, zgłasza <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> pełnomocnika, aby określić metodę, która jest wywoływana po <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołuje zdarzenie. Należy dodać <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda obiektu delegowanego <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który zawiera <xref:System.Net.NetworkInformation.PingReply> obiekt, który opisano wynik <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt dziedziczy <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> właściwości. Ta właściwość zawiera `userToken` przekazany obiekt <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania.  
  
 Jeśli aplikacja powinna zablokować podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli nie odebrano komunikat odpowiedzi echa ICMP w czasie określonym przez `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Pakiet lub fragmenty pakietu (gdy pofragmentowany) mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Na przykład kod, który demonstruje wywołania <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, zobacz <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> Nie można rozpoznać prawidłowy adres IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> , Które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <param name="userToken">Obiekt, który jest przekazywany do metody wywoływane po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, uprawnia do odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wysyła komunikat echo asynchronicznie, a po zakończeniu operacji (pomyślnie lub nie), zwraca informacje o stanie do aplikacji. Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, gdy aplikacja nie powinny blokować. Wykonuje każde wywołanie w oddzielnym wątku, który jest automatycznie przydzielone z puli wątków. Po zakończeniu operacji asynchronicznej, zgłasza <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Aby określić metodę, która jest wywoływana po <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> zgłasza zdarzenie, należy dodać <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda obiektu delegowanego <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który zawiera <xref:System.Net.NetworkInformation.PingReply> obiekt, który opisano wynik <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt dziedziczy <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> właściwości. Ta właściwość zawiera `userToken` przekazany obiekt <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania.  
  
> [!NOTE]
>  Jeśli aplikacja zablokuje się podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli nie odebrano komunikat odpowiedzi echa ICMP w czasie określonym przez `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Pakiet lub fragmenty pakietu (gdy pofragmentowany) mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Na przykład kod, który demonstruje wywołania <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, zobacz <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.  - lub - <paramref name="buffer" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> , które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <param name="userToken">Obiekt, który jest przekazywany do metody wywoływane po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu na określonym komputerze i odbierać odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła wiadomość Echo asynchronicznie, a po zakończeniu operacji (pomyślnie lub nie), zwraca informacje o stanie do aplikacji. Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, gdy aplikacja nie powinny blokować. Wykonuje każde wywołanie w oddzielnym wątku, który jest automatycznie przydzielone z puli wątków. Po zakończeniu operacji asynchronicznej, zgłasza <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> pełnomocnika, aby określić metodę, która jest wywoływana po <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołuje zdarzenie. Należy dodać <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda obiektu delegowanego <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt zawierający <xref:System.Net.NetworkInformation.PingReply> obiekt, który opisano wynik <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt dziedziczy <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> właściwości. Ta właściwość zawiera `userToken` przekazany obiekt <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania.  
  
 Jeśli aplikacja powinna zablokować podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli nie odebrano komunikat odpowiedzi echa ICMP w czasie określonym przez `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 To przeciążenie używa ustawień domyślnych dla pakietów fragmentacji i przesyłanie dalej pakietów. Pakiet zawierający komunikat echa ICMP może fragmentacji przesyłania Jeśli rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, który może być przesyłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi. Aby zapobiec fragmentacji, użyj jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, która przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwości `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Pakiet lub fragmenty pakietu (gdy pofragmentowany) mogą być przekazywane przez węzły routingu 128 razy zanim zostanie usunięty. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które przyjmuje `options` parametru i ustaw <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> na żądaną wartość. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, zobacz <xref:System.Net.NetworkInformation.Ping> Przegląd klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> jest <see langword="null" /> lub jest pustym ciągiem ("").  - lub - <paramref name="buffer" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> Nie można rozpoznać prawidłowy adres IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> , Które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP.</param>
        <param name="timeout">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> obiektu kontrolować fragmentacji i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</param>
        <param name="userToken">Obiekt, który jest przekazywany do metody wywoływane po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, uprawnia do odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji i fragmentacja kontroli i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła wiadomość Echo asynchronicznie, a po zakończeniu operacji (pomyślnie lub nie), zwraca informacje o stanie do aplikacji. Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, gdy aplikacja nie należy blokować. Wykonuje każde wywołanie w oddzielnym wątku, który jest automatycznie przydzielone z puli wątków. Po zakończeniu operacji asynchronicznej, zgłasza <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> pełnomocnika, aby określić metodę, która jest wywoływana po <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołuje zdarzenie. Należy dodać <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda obiektu delegowanego <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który zawiera <xref:System.Net.NetworkInformation.PingReply> obiekt, który opisano wynik <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt dziedziczy <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> właściwości. Ta właściwość zawiera `userToken` przekazany obiekt <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania.  
  
 Jeśli aplikacja zablokuje się podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli nie odebrano komunikat odpowiedzi echa ICMP w czasie określonym przez `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 Jeśli <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwość jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Użyj <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> właściwość, aby określić maksymalną liczbę razy komunikat echa ICMP może być przekazywany przed osiągnięciem miejsca docelowego. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak wywołać tę metodę. Aby uzyskać implementację metody wywołania zwrotnego, zobacz <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sekcji przykład przeciążenia metody.  
  
 Poniższy przykład kodu wymaga następujących przestrzeni nazw:  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 Poniższy przykład kodu asynchronicznie wysyła komunikat echa protokołu ICMP.  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.  - lub - <paramref name="buffer" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> , które identyfikują komputer stanowiący lokalizację docelową dla komunikatu echa ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="timeout">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <param name="buffer">
          <see cref="T:System.Int32" /> Wartość, która określa maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> obiektu kontrolować fragmentacji i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</param>
        <param name="userToken">Obiekt, który jest przekazywany do metody wywoływane po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu na określonym komputerze i odbierać odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji i fragmentacja kontroli i Time-to-Live wartości dla pakietów protokołu ICMP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła wiadomość Echo asynchronicznie, a po zakończeniu operacji (pomyślnie lub nie), zwraca informacje o stanie do aplikacji. Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, gdy aplikacja nie należy blokować. Wykonuje każde wywołanie w oddzielnym wątku, który jest automatycznie przydzielone z puli wątków. Po zakończeniu operacji asynchronicznej, zgłasza <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeń. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> pełnomocnika, aby określić metodę, która jest wywoływana po <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołuje zdarzenie. Należy dodać <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda obiektu delegowanego <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który zawiera <xref:System.Net.NetworkInformation.PingReply> obiekt, który opisano wynik <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt dziedziczy <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> właściwości. Ta właściwość zawiera `userToken` przekazany obiekt <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołania.  
  
 Jeśli aplikacja powinna zablokować podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli nie odebrano komunikat odpowiedzi echa ICMP w czasie określonym przez `timeout` parametru echa ICMP zakończy się niepowodzeniem i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych numerów `timeout`, odpowiedź na polecenie Ping, może zostać odebrany nawet wtedy, gdy `timeout` upłynęły milisekund.  
  
 Jeśli <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> właściwość jest `true` i rozmiar całkowitą pakietu przekracza maksymalny rozmiar pakietu, które mogą być przenoszone przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Użyj <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> właściwość, aby określić maksymalną liczbę razy komunikat echa ICMP może być przekazywany przed osiągnięciem miejsca docelowego. Jeśli pakiet nie miejsca docelowego, po przesyłane dalej określoną liczbę razy, pakiet zostanie odrzucony, a nie żądania echa protokołu ICMP. W takim przypadku <xref:System.Net.NetworkInformation.PingReply.Status%2A> ma ustawioną wartość <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak wywołać tę metodę.  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> jest <see langword="null" /> lub jest pustym ciągiem ("").  - lub - <paramref name="buffer" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> jest adresem IPv6, a komputer jest systemem operacyjnym starszym niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> Nie można rozpoznać prawidłowy adres IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać wiadomość echa protokołu ICMP.  Wyliczenie skojarzone: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Anuluje wszystkie oczekujące żądania asynchroniczne do wysyłania wiadomości echa protokołu komunikatu sterowania Internetem (ICMP) i odbiera odpowiedniego komunikatu odpowiedzi echa ICMP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody, aby zakończyć wszelkie wywołania <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> nie zostały wypełnione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) na komputerze i odbiera odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera jako operację asynchroniczną.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">Adres IP, który identyfikuje komputer, który jest miejscem docelowym dla komunikatu echa protokołu ICMP.</param>
        <summary>Wyślij wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu do komputera, który ma określony <see cref="T:System.Net.IPAddress" />i odbiera odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601>> obiekt ukończy po wysłaniu pakiet ICMP i odpowiedzi zostały odebrane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Komputer, który jest miejscem docelowym dla komunikatu echa protokołu ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <summary>Wysyła kontroli protokołu ICMP (Internet Message) echo wiadomości z określonych danych buforu na określonym komputerze i wyświetlony odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601>> obiekt ukończy po wysłaniu pakiet ICMP i odpowiedzi zostały odebrane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">Adres IP, który identyfikuje komputer, który jest miejscem docelowym dla komunikatu echa protokołu ICMP.</param>
        <param name="timeout">Maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <summary>Wyślij wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu do komputera, który ma określony <see cref="T:System.Net.IPAddress" />i odbiera odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera jako operację asynchroniczną. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601>> obiekt ukończy po wysłaniu pakiet ICMP i odpowiedzi zostały odebrane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Komputer, który jest miejscem docelowym dla komunikatu echa protokołu ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="timeout">Maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <summary>Wysyła kontroli protokołu ICMP (Internet Message) echo wiadomości z określonych danych buforu na określonym komputerze i wyświetlony odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera jako operację asynchroniczną. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601>> obiekt ukończy po wysłaniu pakiet ICMP i odpowiedzi zostały odebrane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Adres IP, który identyfikuje komputer, który jest miejscem docelowym dla komunikatu echa protokołu ICMP.</param>
        <param name="timeout">Maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <summary>Wyślij wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu do komputera, który ma określony <see cref="T:System.Net.IPAddress" />i odbiera odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera jako operację asynchroniczną. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji i buforu do użycia dla operacji wysyłania i odbierania.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601>> obiekt ukończy po wysłaniu pakiet ICMP i odpowiedzi zostały odebrane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.  - lub - <paramref name="buffer" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65,500 bajtów.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Komputer, który jest miejscem docelowym dla komunikatu echa protokołu ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="timeout">Maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <summary>Wysyła kontroli protokołu ICMP (Internet Message) echo wiadomości z określonych danych buforu na określonym komputerze i wyświetlony odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera jako operację asynchroniczną. To przeciążenie umożliwia określenie wartości limitu czasu dla operacji i buforu do użycia dla operacji wysyłania i odbierania.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601>> obiekt ukończy po wysłaniu pakiet ICMP i odpowiedzi zostały odebrane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">Adres IP, który identyfikuje komputer, który jest miejscem docelowym dla komunikatu echa protokołu ICMP.</param>
        <param name="timeout">Maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> obiektu kontrolować fragmentacji i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</param>
        <summary>Wyślij wiadomość echa protokołu komunikatu sterowania Internetem (ICMP) z określonych danych buforu do komputera, który ma określony <see cref="T:System.Net.IPAddress" />i odbiera odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera jako operację asynchroniczną. To przeciążenie umożliwia Określ wartość limitu czasu dla operacji buforu do użycia dla operacji wysyłania i odbierania i Dostosuj fragmentacji i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601>> obiekt ukończy po wysłaniu pakiet ICMP i odpowiedzi zostały odebrane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> jest <see langword="null" />.  - lub - <paramref name="buffer" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Wystąpił wyjątek podczas wysyłania i odbierania wiadomości protokołu ICMP. Zobacz wyjątek wewnętrzny, aby dokładnie wyjątek, który został zgłoszony.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65,500 bajtów.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Komputer, który jest miejscem docelowym dla komunikatu echa protokołu ICMP. Wartość określona dla tego parametru może być nazwa hosta lub adres IP reprezentację ciągu.</param>
        <param name="timeout">Maksymalną liczbę milisekund (po wysłaniu wiadomości echo) oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> tablica, która zawiera dane wysyłane z wiadomością echa ICMP i zwracany w odpowiedzi echa ICMP. Tablica nie może zawierać więcej niż 65,500 bajtów.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> obiektu kontrolować fragmentacji i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</param>
        <summary>Wysyła kontroli protokołu ICMP (Internet Message) echo wiadomości z określonych danych buforu na określonym komputerze i wyświetlony odpowiedniego komunikatu odpowiedzi echa ICMP z tego komputera jako operację asynchroniczną. To przeciążenie umożliwia Określ wartość limitu czasu dla operacji buforu do użycia dla operacji wysyłania i odbierania i Dostosuj fragmentacji i Time-to-Live wartości dla pakietu komunikatu echa protokołu ICMP.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />.  Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócona <xref:System.Threading.Tasks.Task%601>> obiekt ukończy po wysłaniu pakiet ICMP i odpowiedzi zostały odebrane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>