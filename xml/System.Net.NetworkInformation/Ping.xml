<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61d5c249c213cc83c22d219e1656e7382350c217" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69113714" /></Metadata><TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Umożliwia aplikacji określenie, czy komputer zdalny jest dostępny za pośrednictwem sieci.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje używają <xref:System.Net.NetworkInformation.Ping> klasy do wykrywania, czy komputer zdalny jest osiągalny.  
  
 Topologia sieci może określić <xref:System.Net.NetworkInformation.Ping> , czy można pomyślnie nawiązać kontakt z hostem zdalnym. Obecność i Konfiguracja serwerów proxy, sprzętu translacji adresów sieciowych (NAT) lub zapór może nie <xref:System.Net.NetworkInformation.Ping> powieść się. Pomyślne <xref:System.Net.NetworkInformation.Ping> wskazuje, że dostęp do hosta zdalnego można osiągnąć w sieci; nie ma gwarancji obecności usług wyższego poziomu (takich jak serwer sieci Web) na hoście zdalnym.  
  
 Ta klasa udostępnia funkcje podobne do narzędzia wiersza polecenia ping. exe. Metody <xref:System.Net.NetworkInformation.Ping.Send%2A> i<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wysyłają komunikat żądania echa protokołu ICMP (Internet Control Message Protocol) do komputera zdalnego i czeka na komunikat odpowiedzi echa ICMP z tego komputera. Szczegółowy opis komunikatów ICMP znajduje się w dokumencie RFC 792, który jest dostępny [https://www.ietf.org](https://www.ietf.org/)pod adresem.  
  
 Poniższe typy są używane z <xref:System.Net.NetworkInformation.Ping> klasą i opisano szczegółowo poniżej.  
  
|**Nazwa typu**|**Opis**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|Definiuje kody stanu opisujące wynik komunikatu żądania echa protokołu ICMP.|  
|<xref:System.Net.NetworkInformation.PingOptions>|Umożliwia skonfigurowanie lub pobranie ustawień, które kontrolują, ile razy można przesłać dalej pakiet żądania (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>) i czy może on być pofragmentowany (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ).|  
|<xref:System.Net.NetworkInformation.PingReply>|Zawiera wyniki żądania echa protokołu ICMP.|  
|<xref:System.Net.NetworkInformation.PingException>|Zgłaszany, jeśli wystąpi nieodwracalny błąd.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Zawiera dane skojarzone ze <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzeniami, które są wywoływane, <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> gdy wywołanie zostanie zakończone lub zostało anulowane.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|Delegat, który udostępnia metodę wywołania zwrotnego, gdy <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołanie zostało zakończone lub zostało anulowane.|  
  
 Metody <xref:System.Net.NetworkInformation.Ping.Send%2A> i <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> zwracają<xref:System.Net.NetworkInformation.PingReply> odpowiedź w obiekcie. <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType> Właściwość<xref:System.Net.NetworkInformation.IPStatus> zwraca wartość wskazującą wynik żądania.  
  
 Podczas wysyłania żądania należy określić komputer zdalny. Można to zrobić, podając ciąg nazwy hosta, adres IP w formacie ciągu lub <xref:System.Net.IPAddress> obiekt.  
  
 Można również określić dowolny z następujących typów informacji:  
  
-   Dane, które mają towarzyszyć żądaniu. Określenie `buffer` umożliwia poznanie czasu wymaganego przez pakiet o określonym rozmiarze do przesłania do i z hosta zdalnego oraz do maksymalnej jednostki transmisji ścieżki sieciowej. (Zobacz <xref:System.Net.NetworkInformation.Ping.Send%2A> lub <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads przyjmujących `buffer` parametr).  
  
-   Czy pakiet ICMP echo może być pofragmentowany podczas przesyłania. (Zobacz <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> `options` Właściwość <xref:System.Net.NetworkInformation.Ping.Send%2A> i<xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążeń, które przyjmują parametr).  
  
-   Ile razy węzły routingu, takie jak routery lub bramy, mogą przekazywać pakiet przed przystąpieniem do komputera docelowego lub zostać odrzucony. (Zobacz <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> i przeciążenia <xref:System.Net.NetworkInformation.Ping.Send%2A>lubprzeciążania przyjmujące parametr). `options`  
  
-   Limit czasu, w którym musi zostać odebrana odpowiedź. (Zobacz <xref:System.Net.NetworkInformation.Ping.Send%2A> lub <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overloads przyjmujących `timeout` parametr.  
  
 <xref:System.Net.NetworkInformation.Ping> Klasa oferuje metody synchroniczne i asynchroniczne do wysyłania żądania. Jeśli aplikacja powinna blokować podczas oczekiwania na odpowiedź, należy użyć <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne. Jeśli aplikacja nie powinna blokować, użyj metod asynchronicznych <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> . Wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wykonywane we własnym wątku, które jest automatycznie przydzielony z puli wątków. Po zakończeniu operacji asynchronicznej wywołuje <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata, aby określić metodę, która jest wywoływana <xref:System.Net.NetworkInformation.Ping.PingCompleted> dla zdarzeń. Przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>należy <xref:System.Net.NetworkInformation.PingCompletedEventHandler> dodać delegata do zdarzenia. Metoda delegowania odbiera <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który <xref:System.Net.NetworkInformation.PingReply> zawiera obiekt, który <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> opisuje wynik wywołania.  
  
 Nie można użyć tego samego wystąpienia <xref:System.Net.NetworkInformation.Ping> klasy do generowania wielu jednoczesnych żądań echa protokołu ICMP. Wywoływanie <xref:System.Net.NetworkInformation.Ping.Send%2A> , <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> gdy wywołanie jest w toku lub <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> wywołanie wiele razy <xref:System.InvalidOperationException>przed ukończeniem wszystkich poprzednich wywołań powoduje.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.NetworkInformation.Ping> klasy synchronicznie.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.NetworkInformation.Ping> klasy asynchronicznie.  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/network-programming/how-to-ping-a-host.md">Instrukcje: pingowanie hosta</related>
    <related type="Article" href="~/docs/framework/network-programming/index.md">Programowanie dla sieci w .NET Framework</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">Przykłady programowania sieciowego</related>
    <related type="Article" href="~/docs/framework/network-programming/networkinformation.md">NetworkInformation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.NetworkInformation.Ping" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje tworzenie <xref:System.Net.NetworkInformation.Ping> wystąpienia. Pełny przykład jest dostępny w <xref:System.Net.NetworkInformation.Ping> przeglądzie klasy.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> zwalnia tylko niezarządzane zasoby.</param>
        <summary>Zwalnia niezarządzane zasoby używane przez <see cref="T:System.Net.NetworkInformation.Ping" /> obiekt i opcjonalnie usuwa zarządzane zasoby.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną `Dispose()` <xref:System.ComponentModel.Component.Finalize%2A> i metodę. Metoda publiczna `Dispose()` wywołuje metodę chronioną <xref:System.Net.NetworkInformation.Ping.Dispose%2A> z `disposing` parametrem ustawionym `true`na. <xref:System.ComponentModel.Component.Finalize%2A>wywołuje `Dispose` `false`z `disposing` ustawionym na.  
  
 Gdy parametr ma wartość `true`, ta metoda zwalnia wszystkie zasoby przechowywane przez wszystkie obiekty zarządzane, do <xref:System.Net.NetworkInformation.Ping> których odwołuje się ten obiekt. `disposing` Ta metoda wywołuje `Dispose()` metodę każdego przywoływanego obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> Obiekt, który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy dziedziczące z <xref:System.Net.NetworkInformation.Ping> klasy mogą przesłaniać tę metodę w celu wykonywania dodatkowych zadań, takich jak rejestrowanie danych zawartych `e` w parametrze.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> metodę klasy bazowej, aby zarejestrowani pełnomocnicy otrzymywali zdarzenie.</para></block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy asynchroniczna operacja wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) i odbiera odpowiedni komunikat odpowiedzi echa ICMP kończy się lub został anulowany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aplikacje używają <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenia do uzyskiwania informacji o stanie ukończenia i danych zbieranych przez wywołanie jednej <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> z metod. Delegat udostępnia metodę wywołania zwrotnego wywoływaną podczas <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> zgłaszania tego zdarzenia. <xref:System.Net.NetworkInformation.PingCompletedEventHandler>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje określenie metody wywołania zwrotnego dla <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenia. Pełny przykład jest dostępny w <xref:System.Net.NetworkInformation.Ping> przeglądzie klasy.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) do komputera zdalnego i odebrać odpowiedni komunikat odpowiedzi ICMP echa z komputera zdalnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Adres IP zwrócony przez dowolne <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia może pochodzić ze złośliwego komputera zdalnego. Nie należy łączyć się z komputerem zdalnym za pomocą tego polecenia. Użyj usługi DNS, aby określić adres IP komputera, z którym chcesz się połączyć.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> Identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <summary>Próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odebrać odpowiedni komunikat odpowiedzi ICMP echo z tego komputera.</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> Obiekt, który zawiera informacje o komunikacie odpowiedzi protokołu ICMP, jeśli został odebrany, lub opisuje przyczynę niepowodzenia, jeśli wiadomość nie została odebrana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wysyła do hosta, który jest określony przez `address` bufor danych <xref:System.Byte> 32 za pomocą komunikatu ICMP echo. Metoda czeka pięć sekund na komunikat odpowiedzi ICMP echo. Jeśli w tym czasie odpowiedź nie zostanie odebrana, metoda zwraca i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na. <xref:System.Net.NetworkInformation.IPStatus.TimedOut>  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na. Fragmenty pakietów lub pakietów (jeśli są pofragmentowane) mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje wywołanie tej metody.  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <summary>Próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) do określonego komputera i odebrać odpowiedni komunikat odpowiedzi ICMP echa z tego komputera.</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> Obiekt, który zawiera informacje o komunikacie odpowiedzi protokołu ICMP, jeśli został odebrany, lub poda przyczynę niepowodzenia, jeśli wiadomość nie została odebrana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wysyła bufor danych <xref:System.Byte> 32 za pomocą komunikatu ICMP echo. Metoda czeka pięć sekund na komunikat odpowiedzi ICMP echo. Jeśli w tym czasie odpowiedź nie zostanie odebrana, metoda zwraca i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na. <xref:System.Net.NetworkInformation.IPStatus.TimedOut>  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na. Fragmenty pakietów lub pakietów (jeśli są pofragmentowane) mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje wywołanie tej metody.  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" />jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo. Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> Identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <summary>Próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odebrać odpowiedni komunikat odpowiedzi ICMP echo z tego komputera. Ta metoda pozwala określić wartość limitu czasu dla operacji.</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> Obiekt, który zawiera informacje o komunikacie odpowiedzi ICMP echo, jeśli został odebrany, lub stanowi przyczynę niepowodzenia, jeśli komunikat nie został odebrany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym w `timeout` parametrze, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na.  
  
 Fragmenty pakietów lub pakietów mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Przykład demonstrujący wywoływanie <xref:System.Net.NetworkInformation.Ping.Send%2A> metody można znaleźć w <xref:System.Net.NetworkInformation.Ping> temacie Omówienie klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <summary>Próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) do określonego komputera i odebrać odpowiedni komunikat odpowiedzi ICMP echa z tego komputera. Ta metoda pozwala określić wartość limitu czasu dla operacji.</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> Obiekt, który zawiera informacje o komunikacie odpowiedzi ICMP echo, jeśli został odebrany, lub stanowi przyczynę niepowodzenia, jeśli komunikat nie został odebrany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym w `timeout` parametrze, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na. Fragmenty pakietów lub pakietów (jeśli są pofragmentowane) mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Przykład demonstrujący wywoływanie <xref:System.Net.NetworkInformation.Ping.Send%2A> metody można znaleźć w <xref:System.Net.NetworkInformation.Ping> temacie Omówienie klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" />jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> Identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <summary>Próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odebrać odpowiedni komunikat odpowiedzi ICMP echo z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla operacji.</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> Obiekt, który zawiera informacje o komunikacie odpowiedzi protokołu ICMP, jeśli został odebrany, lub poda przyczynę niepowodzenia, jeśli wiadomość nie została odebrana. Metoda zwróci wartość, <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> Jeśli pakiet przekroczy maksymalną jednostkę transmisji (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym w `timeout` parametrze, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na.  
  
 Fragmenty pakietów lub pakietów mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak wywołać tę metodę.  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65500 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="buffer" /><see langword="null" /> jest<paramref name="buffer" /> lub rozmiar jest większy niż 65500 bajtów.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <summary>Próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do określonego komputera i odebrać odpowiedni komunikat odpowiedzi ICMP echo z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla operacji.</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> Obiekt, który zawiera informacje o komunikacie odpowiedzi ICMP echo, jeśli został odebrany, lub stanowi przyczynę niepowodzenia, jeśli komunikat nie został odebrany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym w `timeout` parametrze, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na.  
  
 Fragmenty pakietów lub pakietów mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Aby zapoznać się z przykładem, który ilustruje <xref:System.Net.NetworkInformation.Ping.Send%2A> sposób wywoływania przeciążenia, <xref:System.Net.NetworkInformation.Ping> Zobacz Omówienie klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65500 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" />jest <see langword="null" /> lub jest pustym ciągiem ("").  
  
—lub— 
 <paramref name="buffer" /><see langword="null" /> jest<paramref name="buffer" /> lub rozmiar jest większy niż 65500 bajtów.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> Identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> Obiekt służący do kontrolowania wartości fragmentacji i czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</param>
        <summary>Podejmuje próbę wysłania komunikatu echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do komputera, który <see cref="T:System.Net.IPAddress" /> ma określony i odbiera odpowiadający mu komunikat odpowiedzi ICMP echo z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla fragmentacji operacji i kontroli oraz wartości czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> Obiekt, który zawiera informacje o komunikacie odpowiedzi protokołu ICMP, jeśli został odebrany, lub poda przyczynę niepowodzenia, jeśli wiadomość nie została odebrana. Metoda zwróci wartość, <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> Jeśli pakiet przekroczy maksymalną jednostkę transmisji (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym przez `timeout` parametr, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 Jeśli właściwość jest `true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym, żądanie echa ICMP kończy się niepowodzeniem. <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na.  
  
 <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Użyj właściwości, aby określić maksymalną liczbę prób przesłania komunikatu echa protokołu ICMP przed osiągnięciem miejsca docelowego. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak wywołać tę metodę.  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65500 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="buffer" /><see langword="null" /> jest<paramref name="buffer" /> lub rozmiar jest większy niż 65500 bajtów.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> Obiekt służący do kontrolowania wartości fragmentacji i czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</param>
        <summary>Próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do określonego komputera i odebrać odpowiedni komunikat odpowiedzi ICMP echo z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla fragmentacji operacji i kontroli oraz wartości czasu wygaśnięcia dla pakietu protokołu ICMP.</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> Obiekt, który zawiera informacje o komunikacie odpowiedzi ICMP echo, jeśli został odebrany, lub stanowi przyczynę niepowodzenia, jeśli komunikat nie został odebrany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym przez `timeout` parametr, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 Jeśli właściwość jest `true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym, żądanie echa ICMP kończy się niepowodzeniem. <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na.  
  
 <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Użyj właściwości, aby określić maksymalną liczbę prób przesłania komunikatu echa protokołu ICMP przed osiągnięciem miejsca docelowego. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak wywołać tę metodę.  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65500 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" />ma <see langword="null" /> lub jest ciągiem o zerowej długości.  
  
—lub— 
 <paramref name="buffer" /><see langword="null" /> jest<paramref name="buffer" /> lub rozmiar jest większy niż 65500 bajtów.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asynchronicznie próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) do komputera i odebrać odpowiedni komunikat odpowiedzi ICMP echa z tego komputera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Te metody nie powodują, że główny wątek aplikacji jest blokowany. Jeśli chcesz blokować podczas oczekiwania na komunikat odpowiedzi echa ICMP, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod.  
  
> [!NOTE]
>  Adres IP zwrócony przez dowolną z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metod może pochodzić ze złośliwego komputera zdalnego. Nie należy łączyć się z komputerem zdalnym za pomocą tego polecenia. Użyj usługi DNS, aby określić adres IP komputera, z którym chcesz się połączyć.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> Identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="userToken">Obiekt, który jest przesyłany do metody wywoływanej po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odebrać odpowiedni komunikat odpowiedzi ICMP echo z tego komputera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła komunikat ECHA asynchronicznie i, po zakończeniu operacji (pomyślnie lub niepowodzeniem), zwraca stan do aplikacji. Wywołaj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodę, gdy aplikacja nie powinna blokować. Każde wywołanie tej metody jest wykonywane w osobnym wątku, który jest automatycznie przypisywany z puli wątków. Po zakończeniu operacji asynchronicznej wywołuje <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie. Aby określić metodę, która jest wywoływana, <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> gdy wywołuje zdarzenie, należy <xref:System.Net.NetworkInformation.PingCompletedEventHandler> dodać delegata do zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda delegowania odbiera <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który <xref:System.Net.NetworkInformation.PingReply> zawiera obiekt, który <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> opisuje wynik wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> dziedziczy właściwość. Ta właściwość zawiera obiekt `userToken` , który został przesłany <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> do wywołania.  
  
> [!NOTE]
>  Jeśli aplikacja powinna blokować podczas oczekiwania na odpowiedź, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Ta metoda wysyła bufor danych <xref:System.Byte> 32 za pomocą komunikatu ICMP echo. Metoda czeka pięć sekund na komunikat odpowiedzi ICMP echo. Jeśli w tym czasie odpowiedź nie zostanie odebrana, metoda zwraca i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na. <xref:System.Net.NetworkInformation.IPStatus.TimedOut>  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na.  
  
 Fragmenty pakietów lub pakietów mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Przykładowy kod, który demonstruje wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, znajduje się w <xref:System.Net.NetworkInformation.Ping> temacie Omówienie klas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> metody jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" />nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="userToken">Obiekt, który jest przesyłany do metody wywoływanej po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) do określonego komputera i odebrać odpowiedni komunikat odpowiedzi ICMP echa z tego komputera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła komunikat ECHA asynchronicznie i, po zakończeniu operacji (pomyślnie lub niepowodzeniem), zwraca stan do aplikacji. Wywołaj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodę, gdy aplikacja nie powinna blokować. Każde wywołanie tej metody jest wykonywane w osobnym wątku, który jest automatycznie przypisywany z puli wątków. Po zakończeniu operacji asynchronicznej wywołuje <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie. Aby określić metodę, która jest wywoływana, <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> gdy wywołuje zdarzenie, należy <xref:System.Net.NetworkInformation.PingCompletedEventHandler> dodać delegata do zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda delegowania odbiera <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który <xref:System.Net.NetworkInformation.PingReply> zawiera obiekt, który <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> opisuje wynik wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> dziedziczy właściwość. Ta właściwość zawiera obiekt `userToken` , który został przesłany <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> do wywołania.  
  
> [!NOTE]
>  Jeśli aplikacja powinna blokować podczas oczekiwania na odpowiedź, należy użyć <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Ta metoda wysyła bufor danych <xref:System.Byte> 32 za pomocą komunikatu ICMP echo. Metoda czeka pięć sekund na komunikat odpowiedzi ICMP echo. Jeśli w tym momencie nie otrzyma odpowiedzi, metoda zwróci wartość i <xref:System.Net.NetworkInformation.PingReply.Status%2A> właściwość jest ustawiona na. <xref:System.Net.NetworkInformation.IPStatus.TimedOut>  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na.  
  
 Fragmenty pakietów lub pakietów mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Przykładowy kod, który demonstruje wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, znajduje się w <xref:System.Net.NetworkInformation.Ping> temacie Omówienie klas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" />jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> metody jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" />nie można rozpoznać prawidłowego adresu IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> Identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="userToken">Obiekt, który jest przesyłany do metody wywoływanej po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odebrać odpowiedni komunikat odpowiedzi ICMP echo z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła komunikat ECHA asynchronicznie i, po zakończeniu operacji (pomyślnie lub niepowodzeniem), zwraca stan do aplikacji. Wywołaj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodę, gdy aplikacja nie powinna blokować. Każde wywołanie jest wykonywane w osobnym wątku, który jest automatycznie przypisywany z puli wątków. Po zakończeniu operacji asynchronicznej wywołuje <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata, aby określić metodę, która jest wywoływana <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> , gdy wywołuje zdarzenie. Przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>należy <xref:System.Net.NetworkInformation.PingCompletedEventHandler> dodać delegata do zdarzenia. Metoda delegowania odbiera <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który <xref:System.Net.NetworkInformation.PingReply> zawiera obiekt, który <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> opisuje wynik wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> dziedziczy właściwość. Ta właściwość zawiera obiekt `userToken` , który został przesłany <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> do wywołania.  
  
 Jeśli aplikacja powinna blokować podczas oczekiwania na odpowiedź, należy użyć <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym przez `timeout` parametr, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na. Fragmenty pakietów lub pakietów (jeśli są pofragmentowane) mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Przykładowy kod, który demonstruje wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, znajduje się w <xref:System.Net.NetworkInformation.Ping> temacie Omówienie klas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> metody jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" />nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="userToken">Obiekt, który jest przesyłany do metody wywoływanej po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) do określonego komputera i odebrać odpowiedni komunikat odpowiedzi ICMP echa z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła komunikat ECHA asynchronicznie i, po zakończeniu operacji (pomyślnie lub niepowodzeniem), zwraca stan do aplikacji. Wywołaj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodę, gdy aplikacja nie powinna blokować. Każde wywołanie jest wykonywane w osobnym wątku, który jest automatycznie przypisywany z puli wątków. Po zakończeniu operacji asynchronicznej wywołuje <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata, aby określić metodę, która jest wywoływana <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> , gdy wywołuje zdarzenie. Przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>należy <xref:System.Net.NetworkInformation.PingCompletedEventHandler> dodać delegata do zdarzenia. Metoda delegowania odbiera <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który <xref:System.Net.NetworkInformation.PingReply> zawiera obiekt, który <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> opisuje wynik wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> dziedziczy właściwość. Ta właściwość zawiera obiekt `userToken` , który został przesłany <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> do wywołania.  
  
 Jeśli aplikacja powinna blokować podczas oczekiwania na odpowiedź, należy użyć <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym przez `timeout` parametr, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na. Fragmenty pakietów lub pakietów (jeśli są pofragmentowane) mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Przykładowy kod, który demonstruje wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metody, znajduje się w <xref:System.Net.NetworkInformation.Ping> temacie Omówienie klas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" />jest <see langword="null" /> lub jest pustym ciągiem ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" />nie można rozpoznać prawidłowego adresu IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> Identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <param name="userToken">Obiekt, który jest przesyłany do metody wywoływanej po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odebrać odpowiadający mu komunikat odpowiedzi ICMP echo z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wysyła komunikat ECHA asynchronicznie i, po zakończeniu operacji (pomyślnie lub niepowodzeniem), zwraca stan do aplikacji. Wywołaj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodę, gdy aplikacja nie powinna blokować. Każde wywołanie jest wykonywane w osobnym wątku, który jest automatycznie przypisywany z puli wątków. Po zakończeniu operacji asynchronicznej wywołuje <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie. Aby określić metodę, która jest wywoływana, <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> gdy wywołuje zdarzenie, należy <xref:System.Net.NetworkInformation.PingCompletedEventHandler> dodać delegata do zdarzenia przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Metoda delegowania odbiera <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który <xref:System.Net.NetworkInformation.PingReply> zawiera obiekt, który <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> opisuje wynik wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> dziedziczy właściwość. Ta właściwość zawiera obiekt `userToken` , który został przesłany <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> do wywołania.  
  
> [!NOTE]
>  Jeśli aplikacja jest blokowana podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym przez `timeout` parametr, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na. Fragmenty pakietów lub pakietów (jeśli są pofragmentowane) mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Przykładowy kod, który demonstruje wywołanie <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, znajduje się w <xref:System.Net.NetworkInformation.Ping> temacie Omówienie klas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="buffer" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" />nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65500 bajtów.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <param name="userToken">Obiekt, który jest przesyłany do metody wywoływanej po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do określonego komputera i odebrać odpowiadający mu komunikat odpowiedzi ICMP echo z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła komunikat ECHA asynchronicznie i, po zakończeniu operacji (pomyślnie lub niepowodzeniem), zwraca stan do aplikacji. Wywołaj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodę, gdy aplikacja nie powinna blokować. Każde wywołanie jest wykonywane w osobnym wątku, który jest automatycznie przypisywany z puli wątków. Po zakończeniu operacji asynchronicznej wywołuje <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata, aby określić metodę, która jest wywoływana <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> , gdy wywołuje zdarzenie. Przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>należy <xref:System.Net.NetworkInformation.PingCompletedEventHandler> dodać delegata do zdarzenia. Metoda delegowania odbiera <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt <xref:System.Net.NetworkInformation.PingReply> zawierający obiekt, który <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> opisuje wynik wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> dziedziczy właściwość. Ta właściwość zawiera obiekt `userToken` , który został przesłany <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> do wywołania.  
  
 Jeśli aplikacja powinna blokować podczas oczekiwania na odpowiedź, należy użyć <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym przez `timeout` parametr, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 To Przeciążenie używa ustawień domyślnych dla fragmentacji pakietów i przekazywania pakietów. Pakiet zawierający komunikat ICMP echo może być pofragmentowany, jeśli całkowity rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym. Aby zapobiec fragmentacji, należy użyć jednej z <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metod, które `options` pobierają <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> parametr, i ustawić właściwość na `true`. Gdy <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> jest`true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerami lokalnymi i zdalnymi, żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na. Fragmenty pakietów lub pakietów (jeśli są pofragmentowane) mogą być przekazywane przez węzły routingu 128 razy, zanim zostaną odrzucone. Aby zmienić to ustawienie, użyj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, które `options` przyjmuje <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> parametr, i ustaw właściwość na żądaną wartość. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób wywoływania <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> przeciążenia, <xref:System.Net.NetworkInformation.Ping> Zobacz Omówienie klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" />jest <see langword="null" /> lub jest pustym ciągiem ("").  
  
—lub— 
 <paramref name="buffer" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" />nie można rozpoznać prawidłowego adresu IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65500 bajtów.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> Identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="timeout"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> Obiekt służący do kontrolowania wartości fragmentacji i czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</param>
        <param name="userToken">Obiekt, który jest przesyłany do metody wywoływanej po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odebrać odpowiadający mu komunikat odpowiedzi ICMP echo z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla fragmentacji operacji i kontroli oraz wartości czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła komunikat ECHA asynchronicznie i, po zakończeniu operacji (pomyślnie lub niepowodzeniem), zwraca stan do aplikacji. Wywołaj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodę, gdy aplikacja nie może zablokować. Każde wywołanie jest wykonywane w osobnym wątku, który jest automatycznie przypisywany z puli wątków. Po zakończeniu operacji asynchronicznej wywołuje <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata, aby określić metodę, która jest wywoływana <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> , gdy wywołuje zdarzenie. Przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>należy <xref:System.Net.NetworkInformation.PingCompletedEventHandler> dodać delegata do zdarzenia. Metoda delegowania odbiera <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który <xref:System.Net.NetworkInformation.PingReply> zawiera obiekt, który <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> opisuje wynik wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> dziedziczy właściwość. Ta właściwość zawiera obiekt `userToken` , który został przesłany <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> do wywołania.  
  
 Jeśli aplikacja jest blokowana podczas oczekiwania na odpowiedź, użyj <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym przez `timeout` parametr, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 Jeśli właściwość jest `true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym, żądanie echa ICMP kończy się niepowodzeniem. <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na.  
  
 <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Użyj właściwości, aby określić maksymalną liczbę prób przesłania komunikatu echa protokołu ICMP przed osiągnięciem miejsca docelowego. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak wywołać tę metodę. Aby uzyskać implementację metody wywołania zwrotnego, zobacz <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sekcję przykład przeciążenia metody.  
  
 Poniższy przykład kodu wymaga następujących przestrzeni nazw:  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 Poniższy przykład kodu wysyła komunikat ICMP Echo asynchronicznie.  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="buffer" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" />nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65500 bajtów.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> identyfikujący komputer, który jest miejscem docelowym dla komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="timeout"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <param name="buffer"><see cref="T:System.Int32" /> Wartość określająca maksymalną liczbę milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> Obiekt służący do kontrolowania wartości fragmentacji i czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</param>
        <param name="userToken">Obiekt, który jest przesyłany do metody wywoływanej po zakończeniu operacji asynchronicznej.</param>
        <summary>Asynchronicznie próbuje wysłać komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do określonego komputera i odebrać odpowiadający mu komunikat odpowiedzi ICMP echo z tego komputera. To Przeciążenie pozwala określić wartość limitu czasu dla fragmentacji operacji i kontroli oraz wartości czasu wygaśnięcia dla pakietu protokołu ICMP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Metoda wysyła komunikat ECHA asynchronicznie i, po zakończeniu operacji (pomyślnie lub niepowodzeniem), zwraca stan do aplikacji. Wywołaj <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodę, gdy aplikacja nie może zablokować. Każde wywołanie jest wykonywane w osobnym wątku, który jest automatycznie przypisywany z puli wątków. Po zakończeniu operacji asynchronicznej wywołuje <xref:System.Net.NetworkInformation.Ping.PingCompleted> zdarzenie. Aplikacje używają <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegata, aby określić metodę, która jest wywoływana <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> , gdy wywołuje zdarzenie. Przed wywołaniem <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>należy <xref:System.Net.NetworkInformation.PingCompletedEventHandler> dodać delegata do zdarzenia. Metoda delegowania odbiera <xref:System.Net.NetworkInformation.PingCompletedEventArgs> obiekt, który <xref:System.Net.NetworkInformation.PingReply> zawiera obiekt, który <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> opisuje wynik wywołania. <xref:System.Net.NetworkInformation.PingCompletedEventArgs> Obiekt<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> dziedziczy właściwość. Ta właściwość zawiera obiekt `userToken` , który został przesłany <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> do wywołania.  
  
 Jeśli aplikacja powinna blokować podczas oczekiwania na odpowiedź, należy użyć <xref:System.Net.NetworkInformation.Ping.Send%2A> metod; te metody są synchroniczne.  
  
 Jeśli komunikat odpowiedzi echa ICMP nie zostanie odebrany w czasie określonym przez `timeout` parametr, echo ICMP nie powiedzie się, <xref:System.Net.NetworkInformation.PingReply.Status%2A> a właściwość jest ustawiona na <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Podczas określania bardzo małych liczb dla `timeout`programu odpowiedź na polecenie ping można odbierać nawet wtedy `timeout` , gdy czas upłynął.  
  
 Jeśli właściwość jest `true` i łączny rozmiar pakietu przekracza maksymalny rozmiar pakietu, który może zostać przesłany przez jeden z węzłów routingu między komputerem lokalnym i zdalnym, żądanie echa ICMP kończy się niepowodzeniem. <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>na.  
  
 <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> Użyj właściwości, aby określić maksymalną liczbę prób przesłania komunikatu echa protokołu ICMP przed osiągnięciem miejsca docelowego. Jeśli pakiet nie dociera do miejsca docelowego po określonej liczbie ponownych prób, pakiet zostanie odrzucony i żądanie echa ICMP kończy się niepowodzeniem. Gdy tak <xref:System.Net.NetworkInformation.PingReply.Status%2A> się stanie, ustawienie jest ustawione <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>na.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak wywołać tę metodę.  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" />jest <see langword="null" /> lub jest pustym ciągiem ("").  
  
—lub— 
 <paramref name="buffer" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> jest w toku.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" />jest adresem IPv6, a na komputerze lokalnym jest uruchomiony system operacyjny starszy niż Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" />nie można rozpoznać prawidłowego adresu IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65500 bajtów.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Aby wysłać komunikat ICMP echo.  
  
Skojarzone Wyliczenie:<see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Anuluje wszystkie oczekujące żądania asynchroniczne do wysłania komunikatu echa protokołu ICMP (Internet Control Message Protocol) i odbiera odpowiedni komunikat odpowiedzi ICMP echo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> , aby zakończyć wszystkie wywołania, które nie zostały ukończone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) do komputera i odbiera odpowiedni komunikat odpowiedzi ICMP echa z tego komputera jako operację asynchroniczną.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Adres IP, który identyfikuje komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <summary>Wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odbiera odpowiedni komunikat odpowiedzi ICMP echa z tego komputera jako operację asynchroniczną.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601>Obiekt > zostanie ukończony po wysłaniu pakietu ICMP i odebraniu odpowiedzi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" />nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Komputer będący miejscem docelowym komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <summary>Wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do określonego komputera i odbiera odpowiadający mu komunikat odpowiedzi ICMP echo z tego komputera jako operację asynchroniczną.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601>Obiekt > zostanie ukończony po wysłaniu pakietu ICMP i odebraniu odpowiedzi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Adres IP, który identyfikuje komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="timeout">Maksymalna liczba milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <summary>Wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odbiera odpowiedni komunikat odpowiedzi ICMP echa z tego komputera jako operację asynchroniczną. To Przeciążenie pozwala określić wartość limitu czasu dla operacji.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601>Obiekt > zostanie ukończony po wysłaniu pakietu ICMP i odebraniu odpowiedzi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Komputer będący miejscem docelowym komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="timeout">Maksymalna liczba milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <summary>Wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do określonego komputera i odbiera odpowiadający mu komunikat odpowiedzi ICMP echo z tego komputera jako operację asynchroniczną. To Przeciążenie pozwala określić wartość limitu czasu dla operacji.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601>Obiekt > zostanie ukończony po wysłaniu pakietu ICMP i odebraniu odpowiedzi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Adres IP, który identyfikuje komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="timeout">Maksymalna liczba milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <summary>Wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odbiera odpowiedni komunikat odpowiedzi ICMP echa z tego komputera jako operację asynchroniczną. To Przeciążenie pozwala określić wartość limitu czasu dla operacji oraz bufor, który ma być używany do wysyłania i odbierania.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601>Obiekt > zostanie ukończony po wysłaniu pakietu ICMP i odebraniu odpowiedzi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="buffer" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" />nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Komputer będący miejscem docelowym komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="timeout">Maksymalna liczba milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <summary>Wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do określonego komputera i odbiera odpowiadający mu komunikat odpowiedzi ICMP echo z tego komputera jako operację asynchroniczną. To Przeciążenie pozwala określić wartość limitu czasu dla operacji oraz bufor, który ma być używany do wysyłania i odbierania.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601>Obiekt > zostanie ukończony po wysłaniu pakietu ICMP i odebraniu odpowiedzi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Adres IP, który identyfikuje komputer, który jest miejscem docelowym dla komunikatu ICMP echo.</param>
        <param name="timeout">Maksymalna liczba milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> Obiekt służący do kontrolowania wartości fragmentacji i czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</param>
        <summary>Wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do komputera, który ma określony <see cref="T:System.Net.IPAddress" />, i odbiera odpowiedni komunikat odpowiedzi ICMP echa z tego komputera jako operację asynchroniczną. To Przeciążenie pozwala określić wartość limitu czasu dla operacji, bufor, który ma być używany do wysyłania i odbierania, i przetworzyć fragmentację oraz wartości czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601>Obiekt > zostanie ukończony po wysłaniu pakietu ICMP i odebraniu odpowiedzi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="buffer" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />jest mniejsza od zera.</exception>
        <exception cref="T:System.InvalidOperationException">Wywołanie <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> jest w toku.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Zgłoszono wyjątek podczas wysyłania lub otrzymywania komunikatów ICMP. Zobacz wyjątek wewnętrzny dla dokładnego zgłoszonego wyjątku.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" />nie jest prawidłowym adresem IP.</exception>
        <exception cref="T:System.ObjectDisposedException">Ten obiekt został usunięty.</exception>
        <exception cref="T:System.ArgumentException">Rozmiar <paramref name="buffer" /> przekracza 65 500 bajtów.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Komputer będący miejscem docelowym komunikatu ICMP echo. Wartością określoną dla tego parametru może być nazwa hosta lub ciąg reprezentujący adres IP.</param>
        <param name="timeout">Maksymalna liczba milisekund (po wysłaniu komunikatu ECHA) do oczekiwania na komunikat odpowiedzi echa ICMP.</param>
        <param name="buffer"><see cref="T:System.Byte" /> Tablica zawierająca dane, które mają być wysłane za pomocą komunikatu ICMP echo i zwracane w komunikacie odpowiedzi ICMP echo. Tablica nie może zawierać więcej niż 65 500 bajtów.</param>
        <param name="options"><see cref="T:System.Net.NetworkInformation.PingOptions" /> Obiekt służący do kontrolowania wartości fragmentacji i czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</param>
        <summary>Wysyła komunikat echa protokołu ICMP (Internet Control Message Protocol) z określonym buforem danych do określonego komputera i odbiera odpowiadający mu komunikat odpowiedzi ICMP echo z tego komputera jako operację asynchroniczną. To Przeciążenie pozwala określić wartość limitu czasu dla operacji, bufor, który ma być używany do wysyłania i odbierania, i przetworzyć fragmentację oraz wartości czasu wygaśnięcia dla pakietu komunikatu ICMP echo.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601>Obiekt > zostanie ukończony po wysłaniu pakietu ICMP i odebraniu odpowiedzi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez wystąpienia <see cref="T:System.Net.NetworkInformation.Ping" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Jeśli wywołasz dowolną metodę na <xref:System.Net.NetworkInformation.Ping> obiekcie, który został usunięty, <xref:System.ObjectDisposedException>otrzymasz.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
