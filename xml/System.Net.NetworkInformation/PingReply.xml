<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43f662cb69eefb6aad699f9833c3b46a93dc003c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69113730" /></Metadata><TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje o stanie i danych w wyniku <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> operacji lub. <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping> Klasa próbuje wysłać żądanie echa protokołu ICMP (Internet Control Message Protocol) do komputera zdalnego i odbierać informacje z komputera za pośrednictwem komunikatu odpowiedzi ICMP echo. Klasa używa wystąpień <xref:System.Net.NetworkInformation.PingReply> klasy w celu zwrócenia informacji o operacji, takich jak stan i czas potrzebny na wysłanie żądania i odebranie odpowiedzi. <xref:System.Net.NetworkInformation.Ping>  
  
 Metody zwracają wystąpienia <xref:System.Net.NetworkInformation.PingReply> klasy bezpośrednio. <xref:System.Net.NetworkInformation.Ping.Send%2A> Metody zwracają wartość <xref:System.Net.NetworkInformation.PingReply> w <xref:System.Net.NetworkInformation.PingCompletedEventArgs> parametrze metody. <xref:System.Net.NetworkInformation.PingCompletedEventHandler> <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> Dostęp do niego można uzyskać <xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A> za pomocą właściwości. <xref:System.Net.NetworkInformation.PingReply>  
  
 <xref:System.Net.NetworkInformation.PingReply.Status%2A> Jeśli wartość <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> nie <xref:System.Net.NetworkInformation.IPStatus.Success>jest, nie należy używać <xref:System.Net.NetworkInformation.PingReply.Options%2A> wartości zwracanych przez <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>lub właściwości. Właściwość zwróci wartość zero <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> <xref:System.Net.NetworkInformation.PingReply.Options%2A> ,`null`a właściwość zwróci pustą tablicę, a właściwość zwróci wartość. <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.NetworkInformation.Ping> klasy w celu synchronicznego wysłania żądania echa ICMP i wyświetlenia odpowiedzi.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera adres hosta, który wysyła odpowiedź echa protokołu ICMP (Internet Control Message Protocol).</summary>
        <value><see cref="T:System.Net.IPAddress" /> Zawierający miejsce docelowe komunikatu ICMP echo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwrócone przez którekolwiek <xref:System.Net.NetworkInformation.Ping.Send%2A> z przeciążeń mogą pochodzić ze złośliwego komputera zdalnego. <xref:System.Net.NetworkInformation.PingReply.Address%2A> Nie nawiązuj połączenia z komputerem zdalnym przy użyciu tego adresu. Użyj usługi DNS, aby określić adres IP komputera, z którym chcesz się połączyć.  
  
   
  
## Examples  
 Poniższy przykład kodu wysyła żądanie echa ICMP synchronicznie i wyświetla wartość tej właściwości.  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bufor danych odebranych w komunikacie odpowiedzi echa protokołu komunikacyjnego sterowania Internetem (ICMP).</summary>
        <value><see cref="T:System.Byte" /> Tablica zawierająca dane odebrane w komunikacie odpowiedzi ICMP echo lub w pustej tablicy, jeśli nie otrzymano odpowiedzi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bufor danych wysyłany z żądaniem echa ICMP jest zwracany do nadawcy w odpowiedzi echa, dzięki czemu można obliczyć dwukierunkowy czas podróży dla pakietu o znanym rozmiarze. Bufor danych, w połączeniu z <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> opcją, może służyć do wykrywania maksymalnej jednostki transmisji dla ścieżki sieciowej między komputerem źródłowym a docelowym. Aby uzyskać dodatkowe informacje, zobacz sekcję "traceroute" w dokumencie RFC 1574, sekcja 3,2 [https://www.ietf.org](https://www.ietf.org), dostępna pod adresem.  
  
 Domyślny bufor używany z <xref:System.Net.NetworkInformation.Ping.Send%2A> i <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> zawiera 32 bajtów danych.  
  
   
  
## Examples  
 Poniższy przykład kodu wysyła synchronicznie żądanie echa ICMP i wyświetla rozmiar buforu zwróconego przez tę właściwość.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera opcje używane do przesyłania odpowiedzi do żądania echa protokołu komunikacyjnego sterowania Internetem (ICMP).</summary>
        <value>Obiekt, który zawiera czas wygaśnięcia (TTL) i dyrektywę fragmentacji używaną do przesyłania odpowiedzi, <see langword="null" />Jeśli <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> jest <see cref="F:System.Net.NetworkInformation.IPStatus.Success" />; w przeciwnym razie. <see cref="T:System.Net.NetworkInformation.PingOptions" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas wygaśnięcia określa, ile razy węzły mogą przekazywać pakiet w miarę ich przesyłania między źródłem i miejscem docelowym. Jeśli liczba przesyłania dalej, znana także jako przeskoki, przekracza wartość określoną dla czasu wygaśnięcia, pakiet jest uznawany za niedostarczenie i jest odrzucany.  
  
 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> Wartość określona w żądaniu echa ICMP kontroluje fragmentację pakietu. Jeśli <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig> jest `true` i rozmiar pakietu przekracza maksymalną jednostkę transmisji ścieżki sieciowej podejmowanej przez pakiet, pakiet zostanie odrzucony i zwracany jest błąd.  
  
   
  
## Examples  
 Poniższy przykład kodu wysyła synchronicznie żądanie echa ICMP i wyświetla wartości przechowywane w <xref:System.Net.NetworkInformation.PingOptions> obiekcie zwracanym przez tę właściwość.  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę milisekund, jaką należy wykonać, aby wysłać żądanie echa protokołu ICMP (Internet Control Message Protocol) i odebrać odpowiedni komunikat odpowiedzi ICMP echo.</summary>
        <value><see cref="T:System.Int64" /> Wartość określająca czas błądzenia (w milisekundach).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli żądanie echa nie powiedzie się <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> , czas jest raportowany jako 0, co jest również prawidłową wartością, gdy żądanie zakończy się pomyślnie. Należy sprawdzić, <xref:System.Net.NetworkInformation.PingReply.Status%2A> czy wartość zwrócona przez tę właściwość powinna być ignorowana.  
  
   
  
## Examples  
 Poniższy przykład kodu wysyła synchronicznie żądanie echa ICMP i wyświetla rozmiar buforu zwróconego przez tę właściwość.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera stan próby wysłania żądania echa protokołu ICMP (Internet Control Message Protocol) i Odbierz odpowiedni komunikat odpowiedzi ICMP echo.</summary>
        <value><see cref="T:System.Net.NetworkInformation.IPStatus" /> Wartość wskazująca wynik żądania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.PingReply.Status%2A> Jeśli wartość <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> nie <xref:System.Net.NetworkInformation.IPStatus.Success>jest, nie należy używać <xref:System.Net.NetworkInformation.PingReply.Options%2A> wartości zwracanych przez <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>lub właściwości. Właściwości <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> <xref:System.Net.NetworkInformation.PingReply.Options%2A> i <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> zwróci zero ,`null`a właściwość zwróci wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.NetworkInformation.Ping> klasy w celu synchronicznego wysłania żądania echa ICMP i wyświetlenia odpowiedzi.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
