<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="934272a94114eb4a30423a3c40a2eb33a5582a83" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37608471" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <TypeSignature Language="F#" Value="type CacheDependency = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Ustanawia relacji zależności między elementem przechowywanych w aplikacji ASP.NET <see cref="T:System.Web.Caching.Cache" /> obiektu i plik, klucz pamięci podręcznej, tablica jednego lub drugiego <see cref="T:System.Web.Caching.CacheDependency" /> obiektu. <see cref="T:System.Web.Caching.CacheDependency" /> Klasy monitoruje relacji zależności, tak aby ich zmianie element pamięci podręcznej zostaną automatycznie usunięte.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dodaj element do pamięci podręcznej, który jest zależny od innego obiektu, takiego jak plik lub plików, elementu zależnego zostanie automatycznie usunięty z pamięci podręcznej po zmianie obiektu. Załóżmy na przykład, możesz utworzyć <xref:System.Data.DataSet> obiektu na podstawie danych z pliku XML. Możesz dodać <xref:System.Data.DataSet> do pamięci podręcznej przy użyciu <xref:System.Web.Caching.CacheDependency> obiekt, który sprawia, że <xref:System.Data.DataSet> zależny od pliku XML. Jeśli zmieni się w pliku XML, <xref:System.Data.DataSet> zostanie usunięty z pamięci podręcznej.  
  
 Możesz dodać elementy z zależnościami do pamięci podręcznej Twojej aplikacji za pomocą <xref:System.Web.Caching.Cache.Add%2A> i <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> metody. Nie można użyć <xref:System.Web.Caching.Cache.Item%2A> właściwości, aby dodać elementy do pamięci podręcznej z zależnościami.  
  
 Aby skonfigurować zależność, należy utworzyć wystąpienie <xref:System.Web.Caching.CacheDependency> klasy, określając pliki, klucze lub katalogi, w których element jest zależny, a następnie przekaż zależność do <xref:System.Web.Caching.Cache.Add%2A> lub <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> metody. <xref:System.Web.Caching.CacheDependency> Wystąpienia może reprezentować pojedynczy plik lub katalog, tablicę pliki lub katalogi lub tablicę plików lub katalogów wraz z tablicy kluczy pamięci podręcznej (te reprezentują inne elementy przechowywane w <xref:System.Web.Caching.Cache> obiektu).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Web.Caching.CacheDependency.HasChanged%2A> właściwości, aby określić, czy <xref:System.Web.Caching.CacheDependency> zmienione od czasu poprzedniego żądania dla elementu w <xref:System.Web.Caching.Cache>. `dt` Wartości przekazanej w `start` parametr ma wartość <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy.</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz do wyprowadzenia klasy z <xref:System.Web.Caching.CacheDependency>, zaimplementować tę wersję <xref:System.Web.Caching.CacheDependency.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu jest klasa, która implementuje tę wersję <xref:System.Web.Caching.CacheDependency> Konstruktor jako wszystkie klasy, które wynikają z <xref:System.Web.Caching.CacheDependency> są wymagane.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Ścieżka do pliku lub katalogu, który zależy obiektu w pamięci podręcznej. Po zmianie tego zasobu obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która monitoruje pliku lub katalogu zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog lub plik określony w `filename` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje katalog lub plik, gdy obiekt z zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> po utworzeniu katalogu lub pliku.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością w następującej ścieżce pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony, kiedy <xref:System.Web.Caching.CacheDependency> obiekt zostanie utworzony, ale jest utworzone później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie <xref:System.Web.Caching.CacheDependency> klasy z zależnością od pliku XML. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Metoda następnie dodaje element do <xref:System.Web.Caching.Cache> jest zależne od tego pliku.  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 Umożliwia także zrobić w następujący sposób, aby dodać element do <xref:System.Web.Caching.Cache> z zależnością od pliku.  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filenames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które obiektu w pamięci podręcznej jest zależny od. Gdy którykolwiek z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która monitoruje tablicę ścieżek (do plików lub katalogów) dla zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jakiekolwiek pliki lub katalogi, w tablicy zmieni się lub jest usuwany z tablicy, element pamięci podręcznej staje się przestarzały i zostanie usunięte z aplikacji <xref:System.Web.Caching.Cache> obiektu.  
  
 Ponadto jeśli któryś z katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu gdy obiekt z zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> po utworzeniu tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością w następującej ścieżce pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony, kiedy <xref:System.Web.Caching.CacheDependency> obiekt zostanie utworzony, ale jest utworzone później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
> [!NOTE]
>  Tworząc tablicę, która zawiera zależności pliku, należy zdefiniować liczbę plików, czy element jest dodawany do <xref:System.Web.Caching.Cache> jest zależny od.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> metodę, aby dodać element do <xref:System.Web.Caching.Cache> z zależnościami w tablicy plików. Można również ustawić element zależny od tablicę katalogów.  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filename, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">Ścieżka do pliku lub katalogu, który zależy obiektu w pamięci podręcznej. Po zmianie tego zasobu obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="start">Czas, przed którym ma zostać sprawdzona daty ostatniej modyfikacji pliku lub katalogu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która monitoruje pliku lub katalogu zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog lub plik określony w `filename` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje katalog lub plik, gdy obiekt z zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> po utworzeniu katalogu lub pliku.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością w następującej ścieżce pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony, kiedy <xref:System.Web.Caching.CacheDependency> obiekt zostanie utworzony, ale jest utworzone później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest bezpośrednio oparty na `start` parametru. Użyj `start` parametr do przekazania, datę i godzinę w przeszłości, względem którego ma zostać sprawdzona ostatniej modyfikacji katalogu lub pliku przekazanej `filename` parametru. Jeśli ostatniej modyfikacji Data jest późniejsza niż data i zestawu czasu przekazanej `start` parametru element pamięci podręcznej zostanie usunięty z <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Poniższy przykład kodu używa tego konstruktora do utworzenia wystąpienia <xref:System.Web.Caching.CacheDependency> obiektu, a następnie wstawia element do <xref:System.Web.Caching.Cache> za pomocą tej zależności. `dt` Wartości przekazanej w `start` parametr ma wartość <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które obiektu w pamięci podręcznej jest zależny od. Gdy którykolwiek z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="start">Czas, przed którym ma zostać sprawdzona daty ostatniej modyfikacji obiektów w tablicy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która monitoruje tablicę ścieżek (do plików lub katalogów) dla zmian i określa czas, gdy rozpocznie się monitorowanie zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli któryś z katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu gdy obiekt z zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> po utworzeniu tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością w następującej ścieżce pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony, kiedy <xref:System.Web.Caching.CacheDependency> obiekt zostanie utworzony, ale jest utworzone później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest bezpośrednio oparty na `start` parametru. Użyj `start` przekazany parametr do przekazania, datę i godzinę w przeszłości, w której chcesz sprawdzić datę ostatniej modyfikacji tablicy `filenames` parametru. Jeśli ostatniej modyfikacji Data dowolnego obiektu w tablicy jest późniejsza niż data i zestawu czasu przekazanej `start` parametru element pamięci podręcznej zostanie usunięty z <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Web.Caching.CacheDependency> obiekt, który przekazuje dwóch plikach XML i <xref:System.DateTime.Now%2A?displayProperty=nameWithType> wartości, gdy obiekt jest dołączony jako argument parametru <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> wywołania metody.  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które obiektu w pamięci podręcznej jest zależny od. Gdy którykolwiek z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica kluczy pamięci podręcznej, które monitoruje nowy obiekt zmian. Gdy którykolwiek z tych zmian kluczy pamięci podręcznej skojarzonych z tym obiektem zależności obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która monitoruje tablica ścieżek (plików lub katalogów) i/lub tablicę kluczy pamięci podręcznej dla zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto jeśli któryś z katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu gdy obiekt z zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> po utworzeniu tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością w następującej ścieżce pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony, kiedy <xref:System.Web.Caching.CacheDependency> obiekt zostanie utworzony, ale jest utworzone później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
 Jednak `cachekeys` zależności nie działają tak samo. Jeśli co najmniej jedną wartość w `cachekeys` parametr nie istnieje w czasie wstawieniem, Wstaw kończy się niepowodzeniem. Należy zauważyć, że żaden wyjątek zgłaszany w przypadku tego scenariusza.  
  
## Examples  
 Poniższy fragment kodu pokazuje, jak wstawianie elementu do Twojej aplikacji <xref:System.Web.Caching.Cache> z zależnością od klucza do innego elementu umieszczane w pamięci podręcznej. Ponieważ ta metoda używa składni tablicy, należy zdefiniować liczbę kluczy na której element jest dodawany do <xref:System.Web.Caching.Cache> jest zależny.  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które obiektu w pamięci podręcznej jest zależny od. Gdy którykolwiek z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica kluczy pamięci podręcznej, które monitoruje nowy obiekt zmian. Gdy którykolwiek z tych zmian kluczy pamięci podręcznej skojarzonych z tym obiektem zależności obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="start">Data i godzina, na którym ma zostać sprawdzona daty ostatniej modyfikacji obiektów przekazanych <c>nazwy plików</c> i <c>cachekeys</c> tablic.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która monitoruje tablica ścieżek (plików lub katalogów) i/lub tablicę kluczy pamięci podręcznej dla zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto jeśli któryś z katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu gdy obiekt z zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> po utworzeniu tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością w następującej ścieżce pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony, kiedy <xref:System.Web.Caching.CacheDependency> obiekt zostanie utworzony, ale jest utworzone później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
 Jednak `cachekeys` zależności nie działają tak samo. Jeśli co najmniej jedną wartość w `cachekeys` parametr nie istnieje w czasie wstawieniem, Wstaw kończy się niepowodzeniem. Należy zauważyć, że żaden wyjątek zgłaszany w przypadku tego scenariusza.

> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest bezpośrednio oparty na `start` parametru. Użyj `start` przekazany parametr do przekazania, datę i godzinę w przeszłości, w której chcesz sprawdzić datę ostatniej modyfikacji dowolnego obiektu `filenames` lub `cachekeys` parametrów. Jeśli ostatniej modyfikacji dowolnego z tych obiektów Data jest późniejsza niż data i zestawu czasu przekazanej `start` parametru element pamięci podręcznej zostanie usunięty z <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy `CreateDependency` metody. Gdy ta metoda jest wywoływana, tworzy <xref:System.DateTime> obiektu i <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> właściwość jest używana do dodania elementu do pamięci podręcznej przy użyciu `key` parametru `key1` oraz wartość `Value 1`. Tablica ciągów, `dependencyKey`, zostanie utworzony z wartością `key1` także. To <xref:System.Web.Caching.CacheDependency> następnie tworzy wystąpienie konstruktora <xref:System.Web.Caching.CacheDependency> obiekt, który przekazuje `dependencyKey` i <xref:System.DateTime> obiektu jako argumenty parametrów. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Wywoływana jest metoda następnie przy użyciu <xref:System.Web.Caching.CacheDependency> obiektu jako parametr. To sprawia, że obiekt dodane do pamięci podręcznej przy użyciu <xref:System.Web.Caching.Cache.Insert%2A> metoda zależy od `key1` klucza.  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które obiektu w pamięci podręcznej jest zależny od. Gdy którykolwiek z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica kluczy pamięci podręcznej, które monitoruje nowy obiekt zmian. Gdy którykolwiek z tych zmian kluczy pamięci podręcznej skojarzonych z tym obiektem zależności obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="dependency">Inne wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która to wystąpienie jest zależne od.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która monitoruje tablica ścieżek (plików lub katalogów) i/lub tablicę kluczy pamięci podręcznej dla zmian. Zapewnia także sam zależne od osobne wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto jeśli któryś z katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu gdy obiekt z zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> po utworzeniu tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością w następującej ścieżce pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony, kiedy <xref:System.Web.Caching.CacheDependency> obiekt zostanie utworzony, ale jest utworzone później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
 Jednak `cachekeys` zależności nie działają tak samo. Jeśli co najmniej jedną wartość w `cachekeys` parametr nie istnieje w czasie wstawieniem, Wstaw kończy się niepowodzeniem. Należy zauważyć, że żaden wyjątek zgłaszany w przypadku tego scenariusza.
  
## Examples  
 Poniższy przykład kodu tworzy `CreateDependency` metody. Gdy ta metoda jest wywoływana, używa <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> właściwość, aby dodać element do pamięci podręcznej przy użyciu `key` parametru `key1` oraz wartość `Value 1`. Tablica ciągów, `dependencyKey`, zostanie utworzony z wartością `key1` także. <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Konstruktor służy do tworzenia <xref:System.Web.Caching.CacheDependency> obiektu `dep1`, które przechodzą `dependencyKey` jako argument parametru. Sekundy <xref:System.Web.Caching.CacheDependency> obiektu `dep2`, jest tworzony przy użyciu tego konstruktora z `dep1` przekazywane jako trzeci argument parametru. Ta druga zależność jest zależna od pierwszej. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Wywoływana jest metoda następnie przy użyciu drugiej <xref:System.Web.Caching.CacheDependency> obiektu jako parametr. Jeśli pierwsza zależność zmieni się w jakikolwiek sposób, element pamięci podręcznej zostaną unieważnione.  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które obiektu w pamięci podręcznej jest zależny od. Gdy którykolwiek z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica kluczy pamięci podręcznej, które monitoruje nowy obiekt zmian. Gdy którykolwiek z tych zmian kluczy pamięci podręcznej skojarzonych z tym obiektem zależności obiektu w pamięci podręcznej staje się przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="dependency">Inne wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która to wystąpienie jest zależne od.</param>
        <param name="start">Czas, przed którym ma zostać sprawdzona daty ostatniej modyfikacji obiektów w tablicach i <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasę, która monitoruje tablica ścieżek (plików lub katalogów) i/lub tablicę kluczy pamięci podręcznej dla zmian. Zapewnia także sam zależny od innego wystąpienia programu <see cref="T:System.Web.Caching.CacheDependency" /> klasy i czasu, gdy rozpocznie się monitorowanie zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto jeśli któryś z katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu gdy obiekt z zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> po utworzeniu tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością w następującej ścieżce pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony, kiedy <xref:System.Web.Caching.CacheDependency> obiekt zostanie utworzony, ale jest utworzone później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
 
 Jednak `cachekeys` zależności nie działają tak samo. Jeśli co najmniej jedną wartość w `cachekeys` parametr nie istnieje w czasie wstawieniem, Wstaw kończy się niepowodzeniem. Należy zauważyć, że żaden wyjątek zgłaszany w przypadku tego scenariusza.

> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest bezpośrednio oparty na `start` parametru. Użyj `start` przekazany parametr do przekazania, datę i godzinę w przeszłości, w której chcesz sprawdzić datę ostatniej modyfikacji dowolnych obiektów `filenames`, `cachekeys`, lub `dependency` parametrów. Jeśli ostatniej modyfikacji dowolnego z tych obiektów Data jest późniejsza niż data i czas, który upłynął w `start` parametru element pamięci podręcznej zostanie usunięty z <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład `CreateDependency` metody. Gdy ta metoda jest wywoływana, tworzy <xref:System.DateTime> obiektu i <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> właściwość jest używana do dodania elementu do pamięci podręcznej z parametrem klucza `key1` oraz wartość `Value 1`. Tablica ciągów, `dependencyKey`, zostanie utworzony przy użyciu wartość indeksu swoją pierwszą (i jedyną) ustawiona na wartość `key1` także. <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Konstruktor jest następnie używany do tworzenia <xref:System.Web.Caching.CacheDependency> obiektu `dep1`, które przechodzą `dependencyKey` jako argument parametru. Sekundy <xref:System.Web.Caching.CacheDependency> obiektu `dep2`, zostanie utworzony za pomocą tego konstruktora z `dep1` i <xref:System.DateTime> przekazano obiekt jako argumenty parametrów. Ta druga zależność jest zależny od pierwszego i monitorowanie zależności rozpocznie się po upływie 10 sekund od `CreateDependency` metoda jest wywoływana. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Wywoływana jest metoda następnie przy użyciu drugiej <xref:System.Web.Caching.CacheDependency> obiektu jako parametr. Jeśli pierwsza zależność zmieni się w jakikolwiek sposób, element pamięci podręcznej zostaną unieważnione.  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberSignature Language="F#" Value="abstract member DependencyDispose : unit -&gt; unit&#xA;override this.DependencyDispose : unit -&gt; unit" Usage="cacheDependency.DependencyDispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Web.Caching.CacheDependency" /> klasy i wszystkie klasy, które wynikają z <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dowolną klasę pochodzącą od <xref:System.Web.Caching.CacheDependency> klasy jest wymagane do wdrożenia tej metody, aby wyczyścić zasoby został użyty w klasie pochodnej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje klasę, która dziedziczy po elemencie <xref:System.Web.Caching.CacheDependency> klasy i zastąpień <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> metody. Ta metoda jest wywoływana, ustawia niestandardowe właściwości typu Boolean o nazwie `Disposed` do `true`.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cacheDependency.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberSignature Language="F#" Value="member this.FinishInit : unit -&gt; unit" Usage="cacheDependency.FinishInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy inicjowanie <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Caching.CacheDependency.FinishInit%2A> Ukończeniu metody inicjowania <xref:System.Web.Caching.CacheDependency> obiektu. Ta metoda jest wywoływana przez wszystkie <xref:System.Web.Caching.CacheDependency> konstruktorów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.Caching.CacheDependency.FinishInit" /> Metoda musi zostać wywołana na koniec Konstruktor dla klasy pochodne, aby zakończyć inicjowanie <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</para>
        </block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberSignature Language="F#" Value="abstract member GetFileDependencies : unit -&gt; string[]&#xA;override this.GetFileDependencies : unit -&gt; string[]" Usage="cacheDependency.GetFileDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera zależnościach plików.</summary>
        <returns>Zależności pliku.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberSignature Language="F#" Value="abstract member GetUniqueID : unit -&gt; string&#xA;override this.GetUniqueID : unit -&gt; string" Usage="cacheDependency.GetUniqueID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera unikatowy identyfikator <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</summary>
        <returns>Unikatowy identyfikator <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być szczególnie przydatne do śledzenia wielu wystąpień <xref:System.Web.Caching.CacheDependency> klasy skojarzonej z aplikacją lub elementu.  
  
 Identyfikator jest kombinacją nazwy pliku (w przypadku zależności pliku) lub nazwy klucza (w przypadku zależności klucz pamięci podręcznej) i ciąg, który przypisuje zależność tej metody. W klasach, które wynikają z <xref:System.Web.Caching.CacheDependency> klasy, można zastąpić tę metodę, aby dostosować sposób generuje unikatowy identyfikator.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Web.Caching.AggregateCacheDependency> obiektu o nazwie `aggDep`, przy użyciu dwóch <xref:System.Web.Caching.CacheDependency> obiektów w swojej tablicy. Gdy `aggDep` zostanie uruchomiony kod wywołuje <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> metodę w celu wygenerowania unikatowego identyfikatora dla obu zależności, `aggDep` zawiera i Wyświetla identyfikatory do strony zawierającej. Element jest dodawane do <xref:System.Web.Caching.Cache>przy użyciu <xref:System.Web.Caching.Cache.Insert%2A> metoda, za pomocą `aggDep` jako zależność.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Web.Caching.CacheDependency.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Web.Caching.CacheDependency" /> obiektu został zmieniony.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Web.Caching.CacheDependency" /> obiektu został zmieniony; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można dodać element do aplikacji ASP.NET <xref:System.Web.Caching.Cache> z <xref:System.Web.Caching.CacheDependency>. Gdy <xref:System.Web.Caching.CacheDependency> zmienia element dodawany <xref:System.Web.Caching.Cache> jest unieważnione i usunięte z pamięci podręcznej. Ta właściwość służy do określenia czy <xref:System.Web.Caching.CacheDependency> została zmieniona, a następnie ponownie Utwórz element w <xref:System.Web.Caching.Cache> Jeśli który wystąpił.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Web.Caching.CacheDependency.HasChanged%2A> właściwości, aby określić, czy <xref:System.Web.Caching.CacheDependency> zmienione od czasu poprzedniego żądania dla elementu w <xref:System.Web.Caching.Cache>. `dt` Wartości przekazanej w `start` parametr ma wartość <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberSignature Language="F#" Value="member this.ItemRemoved : unit -&gt; unit" Usage="cacheDependency.ItemRemoved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wywołuje się, gdy wpis pamięci podręcznej monitorowanych zostanie usunięty.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberSignature Language="F#" Value="member this.KeepDependenciesAlive : unit -&gt; unit" Usage="cacheDependency.KeepDependenciesAlive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualizuje czas ostatniego dostępu każdy element pamięci podręcznej, który zależy od tego elementu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.NotifyDependencyChanged : obj * EventArgs -&gt; unit" Usage="cacheDependency.NotifyDependencyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Źródło zdarzenia.</param>
        <param name="e">
          <see cref="T:System.EventArgs" /> Obiekt, który zawiera dane zdarzenia.</param>
        <summary>Powiadamia base <see cref="T:System.Web.Caching.CacheDependency" /> obiekt, który zależności reprezentowane przez pochodnej <see cref="T:System.Web.Caching.CacheDependency" /> klasy został zmieniony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dowolną klasę pochodzącą od <xref:System.Web.Caching.CacheDependency> klasy należy zaimplementować tę metodę.  
  
 Po utworzeniu klasy pochodnej z <xref:System.Web.Caching.CacheDependency> klasy, użyj podstawowe funkcje wszelkie metody lub właściwości, które nie zostały zastąpione. Podczas tworzenia wystąpienia klasy pochodnej reprezentuje pliki, klucze pamięci podręcznej, tabele bazy danych lub innych dowolnych obiektów, które mają być zależny od elementu w pamięci podręcznej. Gdy ulegnie zmianie elementu zależności, ta metoda powiadamia podstawowe funkcje <xref:System.Web.Caching.CacheDependency> klasę, która zmieniła element, tak aby wartości <xref:System.Web.Caching.CacheDependency.HasChanged%2A> i <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> właściwości mogą być aktualizowane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje klasę, która dziedziczy po elemencie <xref:System.Web.Caching.CacheDependency> klasy. Tworzy publiczną metodę `ResetDependency`, używającej <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> metodę, aby zmienić czas modyfikacji zależności, a następnie wywołania <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> metody.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberSignature Language="F#" Value="member this.SetCacheDependencyChanged : Action&lt;obj, EventArgs&gt; -&gt; unit" Usage="cacheDependency.SetCacheDependencyChanged dependencyChangedAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">Akcja zmienione zależności.</param>
        <summary>Dodaje metody akcji w taki sposób, aby obsłużyć powiadamiania zainteresowanych stron w zmieni się na tę zależność.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberSignature Language="F#" Value="member this.SetUtcLastModified : DateTime -&gt; unit" Usage="cacheDependency.SetUtcLastModified utcLastModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">Godzina, ostatnie zmiany zależności.</param>
        <summary>Oznacza godzina ostatniej zmiany zależności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje klasę, która dziedziczy po elemencie <xref:System.Web.Caching.CacheDependency> klasy. Tworzy publiczną metodę `ResetDependency`, używającej <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> metodę, aby zmienić czas modyfikacji zależności, a następnie wywołania <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> metody.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberSignature Language="F#" Value="member this.TakeOwnership : unit -&gt; bool" Usage="cacheDependency.TakeOwnership " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia pierwszego użytkownika zadeklarować wyłącznego prawa własności do tej zależności.</summary>
        <returns>
          <see langword="true" />
          <see langword="true" /> Jeśli element został pierwsze, w przeciwnym razie przejęcie na własność <see langword="false" />. <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda deklaruje, że używany jest zależność. Jeśli inny element wcześniej wywołuje tę metodę i przejęcia własności, `false` jest zwracana. A <xref:System.Web.Caching.CacheDependency> mogą być używane tylko przez wpisu pamięci podręcznej w jeden. Po dodaniu elementu do pamięci podręcznej z wszelkich zależności pamięci podręcznej określonych pamięci podręcznej powinien przejęcie na własność tych zależności, aby upewnić się, że ich nie będą używane gdzieś else.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcLastModified : DateTime" Usage="System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera godzinę ostatniej zmiany zależności.</summary>
        <value>Godzina, ostatnie zmiany zależności.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest mierzony w uniwersalnego czasu koordynowanego (UTC) (znany także jako uniwersalny Greenwich).  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.Caching.AggregateCacheDependency> klasy, aby dodać element, przy użyciu dwóch <xref:System.Web.Caching.CacheDependency> do obiektu zależności, <xref:System.Web.Caching.Cache>. Gdy żądanie dotyczące <xref:System.Web.Caching.Cache> wykonano elementu, kod sprawdza, czy element znajduje się w <xref:System.Web.Caching.Cache>. Jeśli tak jest, <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> właściwość jest konwertowana na ciąg i wyświetlane na stronie. Jeśli nie jest, element i jego dwie zależności są tworzone i dodawane do <xref:System.Web.Caching.Cache>.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
  </Members>
</Type>