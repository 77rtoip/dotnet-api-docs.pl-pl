<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="971848a65c6d20655c657ffc94cd2e88f373bb0d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579790" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Ustanawia relację zależności między elementu przechowywanych w aplikacji ASP.NET <see cref="T:System.Web.Caching.Cache" /> obiektu i plik, klucz pamięci podręcznej, tablicę jednego lub drugiego <see cref="T:System.Web.Caching.CacheDependency" /> obiektu. <see cref="T:System.Web.Caching.CacheDependency" /> Klasy monitoruje relacji zależności, tak aby ich zmianie elementu pamięci podręcznej zostaną automatycznie usunięte.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dodaj element do pamięci podręcznej, który jest zależny od innego obiektu, takiego jak plik lub tablica plików, elementu zależnego zostanie automatycznie usunięta z pamięci podręcznej po zmianie obiektu. Załóżmy na przykład, możesz utworzyć <xref:System.Data.DataSet> obiekt na podstawie danych w pliku XML. Możesz dodać <xref:System.Data.DataSet> do pamięci podręcznej z <xref:System.Web.Caching.CacheDependency> obiekt, który sprawia, że <xref:System.Data.DataSet> zależny od pliku XML. W przypadku zmiany pliku XML, <xref:System.Data.DataSet> zostanie usunięty z pamięci podręcznej.  
  
 Do pamięci podręcznej aplikacji można dodać elementy z zależnościami <xref:System.Web.Caching.Cache.Add%2A> i <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> metody. Nie można użyć <xref:System.Web.Caching.Cache.Item%2A> właściwości, aby dodać elementy do zależności w pamięci podręcznej.  
  
 Aby skonfigurować zależności, Utwórz wystąpienie <xref:System.Web.Caching.CacheDependency> klasy, podając pliki, klucze lub katalogów, na których jest zależna, element, a następnie przekazać zależności do <xref:System.Web.Caching.Cache.Add%2A> lub <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> metody. <xref:System.Web.Caching.CacheDependency> Wystąpienia może reprezentować pojedynczy plik lub katalog, tablica plików lub katalogów lub tablicę pliki lub katalogi wraz z tablicy kluczy pamięci podręcznej (reprezentuje inne elementy przechowywane w <xref:System.Web.Caching.Cache> obiektu).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, za pomocą <xref:System.Web.Caching.CacheDependency.HasChanged%2A> umożliwia określenie, czy <xref:System.Web.Caching.CacheDependency> zmienione od czasu poprzedniego żądania dla elementu <xref:System.Web.Caching.Cache>. `dt` Przekazanej wartości `start` ustawiono parametr <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy.</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz dziedziczyć klasy z <xref:System.Web.Caching.CacheDependency>, wdrożenie tej wersji <xref:System.Web.Caching.CacheDependency.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest klasa, która implementuje tę wersję <xref:System.Web.Caching.CacheDependency> Konstruktor jako wszystkie klasy, które pochodzą z <xref:System.Web.Caching.CacheDependency> są wymagane.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Ścieżka do pliku lub katalogu, który jest zależny od obiektu w pamięci podręcznej. Po zmianie tego zasobu, obiektu w pamięci podręcznej staje się przestarzała i zostanie usunięta z pamięci podręcznej.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która monitoruje pliku lub katalogu dla zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog lub plik określony w `filename` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu po obiektu zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> podczas tworzenia pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością następująca ścieżka pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> obiekt jest tworzony, ale jest tworzony później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie <xref:System.Web.Caching.CacheDependency> klasy, w zależności od pliku XML. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Metoda następnie dodaje element do <xref:System.Web.Caching.Cache> jest zależne od tego pliku.  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 Umożliwia także zrobić w następujący sposób, aby dodać element do <xref:System.Web.Caching.Cache> z zależnością pliku.  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które jest zależny od obiektu w pamięci podręcznej. Gdy dowolne z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzałe i zostanie usunięta z pamięci podręcznej.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która monitoruje tablicę ścieżki (do plików lub katalogów) dla zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli pliki lub katalogi w tablicy zmiany lub jest usuwany z tablicy, pamięci podręcznej element staje się przestarzałe i zostanie usunięte z aplikacji <xref:System.Web.Caching.Cache> obiektu.  
  
 Ponadto jeśli katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu po obiektu zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> utworzenia tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością następująca ścieżka pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> obiekt jest tworzony, ale jest tworzony później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
> [!NOTE]
>  Podczas tworzenia tablicy, która zawiera zależności pliku, należy zdefiniować liczbę plików, czy element jest dodawany do <xref:System.Web.Caching.Cache> jest zależna od.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> metodę, aby dodać element do <xref:System.Web.Caching.Cache> z zależnościami w tablicy plików. Możesz również wprowadzić element zależny od tablicy katalogów.  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">Ścieżka do pliku lub katalogu, który jest zależny od obiektu w pamięci podręcznej. Po zmianie tego zasobu, obiektu w pamięci podręcznej staje się przestarzała i zostanie usunięta z pamięci podręcznej.</param>
        <param name="start">Czas, względem której Sprawdź datę ostatniej modyfikacji pliku lub katalogu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która monitoruje pliku lub katalogu dla zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog lub plik określony w `filename` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu po obiektu zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> podczas tworzenia pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością następująca ścieżka pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> obiekt jest tworzony, ale jest tworzony później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest oparty bezpośrednio na `start` parametru. Użyj `start` parametr do przekazania datę i godzinę w przeszłości, względem którego chcesz sprawdzić jego ostatniej modyfikacji Data katalog lub plik przekazany `filename` parametru. Jeśli jego ostatniej modyfikacji Data jest późniejsza niż data i czas zestaw przekazane `start` parametru element pamięci podręcznej zostanie usunięty z <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje ten konstruktor do tworzenia wystąpienia <xref:System.Web.Caching.CacheDependency> obiekt, a następnie wstawia element do <xref:System.Web.Caching.Cache> z tym zależności. `dt` Przekazanej wartości `start` ustawiono parametr <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które jest zależny od obiektu w pamięci podręcznej. Gdy dowolne z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzałe i zostanie usunięta z pamięci podręcznej.</param>
        <param name="start">Czas, względem której Sprawdź datę ostatniej modyfikacji obiektu w tablicy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która monitoruje tablicę ścieżki (do plików lub katalogów) dla zmian i określa czas, kiedy rozpoczyna monitorowanie zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu po obiektu zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> utworzenia tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością następująca ścieżka pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> obiekt jest tworzony, ale jest tworzony później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest oparty bezpośrednio na `start` parametru. Użyj `start` przekazany parametr do przekazania datę i godzinę w przeszłości, względem którego chcesz sprawdzić datę ostatniej modyfikacji tablicy `filenames` parametru. Jeśli jego ostatniej modyfikacji data wszystkich obiektów w tablicy jest późniejsza niż data i czas zestaw przekazane `start` parametru element pamięci podręcznej zostanie usunięty z <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Web.Caching.CacheDependency> obiekt, który przekazuje dwa pliki XML i <xref:System.DateTime.Now%2A?displayProperty=nameWithType> wartość, gdy obiekt jest uwzględniona jako argument parametru <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> wywołania metody.  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które jest zależny od obiektu w pamięci podręcznej. Gdy dowolne z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzałe i zostanie usunięta z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica pamięci podręcznej kluczy, które nowy obiekt monitoruje zmiany. Gdy dowolne z tych zmian kluczy pamięci podręcznej, skojarzone z tym obiektem zależności obiektu w pamięci podręcznej staje się przestarzała i zostanie usunięta z pamięci podręcznej.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która monitoruje tablicę ścieżki (do plików lub katalogów) i/lub tablicy kluczy pamięci podręcznej zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto jeśli katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu po obiektu zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> utworzenia tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością następująca ścieżka pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> obiekt jest tworzony, ale jest tworzony później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
 Jednak `cachekeys` zależności nie działają tak samo. Jeśli co najmniej jednej wartości w `cachekeys` parametr nie istnieje w tym czasie insert, Wstaw kończy się niepowodzeniem. Należy pamiętać, że nie ma żadnych wyjątek dla tego scenariusza.  
  
## Examples  
 Poniższy fragment kodu pokazano, jak można wstawić elementu do aplikacji <xref:System.Web.Caching.Cache> z zależnością klucza do innego elementu umieszczony w pamięci podręcznej. Ponieważ ta metoda używa składni tablicy, należy zdefiniować liczba kluczy na której element jest dodawany do <xref:System.Web.Caching.Cache> jest zależna.  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które jest zależny od obiektu w pamięci podręcznej. Gdy dowolne z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzałe i zostanie usunięta z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica pamięci podręcznej kluczy, które nowy obiekt monitoruje zmiany. Gdy dowolne z tych zmian kluczy pamięci podręcznej, skojarzone z tym obiektem zależności obiektu w pamięci podręcznej staje się przestarzała i zostanie usunięta z pamięci podręcznej.</param>
        <param name="start">Data i godzina, do którego Sprawdź datę ostatniej modyfikacji obiektu, dla którego przekazano <c>nazwy plików</c> i <c>cachekeys</c> tablic.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która monitoruje tablicę ścieżki (do plików lub katalogów) i/lub tablicy kluczy pamięci podręcznej zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto jeśli katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu po obiektu zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> utworzenia tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością następująca ścieżka pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> obiekt jest tworzony, ale jest tworzony później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
 Jednak `cachekeys` zależności nie działają tak samo. Jeśli co najmniej jednej wartości w `cachekeys` parametr nie istnieje w tym czasie insert, Wstaw kończy się niepowodzeniem. Należy pamiętać, że nie ma żadnych wyjątek dla tego scenariusza.

> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest oparty bezpośrednio na `start` parametru. Użyj `start` przekazany parametr do przekazania datę i godzinę w przeszłości, względem którego chcesz sprawdzić daty ostatniej modyfikacji każdego obiektu `filenames` lub `cachekeys` parametrów. Jeśli jego ostatniej modyfikacji któregokolwiek z tych obiektów Data jest późniejsza niż data i czas zestaw przekazane `start` parametru element pamięci podręcznej zostanie usunięty z <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy `CreateDependency` metody. Gdy ta metoda jest wywoływana, tworzy <xref:System.DateTime> obiektu i <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> właściwość jest używana do dodania elementu do pamięci podręcznej z `key` parametr `key1` i wartości `Value 1`. Tablica ciągów, `dependencyKey`, zostanie utworzona z wartością `key1` również. To <xref:System.Web.Caching.CacheDependency> następnie tworzy konstruktora <xref:System.Web.Caching.CacheDependency> obiekt, który przekazuje `dependencyKey` i <xref:System.DateTime> obiektu jako argumenty parametrów. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Metoda jest wywoływana następnie przy użyciu <xref:System.Web.Caching.CacheDependency> obiektu jako parametr. Dzięki temu obiekt dodany do pamięci podręcznej przy użyciu <xref:System.Web.Caching.Cache.Insert%2A> zależne od metody `key1` klucza.  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które jest zależny od obiektu w pamięci podręcznej. Gdy dowolne z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzałe i zostanie usunięta z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica pamięci podręcznej kluczy, które nowy obiekt monitoruje zmiany. Gdy dowolne z tych zmian kluczy pamięci podręcznej, skojarzone z tym obiektem zależności obiektu w pamięci podręcznej staje się przestarzała i zostanie usunięta z pamięci podręcznej.</param>
        <param name="dependency">Inne wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która jest zależne od tego wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która monitoruje tablicę ścieżki (do plików lub katalogów) i/lub tablicy kluczy pamięci podręcznej zmian. Zapewnia także sam zależne od oddzielnego wystąpienia <see cref="T:System.Web.Caching.CacheDependency" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto jeśli katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu po obiektu zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> utworzenia tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością następująca ścieżka pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> obiekt jest tworzony, ale jest tworzony później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
  
 Jednak `cachekeys` zależności nie działają tak samo. Jeśli co najmniej jednej wartości w `cachekeys` parametr nie istnieje w tym czasie insert, Wstaw kończy się niepowodzeniem. Należy pamiętać, że nie ma żadnych wyjątek dla tego scenariusza.
  
## Examples  
 Poniższy przykład kodu tworzy `CreateDependency` metody. Gdy ta metoda jest wywoływana, używa <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> właściwości, aby dodać element do pamięci podręcznej z `key` parametr `key1` i wartości `Value 1`. Tablica ciągów, `dependencyKey`, zostanie utworzona z wartością `key1` również. <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Konstruktor jest używany do tworzenia <xref:System.Web.Caching.CacheDependency> obiektu `dep1`, które przechodzą `dependencyKey` jako argument parametru. Drugi <xref:System.Web.Caching.CacheDependency> obiektu `dep2`, jest tworzony przy użyciu tego konstruktora z `dep1` przekazany jako trzeci argument parametru. Ta druga zależność jest zależna od pierwszego. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Metoda jest wywoływana następnie przy użyciu drugiego <xref:System.Web.Caching.CacheDependency> obiektu jako parametr. W przypadku pierwszego zależności zmiany w dowolny sposób, element pamięci podręcznej zostaną unieważnione.  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), które jest zależny od obiektu w pamięci podręcznej. Gdy dowolne z tych zmian zasobów obiektu w pamięci podręcznej staje się przestarzałe i zostanie usunięta z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica pamięci podręcznej kluczy, które nowy obiekt monitoruje zmiany. Gdy dowolne z tych zmian kluczy pamięci podręcznej, skojarzone z tym obiektem zależności obiektu w pamięci podręcznej staje się przestarzała i zostanie usunięta z pamięci podręcznej.</param>
        <param name="dependency">Inne wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która jest zależne od tego wystąpienia.</param>
        <param name="start">Zegary Sprawdź datę ostatniej modyfikacji obiektów w tablicach i <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy, która monitoruje tablicę ścieżki (do plików lub katalogów) i/lub tablicy kluczy pamięci podręcznej zmian. Zapewnia także sam zależny od innego wystąpienia <see cref="T:System.Web.Caching.CacheDependency" /> klasy i czas rozpoczęcia monitorowania zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto jeśli katalogów i plików określonych w `filenames` parametr nie zostanie znaleziony w systemie plików jest traktowany jako brakujące. Jeśli brakuje pliku lub katalogu po obiektu zależności jest dodawany do <xref:System.Web.Caching.Cache>, obiektu w pamięci podręcznej zostaną usunięte z <xref:System.Web.Caching.Cache> utworzenia tego pliku lub katalogu.  
  
 Załóżmy na przykład, aby dodać obiekt do <xref:System.Web.Caching.Cache> z zależnością następująca ścieżka pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> obiekt jest tworzony, ale jest tworzony później, obiektu w pamięci podręcznej zostanie usunięty po utworzeniu pliku xyz.dat.  
 
 Jednak `cachekeys` zależności nie działają tak samo. Jeśli co najmniej jednej wartości w `cachekeys` parametr nie istnieje w tym czasie insert, Wstaw kończy się niepowodzeniem. Należy pamiętać, że nie ma żadnych wyjątek dla tego scenariusza.

> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest oparty bezpośrednio na `start` parametru. Użyj `start` przekazany parametr do przekazania datę i godzinę w przeszłości, względem którego chcesz sprawdzić daty ostatniej modyfikacji w tych obiektów `filenames`, `cachekeys`, lub `dependency` parametrów. Jeśli jego ostatniej modyfikacji któregokolwiek z tych obiektów Data jest późniejsza niż data i czas, który upłynął w `start` parametru element pamięci podręcznej zostanie usunięty z <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Poniższy kod przedstawia przykład `CreateDependency` metody. Gdy ta metoda jest wywoływana, tworzy <xref:System.DateTime> obiektu i <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> właściwość jest używana do dodania elementu do pamięci podręcznej z parametrem klucza `key1` i wartości `Value 1`. Tablica ciągów, `dependencyKey`, zostanie utworzona z wartością w jej indeks pierwszego (i tylko) ustawioną wartość `key1` również. <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Konstruktor jest następnie używany do tworzenia <xref:System.Web.Caching.CacheDependency> obiektu `dep1`, które przechodzą `dependencyKey` jako argument parametru. Drugi <xref:System.Web.Caching.CacheDependency> obiektu `dep2`, zostanie utworzona przy użyciu tego konstruktora z `dep1` i <xref:System.DateTime> przekazano obiekt jako argumenty parametrów. Ta druga zależność jest zależna od pierwszego i zależności, monitorowanie rozpocznie 10 sekund po `CreateDependency` metoda jest wywoływana. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Metoda jest wywoływana następnie przy użyciu drugiego <xref:System.Web.Caching.CacheDependency> obiektu jako parametr. W przypadku pierwszego zależności zmiany w dowolny sposób, element pamięci podręcznej zostaną unieważnione.  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Web.Caching.CacheDependency" /> klasy i wszystkie klasy, które pochodzi od <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda klasa, która pochodzi z <xref:System.Web.Caching.CacheDependency> klasa jest wymagana, aby zaimplementować tę metodę, aby wyczyścić zasoby został użyty w klasie pochodnej.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia klasy, która dziedziczy <xref:System.Web.Caching.CacheDependency> klasy i zastąpień <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> metody. Ta metoda jest wywoływana, ustawia niestandardowe właściwości typu Boolean o nazwie `Disposed` do `true`.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy inicjowanie <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Caching.CacheDependency.FinishInit%2A> Inicjowanie ukończeniu metody <xref:System.Web.Caching.CacheDependency> obiektu. Ta metoda jest wywoływana przez wszystkie <xref:System.Web.Caching.CacheDependency> konstruktorów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.Caching.CacheDependency.FinishInit" /> Metoda musi zostać wywołana na końcu konstruktora dla klasy pochodne zakończyć inicjowanie <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</para>
        </block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera zależnościach plików.</summary>
        <returns>Zależności pliku.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera unikatowy identyfikator <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</summary>
        <returns>Unikatowy identyfikator <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być szczególnie przydatne do śledzenia wielu wystąpień <xref:System.Web.Caching.CacheDependency> klasy skojarzone z elementu lub aplikacji.  
  
 Identyfikator jest kombinacją nazwy pliku (pliku zależności) lub nazwę klucza (dla zależności klucz pamięci podręcznej) i ciąg, który przypisuje tej metody do zależności. W klasach pochodzących od <xref:System.Web.Caching.CacheDependency> klasy, można przesłonić tę metodę w celu dostosowania sposobu generuje unikatowy identyfikator.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Web.Caching.AggregateCacheDependency> obiektu o nazwie `aggDep`, przy użyciu dwóch <xref:System.Web.Caching.CacheDependency> obiektów w jego tablicy. Raz `aggDep` zostanie uruchomiony, kod wywołuje <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> metodę, aby wygenerować unikatowy identyfikator dla obu zależności który `aggDep` zawiera i Wyświetla identyfikatory do strony zawierającej. Następnie dodać elementu do <xref:System.Web.Caching.Cache>za pomocą <xref:System.Web.Caching.Cache.Insert%2A> metody z `aggDep` jako zależność.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Web.Caching.CacheDependency" /> obiekt został zmieniony.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Web.Caching.CacheDependency" /> obiekt został zmieniony; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można dodać elementu do aplikacji ASP.NET <xref:System.Web.Caching.Cache> z <xref:System.Web.Caching.CacheDependency>. Gdy <xref:System.Web.Caching.CacheDependency> zmienia element dodawany <xref:System.Web.Caching.Cache> jest unieważniona i usunięty z pamięci podręcznej. Ta właściwość służy do określenia czy <xref:System.Web.Caching.CacheDependency> został zmieniony i Utwórz ponownie elementu w <xref:System.Web.Caching.Cache> Jeśli który wystąpił.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, za pomocą <xref:System.Web.Caching.CacheDependency.HasChanged%2A> umożliwia określenie, czy <xref:System.Web.Caching.CacheDependency> zmienione od czasu poprzedniego żądania dla elementu <xref:System.Web.Caching.Cache>. `dt` Przekazanej wartości `start` ustawiono parametr <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wywoływane, gdy wpis monitorowanych pamięci podręcznej zostanie usunięty.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualizuje czas ostatniego dostępu każdy element pamięci podręcznej, która zależy od tego elementu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Źródło zdarzenia.</param>
        <param name="e">
          <see cref="T:System.EventArgs" /> Obiekt, który zawiera dane zdarzenia.</param>
        <summary>Powiadamia podstawowym <see cref="T:System.Web.Caching.CacheDependency" /> obiekt zależności reprezentowany przez pochodnego <see cref="T:System.Web.Caching.CacheDependency" /> klasa uległa zmianie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda klasa, która pochodzi z <xref:System.Web.Caching.CacheDependency> klasy należy zaimplementować tę metodę.  
  
 Jeśli pochodzi od <xref:System.Web.Caching.CacheDependency> klasy, można skorzystać z podstawowej funkcji metody lub właściwości, która nie przesłonili. Podczas tworzenia wystąpienia klasy pochodnej reprezentuje plików, buforowanie kluczy, tabele bazy danych lub inne dowolne obiekty, które mają być zależne od elementu pamięci podręcznej. Podczas zmiany elementu zależności, ta metoda powiadamia podstawowe funkcje <xref:System.Web.Caching.CacheDependency> klasy, która element został zmieniony, tak aby wartości <xref:System.Web.Caching.CacheDependency.HasChanged%2A> i <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> można zaktualizować właściwości.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia klasy, która dziedziczy <xref:System.Web.Caching.CacheDependency> klasy. Tworzy publiczną metodę `ResetDependency`, która używa <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> metodę, aby zmienić czas modyfikacji zależności, a następnie wywołania <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> — metoda.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">Zależność zmienić akcji.</param>
        <summary>Dodaje metody akcji do obsługi powiadamiania zmiany tej zależności z zainteresowanych stron.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">Godzina ostatniej zmiany zależności.</param>
        <summary>Oznacza godzina ostatniej zmiany zależności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod przedstawia klasy, która dziedziczy <xref:System.Web.Caching.CacheDependency> klasy. Tworzy publiczną metodę `ResetDependency`, która używa <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> metodę, aby zmienić czas modyfikacji zależności, a następnie wywołania <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> — metoda.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia pierwszy użytkownik zadeklarować wyłącznego prawa własności do tej zależności.</summary>
        <returns>
          <see langword="true" />
          <see langword="true" /> Jeśli element został pierwszą osobą, która w przeciwnym razie przejąć na własność <see langword="false" />. <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda deklaruje, że zależności jest używana. Jeśli inny element wcześniej wywołuje tę metodę i przejęcia własności, `false` jest zwracany. A <xref:System.Web.Caching.CacheDependency> może być używany tylko przez wpis pamięci podręcznej jeden. Gdy element zostanie dodany do pamięci podręcznej z wszelkie zależności w pamięci podręcznej określonych, pamięci podręcznej powinna przejąć na własność tych zależności, aby upewnić się, że ich nie będą używane miejsce else.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera godzinę ostatniej zmiany zależności.</summary>
        <value>Czas ostatniej zmiany zależności.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest mierzony w uniwersalnego czasu koordynowanego (UTC) (znanej także jako uniwersalny Greenwich).  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.Caching.AggregateCacheDependency> klasę, aby dodać element, przy użyciu dwóch <xref:System.Web.Caching.CacheDependency> obiekt zależności, do <xref:System.Web.Caching.Cache>. Gdy żądanie dla <xref:System.Web.Caching.Cache> element staje się, kod sprawdza, czy element jest <xref:System.Web.Caching.Cache>. Jeśli tak jest, <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> jest konwertowana na ciąg i wyświetlane na stronie. Jeśli nie, element i jego zależności dwóch są tworzone i dodawane do <xref:System.Web.Caching.Cache>.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
  </Members>
</Type>