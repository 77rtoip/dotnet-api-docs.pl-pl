<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8e7c38b1d7055c405ff866cb30e11c1809f84e05" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69097858" /></Metadata><TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <TypeSignature Language="F#" Value="type CacheDependency = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Ustanawia relację zależności między elementem przechowywanym w <see cref="T:System.Web.Caching.Cache" /> obiekcie aplikacji ASP.NET i plikiem, kluczem pamięci podręcznej, tablicą jednego lub innego <see cref="T:System.Web.Caching.CacheDependency" /> obiektu. <see cref="T:System.Web.Caching.CacheDependency" /> Klasa monitoruje relacje zależności, tak aby po wprowadzeniu zmian w pamięci podręcznej element zostanie automatycznie usunięty.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku dodania elementu do pamięci podręcznej, który jest zależny od innego obiektu, takiego jak plik lub tablica plików, element zależny zostanie automatycznie usunięty z pamięci podręcznej, gdy obiekt zostanie zmieniony. Załóżmy na przykład, że tworzysz <xref:System.Data.DataSet> obiekt na podstawie danych w pliku XML. <xref:System.Data.DataSet> Do pamięci podręcznej <xref:System.Web.Caching.CacheDependency> można dodać obiekt, który wykonuje <xref:System.Data.DataSet> zależny od pliku XML. W <xref:System.Data.DataSet> przypadku zmiany pliku XML zostanie on usunięty z pamięci podręcznej.  
  
 Można dodawać elementy z zależnościami do pamięci podręcznej aplikacji przy <xref:System.Web.Caching.Cache.Add%2A> użyciu <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> metod i. Nie można użyć <xref:System.Web.Caching.Cache.Item%2A> właściwości, aby dodać elementy do pamięci podręcznej z zależnościami.  
  
 Aby skonfigurować zależność, należy utworzyć wystąpienie <xref:System.Web.Caching.CacheDependency> klasy, określając pliki, klucze lub katalogi, na których jest zależny element, a następnie przekazać zależność <xref:System.Web.Caching.Cache.Add%2A> do metody lub <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> . Wystąpienie może reprezentować pojedynczy plik lub katalog, tablicę plików lub katalogów lub tablicę plików lub katalogów wraz z tablicą kluczy pamięci podręcznej (reprezentują inne elementy przechowywane <xref:System.Web.Caching.Cache> w obiekcie). <xref:System.Web.Caching.CacheDependency>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.Caching.CacheDependency.HasChanged%2A> właściwości, aby określić, <xref:System.Web.Caching.CacheDependency> czy zmieniono od poprzedniego żądania <xref:System.Web.Caching.Cache>dla elementu w. Wartość przekazana `start` w parametrze jest ustawiona <xref:System.DateTime.Now%2A?displayProperty=nameWithType>na. `dt`  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
    <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy.</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.Caching.CacheDependency" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz utworzyć własną klasę z <xref:System.Web.Caching.CacheDependency>, Zaimplementuj tę wersję <xref:System.Web.Caching.CacheDependency.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład kodu jest klasą implementującą tę wersję <xref:System.Web.Caching.CacheDependency> konstruktora, ponieważ wszystkie klasy pochodne od <xref:System.Web.Caching.CacheDependency> są wymagane do.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Ścieżka do pliku lub katalogu, od którego zależy obiekt w pamięci podręcznej. Gdy ten zasób ulegnie zmianie, buforowany obiekt jest przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, które monitoruje plik lub katalog pod kątem zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog lub plik określony w `filename` parametrze nie zostanie znaleziony w systemie plików, będzie traktowany jako brak. Jeśli brakuje katalogu lub pliku <xref:System.Web.Caching.Cache>, gdy obiekt z zależnością zostanie dodany do, obiekt w pamięci podręcznej zostanie usunięty <xref:System.Web.Caching.Cache> z podczas tworzenia katalogu lub pliku.  
  
 Załóżmy na przykład, że obiekt jest <xref:System.Web.Caching.Cache> dodawany do elementu z zależnością od następującej ścieżki pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, ale jest tworzony później, buforowany obiekt zostanie usunięty podczas tworzenia pliku XYZ. dat.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie <xref:System.Web.Caching.CacheDependency> klasy z zależnością w pliku XML. Następnie Metoda dodaje element do elementu <xref:System.Web.Caching.Cache> , który jest zależny od tego pliku. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType>  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 Można również użyć poniższej techniki, aby dodać element do <xref:System.Web.Caching.Cache> elementu z zależnością od pliku.  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filenames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), od których zależy obiekt w pamięci podręcznej. Gdy którykolwiek z tych zasobów ulegnie zmianie, buforowany obiekt zostanie przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, które monitoruje tablicę ścieżek (do plików lub katalogów) dla zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli którykolwiek z plików lub katalogów w tablicy ulegnie zmianie lub zostanie usunięty z tablicy, element w pamięci podręcznej zostanie przestarzały i zostanie usunięty z <xref:System.Web.Caching.Cache> obiektu aplikacji.  
  
 Ponadto, jeśli którykolwiek z katalogów lub plików określonych w `filenames` parametrze nie zostanie znaleziony w systemie plików, jest traktowany jako brak. Jeśli brakuje katalogu lub pliku <xref:System.Web.Caching.Cache>, gdy obiekt z zależnością zostanie dodany do, obiekt w pamięci podręcznej zostanie usunięty <xref:System.Web.Caching.Cache> z podczas tworzenia tego katalogu lub pliku.  
  
 Załóżmy na przykład, że obiekt jest <xref:System.Web.Caching.Cache> dodawany do elementu z zależnością od następującej ścieżki pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, ale jest tworzony później, buforowany obiekt zostanie usunięty podczas tworzenia pliku XYZ. dat.  
  
> [!NOTE]
>  Podczas tworzenia tablicy, która zawiera zależności pliku, należy zdefiniować liczbę plików, od których <xref:System.Web.Caching.Cache> jest zależny element.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> metody, aby dodać element <xref:System.Web.Caching.Cache> do elementów z zależnościami dla tablicy plików. Można również udostępnić element zależnie od tablicy katalogów.  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filename, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">Ścieżka do pliku lub katalogu, od którego zależy obiekt w pamięci podręcznej. Gdy ten zasób ulegnie zmianie, buforowany obiekt jest przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="start">Czas, w którym należy sprawdzić datę ostatniej modyfikacji katalogu lub pliku.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, które monitoruje plik lub katalog pod kątem zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog lub plik określony w `filename` parametrze nie zostanie znaleziony w systemie plików, będzie traktowany jako brak. Jeśli brakuje katalogu lub pliku <xref:System.Web.Caching.Cache>, gdy obiekt z zależnością zostanie dodany do, obiekt w pamięci podręcznej zostanie usunięty <xref:System.Web.Caching.Cache> z podczas tworzenia katalogu lub pliku.  
  
 Załóżmy na przykład, że obiekt jest <xref:System.Web.Caching.Cache> dodawany do elementu z zależnością od następującej ścieżki pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, ale jest tworzony później, buforowany obiekt zostanie usunięty podczas tworzenia pliku XYZ. dat.  
  
> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest bezpośrednio oparte `start` na parametrze. Użyj parametru `start` , aby przekazać datę i godzinę w przeszłości, dla którego chcesz sprawdzić datę ostatniej modyfikacji katalogu lub pliku przekazanego `filename` do parametru. Jeśli data ostatniej modyfikacji jest późniejsza niż data i godzina przekazana w `start` parametrze, buforowany element zostanie usunięty <xref:System.Web.Caching.Cache>z.  
  
   
  
## Examples  
 Poniższy przykład kodu używa tego konstruktora do utworzenia wystąpienia <xref:System.Web.Caching.CacheDependency> obiektu, a następnie wstawia element <xref:System.Web.Caching.Cache> do elementu z tą zależnością. Wartość przekazana `start` w parametrze jest ustawiona <xref:System.DateTime.Now%2A?displayProperty=nameWithType>na. `dt`  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), od których zależy obiekt w pamięci podręcznej. Gdy którykolwiek z tych zasobów ulegnie zmianie, buforowany obiekt zostanie przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="start">Czas, w którym należy sprawdzić datę ostatniej modyfikacji obiektów w tablicy.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, które monitoruje tablicę ścieżek (do plików lub katalogów) dla zmian i określa czas rozpoczęcia monitorowania zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli którykolwiek z katalogów lub plików określony w `filenames` parametrze nie zostanie znaleziony w systemie plików, jest traktowany jako brak. Jeśli brakuje katalogu lub pliku <xref:System.Web.Caching.Cache>, gdy obiekt z zależnością zostanie dodany do, obiekt w pamięci podręcznej zostanie usunięty <xref:System.Web.Caching.Cache> z podczas tworzenia tego katalogu lub pliku.  
  
 Załóżmy na przykład, że obiekt jest <xref:System.Web.Caching.Cache> dodawany do elementu z zależnością od następującej ścieżki pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, ale jest tworzony później, buforowany obiekt zostanie usunięty podczas tworzenia pliku XYZ. dat.  
  
> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest bezpośrednio oparte `start` na parametrze. Użyj parametru `start` , aby przekazać datę i godzinę w przeszłości, dla którego chcesz sprawdzić datę ostatniej modyfikacji tablicy przekazanej `filenames` do parametru. Jeśli data ostatniej modyfikacji dowolnego obiektu w tablicy jest późniejsza niż data i godzina przekazana w `start` parametrze, buforowany element zostanie usunięty <xref:System.Web.Caching.Cache>z.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Web.Caching.CacheDependency> obiekt, który przekazuje dwa pliki XML <xref:System.DateTime.Now%2A?displayProperty=nameWithType> i wartość, gdy obiekt jest zawarty jako argument parametru w <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> wywołaniu metody.  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), od których zależy obiekt w pamięci podręcznej. Gdy którykolwiek z tych zasobów ulegnie zmianie, buforowany obiekt zostanie przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica kluczy pamięci podręcznej, którą nowy obiekt monitoruje pod kątem zmian. Po zmianie któregoś z tych kluczy pamięci podręcznej obiekt skojarzony z tym obiektem zależności jest przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, które monitoruje tablicę ścieżek (do plików lub katalogów), tablicę kluczy pamięci podręcznej lub oba te zmiany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto, jeśli którykolwiek z katalogów lub plików określonych w `filenames` parametrze nie zostanie znaleziony w systemie plików, jest traktowany jako brak. Jeśli brakuje katalogu lub pliku <xref:System.Web.Caching.Cache>, gdy obiekt z zależnością zostanie dodany do, obiekt w pamięci podręcznej zostanie usunięty <xref:System.Web.Caching.Cache> z podczas tworzenia tego katalogu lub pliku.  
  
 Załóżmy na przykład, że obiekt jest <xref:System.Web.Caching.Cache> dodawany do elementu z zależnością od następującej ścieżki pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, ale jest tworzony później, buforowany obiekt zostanie usunięty podczas tworzenia pliku XYZ. dat.  
  
 `cachekeys` Jednak zależność nie działa w ten sam sposób. Jeśli co najmniej jedna wartość w `cachekeys` parametrze nie istnieje w czasie wstawiania, Wstaw zakończy się niepowodzeniem. Należy zauważyć, że dla tego scenariusza nie zgłoszono wyjątku.  
  
## Examples  
 Poniższy fragment kodu ilustruje sposób wstawiania elementu do aplikacji <xref:System.Web.Caching.Cache> z zależnością od klucza do innego elementu umieszczonego w pamięci podręcznej. Ponieważ ta metoda używa składni tablicy, należy zdefiniować liczbę kluczy, w których element, który jest dodawany do elementu, <xref:System.Web.Caching.Cache> jest zależny od.  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), od których zależy obiekt w pamięci podręcznej. Gdy którykolwiek z tych zasobów ulegnie zmianie, buforowany obiekt zostanie przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica kluczy pamięci podręcznej, którą nowy obiekt monitoruje pod kątem zmian. Po zmianie któregoś z tych kluczy pamięci podręcznej obiekt skojarzony z tym obiektem zależności jest przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="start">Data i godzina, względem której należy sprawdzić datę ostatniej modyfikacji obiektów przekazaną w <paramref name="filenames" /> tablicach i. <paramref name="cachekeys" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, które monitoruje tablicę ścieżek (do plików lub katalogów), tablicę kluczy pamięci podręcznej lub oba te zmiany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto, jeśli którykolwiek z katalogów lub plików określonych w `filenames` parametrze nie zostanie znaleziony w systemie plików, jest traktowany jako brak. Jeśli brakuje katalogu lub pliku <xref:System.Web.Caching.Cache>, gdy obiekt z zależnością zostanie dodany do, obiekt w pamięci podręcznej zostanie usunięty <xref:System.Web.Caching.Cache> z podczas tworzenia tego katalogu lub pliku.  
  
 Załóżmy na przykład, że obiekt jest <xref:System.Web.Caching.Cache> dodawany do elementu z zależnością od następującej ścieżki pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, ale jest tworzony później, buforowany obiekt zostanie usunięty podczas tworzenia pliku XYZ. dat.  
  
 `cachekeys` Jednak zależność nie działa w ten sam sposób. Jeśli co najmniej jedna wartość w `cachekeys` parametrze nie istnieje w czasie wstawiania, Wstaw zakończy się niepowodzeniem. Należy zauważyć, że dla tego scenariusza nie zgłoszono wyjątku.

> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest bezpośrednio oparte `start` na parametrze. Użyj parametru `start` , aby przekazać datę i godzinę w przeszłości, dla którego chcesz sprawdzić datę ostatniej modyfikacji dowolnego obiektu przekazanego `filenames` w parametrze lub `cachekeys` . Jeśli data ostatniej modyfikacji któregokolwiek z tych obiektów jest późniejsza niż data i godzina przekazana w `start` parametrze, buforowany element zostanie usunięty <xref:System.Web.Caching.Cache>z.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy `CreateDependency` metodę. Gdy ta metoda <xref:System.DateTime> jest wywoływana, tworzy obiekt, <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> a właściwość jest używana do dodawania elementu `key` do `key1` pamięci podręcznej z parametrem i wartością `Value 1`. Tablica ciągów, `dependencyKey`,, jest następnie tworzona z `key1` wartością. Ten <xref:System.Web.Caching.CacheDependency> Konstruktor następnie tworzy wystąpienie <xref:System.Web.Caching.CacheDependency> obiektu,`dependencyKey` który przekazuje i obiektjakoargumentyparametru.<xref:System.DateTime> Metoda jest wywoływana dalej, <xref:System.Web.Caching.CacheDependency> przy użyciu obiektu jako parametru. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Powoduje to dodanie obiektu do pamięci podręcznej przy <xref:System.Web.Caching.Cache.Insert%2A> użyciu metody zależnej `key1` od klucza.  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), od których zależy obiekt w pamięci podręcznej. Gdy którykolwiek z tych zasobów ulegnie zmianie, buforowany obiekt zostanie przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica kluczy pamięci podręcznej, którą nowy obiekt monitoruje pod kątem zmian. Po zmianie któregoś z tych kluczy pamięci podręcznej obiekt skojarzony z tym obiektem zależności jest przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="dependency">Inne wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, od której jest zależne to wystąpienie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, które monitoruje tablicę ścieżek (do plików lub katalogów), tablicę kluczy pamięci podręcznej lub oba te zmiany. Powoduje również, że sama zależała od osobnego <see cref="T:System.Web.Caching.CacheDependency" /> wystąpienia klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto, jeśli którykolwiek z katalogów lub plików określonych w `filenames` parametrze nie zostanie znaleziony w systemie plików, jest traktowany jako brak. Jeśli brakuje katalogu lub pliku <xref:System.Web.Caching.Cache>, gdy obiekt z zależnością zostanie dodany do, obiekt w pamięci podręcznej zostanie usunięty <xref:System.Web.Caching.Cache> z podczas tworzenia tego katalogu lub pliku.  
  
 Załóżmy na przykład, że obiekt jest <xref:System.Web.Caching.Cache> dodawany do elementu z zależnością od następującej ścieżki pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, ale jest tworzony później, buforowany obiekt zostanie usunięty podczas tworzenia pliku XYZ. dat.  
  
 `cachekeys` Jednak zależność nie działa w ten sam sposób. Jeśli co najmniej jedna wartość w `cachekeys` parametrze nie istnieje w czasie wstawiania, Wstaw zakończy się niepowodzeniem. Należy zauważyć, że dla tego scenariusza nie zgłoszono wyjątku.
  
## Examples  
 Poniższy przykład kodu tworzy `CreateDependency` metodę. Gdy ta metoda jest <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> wywoływana, używa właściwości, aby dodać element do pamięci podręcznej `key` z parametrem `key1` i wartością `Value 1`. Tablica ciągów, `dependencyKey`,, jest następnie tworzona z `key1` wartością. Konstruktor służy do <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, `dep1`który jest przekazywany `dependencyKey` jako argument parametru. <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Drugi <xref:System.Web.Caching.CacheDependency> obiekt, `dep2`,,, jest tworzony za pomocą tego konstruktora `dep1` , z przekazaną jako trzeci argument parametru. Ta druga zależność jest zależna od pierwszej. Metoda jest wywoływana dalej, przy użyciu drugiego <xref:System.Web.Caching.CacheDependency> obiektu jako parametru. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Jeśli pierwsza zależność ulegnie zmianie w dowolny sposób, buforowany element zostanie unieważniony.  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tablica ścieżek (do plików lub katalogów), od których zależy obiekt w pamięci podręcznej. Gdy którykolwiek z tych zasobów ulegnie zmianie, buforowany obiekt zostanie przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="cachekeys">Tablica kluczy pamięci podręcznej, którą nowy obiekt monitoruje pod kątem zmian. Po zmianie któregoś z tych kluczy pamięci podręcznej obiekt skojarzony z tym obiektem zależności jest przestarzały i zostanie usunięty z pamięci podręcznej.</param>
        <param name="dependency">Inne wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, od której jest zależne to wystąpienie.</param>
        <param name="start">Czas, w którym należy sprawdzić datę ostatniej modyfikacji obiektów w tablicach i <see cref="T:System.Web.Caching.CacheDependency" /> obiekcie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.Caching.CacheDependency" /> klasy, które monitoruje tablicę ścieżek (do plików lub katalogów), tablicę kluczy pamięci podręcznej lub oba te zmiany. Powoduje również, że sama zależała od innego <see cref="T:System.Web.Caching.CacheDependency" /> wystąpienia klasy i czasu rozpoczęcia monitorowania zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponadto, jeśli którykolwiek z katalogów lub plików określonych w `filenames` parametrze nie zostanie znaleziony w systemie plików, jest traktowany jako brak. Jeśli brakuje katalogu lub pliku <xref:System.Web.Caching.Cache>, gdy obiekt z zależnością zostanie dodany do, obiekt w pamięci podręcznej zostanie usunięty <xref:System.Web.Caching.Cache> z podczas tworzenia tego katalogu lub pliku.  
  
 Załóżmy na przykład, że obiekt jest <xref:System.Web.Caching.Cache> dodawany do elementu z zależnością od następującej ścieżki pliku: c:\stocks\xyz.dat. Jeśli ten plik nie zostanie znaleziony podczas <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, ale jest tworzony później, buforowany obiekt zostanie usunięty podczas tworzenia pliku XYZ. dat.  
 
 `cachekeys` Jednak zależność nie działa w ten sam sposób. Jeśli co najmniej jedna wartość w `cachekeys` parametrze nie istnieje w czasie wstawiania, Wstaw zakończy się niepowodzeniem. Należy zauważyć, że dla tego scenariusza nie zgłoszono wyjątku.

> [!NOTE]
>  Śledzenie zmian rozpocznie się natychmiast i nie jest bezpośrednio oparte `start` na parametrze. Użyj parametru `start` , aby przekazać datę i godzinę w przeszłości, dla którego chcesz sprawdzić datę ostatniej modyfikacji każdego z obiektów przekazanych `filenames`w parametrze, `cachekeys`lub `dependency` . Jeśli data ostatniej modyfikacji któregokolwiek z tych obiektów jest późniejsza niż data i godzina przekazana w `start` parametrze, buforowany element zostanie usunięty <xref:System.Web.Caching.Cache>z.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia `CreateDependency` metodę. Gdy ta metoda jest <xref:System.DateTime> wywoływana, tworzy obiekt, <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> a właściwość jest używana do dodawania elementu do pamięci podręcznej `key1` z parametrem klucza i wartością `Value 1`. Tablica ciągów, `dependencyKey`,,, jest następnie tworzona z wartością przy pierwszym indeksie (i tylko) ustawioną na `key1` wartość. Konstruktor jest następnie używany do <xref:System.Web.Caching.CacheDependency> tworzenia obiektu, `dep1`który jest przekazywany `dependencyKey` jako argument parametru. <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Drugi <xref:System.Web.Caching.CacheDependency> obiekt, `dep2`,,, jest następnie tworzony przy użyciu tego <xref:System.DateTime> konstruktora `dep1` , z i obiekt przeszedł jako argumenty parametru. Ta druga zależność jest zależna od pierwszego, a monitorowanie zależności rozpocznie się 10 sekund od `CreateDependency` wywołania metody. Metoda jest wywoływana dalej, przy użyciu drugiego <xref:System.Web.Caching.CacheDependency> obiektu jako parametru. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Jeśli pierwsza zależność ulegnie zmianie w dowolny sposób, buforowany element zostanie unieważniony.  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberSignature Language="F#" Value="abstract member DependencyDispose : unit -&gt; unit&#xA;override this.DependencyDispose : unit -&gt; unit" Usage="cacheDependency.DependencyDispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Web.Caching.CacheDependency" /> klasę i wszystkie klasy pochodne od. <see cref="T:System.Web.Caching.CacheDependency" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda klasa, która dziedziczy z <xref:System.Web.Caching.CacheDependency> klasy, jest wymagana do zaimplementowania tej metody w celu oczyszczenia zasobów, która została użyta przez klasę pochodną.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje klasę, która dziedziczy z <xref:System.Web.Caching.CacheDependency> klasy i <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> przesłania metodę. Gdy ta metoda jest wywoływana, ustawia niestandardową Właściwość Boolean o `Disposed` nazwie `true`do.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cacheDependency.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Web.Caching.CacheDependency" /> obiekt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberSignature Language="F#" Value="member this.FinishInit : unit -&gt; unit" Usage="cacheDependency.FinishInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy inicjalizację <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda kończy inicjalizację <xref:System.Web.Caching.CacheDependency>obiektu. <xref:System.Web.Caching.CacheDependency.FinishInit%2A> Ta metoda jest wywoływana przez wszystkich <xref:System.Web.Caching.CacheDependency> konstruktorów.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Metoda musi być wywoływana na końcu konstruktora dla klas pochodnych, aby zakończyć inicjalizację <see cref="T:System.Web.Caching.CacheDependency" /> obiektu. <see cref="M:System.Web.Caching.CacheDependency.FinishInit" /></para></block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberSignature Language="F#" Value="abstract member GetFileDependencies : unit -&gt; string[]&#xA;override this.GetFileDependencies : unit -&gt; string[]" Usage="cacheDependency.GetFileDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera zależności pliku.</summary>
        <returns>Zależności pliku.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberSignature Language="F#" Value="abstract member GetUniqueID : unit -&gt; string&#xA;override this.GetUniqueID : unit -&gt; string" Usage="cacheDependency.GetUniqueID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera unikatowy identyfikator <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</summary>
        <returns>Unikatowy identyfikator <see cref="T:System.Web.Caching.CacheDependency" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być szczególnie przydatna do śledzenia wielu wystąpień <xref:System.Web.Caching.CacheDependency> klasy skojarzonej z elementem lub aplikacją.  
  
 Identyfikator jest kombinacją nazwy pliku (dla zależności pliku) lub nazwy klucza (dla zależności klucza pamięci podręcznej) oraz ciągu, który ta metoda przypisuje do zależności. W klasach, które pochodzą <xref:System.Web.Caching.CacheDependency> z klasy, można zastąpić tę metodę, aby dostosować sposób generowania unikatowego identyfikatora.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Web.Caching.AggregateCacheDependency> obiekt o nazwie `aggDep`, z dwoma <xref:System.Web.Caching.CacheDependency> obiektami w jego tablicy. Po `aggDep` utworzeniu wystąpienia kod <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> wywołuje metodę w celu wygenerowania unikatowego identyfikatora dla obu zależności, które `aggDep` zawierają i wyświetla identyfikatory na stronie zawierającej. Element jest następnie dodawany do <xref:System.Web.Caching.Cache>, <xref:System.Web.Caching.Cache.Insert%2A> przy użyciu metody, z `aggDep` jako zależność.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Web.Caching.CacheDependency.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, <see cref="T:System.Web.Caching.CacheDependency" /> czy obiekt został zmieniony.</summary>
        <value><see langword="true" />Jeśli obiekt został zmieniony; <see langword="false" />w przeciwnym razie. <see cref="T:System.Web.Caching.CacheDependency" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz dodać element do aplikacji <xref:System.Web.Caching.Cache> ASP.NET <xref:System.Web.Caching.CacheDependency>z. Po wprowadzeniu zmian element dodany <xref:System.Web.Caching.Cache> do jest unieważniony i usunięty z pamięci podręcznej. <xref:System.Web.Caching.CacheDependency> Za pomocą tej właściwości można określić, czy <xref:System.Web.Caching.CacheDependency> zmieniono i ponownie utworzyć element <xref:System.Web.Caching.Cache> w przypadku, gdy wystąpił.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.Caching.CacheDependency.HasChanged%2A> właściwości, aby określić, <xref:System.Web.Caching.CacheDependency> czy zmieniono od poprzedniego żądania <xref:System.Web.Caching.Cache>dla elementu w. Wartość przekazana `start` w parametrze jest ustawiona <xref:System.DateTime.Now%2A?displayProperty=nameWithType>na. `dt`  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberSignature Language="F#" Value="member this.ItemRemoved : unit -&gt; unit" Usage="cacheDependency.ItemRemoved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wywoływana, gdy zostanie usunięty wpis monitorowanej pamięci podręcznej.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberSignature Language="F#" Value="member this.KeepDependenciesAlive : unit -&gt; unit" Usage="cacheDependency.KeepDependenciesAlive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualizuje czas ostatniego dostępu każdego elementu pamięci podręcznej, który zależy od tego elementu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.NotifyDependencyChanged : obj * EventArgs -&gt; unit" Usage="cacheDependency.NotifyDependencyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="e" Type="System.EventArgs" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender">Źródło zdarzenia.</param>
        <param name="e"><see cref="T:System.EventArgs" /> Obiekt, który zawiera dane zdarzenia.</param>
        <summary>Powiadamia obiekt podstawowy <see cref="T:System.Web.Caching.CacheDependency" /> , że zależność reprezentowana przez klasę pochodną <see cref="T:System.Web.Caching.CacheDependency" /> uległa zmianie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda klasa, która dziedziczy z <xref:System.Web.Caching.CacheDependency> klasy, musi implementować tę metodę.  
  
 Podczas wyprowadzania z <xref:System.Web.Caching.CacheDependency> klasy należy używać podstawowych funkcji dowolnej metody lub właściwości, które nie zostały zastąpione. Podczas tworzenia wystąpienia klasy pochodnej reprezentuje ona pliki, klucze pamięci podręcznej, tabele bazy danych lub inne dowolne obiekty, dla których ma być zależny element w pamięci podręcznej. Gdy element zależności ulegnie zmianie, ta metoda powiadamia podstawowe funkcje <xref:System.Web.Caching.CacheDependency> klasy o zmianie elementu, aby można było zaktualizować wartości <xref:System.Web.Caching.CacheDependency.HasChanged%2A> właściwości i <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> .  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje klasę, która dziedziczy z <xref:System.Web.Caching.CacheDependency> klasy. Tworzy metodę `ResetDependency`publiczną, która <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> używa metody do zmiany czasu <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> , w którym zależność została zmodyfikowana, a następnie wywołuje metodę.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberSignature Language="F#" Value="member this.SetCacheDependencyChanged : Action&lt;obj, EventArgs&gt; -&gt; unit" Usage="cacheDependency.SetCacheDependencyChanged dependencyChangedAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" Index="0" FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">Akcja zmiany zależności.</param>
        <summary>Dodaje metodę akcji do obsługi powiadamiania zainteresowanych stron w zmianach tej zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberSignature Language="F#" Value="member this.SetUtcLastModified : DateTime -&gt; unit" Usage="cacheDependency.SetUtcLastModified utcLastModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">Godzina, o której Ostatnia zmiana zależności.</param>
        <summary>Oznacza godzinę ostatniej zmiany zależności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje klasę, która dziedziczy z <xref:System.Web.Caching.CacheDependency> klasy. Tworzy metodę `ResetDependency`publiczną, która <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> używa metody do zmiany czasu <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> , w którym zależność została zmodyfikowana, a następnie wywołuje metodę.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberSignature Language="F#" Value="member this.TakeOwnership : unit -&gt; bool" Usage="cacheDependency.TakeOwnership " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zezwala pierwszemu użytkownikowi na deklarowanie wyłącznej własności tej zależności.</summary>
        <returns><see langword="true" />Jeśli element był pierwszy do przejęcia na własność; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda deklaruje, że zależność jest używana. W przypadku zwrócenia innego elementu, `false` który wcześniej wywołał tę metodę i trwało własność. <xref:System.Web.Caching.CacheDependency> Może być używany tylko przez jeden wpis pamięci podręcznej. Gdy element zostanie dodany do pamięci podręcznej z określonymi zależnościami pamięci podręcznej, pamięć podręczna powinna przejąć własność tych zależności, aby upewnić się, że nie są one ponownie używane w innym miejscu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcLastModified : DateTime" Usage="System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera godzinę ostatniej zmiany zależności.</summary>
        <value>Godzina ostatniej zmiany zależności.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest mierzona w uniwersalnym czasie koordynowanym (UTC) (określanym również jako czas uniwersalny Greenwich).  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Web.Caching.AggregateCacheDependency> klasy w celu dodania elementu z dwoma <xref:System.Web.Caching.CacheDependency> zależnościami <xref:System.Web.Caching.Cache>obiektów do. Gdy zostanie wykonane żądanie dotyczące <xref:System.Web.Caching.Cache> elementu, kod sprawdza, czy element znajduje się <xref:System.Web.Caching.Cache>w. Jeśli tak jest, <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> właściwość jest konwertowana na ciąg i wyświetlany na stronie. Jeśli tak nie jest, element i jego dwie zależności są tworzone i dodawane do <xref:System.Web.Caching.Cache>.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Buforowanie danych aplikacji</related>
      </Docs>
    </Member>
  </Members>
</Type>
