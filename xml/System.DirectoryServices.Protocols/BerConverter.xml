<Type Name="BerConverter" FullName="System.DirectoryServices.Protocols.BerConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dcd13a1f1b1676bff591dd253cec61094fea62ef" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37660969" /></Metadata><TypeSignature Language="C#" Value="public sealed class BerConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BerConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.Protocols.BerConverter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BerConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class BerConverter sealed" />
  <TypeSignature Language="F#" Value="type BerConverter = class" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.DirectoryServices.Protocols.BerConverter" /> Klasy koduje i dekoduje ustrukturyzowanych danych za pomocą podstawowych reguł kodowania (BA).</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public static object[] Decode (string format, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object[] Decode(string format, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.BerConverter.Decode(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decode (format As String, value As Byte()) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Object ^&gt; ^ Decode(System::String ^ format, cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member Decode : string * byte[] -&gt; obj[]" Usage="System.DirectoryServices.Protocols.BerConverter.Decode (format, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu.</param>
        <param name="value">Tablica numer danych.</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.BerConverter.Decode(System.String,System.Byte[])" /> Metoda dekoduje binarną reprezentację danych, za pomocą numer, można pobrać danych ze strukturą.</summary>
        <returns>Dekodowane dane.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> Parametr zawiera odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="format" /> Parametr zawiera znak niezdefiniowany.</exception>
        <exception cref="T:System.DirectoryServices.Protocols.BerConversionException">Podstawowy dekodowania kończy się niepowodzeniem. Następujące reguły dekodowania.  
  
 <list type="table"><listheader><term> Kod </term> <description> odpowiedni wynik </description> </listheader> <item> <term> "{" "}" "[" "]" "n" "x" </term> <description> nie odpowiedni wynik </description> </item> <item> <term> "i" "e" </term> <description> int </description> </item> <item> <term> 'b' </term> <description> bool </description> </item> <item> <term> "" </term> <description> ciąg </description> </item> <item> <term> ' O' </term> <description> byte [] </description> </item> <item> <term> "B"  </term> <description> byte [] zawierające ciągi bit </description> </item> <item> <term> "v" </term> <description> string [] </description> </item> <item> <term> "V" </term> <description> byte [],]  </description></item></list></exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public static byte[] Encode (string format, params object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Encode(string format, object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.BerConverter.Encode(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encode (format As String, ParamArray value As Object()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Encode(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member Encode : string * obj[] -&gt; byte[]" Usage="System.DirectoryServices.Protocols.BerConverter.Encode (format, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="value" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu.</param>
        <param name="value">Tablica sformatowane dane.</param>
        <summary><see cref="M:System.DirectoryServices.Protocols.BerConverter.Encode(System.String,System.Object[])" /> Metoda koduje ustrukturyzowanych danych za pomocą numer, aby pobrać binarną reprezentację danych.</summary>
        <returns>Tablica dane zakodowane na numer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostępne są następujące znaki w prawidłowym formacie.  
  
 Reguły kodowania:  
  
|Kod|Odnośnego argumentu|  
|----------|----------------------------|  
|"{" "}" "[" "]" "n"|Brak odpowiedniego argumentu|  
|t ""i""e"|int|  
|'a'|Ciąg oktetu|  
|"b"|bool|  
|przez "|string|  
|' o' "X"|byte[]|  
|"v"|ciąg]|  
|"V"|byte[][]|  
  
> [!NOTE]
>  "v" i "V" są w tym wartość o podwójnej precyzji {} jest wymagana. Na przykład użyj {{v}} i {{V}}.  
  
## <a name="exceptions"></a>Wyjątki  
  
|Wyjątek|Warunek|  
|---------------|---------------|  
|ArgumentNullException|`format` to odwołanie o wartości null (`Nothing` w języku Visual Basic).|  
|ArgumentException|Ten wyjątek występuje w jednym z następujących warunków:<br /><br /> -Brak wystarczającej liczby argumentów dla ciągu formatowania.<br />-Argument ciągu formatu jest nieprawidłowy.<br />-Ciąg formatu zawiera znak niezdefiniowany.|  
|Berconversionexception —|Błąd podczas przetwarzania wartości zwracanej.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>