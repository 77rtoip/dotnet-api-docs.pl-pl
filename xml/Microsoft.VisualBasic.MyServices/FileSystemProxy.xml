<Type Name="FileSystemProxy" FullName="Microsoft.VisualBasic.MyServices.FileSystemProxy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed2ee0ef4242766af8cbd2ca50434e7b030d92a7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69318403" /></Metadata><TypeSignature Language="C#" Value="public class FileSystemProxy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FileSystemProxy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.MyServices.FileSystemProxy" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemProxy" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemProxy" />
  <TypeSignature Language="F#" Value="type FileSystemProxy = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera właściwości i metody pracy z dyskami, plikami i katalogami.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono przykłady zadań z obiektem `My.Computer.FileSystem`.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego|[Instrukcje: Odczyt z plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
|Odczytaj z rozdzielanego pliku tekstowego|[Instrukcje: Odczyt z rozdzielanych przecinkami plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczytaj z pliku tekstowego o stałej szerokości|[Instrukcje: Odczyt z plików tekstowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczytaj z pliku tekstowego z wieloma formatami|[Instrukcje: Odczyt z plików tekstowych z wieloma formatami](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
|Odczyt z pliku binarnego|[Instrukcje: Odczyt z plików binarnych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
|Odczytaj z pliku tekstowego za pomocą<xref:System.IO.StreamReader>|[Instrukcje: Odczytywanie tekstu z plików za pomocą StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
|Zapis w pliku tekstowym|[Instrukcje: Zapisz tekst do plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|Dołącz do pliku tekstowego|[Instrukcje: Dołącz do plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
|Zapis w pliku binarnym|[Instrukcje: Zapisz w plikach binarnych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
|Zapisuj w plikach tekstowych w katalogu Moje **dokumenty**|[Instrukcje: Zapisz tekst do plików w katalogu Moje dokumenty](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-in-the-my-documents-directory.md)|  
|Zapisz w pliku tekstowym z`StreamWriter`|[Instrukcje: Zapisz tekst do plików z StreamWriter —](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
|Kopiuj pliki z określonym wzorcem|[Instrukcje: Kopiuj pliki z określonym wzorcem do katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md)|  
|Kopiuj plik do tego samego katalogu|[Instrukcje: Utwórz kopię pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Kopiowanie pliku do innego katalogu|[Instrukcje: Tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
|Utwórz plik|[Instrukcje: Utwórz plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-file.md)|  
|Usuwanie pliku|[Instrukcje: Usuń plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
|Znajdowanie plików z określonym wzorcem|[Instrukcje: Znajdowanie plików z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
|Przenieś plik|[Instrukcje: Przenieś plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
|Zmień nazwę pliku|[Instrukcje: Zmień nazwę pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
|Kopiowanie katalogu do innego katalogu|[Instrukcje: Kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
|Tworzenie katalogu|[Instrukcje: Tworzenie katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
|Znajdź podkatalogi z określonym wzorcem|[Instrukcje: Znajdź podkatalogi z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
|Pobieranie kolekcji plików w katalogu|[Instrukcje: Pobieranie kolekcji plików w katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|Odczytaj z katalogu Moje **dokumenty**|[Instrukcje: Pobierz zawartość katalogu Moje dokumenty](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-retrieve-the-contents-of-the-my-documents-directory.md)|  
|Analizowanie ścieżki pliku|[Instrukcje: Analizowanie ścieżek plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 Ten przykład sprawdza, czy folder `C:\backup\logs` istnieje i sprawdza jego właściwości.  
  
 [!code-vb[VbVbcnMyFileSystem#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#23)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName="CombinePath">
      <MemberSignature Language="C#" Value="public string CombinePath (string baseDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string CombinePath(string baseDirectory, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CombinePath (baseDirectory As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CombinePath(System::String ^ baseDirectory, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="member this.CombinePath : string * string -&gt; string" Usage="fileSystemProxy.CombinePath (baseDirectory, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseDirectory" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseDirectory"><see langword="String" />. Pierwsza ścieżka, która ma zostać połączona.</param>
        <param name="relativePath"><see langword="String" />. Druga ścieżka, która ma zostać połączona.</param>
        <summary>Łączy dwie ścieżki i zwraca prawidłowo sformatowaną ścieżkę.</summary>
        <returns>Kombinacja określonych ścieżek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powoduje przycinanie nadmiernych znaków ukośnika w celu utworzenia prawidłowo sformatowanej ścieżki.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CombinePath` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Łączenie ścieżki katalogu i nazwy pliku|[Instrukcje: Analizowanie ścieżek plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 Ten przykład łączy ścieżkę katalogu i nazwę pliku w celu utworzenia prawidłowo sformatowanej ścieżki.  
  
 [!code-vb[VbRefFile#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#3)]  
  
 Ten przykład łączy dwie ścieżki, aby utworzyć prawidłowo sformatowaną ścieżkę.  
  
 [!code-vb[VbRefFile#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#4)]  
  
 Ten przykład zwraca `C:\Dir1\Dir2\Dir4\Dir5\File.txt`wartość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="baseDirectory" />lub <paramref name="relativePath" /> są źle sformułowane ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Instrukcje: Pobierz kolekcję plików w katalogu w Visual Basic</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Katalog, który ma zostać skopiowany.</param>
        <param name="destinationDirectoryName">Lokalizacja, do której należy skopiować katalog.</param>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kopiuje zawartość katalogu oraz sam katalog. Jeśli katalog docelowy nie istnieje, zostanie utworzony. Jeśli katalog o tej samej nazwie istnieje w lokalizacji docelowej, zawartość tych dwóch katalogów zostanie scalona. Podczas operacji można określić nową nazwę katalogu.  
  
 Podczas kopiowania plików w katalogu mogą zostać zgłoszone wyjątki, które są spowodowane przez określony plik. Gdy takie wyjątki są zgłaszane, są one konsolidowane w jednym wyjątku, `Data` którego właściwość zawiera wpisy w postaci <xref:System.Collections.IDictionary> , w której plik lub ścieżka katalogu jest kluczem, a określony komunikat wyjątku jest zawarty w odpowiadająca wartość. Służy `For…Each` do wyliczania wpisów.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CopyDirectory` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie katalogu|[Instrukcje: Kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 Poniższy przykład kopiuje katalog `TestDirectory1` do `TestDirectory2`, zastępując istniejące pliki.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 Zamień `C:\TestDirectory1`na ścieżkę i nazwę katalogu, który chcesz skopiować, oraz lokalizację, do której chcesz ją skopiować. `C:\TestDirectory2`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" />lub <paramref name="sourceDirectoryName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog źródłowy nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Ścieżka źródłowa i ścieżka docelowa są takie same.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa folderu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Plik docelowy istnieje, ale nie można uzyskać do niego dostępu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Instrukcje: Pobierz kolekcję plików w katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Instrukcje: Analizowanie ścieżek plików w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Katalog, który ma zostać skopiowany.</param>
        <param name="destinationDirectoryName">Lokalizacja, do której należy skopiować katalog.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kopiuje zawartość katalogu oraz sam katalog. Jeśli katalog docelowy nie istnieje, zostanie utworzony. Jeśli katalog o tej samej nazwie istnieje w lokalizacji docelowej, zawartość tych dwóch katalogów zostanie scalona. Podczas operacji można określić nową nazwę katalogu.  
  
 Podczas kopiowania plików w katalogu mogą zostać zgłoszone wyjątki, które są spowodowane przez określony plik. Gdy takie wyjątki są zgłaszane, są one konsolidowane w jednym wyjątku, `Data` którego właściwość zawiera wpisy w postaci <xref:System.Collections.IDictionary> , w której plik lub ścieżka katalogu jest kluczem, a określony komunikat wyjątku jest zawarty w odpowiadająca wartość. Służy `For…Each` do wyliczania wpisów.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CopyDirectory` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie katalogu|[Instrukcje: Kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 Poniższy przykład kopiuje katalog `TestDirectory1` do `TestDirectory2`, zastępując istniejące pliki.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 Zamień `C:\TestDirectory1`na ścieżkę i nazwę katalogu, który chcesz skopiować, oraz lokalizację, do której chcesz ją skopiować. `C:\TestDirectory2`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" />lub <paramref name="sourceDirectoryName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog źródłowy nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Ścieżka źródłowa i ścieżka docelowa są takie same.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa folderu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Plik docelowy istnieje, ale nie można uzyskać do niego dostępu.</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="ShowUI" />jest ustawiona na <see langword="UIOption.AllDialogs" /> , a użytkownik anuluje operację lub nie można skopiować co najmniej jednego pliku w katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Instrukcje: Pobierz kolekcję plików w katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Instrukcje: Analizowanie ścieżek plików w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * bool -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Katalog, który ma zostać skopiowany.</param>
        <param name="destinationDirectoryName">Lokalizacja, do której należy skopiować katalog.</param>
        <param name="overwrite"><see langword="True" />Aby zastąpić istniejące pliki; w <see langword="False" />przeciwnym razie. Wartość domyślna to <see langword="False" />.</param>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kopiuje zawartość katalogu oraz sam katalog. Jeśli katalog docelowy nie istnieje, zostanie utworzony. Jeśli katalog o tej samej nazwie istnieje w lokalizacji docelowej, zawartość tych dwóch katalogów zostanie scalona. Podczas operacji można określić nową nazwę katalogu.  
  
 Podczas kopiowania plików w katalogu mogą zostać zgłoszone wyjątki, które są spowodowane przez określony plik, taki jak plik istniejący podczas scalania, gdy `overwrite` jest ustawiony na. `False` Gdy takie wyjątki są zgłaszane, są one konsolidowane w jednym wyjątku, `Data` którego właściwość zawiera wpisy w postaci <xref:System.Collections.IDictionary> , w której plik lub ścieżka katalogu jest kluczem, a określony komunikat wyjątku jest zawarty w odpowiadająca wartość. Służy `For…Each` do wyliczania wpisów.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CopyDirectory` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie katalogu|[Instrukcje: Kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 Poniższy przykład kopiuje katalog `TestDirectory1` do `TestDirectory2`, zastępując istniejące pliki.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 Zamień `C:\TestDirectory1`na ścieżkę i nazwę katalogu, który chcesz skopiować, oraz lokalizację, do której chcesz ją skopiować. `C:\TestDirectory2`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" />lub <paramref name="sourceDirectoryName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog źródłowy nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Ścieżka źródłowa i ścieżka docelowa są takie same.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa folderu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Plik docelowy istnieje, ale nie można uzyskać do niego dostępu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Instrukcje: Pobierz kolekcję plików w katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Instrukcje: Analizowanie ścieżek plików w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Katalog, który ma zostać skopiowany.</param>
        <param name="destinationDirectoryName">Lokalizacja, do której należy skopiować katalog.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="onUserCancel">Określa, co należy zrobić, jeśli użytkownik kliknie **przycisk Anuluj** podczas operacji. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kopiuje zawartość katalogu oraz sam katalog. Jeśli katalog docelowy nie istnieje, zostanie utworzony. Jeśli katalog o tej samej nazwie istnieje w lokalizacji docelowej, zawartość tych dwóch katalogów zostanie scalona. Podczas operacji można określić nową nazwę katalogu.  
  
 Podczas kopiowania plików w katalogu mogą zostać zgłoszone wyjątki, które są spowodowane przez określony plik. Gdy takie wyjątki są zgłaszane, są one konsolidowane w jednym wyjątku, `Data` którego właściwość zawiera wpisy w postaci <xref:System.Collections.IDictionary> , w której plik lub ścieżka katalogu jest kluczem, a określony komunikat wyjątku jest zawarty w odpowiadająca wartość. Służy `For…Each` do wyliczania wpisów.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CopyDirectory` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie katalogu|[Instrukcje: Kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 Poniższy przykład kopiuje katalog `TestDirectory1` do `TestDirectory2`, zastępując istniejące pliki.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 Zamień `C:\TestDirectory1`na ścieżkę i nazwę katalogu, który chcesz skopiować, oraz lokalizację, do której chcesz ją skopiować. `C:\TestDirectory2`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" />lub <paramref name="sourceDirectoryName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog źródłowy nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Ścieżka źródłowa i ścieżka docelowa są takie same.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa folderu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Plik docelowy istnieje, ale nie można uzyskać do niego dostępu.</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="ShowUI" />jest ustawiona na <see langword="UIOption.AllDialogs" /> , a użytkownik anuluje operację lub nie można skopiować co najmniej jednego pliku w katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Instrukcje: Pobierz kolekcję plików w katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Instrukcje: Analizowanie ścieżek plików w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Instrukcje: Kopiuj pliki z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Instrukcje: Utwórz kopię pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Instrukcje: Kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Instrukcje: Zmień nazwę pliku w Visual Basic</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Plik, który ma zostać skopiowany.</param>
        <param name="destinationFileName">Lokalizacja, do której plik ma zostać skopiowany.</param>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile`nie zachowuje ACE (Access Control wpisów). Nowo utworzony plik dziedziczy domyślne wpisy ACE z katalogu, w którym został utworzony.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CopyFile` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Skopiuj plik do tego samego katalogu.|[Instrukcje: Utwórz kopię pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Skopiuj plik do innego katalogu.|[Instrukcje: Tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 Ten przykład kopiuje plik `Test.txt` do katalogu `TestFiles2` bez zastępowania istniejących plików.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 Zastąp ścieżki plików ścieżkami, których chcesz użyć w kodzie.  
  
 Ten przykład kopiuje plik `Test.txt` do katalogu `TestFiles2` i zmienia jego `NewFile.txt`nazwę.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 Zastąp ścieżki plików ścieżkami, których chcesz użyć w kodzie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" />zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />lub <paramref name="sourceFileName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik w katalogu docelowym o tej samej nazwie jest używany.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość uzyskiwania dostępu do wszystkich zmiennych środowiskowych. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość uzyskiwania dostępu do zmiennych rejestru. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Instrukcje: Kopiuj pliki z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Instrukcje: Utwórz kopię pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Instrukcje: Kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Instrukcje: Zmień nazwę pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Plik, który ma zostać skopiowany.</param>
        <param name="destinationFileName">Lokalizacja, do której plik ma zostać skopiowany.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile`nie zachowuje ACE (Access Control wpisów). Nowo utworzony plik dziedziczy domyślne wpisy ACE z katalogu, w którym został utworzony.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CopyFile` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Skopiuj plik do tego samego katalogu.|[Instrukcje: Utwórz kopię pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Skopiuj plik do innego katalogu.|[Instrukcje: Tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 Ten przykład kopiuje plik `Test.txt` do katalogu `TestFiles2` bez zastępowania istniejących plików.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 Zastąp ścieżki plików ścieżkami, których chcesz użyć w kodzie.  
  
 Ten przykład kopiuje plik `Test.txt` do katalogu `TestFiles2` i zmienia jego `NewFile.txt`nazwę.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 Zastąp ścieżki plików ścieżkami, których chcesz użyć w kodzie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" />zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />lub <paramref name="sourceFileName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik docelowy istnieje i <paramref name="overwrite" /> ma <see langword="False" />ustawioną wartość.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość uzyskiwania dostępu do wszystkich zmiennych środowiskowych. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość uzyskiwania dostępu do zmiennych rejestru. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Instrukcje: Kopiuj pliki z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Instrukcje: Utwórz kopię pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Instrukcje: Kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Instrukcje: Zmień nazwę pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * bool -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Plik, który ma zostać skopiowany.</param>
        <param name="destinationFileName">Lokalizacja, do której plik ma zostać skopiowany.</param>
        <param name="overwrite"><see langword="True" />Jeśli istniejące pliki powinny być zastępowane; w <see langword="False" />przeciwnym razie. Wartość domyślna to <see langword="False" />.</param>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile`nie zachowuje ACE (Access Control wpisów). Nowo utworzony plik dziedziczy domyślne wpisy ACE z katalogu, w którym został utworzony.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CopyFile` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Skopiuj plik do tego samego katalogu.|[Instrukcje: Utwórz kopię pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Skopiuj plik do innego katalogu.|[Instrukcje: Tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 Ten przykład kopiuje plik `Test.txt` do katalogu `TestFiles2` bez zastępowania istniejących plików.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 Zastąp ścieżki plików ścieżkami, których chcesz użyć w kodzie.  
  
 Ten przykład kopiuje plik `Test.txt` do katalogu `TestFiles2` i zmienia jego `NewFile.txt`nazwę.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 Zastąp ścieżki plików ścieżkami, których chcesz użyć w kodzie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" />zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />lub <paramref name="sourceFileName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik docelowy istnieje i <paramref name="overwrite" /> ma <see langword="False" />ustawioną wartość.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość uzyskiwania dostępu do wszystkich zmiennych środowiskowych. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość uzyskiwania dostępu do zmiennych rejestru. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Instrukcje: Kopiuj pliki z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Instrukcje: Utwórz kopię pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Instrukcje: Kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Instrukcje: Zmień nazwę pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Plik, który ma zostać skopiowany.</param>
        <param name="destinationFileName">Lokalizacja, do której plik ma zostać skopiowany.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="onUserCancel">Określa, co należy zrobić, jeśli użytkownik kliknie **przycisk Anuluj** podczas operacji. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile`nie zachowuje ACE (Access Control wpisów). Nowo utworzony plik dziedziczy domyślne wpisy ACE z katalogu, w którym został utworzony.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CopyFile` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Skopiuj plik do tego samego katalogu.|[Instrukcje: Utwórz kopię pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Skopiuj plik do innego katalogu.|[Instrukcje: Tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 Ten przykład kopiuje plik `Test.txt` do katalogu `TestFiles2` bez zastępowania istniejących plików.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 Zastąp ścieżki plików ścieżkami, których chcesz użyć w kodzie.  
  
 Ten przykład kopiuje plik `Test.txt` do katalogu `TestFiles2` i zmienia jego `NewFile.txt`nazwę.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 Zastąp ścieżki plików ścieżkami, których chcesz użyć w kodzie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" />zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />lub <paramref name="sourceFileName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik docelowy istnieje i <paramref name="overwrite" /> ma <see langword="False" />ustawioną wartość.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="UICancelOption" />jest ustawiona na <see langword="ThrowException" />, a użytkownik anulował operację lub Wystąpił nieokreślony błąd we/wy.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość uzyskiwania dostępu do wszystkich zmiennych środowiskowych. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość uzyskiwania dostępu do zmiennych rejestru. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Instrukcje: Kopiuj pliki z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Instrukcje: Utwórz kopię pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Instrukcje: Kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Instrukcje: Zmień nazwę pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public void CreateDirectory (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CreateDirectory(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDirectory (directory As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDirectory(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.CreateDirectory : string -&gt; unit" Usage="fileSystemProxy.CreateDirectory directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Nazwa i lokalizacja katalogu.</param>
        <summary>Tworzy katalog.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog już istnieje, nie jest zgłaszany żaden wyjątek.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.CreateDirectory` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Tworzenie katalogu|[Instrukcje: Tworzenie katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
  
   
  
## Examples  
 Ten przykład tworzy katalog, `NewDirectory`, w. `C:\Documents and Settings\All Users\Documents`  
  
 [!code-vb[VbVbcnMyFileSystem#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa katalogu jest nieprawidłowo sformułowana. Na przykład zawiera niedozwolone znaki lub jest tylko białym znakiem.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.PathTooLongException">Nazwa katalogu jest za długa.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa katalogu jest tylko dwukropek (:).</exception>
        <exception cref="T:System.IO.IOException">Katalog nadrzędny katalogu, który ma zostać utworzony, jest tylko do odczytu</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma uprawnień do utworzenia katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:System.IO.Directory.CreateDirectory(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentDirectory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrentDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDirectory : string with get, set" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżący katalog.</summary>
        <value>Bieżący katalog dla operacji we/wy pliku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CurrentDirectory`jest zmienną środowiskową dla całego systemu.  
  
   
  
## Examples  
 Ten przykład zwraca bieżący katalog i wyświetla go w oknie komunikatu.  
  
 [!code-vb[VbVbcnMyFileSystem#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#18)]  
  
 Ten przykład ustawia bieżący katalog na `C:\TestDirectory`.  
  
 [!code-vb[VbVbcnMyFileSystem#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">Ścieżka jest nieprawidłowa.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa katalog.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, onDirectoryNotEmpty As DeleteDirectoryOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.DeleteDirectoryOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, onDirectoryNotEmpty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="onDirectoryNotEmpty" Type="Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog, który ma zostać usunięty.</param>
        <param name="onDirectoryNotEmpty">Określa, co należy zrobić, gdy katalog, który ma zostać usunięty, zawiera pliki lub katalogi. Wartość domyślna to <see langword="DeleteDirectoryOption.DeleteAllContents" />.</param>
        <summary>Usuwa katalog.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Przykład usuwa katalog `OldDirectory` tylko wtedy, gdy jest pusty.  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 Ten przykład usuwa katalog `OldDirectory` i całą jego zawartość.  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 Ten przykład usuwa katalog `OldDirectory` i całą jego zawartość, pytając użytkownika o potwierdzenie usunięcia, ale nie wysyła zawartości do **kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 Ten przykład usuwa katalog `OldDirectory` i całą jego zawartość, wysyłając je do **kosza**, ale nie pokazuje postęp operacji.  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest ciągiem o zerowej długości, jest źle sformułowana, zawiera tylko biały znak lub zawiera nieprawidłowe znaki (w tym symbole wieloznaczne). Ścieżka jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje lub jest plikiem.</exception>
        <exception cref="T:System.IO.IOException">Plik w katalogu lub podkatalogu jest używany.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa katalogu zawiera dwukropek (:).</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.OperationCanceledException">Użytkownik anuluje operację lub nie można usunąć katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Instrukcje: Usuń plik w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog, który ma zostać usunięty.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="recycle">Określa, czy usunięty plik ma być wysyłany do **kosza**. Wartość domyślna to <see langword="RecycleOption.DeletePermanently" />.</param>
        <summary>Usuwa katalog.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `showUI` i`recycle` nie są obsługiwane w aplikacjach, które nie są interaktywne, takie jak usługi systemu Windows.  
  
   
  
## Examples  
 Przykład usuwa katalog `OldDirectory` tylko wtedy, gdy jest pusty.  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 Ten przykład usuwa katalog `OldDirectory` i całą jego zawartość.  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 Ten przykład usuwa katalog `OldDirectory` i całą jego zawartość, pytając użytkownika o potwierdzenie usunięcia, ale nie wysyła zawartości do **kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 Ten przykład usuwa katalog `OldDirectory` i całą jego zawartość, wysyłając je do **kosza**, ale nie pokazuje postęp operacji.  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest ciągiem o zerowej długości, jest źle sformułowana, zawiera tylko biały znak lub zawiera nieprawidłowe znaki (w tym symbole wieloznaczne). Ścieżka jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje lub jest plikiem.</exception>
        <exception cref="T:System.IO.IOException">Plik w katalogu lub podkatalogu jest używany.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa katalogu zawiera dwukropek (:).</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.OperationCanceledException">Użytkownik anuluje operację lub nie można usunąć katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Instrukcje: Usuń plik w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog, który ma zostać usunięty.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="recycle">Określa, czy usunięty plik ma być wysyłany do **kosza**. Wartość domyślna to <see langword="RecycleOption.DeletePermanently" />.</param>
        <param name="onUserCancel">Określa, czy należy zgłosić wyjątek, jeśli użytkownik kliknie **przycisk Anuluj**.</param>
        <summary>Usuwa katalog.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `showUI`, `recycle` i`onUserCancel` nie są obsługiwane w aplikacjach, które nie są interaktywne, takie jak usługi systemu Windows.  
  
   
  
## Examples  
 Przykład usuwa katalog `OldDirectory` tylko wtedy, gdy jest pusty.  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 Ten przykład usuwa katalog `OldDirectory` i całą jego zawartość.  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 Ten przykład usuwa katalog `OldDirectory` i całą jego zawartość, pytając użytkownika o potwierdzenie usunięcia, ale nie wysyła zawartości do **kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 Ten przykład usuwa katalog `OldDirectory` i całą jego zawartość, wysyłając je do **kosza**, ale nie pokazuje postęp operacji.  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest ciągiem o zerowej długości, jest źle sformułowana, zawiera tylko biały znak lub zawiera nieprawidłowe znaki (w tym symbole wieloznaczne). Ścieżka jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje lub jest plikiem.</exception>
        <exception cref="T:System.IO.IOException">Plik w katalogu lub podkatalogu jest używany.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa katalogu zawiera dwukropek (:).</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.OperationCanceledException">Użytkownik anuluje operację lub nie można usunąć katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Instrukcje: Usuń plik w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa plik.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string -&gt; unit" Usage="fileSystemProxy.DeleteFile file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku, który ma zostać usunięty.</param>
        <summary>Usuwa plik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.DeleteFile` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Aby usunąć plik|[Instrukcje: Usuń plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 Ten przykład usuwa plik `Test.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 Ten przykład usuwa plik `Test.txt` i zezwala użytkownikowi na potwierdzenie, że plik powinien zostać usunięty.  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 Ten przykład usuwa plik `Test.txt` i wysyła go do **kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; ma końcowy ukośnik, gdzie należy określić plik; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma uprawnienia do usuwania pliku lub plik jest tylko do odczytu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Instrukcje: Usuń plik w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="fileSystemProxy.DeleteFile (file, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku, który ma zostać usunięty.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="recycle">Czy usunięty plik powinien zostać wysłany do **kosza**. Wartość domyślna to <see langword="RecycleOption.DeletePermanently" />.</param>
        <summary>Usuwa plik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `showUI` i`recycle` nie są obsługiwane w aplikacjach, które nie są interaktywne, takie jak usługi systemu Windows.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.DeleteFile` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Aby usunąć plik|[Instrukcje: Usuń plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 Ten przykład usuwa plik `Test.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 Ten przykład usuwa plik `Test.txt` i zezwala użytkownikowi na potwierdzenie, że plik powinien zostać usunięty.  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 Ten przykład usuwa plik `Test.txt` i wysyła go do **kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; ma końcowy ukośnik, gdzie należy określić plik; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma uprawnienia do usuwania pliku lub plik jest tylko do odczytu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Instrukcje: Usuń plik w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.DeleteFile (file, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku, który ma zostać usunięty.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="recycle">Czy usunięty plik powinien zostać wysłany do **kosza**. Wartość domyślna to <see langword="RecycleOption.DeletePermanently" />.</param>
        <param name="onUserCancel">Określa, czy wyjątek jest zgłaszany, gdy użytkownik anuluje operację. Wartość domyślna to <see langword="UICancelOption.ThrowException" />.</param>
        <summary>Usuwa plik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `showUI`, `recycle` i`onUserCancel` nie są obsługiwane w aplikacjach, które nie są interaktywne, takie jak usługi systemu Windows.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.DeleteFile` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Aby usunąć plik|[Instrukcje: Usuń plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 Ten przykład usuwa plik `Test.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 Ten przykład usuwa plik `Test.txt` i zezwala użytkownikowi na potwierdzenie, że plik powinien zostać usunięty.  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 Ten przykład usuwa plik `Test.txt` i wysyła go do **kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; ma końcowy ukośnik, gdzie należy określić plik; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma uprawnienia do usuwania pliku lub plik jest tylko do odczytu.</exception>
        <exception cref="T:System.OperationCanceledException">Użytkownik anulował operację i <paramref name="onUserCancel" /> ma <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />ustawioną wartość.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Instrukcje: Usuń plik w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public bool DirectoryExists (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool DirectoryExists(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DirectoryExists (directory As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DirectoryExists(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.DirectoryExists : string -&gt; bool" Usage="fileSystemProxy.DirectoryExists directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Ścieżka katalogu.</param>
        <summary>Zwraca <see langword="True" /> czy określony katalog istnieje.</summary>
        <returns><see langword="True" />Jeśli katalog istnieje; w <see langword="False" />przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ten przykład określa, czy katalog `C:\backup\logs` istnieje i sprawdza jego właściwości.  
  
 [!code-vb[VbRefFile#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Przewodnik: Manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Drives">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt; Drives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.DriveInfo&gt; Drives" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Drives As ReadOnlyCollection(Of DriveInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ Drives { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Drives : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca kolekcję tylko do odczytu dla wszystkich dostępnych nazw dysków.</summary>
        <value>Kolekcja wszystkich dostępnych dysków jako <see cref="T:System.IO.DriveInfo" /> obiekty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wszystkie dyski logiczne.  
  
   
  
## Examples  
 Ten przykład wyświetla dostępne nazwy dysków w oknie komunikatu.  
  
 [!code-vb[VbRefFile#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <altmember cref="T:System.IO.DriveInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public bool FileExists (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool FileExists(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileExists (file As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FileExists(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.FileExists : string -&gt; bool" Usage="fileSystemProxy.FileExists file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku.</param>
        <summary>Zwraca <see langword="True" /> czy określony plik istnieje.</summary>
        <returns>Zwraca <see langword="True" /> czy plik istnieje; w przeciwnym razie metoda ta <see langword="False" />zwraca wartość.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli aplikacja nie ma wystarczających uprawnień do odczytu określonego pliku, `FileExists` Metoda zwraca, niezależnie od istnienia ścieżki; Metoda nie zgłasza `False`wyjątku.  
  
   
  
## Examples  
 Ten przykład sprawdza, czy plik `Check.txt` istnieje i zawiera informacje w oknie komunikatu.  
  
 [!code-vb[VbRefFile#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku jest kończąca się ukośnikiem odwrotnym (\\).</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Przewodnik: Manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindInFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję zawierającą tylko do odczytu ciągi reprezentujące nazwy plików zawierające określony tekst.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType);" />
      <MemberSignature Language="F#" Value="member this.FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.FindInFiles (directory, containsText, ignoreCase, searchType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog, który ma zostać przeszukany.</param>
        <param name="containsText">Tekst wyszukiwania.</param>
        <param name="ignoreCase"><see langword="True" />Jeśli wyszukiwanie powinno uwzględniać wielkość liter; w <see langword="False" />przeciwnym razie. Wartość domyślna to <see langword="True" />.</param>
        <param name="searchType">Określa, czy mają zostać dołączone podfoldery. Wartość domyślna to <see langword="SearchOption.SearchTopLevelOnly" />.</param>
        <summary>Zwraca kolekcję zawierającą tylko do odczytu ciągi reprezentujące nazwy plików zawierające określony tekst.</summary>
        <returns>Kolekcja tylko do odczytu nazw plików zawierających określony tekst.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta kolekcja jest zwracana, jeśli nie znaleziono plików zgodnych z określonym wzorcem.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.FindInFiles` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Wyszukaj pliki zawierające określony ciąg w katalogu|[Przewodnik: Manipulowanie plikami i katalogami w Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 Ten przykład wyszukuje w `C:\TestDir` katalogu pliki zawierające ciąg `"sample string"` i wyświetla wyniki w `ListBox1`.  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 Aby działał, projekt musi zawierać `ListBox` nazwę. `ListBox1`  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od <c>\\. \</c>).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Określony katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Określony katalog wskazuje na istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Określona ścieżka katalogu zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Przewodnik: Manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] fileWildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption, ParamArray fileWildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ fileWildcards);" />
      <MemberSignature Language="F#" Value="member this.FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.FindInFiles (directory, containsText, ignoreCase, searchType, fileWildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="fileWildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">Katalog, który ma zostać przeszukany.</param>
        <param name="containsText">Tekst wyszukiwania.</param>
        <param name="ignoreCase"><see langword="True" />Jeśli wyszukiwanie powinno uwzględniać wielkość liter; w <see langword="False" />przeciwnym razie. Wartość domyślna to <see langword="True" />.</param>
        <param name="searchType">Określa, czy mają zostać dołączone podfoldery. Wartość domyślna to <see langword="SearchOption.SearchTopLevelOnly" />.</param>
        <param name="fileWildcards">Wzorzec do dopasowania.</param>
        <summary>Zwraca kolekcję zawierającą tylko do odczytu ciągi reprezentujące nazwy plików zawierające określony tekst.</summary>
        <returns>Kolekcja tylko do odczytu nazw plików zawierających określony tekst.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta kolekcja jest zwracana, jeśli nie znaleziono plików zgodnych z określonym wzorcem.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.FindInFiles` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Wyszukaj pliki zawierające określony ciąg w katalogu|[Przewodnik: Manipulowanie plikami i katalogami w Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 Ten przykład wyszukuje w `C:\TestDir` katalogu pliki zawierające ciąg `"sample string"` i wyświetla wyniki w `ListBox1`.  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 Aby działał, projekt musi zawierać `ListBox` nazwę. `ListBox1`  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od <c>\\. \</c>).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Określony katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Określony katalog wskazuje na istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Określona ścieżka katalogu zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Przewodnik: Manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję ciągów reprezentujących nazwy ścieżek podkatalogów w katalogu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetDirectories : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetDirectories directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Nazwa i ścieżka katalogu.</param>
        <summary>Zwraca kolekcję ciągów reprezentujących nazwy ścieżek podkatalogów w katalogu.</summary>
        <returns>Kolekcja nazw ścieżek podkatalogów w określonym katalogu, tylko do odczytu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.GetDirectories` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Wyświetlanie podkatalogów z określonym wzorcem|[Instrukcje: Znajdź podkatalogi z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 Poniższy przykład zwraca wszystkie katalogi w strukturze katalogów, które zawierają wyraz `Logs` w nazwach i dodaje je do. `ListBox1`  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 Ten przykład wymaga, aby w formularzu `ListBox` znajdował się nazwa `ListBox1` .  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Określony katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Określony katalog wskazuje na istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="member this.GetDirectories : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetDirectories (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">Nazwa i ścieżka katalogu.</param>
        <param name="searchType">Określa, czy mają zostać dołączone podfoldery. Wartość domyślna to <see langword="SearchOption.SearchTopLevelOnly" />.</param>
        <param name="wildcards">Wzorzec pasujący do nazw.</param>
        <summary>Zwraca kolekcję ciągów reprezentujących nazwy ścieżek podkatalogów w katalogu.</summary>
        <returns>Kolekcja nazw ścieżek podkatalogów w określonym katalogu, tylko do odczytu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć parametru, `wildcards` aby określić konkretny wzorzec. Jeśli chcesz uwzględnić zawartość podkatalogów w wyszukiwaniu, ustaw `searchType` parametr na. `SearchAllSubDirectories`  
  
 Po znalezieniu katalogów pasujących do określonego wzorca zwracana jest pusta kolekcja.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.GetDirectories` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Wyświetlanie podkatalogów z określonym wzorcem|[Instrukcje: Znajdź podkatalogi z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 Poniższy przykład zwraca wszystkie katalogi w strukturze katalogów, które zawierają wyraz `Logs` w nazwach i dodaje je do. `ListBox1`  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 Ten przykład wymaga, aby w formularzu `ListBox` znajdował się nazwa `ListBox1` .  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">Co najmniej jeden z określonych symboli wieloznacznych <see langword="Nothing" />jest pustym ciągiem lub zawiera tylko spacje.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Określony katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Określony katalog wskazuje na istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryInfo">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo GetDirectoryInfo (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectoryInfo (directory As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DirectoryInfo ^ GetDirectoryInfo(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetDirectoryInfo : string -&gt; System.IO.DirectoryInfo" Usage="fileSystemProxy.GetDirectoryInfo directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory"><see langword="String" />. Ścieżka katalogu.</param>
        <summary><see cref="T:System.IO.DirectoryInfo" /> Zwraca obiekt dla określonej ścieżki.</summary>
        <returns><see cref="T:System.IO.DirectoryInfo" />Obiekt dla określonej ścieżki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog nie istnieje, wyjątek nie zostanie wygenerowany do momentu uzyskania dostępu do właściwości <xref:System.IO.DirectoryInfo> obiektu.  
  
   
  
## Examples  
 Ten przykład pobiera <xref:System.IO.DirectoryInfo> obiekt dla katalogu `C:\Documents and Settings` i wyświetla czas utworzenia katalogu, czas ostatniego dostępu i czas ostatniego zapisu.  
  
 [!code-vb[VbRefFile#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Ścieżka katalogu zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDriveInfo">
      <MemberSignature Language="C#" Value="public System.IO.DriveInfo GetDriveInfo (string drive);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDriveInfo (drive As String) As DriveInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DriveInfo ^ GetDriveInfo(System::String ^ drive);" />
      <MemberSignature Language="F#" Value="member this.GetDriveInfo : string -&gt; System.IO.DriveInfo" Usage="fileSystemProxy.GetDriveInfo drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DriveInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="drive">Stacja, która ma zostać zbadana.</param>
        <summary><see cref="T:System.IO.DriveInfo" /> Zwraca obiekt dla określonego dysku.</summary>
        <returns><see cref="T:System.IO.DriveInfo" />Obiekt dla określonego dysku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.DriveInfo> Klasa modeluje dysk i dostarcza metody i właściwości do zapytania o informacje o dysku. Służy <xref:System.IO.DriveInfo> do określania, jakie stacje są dostępne, oraz typu dysków. Można także zbadać właściwość w celu określenia pojemności i dostępnego wolnego miejsca na dysku.  
  
   
  
## Examples  
 Ten przykład pobiera <xref:System.IO.DriveInfo> obiekt dla dysku C i używa go do wyświetlania informacji o dysku.  
  
 [!code-vb[VbRefFile#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#11)]  
  
 Informacje o różnych typach dysków znajdują się w <xref:System.IO.DriveType>temacie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="drive" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.IO.DriveInfo" />
        <altmember cref="T:System.IO.DriveType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public System.IO.FileInfo GetFileInfo (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.FileInfo GetFileInfo(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFileInfo (file As String) As FileInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::FileInfo ^ GetFileInfo(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.GetFileInfo : string -&gt; System.IO.FileInfo" Usage="fileSystemProxy.GetFileInfo file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku.</param>
        <summary><see cref="T:System.IO.FileInfo" /> Zwraca obiekt dla określonego pliku.</summary>
        <returns><see cref="T:System.IO.FileInfo" />Obiekt dla określonego pliku</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyjątek nie jest zgłaszany, jeśli plik nie istnieje; Zamiast tego zostanie ono zgłoszone podczas pierwszego uzyskiwania dostępu do właściwości obiektu.  
  
 W poniższej tabeli przedstawiono przykład zadania związanego `My.Computer.FileSystem.GetFileInfo` z tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Określ nazwę i ścieżkę pliku|[Instrukcje: Analizowanie ścieżek plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 Ten przykład pobiera <xref:System.IO.FileInfo?displayProperty=nameWithType> obiekt dla pliku `MyLogFile.log` i używa go do raportowania pełnej nazwy pliku, czasu ostatniego dostępu i długości.  
  
 [!code-vb[VbRefFile#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa ścieżki jest źle sformułowana. Na przykład zawiera nieprawidłowe znaki lub jest tylko białym znakiem. Nazwa pliku ma końcowy znacznik ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.NotSupportedException">Ścieżka zawiera dwukropek w środku ciągu.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka jest za długa.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma dostępu do pliku z listą kontroli dostępu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.IO.FileInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Przewodnik: Manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję ciągów reprezentujących nazwy plików w katalogu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetFiles : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetFiles directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog do przeszukania.</param>
        <summary>Zwraca kolekcję ciągów reprezentujących nazwy plików w katalogu.</summary>
        <returns>Kolekcja nazw plików tylko do odczytu z określonego katalogu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta kolekcja jest zwracana, jeśli nie znaleziono plików zgodnych z określonym wzorcem.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.GetFiles` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Pobieranie kolekcji plików w katalogu|[Instrukcje: Pobieranie kolekcji plików w katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|Znajdowanie plików z określonym wzorcem w katalogu|[Instrukcje: Znajdowanie plików z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 Poniższy przykład zwraca wszystkie pliki w katalogu i dodaje je do `ListBox1`.  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 Ten przykład wymaga, aby w formularzu `ListBox` znajdował się nazwa `ListBox1` .  
  
 Ten przykład zwraca wszystkie pliki w katalogu z rozszerzeniem `.txt` i dodaje je do. `ListBox1`  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 Ten przykład wymaga, aby w formularzu `ListBox` znajdował się nazwa `ListBox1` .  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog, który ma zostać przeszukany, nie istnieje.</exception>
        <exception cref="T:System.IO.IOException"><paramref name="directory" />wskazuje istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md">Instrukcje: Znajdowanie plików z określonym wzorcem w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Instrukcje: Pobierz kolekcję plików w katalogu w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="member this.GetFiles : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetFiles (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">Katalog do przeszukania.</param>
        <param name="searchType">Określa, czy mają zostać dołączone podfoldery. Wartość domyślna to <see langword="SearchOption.SearchTopLevelOnly" />.</param>
        <param name="wildcards">Wzorzec do dopasowania.</param>
        <summary>Zwraca kolekcję ciągów reprezentujących nazwy plików w katalogu.</summary>
        <returns>Kolekcja nazw plików tylko do odczytu z określonego katalogu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta kolekcja jest zwracana, jeśli nie znaleziono plików zgodnych z określonym wzorcem.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.GetFiles` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Pobieranie kolekcji plików w katalogu|[Instrukcje: Pobieranie kolekcji plików w katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|Znajdowanie plików z określonym wzorcem w katalogu|[Instrukcje: Znajdowanie plików z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 Poniższy przykład zwraca wszystkie pliki w katalogu i dodaje je do `ListBox1`.  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 Ten przykład wymaga, aby w formularzu `ListBox` znajdował się nazwa `ListBox1` .  
  
 Ten przykład zwraca wszystkie pliki w katalogu z rozszerzeniem `.txt` i dodaje je do. `ListBox1`  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 Ten przykład wymaga, aby w formularzu `ListBox` znajdował się nazwa `ListBox1` .  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog, który ma zostać przeszukany, nie istnieje.</exception>
        <exception cref="T:System.IO.IOException"><paramref name="directory" />wskazuje istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md">Instrukcje: Znajdowanie plików z określonym wzorcem w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Instrukcje: Pobierz kolekcję plików w katalogu w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public string GetName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; string" Usage="fileSystemProxy.GetName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Wymagana. Ścieżka do analizy. <see langword="String" />.</param>
        <summary>Analizuje nazwę pliku z podanej ścieżki.</summary>
        <returns>Nazwa pliku z określonej ścieżki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to operacja ciągu; nie `FileSystem` jest badany.  
  
 `GetName` Metoda ignoruje znak ukośnika występujący na końcu ścieżki.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.GetFileName` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Analizowanie ścieżki pliku|[Instrukcje: Analizowanie ścieżek plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 Poniższy przykład analizuje ścieżkę pliku i zwraca nazwę pliku.  
  
 [!code-vb[VbVbcnMyFileSystem#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#21)]  
  
 Zamień ścieżkę `C:\Testdirectory\Testfile` na ścieżkę, którą chcesz przeanalizować.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="public string GetParentPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetParentPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParentPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetParentPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.GetParentPath : string -&gt; string" Usage="fileSystemProxy.GetParentPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka, która ma zostać zbadana.</param>
        <summary>Zwraca ścieżkę nadrzędną podanej ścieżki.</summary>
        <returns>Ścieżka nadrzędna podanej ścieżki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to operacja ciągu; System plików nie został zbadany.  
  
   
  
## Examples  
 Ten przykład Pobiera ścieżkę nadrzędną dla `C:\Backups\Tmp\Test`.  
  
 [!code-vb[VbRefFile#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie ma ścieżki nadrzędnej, ponieważ jest ścieżką katalogu głównego.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Instrukcje: Analizowanie ścieżek plików w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="member this.GetTempFileName : unit -&gt; string" Usage="fileSystemProxy.GetTempFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy jednobajtowy plik tymczasowy o wartości zerowej na dysku i zwraca pełną ścieżkę do tego pliku.</summary>
        <returns><see langword="String" />zawierający pełną ścieżkę pliku tymczasowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody można użyć do utworzenia pliku tymczasowego.  
  
   
  
## Examples  
 Ten przykład tworzy plik tymczasowy i zwraca jego ścieżkę.  
  
 [!code-vb[VbVbcnMyFileSystem#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi katalog z jednej lokalizacji do innej.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Ścieżka katalogu, który ma zostać przeniesiony.</param>
        <param name="destinationDirectoryName">Ścieżka katalogu, do którego Katalog źródłowy jest przenoszony.</param>
        <summary>Przenosi katalog z jednej lokalizacji do innej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli podjęto próbę przeniesienia katalogu w katalogu, który nie istnieje, zostanie utworzona struktura docelowa.  
  
   
  
## Examples  
 Ten przykład przenosi `Directory1` wewnątrz `Directory2`.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 Ten przykład przenosi `Directory1` wewnątrz `Directory2`, zastępując katalog, jeśli już istnieje.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" />lub <paramref name="destinationDirectoryName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Źródło jest katalogiem głównym lub ścieżką źródłową, a ścieżka docelowa jest taka sama.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Ścieżka katalogu, który ma zostać przeniesiony.</param>
        <param name="destinationDirectoryName">Ścieżka katalogu, do którego Katalog źródłowy jest przenoszony.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <summary>Przenosi katalog z jednej lokalizacji do innej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli podjęto próbę przeniesienia katalogu w katalogu, który nie istnieje, zostanie utworzona struktura docelowa.  
  
   
  
## Examples  
 Ten przykład przenosi `Directory1` wewnątrz `Directory2`.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 Ten przykład przenosi `Directory1` wewnątrz `Directory2`, zastępując katalog, jeśli już istnieje.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" />lub <paramref name="destinationDirectoryName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Katalog docelowy już istnieje i <paramref name="overwrite" /> ma <see langword="False" />ustawioną wartość.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * bool -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Ścieżka katalogu, który ma zostać przeniesiony.</param>
        <param name="destinationDirectoryName">Ścieżka katalogu, do którego Katalog źródłowy jest przenoszony.</param>
        <param name="overwrite"><see langword="True" />Jeśli istniejące katalogi mają być zastępowane; w <see langword="False" />przeciwnym razie. Wartość domyślna to <see langword="False" />.</param>
        <summary>Przenosi katalog z jednej lokalizacji do innej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli podjęto próbę przeniesienia katalogu w katalogu, który nie istnieje, zostanie utworzona struktura docelowa.  
  
   
  
## Examples  
 Ten przykład przenosi `Directory1` wewnątrz `Directory2`.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 Ten przykład przenosi `Directory1` wewnątrz `Directory2`, zastępując katalog, jeśli już istnieje.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" />lub <paramref name="destinationDirectoryName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Katalog docelowy już istnieje i <paramref name="overwrite" /> ma <see langword="False" />ustawioną wartość.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Ścieżka katalogu, który ma zostać przeniesiony.</param>
        <param name="destinationDirectoryName">Ścieżka katalogu, do którego Katalog źródłowy jest przenoszony.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="onUserCancel">Określa, czy wyjątek jest zgłaszany, gdy użytkownik anuluje operację. Wartość domyślna to <see langword="UICancelOption.ThrowException" />.</param>
        <summary>Przenosi katalog z jednej lokalizacji do innej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli podjęto próbę przeniesienia katalogu w katalogu, który nie istnieje, zostanie utworzona struktura docelowa.  
  
   
  
## Examples  
 Ten przykład przenosi `Directory1` wewnątrz `Directory2`.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 Ten przykład przenosi `Directory1` wewnątrz `Directory2`, zastępując katalog, jeśli już istnieje.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" />lub <paramref name="destinationDirectoryName" /> jest<see langword="Nothing" /> ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException"><paramref name="onUserCancel" />jest ustawiony na <see langword="ThrowException" /> i nie można skopiować podkatalogu pliku.</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="onUserCancel" />jest ustawiona na <see langword="ThrowException" />, a użytkownik anuluje operację lub nie można ukończyć operacji.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Ścieżka pliku, który ma zostać przeniesiony.</param>
        <param name="destinationFileName">Ścieżka katalogu, do którego ma zostać przeniesiony plik.</param>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli struktura docelowa nie istnieje, zostanie utworzona.  
  
 `MoveFile` Metoda zachowuje wpisy ACE (Access Control wpisów) tylko w przypadku przeniesienia pliku w tym samym woluminie. Obejmuje to dziedziczone asy, które stają się bezpośrednimi ACE po przeniesieniu (dostęp bezpośredni ma pierwszeństwo przed dziedziczonymi ACE). Jeśli plik jest przenoszony między woluminami, asy nie będą kopiowane.  
  
 W poniższej tabeli przedstawiono przykład zadania związanego `My.Computer.FileSystem.MoveFile` z tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Przenieś plik|[Instrukcje: Przenieś plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 Ten przykład przenosi plik `Test.txt` z `TestDir1` do `TestDir2`.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 Ten przykład przenosi `Test.txt` plik z `TestDir1` do `TestDir2` i zmienia jego `Test2.txt`nazwę.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość uzyskiwania dostępu do wszystkich zmiennych środowiskowych. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość uzyskiwania dostępu do zmiennych rejestru. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Ścieżka pliku, który ma zostać przeniesiony.</param>
        <param name="destinationFileName">Ścieżka katalogu, do którego ma zostać przeniesiony plik.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli struktura docelowa nie istnieje, zostanie utworzona.  
  
 `MoveFile` Metoda zachowuje wpisy ACE (Access Control wpisów) tylko w przypadku przeniesienia pliku w tym samym woluminie. Obejmuje to dziedziczone asy, które stają się bezpośrednimi ACE po przeniesieniu (dostęp bezpośredni ma pierwszeństwo przed dziedziczonymi ACE). Jeśli plik jest przenoszony między woluminami, asy nie będą kopiowane.  
  
 W poniższej tabeli przedstawiono przykład zadania związanego `My.Computer.FileSystem.MoveFile` z tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Przenieś plik|[Instrukcje: Przenieś plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 Ten przykład przenosi plik `Test.txt` z `TestDir1` do `TestDir2`.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 Ten przykład przenosi `Test.txt` plik z `TestDir1` do `TestDir2` i zmienia jego `Test2.txt`nazwę.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość uzyskiwania dostępu do wszystkich zmiennych środowiskowych. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość uzyskiwania dostępu do zmiennych rejestru. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * bool -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Ścieżka pliku, który ma zostać przeniesiony.</param>
        <param name="destinationFileName">Ścieżka katalogu, do którego ma zostać przeniesiony plik.</param>
        <param name="overwrite"><see langword="True" />Aby zastąpić istniejące pliki; w <see langword="False" />przeciwnym razie. Wartość domyślna to <see langword="False" />.</param>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli struktura docelowa nie istnieje, zostanie utworzona.  
  
 `MoveFile` Metoda zachowuje wpisy ACE (Access Control wpisów) tylko w przypadku przeniesienia pliku w tym samym woluminie. Obejmuje to dziedziczone asy, które stają się bezpośrednimi ACE po przeniesieniu (dostęp bezpośredni ma pierwszeństwo przed dziedziczonymi ACE). Jeśli plik jest przenoszony między woluminami, asy nie będą kopiowane.  
  
 W poniższej tabeli wymieniono przykłady zadań związanych `My.Computer.FileSystem.MoveFile` z tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Przenieś plik|[Instrukcje: Przenieś plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 Ten przykład przenosi plik `Test.txt` z `TestDir1` do `TestDir2`.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 Ten przykład przenosi `Test.txt` plik z `TestDir1` do `TestDir2` i zmienia jego `Test2.txt`nazwę.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość uzyskiwania dostępu do wszystkich zmiennych środowiskowych. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość uzyskiwania dostępu do zmiennych rejestru. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Ścieżka pliku, który ma zostać przeniesiony.</param>
        <param name="destinationFileName">Ścieżka katalogu, do którego ma zostać przeniesiony plik.</param>
        <param name="showUI">Określa, czy należy wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="onUserCancel">Określa, czy wyjątek jest zgłaszany, gdy użytkownik anuluje operację. Wartość domyślna to <see langword="UICancelOption.ThrowException" />.</param>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli struktura docelowa nie istnieje, zostanie utworzona.  
  
 `MoveFile` Metoda zachowuje wpisy ACE (Access Control wpisów) tylko w przypadku przeniesienia pliku w tym samym woluminie. Obejmuje to dziedziczone asy, które stają się bezpośrednimi ACE po przeniesieniu (dostęp bezpośredni ma pierwszeństwo przed dziedziczonymi ACE). Jeśli plik jest przenoszony między woluminami, asy nie będą kopiowane.  
  
 W poniższej tabeli przedstawiono przykład zadania związanego `My.Computer.FileSystem.MoveFile` z tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Przenieś plik|[Instrukcje: Przenieś plik](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 Ten przykład przenosi plik `Test.txt` z `TestDir1` do `TestDir2`.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 Ten przykład przenosi `Test.txt` plik z `TestDir1` do `TestDir2` i zmienia jego `Test2.txt`nazwę.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="onUserCancel" />jest ustawiona na <see langword="ThrowException" />, a użytkownik anulował operację lub Wystąpił nieokreślony błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość uzyskiwania dostępu do wszystkich zmiennych środowiskowych. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość uzyskiwania dostępu do zmiennych rejestru. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Kontroluje uprawnienia dotyczące interfejsów użytkownika i Schowka. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFieldParser">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="OpenTextFieldParser" /> Metoda pozwala<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> utworzyć obiekt, który umożliwia łatwe i wydajne analizowanie strukturalnych plików tekstowych, takich jak dzienniki. <see langword="TextFieldParser" /> Obiekt może służyć do odczytywania plików rozdzielonych i o stałej szerokości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Plik, który ma zostać otwarty przy <see langword="TextFieldParser" />użyciu.</param>
        <summary><see langword="OpenTextFieldParser" /> Metoda pozwala<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> utworzyć obiekt, który umożliwia łatwe i wydajne analizowanie strukturalnych plików tekstowych, takich jak dzienniki. <see langword="TextFieldParser" /> Obiekt może służyć do odczytywania plików rozdzielonych i o stałej szerokości.</summary>
        <returns><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />Odczytywanie określonego pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.OpenTextFieldParser` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczytaj z rozdzielanego pliku tekstowego|[Instrukcje: Odczyt z rozdzielanych przecinkami plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczytaj z pliku tekstowego o stałej szerokości|[Instrukcje: Odczyt z plików tekstowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczytaj z pliku tekstowego z wieloma formatami|[Instrukcje: Odczyt z plików tekstowych z wieloma formatami](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 Ten przykład otwiera `TextFieldParser.reader` i używa go do odczytu z `C:\TestFolder1\Test1.txt`.  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Nie można przeanalizować wiersza przy użyciu podanego formatu. Komunikat o wyjątku określa wiersz powodujący wyjątek, podczas gdy <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> właściwość jest przypisana do tekstu zawartego w wierszu.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Opisuje zestaw uprawnień zabezpieczeń stosowany do kodu. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md">Instrukcje: Odczyt z plików tekstowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">Instrukcje: Odczytaj z rozdzielanych przecinkami plików tekstowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">Instrukcje: Odczytuj z plików tekstowych z wieloma formatami w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">Analizowanie plików tekstowych za pomocą obiektu TextFieldParser</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray fieldWidths As Integer()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string * int[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser (file, fieldWidths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">Plik, który ma zostać otwarty przy <see langword="TextFieldParser" />użyciu.</param>
        <param name="fieldWidths">Szerokość pól.</param>
        <summary><see langword="OpenTextFieldParser" /> Metoda pozwala<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> utworzyć obiekt, który umożliwia łatwe i wydajne analizowanie strukturalnych plików tekstowych, takich jak dzienniki. <see langword="TextFieldParser" /> Obiekt może służyć do odczytywania plików rozdzielonych i o stałej szerokości.</summary>
        <returns><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />Odczytywanie określonego pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.OpenTextFieldParser` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczytaj z rozdzielanego pliku tekstowego|[Instrukcje: Odczyt z rozdzielanych przecinkami plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczytaj z pliku tekstowego o stałej szerokości|[Instrukcje: Odczyt z plików tekstowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczytaj z pliku tekstowego z wieloma formatami|[Instrukcje: Odczyt z plików tekstowych z wieloma formatami](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 Ten przykład otwiera `TextFieldParser.reader` i używa go do odczytu z `C:\TestFolder1\Test1.txt`.  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Nie można przeanalizować wiersza przy użyciu podanego formatu. Komunikat o wyjątku określa wiersz powodujący wyjątek, podczas gdy <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> właściwość jest przypisana do tekstu zawartego w wierszu.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Opisuje zestaw uprawnień zabezpieczeń stosowany do kodu. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md">Instrukcje: Odczyt z plików tekstowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">Instrukcje: Odczytaj z rozdzielanych przecinkami plików tekstowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">Instrukcje: Odczytuj z plików tekstowych z wieloma formatami w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">Analizowanie plików tekstowych za pomocą obiektu TextFieldParser</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray delimiters As String()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string * string[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser (file, delimiters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">Plik, który ma zostać otwarty przy <see langword="TextFieldParser" />użyciu.</param>
        <param name="delimiters">Ograniczniki dla pól.</param>
        <summary><see langword="OpenTextFieldParser" /> Metoda pozwala<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> utworzyć obiekt, który umożliwia łatwe i wydajne analizowanie strukturalnych plików tekstowych, takich jak dzienniki. <see langword="TextFieldParser" /> Obiekt może służyć do odczytywania plików rozdzielonych i o stałej szerokości.</summary>
        <returns><see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />Odczytywanie określonego pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.OpenTextFieldParser` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczytaj z rozdzielanego pliku tekstowego|[Instrukcje: Odczyt z rozdzielanych przecinkami plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczytaj z pliku tekstowego o stałej szerokości|[Instrukcje: Odczyt z plików tekstowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczytaj z pliku tekstowego z wieloma formatami|[Instrukcje: Odczyt z plików tekstowych z wieloma formatami](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 Ten przykład otwiera `TextFieldParser.reader` i używa go do odczytu z `C:\TestFolder1\Test1.txt`.  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Nie można przeanalizować wiersza przy użyciu podanego formatu. Komunikat o wyjątku określa wiersz powodujący wyjątek, podczas gdy <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> właściwość jest przypisana do tekstu zawartego w wierszu.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Opisuje zestaw uprawnień zabezpieczeń stosowany do kodu. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md">Instrukcje: Odczyt z plików tekstowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">Instrukcje: Odczytaj z rozdzielanych przecinkami plików tekstowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">Instrukcje: Odczytuj z plików tekstowych z wieloma formatami w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">Analizowanie plików tekstowych za pomocą obiektu TextFieldParser</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileReader">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IO.StreamReader" /> Otwiera obiekt do odczytania z pliku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileReader (file As String) As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileReader : string -&gt; System.IO.StreamReader" Usage="fileSystemProxy.OpenTextFileReader file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Plik, który ma zostać odczytany.</param>
        <summary><see cref="T:System.IO.StreamReader" /> Otwiera obiekt do odczytania z pliku.</summary>
        <returns><see cref="T:System.IO.StreamReader" />obiekt do odczytania z pliku</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko pliki tekstowe mogą być odczytywane z <xref:System.IO.StreamReader>.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.OpenTextFileReader` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Otwórz plik z<xref:System.IO.StreamReader>|[Instrukcje: Odczytywanie tekstu z plików za pomocą StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 Ten przykład otwiera plik `Testfile.txt`, odczytuje z niego wiersz i wyświetla wiersz `MessageBox`w.  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku jest kończąca się ukośnikiem odwrotnym (\\).</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie można znaleźć określonego pliku.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do odczytu z pliku.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">Instrukcje: Odczytywanie tekstu z plików za pomocą StreamReader (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileReader : string * System.Text.Encoding -&gt; System.IO.StreamReader" Usage="fileSystemProxy.OpenTextFileReader (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">Plik, który ma zostać odczytany.</param>
        <param name="encoding">Kodowanie, które ma być używane dla zawartości pliku. Wartość domyślna to ASCII.</param>
        <summary><see cref="T:System.IO.StreamReader" /> Otwiera obiekt do odczytania z pliku.</summary>
        <returns><see cref="T:System.IO.StreamReader" />obiekt do odczytania z pliku</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko pliki tekstowe mogą być odczytywane z <xref:System.IO.StreamReader>.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.OpenTextFileReader` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Otwórz plik z<xref:System.IO.StreamReader>|[Instrukcje: Odczytywanie tekstu z plików za pomocą StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 Ten przykład otwiera plik `Testfile.txt`, odczytuje z niego wiersz i wyświetla wiersz `MessageBox`w.  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku jest kończąca się ukośnikiem odwrotnym (\\).</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie można znaleźć określonego pliku.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do odczytu z pliku.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">Instrukcje: Odczytywanie tekstu z plików za pomocą StreamReader (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileWriter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IO.StreamWriter" /> Otwiera obiekt do zapisu w określonym pliku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileWriter (file As String, append As Boolean) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileWriter : string * bool -&gt; System.IO.StreamWriter" Usage="fileSystemProxy.OpenTextFileWriter (file, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">Plik, w którym ma zostać zapisany.</param>
        <param name="append"><see langword="True" />Aby dołączyć do zawartości pliku; <see langword="False" /> aby zastąpić zawartość pliku. Wartość domyślna to <see langword="False" />.</param>
        <summary><see cref="T:System.IO.StreamWriter" /> Otwiera obiekt do zapisu w określonym pliku.</summary>
        <returns><see cref="T:System.IO.StreamWriter" />obiekt do zapisu w określonym pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda otwiera i inicjuje strumień dla pliku, a następnie <xref:System.IO.StreamWriter> zwraca obiekt dla tego strumienia. `OpenTextFileWriter` W razie potrzeby można zapisywać do pary, a następnie zamykać ją po zakończeniu.  
  
> [!NOTE]
>  Należy wywołać <xref:System.IO.StreamWriter.Close%2A> metodę <xref:System.IO.StreamWriter> dla obiektu, aby upewnić się, że wszystkie dane są poprawnie zapisywane w strumieniu źródłowym.  
  
 Jeśli piszesz tylko kilka ciągów do pliku, może być prostsze użycie <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> metody.  
  
 W poniższej tabeli przedstawiono przykład zadania związanego `My.Computer.FileSystem.OpenTextFileWriter` z tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz tekst w pliku z`StreamWriter`|[Instrukcje: Zapisz tekst do plików z StreamWriter —](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 Ten <xref:System.IO.StreamWriter> przykład otwiera `My.Computer.FileSystem.OpenTextFileWriter` metodę i używa jej do pisania ciągu do pliku tekstowego `StreamWriter` za pomocą `WriteLine` metody klasy.  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku kończy się końcowym ukośnikiem.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileWriter : string * bool * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="fileSystemProxy.OpenTextFileWriter (file, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">Plik, w którym ma zostać zapisany.</param>
        <param name="append"><see langword="True" />Aby dołączyć do zawartości w pliku; <see langword="False" /> aby zastąpić zawartość pliku. Wartość domyślna to <see langword="False" />.</param>
        <param name="encoding">Kodowanie, które ma być używane podczas zapisu w pliku. Wartość domyślna to ASCII.</param>
        <summary>Otwiera plik <see cref="T:System.IO.StreamWriter" /> do zapisu w określonym pliku.</summary>
        <returns><see cref="T:System.IO.StreamWriter" />obiekt do zapisu w określonym pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda otwiera i inicjuje strumień dla pliku, a następnie <xref:System.IO.StreamWriter> zwraca obiekt dla tego strumienia. `OpenTextFileWriter` W razie potrzeby można zapisywać do pary, a następnie zamykać ją po zakończeniu.  
  
> [!NOTE]
>  Należy wywołać <xref:System.IO.StreamWriter.Close%2A> metodę <xref:System.IO.StreamWriter> dla obiektu, aby upewnić się, że wszystkie dane są poprawnie zapisywane w strumieniu źródłowym.  
  
 Jeśli piszesz tylko kilka ciągów do pliku, może być prostsze użycie <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> metody.  
  
 W poniższej tabeli przedstawiono przykład zadania związanego `My.Computer.FileSystem.OpenTextFileWriter` z tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz tekst w pliku z`StreamWriter`|[Instrukcje: Zapisz tekst do plików z StreamWriter —](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 Ten <xref:System.IO.StreamWriter> przykład otwiera `My.Computer.FileSystem.OpenTextFileWriter` metodę i używa jej do pisania ciągu do pliku tekstowego `StreamWriter` za pomocą `WriteLine` metody klasy.  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku kończy się końcowym ukośnikiem.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">Instrukcje: Zapisz tekst w pliku z StreamWriter — (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public byte[] ReadAllBytes (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance unsigned int8[] ReadAllBytes(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllBytes (file As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ReadAllBytes(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.ReadAllBytes : string -&gt; byte[]" Usage="fileSystemProxy.ReadAllBytes file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Plik, który ma zostać odczytany.</param>
        <summary>Zwraca zawartość pliku jako tablicę bajtów.</summary>
        <returns><see langword="Byte" />Tablica zawierająca zawartość pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllBytes` Metoda`My.Computer.FileSystem` obiektu umożliwia odczytywanie danych z pliku binarnego. Zawartość pliku jest zwracana jako tablica bajtów.  
  
 Nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku. Na przykład plik Form1. vb nie może być plikiem źródłowym Visual Basic. Sprawdź wszystkie dane wejściowe, zanim użyjesz danych w aplikacji.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.ReadAllBytes` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku binarnego|[Instrukcje: Odczyt z plików binarnych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
  
   
  
## Examples  
 Ten przykład odczytuje z pliku`C:/Documents and Settings/selfportrait.jpg.`  
  
 [!code-vb[VbVbcnMyFileSystem#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby zapisać ciąg w buforze.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca zawartość pliku tekstowego jako <see langword="String" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllText (file As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.ReadAllText : string -&gt; string" Usage="fileSystemProxy.ReadAllText file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku, który ma zostać odczytany.</param>
        <summary>Zwraca zawartość pliku tekstowego jako <see langword="String" />.</summary>
        <returns><see langword="String" />zawierający zawartość pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` Metoda`My.Computer.FileSystem` obiektu umożliwia odczytywanie z pliku tekstowego. Zawartość pliku jest zwracana jako ciąg.  
  
 Kodowanie pliku można określić, jeśli zawartość pliku jest zakodowana w taki sposób, jak ASCII lub UTF-8. W przypadku odczytywania z pliku z rozszerzonymi znakami należy określić kodowanie pliku przy użyciu innego przeciążenia <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText%2A> metody.  
  
 Nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku. Na przykład plik Form1. vb nie może być plikiem źródłowym Visual Basic. Sprawdź wszystkie dane wejściowe, zanim użyjesz danych w aplikacji.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.ReadAllText` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego|[Instrukcje: Odczyt z plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 Ten przykład odczytuje zawartość `Test.txt` do ciągu, a następnie wyświetla ją w oknie komunikatu.  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 Ten przykład odczytuje zawartość pliku `Test.txt` ASCII do ciągu, a następnie wyświetla go w oknie komunikatu.  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby zapisać ciąg w buforze.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">Instrukcje: Odczytywanie tekstu z plików za pomocą StreamReader (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files.md">Rozwiązywanie problemów: Odczytywanie z plików tekstowych oraz zapisywanie w nich</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Przewodnik: Manipulowanie plikami i katalogami w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-encodings.md">Kodowanie pliku</related>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.ReadAllText : string * System.Text.Encoding -&gt; string" Usage="fileSystemProxy.ReadAllText (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku, który ma zostać odczytany.</param>
        <param name="encoding">Kodowanie znaków do użycia podczas odczytywania pliku. Wartość domyślna to UTF-8.</param>
        <summary>Zwraca zawartość pliku tekstowego jako <see langword="String" />.</summary>
        <returns><see langword="String" />zawierający zawartość pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` Metoda`My.Computer.FileSystem` obiektu umożliwia odczytywanie z pliku tekstowego. Zawartość pliku jest zwracana jako ciąg.  
  
 Kodowanie pliku można określić, jeśli zawartość pliku jest zakodowana w taki sposób, jak ASCII lub UTF-8. W przypadku odczytywania z pliku z rozszerzonymi znakami należy określić kodowanie pliku.  
  
 Nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku. Na przykład plik Form1. vb nie może być plikiem źródłowym Visual Basic. Sprawdź wszystkie dane wejściowe, zanim użyjesz danych w aplikacji.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.ReadAllText` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego|[Instrukcje: Odczyt z plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 Ten przykład odczytuje zawartość `Test.txt` do ciągu, a następnie wyświetla ją w oknie komunikatu.  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 Ten przykład odczytuje zawartość pliku `Test.txt` ASCII do ciągu, a następnie wyświetla go w oknie komunikatu.  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby zapisać ciąg w buforze.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">Instrukcje: Odczytywanie tekstu z plików za pomocą StreamReader (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files.md">Rozwiązywanie problemów: Odczytywanie z plików tekstowych oraz zapisywanie w nich</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Przewodnik: Manipulowanie plikami i katalogami w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-encodings.md">Kodowanie pliku</related>
      </Docs>
    </Member>
    <Member MemberName="RenameDirectory">
      <MemberSignature Language="C#" Value="public void RenameDirectory (string directory, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameDirectory(string directory, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameDirectory (directory As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameDirectory(System::String ^ directory, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.RenameDirectory : string * string -&gt; unit" Usage="fileSystemProxy.RenameDirectory (directory, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Ścieżka i nazwa katalogu, który ma zostać zmieniony.</param>
        <param name="newName">Nowa nazwa katalogu.</param>
        <summary>Zmienia nazwę katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie może być używana do przenoszenia katalogu; `MoveDirectory` Użyj metody, aby przenieść katalog i zmienić jego nazwę.  
  
   
  
## Examples  
 Ten przykład zmienia nazwę `Test` katalogu na. `SecondTest`  
  
 [!code-vb[VbVbcnMyFileSystem#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newName" />zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />jest <see langword="Nothing" />.  
  
—lub— 
 <paramref name="newName" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Istnieje plik lub katalog o nazwie określonej w <paramref name="newName" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Instrukcje: Analizowanie ścieżek plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="RenameFile">
      <MemberSignature Language="C#" Value="public void RenameFile (string file, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameFile(string file, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameFile (file As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameFile(System::String ^ file, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.RenameFile : string * string -&gt; unit" Usage="fileSystemProxy.RenameFile (file, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Plik, który ma zostać zmieniony.</param>
        <param name="newName">Nowa nazwa pliku.</param>
        <summary>Zmienia nazwę pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można użyć tej metody do przeniesienia pliku; <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile%2A> Użyj metody, aby przenieść plik i zmienić jego nazwę.  
  
 W poniższej tabeli przedstawiono przykład zadania związanego `My.Computer.FileSystem.RenameFile` z tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zmień nazwę pliku|[Instrukcje: Zmień nazwę pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
  
   
  
## Examples  
 Ten przykład zmienia nazwę pliku `Test.txt` na. `SecondTest.txt`  
  
 [!code-vb[VbVbcnMyFileSystem#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#1)]  
  
 Zmień wartość`C:\Test.txt`"" na ścieżkę i nazwę pliku, którego nazwę chcesz zmienić.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newName" />zawiera informacje o ścieżce lub kończące się ukośnikiem\\odwrotnym ().</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.  
  
—lub— 
 <paramref name="newName" />jest <see langword="Nothing" /> lub ciągiem pustym.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Istnieje plik lub katalog o nazwie określonej w <paramref name="newName" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganego uprawnienia.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="SpecialDirectories">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialDirectories As SpecialDirectoriesProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ SpecialDirectories { Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SpecialDirectories : Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który dostarcza właściwości do uzyskiwania dostępu do najczęściej przywoływanych katalogów.</summary>
        <value>Ta właściwość zwraca <see cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" /> obiekt dla komputera.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Ten przykład zwraca ścieżkę pliku dla katalogu pulpitu użytkownika i wyświetla ją.  
  
 [!code-vb[VbVbcnMyFileSystem#80](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#80)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public void WriteAllBytes (string file, byte[] data, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(System.String,System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllBytes (file As String, data As Byte(), append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllBytes(System::String ^ file, cli::array &lt;System::Byte&gt; ^ data, bool append);" />
      <MemberSignature Language="F#" Value="member this.WriteAllBytes : string * byte[] * bool -&gt; unit" Usage="fileSystemProxy.WriteAllBytes (file, data, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">Ścieżka i nazwa pliku, w którym ma zostać zapisany.</param>
        <param name="data">Dane, które mają być zapisywane do pliku.</param>
        <param name="append"><see langword="True" />Aby dołączyć do zawartości pliku; <see langword="False" /> aby zastąpić zawartość pliku. Wartość domyślna to <see langword="False" />.</param>
        <summary>Zapisuje dane w pliku binarnym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określona ścieżka, z wyłączeniem nazwy pliku, jest nieprawidłowa, <xref:System.IO.DirectoryNotFoundException> zostanie zgłoszony wyjątek. Jeśli ścieżka jest prawidłowa, ale plik nie istnieje, plik zostanie utworzony.  
  
> [!NOTE]
>  `WriteAllBytes` Metoda otwiera plik, zapisuje je w nim, a następnie zamyka go. Kod używający `WriteAllBytes` metody jest prostszy niż kod, który <xref:System.IO.BinaryWriter> używa obiektu. Jeśli jednak dodajesz dane do pliku przy użyciu pętli, <xref:System.IO.BinaryWriter> obiekt może zapewnić lepszą wydajność, ponieważ wystarczy otworzyć i zamknąć plik tylko raz.  
  
 W poniższej tabeli przedstawiono przykład zadania związanego `My.Computer.FileSystem.WriteAllBytes` z tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapis w pliku binarnym|[Instrukcje: Zapisz w plikach binarnych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
  
   
  
## Examples  
 Ten przykład dołącza tablicę `CustomerData` danych do pliku. `CollectedData`  
  
 [!code-vb[VbVbcnMyFileSystem#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby zapisać ciąg w buforze.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md">Instrukcje: Zapisz w pliku binarnym w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">Zapisywanie w plikach w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje tekst do pliku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllText (file As String, text As String, append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append);" />
      <MemberSignature Language="F#" Value="member this.WriteAllText : string * string * bool -&gt; unit" Usage="fileSystemProxy.WriteAllText (file, text, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">Plik, w którym ma zostać zapisany.</param>
        <param name="text">Tekst, który ma zostać zapisany w pliku.</param>
        <param name="append"><see langword="True" />Aby dołączyć do zawartości pliku; <see langword="False" /> aby zastąpić zawartość pliku. Wartość domyślna to <see langword="False" />.</param>
        <summary>Zapisuje tekst do pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kodowanie UTF-8 służy do zapisu w pliku. Aby określić inne kodowanie, użyj innego przeciążenia <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> metody.  
  
 Jeśli określony plik nie istnieje, zostanie utworzony.  
  
 Jeśli określone kodowanie nie jest zgodne z istniejącym kodowaniem pliku, określone kodowanie jest ignorowane.  
  
> [!NOTE]
>  `WriteAllText` Metoda otwiera plik, zapisuje je w nim, a następnie zamyka go. Kod używający `WriteAllText` metody jest prostszy niż kod, który <xref:System.IO.StreamWriter> używa obiektu. Jednakże w przypadku dodawania ciągów do pliku przy użyciu pętli, <xref:System.IO.StreamWriter> obiekt może zapewnić lepszą wydajność, ponieważ należy tylko otworzyć i zamknąć plik. Aby uzyskać więcej informacji, zobacz <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> metodę.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.WriteAllText` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz tekst w pliku|[Instrukcje: Zapisz tekst do plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|Dołączanie tekstu do pliku|[Instrukcje: Dołącz do plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 Ten przykład zapisuje wiersz `"This is new text to be added."` do pliku `Test.txt`, zastępując istniejący tekst w pliku.  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 Ten przykład zapisuje nazwy plików w `Documents and Settings` folderze do `FileList.txt`, wstawiając znak powrotu karetki między nimi w celu zwiększenia czytelności.  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby zapisać ciąg w buforze.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">Zapisywanie w plikach w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.WriteAllText : string * string * bool * System.Text.Encoding -&gt; unit" Usage="fileSystemProxy.WriteAllText (file, text, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">Plik, w którym ma zostać zapisany.</param>
        <param name="text">Tekst, który ma zostać zapisany w pliku.</param>
        <param name="append"><see langword="True" />Aby dołączyć do zawartości pliku; <see langword="False" /> aby zastąpić zawartość pliku. Wartość domyślna to <see langword="False" />.</param>
        <param name="encoding">Kodowanie, które ma być używane podczas zapisywania do pliku. Wartość domyślna to UTF-8.</param>
        <summary>Zapisuje tekst do pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określony plik nie istnieje, zostanie utworzony.  
  
 Jeśli określone kodowanie nie jest zgodne z istniejącym kodowaniem pliku, określone kodowanie jest ignorowane.  
  
> [!NOTE]
>  `WriteAllText` Metoda otwiera plik, zapisuje je w nim, a następnie zamyka go. Kod używający `WriteAllText` metody jest prostszy niż kod, który <xref:System.IO.StreamWriter> używa obiektu. Jednakże w przypadku dodawania ciągów do pliku przy użyciu pętli, <xref:System.IO.StreamWriter> obiekt może zapewnić lepszą wydajność, ponieważ należy tylko otworzyć i zamknąć plik. Aby uzyskać więcej informacji, zobacz <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> metodę.  
  
 W poniższej tabeli przedstawiono przykłady zadań związanych z `My.Computer.FileSystem.WriteAllText` tą metodą.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisz tekst w pliku|[Instrukcje: Zapisz tekst do plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|Dołączanie tekstu do pliku|[Instrukcje: Dołącz do plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 Ten przykład zapisuje wiersz `"This is new text to be added."` do pliku `Test.txt`, zastępując istniejący tekst w pliku.  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 Ten przykład zapisuje nazwy plików w `Documents and Settings` folderze do `FileList.txt`, wstawiając znak powrotu karetki między nimi w celu zwiększenia czytelności.  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest nieprawidłowa z jednego z następujących powodów: jest to ciąg o zerowej długości; zawiera tylko białe znaki; zawiera nieprawidłowe znaki; lub jest ścieżką urządzenia (zaczyna \\ \\się od.\\), kończy się na końcu końcowego ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpił błąd we/wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Za mało pamięci, aby zapisać ciąg w buforze.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">Zapisywanie w plikach w Visual Basic</related>
      </Docs>
    </Member>
  </Members>
</Type>
