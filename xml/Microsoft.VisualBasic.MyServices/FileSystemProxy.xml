<Type Name="FileSystemProxy" FullName="Microsoft.VisualBasic.MyServices.FileSystemProxy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d5814798f247ab6aa7c2e2f40987ceb3c79fd2f" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48756037" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileSystemProxy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FileSystemProxy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.MyServices.FileSystemProxy" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemProxy" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemProxy" />
  <TypeSignature Language="F#" Value="type FileSystemProxy = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia właściwości i metody do pracy z stacje, plików i katalogów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono przykłady zadań z obiektem `My.Computer.FileSystem`.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego|[Porady: Odczyt z plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
|Odczyt z pliku tekstowego z separatorami|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczyt z plików testowych o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczyt z pliku tekstowego w wielu formatach|[Instrukcje: odczyt z plików tekstowych w wielu formatach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
|Odczyt z pliku binarnego|[Instrukcje: odczyt z plików binarnych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
|Odczyt z pliku tekstowego z <xref:System.IO.StreamReader>|[Instrukcje: odczyt tekstu z plików za pomocą StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
|Zapis w pliku tekstowym|[Instrukcje: zapisywanie tekstu w plikach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|Dołącz do pliku tekstowego|[Instrukcje: dołączanie do plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
|Zapis w pliku binarnym|[Instrukcje: zapisywanie w plikach binarnych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
|Zapis w plikach tekstowych w **Moje dokumenty** katalogu|[Instrukcje: zapisywanie tekstu w plikach w katalogu Moje dokumenty](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-in-the-my-documents-directory.md)|  
|Zapis do pliku tekstowego za pomocą `StreamWriter`|[Instrukcje: zapisywanie tekstu w plikach za pomocą StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
|Kopiowanie plików z określonym wzorcem|[Instrukcje: kopiowanie plików z określonym wzorcem do katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md)|  
|Kopiowanie pliku do tego samego katalogu|[Instrukcje: tworzenie kopii pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Kopiowanie pliku do innego katalogu|[Instrukcje: tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
|Utwórz plik|[Instrukcje: tworzenie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-file.md)|  
|Usuwanie pliku|[Instrukcje: usuwanie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
|Znajdowanie plików z określonym wzorcem|[Instrukcje: znajdowanie plików z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
|Przenoszenie pliku|[Instrukcje: przenoszenie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
|Zmienianie nazwy pliku|[Instrukcje: zmienianie nazwy pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
|Kopiowanie katalogu do innego katalogu|[Instrukcje: kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
|Tworzenie katalogu|[Instrukcje: tworzenie katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
|Znajdowanie podkatalogów z określonym wzorcem|[Instrukcje: znajdowanie podkatalogów z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
|Pobieranie kolekcji plików w katalogu|[Instrukcje: pobieranie kolekcji plików z katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|Odczytywanie **Moje dokumenty** katalogu|[Instrukcje: pobieranie zawartości katalogu Moje dokumenty](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-retrieve-the-contents-of-the-my-documents-directory.md)|  
|Ścieżka pliku analizy|[Instrukcje: analizowanie ścieżek plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 W tym przykładzie sprawdza, czy folder `C:\backup\logs` istnieje, a następnie sprawdza jego właściwości.  
  
 [!code-vb[VbVbcnMyFileSystem#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#23)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName="CombinePath">
      <MemberSignature Language="C#" Value="public string CombinePath (string baseDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string CombinePath(string baseDirectory, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CombinePath (baseDirectory As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CombinePath(System::String ^ baseDirectory, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="member this.CombinePath : string * string -&gt; string" Usage="fileSystemProxy.CombinePath (baseDirectory, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseDirectory" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseDirectory">
          <see langword="String" />. Pierwsza ścieżka do połączenia.</param>
        <param name="relativePath">
          <see langword="String" />. Drugi ścieżka do połączenia.</param>
        <summary>Łączy dwie ścieżki i zwraca ścieżkę poprawnie sformatowana.</summary>
        <returns>Kombinacja określonych ścieżek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda usuwa nadmiarowe ułamkowa znaków, aby utworzyć ścieżkę poprawnie sformatowana.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CombinePath` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Połącz ścieżkę i nazwę katalogu|[Instrukcje: analizowanie ścieżek plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 W tym przykładzie łączy ścieżkę i nazwę katalogu utworzyć ścieżki poprawnie sformatowana.  
  
 [!code-vb[VbRefFile#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#3)]  
  
 W tym przykładzie łączy dwie ścieżki, aby utworzyć ścieżkę poprawnie sformatowana.  
  
 [!code-vb[VbRefFile#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#4)]  
  
 W tym przykładzie zwraca `C:\Dir1\Dir2\Dir4\Dir5\File.txt`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="baseDirectory" /> lub <paramref name="relativePath" /> są źle sformułowane ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Porady: pobieranie kolekcji plików z katalogu w Visual Basic</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Katalog, który ma być skopiowany.</param>
        <param name="destinationDirectoryName">Lokalizacja, do którego powinny zostać skopiowane katalogu.</param>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kopiuje zawartość katalogu, a także sam katalog. Jeśli katalog docelowy nie istnieje, zostanie utworzony. Jeśli katalog o takiej samej nazwie istnieje w lokalizacji docelowej, zawartość dwa katalogi są scalane. Podczas operacji, można określić nową nazwę katalogu.  
  
 Podczas kopiowania plików w katalogu, może być zgłaszane wyjątki, które są spowodowane przez określonego pliku. Gdy takie wyjątki zostaną zgłoszone, ich są konsolidowane w jednym wyjątkiem którego `Data` właściwości jest przechowywana w formie wpisy <xref:System.Collections.IDictionary> w którym ścieżka pliku lub katalogu jest klucz, a komunikat określony wyjątek znajduje się w odpowiadająca wartość. Użyj `For…Each` wyliczyć za pośrednictwem wpisów.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CopyDirectory` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie katalogu|[Instrukcje: kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 Poniższy przykładowy kod kopiuje katalog `TestDirectory1` do `TestDirectory2`, zastępując istniejące pliki.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 Zastąp `C:\TestDirectory1` i `C:\TestDirectory2` ścieżkę i nazwę katalogu, który chcesz skopiować oraz lokalizacji, do którego chcesz skopiować go.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> lub <paramref name="sourceDirectoryName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog źródłowy nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Ścieżka źródłowa i docelowa ścieżka są takie same.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa folderu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Plik docelowy istnieje, ale nie są dostępne.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Porady: pobieranie kolekcji plików z katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Porady: analizowanie ścieżek pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Katalog, który ma być skopiowany.</param>
        <param name="destinationDirectoryName">Lokalizacja, do którego powinny zostać skopiowane katalogu.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kopiuje zawartość katalogu, a także sam katalog. Jeśli katalog docelowy nie istnieje, zostanie utworzony. Jeśli katalog o takiej samej nazwie istnieje w lokalizacji docelowej, zawartość dwa katalogi są scalane. Podczas operacji, można określić nową nazwę katalogu.  
  
 Podczas kopiowania plików w katalogu, może być zgłaszane wyjątki, które są spowodowane przez określonego pliku. Gdy takie wyjątki zostaną zgłoszone, ich są konsolidowane w jednym wyjątkiem którego `Data` właściwości jest przechowywana w formie wpisy <xref:System.Collections.IDictionary> w którym ścieżka pliku lub katalogu jest klucz, a komunikat określony wyjątek znajduje się w odpowiadająca wartość. Użyj `For…Each` wyliczyć za pośrednictwem wpisów.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CopyDirectory` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie katalogu|[Instrukcje: kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 Poniższy przykładowy kod kopiuje katalog `TestDirectory1` do `TestDirectory2`, zastępując istniejące pliki.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 Zastąp `C:\TestDirectory1` i `C:\TestDirectory2` ścieżkę i nazwę katalogu, który chcesz skopiować oraz lokalizacji, do którego chcesz skopiować go.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> lub <paramref name="sourceDirectoryName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog źródłowy nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Ścieżka źródłowa i docelowa ścieżka są takie same.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa folderu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Plik docelowy istnieje, ale nie są dostępne.</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="ShowUI" /> ustawiono <see langword="UIOption.AllDialogs" /> użytkownik anuluje operację i nie można skopiować jeden lub więcej plików w katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Porady: pobieranie kolekcji plików z katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Porady: analizowanie ścieżek pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * bool -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Katalog, który ma być skopiowany.</param>
        <param name="destinationDirectoryName">Lokalizacja, do którego powinny zostać skopiowane katalogu.</param>
        <param name="overwrite">
          <see langword="True" /> Aby zastąpić istniejące pliki; w przeciwnym razie <see langword="False" />. Wartość domyślna to <see langword="False" />.</param>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kopiuje zawartość katalogu, a także sam katalog. Jeśli katalog docelowy nie istnieje, zostanie utworzony. Jeśli katalog o takiej samej nazwie istnieje w lokalizacji docelowej, zawartość dwa katalogi są scalane. Podczas operacji, można określić nową nazwę katalogu.  
  
 Podczas kopiowania plików w katalogu, mogą być zgłaszane wyjątki, które są spowodowane przez określonego pliku, na przykład plik istniejące podczas scalania podczas `overwrite` ustawiono `False`. Gdy takie wyjątki zostaną zgłoszone, ich są konsolidowane w jednym wyjątkiem którego `Data` właściwości jest przechowywana w formie wpisy <xref:System.Collections.IDictionary> w którym ścieżka pliku lub katalogu jest klucz, a komunikat określony wyjątek znajduje się w odpowiadająca wartość. Użyj `For…Each` wyliczyć za pośrednictwem wpisów.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CopyDirectory` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie katalogu|[Instrukcje: kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 Poniższy przykładowy kod kopiuje katalog `TestDirectory1` do `TestDirectory2`, zastępując istniejące pliki.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 Zastąp `C:\TestDirectory1` i `C:\TestDirectory2` ścieżkę i nazwę katalogu, który chcesz skopiować oraz lokalizacji, do którego chcesz skopiować go.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> lub <paramref name="sourceDirectoryName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog źródłowy nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Ścieżka źródłowa i docelowa ścieżka są takie same.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa folderu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Plik docelowy istnieje, ale nie są dostępne.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Porady: pobieranie kolekcji plików z katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Porady: analizowanie ścieżek pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Katalog, który ma być skopiowany.</param>
        <param name="destinationDirectoryName">Lokalizacja, do którego powinny zostać skopiowane katalogu.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="onUserCancel">Określa, co należy zrobić, jeśli użytkownik kliknie **anulować** podczas operacji. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Kopiuje katalog do innego katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kopiuje zawartość katalogu, a także sam katalog. Jeśli katalog docelowy nie istnieje, zostanie utworzony. Jeśli katalog o takiej samej nazwie istnieje w lokalizacji docelowej, zawartość dwa katalogi są scalane. Podczas operacji, można określić nową nazwę katalogu.  
  
 Podczas kopiowania plików w katalogu, może być zgłaszane wyjątki, które są spowodowane przez określonego pliku. Gdy takie wyjątki zostaną zgłoszone, ich są konsolidowane w jednym wyjątkiem którego `Data` właściwości jest przechowywana w formie wpisy <xref:System.Collections.IDictionary> w którym ścieżka pliku lub katalogu jest klucz, a komunikat określony wyjątek znajduje się w odpowiadająca wartość. Użyj `For…Each` wyliczyć za pośrednictwem wpisów.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CopyDirectory` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie katalogu|[Instrukcje: kopiowanie katalogu do innego katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 Poniższy przykładowy kod kopiuje katalog `TestDirectory1` do `TestDirectory2`, zastępując istniejące pliki.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 Zastąp `C:\TestDirectory1` i `C:\TestDirectory2` ścieżkę i nazwę katalogu, który chcesz skopiować oraz lokalizacji, do którego chcesz skopiować go.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" /> lub <paramref name="sourceDirectoryName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog źródłowy nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Ścieżka źródłowa i docelowa ścieżka są takie same.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa folderu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Plik docelowy istnieje, ale nie są dostępne.</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="ShowUI" /> ustawiono <see langword="UIOption.AllDialogs" /> użytkownik anuluje operację i nie można skopiować jeden lub więcej plików w katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Porady: pobieranie kolekcji plików z katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Porady: analizowanie ścieżek pliku w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Porady: kopiowanie plików z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Porady: tworzenie kopii pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Porady: kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Porady: zmienianie nazwy pliku w Visual Basic</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Plik, który ma być skopiowany.</param>
        <param name="destinationFileName">Lokalizacja, do którego można skopiować pliku.</param>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` nie pozwala zachować wpisy kontroli dostępu (wpisy kontroli dostępu). Nowo utworzony plik dziedziczy ACE domyślnego katalogu, w którym został utworzony.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CopyFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie pliku do tego samego katalogu.|[Instrukcje: tworzenie kopii pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Kopiowanie pliku do innego katalogu.|[Instrukcje: tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 W tym przykładzie kopiuje plik `Test.txt` do katalogu `TestFiles2` bez zastępowania istniejących plików.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 Zastąp ścieżki plików ścieżki, które chcesz użyć w kodzie.  
  
 W tym przykładzie kopiuje plik `Test.txt` do katalogu `TestFiles2` i zmienia ją `NewFile.txt`.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 Zastąp ścieżki plików ścieżki, które chcesz użyć w kodzie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> lub <paramref name="sourceFileName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik w katalogu docelowym o takiej samej nazwie jest już używana.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość dostępu do wszystkich zmiennych środowiskowych. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość dostępu do zmiennych rejestru. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Porady: kopiowanie plików z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Porady: tworzenie kopii pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Porady: kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Porady: zmienianie nazwy pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Plik, który ma być skopiowany.</param>
        <param name="destinationFileName">Lokalizacja, do którego można skopiować pliku.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` nie pozwala zachować wpisy kontroli dostępu (wpisy kontroli dostępu). Nowo utworzony plik dziedziczy ACE domyślnego katalogu, w którym został utworzony.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CopyFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie pliku do tego samego katalogu.|[Instrukcje: tworzenie kopii pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Kopiowanie pliku do innego katalogu.|[Instrukcje: tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 W tym przykładzie kopiuje plik `Test.txt` do katalogu `TestFiles2` bez zastępowania istniejących plików.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 Zastąp ścieżki plików ścieżki, które chcesz użyć w kodzie.  
  
 W tym przykładzie kopiuje plik `Test.txt` do katalogu `TestFiles2` i zmienia ją `NewFile.txt`.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 Zastąp ścieżki plików ścieżki, które chcesz użyć w kodzie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> lub <paramref name="sourceFileName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik docelowy istnieje i <paramref name="overwrite" /> ustawiono <see langword="False" />.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość dostępu do wszystkich zmiennych środowiskowych. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość dostępu do zmiennych rejestru. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Porady: kopiowanie plików z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Porady: tworzenie kopii pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Porady: kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Porady: zmienianie nazwy pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * bool -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Plik, który ma być skopiowany.</param>
        <param name="destinationFileName">Lokalizacja, do którego można skopiować pliku.</param>
        <param name="overwrite">
          <see langword="True" /> Jeśli istniejące pliki powinny być zastąpione; w przeciwnym razie <see langword="False" />. Wartość domyślna to <see langword="False" />.</param>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` nie pozwala zachować wpisy kontroli dostępu (wpisy kontroli dostępu). Nowo utworzony plik dziedziczy ACE domyślnego katalogu, w którym został utworzony.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CopyFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie pliku do tego samego katalogu.|[Instrukcje: tworzenie kopii pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Kopiowanie pliku do innego katalogu.|[Instrukcje: tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 W tym przykładzie kopiuje plik `Test.txt` do katalogu `TestFiles2` bez zastępowania istniejących plików.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 Zastąp ścieżki plików ścieżki, które chcesz użyć w kodzie.  
  
 W tym przykładzie kopiuje plik `Test.txt` do katalogu `TestFiles2` i zmienia ją `NewFile.txt`.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 Zastąp ścieżki plików ścieżki, które chcesz użyć w kodzie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> lub <paramref name="sourceFileName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik docelowy istnieje i <paramref name="overwrite" /> ustawiono <see langword="False" />.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość dostępu do wszystkich zmiennych środowiskowych. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość dostępu do zmiennych rejestru. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Porady: kopiowanie plików z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Porady: tworzenie kopii pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Porady: kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Porady: zmienianie nazwy pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Plik, który ma być skopiowany.</param>
        <param name="destinationFileName">Lokalizacja, do którego można skopiować pliku.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="onUserCancel">Określa, co należy zrobić, jeśli użytkownik kliknie **anulować** podczas operacji. Wartość domyślna to <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
        <summary>Kopiuje plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` nie pozwala zachować wpisy kontroli dostępu (wpisy kontroli dostępu). Nowo utworzony plik dziedziczy ACE domyślnego katalogu, w którym został utworzony.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CopyFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Kopiowanie pliku do tego samego katalogu.|[Instrukcje: tworzenie kopii pliku w tym samym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|Kopiowanie pliku do innego katalogu.|[Instrukcje: tworzenie kopii pliku w innym katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 W tym przykładzie kopiuje plik `Test.txt` do katalogu `TestFiles2` bez zastępowania istniejących plików.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 Zastąp ścieżki plików ścieżki, które chcesz użyć w kodzie.  
  
 W tym przykładzie kopiuje plik `Test.txt` do katalogu `TestFiles2` i zmienia ją `NewFile.txt`.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 Zastąp ścieżki plików ścieżki, które chcesz użyć w kodzie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> lub <paramref name="sourceFileName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik docelowy istnieje i <paramref name="overwrite" /> ustawiono <see langword="False" />.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="UICancelOption" /> ustawiono <see langword="ThrowException" />, a użytkownik anulował operację lub nieokreślony błąd We/Wy.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość dostępu do wszystkich zmiennych środowiskowych. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość dostępu do zmiennych rejestru. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">Porady: kopiowanie plików z określonym wzorcem do katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">Porady: tworzenie kopii pliku w tym samym katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">Porady: kopiowanie katalogu do innego katalogu w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">Porady: zmienianie nazwy pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public void CreateDirectory (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CreateDirectory(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDirectory (directory As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDirectory(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.CreateDirectory : string -&gt; unit" Usage="fileSystemProxy.CreateDirectory directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Nazwa i lokalizacja katalogu.</param>
        <summary>Tworzy katalog.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog już istnieje, jest zgłaszany żaden wyjątek.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.CreateDirectory` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Tworzenie katalogu|[Instrukcje: tworzenie katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
  
   
  
## Examples  
 W tym przykładzie tworzy katalog `NewDirectory`w `C:\Documents and Settings\All Users\Documents`.  
  
 [!code-vb[VbVbcnMyFileSystem#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa katalogu jest nieprawidłowo sformułowany. Na przykład zawiera niedozwolone znaki lub jest tylko spacją.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.PathTooLongException">Nazwa katalogu jest zbyt długa.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa katalogu jest tylko dwukropek (:).</exception>
        <exception cref="T:System.IO.IOException">Katalog, który ma zostać utworzony w katalogu nadrzędnym jest tylko do odczytu</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma uprawnień do utworzenia katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:System.IO.Directory.CreateDirectory(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentDirectory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrentDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDirectory : string with get, set" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżący katalog.</summary>
        <value>Bieżący katalog dla operacji We/Wy pliku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CurrentDirectory` jest zmienną środowiskową całego systemu.  
  
   
  
## Examples  
 W tym przykładzie zwraca bieżący katalog i wyświetla go w oknie komunikatu.  
  
 [!code-vb[VbVbcnMyFileSystem#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#18)]  
  
 W tym przykładzie ustawia bieżący katalog `C:\TestDirectory`.  
  
 [!code-vb[VbVbcnMyFileSystem#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">Ścieżka jest nieprawidłowa.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa katalog.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, onDirectoryNotEmpty As DeleteDirectoryOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.DeleteDirectoryOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, onDirectoryNotEmpty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="onDirectoryNotEmpty" Type="Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog do usunięcia.</param>
        <param name="onDirectoryNotEmpty">Określa, co należy zrobić, jeśli zawiera katalog, który ma zostać usunięty, pliki lub katalogi. Wartość domyślna to <see langword="DeleteDirectoryOption.DeleteAllContents" />.</param>
        <summary>Usuwa katalog.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W przykładzie usunięto katalog `OldDirectory` tylko wtedy, gdy jest on pusty.  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 W tym przykładzie usuwa katalog `OldDirectory` i całą jego zawartość.  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 W tym przykładzie usuwa katalog `OldDirectory` i wszystkie jego zawartość, pytania użytkownika o potwierdzenie usunięcia, ale nie będzie przesyłał zawartość do **Kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 W tym przykładzie usuwa katalog `OldDirectory` i całą jego zawartość, wysyłając do **Kosza**, ale nie pokazuje postęp operacji.  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest ciągiem o zerowej długości, jest nieprawidłowo sformułowany, zawiera tylko znak odstępu lub zawiera nieprawidłowe znaki (w tym znaki symboli wieloznacznych). Ścieżka jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje lub jest plikiem.</exception>
        <exception cref="T:System.IO.IOException">Plik w katalogu lub podkatalogu jest używana.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa katalogu zawiera dwukropek (:).</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.OperationCanceledException">Użytkownik anulował operację lub nie można usunąć katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Porady: usuwanie pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog do usunięcia.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="recycle">Określa, czy nie usunięto plik powinny być przesyłane do **Kosza**. Wartość domyślna to <see langword="RecycleOption.DeletePermanently" />.</param>
        <summary>Usuwa katalog.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI` i `recycle` parametry nie są obsługiwane w aplikacjach, które nie są użytkownika interakcyjnego, takich jak usługi Windows.  
  
   
  
## Examples  
 W przykładzie usunięto katalog `OldDirectory` tylko wtedy, gdy jest on pusty.  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 W tym przykładzie usuwa katalog `OldDirectory` i całą jego zawartość.  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 W tym przykładzie usuwa katalog `OldDirectory` i wszystkie jego zawartość, pytania użytkownika o potwierdzenie usunięcia, ale nie będzie przesyłał zawartość do **Kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 W tym przykładzie usuwa katalog `OldDirectory` i całą jego zawartość, wysyłając do **Kosza**, ale nie pokazuje postęp operacji.  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest ciągiem o zerowej długości, jest nieprawidłowo sformułowany, zawiera tylko znak odstępu lub zawiera nieprawidłowe znaki (w tym znaki symboli wieloznacznych). Ścieżka jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje lub jest plikiem.</exception>
        <exception cref="T:System.IO.IOException">Plik w katalogu lub podkatalogu jest używana.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa katalogu zawiera dwukropek (:).</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.OperationCanceledException">Użytkownik anulował operację lub nie można usunąć katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Porady: usuwanie pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog do usunięcia.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="recycle">Określa, czy nie usunięto plik powinny być przesyłane do **Kosza**. Wartość domyślna to <see langword="RecycleOption.DeletePermanently" />.</param>
        <param name="onUserCancel">Określa, czy należy zgłosić wyjątek, jeśli użytkownik kliknie **anulować**.</param>
        <summary>Usuwa katalog.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`, `recycle`, I `onUserCancel` parametry nie są obsługiwane w aplikacjach, które nie są użytkownika interakcyjnego, takich jak usługi Windows.  
  
   
  
## Examples  
 W przykładzie usunięto katalog `OldDirectory` tylko wtedy, gdy jest on pusty.  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 W tym przykładzie usuwa katalog `OldDirectory` i całą jego zawartość.  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 W tym przykładzie usuwa katalog `OldDirectory` i wszystkie jego zawartość, pytania użytkownika o potwierdzenie usunięcia, ale nie będzie przesyłał zawartość do **Kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 W tym przykładzie usuwa katalog `OldDirectory` i całą jego zawartość, wysyłając do **Kosza**, ale nie pokazuje postęp operacji.  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka jest ciągiem o zerowej długości, jest nieprawidłowo sformułowany, zawiera tylko znak odstępu lub zawiera nieprawidłowe znaki (w tym znaki symboli wieloznacznych). Ścieżka jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje lub jest plikiem.</exception>
        <exception cref="T:System.IO.IOException">Plik w katalogu lub podkatalogu jest używana.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa katalogu zawiera dwukropek (:).</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <exception cref="T:System.OperationCanceledException">Użytkownik anulował operację lub nie można usunąć katalogu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Porady: usuwanie pliku w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa plik.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string -&gt; unit" Usage="fileSystemProxy.DeleteFile file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku do usunięcia.</param>
        <summary>Usuwa plik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.DeleteFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Aby usunąć plik|[Instrukcje: usuwanie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 W tym przykładzie usuwa plik `Test.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 W tym przykładzie usuwa plik `Test.txt` i umożliwia użytkownikowi upewnić się, że należy usunąć plik.  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 W tym przykładzie usuwa plik `Test.txt` i wysyła je do **Kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; przedstawiono w nim znaku ukośnika na końcu którym musi zostać określony plik; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.IOException">Plik jest w użyciu.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma uprawnień do usunięcia pliku lub plik jest tylko do odczytu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Porady: usuwanie pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="fileSystemProxy.DeleteFile (file, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku do usunięcia.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="recycle">Określa, czy usunięto plik powinny być przesyłane do **Kosza**. Wartość domyślna to <see langword="RecycleOption.DeletePermanently" />.</param>
        <summary>Usuwa plik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI` i `recycle` parametry nie są obsługiwane w aplikacjach, które nie są użytkownika interakcyjnego, takich jak usługi Windows.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.DeleteFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Aby usunąć plik|[Instrukcje: usuwanie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 W tym przykładzie usuwa plik `Test.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 W tym przykładzie usuwa plik `Test.txt` i umożliwia użytkownikowi upewnić się, że należy usunąć plik.  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 W tym przykładzie usuwa plik `Test.txt` i wysyła je do **Kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; przedstawiono w nim znaku ukośnika na końcu którym musi zostać określony plik; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.IOException">Plik jest w użyciu.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma uprawnień do usunięcia pliku lub plik jest tylko do odczytu.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Porady: usuwanie pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.DeleteFile (file, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku do usunięcia.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="recycle">Określa, czy usunięto plik powinny być przesyłane do **Kosza**. Wartość domyślna to <see langword="RecycleOption.DeletePermanently" />.</param>
        <param name="onUserCancel">Określa, czy wyjątek jest generowany, gdy użytkownik anuluje operację. Wartość domyślna to <see langword="UICancelOption.ThrowException" />.</param>
        <summary>Usuwa plik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `showUI`, `recycle`, I `onUserCancel` parametry nie są obsługiwane w aplikacjach, które nie są użytkownika interakcyjnego, takich jak usługi Windows.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.DeleteFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Aby usunąć plik|[Instrukcje: usuwanie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 W tym przykładzie usuwa plik `Test.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 W tym przykładzie usuwa plik `Test.txt` i umożliwia użytkownikowi upewnić się, że należy usunąć plik.  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 W tym przykładzie usuwa plik `Test.txt` i wysyła je do **Kosza**.  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; przedstawiono w nim znaku ukośnika na końcu którym musi zostać określony plik; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.IO.IOException">Plik jest w użyciu.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma uprawnień do usunięcia pliku lub plik jest tylko do odczytu.</exception>
        <exception cref="T:System.OperationCanceledException">Użytkownik anulował operację i <paramref name="onUserCancel" /> ustawiono <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">Porady: usuwanie pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public bool DirectoryExists (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool DirectoryExists(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DirectoryExists (directory As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DirectoryExists(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.DirectoryExists : string -&gt; bool" Usage="fileSystemProxy.DirectoryExists directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Ścieżka katalogu.</param>
        <summary>Zwraca <see langword="True" /> Jeśli istnieje w określonym katalogu.</summary>
        <returns>
          <see langword="True" /> Jeśli katalog istnieje; w przeciwnym razie <see langword="False" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W tym przykładzie określa, czy katalog `C:\backup\logs` istnieje, a następnie sprawdza jego właściwości.  
  
 [!code-vb[VbRefFile#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Wskazówki: manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="Drives">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt; Drives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.DriveInfo&gt; Drives" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Drives As ReadOnlyCollection(Of DriveInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ Drives { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Drives : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwraca kolekcję tylko do odczytu wszystkich nazw dysku.</summary>
        <value>Kolekcja tylko do odczytu wszystkich dostępnych dysków jako <see cref="T:System.IO.DriveInfo" /> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wszystkie dyski logiczne.  
  
   
  
## Examples  
 Ten przykład wyświetla nazwy dostępnych dysków, w oknie komunikatu.  
  
 [!code-vb[VbRefFile#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <altmember cref="T:System.IO.DriveInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public bool FileExists (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool FileExists(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileExists (file As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FileExists(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.FileExists : string -&gt; bool" Usage="fileSystemProxy.FileExists file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka do pliku.</param>
        <summary>Zwraca <see langword="True" /> Jeśli określony plik już istnieje.</summary>
        <returns>Zwraca <see langword="True" /> Jeśli plik istnieje; w przeciwnym razie ta metoda zwraca <see langword="False" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli aplikacja nie ma wystarczających uprawnień do odczytu określonego pliku `FileExists` metoda zwraca `False`, bez względu na istnienie path; metody nie zgłasza wyjątku.  
  
   
  
## Examples  
 W tym przykładzie sprawdza, czy plik `Check.txt` istnieje i dostarcza informacje w oknie komunikatu.  
  
 [!code-vb[VbRefFile#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku kończy się znakiem kreski ułamkowej odwróconej (\\).</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Wskazówki: manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindInFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję tylko do odczytu ciągów reprezentujących nazwy plików zawierających określony tekst.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType);" />
      <MemberSignature Language="F#" Value="member this.FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.FindInFiles (directory, containsText, ignoreCase, searchType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog, który ma być przeszukiwany.</param>
        <param name="containsText">Wyszukiwany tekst.</param>
        <param name="ignoreCase">
          <see langword="True" /> Jeśli wyszukiwanie ma być uwzględniana wielkość liter; w przeciwnym razie <see langword="False" />. Wartość domyślna to <see langword="True" />.</param>
        <param name="searchType">Określa, czy uwzględnić podfoldery. Wartość domyślna to <see langword="SearchOption.SearchTopLevelOnly" />.</param>
        <summary>Zwraca kolekcję tylko do odczytu ciągów reprezentujących nazwy plików zawierających określony tekst.</summary>
        <returns>Kolekcja tylko do odczytu nazw plików zawierających określony tekst...</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta kolekcja jest zwracany, jeśli nie zostaną znalezione żadne pliki pasujące do wzorca określonego.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.FindInFiles` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Wyszukaj katalog dla plików zawierających określony ciąg znaków|[Przewodnik: Manipulowanie plikami i katalogami w Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 W tym przykładzie wyszukuje w katalogu `C:\TestDir` dla wszystkich plików zawierających ciąg `"sample string"` i wyświetla wyniki w `ListBox1`.  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 Aby móc pracować, projekt musi zawierać `ListBox` o nazwie `ListBox1`.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od <c> \\. \</c>).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Określony katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Określony katalog wskazuje istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Ścieżki określony katalog zawiera dwukropek (:) lub jest w nieprawidłowym formacie.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Wskazówki: manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] fileWildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption, ParamArray fileWildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ fileWildcards);" />
      <MemberSignature Language="F#" Value="member this.FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.FindInFiles (directory, containsText, ignoreCase, searchType, fileWildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="fileWildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">Katalog, który ma być przeszukiwany.</param>
        <param name="containsText">Wyszukiwany tekst.</param>
        <param name="ignoreCase">
          <see langword="True" /> Jeśli wyszukiwanie ma być uwzględniana wielkość liter; w przeciwnym razie <see langword="False" />. Wartość domyślna to <see langword="True" />.</param>
        <param name="searchType">Określa, czy uwzględnić podfoldery. Wartość domyślna to <see langword="SearchOption.SearchTopLevelOnly" />.</param>
        <param name="fileWildcards">Wzorzec do dopasowania.</param>
        <summary>Zwraca kolekcję tylko do odczytu ciągów reprezentujących nazwy plików zawierających określony tekst.</summary>
        <returns>Kolekcja tylko do odczytu nazw plików zawierających określony tekst...</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta kolekcja jest zwracany, jeśli nie zostaną znalezione żadne pliki pasujące do wzorca określonego.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.FindInFiles` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Wyszukaj katalog dla plików zawierających określony ciąg znaków|[Przewodnik: Manipulowanie plikami i katalogami w Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 W tym przykładzie wyszukuje w katalogu `C:\TestDir` dla wszystkich plików zawierających ciąg `"sample string"` i wyświetla wyniki w `ListBox1`.  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 Aby móc pracować, projekt musi zawierać `ListBox` o nazwie `ListBox1`.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od <c> \\. \</c>).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Określony katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Określony katalog wskazuje istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Ścieżki określony katalog zawiera dwukropek (:) lub jest w nieprawidłowym formacie.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Wskazówki: manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję ciągów reprezentujących nazwy ścieżek podkatalogów w katalogu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetDirectories : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetDirectories directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Nazwa i ścieżka katalogu.</param>
        <summary>Zwraca kolekcję ciągów reprezentujących nazwy ścieżek podkatalogów w katalogu.</summary>
        <returns>Kolekcja tylko do odczytu nazw ścieżek podkatalogów w określonym katalogu...</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.GetDirectories` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Lista podkatalogów z określonym wzorcem|[Instrukcje: znajdowanie podkatalogów z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 Poniższy przykład zwraca wszystkie katalogi w strukturze katalogów, które zawierają słowo `Logs` w nazwach i doda je do `ListBox1`.  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 W tym przykładzie wymaga, że masz `ListBox` o nazwie `ListBox1` w formularzu.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Określony katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Określony katalog wskazuje istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="member this.GetDirectories : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetDirectories (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">Nazwa i ścieżka katalogu.</param>
        <param name="searchType">Określa, czy uwzględnić podfoldery. Wartość domyślna to <see langword="SearchOption.SearchTopLevelOnly" />.</param>
        <param name="wildcards">Wzorzec do dopasowania nazwy.</param>
        <summary>Zwraca kolekcję ciągów reprezentujących nazwy ścieżek podkatalogów w katalogu.</summary>
        <returns>Kolekcja tylko do odczytu nazw ścieżek podkatalogów w określonym katalogu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć `wildcards` parametru do określenia określonego wzorca. Jeśli chcesz uwzględnić zawartość podkatalogów w wyszukiwaniu, ustaw `searchType` parametr `SearchAllSubDirectories`.  
  
 Jeśli nie zostaną znalezione żadne katalogi pasujących do wybranego wzorca, zwracany jest pustą kolekcją.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.GetDirectories` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Lista podkatalogów z określonym wzorcem|[Instrukcje: znajdowanie podkatalogów z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 Poniższy przykład zwraca wszystkie katalogi w strukturze katalogów, które zawierają słowo `Logs` w nazwach i doda je do `ListBox1`.  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 W tym przykładzie wymaga, że masz `ListBox` o nazwie `ListBox1` w formularzu.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">Co najmniej jeden określony symboli wieloznacznych jest <see langword="Nothing" />, ciągiem pustym lub zawiera tylko spacje.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Określony katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Określony katalog wskazuje istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryInfo">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo GetDirectoryInfo (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectoryInfo (directory As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DirectoryInfo ^ GetDirectoryInfo(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetDirectoryInfo : string -&gt; System.IO.DirectoryInfo" Usage="fileSystemProxy.GetDirectoryInfo directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">
          <see langword="String" />. Ścieżka katalogu.</param>
        <summary>Zwraca <see cref="T:System.IO.DirectoryInfo" /> obiektu dla określonej ścieżki.</summary>
        <returns>
          <see cref="T:System.IO.DirectoryInfo" /> obiekt dla określonej ścieżki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog nie istnieje, nie wyjątku aż po raz pierwszy właściwości <xref:System.IO.DirectoryInfo> dostępu do obiektu.  
  
   
  
## Examples  
 W tym przykładzie pobiera <xref:System.IO.DirectoryInfo> obiektu katalogu `C:\Documents and Settings` i wyświetla w tym katalogu czas utworzenia, ostatni czas dostępu i ostatni czas zapisu.  
  
 [!code-vb[VbRefFile#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Ścieżka katalogu zawiera dwukropek (:) lub jest w nieprawidłowym formacie.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDriveInfo">
      <MemberSignature Language="C#" Value="public System.IO.DriveInfo GetDriveInfo (string drive);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDriveInfo (drive As String) As DriveInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DriveInfo ^ GetDriveInfo(System::String ^ drive);" />
      <MemberSignature Language="F#" Value="member this.GetDriveInfo : string -&gt; System.IO.DriveInfo" Usage="fileSystemProxy.GetDriveInfo drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DriveInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="drive">Dysk do badania.</param>
        <summary>Zwraca <see cref="T:System.IO.DriveInfo" /> obiektu na określonym dysku.</summary>
        <returns>
          <see cref="T:System.IO.DriveInfo" /> obiekt do określonego dysku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.DriveInfo> Klasy modeli dysku i udostępnia metody i właściwości, aby wyszukać informacje o stacji. Użyj <xref:System.IO.DriveInfo> Aby określić, które dyski są dostępne i jakiego rodzaju dyski są. Możesz także zbadać właściwości do ustalenia pojemności i dostępne wolne miejsce na dysku.  
  
   
  
## Examples  
 W tym przykładzie pobiera <xref:System.IO.DriveInfo> obiektu dla dysku C i używa go w celu wyświetlenia informacji o dysku.  
  
 [!code-vb[VbRefFile#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#11)]  
  
 Aby uzyskać informacji o typach inny dysk, zobacz <xref:System.IO.DriveType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="drive" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.IO.DriveInfo" />
        <altmember cref="T:System.IO.DriveType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public System.IO.FileInfo GetFileInfo (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.FileInfo GetFileInfo(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFileInfo (file As String) As FileInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::FileInfo ^ GetFileInfo(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.GetFileInfo : string -&gt; System.IO.FileInfo" Usage="fileSystemProxy.GetFileInfo file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka do pliku.</param>
        <summary>Zwraca <see cref="T:System.IO.FileInfo" /> obiektu dla określonego pliku.</summary>
        <returns>
          <see cref="T:System.IO.FileInfo" /> obiekt do określonego pliku</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie jest zgłaszany wyjątek, jeśli plik nie istnieje; zamiast go zostanie zgłoszony, gdy właściwości obiektu są dostępne po raz pierwszy.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `My.Computer.FileSystem.GetFileInfo` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Określić nazwę i ścieżkę pliku|[Instrukcje: analizowanie ścieżek plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 W tym przykładzie pobiera <xref:System.IO.FileInfo?displayProperty=nameWithType> obiektu pliku `MyLogFile.log` i używa ich do raportów imię i nazwisko, czas ostatniego dostępu i długość pliku.  
  
 [!code-vb[VbRefFile#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa ścieżki jest nieprawidłowo sformułowany. Na przykład zawiera nieprawidłowe znaki lub jest tylko spacją. Nazwa pliku ma ukośnikiem na końcu.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.NotSupportedException">Ścieżka zawiera dwukropek w środku ciągu.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka jest za długa.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma listy ACL dostępu (listy kontroli dostępu) do pliku.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.IO.FileInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Wskazówki: manipulowanie plikami i katalogami w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję tylko do odczytu ciągów reprezentujących nazwy plików w katalogu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetFiles : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetFiles directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Katalog do przeszukania.</param>
        <summary>Zwraca kolekcję tylko do odczytu ciągów reprezentujących nazwy plików w katalogu.</summary>
        <returns>Kolekcja tylko do odczytu nazw plików z określonego katalogu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta kolekcja jest zwracany, jeśli nie zostaną znalezione żadne pliki pasujące do wzorca określonego.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.GetFiles` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Pobieranie kolekcji plików w katalogu|[Instrukcje: pobieranie kolekcji plików z katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|Znajdowanie plików z określonym wzorcem w katalogu|[Instrukcje: znajdowanie plików z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 Poniższy przykład zwraca wszystkie pliki w katalogu i doda je do `ListBox1`.  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 W tym przykładzie wymaga, że masz `ListBox` o nazwie `ListBox1` w formularzu.  
  
 W tym przykładzie zwraca wszystkie pliki w katalogu z rozszerzeniem `.txt` i doda je do `ListBox1`.  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 W tym przykładzie wymaga, że masz `ListBox` o nazwie `ListBox1` w formularzu.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog do przeszukania nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="directory" /> Wskazuje istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md">Porady: znajdowanie plików z określonym wzorcem w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Porady: pobieranie kolekcji plików z katalogu w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="member this.GetFiles : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetFiles (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">Katalog do przeszukania.</param>
        <param name="searchType">Określa, czy uwzględnić podfoldery. Wartość domyślna to <see langword="SearchOption.SearchTopLevelOnly" />.</param>
        <param name="wildcards">Wzorzec do dopasowania.</param>
        <summary>Zwraca kolekcję tylko do odczytu ciągów reprezentujących nazwy plików w katalogu.</summary>
        <returns>Kolekcja tylko do odczytu nazw plików z określonego katalogu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta kolekcja jest zwracany, jeśli nie zostaną znalezione żadne pliki pasujące do wzorca określonego.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.GetFiles` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Pobieranie kolekcji plików w katalogu|[Instrukcje: pobieranie kolekcji plików z katalogu](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|Znajdowanie plików z określonym wzorcem w katalogu|[Instrukcje: znajdowanie plików z określonym wzorcem](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 Poniższy przykład zwraca wszystkie pliki w katalogu i doda je do `ListBox1`.  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 W tym przykładzie wymaga, że masz `ListBox` o nazwie `ListBox1` w formularzu.  
  
 W tym przykładzie zwraca wszystkie pliki w katalogu z rozszerzeniem `.txt` i doda je do `ListBox1`.  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 W tym przykładzie wymaga, że masz `ListBox` o nazwie `ListBox1` w formularzu.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog do przeszukania nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="directory" /> Wskazuje istniejący plik.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wystarczających uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md">Porady: znajdowanie plików z określonym wzorcem w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">Porady: pobieranie kolekcji plików z katalogu w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public string GetName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; string" Usage="fileSystemProxy.GetName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Wymagane. Ścieżka do przeanalizowania. <see langword="String" />.</param>
        <summary>Analizuje nazwę pliku poza podana ścieżka.</summary>
        <returns>Nazwa pliku z określonej ścieżki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to operacja ciągu; `FileSystem` nie jest sprawdzany pod.  
  
 `GetName` Metoda ignoruje znak kreski ułamkowej występujące na końcu ścieżki.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.GetFileName` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Ścieżka pliku analizy|[Instrukcje: analizowanie ścieżek plików](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 Poniższy przykład analizuje ścieżkę pliku i zwraca nazwę pliku.  
  
 [!code-vb[VbVbcnMyFileSystem#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#21)]  
  
 Zastąp ścieżkę `C:\Testdirectory\Testfile` ze ścieżką chcesz przeanalizować.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="public string GetParentPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetParentPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParentPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetParentPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.GetParentPath : string -&gt; string" Usage="fileSystemProxy.GetParentPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka do badania.</param>
        <summary>Zwraca ścieżkę nadrzędną podana ścieżka.</summary>
        <returns>Ścieżka nadrzędna podana ścieżka.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to operacja ciągu; system plików nie jest sprawdzany pod.  
  
   
  
## Examples  
 W tym przykładzie pobiera ścieżki nadrzędnej `C:\Backups\Tmp\Test`.  
  
 [!code-vb[VbRefFile#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka ma ścieżką nadrzędną, ponieważ jest to ścieżka katalogu głównego.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Porady: analizowanie ścieżek pliku w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="member this.GetTempFileName : unit -&gt; string" Usage="fileSystemProxy.GetTempFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy plik o unikatowej nazwie zero bajtów tymczasowego na dysku i zwraca pełną ścieżkę pliku.</summary>
        <returns>
          <see langword="String" /> zawierającą pełną ścieżkę pliku tymczasowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może służyć do tworzenia pliku tymczasowego.  
  
   
  
## Examples  
 W tym przykładzie tworzy tymczasowego pliku i zwraca jego ścieżki.  
  
 [!code-vb[VbVbcnMyFileSystem#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi katalogu z jednej lokalizacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Ścieżka katalogu, który ma zostać przeniesiona.</param>
        <param name="destinationDirectoryName">Ścieżka katalogu, do której są przenoszone katalogu źródłowego.</param>
        <summary>Przenosi katalogu z jednej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy podejmowana jest próba przeniesienia katalogu w katalogu, który nie istnieje, zostanie utworzona struktura docelowa.  
  
   
  
## Examples  
 W tym przykładzie przenosi `Directory1` wewnątrz `Directory2`.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 W tym przykładzie przenosi `Directory1` wewnątrz `Directory2`, zastępując katalogu, jeśli już istnieje.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> lub <paramref name="destinationDirectoryName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Źródło jest katalogiem głównym lub ścieżki źródłowej i docelowej ścieżki są takie same.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Ścieżka katalogu, który ma zostać przeniesiona.</param>
        <param name="destinationDirectoryName">Ścieżka katalogu, do której są przenoszone katalogu źródłowego.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <summary>Przenosi katalogu z jednej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy podejmowana jest próba przeniesienia katalogu w katalogu, który nie istnieje, zostanie utworzona struktura docelowa.  
  
   
  
## Examples  
 W tym przykładzie przenosi `Directory1` wewnątrz `Directory2`.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 W tym przykładzie przenosi `Directory1` wewnątrz `Directory2`, zastępując katalogu, jeśli już istnieje.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> lub <paramref name="destinationDirectoryName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Katalog docelowy już istnieje i <paramref name="overwrite" /> ustawiono <see langword="False" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * bool -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Ścieżka katalogu, który ma zostać przeniesiona.</param>
        <param name="destinationDirectoryName">Ścieżka katalogu, do której są przenoszone katalogu źródłowego.</param>
        <param name="overwrite">
          <see langword="True" /> Jeśli istniejące katalogi powinny być zastąpione; w przeciwnym razie <see langword="False" />. Wartość domyślna to <see langword="False" />.</param>
        <summary>Przenosi katalogu z jednej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy podejmowana jest próba przeniesienia katalogu w katalogu, który nie istnieje, zostanie utworzona struktura docelowa.  
  
   
  
## Examples  
 W tym przykładzie przenosi `Directory1` wewnątrz `Directory2`.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 W tym przykładzie przenosi `Directory1` wewnątrz `Directory2`, zastępując katalogu, jeśli już istnieje.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> lub <paramref name="destinationDirectoryName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Katalog docelowy już istnieje i <paramref name="overwrite" /> ustawiono <see langword="False" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">Ścieżka katalogu, który ma zostać przeniesiona.</param>
        <param name="destinationDirectoryName">Ścieżka katalogu, do której są przenoszone katalogu źródłowego.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="onUserCancel">Określa, czy wyjątek jest generowany, gdy użytkownik anuluje operację. Wartość domyślna to <see langword="UICancelOption.ThrowException" />.</param>
        <summary>Przenosi katalogu z jednej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy podejmowana jest próba przeniesienia katalogu w katalogu, który nie istnieje, zostanie utworzona struktura docelowa.  
  
   
  
## Examples  
 W tym przykładzie przenosi `Directory1` wewnątrz `Directory2`.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 W tym przykładzie przenosi `Directory1` wewnątrz `Directory2`, zastępując katalogu, jeśli już istnieje.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> lub <paramref name="destinationDirectoryName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="onUserCancel" /> ustawiono <see langword="ThrowException" /> i to podkatalog pliku nie można skopiować.</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="onUserCancel" /> ustawiono <see langword="ThrowException" />, a użytkownik anuluje operację lub nie można ukończyć operacji.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.InvalidOperationException">Operacja jest cykliczna.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Ścieżka pliku, który ma zostać przeniesiona.</param>
        <param name="destinationFileName">Ścieżka katalogu, w którym można przenieść pliku.</param>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli struktura docelowa nie istnieje, zostanie utworzony.  
  
 `MoveFile` Metody zachowuje wpisy kontroli dostępu (wpisy kontroli dostępu) tylko podczas przenoszenia pliku w tym samym woluminie. W tym odziedziczonych wpisy kontroli dostępu, które stają się bezpośrednie ACE po przeniesieniu (bezpośrednie ACE mają wyższy priorytet nad dziedziczone ACE). Jeśli plik jest przenoszony między woluminami, wpisy kontroli dostępu nie zostaną skopiowane.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `My.Computer.FileSystem.MoveFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Przenoszenie pliku|[Instrukcje: przenoszenie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 W tym przykładzie przenosi plik `Test.txt` z `TestDir1` do `TestDir2`.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 W tym przykładzie przenosi plik `Test.txt` z `TestDir1` do `TestDir2` i zmienia ją `Test2.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość dostępu do wszystkich zmiennych środowiskowych. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość dostępu do zmiennych rejestru. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Ścieżka pliku, który ma zostać przeniesiona.</param>
        <param name="destinationFileName">Ścieżka katalogu, w którym można przenieść pliku.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli struktura docelowa nie istnieje, zostanie utworzony.  
  
 `MoveFile` Metody zachowuje wpisy kontroli dostępu (wpisy kontroli dostępu) tylko podczas przenoszenia pliku w tym samym woluminie. W tym odziedziczonych wpisy kontroli dostępu, które stają się bezpośrednie ACE po przeniesieniu (bezpośrednie ACE mają wyższy priorytet nad dziedziczone ACE). Jeśli plik jest przenoszony między woluminami, wpisy kontroli dostępu nie zostaną skopiowane.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `My.Computer.FileSystem.MoveFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Przenoszenie pliku|[Instrukcje: przenoszenie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 W tym przykładzie przenosi plik `Test.txt` z `TestDir1` do `TestDir2`.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 W tym przykładzie przenosi plik `Test.txt` z `TestDir1` do `TestDir2` i zmienia ją `Test2.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość dostępu do wszystkich zmiennych środowiskowych. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość dostępu do zmiennych rejestru. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * bool -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Ścieżka pliku, który ma zostać przeniesiona.</param>
        <param name="destinationFileName">Ścieżka katalogu, w którym można przenieść pliku.</param>
        <param name="overwrite">
          <see langword="True" /> Aby zastąpić istniejące pliki; w przeciwnym razie <see langword="False" />. Wartość domyślna to <see langword="False" />.</param>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli struktura docelowa nie istnieje, zostanie utworzony.  
  
 `MoveFile` Metody zachowuje wpisy kontroli dostępu (wpisy kontroli dostępu) tylko podczas przenoszenia pliku w tym samym woluminie. W tym odziedziczonych wpisy kontroli dostępu, które stają się bezpośrednie ACE po przeniesieniu (bezpośrednie ACE mają wyższy priorytet nad dziedziczone ACE). Jeśli plik jest przenoszony między woluminami, wpisy kontroli dostępu nie zostaną skopiowane.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.MoveFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Przenoszenie pliku|[Instrukcje: przenoszenie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 W tym przykładzie przenosi plik `Test.txt` z `TestDir1` do `TestDir2`.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 W tym przykładzie przenosi plik `Test.txt` z `TestDir1` do `TestDir2` i zmienia ją `Test2.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość dostępu do wszystkich zmiennych środowiskowych. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość dostępu do zmiennych rejestru. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Ścieżka pliku, który ma zostać przeniesiona.</param>
        <param name="destinationFileName">Ścieżka katalogu, w którym można przenieść pliku.</param>
        <param name="showUI">Określa, czy możesz wizualnie śledzić postęp operacji. Wartość domyślna to <see langword="UIOption.OnlyErrorDialogs" />.</param>
        <param name="onUserCancel">Określa, czy wyjątek jest generowany, gdy użytkownik anuluje operację. Wartość domyślna to <see langword="UICancelOption.ThrowException" />.</param>
        <summary>Przenosi plik do nowej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli struktura docelowa nie istnieje, zostanie utworzony.  
  
 `MoveFile` Metody zachowuje wpisy kontroli dostępu (wpisy kontroli dostępu) tylko podczas przenoszenia pliku w tym samym woluminie. W tym odziedziczonych wpisy kontroli dostępu, które stają się bezpośrednie ACE po przeniesieniu (bezpośrednie ACE mają wyższy priorytet nad dziedziczone ACE). Jeśli plik jest przenoszony między woluminami, wpisy kontroli dostępu nie zostaną skopiowane.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `My.Computer.FileSystem.MoveFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Przenoszenie pliku|[Instrukcje: przenoszenie pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 W tym przykładzie przenosi plik `Test.txt` z `TestDir1` do `TestDir2`.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 W tym przykładzie przenosi plik `Test.txt` z `TestDir1` do `TestDir2` i zmienia ją `Test2.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik źródłowy jest nieprawidłowy lub nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="onUserCancel" /> ustawiono <see langword="ThrowException" />oraz użytkownik anulował operację lub nieokreślony błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Kontroluje możliwość dostępu do wszystkich zmiennych środowiskowych. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Kontroluje możliwość dostępu do zmiennych rejestru. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Określa uprawnienia związane z interfejsów użytkownika i Schowka. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFieldParser">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see langword="OpenTextFieldParser" /> Metoda umożliwia tworzenie <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu, który umożliwia łatwe oraz efektywne analizowanie strukturyzowanych plików tekstowych, takie jak dzienniki. <see langword="TextFieldParser" /> Obiekt może służyć do odczytania plików rozdzielanych i stałej szerokości.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Plik można otworzyć za pomocą <see langword="TextFieldParser" />.</param>
        <summary>
          <see langword="OpenTextFieldParser" /> Metoda umożliwia tworzenie <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu, który umożliwia łatwe oraz efektywne analizowanie strukturyzowanych plików tekstowych, takie jak dzienniki. <see langword="TextFieldParser" /> Obiekt może służyć do odczytania plików rozdzielanych i stałej szerokości.</summary>
        <returns>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> można odczytać określonego pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.OpenTextFieldParser` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego z separatorami|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczyt z plików testowych o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczyt z pliku tekstowego w wielu formatach|[Instrukcje: odczyt z plików tekstowych w wielu formatach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 W tym przykładzie otwiera `TextFieldParser.reader` i używa ich do odczytu z `C:\TestFolder1\Test1.txt`.  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Nie można przeanalizować wiersz, w określonym formacie. Komunikat o wyjątku Określa wiersz, powoduje wyjątek, podczas gdy <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> właściwość jest przypisany tekst zawarty w wierszu.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">W tym artykule opisano zestaw uprawnień zabezpieczeń stosowane do kodu. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md">Porady: odczyt z plików testowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">Porady: odczyt z rozdzielonych przecinkami plików testowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">Porady: odczyt z plików tekstowych w wielu formatach w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">Analizowanie plików tekstowych za pomocą obiektu TextFieldParser</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray fieldWidths As Integer()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string * int[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser (file, fieldWidths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">Plik można otworzyć za pomocą <see langword="TextFieldParser" />.</param>
        <param name="fieldWidths">Szerokości pola.</param>
        <summary>
          <see langword="OpenTextFieldParser" /> Metoda umożliwia tworzenie <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu, który umożliwia łatwe oraz efektywne analizowanie strukturyzowanych plików tekstowych, takie jak dzienniki. <see langword="TextFieldParser" /> Obiekt może służyć do odczytania plików rozdzielanych i stałej szerokości.</summary>
        <returns>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> można odczytać określonego pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.OpenTextFieldParser` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego z separatorami|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczyt z plików testowych o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczyt z pliku tekstowego w wielu formatach|[Instrukcje: odczyt z plików tekstowych w wielu formatach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 W tym przykładzie otwiera `TextFieldParser.reader` i używa ich do odczytu z `C:\TestFolder1\Test1.txt`.  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Nie można przeanalizować wiersz, w określonym formacie. Komunikat o wyjątku Określa wiersz, powoduje wyjątek, podczas gdy <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> właściwość jest przypisany tekst zawarty w wierszu.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">W tym artykule opisano zestaw uprawnień zabezpieczeń stosowane do kodu. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md">Porady: odczyt z plików testowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">Porady: odczyt z rozdzielonych przecinkami plików testowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">Porady: odczyt z plików tekstowych w wielu formatach w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">Analizowanie plików tekstowych za pomocą obiektu TextFieldParser</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray delimiters As String()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string * string[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser (file, delimiters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">Plik można otworzyć za pomocą <see langword="TextFieldParser" />.</param>
        <param name="delimiters">Ograniczniki pól.</param>
        <summary>
          <see langword="OpenTextFieldParser" /> Metoda umożliwia tworzenie <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> obiektu, który umożliwia łatwe oraz efektywne analizowanie strukturyzowanych plików tekstowych, takie jak dzienniki. <see langword="TextFieldParser" /> Obiekt może służyć do odczytania plików rozdzielanych i stałej szerokości.</summary>
        <returns>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> można odczytać określonego pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.OpenTextFieldParser` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego z separatorami|[Instrukcje: odczyt z rozdzielonych przecinkami plików testowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|Odczyt z plików testowych o stałej szerokości|[Instrukcje: odczyt z plików testowych o stałej szerokości](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|Odczyt z pliku tekstowego w wielu formatach|[Instrukcje: odczyt z plików tekstowych w wielu formatach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 W tym przykładzie otwiera `TextFieldParser.reader` i używa ich do odczytu z `C:\TestFolder1\Test1.txt`.  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Nie można przeanalizować wiersz, w określonym formacie. Komunikat o wyjątku Określa wiersz, powoduje wyjątek, podczas gdy <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> właściwość jest przypisany tekst zawarty w wierszu.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">W tym artykule opisano zestaw uprawnień zabezpieczeń stosowane do kodu. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md">Porady: odczyt z plików testowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">Porady: odczyt z rozdzielonych przecinkami plików testowych w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">Porady: odczyt z plików tekstowych w wielu formatach w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">Analizowanie plików tekstowych za pomocą obiektu TextFieldParser</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileReader">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Otwiera <see cref="T:System.IO.StreamReader" /> obiektu do odczytu z pliku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileReader (file As String) As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileReader : string -&gt; System.IO.StreamReader" Usage="fileSystemProxy.OpenTextFileReader file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Plik do odczytu.</param>
        <summary>Otwiera <see cref="T:System.IO.StreamReader" /> obiektu do odczytu z pliku.</summary>
        <returns>
          <see cref="T:System.IO.StreamReader" /> obiekt do odczytu z pliku</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko pliki tekstowe, które można odczytać z <xref:System.IO.StreamReader>.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.OpenTextFileReader` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Otwórz plik przy użyciu <xref:System.IO.StreamReader>|[Instrukcje: odczyt tekstu z plików za pomocą StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 W tym przykładzie otwiera plik `Testfile.txt`, odczytuje wiersz z niego i wyświetla wiersz w `MessageBox`.  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku kończy się znakiem kreski ułamkowej odwróconej (\\).</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie można odnaleźć określonego pliku.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do odczytywania z pliku.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">Porady: odczyt tekstu z plików za pomocą StreamReader (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileReader : string * System.Text.Encoding -&gt; System.IO.StreamReader" Usage="fileSystemProxy.OpenTextFileReader (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">Plik do odczytu.</param>
        <param name="encoding">Kodowanie do użycia dla zawartości pliku. Wartością domyślną jest ASCII.</param>
        <summary>Otwiera <see cref="T:System.IO.StreamReader" /> obiektu do odczytu z pliku.</summary>
        <returns>
          <see cref="T:System.IO.StreamReader" /> obiekt do odczytu z pliku</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko pliki tekstowe, które można odczytać z <xref:System.IO.StreamReader>.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.OpenTextFileReader` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Otwórz plik przy użyciu <xref:System.IO.StreamReader>|[Instrukcje: odczyt tekstu z plików za pomocą StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 W tym przykładzie otwiera plik `Testfile.txt`, odczytuje wiersz z niego i wyświetla wiersz w `MessageBox`.  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku kończy się znakiem kreski ułamkowej odwróconej (\\).</exception>
        <exception cref="T:System.IO.FileNotFoundException">Nie można odnaleźć określonego pliku.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do odczytywania z pliku.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">Porady: odczyt tekstu z plików za pomocą StreamReader (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileWriter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Otwiera <see cref="T:System.IO.StreamWriter" /> obiektu do zapisania do określonego pliku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileWriter (file As String, append As Boolean) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileWriter : string * bool -&gt; System.IO.StreamWriter" Usage="fileSystemProxy.OpenTextFileWriter (file, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">Plik ma zostać zapisana.</param>
        <param name="append">
          <see langword="True" /> Aby dołączyć do zawartości pliku. <see langword="False" /> spowoduje zastąpienie zawartości pliku. Wartość domyślna to <see langword="False" />.</param>
        <summary>Otwiera <see cref="T:System.IO.StreamWriter" /> obiektu do zapisania do określonego pliku.</summary>
        <returns>
          <see cref="T:System.IO.StreamWriter" /> obiekt do zapisania do określonego pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter` Metoda otwiera i inicjuje strumienia pliku, a następnie zwraca <xref:System.IO.StreamWriter> obiektu dla tego strumienia. Można zapisać do pary tyle razy, zgodnie z potrzebami i zamknąć go po zakończeniu.  
  
> [!NOTE]
>  Należy wywołać <xref:System.IO.StreamWriter.Close%2A> metody <xref:System.IO.StreamWriter> obiektu, aby upewnić się, że wszystkie dane są prawidłowo zapisywane do źródłowego strumienia.  
  
 Jeśli piszesz tylko kilka ciągów w pliku, może być łatwiejszy w obsłudze <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> metody.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `My.Computer.FileSystem.OpenTextFileWriter` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisywanie tekstu do pliku za pomocą `StreamWriter`|[Instrukcje: zapisywanie tekstu w plikach za pomocą StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 W tym przykładzie otwiera <xref:System.IO.StreamWriter> z `My.Computer.FileSystem.OpenTextFileWriter` metody i używa go zapisać ciąg do pliku tekstowego z `WriteLine` metody `StreamWriter` klasy.  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku kończy się znakiem ukośnika.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileWriter : string * bool * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="fileSystemProxy.OpenTextFileWriter (file, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">Plik ma zostać zapisana.</param>
        <param name="append">
          <see langword="True" /> Aby dołączyć do zawartości w pliku. <see langword="False" /> spowoduje zastąpienie zawartości pliku. Wartość domyślna to <see langword="False" />.</param>
        <param name="encoding">Kodowanie do użycia podczas zapisywania do pliku. Wartością domyślną jest ASCII.</param>
        <summary>Otwiera <see cref="T:System.IO.StreamWriter" /> można zapisać do określonego pliku.</summary>
        <returns>
          <see cref="T:System.IO.StreamWriter" /> obiekt do zapisania do określonego pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `OpenTextFileWriter` Metoda otwiera i inicjuje strumienia pliku, a następnie zwraca <xref:System.IO.StreamWriter> obiektu dla tego strumienia. Można zapisać do pary tyle razy, zgodnie z potrzebami i zamknąć go po zakończeniu.  
  
> [!NOTE]
>  Należy wywołać <xref:System.IO.StreamWriter.Close%2A> metody <xref:System.IO.StreamWriter> obiektu, aby upewnić się, że wszystkie dane są prawidłowo zapisywane do źródłowego strumienia.  
  
 Jeśli piszesz tylko kilka ciągów w pliku, może być łatwiejszy w obsłudze <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> metody.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `My.Computer.FileSystem.OpenTextFileWriter` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisywanie tekstu do pliku za pomocą `StreamWriter`|[Instrukcje: zapisywanie tekstu w plikach za pomocą StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 W tym przykładzie otwiera <xref:System.IO.StreamWriter> z `My.Computer.FileSystem.OpenTextFileWriter` metody i używa go zapisać ciąg do pliku tekstowego z `WriteLine` metody `StreamWriter` klasy.  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa pliku kończy się znakiem ukośnika.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">Porady: zapisywanie tekstu do pliku za pomocą Streamwriter (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public byte[] ReadAllBytes (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance unsigned int8[] ReadAllBytes(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllBytes (file As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ReadAllBytes(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.ReadAllBytes : string -&gt; byte[]" Usage="fileSystemProxy.ReadAllBytes file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Plik do odczytu.</param>
        <summary>Zwraca zawartość pliku w postaci tablicy bajtów.</summary>
        <returns>
          <see langword="Byte" /> Tablica zawierająca zawartość pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllBytes` Metody `My.Computer.FileSystem` obiekt umożliwia odczytywanie pliku binarnego. Zawartość pliku są zwracane w postaci tablicy bajtów.  
  
 Nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku. Na przykład plik Form1.vb może nie być plik źródłowy w języku Visual Basic. Sprawdź wszystkie dane wejściowe, zanim użyjesz danych w aplikacji.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.ReadAllBytes` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku binarnego|[Instrukcje: odczyt z plików binarnych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
  
   
  
## Examples  
 W tym przykładzie odczytuje z pliku `C:/Documents and Settings/selfportrait.jpg.`  
  
 [!code-vb[VbVbcnMyFileSystem#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby zapisać ciąg do bufora.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca zawartość pliku tekstowego jako <see langword="String" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllText (file As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.ReadAllText : string -&gt; string" Usage="fileSystemProxy.ReadAllText file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku do odczytu.</param>
        <summary>Zwraca zawartość pliku tekstowego jako <see langword="String" />.</summary>
        <returns>
          <see langword="String" /> z zawartością pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` Metody `My.Computer.FileSystem` obiektu umożliwia odczytywanie z pliku tekstowego. Zawartość pliku są zwracane jako ciąg.  
  
 Kodowanie pliku może być określona, jeśli zawartość pliku znajdują się w kodowania, takiego jak ASCII lub UTF-8. Podczas odczytu z pliku używającego znaków rozszerzonych, należy określić kodowanie pliku przy użyciu innego przeciążenia metody <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText%2A> metody.  
  
 Nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku. Na przykład plik Form1.vb może nie być plik źródłowy w języku Visual Basic. Sprawdź wszystkie dane wejściowe, zanim użyjesz danych w aplikacji.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.ReadAllText` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego|[Porady: Odczyt z plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 Ten przykład odczytuje zawartość `Test.txt` na ciąg i wyświetla go w oknie komunikatu.  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 Ten przykład odczytuje zawartość pliku ASCII `Test.txt` na ciąg i wyświetla go w oknie komunikatu.  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby zapisać ciąg do bufora.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">Porady: odczyt tekstu z plików za pomocą StreamReader (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files.md">Rozwiązywanie problemów: odczytywanie z oraz zapisywanie w plikach tekstowych</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Wskazówki: manipulowanie plikami i katalogami w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-encodings.md">Kodowanie pliku</related>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.ReadAllText : string * System.Text.Encoding -&gt; string" Usage="fileSystemProxy.ReadAllText (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">Nazwa i ścieżka pliku do odczytu.</param>
        <param name="encoding">Znak kodowanie do użycia podczas odczytu pliku. Domyślna to UTF-8.</param>
        <summary>Zwraca zawartość pliku tekstowego jako <see langword="String" />.</summary>
        <returns>
          <see langword="String" /> z zawartością pliku.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` Metody `My.Computer.FileSystem` obiektu umożliwia odczytywanie z pliku tekstowego. Zawartość pliku są zwracane jako ciąg.  
  
 Kodowanie pliku może być określona, jeśli zawartość pliku znajdują się w kodowania, takiego jak ASCII lub UTF-8. Podczas odczytu z pliku używającego znaków rozszerzonych, należy określić kodowanie pliku.  
  
 Nie należy podejmować decyzji dotyczących zawartości pliku na podstawie rozszerzenia nazwy pliku. Na przykład plik Form1.vb może nie być plik źródłowy w języku Visual Basic. Sprawdź wszystkie dane wejściowe, zanim użyjesz danych w aplikacji.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.ReadAllText` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Odczyt z pliku tekstowego|[Porady: Odczyt z plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 Ten przykład odczytuje zawartość `Test.txt` na ciąg i wyświetla go w oknie komunikatu.  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 Ten przykład odczytuje zawartość pliku ASCII `Test.txt` na ciąg i wyświetla go w oknie komunikatu.  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby zapisać ciąg do bufora.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Odczyt z plików w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">Porady: odczyt tekstu z plików za pomocą StreamReader (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files.md">Rozwiązywanie problemów: odczytywanie z oraz zapisywanie w plikach tekstowych</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">Wskazówki: manipulowanie plikami i katalogami w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-encodings.md">Kodowanie pliku</related>
      </Docs>
    </Member>
    <Member MemberName="RenameDirectory">
      <MemberSignature Language="C#" Value="public void RenameDirectory (string directory, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameDirectory(string directory, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameDirectory (directory As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameDirectory(System::String ^ directory, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.RenameDirectory : string * string -&gt; unit" Usage="fileSystemProxy.RenameDirectory (directory, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">Ścieżka i nazwa katalogu ma mieć zmienioną nazwę.</param>
        <param name="newName">Nowa nazwa katalogu.</param>
        <summary>Zmienia nazwę katalogu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można użyć tej metody można przenieść katalogu; Użyj `MoveDirectory` metodą Przenieś i Zmień nazwę katalogu.  
  
   
  
## Examples  
 Ten przykład zmienia nazwę `Test` do katalogu `SecondTest`.  
  
 [!code-vb[VbVbcnMyFileSystem#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="newName" /> zawiera informacje o ścieżce.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> jest <see langword="Nothing" />.  
  
—lub— 
 <paramref name="newName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Katalog nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Brak istniejący plik lub katalog o nazwie określonej w <paramref name="newName" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">Porady: analizowanie ścieżek pliku w Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="RenameFile">
      <MemberSignature Language="C#" Value="public void RenameFile (string file, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameFile(string file, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameFile (file As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameFile(System::String ^ file, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.RenameFile : string * string -&gt; unit" Usage="fileSystemProxy.RenameFile (file, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">Plik ma mieć zmienioną nazwę.</param>
        <param name="newName">Nowa nazwa pliku.</param>
        <summary>Zmienia nazwę pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można użyć tej metody można przenieść pliku; Użyj <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile%2A> metodą Przenieś i Zmień nazwę pliku.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `My.Computer.FileSystem.RenameFile` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zmienianie nazwy pliku|[Instrukcje: zmienianie nazwy pliku](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
  
   
  
## Examples  
 Ten przykład zmienia nazwę pliku `Test.txt` do `SecondTest.txt`.  
  
 [!code-vb[VbVbcnMyFileSystem#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#1)]  
  
 Zmień "`C:\Test.txt`" ścieżkę i nazwę pliku, który ma zostać zmieniona.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="newName" /> zawiera informacje o ścieżce lub kończy się znakiem kreski ułamkowej odwróconej (\\).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.  
  
—lub— 
 <paramref name="newName" /> jest <see langword="Nothing" /> ani być pustym ciągiem.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Brak istniejący plik lub katalog o nazwie określonej w <paramref name="newName" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Użytkownik nie ma wymaganych uprawnień.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Tworzenie, usuwanie i przenoszenie plików i katalogów w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="SpecialDirectories">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialDirectories As SpecialDirectoriesProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ SpecialDirectories { Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SpecialDirectories : Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który udostępnia właściwości umożliwiające dostęp do często katalogi, do których odwołuje się.</summary>
        <value>Ta właściwość zwraca <see cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" /> obiekt dla komputera.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W tym przykładzie zwraca ścieżkę do katalogu pulpitu użytkownika i wyświetla je.  
  
 [!code-vb[VbVbcnMyFileSystem#80](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#80)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public void WriteAllBytes (string file, byte[] data, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(System.String,System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllBytes (file As String, data As Byte(), append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllBytes(System::String ^ file, cli::array &lt;System::Byte&gt; ^ data, bool append);" />
      <MemberSignature Language="F#" Value="member this.WriteAllBytes : string * byte[] * bool -&gt; unit" Usage="fileSystemProxy.WriteAllBytes (file, data, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">Ścieżka i nazwa pliku do zapisania.</param>
        <param name="data">Dane są zapisywane do pliku.</param>
        <param name="append">
          <see langword="True" /> Aby dołączyć do zawartości pliku; <see langword="False" /> spowoduje zastąpienie zawartości pliku. Wartość domyślna to <see langword="False" />.</param>
        <summary>Zapisuje dane w pliku binarnym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określona ścieżka, nazwa pliku, z wyjątkiem nie jest prawidłowy, <xref:System.IO.DirectoryNotFoundException> zostanie zgłoszony wyjątek. Jeśli ścieżka jest prawidłowa, ale plik nie istnieje, zostanie utworzony plik.  
  
> [!NOTE]
>  `WriteAllBytes` Metoda otwiera plik, zapisuje go, a następnie zamyka go. Kod, który używa `WriteAllBytes` metodą jest prostsze niż kod, który używa <xref:System.IO.BinaryWriter> obiektu. Jednakże, w przypadku dodawania danych do pliku za pomocą pętli, <xref:System.IO.BinaryWriter> obiektu może zapewnić lepszą wydajność, ponieważ masz Otwórz i zamknij plik raz.  
  
 W poniższej tabeli przedstawiono przykład zadań, obejmujących `My.Computer.FileSystem.WriteAllBytes` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapis w pliku binarnym|[Instrukcje: zapisywanie w plikach binarnych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
  
   
  
## Examples  
 W tym przykładzie dołącza tablicy danych `CustomerData` do pliku `CollectedData`.  
  
 [!code-vb[VbVbcnMyFileSystem#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby zapisać ciąg do bufora.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md">Porady: wpisywanie do pliku binarnego w języku Visual Basic</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">Zapisywanie w plikach w Visual Basic</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje tekst do pliku.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllText (file As String, text As String, append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append);" />
      <MemberSignature Language="F#" Value="member this.WriteAllText : string * string * bool -&gt; unit" Usage="fileSystemProxy.WriteAllText (file, text, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">Plik ma zostać zapisana.</param>
        <param name="text">Tekst, który można zapisać do pliku.</param>
        <param name="append">
          <see langword="True" /> Aby dołączyć do zawartości pliku. <see langword="False" /> spowoduje zastąpienie zawartości pliku. Wartość domyślna to <see langword="False" />.</param>
        <summary>Zapisuje tekst do pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kodowanie UTF-8 używany do zapisywania do pliku. Aby określić inne kodowanie, użyj innego przeciążenia <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> metody.  
  
 Jeśli określony plik nie istnieje, zostanie utworzony.  
  
 Jeśli określonego kodowania nie odpowiada istniejącej kodowanie pliku, określonej kodowanie jest ignorowana.  
  
> [!NOTE]
>  `WriteAllText` Metoda otwiera plik, zapisuje go, a następnie zamyka go. Kod, który używa `WriteAllText` metodą jest prostsze niż kod, który używa <xref:System.IO.StreamWriter> obiektu. Jednak jeśli dodajesz ciągów do pliku za pomocą pętli, <xref:System.IO.StreamWriter> obiektu może zapewnić lepszą wydajność, ponieważ wystarczy otworzyć i zamknąć plik jeden raz. Aby uzyskać więcej informacji, zobacz <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> metody.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.WriteAllText` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisywanie tekstu do pliku|[Instrukcje: zapisywanie tekstu w plikach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|Dołączanie tekstu do pliku|[Instrukcje: dołączanie do plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 Ten przykład zapisuje linię `"This is new text to be added."` do pliku `Test.txt`, zastępując wszelki istniejący tekst w pliku.  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 Ten przykład Przepisuje nazwy plików w `Documents and Settings` folder `FileList.txt`, wstawianie karetki zwracają między nimi w celu zwiększenia czytelności.  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby zapisać ciąg do bufora.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">Zapisywanie w plikach w Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.WriteAllText : string * string * bool * System.Text.Encoding -&gt; unit" Usage="fileSystemProxy.WriteAllText (file, text, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">Plik ma zostać zapisana.</param>
        <param name="text">Tekst, który można zapisać do pliku.</param>
        <param name="append">
          <see langword="True" /> Aby dołączyć do zawartości pliku. <see langword="False" /> spowoduje zastąpienie zawartości pliku. Wartość domyślna to <see langword="False" />.</param>
        <param name="encoding">Jakie szyfrowanie do użycia podczas zapisywania do pliku. Domyślna to UTF-8.</param>
        <summary>Zapisuje tekst do pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli określony plik nie istnieje, zostanie utworzony.  
  
 Jeśli określonego kodowania nie odpowiada istniejącej kodowanie pliku, określonej kodowanie jest ignorowana.  
  
> [!NOTE]
>  `WriteAllText` Metoda otwiera plik, zapisuje go, a następnie zamyka go. Kod, który używa `WriteAllText` metodą jest prostsze niż kod, który używa <xref:System.IO.StreamWriter> obiektu. Jednak jeśli dodajesz ciągów do pliku za pomocą pętli, <xref:System.IO.StreamWriter> obiektu może zapewnić lepszą wydajność, ponieważ wystarczy otworzyć i zamknąć plik jeden raz. Aby uzyskać więcej informacji, zobacz <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> metody.  
  
 W poniższej tabeli wymieniono przykłady zadań obejmujących `My.Computer.FileSystem.WriteAllText` metody.  
  
|Zadanie|Zobacz|  
|--------|---------|  
|Zapisywanie tekstu do pliku|[Instrukcje: zapisywanie tekstu w plikach](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|Dołączanie tekstu do pliku|[Instrukcje: dołączanie do plików tekstowych](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 Ten przykład zapisuje linię `"This is new text to be added."` do pliku `Test.txt`, zastępując wszelki istniejący tekst w pliku.  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 Ten przykład Przepisuje nazwy plików w `Documents and Settings` folder `FileList.txt`, wstawianie karetki zwracają między nimi w celu zwiększenia czytelności.  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka nie jest prawidłowa dla jednego z następujących przyczyn: jest to ciąg o zerowej długości; zawiera tylko znak odstępu; zawiera ona nieprawidłowe znaki; lub jest ścieżką do urządzenia (rozpoczyna się od \\ \\.\\); kończy się znakiem ukośnika.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> jest <see langword="Nothing" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Plik nie istnieje.</exception>
        <exception cref="T:System.IO.IOException">Plik jest używany przez inny proces lub wystąpi błąd We/Wy.</exception>
        <exception cref="T:System.IO.PathTooLongException">Ścieżka przekracza maksymalną długość zdefiniowaną przez system.</exception>
        <exception cref="T:System.NotSupportedException">Nazwa pliku lub katalogu w ścieżce zawiera dwukropek (:) lub ma nieprawidłowy format.</exception>
        <exception cref="T:System.OutOfMemoryException">Nie ma wystarczającej ilości pamięci, aby zapisać ciąg do bufora.</exception>
        <exception cref="T:System.Security.SecurityException">Użytkownik nie ma wystarczających uprawnień do wyświetlania ścieżki.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Kontroluje możliwość dostępu do plików i folderów. Powiązane wyliczenie: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Obiekty (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">Zapisywanie w plikach w Visual Basic</related>
      </Docs>
    </Member>
  </Members>
</Type>