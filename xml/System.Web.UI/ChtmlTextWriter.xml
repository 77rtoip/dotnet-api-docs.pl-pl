<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e805d8f6ad91bd3c25b09a87d994da94dd827dea" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39856703" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje szereg znaków specyficznych dla cHTML i tekst w strumieniu wyjściowym formant serwera ASP.NET. <see cref="T:System.Web.UI.ChtmlTextWriter" /> Klasa oferuje możliwości formatowania, które formanty serwera ASP.NET używany podczas renderowania cHTML zawartości do klientów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML lub cHTML, jest podzbiorem HTML w wersji 2.0, HTML 3.2 i język HTML 4.0 i jest przeznaczona do renderowania na urządzeniach z ograniczoną pamięci i mocy procesora CPU, wraz z ekranów małych wyświetlania ograniczone, formatowanie, możliwości i ograniczoną liczbę Opcje wprowadzania (np. telefonu komórkowego Konsola Touch). W związku z tym cHTML nie obsługuje następujących czynności:  
  
-   Obrazy JPEG.  
  
-   Tabele.  
  
-   Mapy obrazu.  
  
-   Wielu znaków czcionek i stylów.  
  
-   Kolory tła i obrazy.  
  
-   Ramki.  
  
-   Arkusze stylów.  
  
 <xref:System.Web.UI.ChtmlTextWriter> Klasa pochodzi od <xref:System.Web.UI.Html32TextWriter> klasy i większość swoje funkcje, które są dostarczane przez <xref:System.Web.UI.Html32TextWriter> i klasa bazowa dla wszystkich modułów zapisywania tekstu znaczników, który jest <xref:System.Web.UI.HtmlTextWriter> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć klasę o nazwie `CustomChtmlTextWriter` , jest tworzony na podstawie <xref:System.Web.UI.ChtmlTextWriter> klasy. Tworzy dwa konstruktory i zastępuje <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodę, aby zapobiec `bgcolor` atrybut stylu z zapisywana w strumieniu wyjściowym <xref:System.Web.UI.ChtmlTextWriter> obiektu. Tworzy również klasę o nazwie `ChtmlCustomPageAdapter` definiuje jedną metodę `CreateCustomChtmlTextWriter`, który tworzy i zwraca wystąpienie `CustomChtmlTextWriter` klasy. `CustomChtmlTextWriter` Następnie renderuje zawartość strony na urządzeniach przy użyciu przeglądarek używających znaczników cHTML cHTML.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Która renderuje zawartość znaczników.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy, która używa <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> stała wcięć.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter> Klasa ma dwa konstruktory standardowe dla wszystkich klas, które pochodzą bezpośrednio lub pośrednio z <xref:System.Web.UI.HtmlTextWriter> klasy.  
  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> Konstruktora, który przyjmuje wystąpienie klasy <xref:System.IO.TextWriter> klasy jako parametru, wywołuje drugi Konstruktor i przekazuje je dwie wartości parametrów:  
  
-   <xref:System.IO.TextWriter>.  
  
-   Wartość ciągu, który jest określony w <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> pola, który definiuje odstęp karty, który jest używany przez składnik zapisywania tekstu XHTML.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć klasę o nazwie `ChtmlCustomPageAdapter` i definiuje jedną metodę `CreateCustomChtmlTextWriter`, który tworzy i zwraca wystąpienie `CustomChtmlTextWriter` klasy. `CustomChtmlTextWriter` Następnie renderuje zawartość strony na urządzeniach przy użyciu przeglądarek używających znaczników cHTML cHTML.  
  
 Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Która renderuje zawartość znaczników.</param>
        <param name="tabString">Liczba miejsc do magazynowania, zdefiniowane w <see cref="P:System.Web.UI.HtmlTextWriter.Indent" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy z wcięciem określonego wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> Konstruktora, który przyjmuje oba wystąpienia <xref:System.IO.TextWriter> klasy i parametry jako parametry wywołań <xref:System.Web.UI.Html32TextWriter> konstruktora, który przyjmuje te same parametry podczas tworzenia wystąpienia <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć klasę niestandardową o nazwie `CustomChtmlTextWriter` , jest tworzony na podstawie <xref:System.Web.UI.ChtmlTextWriter> klasy. Tworzy on dwa konstruktory, które można użyć do utworzenia wystąpienia klasy niestandardowej przy użyciu tego samego wzorca jako wszystkie klasy, które pochodzą bezpośrednio lub pośrednio z <xref:System.Web.UI.HtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element cHTML można dodać atrybutu.</param>
        <param name="attributeName">Ten atrybut można dodać do <c>elementName</c>.</param>
        <summary>Dodaje atrybut do elementu cHTML <see cref="T:System.Web.UI.ChtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> Metoda dodaje atrybut do elementu cHTML. Rozpoznawanym atrybutem są przechowywane w atrybutach rozpoznawanym <xref:System.Collections.Hashtable> zbiór <xref:System.Web.UI.ChtmlTextWriter> obiekt, który odwołuje się do niej <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiekt globalny pominiętych atrybutów, które nie może być renderowana na elementach cHTML.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> globalnie pominiętych cHTML atrybutów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na poniższej liście przedstawiono globalnie pominiętych atrybutów, które są ustawione, gdy nowe wystąpienie klasy <xref:System.Web.UI.ChtmlTextWriter> klasa jest tworzona.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut cHTML do renderowania.</param>
        <param name="value">Wartość przypisana do <c>nazwa</c>.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzone z <c>nazwa</c>.</param>
        <summary>Określa, czy żądanie strony mają być renderowane cHTML określonego atrybutu i jego wartość. Można zastąpić <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> metoda w klasach, które wynikają z <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy, aby odfiltrować atrybutów, które nie chcesz renderować na urządzeniach z tym cHTML pomocy technicznej.</summary>
        <returns>
          <see langword="true" /> można zapisać atrybutu i jego wartość <see cref="T:System.Web.UI.ChtmlTextWriter" /> strumień wyjściowy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metoda zapobiega globalnie pominiętych atrybutów, które są wymienione w <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> właściwości i atrybuty specyficzne dla elementu, pominięte, które są wymienione w <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> właściwość były zapisywane do strumienia wyjściowego. Można zastąpić zachowanie <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metoda w klasach, które są uzyskiwane z <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania niestandardowej klasy, w którym jest zastępowana <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodę, aby zapobiec `bgcolor` atrybut z były zapisywane do strumienia wyjściowego cHTML. Następnie wywołuje funkcje, które są dostarczane przez base <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metody z <xref:System.Web.UI.ChtmlTextWriter> klasy, aby upewnić się, że jej zachowanie domyślne jest używany, zbyt.  
  
 Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybut stylu do renderowania.</param>
        <param name="value">Ciąg zawierający wartość, która jest przypisana do <c>nazwa</c>.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzone z <c>nazwa</c>.</param>
        <summary>Określa, czy atrybut stylu określonego cHTML znaczników i jego wartość może być renderowany do bieżącego elementu znaczników.</summary>
        <returns>
          <see langword="true" /> Jeśli styl możliwą do wyrenderowania; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> Metoda zwraca `false` podczas `key` jest równa <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> pola i wartość jest `"line-through"`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę elementu cHTML do renderowania.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Skojarzone z <c>nazwa</c>.</param>
        <summary>Określa, czy element znaczników cHTML określony jest renderowany do żądania strony.</summary>
        <returns>
          <see langword="true" /> Jeśli element znaczników określonego cHTML możliwą do wyrenderowania; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli cHTML element jest `span` elementu <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> metoda zwraca `false`. Dla wszystkich innych tagów zwraca `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiektu rozpoznawanym atrybutów, które może być renderowana na elementach cHTML.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> rozpoznawanym cHTML atrybutów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> metody w celu dodania rozpoznawanym atrybuty do zbioru rozpoznawanych atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element cHTML, aby usunąć atrybut z.</param>
        <param name="attributeName">Ten atrybut można usunąć z <c>elementName</c>.</param>
        <summary>Usuwa atrybut elementu cHTML <see cref="T:System.Web.UI.ChtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> Metoda usuwa atrybut z elementu cHTML. Rozpoznawanym atrybutem zostanie usunięty z rozpoznanym atrybuty <xref:System.Collections.Hashtable> zbiór <xref:System.Web.UI.ChtmlTextWriter> obiekt, który odwołuje się do niej <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiektu określonego przez użytkownika pominięte atrybuty, które nie są renderowane w przypadku elementów cHTML.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> pominiętych cHTML atrybutów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> metodę, aby dodać atrybuty do kolekcji atrybutów pominięte.  
  
 Poniższa lista zawiera atrybuty domyślne pomijane, które są ustawiane dla `div` elementu w przypadku nowe wystąpienie klasy <xref:System.Web.UI.ChtmlTextWriter> klasa jest tworzona.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 Poniższa lista zawiera atrybuty domyślne pomijane, które są ustawiane dla `span` elementu w przypadku nowe wystąpienie klasy <xref:System.Web.UI.ChtmlTextWriter> klasa jest tworzona.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje <see langword="br" /> elementu cHTML strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> metodę, aby wstawić linię podziału na strumień cHMTL.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy przykład kodu demonstruje sposób tworzenia klasy cHTML i właściwości niestandardowych. Drugi przykład kodu demonstruje sposób używania niestandardowej klasy na stronie sieci Web.  
  
 Aby użyć niestandardowej `ChtmlSimplelabelAdapter` karty, Dodaj następujący kod w celu odpowiedniego pliku komputera w podkatalogu w przeglądarce katalog konfiguracji .NET Framework lub do pliku Przeglądarka niestandardowa katalog App_Browsers, w sieci Web katalog główny aplikacji.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 Poniższy przykład kodu demonstruje sposób tworzenia karty cHTML klasę o nazwie `ChtmlSimpleLabelAdapter` dla klasy o nazwie `SimpleLabel`. Tworzy niestandardowy `Control` właściwość, która umożliwia `ChtmlSimpleLabelAdapter` klasy w celu uzyskania dostępu do składowych aspektów `SimpleLabel` klasy, a następnie przesłonięcia <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> metody. W przesłonięciu zachodzą następujące elementy:  
  
-   Tworzy ona odwołanie do <xref:System.Web.UI.ChtmlTextWriter> obiektu o nazwie `w`, który pochodzi od <xref:System.Web.UI.HtmlTextWriter> obiektu, który jest przekazywany jako `writer` parametr <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> metody.  
  
-   Tworzy ciąg i ustawienie jej równa `SimpleLabel.Text` wartość.  
  
-   Wywołuje <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody do stosowania style, które są definiowane przez <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> właściwość etykiety cHTML strumienia wyjściowego.  
  
-   Zapisuje `Text` wartości właściwości do strumienia i zamyka bloku stylu, wywołując <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
-   Wywołuje <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> metody do renderowania `br` elementu w strumieniu wyjściowym, po renderowania tekstu i stylów.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 Poniższy przykład pokazuje sposób użycia `SimpleLabel` klasy na stronie sieci Web.  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg tekstowy do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <summary>Koduje określony tekst dla urządzenia wysyłającego żądanie, a następnie zapisuje je do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli parametr tekst przekazany do <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> metodą jest `null` lub ma długość równą zero, a następnie nic nie jest zapisywane.  
  
 Użyj <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> metody, gdy ciąg zawiera nawiasy (\< lub >) lub handlowe "i" (&) i chcesz upewnić się, że są one renderowane prawidłowo na urządzenia wysyłającego żądanie.  
  
 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> Metoda korzysta z klasy bazowej <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>