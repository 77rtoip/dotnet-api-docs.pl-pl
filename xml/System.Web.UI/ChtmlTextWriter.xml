<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d627964148a0e406dbc08a5e4203dd9cd8fc7b71" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30694379" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje serii znaki specyficzne dla cHTML i tekst w strumieniu wyjściowym formant serwera programu ASP.NET. <see cref="T:System.Web.UI.ChtmlTextWriter" /> Klasa udostępnia możliwości formatowania kontrolek serwera ASP.NET używany do renderowania zawartości cHTML do klientów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML lub cHTML, jest podzbiorem HTML 2.0, HTML 3.2 i język HTML 4.0 i jest przeznaczona do renderowania na urządzeniach z ograniczoną pamięci i wydajności Procesora, wraz z ekrany małych wyświetlania ograniczone formatowania możliwości i pewna liczba wejściowych opcji (takie jak telefon komórkowy dotykowej). W związku z tym cHTML nie obsługuje następujących czynności:  
  
-   Obrazy JPEG.  
  
-   Tabele.  
  
-   Mapy obrazu.  
  
-   Wiele znaków czcionki i style.  
  
-   Kolory tła i obrazów.  
  
-   Ramki.  
  
-   Arkusze stylów.  
  
 <xref:System.Web.UI.ChtmlTextWriter> Pochodną klasy <xref:System.Web.UI.Html32TextWriter> klasy i wielu jej funkcji, które są dostarczane przez <xref:System.Web.UI.Html32TextWriter> i klasa podstawowa dla wszystkich modułów zapisywania tekstu znaczników, który jest <xref:System.Web.UI.HtmlTextWriter> klasy.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób tworzenia klasy o nazwie `CustomChtmlTextWriter` która jest pochodną <xref:System.Web.UI.ChtmlTextWriter> klasy. Tworzy dwa konstruktory i zastępuje <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodę, aby zapobiec `bgcolor` atrybut stylu z zapisywana w strumieniu wyjściowym <xref:System.Web.UI.ChtmlTextWriter> obiektu. Tworzy również klasę o nazwie `ChtmlCustomPageAdapter` definiuje jedną metodę `CreateCustomChtmlTextWriter`, która tworzy i zwraca wystąpienie klasy `CustomChtmlTextWriter` klasy. `CustomChtmlTextWriter` Następnie renderuje zawartość strony na urządzeniach z przeglądarki, które używały znaczników cHTML cHTML.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Która renderuje zawartość znacznika.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy, która używa <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> stała wcięcia wierszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter> Klasa ma dwa konstruktory standardowe dla wszystkich klas, które pochodzą od atrybutu bezpośrednio lub pośrednio <xref:System.Web.UI.HtmlTextWriter> klasy.  
  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> Konstruktora, który przyjmuje wystąpienia <xref:System.IO.TextWriter> klasy jako parametru, wywołuje drugi Konstruktor i przekazuje je dwóch wartości parametrów:  
  
-   <xref:System.IO.TextWriter>.  
  
-   Wartość ciągu, która została określona w <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> pola, które definiuje odstęp kartę, który jest używany przez składnik zapisywania tekstu XHTML.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób tworzenia klasy o nazwie `ChtmlCustomPageAdapter` i definiuje jedną metodę `CreateCustomChtmlTextWriter`, która tworzy i zwraca wystąpienie klasy `CustomChtmlTextWriter` klasy. `CustomChtmlTextWriter` Następnie renderuje zawartość cHTML dla stron na urządzeniach z przeglądarki, które używały cHTML znaczników.  
  
 Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Która renderuje zawartość znacznika.</param>
        <param name="tabString">Liczba odstępów zdefiniowane w <see cref="P:System.Web.UI.HtmlTextWriter.Indent" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy z wcięcie określonego wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> Konstruktora, który przyjmuje oba wystąpienia <xref:System.IO.TextWriter> klasy i ciąg jako parametrów, wywołania <xref:System.Web.UI.Html32TextWriter> konstruktora, który przyjmuje takie same parametry podczas tworzenia wystąpienia <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób tworzenia niestandardowej klasy o nazwie `CustomChtmlTextWriter` która jest pochodną <xref:System.Web.UI.ChtmlTextWriter> klasy. Tworzy dwa konstruktory, których można utworzyć wystąpienia klasy niestandardowej o takim wzorcu jako wszystkie klasy, które pochodzi bezpośrednio lub pośrednio, <xref:System.Web.UI.HtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element cHTML można dodać atrybutu.</param>
        <param name="attributeName">Ten atrybut można dodać do <c>elementName</c>.</param>
        <summary>Dodaje atrybut do elementu cHTML <see cref="T:System.Web.UI.ChtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> Metoda dodaje atrybut do elementu cHTML. Rozpoznawanym atrybutem są przechowywane w rozpoznawanym atrybuty <xref:System.Collections.Hashtable> Kolekcja <xref:System.Web.UI.ChtmlTextWriter> obiekt, który odwołuje się do niego <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiekt globalny pominięty atrybutów, których nie można wyrenderować w elementach cHTML.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> cHTML globalnie pomijane, atrybutów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniższa lista zawiera atrybuty globalnie pominięty, które są ustawiane podczas nowe wystąpienie klasy <xref:System.Web.UI.ChtmlTextWriter> utworzyć klasy.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut cHTML do renderowania.</param>
        <param name="value">Wartość przypisana do <c>nazwa</c>.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzone z <c>nazwa</c>.</param>
        <summary>Określa, czy atrybut określony cHTML i jego wartość jest renderowany do żądania strony. Można zastąpić <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> metody w klasach pochodzących od <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy filtrowanie atrybutów, które nie ma być renderowany na urządzeniach tego cHTML pomocy technicznej.</summary>
        <returns>
          <see langword="true" /> można zapisać atrybutu i jego wartość do <see cref="T:System.Web.UI.ChtmlTextWriter" /> strumienia wyjściowego; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metody uniemożliwia globalnie pominięty atrybutów, które są wymienione w <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> właściwości i atrybutów specyficzne dla elementu, pominięty, które są wymienione w <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> właściwości z zapisywane do strumienia wyjściowego. Można zastąpić zachowania <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metody w klasach pochodzących z <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia klasy niestandardowej zastępujący <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodę, aby zapobiec `bgcolor` atrybut z zapisywane do strumienia wyjściowego cHTML. Następnie wywołuje funkcjonalności zapewnianej przez podstawę <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metody <xref:System.Web.UI.ChtmlTextWriter> klasy, aby upewnić się, że jego domyślne zachowanie jest używana, zbyt.  
  
 Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu style do renderowania.</param>
        <param name="value">Ciąg zawierający wartość, która jest przypisana do <c>nazwa</c>.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzone z <c>nazwa</c>.</param>
        <summary>Określa, czy atrybut styl znaczników określonego cHTML i jej wartość może być renderowana do bieżącego elementu znaczników.</summary>
        <returns>
          <see langword="true" /> Jeśli ma być renderowany styl; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> Metoda zwraca `false` podczas `key` jest równa <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> pola i wartość jest `"line-through"`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę elementu cHTML do renderowania.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Skojarzone z <c>nazwa</c>.</param>
        <summary>Określa, czy element znaczników cHTML określony jest renderowany do żądania strony.</summary>
        <returns>
          <see langword="true" /> Jeśli ma być renderowany element znaczników określonego cHTML; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli cHTML element jest `span` elementu <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> metoda zwraca `false`. Dla wszystkich innych tagów, zwraca `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiekt rozpoznany atrybutów, które mogą być odwzorowane na cHTML elementów.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> cHTML rozpoznanym atrybutów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> metody w celu dodania rozpoznanym atrybuty do kolekcji atrybutów rozpoznany.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Aby usunąć atrybut z elementu cHTML.</param>
        <param name="attributeName">Ten atrybut można usunąć z <c>elementName</c>.</param>
        <summary>Usuwa atrybut elementu cHTML <see cref="T:System.Web.UI.ChtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> Metoda usuwa cHTML element atrybutu. Rozpoznawanym atrybutem zostanie usunięty z rozpoznanym atrybuty <xref:System.Collections.Hashtable> Kolekcja <xref:System.Web.UI.ChtmlTextWriter> obiekt, który odwołuje się do niego <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> atrybuty, które nie są renderowane w elementach cHTML pomijane obiektu określonego przez użytkownika.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> cHTML pomijane, atrybutów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> metodę, aby dodać do kolekcji atrybutów pomijane, atrybutów.  
  
 Poniższa lista zawiera atrybuty domyślne pomijane, które są ustawione dla `div` elementu, gdy nowe wystąpienie klasy <xref:System.Web.UI.ChtmlTextWriter> utworzyć klasy.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 Poniższa lista zawiera atrybuty domyślne pomijane, które są ustawione dla `span` elementu, gdy nowe wystąpienie klasy <xref:System.Web.UI.ChtmlTextWriter> utworzyć klasy.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje <see langword="br" /> elementu cHTML output strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> do wstawienia wiersza Podziel na strumieniu cHMTL.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. W pierwszym przykładzie kodu pokazano, jak utworzyć klasę cHTML i właściwości niestandardowe. W drugim przykładzie kodu pokazano, jak używać klas niestandardowych na stronie sieci Web.  
  
 Aby użyć niestandardowej `ChtmlSimplelabelAdapter` karty, Dodaj poniższy kod do każdego odpowiedniego pliku komputera w podkatalogu dla przeglądarki katalogu konfiguracji .NET Framework lub do pliku przeglądarki niestandardowe w katalogu App_Browsers w sieci Web katalog główny aplikacji.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 Poniższy przykładowy kod przedstawia sposób tworzenia karty cHTML klasę o nazwie `ChtmlSimpleLabelAdapter` dla klasy o nazwie `SimpleLabel`. Tworzy niestandardowy `Control` właściwość, która umożliwia `ChtmlSimpleLabelAdapter` klasę, aby uzyskać dostęp do elementów członkowskich aspektów `SimpleLabel` klasy, a następnie zastąpienia <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> metody. W override są wykonywane następujące czynności:  
  
-   Tworzy odwołanie do <xref:System.Web.UI.ChtmlTextWriter> obiektu o nazwie `w`, która jest pochodną <xref:System.Web.UI.HtmlTextWriter> obiekt, który jest przekazywany jako `writer` parametr <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> — metoda.  
  
-   Tworzy ciąg i ustawienie jej równa `SimpleLabel.Text` wartość.  
  
-   Wywołuje <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodę, aby stosować style, które są zdefiniowane przez <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> właściwość etykiety w celu cHTML output strumienia.  
  
-   Zapisuje `Text` wartości właściwości do strumienia i zamyka bloku stylu, wywołując <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
-   Wywołuje <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> metody do renderowania `br` element do strumienia wyjściowego po renderowania tekstu i style.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 W poniższym przykładzie pokazano sposób użycia `SimpleLabel` klasy na stronie sieci Web.  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg tekstowy do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <summary>Koduje tekst określony dla urządzenia wysyłającego żądanie, a następnie zapisuje do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli parametr tekst przekazany <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> metoda jest `null` lub ma długość równą zero, a następnie nic nie zostanie zapisany.  
  
 Użyj <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> metody, jeśli ciąg zawiera nawiasy (\< lub >) lub handlowego "i" (&) i chcesz upewnić się, że ich renderowaniem poprawnie urządzenia wysyłającego żądanie.  
  
 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> — Metoda korzysta z klasy podstawowej <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>