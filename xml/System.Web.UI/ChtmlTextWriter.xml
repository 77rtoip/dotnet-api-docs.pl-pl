<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="104d2049917965e51df31d302ef405c67a321e2f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69398999" /></Metadata><TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje serię znaków cHTML i tekstu w strumieniu wyjściowym kontrolki serwera ASP.NET. Klasa <see cref="T:System.Web.UI.ChtmlTextWriter" /> oferuje funkcje formatowania, które są używane przez formanty serwera ASP.NET podczas renderowania zawartości cHTML na klientach.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML, lub cHTML, jest podzbiorem języków HTML 2,0, HTML 3,2 oraz HTML 4,0 i jest przeznaczony do renderowania na urządzeniach z ograniczoną ilością pamięci i mocy OBLICZENIOWej, a także małych ekranów ekranowych, ograniczonych możliwości formatowania i ograniczonej liczby opcji wprowadzania (takich jak telefon komórkowy Podkładka dotykowa). W związku z tym cHTML nie obsługuje następujących funkcji:  
  
-   Obrazy JPEG.  
  
-   Tabelę.  
  
-   Mapy obrazu.  
  
-   Wiele czcionek znaków i stylów.  
  
-   Kolory i obrazy tła.  
  
-   Liczb.  
  
-   Arkusze stylów.  
  
 Klasa pochodzi <xref:System.Web.UI.Html32TextWriter> z klasy i wiele jej funkcji jest dostarczanych przez i Klasa bazowa dla <xref:System.Web.UI.HtmlTextWriter> wszystkich autorów tekstu znaczników, który jest klasą. <xref:System.Web.UI.Html32TextWriter> <xref:System.Web.UI.ChtmlTextWriter>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak utworzyć klasę o nazwie `CustomChtmlTextWriter` , która pochodzi <xref:System.Web.UI.ChtmlTextWriter> od klasy. Tworzy dwa konstruktory i przesłania <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodę, aby `bgcolor` zapobiec zapisaniu atrybutu stylu w strumieniu <xref:System.Web.UI.ChtmlTextWriter> wyjściowym obiektu. Tworzy również klasę o nazwie `ChtmlCustomPageAdapter` , która definiuje jedną metodę, `CreateCustomChtmlTextWriter`która tworzy i `CustomChtmlTextWriter` zwraca wystąpienie klasy. `CustomChtmlTextWriter` Następnie renderuje zawartość cHTML dla strony na urządzeniach z przeglądarkami korzystającymi z znaczników cHTML.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Renderuje zawartość znaczników.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy, która <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> używa stałej do wcięcia wierszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa ma dwa konstruktory, które są standardowe dla wszystkich klas, które są wyprowadzane bezpośrednio lub <xref:System.Web.UI.HtmlTextWriter> pośrednio z klasy. <xref:System.Web.UI.ChtmlTextWriter>  
  
 Konstruktor, który pobiera wystąpienie <xref:System.IO.TextWriter> klasy jako parametr, wywołuje drugiego konstruktora i przekazuje jego dwie wartości parametrów: <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A>  
  
-   <xref:System.IO.TextWriter>.  
  
-   Wartość ciągu, która jest określona w <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> polu, która definiuje odstępy tabulacji używane przez moduł zapisujący tekstu XHTML.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób tworzenia klasy o nazwie `ChtmlCustomPageAdapter` i definiuje jedną metodę, `CreateCustomChtmlTextWriter`która tworzy i `CustomChtmlTextWriter` zwraca wystąpienie klasy. `CustomChtmlTextWriter` Następnie renderuje zawartość cHTML dla stron na urządzeniach z przeglądarkami korzystającymi z znaczników cHTML.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Renderuje zawartość znaczników.</param>
        <param name="tabString">Liczba spacji zdefiniowanych w <see cref="P:System.Web.UI.HtmlTextWriter.Indent" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.ChtmlTextWriter" /> klasy z określonym wcięciem wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor, który pobiera zarówno wystąpienie <xref:System.IO.TextWriter> klasy, <xref:System.Web.UI.Html32TextWriter> jak i ciąg jako parametry, wywołuje konstruktora, który przyjmuje te same <xref:System.Web.UI.ChtmlTextWriter> parametry podczas tworzenia wystąpienia klasy. <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób tworzenia klasy niestandardowej o nazwie `CustomChtmlTextWriter` , która jest pochodną <xref:System.Web.UI.ChtmlTextWriter> klasy. Tworzy dwa konstruktory, których można użyć do utworzenia wystąpienia klasy niestandardowej z tym samym wzorcem, co wszystkie klasy pochodne, bezpośrednio lub pośrednio, z <xref:System.Web.UI.HtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element cHTML, do którego ma zostać dodany atrybut.</param>
        <param name="attributeName">Atrybut, który ma zostać <paramref name="elementName" />dodany do.</param>
        <summary>Dodaje atrybut do elementu <see cref="T:System.Web.UI.ChtmlTextWriter" /> cHTML obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> Metoda dodaje atrybut do elementu cHTML. Rozpoznany atrybut jest przechowywany w rozpoznawanej kolekcji <xref:System.Collections.Hashtable> <xref:System.Web.UI.ChtmlTextWriter> atrybutów obiektu <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> , do którego odwołuje się właściwość.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Hashtable" /> Pobiera obiekt globalnie pominiętych atrybutów, które nie mogą być renderowane na elementach cHTML.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> globalnie pominiętych atrybutów cHTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniższa lista pokazuje globalne, pominięte atrybuty, które są ustawiane podczas tworzenia nowego wystąpienia <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut cHTML do renderowania.</param>
        <param name="value">Wartość przypisana do <paramref name="name" />.</param>
        <param name="key">Skojarzona z <paramref name="name" />. <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /></param>
        <summary>Określa, czy określony atrybut cHTML i jego wartość są renderowane na stronie żądającej. Można zastąpić <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> metodę w klasach pochodzących <see cref="T:System.Web.UI.ChtmlTextWriter" /> od klasy, aby odfiltrować atrybuty, które nie mają być renderowane na urządzeniach, które obsługują cHTML.</summary>
        <returns><see langword="true" />Aby zapisać atrybut i jego wartość w <see cref="T:System.Web.UI.ChtmlTextWriter" /> strumieniu wyjściowym; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> Metoda zapobiega występowaniu atrybutów globalnych, które są wymienione <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> we właściwości i specyficzne dla elementu, pominięte atrybuty, <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> które są wyświetlane we właściwości w strumieniu wyjściowym. Można zastąpić zachowanie <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metody w klasach, które są pochodną <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia niestandardowej klasy, która zastępuje <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodę, aby `bgcolor` zapobiec zapisywaniu atrybutu do strumienia wyjściowego cHTML. Następnie wywołuje funkcję, która jest dostarczana przez metodę podstawową <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> <xref:System.Web.UI.ChtmlTextWriter> z klasy, aby upewnić się, że jest to zachowanie domyślne.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu stylu do renderowania.</param>
        <param name="value">Ciąg zawierający wartość, która jest przypisana do <paramref name="name" />.</param>
        <param name="key">Skojarzona z <paramref name="name" />. <see cref="T:System.Web.UI.HtmlTextWriterStyle" /></param>
        <summary>Określa, czy określony atrybut stylu znacznika cHTML i jego wartość mogą być renderowane do bieżącego elementu znaczników.</summary>
        <returns><see langword="true" />Jeśli styl może być renderowany; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `key` `"line-through"` Metodazwraca<xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> wartość, gdy jest równa wartości pola, a wartość to. `false` <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę elementu cHTML do renderowania.</param>
        <param name="key">Skojarzona z <paramref name="name" />. <see cref="T:System.Web.UI.HtmlTextWriterTag" /></param>
        <summary>Określa, czy określony element znaczników cHTML jest renderowany na stronie żądającej.</summary>
        <returns><see langword="true" />Jeśli określony element znaczników cHTML może być renderowany; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli element cHTML jest `span` elementem <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> , metoda zwraca `false`. Dla wszystkich innych tagów zwraca `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Hashtable" /> Pobiera obiekt rozpoznanych atrybutów, które mogą być renderowane na elementach cHTML.</summary>
        <value><see cref="T:System.Collections.Hashtable" /> Z rozpoznanych atrybutów cHTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> , aby dodać rozpoznane atrybuty do kolekcji rozpoznanych atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element cHTML, z którego ma zostać usunięty atrybut.</param>
        <param name="attributeName">Atrybut, z <paramref name="elementName" />którego ma zostać usunięty.</param>
        <summary>Usuwa atrybut elementu <see cref="T:System.Web.UI.ChtmlTextWriter" /> cHTML obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> Metoda usuwa atrybut z elementu cHTML. Rozpoznany atrybut jest usuwany z rozpoznanej kolekcji <xref:System.Collections.Hashtable> <xref:System.Web.UI.ChtmlTextWriter> atrybutów obiektu <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> , do którego odwołuje się właściwość.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Hashtable" /> Pobiera obiekt pominiętych atrybutów określonych przez użytkownika, które nie są renderowane na elementach cHTML.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> z pominiętych atrybutów cHTML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> , aby dodać atrybuty do kolekcji pominiętych atrybutów.  
  
 Poniższa lista zawiera domyślne pominięte atrybuty, które są ustawiane dla `div` elementu podczas tworzenia nowego wystąpienia <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 Poniższa lista zawiera domyślne pominięte atrybuty, które są ustawiane dla `span` elementu podczas tworzenia nowego wystąpienia <xref:System.Web.UI.ChtmlTextWriter> klasy.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="br" /> Zapisuje element w strumieniu wyjściowym cHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> , aby wstawić podział wiersza do strumienia cHTML.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy przykład kodu demonstruje sposób tworzenia klasy cHTML i właściwości niestandardowych. Drugi przykład kodu demonstruje, jak używać niestandardowej klasy na stronie sieci Web.  
  
 Aby użyć karty niestandardowej `ChtmlSimplelabelAdapter` , należy dodać następujący kod do odpowiedniego pliku całego komputera w podkatalogu dla przeglądarki w katalogu konfiguracji .NET Framework lub do niestandardowego pliku przeglądarki w katalogu App_Browsers w sieci Web. Katalog główny aplikacji.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 Poniższy przykład kodu demonstruje sposób tworzenia klasy adaptera cHTML o nazwie `ChtmlSimpleLabelAdapter` dla klasy o nazwie. `SimpleLabel` Tworzy właściwość niestandardową `Control` , która `ChtmlSimpleLabelAdapter` umożliwia klasy `SimpleLabel` dostęp do elementów członkowskich klasy, a następnie przesłania <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> metodę. W przesłonięciu zachodzą następujące kwestie:  
  
-   <xref:System.Web.UI.ChtmlTextWriter> Tworzy odwołanie do obiektu o nazwie <xref:System.Web.UI.HtmlTextWriter> `w`, który pochodzi od obiektu, <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> który jest przesyłany jako `writer` parametr dla metody.  
  
-   Tworzy ciąg i ustawia jego `SimpleLabel.Text` wartość równą wartości.  
  
-   Wywołuje <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodę w celu zastosowania stylów, które są zdefiniowane <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> przez właściwość etykiety do strumienia wyjściowego cHTML.  
  
-   Zapisuje `Text` wartość właściwości do strumienia i zamyka blok stylu przez <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> wywołanie metody.  
  
-   Wywołuje <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> metodę w celu `br` renderowania elementu do strumienia wyjściowego po wyrenderowaniu tekstu i stylów.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 Poniższy przykład ilustruje sposób użycia `SimpleLabel` klasy na stronie sieci Web.  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg tekstowy do kodowania i zapisu w strumieniu wyjściowym.</param>
        <summary>Koduje określony tekst dla urządzenia wysyłającego żądanie, a następnie zapisuje go w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli parametr tekstowy przesłany do <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> metody jest `null` lub ma długość zero, nic nie jest zapisywane.  
  
 Użyj metody <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> , jeśli ciąg zawiera nawiasy kątowe\< (lub >) lub znak handlowego "(&) i chcesz się upewnić, że są one poprawnie renderowane na żądającym urządzeniu.  
  
 Metoda używa <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metody klasy bazowej. <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>
