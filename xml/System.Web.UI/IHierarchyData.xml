<Type Name="IHierarchyData" FullName="System.Web.UI.IHierarchyData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9619ec45295a214940207aebaba5a0a0ad513335" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36576851" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IHierarchyData" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHierarchyData" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.IHierarchyData" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHierarchyData" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHierarchyData" />
  <TypeSignature Language="F#" Value="type IHierarchyData = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Opisuje węzeł struktury hierarchicznej danych, w tym obiektu węzła i niektóre właściwości, które opisują właściwości węzła. Obiekty, które implementują <see cref="T:System.Web.UI.IHierarchyData" /> interfejsu mogą być zawarte w <see cref="T:System.Web.UI.IHierarchicalEnumerable" /> kolekcji i są używane przez nawigacji w witrynie platformy ASP.NET oraz danych kontroli źródła.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData> Interfejs jest implementowany przez klasy, które reprezentują węzłów strukturę hierarchiczną i śledzić hierarchicznych relacji do jego węzłów nadrzędnych i podrzędnych. Klasy, które implementują <xref:System.Web.UI.IHierarchyData> interfejsu mogą być zawarte w kolekcjach, które implementują <xref:System.Web.UI.IHierarchicalEnumerable> interfejsu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.Web.UI.IHierarchyData> interfejsu z klasy, która opakowuje <xref:System.IO.FileSystemInfo> obiektu. <xref:System.IO.FileSystemInfo> Klasy jest dobrym przykładem węzła hierarchiczne dane, które <xref:System.Web.UI.IHierarchyData> reprezentuje interfejs dla kontrolki źródła danych hierarchiczna programu ASP.NET. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.HierarchicalDataSourceControl> klasy.  
  
 [!code-csharp[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/CS/filesystemdatasource.cs#5)]
 [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/VB/filesystemdatasource.vb#5)]  
  
 Poniższy przykład kodu pokazuje sposób do rekursywnie iterację <xref:System.Web.UI.IHierarchicalEnumerable> kolekcji, Wyodrębnij <xref:System.Web.UI.IHierarchyData> elementu z modułu wyliczającego przy użyciu <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> metody i wykonywać podstawowe zadania z elementu danych.  
  
 [!code-aspx-csharp[System.Web.UI.IHierarchyData_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/CS/ihd_1.aspx#1)]
 [!code-aspx-vb[System.Web.UI.IHierarchyData_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/VB/ihd_1.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IHierarchicalEnumerable" />
    <altmember cref="T:System.Web.SiteMapNode" />
  </Docs>
  <Members>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Web.UI.IHierarchicalEnumerable GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.IHierarchicalEnumerable GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IHierarchyData.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As IHierarchicalEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::IHierarchicalEnumerable ^ GetChildren();" />
      <MemberSignature Language="F#" Value="abstract member GetChildren : unit -&gt; System.Web.UI.IHierarchicalEnumerable" Usage="iHierarchyData.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IHierarchicalEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera obiekt wyliczenia, który reprezentuje wszystkie węzły podrzędne bieżącego węzła hierarchicznej.</summary>
        <returns>
          <see cref="T:System.Web.UI.IHierarchicalEnumerable" /> Kolekcji węzły podrzędne bieżącego węzła hierarchicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Web.UI.IHierarchyData.HasChildren%2A> umożliwia określenie, czy <xref:System.Web.UI.IHierarchyData> węzeł ma podrzędnych węzłów.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób sprawdzania <xref:System.Web.UI.IHierarchyData.HasChildren%2A> właściwość, aby określić, czy bieżący węzeł danymi hierarchicznymi węzłów podrzędnych i pobrać je przy użyciu <xref:System.Web.UI.IHierarchyData.GetChildren%2A> metody. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.IHierarchyData> interfejsu.  
  
 [!code-csharp[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/CS/ihd_1.aspx.cs#2)]
 [!code-vb[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/VB/ihd_1.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IHierarchyData.HasChildren" />
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public System.Web.UI.IHierarchyData GetParent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.IHierarchyData GetParent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IHierarchyData.GetParent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParent () As IHierarchyData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::IHierarchyData ^ GetParent();" />
      <MemberSignature Language="F#" Value="abstract member GetParent : unit -&gt; System.Web.UI.IHierarchyData" Usage="iHierarchyData.GetParent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IHierarchyData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.IHierarchyData" /> obiekt, który reprezentuje węzła nadrzędnego bieżącego węzła hierarchicznej.</summary>
        <returns>
          <see cref="T:System.Web.UI.IHierarchyData" /> Obiekt, który reprezentuje węzła nadrzędnego bieżącego węzła hierarchicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData> Interfejs definiuje właściwości wygody HasParent, więc wywołań należy sprawdzić wartość zwrotną z <xref:System.Web.UI.IHierarchyData.GetParent%2A> metodę `null` ustalenie, czy bieżący <xref:System.Web.UI.IHierarchyData> węzeł jest węzłem głównym hierarchiczna danych Struktura, do której należy dany węzeł.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.Web.UI.IHierarchyData.GetParent%2A> metodę w klasie, który implementuje <xref:System.Web.UI.IHierarchyData> interfejsu. `FileSystemHierarchyData` Klasy zawija <xref:System.IO.FileSystemInfo> obiektu, a <xref:System.Web.UI.IHierarchyData.GetParent%2A> implementacji metody sprawdza typ <xref:System.IO.FileSystemInfo> obiektu i zwraca obiekt nadrzędny odpowiednie na podstawie typu. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.IHierarchyData> interfejsu i <xref:System.Web.UI.HierarchicalDataSourceControl> klasy.  
  
 [!code-csharp[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/CS/filesystemdatasource.cs#10)]
 [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/VB/filesystemdatasource.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IHierarchyData.GetChildren" />
        <altmember cref="P:System.Web.UI.IHierarchyData.HasChildren" />
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.IHierarchyData.HasChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChildren : bool" Usage="System.Web.UI.IHierarchyData.HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy węzeł danymi hierarchicznymi który <see cref="T:System.Web.UI.IHierarchyData" /> reprezentuje obiekt ma węzły podrzędne.</summary>
        <value>
          <see langword="true" /> Jeśli bieżący węzeł ma podrzędnych węzłów; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData.HasChildren%2A> Właściwość jest właściwością wygody, która umożliwia wywołań w celu uniknięcia zwracanych wartości <xref:System.Web.UI.IHierarchyData.GetChildren%2A> metodę `null`. Jeśli <xref:System.Web.UI.IHierarchyData.HasChildren%2A> zwraca `true`, wywołaj <xref:System.Web.UI.IHierarchyData.GetChildren%2A> metoda pobierania <xref:System.Web.UI.IHierarchicalEnumerable> kolekcja węzłów podrzędnych.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, jak formantu powiązanego z danymi hierarchiczna ASP.NET używa <xref:System.Web.UI.IHierarchyData> obiektu w to metoda rekursywna powiązania danych. Elementy w <xref:System.Web.UI.IHierarchicalEnumerable> kolekcji są wyliczeniowego, a dla każdego <xref:System.Web.UI.IHierarchyData> pobrać obiektu przy użyciu <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> metody. Na koniec <xref:System.Web.UI.IHierarchyData.HasChildren%2A> właściwości jest sprawdzany w celu określenia, czy przejście. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.WebControls.HierarchicalDataBoundControl> klasy.  
  
 [!code-csharp[Samples.AspNet.GeneologyTree#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.GeneologyTree/CS/geneologytree.cs#5)]
 [!code-vb[Samples.AspNet.GeneologyTree#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.GeneologyTree/VB/geneologytree.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IHierarchyData.GetChildren" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.IHierarchyData.Item" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Item { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Item : obj" Usage="System.Web.UI.IHierarchyData.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera węzeł hierarchiczne dane, które <see cref="T:System.Web.UI.IHierarchyData" /> reprezentuje obiekt.</summary>
        <value>
          <see cref="T:System.Object" /> Hierarchiczne dane obiektu węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wiele klas reprezentujących danymi hierarchicznymi węzłów, takiego jak podczas <xref:System.Web.SiteMapNode> klasy, implementować <xref:System.Web.UI.IHierarchyData> interfejsu bezpośrednio, innych klas tylko działania jako otoki dla klasy, który nie implementuje interfejsu. <xref:System.Web.UI.IHierarchyData.Item%2A> Właściwości znajduje się w takich sytuacjach projektu w przypadku obiektów biznesowych funkcjonalnym odpowiednikiem <xref:System.Web.UI.IHierarchyData> obiekt, ale nie można łatwo przeprojektowany.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób uzyskiwania dostępu do <xref:System.Web.UI.IHierarchyData> właściwości, sprawdź typ <xref:System.Web.UI.IHierarchyData> przy użyciu <xref:System.Web.UI.IHierarchyData.Type%2A> właściwości i rzutowanie obiektu w celu wykonania kolejnych operacjach określonego typu. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.IHierarchyData> interfejsu.  
  
 [!code-csharp[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/CS/ihd_1.aspx.cs#2)]
 [!code-vb[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/VB/ihd_1.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IHierarchyData.Type" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.IHierarchyData.Path" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Path : string" Usage="System.Web.UI.IHierarchyData.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ścieżkę hierarchiczną węzła.</summary>
        <value>A <see cref="T:System.String" /> , które identyfikują hierarchicznej ścieżką względną wobec bieżącego węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData.Path%2A> Właściwości mogą zostać przekazane do <xref:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView%2A> metoda pobierania <xref:System.Web.UI.HierarchicalDataSourceView> obiekt będący węzłem identyfikowane przez <xref:System.Web.UI.IHierarchyData.Path%2A>.  
  
> [!CAUTION]
>  <xref:System.Web.UI.IHierarchyData.Path%2A> Właściwości nie powinna zawierać żadnych poufnych informacji o środowisku hosta, ponieważ może być renderowana na kliencie w formantu powiązanego z danymi.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wdrożyć <xref:System.Web.UI.IHierarchyData.Path%2A> właściwości w klasie, który implementuje <xref:System.Web.UI.IHierarchyData> interfejsu. `FileSystemHierarchyData` Klasy zawija <xref:System.IO.FileSystemInfo> obiektu, a <xref:System.Web.UI.IHierarchyData.Path%2A> właściwości implementacja zwraca jego ścieżki systemu plików. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.IHierarchyData> interfejsu i <xref:System.Web.UI.HierarchicalDataSourceControl> klasy.  
  
 [!code-csharp[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/CS/filesystemdatasource.cs#7)]
 [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/VB/filesystemdatasource.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.SiteMapNode.Url" />
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public string Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Type" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.IHierarchyData.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Type { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : string" Usage="System.Web.UI.IHierarchyData.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę typu <see cref="T:System.Object" /> zawartych w <see cref="P:System.Web.UI.IHierarchyData.Item" /> właściwości.</summary>
        <value>Nazwa typu obiektu, który <see cref="T:System.Web.UI.IHierarchyData" /> reprezentuje obiekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData.Type%2A> Właściwości nie zwraca <xref:System.Type?displayProperty=nameWithType> obiektu reprezentowanego w <xref:System.Web.UI.IHierarchyData> obiektu. Zwraca nazwę używaną przez formanty powiązane z danymi w celu rozróżnienia elementów w hierarchii, które mają różne właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób zapisania podstawowego <xref:System.Web.UI.IHierarchyData> właściwości <xref:System.Web.HttpResponse> strumienia, a następnie sprawdź typ <xref:System.Web.UI.IHierarchyData> przy użyciu <xref:System.Web.UI.IHierarchyData.Type%2A> właściwości i rzutowanie obiektu w celu wykonania kolejnych operacjach określonego typu. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.IHierarchyData> interfejsu.  
  
 [!code-csharp[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/CS/ihd_1.aspx.cs#2)]
 [!code-vb[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/VB/ihd_1.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IHierarchyData.Item" />
      </Docs>
    </Member>
  </Members>
</Type>