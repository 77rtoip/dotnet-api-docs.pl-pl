<Type Name="ScriptManager" FullName="System.Web.UI.ScriptManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9923660b999d64c484a67da8c88091d677e8639" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34317747" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ScriptManager : System.Web.UI.Control, System.Web.UI.IPostBackDataHandler, System.Web.UI.IPostBackEventHandler, System.Web.UI.IScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ScriptManager extends System.Web.UI.Control implements class System.Web.UI.IPostBackDataHandler, class System.Web.UI.IPostBackEventHandler, class System.Web.UI.IScriptManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptManager&#xA;Inherits Control&#xA;Implements IPostBackDataHandler, IPostBackEventHandler, IScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptManager : System::Web::UI::Control, System::Web::UI::IPostBackDataHandler, System::Web::UI::IPostBackEventHandler, System::Web::UI::IScriptManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IScriptManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Scripts")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(EmbeddedResourceFinder), "System.Web.Resources.ScriptManager.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zarządza ASP.NET Ajax, biblioteki skryptów i plików skryptów, częściowego renderowania strony i generowania klasy klienta serwera proxy sieci Web i aplikacji usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym temacie:  
  
-   [Wprowadzenie](#introduction)  
  
-   [Częściowego renderowania strony](#partial_page_rendering)  
  
-   [Używanie formantu ScriptManager strony wzorcowe, kontrolek użytkownika i inne składniki podrzędne](#using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components)  
  
-   [Skrypt zarządzania i rejestracji](#script_management_and_registration)  
  
-   [Odwołania do usług sieci Web](#web_service_references)  
  
-   [Lokalizacja](#localization)  
  
-   [Obsługa błędów](#error_handling)  
  
-   [Składni deklaratywnej](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Wprowadzenie  
 <xref:System.Web.UI.ScriptManager> Kontroli jest podstawą funkcjonalności interfejsu Ajax w programie ASP.NET. Formant zarządza wszystkie zasoby ASP.NET Ajax, na stronie. Obejmuje to pobieranie skryptów Microsoft Ajax biblioteki do przeglądarki i koordynująca aktualizacje stron częściowych, które są włączone, za pomocą <xref:System.Web.UI.UpdatePanel> kontrolki. Ponadto <xref:System.Web.UI.ScriptManager> kontroli umożliwia wykonaj następujące czynności:  
  
-   Skrypt rejestru, który jest zgodny z aktualizacje stron częściowych. Aby zarządzać zależności między skrypt i podstawowej biblioteki, dowolny skrypt, który należy zarejestrować został załadowany po skryptów Microsoft Ajax biblioteki.  
  
-   Określ, czy czy zwykłe pliki binarne debugowania skryptów są wysyłane do przeglądarki.  
  
-   Zapewnianie dostępu do metody usługi sieci Web ze skryptu, rejestrując usług sieci Web z <xref:System.Web.UI.ScriptManager> formantu.  
  
-   Zapewniają dostęp do uwierzytelniania, ról i profilu ASP.NET usług aplikacji ze skryptu klienta przez zarejestrowanie tych usług z <xref:System.Web.UI.ScriptManager> formantu.  
  
-   Włącz wyświetlanie specyficzne dla kultury ECMAScript (JavaScript) oraz funkcje w przeglądarce.  
  
-   Dostęp do lokalizacji zasobów dla plików osadzonych skryptów lub dla plików autonomicznych skryptu przy użyciu <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> właściwość <xref:System.Web.UI.ScriptReference> formantu.  
  
-   Zarejestruj elementy sterujące serwera, które implementują <xref:System.Web.UI.IExtenderControl> lub <xref:System.Web.UI.IScriptControl> interfejsy z <xref:System.Web.UI.ScriptManager> , aby skrypt wymagany przez składniki klienta i zachowań jest renderowany.  
  
<a name="partial_page_rendering"></a>   
## <a name="partial-page-rendering"></a>Częściowe renderowanie strony  
 Możliwość obsługi stron częściowych renderowania strony ASP.NET zależy od następujących czynników:  
  
-   <xref:System.Web.UI.ScriptManager> Formantu <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> właściwość musi być `true` (wartość domyślna).  
  
-   Musi istnieć co najmniej jedna <xref:System.Web.UI.UpdatePanel> formantu na stronie.  
  
-   <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> Właściwość musi być `true` (wartość domyślna). Jeśli <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> właściwość nie jest jawnie ustawiona, jego wartość jest oparta na funkcji przeglądarki.  
  
 Można zastąpić wartość <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> właściwości w czasie wykonywania w trakcie lub przed strony <xref:System.Web.UI.Control.Init> zdarzeń. Jeśli spróbujesz zmienić tej właściwości po stronie <xref:System.Web.UI.Control.Init> wystąpiło zdarzenie <xref:System.InvalidOperationException> wyjątku.  
  
 Podczas renderowania stron częściowych jest obsługiwane, <xref:System.Web.UI.ScriptManager> skrypt, aby włączyć aktualizacje stron częściowych i asynchroniczne ogłaszanie zwrotne renderuje formantu. Regiony strony aktualizacji są oznaczane za pomocą <xref:System.Web.UI.UpdatePanel> kontrolki. <xref:System.Web.UI.ScriptManager> Formantu obsługuje asynchroniczne ogłaszanie zwrotne i odświeża tylko regiony strony, które mają zostać zaktualizowane. Aby uzyskać więcej informacji na temat częściowego renderowania strony, zobacz [omówienie renderowania stron częściowych](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49). Aby uzyskać więcej informacji o warunkach, które powodują aktualizację, zobacz [informacje o formancie UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a).  
  
<a name="using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components"></a>   
## <a name="using-the-scriptmanager-control-with-master-pages-user-controls-and-other-child-components"></a>Używanie formantu ScriptManager w stronach wzorcowych, formantach użytkownika i innych składnikach podrzędnych  
 Strona może zawierać tylko jeden <xref:System.Web.UI.ScriptManager> kontrolki w jego hierarchii. Aby zarejestrować usług i skrypty dla zagnieżdżonej stron, kontrolek użytkownika lub składniki, gdy strona nadrzędna jest już <xref:System.Web.UI.ScriptManager> kontrolować, użyj <xref:System.Web.UI.ScriptManagerProxy> formantu. Aby uzyskać więcej informacji, zobacz [za pomocą formantu UpdatePanel strony wzorcowe](http://msdn.microsoft.com/library/b1c974d5-a6b2-4bb3-a3cc-61dd9dc0e1d6)  
  
<a name="script_management_and_registration"></a>   
## <a name="script-management-and-registration"></a>Zarządzanie skryptem i rejestracja  
 <xref:System.Web.UI.ScriptManager> Kontroli umożliwia zarejestrować skrypt, który następnie jest renderowane jako część strony. <xref:System.Web.UI.ScriptManager> Metody rejestracji formantu można można podzielić na następujące trzy kategorie:  
  
-   Metody rejestracji, które gwarantują utrzymania skryptu zależności w bibliotece Microsoft Ajax.  
  
-   Metody rejestracji, które nie są zależne od biblioteki Microsoft Ajax, ale która jest zgodna z <xref:System.Web.UI.UpdatePanel> formantów.  
  
-   Metody rejestracji obsługują Praca z <xref:System.Web.UI.UpdatePanel> formantów.  
  
 Aby uzyskać więcej informacji o sposobie tworzenia i używania skryptów Ajax w programie ASP.NET, zobacz [Tworzenie niestandardowych skrypt po stronie klienta za pomocą biblioteki Microsoft Ajax](http://msdn.microsoft.com/library/285e3a65-b42e-42c5-952d-baf184057899).  
  
### <a name="registering-script-that-is-dependent-on-the-microsoft-ajax-library"></a>Rejestrowanie skryptu, który jest zależny od biblioteki Microsoft Ajax  
 Następujące metody służy do rejestrowania plików skryptów w sposób zapewniający utrzymanie wszelkie zależności biblioteki Microsoft Ajax.  
  
|Metoda|Definicja|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A>|Rejestruje formantu serwera, który implementuje <xref:System.Web.UI.IScriptControl> interfejs, który służy do definiowania obiektu klienta. <xref:System.Web.UI.ScriptManager> Kontroli renderuje skrypt, który obsługuje obiekty klienta.|  
|<xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A>|Rejestruje formantu serwera, który implementuje <xref:System.Web.UI.IExtenderControl> interfejs, który służy do definiowania obiektu klienta. <xref:System.Web.UI.ScriptManager> Kontroli renderuje skrypt, który obsługuje obiekty klienta.|  
  
### <a name="registering-partial-page-update-compatible-scripts"></a>Rejestrowanie skryptów zgodnych z aktualizacją strony częściowej  
 Można użyć następujących metod można zarejestrować plików skryptów, które nie są zależne od biblioteki Microsoft Ajax, ale są zgodne z <xref:System.Web.UI.UpdatePanel> formantów. Te metody odpowiadają podobne metody <xref:System.Web.UI.ClientScriptManager> formantu. W przypadku renderowania skryptu do użycia w <xref:System.Web.UI.UpdatePanel> sterowania, upewnij się, że można wywołać metody <xref:System.Web.UI.ScriptManager> formantu.  
  
|Metoda|Definicja|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A>|Dodaje wartość do tablicy JavaScript. Jeśli tablica nie istnieje, jest tworzony.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A>|Renderuje `script` elementu po otwarciu strony `<form>` tagu. Skrypt jest określony jako parametr typu string.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A>|Renderuje `script` elementu po otwarciu strony `<form>` tagu. Zawartość skryptu jest określany przez ustawienie `src` atrybutu do adresu URL, który wskazuje plik skryptu.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A>|Renderuje `script` elementu po otwarciu strony `<form>` tagu. Zawartość skryptu został określony z nazwą zasobu w zestawie. `src` Atrybut jest wypełniane automatycznie przy użyciu adresu URL przez wywołanie do programu obsługi HTTP pobierający skryptu o nazwie z zestawu.|  
|<xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>|Renderuje parę atrybutów niestandardowych nazw i wartości (expando) w znaczniku dla określonego formantu.|  
|<xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A>|Renderuje ukryte pole.|  
|<xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>|Rejestruje skrypt, który jest wykonywany w odpowiedzi na `form` elementu `submit` zdarzeń. `onSubmit` Atrybut odwołuje się do określonego skryptu.|  
|<xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>|Renderuje blok skryptu uruchamiania tuż przed zamknięciem strony `</form>` tagu. Skrypt do renderowania jest określony jako parametr typu string.|  
  
 Po zarejestrowaniu metod można określić parę klucz/typu dla tego skryptu. Jeśli skrypt o tej samej pary klucz/typu jest już zarejestrowany, nowy skrypt nie jest zarejestrowany. Podobnie jeśli zarejestrujesz skryptu przy użyciu pary nazwa typu/Zasób już istnieje, `script` element, który odwołuje się do zasobu nie zostanie dodany ponownie. Podczas rejestrowania atrybutu expando wcześniej zarejestrowanego atrybutu jest zgłaszany wyjątek. Zduplikowane rejestracji wartości tablicy jest dozwolone.  
  
 Podczas wywoływania <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> lub <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> metody uniknąć rejestrowanie skrypt, który wykonuje funkcji śródwierszowych. Zamiast tego należy zarejestrować skrypt, który zawiera definicje funkcji, takich jak programy obsługi zdarzeń lub definicji klasy niestandardowej aplikacji.  
  
### <a name="registration-methods-for-updatepanel-controls"></a>Metody rejestracji formantów UpdatePanel  
 Można dostosować aktualizacje stron częściowych, korzystając z następujących metod <xref:System.Web.UI.UpdatePanel> kontrolki.  
  
|Metoda|Definicja|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>|Rejestruje formant jako wyzwalacz dla asynchronicznego ogłaszania zwrotnego.|  
|<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A>|Wysyła dane niestandardowych formantów podczas renderowania stron częściowych.|  
|<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>|Rejestruje skryptu metodę dispose dla formantu, który znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> formantu. Skrypt zostanie wykonany po <xref:System.Web.UI.UpdatePanel> sterowania zostało zaktualizowane lub usunięte. Metoda dispose jest używana dla składników klienta, które są częścią biblioteki Microsoft Ajax i mają można zwolnić zasobów, gdy składnik jest już używany.|  
|<xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A>|Rejestruje formant jako wyzwalacz pełne ogłaszania zwrotnego. Ta metoda jest używana dla formantów wewnątrz <xref:System.Web.UI.UpdatePanel> kontroli, które mogłyby w przeciwnym razie Przeprowadź asynchronicznego ogłaszania zwrotnego.|  
  
<a name="web_service_references"></a>   
## <a name="web-service-references"></a>Odwołania do usługi sieci Web  
 Można zarejestrować usługi sieci Web ma być wywoływana ze skryptu klienta przez utworzenie <xref:System.Web.UI.ServiceReference> obiektu i dodać go do <xref:System.Web.UI.ScriptManager.Services%2A> Kolekcja <xref:System.Web.UI.ScriptManager> formantu. Program ASP.NET generuje obiekt serwera proxy klienta dla każdej <xref:System.Web.UI.ServiceReference> obiektu w <xref:System.Web.UI.ScriptManager.Services%2A> kolekcji. Można dodać programistycznie <xref:System.Web.UI.ServiceReference> obiekty do <xref:System.Web.UI.ScriptManager.Services%2A> kolekcji można zarejestrować usługi sieci Web w czasie wykonywania.  
  
 Aby uzyskać więcej informacji na temat dostępu do usług sieci Web w skrypcie, zobacz [udostępnianie usług sieci Web, aby skrypt po stronie klienta ASP.NET AJAX](http://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8) i [wywoływania usługi sieci Web ze skryptu klienta w technologii ASP.NET AJAX](http://msdn.microsoft.com/library/fc06c224-f01a-45be-94af-bd71afbc07b0).  
  
<a name="localization"></a>   
## <a name="localization"></a>Lokalizacja  
 <xref:System.Web.UI.ScriptManager> Kontroli generuje odwołania na renderowanej stronie wskazujące odpowiedni zlokalizowanych plików skryptu po stronie, będące plikami skryptu, albo osadzone w zestawach lub plików autonomicznych skryptów.  
  
 Gdy <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> właściwość jest ustawiona na `true`, <xref:System.Web.UI.ScriptManager> kontroli pobiera zlokalizowanych zasobów (na przykład zlokalizowanych ciągów) dla bieżącej kultury, jeśli istnieją. <xref:System.Web.UI.ScriptManager> Kontrola zapewnia następujące funkcje obsługi przy użyciu zlokalizowanych zasobów:  
  
-   **Pliki, które są osadzone w zestawie skryptów**. <xref:System.Web.UI.ScriptManager> Kontroli określa, który plik skryptu specyficzne dla kultury lub kultury powrotu do wysłania do przeglądarki. Robi to przy użyciu określonej kultury <xref:System.Resources.NeutralResourcesLanguageAttribute> atrybutu zestawu, zasobów wchodzących w skład zestawu i kultury interfejsu użytkownika przeglądarki (jeśli istnieje).  
  
-   **Pliki skryptów autonomicznej**. <xref:System.Web.UI.ScriptManager> Kontroli definiuje listę kultur interfejsu użytkownika, które są obsługiwane przy użyciu <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> właściwość <xref:System.Web.UI.ScriptReference> obiektu.  
  
-   **W trybie debugowania**. <xref:System.Web.UI.ScriptManager> Kontroli próbuje renderowania plik skryptu specyficzne dla kultury, który zawiera informacje o debugowaniu. Na przykład, jeśli strona jest w trybie debugowania, bieżącej kultury ma ustawioną wartość en MX formantu renderuje plik skryptu, który ma nazwę `scriptname`.en-MX.debug.js, jeśli plik istnieje. Jeśli plik nie istnieje, jest renderowany pliku debugowania dla odpowiednich kultury rezerwowej  
  
 Aby uzyskać więcej informacji o sposobie lokalizowanie zasobów, zobacz [lokalizowanie zasobów dla bibliotek składniku](http://msdn.microsoft.com/library/e6b15435-57c1-4dd1-9bd3-5d4c509685bb).  
  
<a name="error_handling"></a>   
## <a name="error-handling"></a>Obsługa błędów  
 Po wystąpieniu błędu strony podczas asynchronicznego ogłaszania zwrotnego, <xref:System.Web.UI.ScriptManager.AsyncPostBackError> zdarzenia. Zależy od sposobu, w którym błędy na serwerze zostaną wysłane do klienta <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> właściwość <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> właściwości i sekcję błędy niestandardowe w pliku Web.config. Aby uzyskać więcej informacji, zobacz [Dostosowywanie obsługi błędu dla formantów UpdatePanel](http://msdn.microsoft.com/library/e15e7ffb-e4b2-4a89-b99e-16624a5861d0).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Składnia deklaracyjna  
  
```  
<asp:ScriptManager  
    AllowCustomErrorsRedirect="True|False"  
    AsyncPostBackErrorMessage="string"  
    AsyncPostBackTimeout="integer"  
    AuthenticationService-Path="uri"  
    EnablePageMethods="True|False"  
    EnablePartialRendering="True|False"  
    EnableScriptGlobalization="True|False"  
    EnableScriptLocalization="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    LoadScriptsBeforeUI="True|False"  
    OnAsyncPostBackError="AsyncPostBackError event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnResolveScriptReference="ResolveScriptReference event handler"  
    OnUnload="Unload event handler"  
    ProfileService-LoadProperties="string"  
    ProfileService-Path="uri"  
    RoleService-LoadRoles="True|False"  
    RoleService-Path="uri"  
    runat="server"  
    ScriptMode="Auto|Inherit|Debug|Release"  
    ScriptPath="string"  
    SkinID="string"  
    SupportsPartialRendering="True|False"  
    Visible="True|False"  
>  
        <AuthenticationService  
            Path="uri"  
        />  
        <ProfileService  
            LoadProperties="string"  
            Path="uri"  
        />  
        <RoleService  
            LoadRoles="True|False"  
            Path="uri"  
        />  
        <Scripts>  
            <asp:ScriptReference  
                Assembly="string"  
                IgnoreScriptPath="True|False"  
                Name="string"  
                NotifyScriptLoaded="True|False"  
                Path="string"  
                ResourceUICultures="string"  
                ScriptMode="Auto|Debug|Inherit|Release"  
            />  
        </Scripts>  
        <Services>  
            <asp:ServiceReference  
                InlineScript="True|False"  
                Path="string"  
            />  
        </Services>  
</asp:ScriptManager>  
```  
  
   
  
## Examples  
 W poniższych przykładach pokazano różne scenariusze korzystania z <xref:System.Web.UI.ScriptManager> formantu.  
  
 **Włączanie aktualizacje stron częściowych**  
  
 Poniższy przykład przedstawia użycie <xref:System.Web.UI.ScriptManager> formantu, aby włączyć aktualizacje stron częściowych. W tym przykładzie <xref:System.Web.UI.WebControls.Calendar> i <xref:System.Web.UI.WebControls.DropDownList> kontroli znajdują się wewnątrz <xref:System.Web.UI.UpdatePanel> formantu. Domyślnie wartość <xref:System.Web.UI.UpdatePanel.UpdateMode%2A> właściwość jest <xref:System.Web.UI.UpdatePanelUpdateMode.Always>i wartość <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> jest właściwość `true`. W związku z tym formantów podrzędnych panelu spowodować asynchronicznego ogłaszania zwrotnego.  
  
 [!code-aspx-csharp[System.Web.UI.UpdatePanel#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/CS/UpdatePanelExample1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.UpdatePanel#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/VB/UpdatePanelExample1VB.aspx#1)]  
  
 **Obsługa błędów stron częściowych aktualizacji i rejestrowanie skryptu**  
  
 Poniższy przykład pokazuje, jak zapewnienie obsługi podczas aktualizacje stron częściowych błędów niestandardowych. Domyślnie po wystąpieniu błędu podczas aktualizacje stron częściowych, wyświetlane jest okno komunikatu JavaScript. W tym przykładzie przedstawiono sposób użycia niestandardową obsługę, zapewniając obsługę błędów <xref:System.Web.UI.ScriptManager.AsyncPostBackError> zdarzenia i ustawiając <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> właściwości w obsłudze zdarzeń. Można również ustawić <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> właściwości w celu określenia sposobu sekcji błędy niestandardowe w pliku Web.config jest używany po wystąpieniu błędu podczas aktualizacje stron częściowych. W tym przykładzie wartość domyślną <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> właściwość jest używana. Oznacza to, że jeśli plik Web.config zawiera element, ten element określa sposób wyświetlania błędów. Aby uzyskać więcej informacji, zobacz [customErrors (schemat ustawień programu ASP.NET) elementu](http://msdn.microsoft.com/library/288c32e2-df1f-4548-abda-de6b4cb989a6).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/VB/default.aspx#1)]  
  
 **Globalizacja Data i godzina są wyświetlane w przeglądarce**  
  
 Poniższy przykład przedstawia sposób ustawiania <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> właściwości, że skrypt po stronie klienta można wyświetlić specyficzne dla kultury datę i godzinę w przeglądarce. W tym przykładzie `Culture` ustawiono atrybut dyrektywy `auto`. W związku z tym pierwszy język, który określono w bieżące ustawienia przeglądarki określa kulturę i kultury interfejsu użytkownika dla strony. Aby uzyskać więcej informacji, zobacz [porady: ustawienie kultury i kultury interfejsu użytkownika dla globalizacji strony sieci Web ASP.NET](http://msdn.microsoft.com/library/76091f86-f967-4687-a40f-de87bd8cc9a0).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/VB/default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ScriptManagerProxy" />
    <altmember cref="T:System.Web.UI.UpdatePanel" />
    <altmember cref="T:System.Web.UI.ClientScriptManager" />
    <altmember cref="T:System.Web.UI.ScriptMode" />
    <altmember cref="T:System.Web.UI.ScriptReference" />
    <altmember cref="T:System.Web.UI.ServiceReference" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ScriptManager" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje pola wewnętrzne, które są używane przez <xref:System.Web.UI.ScriptManager> formantu, aby śledzić strony, sterowania i informacje o wdrożeniu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHistoryPoint">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy punkt historyczny i dodaje go do stosu historii przeglądarki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Te przeciążenia metody umożliwiają definiowanie stan serwera i opcjonalnie tytuł z wpisem historii w przeglądarce. Po utworzeniu punktu historii serializacji i zaszyfrowane dane są dołączane do adresu URL strony sieci Web i zapis znajduje się w stosie historii przeglądarki. Dane o stanie służy do ponownego tworzenia tej strony w przypadku dowolnego serwera kolejne zdarzenia nawigacji. Aby uzyskać więcej informacji, zobacz [Zarządzanie formantów przy użyciu serwera programu przeglądarki historii](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (System.Collections.Specialized.NameValueCollection state, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(class System.Collections.Specialized.NameValueCollection state, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.Collections.Specialized.NameValueCollection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (state As NameValueCollection, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::Collections::Specialized::NameValueCollection ^ state, System::String ^ title);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="state">Kolekcja par klucz/wartość, które zawierają dane dotyczące stanu.</param>
        <param name="title">Tekst, który zostanie dodany do stosu historii przeglądarki jako tytuł dla tego stanu.</param>
        <summary>Tworzy punkt historyczny i dodaje go do stosu historii przeglądarki, za pomocą określonego stanu zbierania danych i title stanu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody, aby utworzyć punkt historyczny można zapisać więcej niż jedną parę klucza i wartości dla danych o stanie. Po utworzeniu punktu historii serializacji i zaszyfrowane dane są dołączane do adresu URL strony sieci Web i zapis znajduje się w stosie historii przeglądarki. Jeśli `title` parametr jest `null`, tytuł strony sieci Web jest używany jako tytuł zapisu stanu w stosie historii.  
  
 Dane o stanie służy do ponownego tworzenia tej strony w przypadku dowolnego serwera kolejne zdarzenia nawigacji. Aby uzyskać więcej informacji, zobacz [Zarządzanie formantów przy użyciu serwera programu przeglądarki historii](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Część klucza pary klucz wartość, który określa stan strony sieci Web.</param>
        <param name="value">Część wartości pary klucza/wartości, który identyfikuje stan strony sieci Web.</param>
        <summary>Tworzy punkt historyczny i dodaje go do stosu historii przeglądarki, przy użyciu określonego stanu klucza i wartość stanu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia utworzenie punkt historyczny, gdy chcesz zapisać wartość, aby zidentyfikować stanu. Po utworzeniu punktu historii serializacji i zaszyfrowane dane są dołączane do adresu URL strony sieci Web i zapis znajduje się w stosie historii przeglądarki. Tytuł strony sieci Web jest używany jako tytuł zapisu stanu w stosie historii.  
  
 Dane o stanie służy do ponownego tworzenia tej strony w przypadku dowolnego serwera kolejne zdarzenia nawigacji. Aby uzyskać więcej informacji, zobacz [Zarządzanie formantów przy użyciu serwera programu przeglądarki historii](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value, System::String ^ title);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Część klucza pary klucz wartość, który określa stan strony sieci Web.</param>
        <param name="value">Część wartości pary klucza/wartości, który identyfikuje stan strony sieci Web.</param>
        <param name="title">Tekst, który zostanie dodany do stosu historii przeglądarki jako tytuł dla tego stanu.</param>
        <summary>Tworzy punkt historyczny i dodaje go do stosu historii przeglądarki, przy użyciu klucza określonego stanu, wartość stanu i tytuł stanu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia utworzenie punkt historyczny, gdy chcesz zapisać wartość, aby zidentyfikować stanu i tytuł stanu. Po utworzeniu punktu historii serializacji i zaszyfrowane dane są dołączane do adresu URL strony sieci Web i zapis znajduje się w stosie historii przeglądarki. Jeśli `title` parametr jest `null`, tytuł strony sieci Web jest używany jako tytuł zapisu stanu w stosie historii.  
  
 Dane o stanie służy do ponownego tworzenia tej strony w przypadku dowolnego serwera kolejne zdarzenia nawigacji. Aby uzyskać więcej informacji, zobacz [Zarządzanie formantów przy użyciu serwera programu przeglądarki historii](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly AjaxFrameworkAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly AjaxFrameworkAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AjaxFrameworkAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ AjaxFrameworkAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera zestaw Ajax framework tego składniki przy użyciu strony.</summary>
        <value>Zestaw Ajax framework.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AjaxFrameworkMode As AjaxFrameworkMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AjaxFrameworkMode AjaxFrameworkMode { System::Web::UI::AjaxFrameworkMode get(); void set(System::Web::UI::AjaxFrameworkMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AjaxFrameworkMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, jak skrypty klienta biblioteki klienta Microsoft Ajax zostaną uwzględnione na kliencie.</summary>
        <value>
          <see cref="T:System.Web.UI.AjaxFrameworkMode" /> Wartość wyliczenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> właściwości, aby włączyć wszystkie pliki skryptów Microsoft Ajax, aby wyłączyć wszystkie pliki skryptów Microsoft Ajax lub jawnie dołączać pliki pojedynczego skryptu.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób ustawiania <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> właściwości `Explicit` w celu wskazania, że skrypty może być jawnie określona.  
  
```  
<asp:ScriptManager ID="sm1" AjaxFrameworkMode="Explicit" runat="server">   
<Scripts>   
    <asp:ScriptReference Name="MicrosoftAjaxCore.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxComponentModel.js" />    
    <asp:ScriptReference Name="MicrosoftAjaxSerialization.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxNetwork.js" />       
</Scripts>   
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.AjaxFrameworkMode" />
      </Docs>
    </Member>
    <Member MemberName="AllowCustomErrorsRedirect">
      <MemberSignature Language="C#" Value="public bool AllowCustomErrorsRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCustomErrorsRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowCustomErrorsRedirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowCustomErrorsRedirect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy błędy niestandardowe części pliku Web.config jest używany podczas asynchronicznego ogłaszania zwrotnego błędu.</summary>
        <value>
          <see langword="true" /> Jeśli błędy niestandardowe ustawienia w pliku Web.config służy do określania zachowania błąd podczas asynchronicznego ogłaszania zwrotnego; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Zdarzenie jest zgłaszane, gdy występuje błąd strony podczas asynchronicznego ogłaszania zwrotnego. Jak błędy na serwerze zostaną wysłane do klienta zależy od <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> właściwość <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> właściwości i sekcję błędy niestandardowe w pliku Web.config.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AsyncPostBackError As EventHandler(Of AsyncPostBackErrorEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::AsyncPostBackErrorEventArgs ^&gt; ^ AsyncPostBackError;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy występuje błąd strony podczas asynchronicznego ogłaszania zwrotnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Zdarzenie jest zgłaszane, gdy występuje błąd strony podczas asynchronicznego ogłaszania zwrotnego. Jak błędy na serwerze zostaną wysłane do klienta zależy od <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> właściwość <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> właściwości i sekcję błędy niestandardowe w pliku Web.config.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób obsługi <xref:System.Web.UI.ScriptManager.AsyncPostBackError> zdarzeń, aby ustawić <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> właściwości (która jest wysyłana do klienta) do serwera komunikat o błędzie.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackErrorMessage">
      <MemberSignature Language="C#" Value="public string AsyncPostBackErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia komunikat o błędzie wysyłany do klienta, serwera nieobsługiwany wyjątek występuje podczas asynchronicznego ogłaszania zwrotnego.</summary>
        <value>Komunikat o błędzie. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Zdarzenie jest zgłaszane, gdy występuje błąd strony podczas asynchronicznego ogłaszania zwrotnego. Jak błędy na serwerze zostaną wysłane do klienta zależy od <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> właściwość <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> właściwości i sekcję błędy niestandardowe w pliku Web.config.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób obsługi <xref:System.Web.UI.ScriptManager.AsyncPostBackError> zdarzeń, aby ustawić <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> właściwości (która jest wysyłana do klienta) do serwera komunikat o błędzie.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackSourceElementID">
      <MemberSignature Language="C#" Value="public string AsyncPostBackSourceElementID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackSourceElementID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncPostBackSourceElementID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackSourceElementID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.AsyncPostBackSourceElementID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera unikatowy identyfikator formantu, który spowodował asynchronicznego ogłaszania zwrotnego.</summary>
        <value>Unikatowy identyfikator formantu, jeśli formant ma identyfikator; w przeciwnym razie wartość pustego ciągu ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID%2A> Właściwość zawiera wartość Identyfikatora formantu, który spowodował asynchronicznego ogłaszania zwrotnego, która może być jedną z następujących czynności:  
  
-   Odświeżenie strony z formantu, który znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontroli, których <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> właściwość jest ustawiona na `true` (ustawienie domyślne).  
  
-   Odświeżenie strony z formant, który jest wyzwalaczem dla <xref:System.Web.UI.UpdatePanel> formantu.  
  
-   Odświeżenie strony z formantu, który jest zarejestrowany przez wywołanie metody <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> metody <xref:System.Web.UI.ScriptManager> formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackTimeout">
      <MemberSignature Language="C#" Value="public int AsyncPostBackTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AsyncPostBackTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AsyncPostBackTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(90)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czas w sekundach limit czasu asynchronicznego ogłaszania zwrotnego, jeśli odpowiedź nie zostanie odebrana.</summary>
        <value>Liczba całkowita, która reprezentuje limit czasu w sekundach. Wartość domyślna wynosi 90 s.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationService">
      <MemberSignature Language="C#" Value="public System.Web.UI.AuthenticationServiceManager AuthenticationService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.AuthenticationServiceManager AuthenticationService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthenticationService As AuthenticationServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AuthenticationServiceManager ^ AuthenticationService { System::Web::UI::AuthenticationServiceManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AuthenticationServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.AuthenticationServiceManager" /> obiekt, który jest skojarzony z bieżącym <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</summary>
        <value>
          <see cref="T:System.Web.UI.AuthenticationServiceManager" /> Obiektu dla bieżącej <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.AuthenticationServiceManager> Usługi uwierzytelniania, który został zarejestrowany za pomocą strony reprezentuje obiekt, który jest zwracany przez tę właściwość. Usługa uwierzytelniania można zdefiniować w <xref:System.Web.UI.ScriptManager> kontroli lub skojarzony <xref:System.Web.UI.ScriptManagerProxy> formantu.  
  
 Możesz użyć usługi uwierzytelniania ASP.NET lub usługi uwierzytelniania niestandardowego. Możesz dodać niestandardowe usługi w znaczniku przy tym `AuthenticationService` element wewnątrz `asp:ScriptManager` elementu na stronie, jak pokazano w poniższym przykładzie.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <AuthenticationService Path="MyAuthenticationService.asmx" />  
</asp:ScriptManager>  
```  
  
 Można skonfigurować również programowo <xref:System.Web.UI.AuthenticationServiceManager> obiektu. Usługi są zarejestrowane w usłudze <xref:System.Web.UI.ScriptManager> kontroli podczas strony <xref:System.Web.UI.Control.PreRender> etap cyklu życia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientNavigateHandler">
      <MemberSignature Language="C#" Value="public string ClientNavigateHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientNavigateHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientNavigateHandler As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientNavigateHandler { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę metody, która obsługuje [Sys.Application.navigate] (http://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) zdarzeń na kliencie.</summary>
        <value>Nazwa metody, która obsługuje [Sys.Application.navigate] (http://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) zdarzeń na kliencie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositeScript">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompositeScriptReference CompositeScript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CompositeScriptReference CompositeScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.CompositeScript" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompositeScript As CompositeScriptReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::CompositeScriptReference ^ CompositeScript { System::Web::UI::CompositeScriptReference ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompositeScriptReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do skryptu złożony, który obsługuje strony sieci Web.</summary>
        <value>Odwołanie do skryptu złożonego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz [łączenie skrypty klienta do skryptu złożonego](http://msdn.microsoft.com/library/d0f608d0-b4c8-4795-990b-ede68c1239b3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyPageUrl">
      <MemberSignature Language="C#" Value="public virtual string EmptyPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyPageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyPageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EmptyPageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Web.UI.Design.UrlEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia adres URL pustej strony sieci Web.</summary>
        <value>Adres URL do użycia, jeśli strony sieci Web docelowej jest puste.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.EmptyPageUrl%2A> Właściwość obsługuje historii przeglądarki Ajax.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdn">
      <MemberSignature Language="C#" Value="public bool EnableCdn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdn" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdn" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdn { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy bieżąca strona ładuje odwołań do skryptów klienta z ścieżek sieci CDN (Content Delivery Network).</summary>
        <value>
          <see langword="true" /> Jeśli klient odwołań do skryptów są ładowane z sieci CDN ścieżki, w przeciwnym razie wartość <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość nie jest ustawiona `true` Jeśli ustawisz <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> do `true` już.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdnFallback">
      <MemberSignature Language="C#" Value="public bool EnableCdnFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdnFallback" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdnFallback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdnFallback { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Umożliwia lokalną kopię skryptu do załadowania w przypadku, gdy CDN (Content Delivery Network) jest niedostępny.</summary>
        <value>
          <see langword="true" /> Jeśli włączono rezerwowy wartość CDN; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHistory">
      <MemberSignature Language="C#" Value="public bool EnableHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHistory" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableHistory" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHistory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHistory { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy strona sieci Web obsługuje Historia punktu zarządzania.</summary>
        <value>
          <see langword="true" /> Jeśli strona sieci Web obsługuje dodawania punktów historii w przeglądarce historii stosu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ScriptManager.EnableHistory%2A> właściwości, aby włączyć zarządzanie historii na stronie sieci Web.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePageMethods">
      <MemberSignature Language="C#" Value="public bool EnablePageMethods { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePageMethods" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePageMethods As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePageMethods { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy strony publicznej statycznej metody strony ASP.NET mogą być wywoływana ze skryptu klienta.</summary>
        <value>
          <see langword="true" /> Jeśli metody statycznej strony na stronie platformy ASP.NET może być wywoływana ze skryptu klienta jako metody sieci Web; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można dodawać metody statycznej strony strony ASP.NET i oznaczyć je jako metody sieci Web. Następnie można wywołać tych metod ze skryptu, tak jakby były to część usługi sieci Web, ale bez tworzenia plików .asmx oddzielne. Aby utworzyć metody sieci Web na stronie, należy zaimportować <xref:System.Web.Services> przestrzeni nazw i Dodaj <xref:System.Web.Services.WebMethodAttribute> atrybutu do każdej metody statycznej, który chcesz udostępnić. Metody musi być oznaczona jako publiczna.  
  
 Aby uzyskać więcej informacji, zobacz [udostępnianie usług sieci Web, aby skrypt po stronie klienta ASP.NET AJAX](http://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePartialRendering">
      <MemberSignature Language="C#" Value="public bool EnablePartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePartialRendering { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która umożliwia częściowe renderowanie strony, która z kolei umożliwia indywidualnie zaktualizować regiony strony przy użyciu <see cref="T:System.Web.UI.UpdatePanel" /> kontrolki.</summary>
        <value>
          <see langword="true" /> Jeśli przy włączonej częściowe renderowanie całej strony aktualizacje będą pomijane; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nawet jeśli <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> właściwość jest `true`, nie może wystąpić częściowego renderowania strony. Przeglądarka nie obsługuje renderowania stron częściowych lub <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> właściwość jest ustawiona na `false`.  
  
 Można zastąpić wartość <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> właściwości w czasie wykonywania w trakcie lub przed strony <xref:System.Web.UI.Control.Init> zdarzeń. Jeśli spróbujesz zmienić tej właściwości po stronie <xref:System.Web.UI.Control.Init> wystąpiło zdarzenie <xref:System.InvalidOperationException> wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> Ustawiono właściwość po stronie <see cref="E:System.Web.UI.Control.Init" /> zdarzenie.</exception>
        <altmember cref="T:System.Web.UI.UpdatePanel" />
        <altmember cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="EnableScriptGlobalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptGlobalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptGlobalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptGlobalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptGlobalization { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Web.UI.ScriptManager" /> kontroli renderuje skrypt, który obsługuje analizowania i formatowanie informacje specyficzne dla kultury.</summary>
        <value>
          <see langword="true" /> Jeśli można wyświetlić informacje specyficzne dla kultury; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> właściwość jest ustawiona na `true`, uniwersalnych funkcji ECMAScript (JavaScript), takich jak metoda wyświetlać informacje specyficzne dla kultury. Kultura można ustawić w przeglądarce, kod serwera lub pliku konfiguracji witryny sieci Web.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableScriptLocalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptLocalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptLocalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptLocalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptLocalization { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Web.UI.ScriptManager" /> kontroli renderuje zlokalizowanych wersji plików skryptów.</summary>
        <value>
          <see langword="true" /> Jeśli skrypt zlokalizowanych plików będzie renderowany; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> właściwość jest ustawiona na `true`, <xref:System.Web.UI.ScriptManager> obiektu pobierze pliki skryptów dla bieżącej kultury, jeśli istnieją. Na przykład strona może określić plik skryptu o nazwie CustomScript.js. Jeśli kultura ustawiono fr-CA <xref:System.Web.UI.ScriptManager> obiektu próbuje pobrać plik skryptu o nazwie CustomScript.fr CA.js.  
  
> [!NOTE]
>  Aby zapobiec renderowanego dwa razy w pliku skryptu <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> nie można zmodyfikować właściwości podczas asynchronicznego ogłaszania zwrotnego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSecureHistoryState">
      <MemberSignature Language="C#" Value="public bool EnableSecureHistoryState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSecureHistoryState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableSecureHistoryState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableSecureHistoryState { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy można zaszyfrować ciągu stanu historii.</summary>
        <value>
          <see langword="true" /> Jeśli ciąg stanu historii powinny być szyfrowane; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  Ta właściwość powinna ***nigdy nie*** można ustawić `false` w witrynie sieci web w środowisku produkcyjnym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptManager GetCurrent (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ScriptManager GetCurrent(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetCurrent(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::ScriptManager ^ GetCurrent(System::Web::UI::Page ^ page);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">Wystąpienie strony można pobrać <see cref="T:System.Web.UI.ScriptManager" /> z.</param>
        <summary>Pobiera <see cref="T:System.Web.UI.ScriptManager" /> wystąpienie danego <see cref="T:System.Web.UI.Page" /> obiektu.</summary>
        <returns>Bieżący <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia dla wybranego <see cref="T:System.Web.UI.Page" /> obiekt, lub <see langword="null" /> Jeśli wystąpienie nie jest zdefiniowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda statyczna umożliwia określenie, czy <xref:System.Web.UI.ScriptManager> formant znajduje się na stronie lub uzyskania dostępu do właściwości i metod <xref:System.Web.UI.ScriptManager> kontrolować, jeśli nie znasz jego identyfikator.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredArrayDeclarations">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredArrayDeclarations" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredArrayDeclarations () As ReadOnlyCollection(Of RegisteredArrayDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredArrayDeclaration ^&gt; ^ GetRegisteredArrayDeclarations();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję tylko do odczytu deklaracje tablicy ECMAScript (JavaScript), które zostały wcześniej zarejestrowane w usłudze <see cref="T:System.Web.UI.Page" /> obiektu.</summary>
        <returns>Ogólny kolekcję, która zawiera deklaracje tablicy.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterArrayDeclaration" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredClientScriptBlocks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredClientScriptBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredClientScriptBlocks () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredClientScriptBlocks();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję tylko do odczytu w blokach skryptu klienta, które zostały wcześniej zarejestrowane w usłudze <see cref="T:System.Web.UI.ScriptManager" /> formantu.</summary>
        <returns>Ogólny kolekcję, która zawiera bloki skryptu klienta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bloki skryptu klienta są zarejestrowane w usłudze <xref:System.Web.UI.ScriptManager> formant do użycia z formant, który znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredDisposeScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredDisposeScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredDisposeScripts () As ReadOnlyCollection(Of RegisteredDisposeScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredDisposeScript ^&gt; ^ GetRegisteredDisposeScripts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję tylko do odczytu <see langword="dispose" /> skrypty, które zostały wcześniej zarejestrowane w usłudze <see cref="T:System.Web.UI.Page" /> obiektu.</summary>
        <returns>Ogólny kolekcję, która zawiera <see langword="dispose" /> skryptów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `dispose` skrypt jest wykonywany, gdy <xref:System.Web.UI.UpdatePanel> sterowania zostało zaktualizowane lub usunięte.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredExpandoAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredExpandoAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredExpandoAttributes () As ReadOnlyCollection(Of RegisteredExpandoAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredExpandoAttribute ^&gt; ^ GetRegisteredExpandoAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję tylko do odczytu atrybuty niestandardowe (expando), które zostały wcześniej zarejestrowane w usłudze <see cref="T:System.Web.UI.Page" /> obiektu.</summary>
        <returns>Ogólny kolekcję, która zawiera atrybuty niestandardowe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Atrybut niestandardowy jest pary nazwa/wartość, która może odczytywać i ustawiane przez skrypt po stronie klienta.  
  
   
  
## Examples  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.RegisteredExpandoAttribute>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredHiddenFields">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredHiddenFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredHiddenFields () As ReadOnlyCollection(Of RegisteredHiddenField)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredHiddenField ^&gt; ^ GetRegisteredHiddenFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję tylko do odczytu ukryte pola, które zostały wcześniej zarejestrowane w usłudze <see cref="T:System.Web.UI.Page" /> obiektu.</summary>
        <returns>Ogólny kolekcję, która zawiera ukryte pola.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.RegisteredHiddenField" />
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterHiddenField" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredOnSubmitStatements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredOnSubmitStatements" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredOnSubmitStatements () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredOnSubmitStatements();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję tylko do odczytu <see langword="onsubmit" /> instrukcji, które zostały wcześniej zarejestrowane <see cref="T:System.Web.UI.Page" /> obiektu.</summary>
        <returns>Ogólny kolekcję, która zawiera <see langword="onsubmit" /> instrukcje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `onsubmit` Instrukcja jest ECMAScript (JavaScript), który zostanie wykonany po przesłaniu formularza.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredStartupScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredStartupScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredStartupScripts () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredStartupScripts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję tylko do odczytu skrypty uruchamiania, które zostały wcześniej zarejestrowane <see cref="T:System.Web.UI.Page" /> obiektu.</summary>
        <returns>Ogólny kolekcję, która zawiera skrypty uruchamiania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Skrypt uruchamiania jest skrypt klienta, który jest skojarzony z formantem wykonuje się, gdy formant jest uruchomiona.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ScriptManager.GetRegisteredStartupScripts%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStateString">
      <MemberSignature Language="C#" Value="public string GetStateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetStateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetStateString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetStateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera ciąg, który zawiera pary klucz wartość, które reprezentują stan strony sieci Web.</summary>
        <returns>Ciąg zawierający pary klucz wartość, które reprezentują stan strony sieci Web.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDebuggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsDebuggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDebuggingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDebuggingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDebuggingEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wersje debugowania bibliotek skryptu klienta będzie renderowany.</summary>
        <value>
          <see langword="true" /> Jeśli bieżące żądanie jest wykonywany w trybie debugowania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> Zwraca `false` po spełniony jeden z następujących warunków:  
  
-   W elemencie pliku konfiguracyjnego `retail` atrybut ma ustawioną `true`. Ustawienie to zastępuje wszystkie inne ustawienia.  
  
-   <xref:System.Web.UI.ScriptManager.ScriptMode%2A> Właściwość jest ustawiona na `Auto` lub `Inherit`, a debugowanie nie jest włączone w `compilation` sekcji w pliku Web.config katalogu głównego aplikacji.  
  
-   <xref:System.Web.UI.ScriptManager.ScriptMode%2A> Właściwość jest ustawiona na `Release`.  
  
    > [!NOTE]
    >  `debug` Atrybutu dyrektywy nie wpływa na aplikacje ASP.NET z włączoną obsługą technologii Ajax. <xref:System.Web.UI.ScriptManager> Formant używa tylko ustawienia w pliku Web.config, a w jego <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> i <xref:System.Web.UI.ScriptManager.ScriptMode%2A> właściwości w celu określenia, czy do renderowania debugowania skryptów.  
  
 Aby uzyskać więcej informacji, zobacz [debugowanie i śledzenie Ajax aplikacji — omówienie](http://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpContext.IsDebuggingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsInAsyncPostBack">
      <MemberSignature Language="C#" Value="public bool IsInAsyncPostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInAsyncPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInAsyncPostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInAsyncPostBack { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.IsInAsyncPostBack</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący ogłaszania zwrotnego jest wykonywana w trybie częściowego renderowania.</summary>
        <value>
          <see langword="true" /> Jeśli bieżący ogłaszania zwrotnego jest wykonywany w trybie częściowego renderowania; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> właściwość w połączeniu z <xref:System.Web.UI.Page.IsPostBack%2A> właściwości odróżnienie ładowania strony początkowej, aktualizacja stron częściowych i cała strona aktualizacji w <xref:System.Web.UI.Control.Load>, <xref:System.Web.UI.Page.InitComplete>, lub <xref:System.Web.UI.Control.PreRender> zdarzenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="IsNavigating">
      <MemberSignature Language="C#" Value="public bool IsNavigating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNavigating" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsNavigating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNavigating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNavigating { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="E:System.Web.UI.ScriptManager.Navigate" /> zdarzenie jest obecnie obsługiwane.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="E:System.Web.UI.ScriptManager.Navigate" /> jest obsługiwany; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ScriptManager.IsNavigating%2A> umożliwia określenie, czy <xref:System.Web.UI.ScriptManager.Navigate> zdarzeń został zgłoszony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Identyfikator klucza dla formantu.</param>
        <param name="postCollection">Kolekcja wszystkich przychodzących danych post.</param>
        <summary>Odczytuje dane formularza, który jest przesyłana od przeglądarki do serwera i określa źródło asynchronicznego ogłaszania zwrotnego.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Web.UI.ScriptManager" /> stan formantu został zmieniony w wyniku odświeżania strony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.LoadPostData%2A> — Metoda jest głównie używana przez formant deweloperzy mogą rozszerzyć funkcjonalność programu <xref:System.Web.UI.ScriptManager> formantu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadScriptsBeforeUI">
      <MemberSignature Language="C#" Value="public bool LoadScriptsBeforeUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoadScriptsBeforeUI" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberSignature Language="VB.NET" Value="Public Property LoadScriptsBeforeUI As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LoadScriptsBeforeUI { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy skrypty są załadowane przed lub po znaczników na stronie interfejsu użytkownika po załadowaniu.</summary>
        <value>
          <see langword="true" /> Jeśli skrypty są załadowane przed załadowaniem kod znaczników dla interfejsu użytkownika; <see langword="false" /> Jeśli skrypty są ładowane po załadowaniu kod znaczników dla interfejsu użytkownika. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> Właściwość określa, jak skrypty w <xref:System.Web.UI.ScriptManager.Scripts%2A> kolekcji są ładowane względem znaczników na stronie interfejsu użytkownika.  
  
 Gdy <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> właściwość jest `true`, `script` element jest renderowany przed załadowaniem znaczników interfejsu użytkownika strony. W tym scenariuszu jeśli elementy interfejsu użytkownika są zdefiniowane w skryptach, interfejsu użytkownika będzie funkcjonalnej podczas jego ładowania. Jednak jeśli skrypt uzyskuje dostęp do elementów interfejsu użytkownika w znaczniku, dla którego wystąpień nie ma jeszcze utworzony, może wystąpić błąd. Aby upewnić się, że elementy interfejsu użytkownika zostały załadowane przed możesz uzyskiwać do nich dostęp, obsłuż zdarzenie klasy.  
  
 Gdy <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> właściwość jest `false`, `script` element jest renderowany po renderowania kodu znaczników interfejsu użytkownika strony. W tym scenariuszu interfejsu użytkownika ładuje szybciej, ale może nie być funkcjonalnej Jeśli skrypty, które określają dodatkowe elementy interfejsu użytkownika nie zakończono ładowania.  
  
 Ta właściwość nie jest ustawiona `true` Jeśli ustawisz <xref:System.Web.UI.ScriptManager.EnableCdn%2A> do `true` już.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.Scripts" />
        <altmember cref="T:System.Web.UI.ScriptReference" />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; Navigate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.HistoryEventArgs&gt; Navigate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.Navigate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Navigate As EventHandler(Of HistoryEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::HistoryEventArgs ^&gt; ^ Navigate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik kliknie w przeglądarce ** wstecz ** lub ** przycisk Prześlij dalej **.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy użytkownik kliknie w przeglądarce **ponownie** przycisku przeglądarki nawiguje wcześniej wyświetlić URL, które mogą obejmować adresów URL, które zawierają dane o stanie punktu historii. Jeśli kod klienta na stronie sieci Web wykryje, że adres URL zawiera dane historii stanu, wysyła żądanie do strony serwera. Jest to dodatkowe zdarzenie ogłaszania zwrotnego strony oraz <xref:System.Web.UI.ScriptManagerProxy> kontrolki serwera zgłasza `Navigate` zdarzeń. To zdarzenie obsługi i ponownie utwórz stronę zgodnie z wymaganiami aplikacji sieci Web przy użyciu danych o stanie są przekazywane ze zdarzeniem.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAsyncPostBackError">
      <MemberSignature Language="C#" Value="protected internal virtual void OnAsyncPostBackError (System.Web.UI.AsyncPostBackErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAsyncPostBackError(class System.Web.UI.AsyncPostBackErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnAsyncPostBackError (e As AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnAsyncPostBackError(System::Web::UI::AsyncPostBackErrorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.AsyncPostBackErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Błąd danych zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> Zdarzenie jest zgłaszane, gdy występuje błąd strony podczas asynchronicznego ogłaszania zwrotnego. Jak błędy na serwerze zostaną wysłane do klienta zależy od <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> właściwość <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> właściwości i sekcję błędy niestandardowe w pliku Web.config.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób obsługi <xref:System.Web.UI.ScriptManager.AsyncPostBackError> zdarzeń, aby ustawić <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> właściwości (która jest wysyłana do klienta) do serwera komunikat o błędzie.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.Control.Init" /> zdarzeń i upewnia się, że tylko jeden <see cref="T:System.Web.UI.ScriptManager" /> formant istnieje na tej stronie.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Więcej niż jedno wystąpienie <see cref="T:System.Web.UI.ScriptManager" /> istnieje na tej stronie.</exception>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania tej metody, należy wywołać podstawowym <see cref="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" /> metody, które pliki skryptów są poprawnie obsługiwane do renderowania stron częściowych.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.Control.PreRender" /> zdarzeń i rejestruje skryptów, plików i usług aktualizacje stron częściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje o modelu DOM, zobacz [modelu DOM (Document Object) poziom 1 specyfikacji](http://go.microsoft.com/fwlink/?LinkId=73305) w witrynie sieci Web w sieci World Wide Web konsorcjum W3C.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Przeglądarka, który zgłosił żądanie stron częściowych nie obsługuje co najmniej DOM poziom 1.0.</exception>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania tej metody, należy wywołać podstawowym <see cref="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" /> metody, która skrypt bloków i usług są poprawnie obsługiwane do renderowania stron częściowych.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveCompositeScriptReference (System.Web.UI.CompositeScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveCompositeScriptReference(class System.Web.UI.CompositeScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveCompositeScriptReference(System.Web.UI.CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveCompositeScriptReference (e As CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveCompositeScriptReference(System::Web::UI::CompositeScriptReferenceEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.CompositeScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Obiekt, który reprezentuje odwołanie do skryptu złożonego.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveScriptReference (System.Web.UI.ScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveScriptReference(class System.Web.UI.ScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveScriptReference(System.Web.UI.ScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveScriptReference (e As ScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveScriptReference(System::Web::UI::ScriptReferenceEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.ScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Obiekt reprezentujący bieżący skrypt.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.ScriptManager.ResolveScriptReference" /> zdarzeń dla każdego odwołania skryptu, który jest zarządzany przez <see cref="T:System.Web.UI.ScriptManager" /> formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez <xref:System.Web.UI.ScriptManager.OnPreRender%2A> program obsługi zdarzeń, jeden raz dla każdego <xref:System.Web.UI.ScriptReference> w <xref:System.Web.UI.ScriptManager.Scripts%2A> kolekcji.  
  
 <xref:System.Web.UI.ScriptManager.ResolveScriptReference> Zdarzenie jest wywoływane po skryptu zduplikowane wpisy zostały rozwiązane.  
  
 Zastępuje tę metodę wpłynąć na zachowania blokach skryptu poszczególnych odświeżenie strony lub podczas aktualizacje stron częściowych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfileService">
      <MemberSignature Language="C#" Value="public System.Web.UI.ProfileServiceManager ProfileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ProfileServiceManager ProfileService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ProfileService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProfileService As ProfileServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ProfileServiceManager ^ ProfileService { System::Web::UI::ProfileServiceManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ProfileServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.ProfileServiceManager" /> obiekt, który jest skojarzony z bieżącym <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</summary>
        <value>
          <see cref="T:System.Web.UI.ProfileServiceManager" /> Obiektu dla bieżącej <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ProfileServiceManager> Obiekt, który jest zwracany przez tę właściwość reprezentuje usługę profil, który został zarejestrowany za pomocą strony. Usługa profilu można zdefiniować w <xref:System.Web.UI.ScriptManager> kontroli lub skojarzony <xref:System.Web.UI.ScriptManagerProxy> formantu.  
  
 Możesz użyć usługą profilów programu ASP.NET lub usługi profilu niestandardowego. Możesz dodać niestandardowe usługi w znaczniku przy tym `ProfileService` element wewnątrz `asp:ScriptManager` elementu na stronie, jak pokazano w poniższym przykładzie.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <ProfileService LoadProperties="propertyA,propertyB"  
    Path="MyProfileService.asmx" />  
</asp:ScriptManager>  
```  
  
 Można skonfigurować również programowo <xref:System.Web.UI.ProfileServiceManager> obiektu. Usługi są zarejestrowane w usłudze <xref:System.Web.UI.ScriptManager> kontroli podczas strony <xref:System.Web.UI.Control.PreRender> etap cyklu życia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Ciąg par klucz/wartość, które reprezentują stan historii strony sieci Web.</param>
        <summary>Przetwarza zdarzenia odświeżania strony zgłoszone przez <see cref="T:System.Web.UI.ScriptManager" /> kontroli i ładuje stan historii strony sieci Web.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostDataChangedEvent ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostDataChangedEvent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informuje o zdarzeniach dla <see cref="T:System.Web.UI.ScriptManager" /> kontroli, gdy ogłoszenia na serwerze.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RaisePostDataChangedEvent%2A> — Metoda jest głównie używana przez formant deweloperzy mogą rozszerzyć funkcjonalność programu <xref:System.Web.UI.ScriptManager> formantu. Do wykonania domyślnej <xref:System.Web.UI.ScriptManager> kontroli, są zgłaszane żadne zdarzenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterArrayDeclaration">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje deklaracja tablicy ECMAScript (JavaScript) z <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formant, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> kontroli i dodaje tablicy do strony.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który rejestruje tablicy.</param>
        <param name="arrayName">Nazwa tablicy do zarejestrowania.</param>
        <param name="arrayValue">Tablica wartości lub wartości do zarejestrowania.</param>
        <summary>Rejestruje deklaracja tablicy ECMAScript (JavaScript) z <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formant, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> kontroli i dodaje tablicy do strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> metodę, aby zarejestrować klienta tablicy skryptu, który jest zgodny z częściowego renderowania strony, która nie ma żadnych zależności biblioteki Microsoft Ajax. Ta metoda rejestruje tablicy po `control` reprezentuje kontrolkę, która znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontrolkę, która jest aktualizowana. Aby zarejestrować tablicy zawsze występuje asynchronicznego ogłaszania zwrotnego, użyj <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować tablicę, która nie odnoszą się do aktualizacje stron częściowych, a jeśli chcesz zarejestrować tablicy tylko jeden raz podczas renderowania strony początkowej, użyj <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> Metoda określa, czy tablicy o nazwie określonej w `arrayName` parametru jest już zarejestrowany. Jeśli tak, metoda dodaje wartości określone w `arrayValue`. Ponieważ tablicy rejestrowana jest oparta na <xref:System.Collections.ArrayList> klasy, duplikaty są dozwolone. Jeśli zarejestrowane tablicy o tej nazwie w `arrayName` nie istnieje, tablicy jest tworzony i wartościami w `arrayValue` zostaną dodane do niego.  
  
 Aby uwzględnić literałów ciągów w tablicy, użyj apostrofu (') lub wpisywany podwójny cudzysłów (\\") w `arrayValue`.  
  
 Należy pamiętać, że JavaScript traktuje przecinka (,), jak ogranicznik w tablicy. Można określić wiele wartości tablicy przez przekazanie rozdzielany przecinkami ciąg w `arrayValue`. Oddzielanie dwóch elementów za pomocą przecinka w `arrayValue` jest odpowiednikiem wywołania <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> metody dwa razy, jeden raz dla każdego elementu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Page page, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Page page, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Page ^ page, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Obiekt strony, który rejestruje tablicy.</param>
        <param name="arrayName">Nazwa tablicy do zarejestrowania.</param>
        <param name="arrayValue">Tablica wartości lub wartości do zarejestrowania.</param>
        <summary>Rejestruje deklaracja tablicy ECMAScript (JavaScript) z <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formant, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> kontroli i dodaje tablicy do strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> metodę, aby zarejestrować klienta tablicy skryptu, który jest zgodny z częściowego renderowania strony, która nie ma żadnych zależności biblioteki Microsoft Ajax. Ta metoda rejestruje tablicy za każdym razem, która występuje asynchronicznego ogłaszania zwrotnego. Aby zarejestrować tablicy dla formantu, który znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> , aby tablicy jest zarejestrowana tylko wtedy, gdy jest aktualizowana panelu, użyj <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować tablicę, która nie odnoszą się do aktualizacje stron częściowych, a jeśli chcesz zarejestrować tablicy tylko jeden raz podczas renderowania strony początkowej, użyj <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterAsyncPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAsyncPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterAsyncPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterAsyncPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Formant do zarejestrowania dla asynchronicznego ogłaszania zwrotnego.</param>
        <summary>Rejestruje formant jako wyzwalacz dla asynchronicznego ogłaszania zwrotnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> Metoda umożliwia zarejestrować formanty serwera sieci Web jako wyzwalaczy, tak aby wykonują asynchronicznego ogłaszania zwrotnego zamiast synchroniczne ogłaszania zwrotnego. Gdy <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> właściwość <xref:System.Web.UI.UpdatePanel> kontrola jest ustawiona na `true` (jest to wartość domyślna), ogłaszanie formanty <xref:System.Web.UI.UpdatePanel> formantu są automatycznie rejestrowane jako formanty asynchroniczne odświeżania strony.  
  
 Użyj <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> metodę, aby zarejestrować elementów sterujących poza <xref:System.Web.UI.UpdatePanel> formant jako Wyzwalacze dla asynchronicznego ogłaszania zwrotnego i potencjalnie zaktualizować zawartość panelu aktualizacji. Aby zaktualizować <xref:System.Web.UI.UpdatePanel> sterowania programowo, wywołaj <xref:System.Web.UI.UpdatePanel.Update%2A> metody.  
  
 Można dodać wyzwalacza deklaratywnie za pomocą `Triggers` elementu <xref:System.Web.UI.UpdatePanel> formantu. W programie Visual Studio za pomocą projektanta **edytora kolekcji UpdatePanelTrigger** okno dialogowe.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób wywołania <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> metodę, aby zarejestrować <xref:System.Web.UI.WebControls.Button> , aby ta powoduje, że aktualizacja <xref:System.Web.UI.UpdatePanel> zawartości formantu. <xref:System.Web.UI.WebControls.Button> Formant nie jest wewnątrz <xref:System.Web.UI.UpdatePanel> formantu. Są wyświetlane dwa przyciski: `Button1` i `Button2`. `Button1` Odświeża zawartość panelu i `Button2` odświeża całą stronę.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager1VB.aspx#1)]  
  
 Poniższy przykład przedstawia sposób wywołania <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> metodę, aby zarejestrować użytkownika kontrolować przyczyną aktualizacji <xref:System.Web.UI.UpdatePanel> zawartości formantu. W pierwszym przykładzie stronę za pomocą kontrolki użytkownika. W drugim przykładzie kontrolki użytkownika.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager2CS.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager2VB.aspx#2)]  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Zastrzeżonymi formantu nie implementuje <see cref="T:System.Web.UI.INamingContainer" />, <see cref="T:System.Web.UI.IPostBackDataHandler" />, lub <see cref="T:System.Web.UI.IPostBackEventHandler" /> interfejsów.</exception>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
        <altmember cref="M:System.Web.UI.UpdatePanel.Update" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje bloku skryptu klienta z <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formant, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> kontroli, a następnie dodanie bloku skryptu do strony.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który rejestruje bloku skryptu klienta.</param>
        <param name="type">Typ bloku skryptu klienta. Ten parametr jest zazwyczaj określana za pomocą <see langword="typeof" /> — operator (C#) lub <see langword="GetType" /> — operator (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="key">Unikatowy identyfikator bloku skryptu.</param>
        <param name="script">Skrypt.</param>
        <param name="addScriptTags">
          <see langword="true" /> Aby załączyć skrypt blok w <see langword="&lt;script&gt;" /> i <see langword="&lt;/script&gt;" /> tagów; w przeciwnym razie <see langword="false" />.</param>
        <summary>Rejestruje bloku skryptu klienta z <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formant, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> kontroli, a następnie dodanie bloku skryptu do strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> metodę, aby zarejestrować klienta blok skryptu, który jest zgodny z częściowego renderowania strony, która nie ma żadnych zależności biblioteki Microsoft Ajax. Bloki skryptu klienta, które są zarejestrowane przy użyciu tej metody są wysyłane do strony tylko wtedy, gdy `control` reprezentuje kontrolkę, która znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontrolkę, która jest aktualizowana. Aby zarejestrować zawsze występuje asynchronicznego ogłaszania zwrotnego blok skryptu, użyj <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować blok skryptu, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować tylko jeden raz podczas renderowania strony początkowej w bloku skryptu użyj <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 Jeśli `addScriptTags` jest `true`, <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> dodaje metody `<script>` tagi wokół bloku skryptu. Przekaż `false` Jeśli chcesz utworzyć `<script>` znaczniki samodzielnie, np. Jeśli chcesz ustawić atrybutów określonych `<script>` tagów. Jeśli `addScriptTags` jest `false` i `script` parametr zawiera wiele bloków skryptu, jest zgłaszany wyjątek.  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> Metoda dodaje blok skryptu do strony po otwarciu `<form>` tagu. W blokach skryptu nie ma gwarancji jako dane wyjściowe w tej samej kolejności, w którym są rejestrowane. Jeśli kolejność blokach skryptu odgrywa ważną rolę, Połącz z blokach skryptu w jednym ciągu (na przykład za pomocą <xref:System.Text.StringBuilder> obiektu), a następnie zarejestruj je jako blok skryptu jednego klienta.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/CS/ScriptManager_RegisterClientScriptBlockCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/vb/ScriptManager_RegisterClientScriptBlockVB.aspx#1)]  
  
 [!code-xml[System.Web.UI.ScriptManager.RegisterClientScriptBlock#2](~/samples/snippets/common/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/Common/App_Data/Contacts.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Blok skryptu klienta <paramref name="type" /> jest <see langword="null" />.  \- lub - formant, który rejestruje bloku skryptu jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Formant, który rejestruje blok skryptu nie jest w drzewa formantów strony.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Obiekt strony, który rejestruje bloku skryptu klienta.</param>
        <param name="type">Typ bloku skryptu klienta. Ten parametr jest zazwyczaj określana za pomocą <see langword="typeof" /> — operator (C#) lub <see langword="GetType" /> — operator (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="key">Unikatowy identyfikator bloku skryptu.</param>
        <param name="script">Skrypt do zarejestrowania.</param>
        <param name="addScriptTags">
          <see langword="true" /> Aby załączyć skrypt blok w <see langword="&lt;script&gt;" /> i <see langword="&lt;/script&gt;" /> tagów; w przeciwnym razie <see langword="false" />.</param>
        <summary>Rejestruje bloku skryptu klienta z <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formant, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> kontroli, a następnie dodanie bloku skryptu do strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas rejestrowania blok skryptu za pomocą tej metody, skrypt jest renderowany zawsze występuje asynchronicznego ogłaszania zwrotnego. Można zarejestrować formantu, który znajduje się wewnątrz bloku skryptu <xref:System.Web.UI.UpdatePanel> , aby skrypt jest zarejestrowana tylko wtedy, gdy <xref:System.Web.UI.UpdatePanel> aktualizacji formantu, użyj <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować blok skryptu, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować tylko jeden raz podczas renderowania strony początkowej w bloku skryptu użyj <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Blok skryptu <paramref name="type" /> jest <see langword="null" />.  \- lub - jest strona, która rejestruje bloku skryptu <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje klienta pliku skryptu za pomocą <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formant, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> kontroli, a następnie dodanie odwołania pliku skryptu do strony.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który jest rejestrowanie w pliku skryptu klienta.</param>
        <param name="type">Typ pliku skryptu klienta. Ten parametr jest zazwyczaj określony za pomocą typeof — operator (C#) lub operator GetType (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="key">Unikatowy identyfikator pliku skryptu.</param>
        <param name="url">Adres URL pliku skryptu.</param>
        <summary>Rejestruje klienta pliku skryptu za pomocą <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formant, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> kontroli, a następnie dodanie odwołania pliku skryptu do strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> metodę, aby zarejestrować plik skryptu klienta dla strony lub części strony, która uczestniczy w aktualizacje stron częściowych. Pliki skryptów klienta, które są zarejestrowane przy użyciu tej metody są wysyłane do strony tylko wtedy, gdy `control` reprezentuje kontrolkę, która znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontrolkę, która jest aktualizowana. Aby zarejestrować zawsze występuje asynchronicznego ogłaszania zwrotnego pliku skryptu, użyj <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować blok skryptu, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować tylko jeden raz podczas renderowania strony początkowej w bloku skryptu użyj <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> Metoda rejestruje plik skryptu klienta na stronie przez renderowanie `script` elementu, którego otwierający tag zawiera `src` atrybutu. `url` Parametru jest używana do ustawiania `src` atrybutu. Aby rozwiązać adresów URL, użyj <xref:System.Web.UI.Control.ResolveClientUrl%2A> metody. Ta metoda używa kontekstu jest ona wywoływana dla rozpoznać ścieżki adresu URL.  
  
 Zarówno <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> i <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> metody renderowania plików skryptów w przeglądarce. Jeśli skrypt z tego samego typu i klucz (dla pliku skryptu) lub tego samego typu i nazwy zasobu (dla osadzony zasób) jest już renderowana skryptu nie są odtwarzane ponownie.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptInclude#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/ScriptManager_RegisterClientScriptIncludeCS.aspx#1)]  
  
 [!code-javascript[System.Web.UI.ScriptManager.RegisterClientScriptInclude#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/scripts/script_alertdiv.js#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Plik skryptu klienta <paramref name="type" /> jest <see langword="null" />.  \- lub - formant, który jest rejestrowanie w pliku skryptu jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Formant, który jest rejestrowanie w pliku skryptu nie jest w drzewa formantów strony.  \- lub - <paramref name="url" /> jest <see langword="null" />.  \- lub - <paramref name="url" /> jest pusta.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Page page, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Page page, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Obiekt strony, który jest rejestrowanie w pliku skryptu klienta.</param>
        <param name="type">Typ pliku skryptu klienta. Ten parametr jest zazwyczaj określony za pomocą typeof — operator (C#) lub operator GetType (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="key">Unikatowy identyfikator pliku skryptu.</param>
        <param name="url">Adres URL pliku skryptu.</param>
        <summary>Rejestruje skrypt po stronie klienta z <see cref="T:System.Web.UI.ScriptManager" /> kontrolować zawsze występuje asynchronicznego ogłaszania zwrotnego, a następnie dodaje odwołanie pliku skryptu do strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas rejestrowania plik skryptu przy użyciu tej metody, skrypt jest renderowany zawsze występuje asynchronicznego ogłaszania zwrotnego. Można zarejestrować formantu, który znajduje się w pliku skryptu <xref:System.Web.UI.UpdatePanel> , aby skrypt jest zarejestrowana tylko wtedy, gdy <xref:System.Web.UI.UpdatePanel> aktualizacji formantu, użyj <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować blok skryptu, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować tylko jeden raz podczas renderowania strony początkowej w bloku skryptu użyj <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Plik skryptu klienta <paramref name="type" /> jest <see langword="null" />.  \- lub - jest strona, która jest rejestrowanie w pliku skryptu <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="url" /> jest <see langword="null" />.  \- lub - <paramref name="url" /> jest pusta.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje klienta skrypt, który jest osadzony w zestawie z <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formantu, który uczestniczy w czasie renderowania stron częściowych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który rejestruje skryptu.</param>
        <param name="type">Typ skryptu klienta. Ten parametr jest zazwyczaj określony za pomocą typeof — operator (C#) lub operator GetType (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="resourceName">Identyfikator zasobu.</param>
        <summary>Rejestruje skryptu klienta, który jest wbudowany w zestaw o <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formantu, który uczestniczy w czasie renderowania stron częściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> metodę, aby zarejestrować skrypt, który jest zgodny z częściowego renderowania strony, która nie ma żadnych zależności biblioteki Microsoft Ajax. Skrypt zasobów, które są zarejestrowane przy użyciu tej metody są rejestrowane tylko wtedy, gdy `control` reprezentuje kontrolkę, która znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontrolki, która jest aktualizowana. Aby zarejestrować zawsze występuje asynchronicznego ogłaszania zwrotnego skryptu, użyj <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować blok skryptu, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować tylko jeden raz podczas renderowania strony początkowej w bloku skryptu użyj <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> Metoda jest używana, gdy zasoby z zestawów są dostępne za pośrednictwem programu obsługi HTTP. Ta metoda obejmuje zawartość adresu URL zasobu w `script` elementu.  
  
 Zarówno <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> i <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> metody ładowanie skryptu plików do przeglądarki. Jeśli skrypt z tego samego typu i klucz (dla pliku skryptu) lub tego samego typu i nazwy zasobu (dla osadzony zasób) jest już załadowany, skrypt nie będą ładowane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Zasób klienta <paramref name="type" /> jest <see langword="null" />.  \- lub - formant, który rejestruje skrypt jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Formant, który rejestruje skrypt nie jest w drzewa formantów strony.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Page page, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Page page, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Page ^ page, Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Obiekt strony, który rejestruje skryptu.</param>
        <param name="type">Typ skryptu klienta. Ten parametr jest zazwyczaj określony za pomocą typeof — operator (C#) lub operator GetType (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="resourceName">Identyfikator zasobu.</param>
        <summary>Rejestruje klienta plik skryptu, który jest osadzony w zestawie z <see cref="T:System.Web.UI.ScriptManager" /> kontrolować zawsze występuje odświeżania strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas rejestrowania plik skryptu przy użyciu tej metody, skrypt jest renderowany zawsze występuje asynchronicznego ogłaszania zwrotnego. Aby zarejestrować skryptu dla formantu, który znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> taki sposób, aby skrypt jest zarejestrowany tylko wtedy, gdy <xref:System.Web.UI.UpdatePanel> aktualizacji formantu, należy użyć <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować blok skryptu, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować tylko jeden raz podczas renderowania strony początkowej w bloku skryptu użyj <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Zasób klienta <paramref name="type" /> jest <see langword="null" />.  \- lub - jest strona, która rejestruje skrypt <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterDataItem">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wysyła dane niestandardowych formantów podczas renderowania stron częściowych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który odbiera dane.</param>
        <param name="dataItem">Dane, które są wysyłane do formantu.</param>
        <summary>Wysyła dane niestandardowe z formantem podczas renderowania stron częściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metody do wysyłania danych z serwera do klienta podczas asynchronicznego ogłaszania zwrotnego, niezależnie od tego, czy formant odbiera dane wewnątrz <xref:System.Web.UI.UpdatePanel> formantu.  
  
 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Metodę można wywołać tylko podczas asynchronicznego ogłaszania zwrotnego. Aby określić, czy asynchroniczne ogłaszania zwrotnego, użyj <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> właściwości. Ta metoda wywołuje przeciążenia, które przyjmuje parametr o nazwie `isJsonSerialized` który ustawiono `false`. Gdy `isJsonSerialized` ustawiono parametr `false`, ciąg nie jest serializowany jako JavaScript Object Notation (JSON). Aby uzyskać więcej informacji na temat formatu JSON, zobacz [wprowadzenie JSON](http://go.microsoft.com/fwlink/?LinkId=77297) witryny sieci Web.  
  
 Elementy danych, które są zarejestrowane w usłudze <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metody można uzyskać w skrypt po stronie klienta podczas oraz zdarzenia obiektu. Podczas obsługi tych zdarzeń, niestandardowe dane są przekazywane w obiekcie argumentu zdarzenia. Na przykład jeśli podasz obsługi dla zdarzenia niestandardowe dane są przekazywane w klasie, który udostępnia właściwości.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób wysłania danych do dwóch <xref:System.Web.UI.WebControls.Label> formantów na stronie podczas asynchronicznego ogłaszania zwrotnego. <xref:System.Web.UI.WebControls.Label> Formanty nie są wewnątrz <xref:System.Web.UI.UpdatePanel> formantu.  
  
> [!NOTE]
>  Dane są przesyłane w tym przykładzie jest tylko do celów ilustracyjnych. W przypadku aplikacji rzeczywistych można użyć <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodę, aby wysłać dane niestandardowe z serwera.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" /> Metoda jest wywoływana podczas odświeżania strony.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> jest już zarejestrowany dla <paramref name="control" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem, bool isJsonSerialized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem, bool isJsonSerialized);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
        <Parameter Name="isJsonSerialized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Formant strony, który odbiera dane.</param>
        <param name="dataItem">Dane, które są wysyłane do formantu.</param>
        <param name="isJsonSerialized">
          <see langword="true" /> Aby wskazać, że <c>dataItem</c> serializacji w formacie JSON, a w przeciwnym razie <see langword="false" />.</param>
        <summary>Wysyła dane niestandardowe z formantem podczas renderowania stron częściowych i wskazuje, czy dane są w formacie JavaScript Object Notation (JSON).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metody do wysyłania danych z serwera do klienta podczas asynchronicznego ogłaszania zwrotnego, niezależnie od tego, czy formant odbiera dane wewnątrz <xref:System.Web.UI.UpdatePanel> formantu.  
  
 Jeśli `dataItem` parametr, który zarejestrujesz `control` nie jest serializowany w formacie JSON, ustaw `isJsonSerialized` parametr `false`. Dzięki temu można uniknąć konieczność użycia funkcji dla każdego ciąg, który jest wysyłany do klienta. Aby uzyskać więcej informacji na temat formatu JSON, zobacz [wprowadzenie JSON](http://go.microsoft.com/fwlink/?LinkId=77297) witryny sieci Web.  
  
 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> Metodę można wywołać tylko podczas asynchronicznego ogłaszania zwrotnego. Aby określić, czy asynchroniczne ogłaszania zwrotnego, użyj <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> właściwości.  
  
 Elementy danych, które są zarejestrowane przy użyciu <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metody można uzyskać w skrypt po stronie klienta podczas oraz zdarzenia obiektu. Podczas obsługi tych zdarzeń, niestandardowe dane są przekazywane w obiekcie argumentu zdarzenia. Na przykład jeśli podasz obsługi dla zdarzenia niestandardowe dane są przekazywane w klasie, który udostępnia właściwości.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób wysłania danych do dwóch <xref:System.Web.UI.WebControls.Label> formantów na stronie podczas asynchronicznego ogłaszania zwrotnego. <xref:System.Web.UI.WebControls.Label> Formanty nie są wewnątrz <xref:System.Web.UI.UpdatePanel> formantu. W tym przykładzie pokazano przeciążenia, które nie przyjmuje `isJsonSerialized` parametru. W przeciwnym razie procedura pobierania właściwości obiektu jest taka sama jak, jeśli nie używasz tego przeciążenia.  
  
> [!NOTE]
>  Dane są przesyłane w tym przykładzie jest tylko do celów ilustracyjnych. W przypadku aplikacji rzeczywistych można użyć <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodę, aby wysłać dane niestandardowe z serwera. Na przykład można użyć elementu danych do wysyłania informacji o tym, czy do ukrywania lub pokazywania klienta elementy, które nie są w <xref:System.Web.UI.UpdatePanel> formantu.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" /> Metoda jest wywoływana podczas odświeżania strony.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> jest już zarejestrowany dla <paramref name="control" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDispose">
      <MemberSignature Language="C#" Value="public void RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Formant który <see langword="dispose" /> skrypt jest przeznaczony dla.</param>
        <param name="disposeScript">
          <see langword="dispose" /> Skryptu.</param>
        <summary>Rejestruje <see langword="dispose" /> skryptu dla formantu, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> formantu. Skrypt zostanie wykonany po <see cref="T:System.Web.UI.UpdatePanel" /> sterowania zostało zaktualizowane lub usunięte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> metodę, aby zarejestrować `dispose` Skrypty formantów, które znajdują się wewnątrz <xref:System.Web.UI.UpdatePanel> formantu. Podczas asynchronicznego ogłaszania zwrotnego <xref:System.Web.UI.UpdatePanel> formanty mogą być zaktualizowane, usunięte lub utworzone. Gdy zaktualizowane lub usunięte wszelkie panelu `dispose` skryptów, które są zarejestrowane dla formantów, które znajdują się wewnątrz <xref:System.Web.UI.UpdatePanel> są nazywane. W typowej strony scenariusze programowania, nie trzeba wywołać <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> metody.  
  
 <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> Metoda jest przeznaczona do użycia przez deweloperów formantu do zarejestrowania skryptu lub tworzenie formantów, które dziedziczą z <xref:System.Web.UI.IScriptControl> interfejsu. Na przykład może użyć `dispose` skryptu w przypadku tworzenia kontroli klienta przy użyciu kompozycji. Formantu, należy zaimplementować <xref:System.Web.UI.IScriptControl> i renderowania pojedynczych formantów. Możesz zarejestrować `dispose` metody dowolny element, który jest niezgodny ze składnikiem zdefiniowanych klienta takich jak `Sys.TextBox`. Jeśli formant niestandardowy Redaguj elementy odpowiadające składniki klienta w bibliotece Microsoft Ajax, nie trzeba zarejestrować `dispose` skryptu, ponieważ `dispose` jest wywoływana automatycznie. Dlatego należy używać <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> metody dla składników klienta, które są częścią biblioteki Microsoft Ajax i mają można zwolnić zasobów, gdy składnik jest już używany.  
  
 <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> Metodę można wywoływać wielokrotnie dla formantu. Wiele skryptów są agregowane. Kolejność likwidacji skrypty odpowiada kolejności, w którym zarejestrowano skryptów.  
  
 Jeśli zarejestrujesz `dispose` skryptu dla formantu, który nie znajduje się w <xref:System.Web.UI.UpdatePanel> kontroli, jest zgłaszany wyjątek. `dispose` Skrypt ma nazwę między i zdarzenia klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.  \- lub - <paramref name="disposeScript" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> Nie znaleziono na stronie.  \- lub - <paramref name="control" /> nie jest wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> formantu.</exception>
        <altmember cref="T:System.Web.UI.IScriptControl" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public static void RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który rejestruje atrybutu expando.</param>
        <param name="controlId">Formant, który zawiera atrybut niestandardowy na tej stronie.</param>
        <param name="attributeName">Nazwa atrybutu niestandardowego do zarejestrowania.</param>
        <param name="attributeValue">Wartość atrybutu niestandardowego.</param>
        <param name="encode">
          <see langword="true" /> kodowanie atrybutu niestandardowego, który jest rejestrowany; w przeciwnym razie <see langword="false" />.</param>
        <summary>Rejestruje pary nazwa/wartość, z <see cref="T:System.Web.UI.ScriptManager" /> formant jako atrybut niestandardowy (expando) określonego formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> metodę, aby zarejestrować właściwość niestandardową (expando) kontrolki, która jest zgodna z częściowego renderowania strony, która nie ma żadnych zależności biblioteki Microsoft Ajax.  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> Metoda rejestruje pary nazwa/wartość jako atrybut niestandardowy określonego formantu. Właściwość jest ustawiona dynamicznie z ECMAScript (JavaScript) w celu zachowania zgodności XHTML dla znacznika renderowanych formantu. Ustaw `encode` do `true` jeśli zajdzie potrzeba zmiany znaczenia znaków w wartości właściwości dynamicznych.  
  
 Jeśli nie znaleziono formantu, do którego zostaną dodane właściwości dynamicznych, występuje błąd skryptu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> nie jest w drzewa formantów strony.  \- lub - <paramref name="controlId" /> jest <see langword="null" />.  \- lub - <paramref name="controlId" /> jest pusta.  \- lub - <paramref name="attributeName" /> jest <see langword="null" />.  \- lub - <paramref name="attributeName" /> jest pusta.  \- lub - <paramref name="attributeName" /> jest już zarejestrowany.</exception>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExtenderControl&lt;TExtenderControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterExtenderControl&lt;TExtenderControl&gt; (TExtenderControl extenderControl, System.Web.UI.Control targetControl) where TExtenderControl : System.Web.UI.Control, System.Web.UI.IExtenderControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterExtenderControl&lt;(class System.Web.UI.Control, class System.Web.UI.IExtenderControl) TExtenderControl&gt;(!!TExtenderControl extenderControl, class System.Web.UI.Control targetControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExtenderControl(Of TExtenderControl As {Control, IExtenderControl}) (extenderControl As TExtenderControl, targetControl As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExtenderControl&gt;&#xA; where TExtenderControl : System::Web::UI::Control, System::Web::UI::IExtenderControl virtual void RegisterExtenderControl(TExtenderControl extenderControl, System::Web::UI::Control ^ targetControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterExtenderControl``1(``0,System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtenderControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IExtenderControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extenderControl" Type="TExtenderControl" />
        <Parameter Name="targetControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <typeparam name="TExtenderControl">Formant, który implementuje <see cref="T:System.Web.UI.IExtenderControl" /> interfejsu.</typeparam>
        <param name="extenderControl">Formant rozszerzający do zarejestrowania.</param>
        <param name="targetControl">Formant skryptu, rozszerzający formant rozszerzający.</param>
        <summary>Rejestruje formant rozszerzający z bieżącym <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest głównie do użytku przez deweloperów formantu. Wywołanie <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> metody z kontrolek niestandardowych rozszerzeń ASP.NET Ajax podczas jego `onInit` obsługi zdarzeń do zarejestrowania tego formantu ze stroną. Formant rozszerzający ASP.NET Ajax musi być zarejestrowana do udziału w czasie renderowania stron częściowych.  
  
 <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> Metoda dodaje formant rozszerzający określonego wewnętrzną listę formanty rozszerzające i formanty skryptów docelowy rozszerzają. Ta lista jest przetwarzany <xref:System.Web.UI.Control.PreRender> zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extenderControl" /> jest <see langword="null" />.  \- lub - <paramref name="targetControl" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterHiddenField">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje ukryte pole.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który rejestruje ukryte pole.</param>
        <param name="hiddenFieldName">Nazwa pola ukrytego do zarejestrowania.</param>
        <param name="hiddenFieldInitialValue">Wartość początkowa w polu ukrytym.</param>
        <summary>Rejestruje ukryte pole z <see cref="T:System.Web.UI.ScriptManager" /> kontroli dla formantu, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> metodę, aby zarejestrować ukryte pola, które nie są zgodne z częściowego renderowania strony, która nie ma żadnych zależności biblioteki Microsoft Ajax. Ta metoda rejestruje ukryte pola, gdy formant, który rejestruje pole znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontrolkę, która jest aktualizowana. Aby zarejestrować ukryte pole zawsze występuje asynchronicznego ogłaszania zwrotnego, użyj <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować ukryte pole, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować pola ukrytego tylko jeden raz podczas renderowania strony początkowej, użyj <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> Metoda tworzy ukryty `input` elementu na stronie HTML renderowanych.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.  \- lub - <paramref name="hiddenFieldName" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> nie jest w drzewa formantów strony.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Page ^ page, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Obiekt strony, który rejestruje ukryte pole.</param>
        <param name="hiddenFieldName">Nazwa pola ukrytego do zarejestrowania.</param>
        <param name="hiddenFieldInitialValue">Wartość początkowa w polu ukrytym.</param>
        <summary>Rejestruje ukryte pole z <see cref="T:System.Web.UI.ScriptManager" /> kontroli podczas każdego asynchronicznego ogłaszania zwrotnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> metodę, aby zarejestrować ukryte pola, które nie są zgodne z częściowego renderowania strony, która nie ma żadnych zależności biblioteki Microsoft Ajax. Ta metoda rejestruje ukryte pole za każdym razem, która występuje asynchronicznego ogłaszania zwrotnego. Aby zarejestrować ukryte pole umożliwiające formant, który znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontrolować tak, że pole jest zarejestrowana tylko wtedy, gdy jest aktualizowana panelu, użyj <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować ukryte pole, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować pola ukrytego tylko jeden raz podczas renderowania strony początkowej, użyj <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> jest <see langword="null" />.  \- lub - <paramref name="hiddenFieldName" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterNamedClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje skrypt po stronie klienta według nazwy zasobu, który jest wbudowany w zestaw o <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formantu, który uczestniczy w czasie renderowania stron częściowych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Control control, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Control control, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Control ^ control, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który rejestruje skryptu.</param>
        <param name="resourceName">Identyfikator zasobu.</param>
        <summary>Rejestruje skrypt po stronie klienta według nazwy zasobu, który jest wbudowany w zestaw o <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formantu, który uczestniczy w czasie renderowania stron częściowych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Page page, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Page page, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Page,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Page ^ page, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Obiekt strony, który rejestruje skryptu.</param>
        <param name="resourceName">Identyfikator zasobu.</param>
        <summary>Rejestruje skrypt po stronie klienta według nazwy zasobu, który jest wbudowany w zestaw o <see cref="T:System.Web.UI.ScriptManager" /> formant do użycia z formantu, który uczestniczy w czasie renderowania stron częściowych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterOnSubmitStatement">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje kod języka ECMAScript (JavaScript), który zostanie wykonany po przesłaniu formularza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który rejestruje <see langword="onsubmit" /> instrukcji.</param>
        <param name="type">Typ instrukcji skryptu klienta. Ten parametr jest zazwyczaj określony za pomocą typeof — operator (C#) lub operator GetType (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="key">Unikatowy identyfikator dla instrukcji skryptu.</param>
        <param name="script">Skrypt do zarejestrowania.</param>
        <summary>Rejestruje kod języka ECMAScript (JavaScript) z <see cref="T:System.Web.UI.ScriptManager" /> kontroli dla formantu, który jest używany z <see cref="T:System.Web.UI.UpdatePanel" /> formant, który zostanie wykonany po przesłaniu formularza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> Dodaje skrypt wykonywany przed przesłaniem formularza, który umożliwia modyfikowanie przesyłania lub Anuluj ją.  
  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> metody do renderowania `onsubmit` instrukcji zgodnej z częściowego renderowania strony i który nie ma żadnych zależności biblioteki Microsoft Ajax. Kod JavaScript, która jest zarejestrowana przy użyciu tej metody jest wysyłane do strony tylko wtedy, gdy formant, który rejestruje instrukcji znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontrolkę, która jest aktualizowana. Aby zarejestrować kodu przy każdym asynchronicznym ogłaszaniu, użyj <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować kod JavaScript, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować kod tylko jeden raz podczas renderowania strony początkowej, użyj <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 *Skryptu* parametr <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> metody może zawierać wielu poleceń skryptu, które są rozdzielane średnikami (;).  
  
 Aby uzyskać więcej informacji na temat formularzy HTML i `onsubmit` zdarzeń, zobacz [witryny sieci Web w sieci World Wide Web konsorcjum W3C](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.  \- lub - <paramref name="type" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> nie jest w drzewa formantów strony.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Page page, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Page page, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Obiekt strony, który rejestruje <see langword="onsubmit" /> instrukcji.</param>
        <param name="type">Typ instrukcji skryptu klienta. Ten parametr jest zazwyczaj określony za pomocą typeof — operator (C#) lub operator GetType (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="key">Unikatowy identyfikator dla instrukcji skryptu.</param>
        <param name="script">Skrypt do zarejestrowania.</param>
        <summary>Rejestruje kod języka ECMAScript (JavaScript) z <see cref="T:System.Web.UI.ScriptManager" /> kontroli dla formantu, który jest używany z <see cref="T:System.Web.UI.UpdatePanel" /> formant, który zostanie wykonany po przesłaniu formularza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rejestrowanie kodu JavaScript przy użyciu tej metody powoduje, że skrypt do uwzględnienia zawsze występuje asynchronicznego ogłaszania zwrotnego.  
  
> [!NOTE]
>  Kod z dowolnego wcześniej asynchroniczne ogłaszanie zwrotne nie są usuwane. Nowe asynchroniczne ogłaszanie zwrotne dołączyć kod do istniejący kod dla `onsubmit` instrukcji.  
  
 Aby zarejestrować kod dla formantu, który znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> , aby kod jest zarejestrowanych tylko wtedy, gdy <xref:System.Web.UI.UpdatePanel> aktualizacji formantu, należy użyć <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować kod JavaScript, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować kod tylko jeden raz podczas renderowania strony początkowej, użyj <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> jest <see langword="null" />.  \- lub - <paramref name="type" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Formant zarejestrować ogłaszania zwrotnego.</param>
        <summary>Rejestruje formant jako wyzwalacz odświeżania strony. Ta metoda służy do konfigurowania odświeżania strony formanty <see cref="T:System.Web.UI.UpdatePanel" /> kontroli, które mogłyby w przeciwnym razie Przeprowadź asynchronicznego ogłaszania zwrotnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A> metodę, aby zarejestrować formanty odświeżania strony <xref:System.Web.UI.UpdatePanel> formant jako wyzwalacze. Formanty, które są zarejestrowane przy użyciu tej metody aktualizacji całej strony zamiast aktualizowanie tylko <xref:System.Web.UI.UpdatePanel> zawartości formantu. Rejestrowanie odświeżania strony formantu przy użyciu tej metody poza <xref:System.Web.UI.UpdatePanel> formant nie ma wpływu, ponieważ domyślnie tych kontrolek nie wykonuj asynchronicznego ogłaszania zwrotnego.  
  
 Można dodać wyzwalacza deklaratywnie za pomocą `Triggers` elementu <xref:System.Web.UI.UpdatePanel> formantu. W programie Visual Studio za pomocą projektanta **edytora kolekcji UpdatePanelTrigger** okno dialogowe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptControl&lt;TScriptControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterScriptControl&lt;TScriptControl&gt; (TScriptControl scriptControl) where TScriptControl : System.Web.UI.Control, System.Web.UI.IScriptControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptControl&lt;(class System.Web.UI.Control, class System.Web.UI.IScriptControl) TScriptControl&gt;(!!TScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptControl(Of TScriptControl As {Control, IScriptControl}) (scriptControl As TScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TScriptControl&gt;&#xA; where TScriptControl : System::Web::UI::Control, System::Web::UI::IScriptControl virtual void RegisterScriptControl(TScriptControl scriptControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptControl``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScriptControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IScriptControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="scriptControl" Type="TScriptControl" />
      </Parameters>
      <Docs>
        <typeparam name="TScriptControl">Formant, który implementuje <see cref="T:System.Web.UI.IScriptControl" /> interfejsu.</typeparam>
        <param name="scriptControl">Formant skryptu do zarejestrowania.</param>
        <summary>Rejestruje formantu skryptu z bieżącym <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest głównie do użytku przez deweloperów formantu. Wywołanie <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> metody z formantu niestandardowego skryptu środowiska ASP.NET Ajax podczas jego `onInit` obsługi zdarzeń do zarejestrowania tego formantu ze stroną. Formant skryptu środowiska ASP.NET Ajax musi być zarejestrowana do udziału w czasie renderowania stron częściowych.  
  
 <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> Metoda dodaje formant rozszerzający określonego wewnętrzną listę formanty skryptów, które jest przetwarzany <xref:System.Web.UI.Control.PreRender> zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scriptControl" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterScriptDescriptors">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Powoduje, że <see cref="T:System.Web.UI.ScriptManager" /> kontroli do wywołania zwrotnego <see cref="T:System.Web.UI.ScriptControl" /> lub <see cref="T:System.Web.UI.ExtenderControl" /> klasy w celu powrotu skrypty, które są obsługiwane przez klienta obiekt reprezentujący kontroli klienta, składnika lub zachowanie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IExtenderControl extenderControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IExtenderControl extenderControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (extenderControl As IExtenderControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IExtenderControl ^ extenderControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extenderControl" Type="System.Web.UI.IExtenderControl" />
      </Parameters>
      <Docs>
        <param name="extenderControl">Rozszerzeń kontrolować, które skryptu zostanie zarejestrowany deskryptorów.</param>
        <summary>Wywołuje się <see cref="T:System.Web.UI.ExtenderControl" /> klasy do zwrócenia wystąpienia skrypty, które muszą być odwzorowywany na obsługuje obiekt klienta, który reprezentuje kontroli klienta, składnika lub zachowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ExtenderControl> Klasy wywołania <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> metody w jego <xref:System.Web.UI.Control.Render%2A> metody.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli pochodzi od <see cref="T:System.Web.UI.ExtenderControl" /> klasy i zastąpić <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> metody, ale nie wywołuj metody klasy podstawowej, należy wywołać <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" /> metody. Dzięki temu <see cref="T:System.Web.UI.ScriptManager" /> formantu do renderowania skrypty wystąpienia, które obsługują obiekt klienta, który reprezentuje formantu.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IScriptControl scriptControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (scriptControl As IScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IScriptControl ^ scriptControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IScriptControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptControl" Type="System.Web.UI.IScriptControl" />
      </Parameters>
      <Docs>
        <param name="scriptControl">Skrypt kontrolować, które skryptu zostanie zarejestrowany deskryptorów.</param>
        <summary>Wywołania <see cref="T:System.Web.UI.ScriptControl" /> klasy do zwrócenia wystąpienia skrypty, które muszą być odwzorowywany na obsługuje obiekt klienta, który reprezentuje kontroli klienta, składnika lub zachowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptControl> Klasy wywołania <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> metody podczas jego <xref:System.Web.UI.Control.Render%2A> zdarzeń.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli pochodzi od <see cref="T:System.Web.UI.ScriptControl" /> klasy i zastąpić <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> metody, ale nie wywołuj metody klasy podstawowej, należy wywołać <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" /> metody. Dzięki temu <see cref="T:System.Web.UI.ScriptManager" /> formantu do renderowania skrypty wystąpienia, które obsługują obiekt klienta, który reprezentuje formantu.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje uruchamiania blok skryptu z <see cref="T:System.Web.UI.ScriptManager" /> kontroli i dodaje bloku skryptu do strony.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Formant, który rejestruje bloku skryptu klienta.</param>
        <param name="type">Typ bloku skryptu klienta. Ten parametr jest zazwyczaj określony za pomocą typeof — operator (C#) lub operator GetType (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="key">Unikatowy identyfikator bloku skryptu.</param>
        <param name="script">Skrypt do zarejestrowania.</param>
        <param name="addScriptTags">
          <see langword="true" /> Aby załączyć bloku skryptu <see langword="&lt;script&gt;" /> i <see langword="&lt;/script&gt;" /> tagów; w przeciwnym razie <see langword="false" />.</param>
        <summary>Rejestruje blok skryptu uruchamiania dla formantu, który znajduje się wewnątrz <see cref="T:System.Web.UI.UpdatePanel" /> przy użyciu <see cref="T:System.Web.UI.ScriptManager" /> kontroli i dodaje bloku skryptu do strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> metodę, aby zarejestrować blok skryptu uruchamiania dla strony, która jest zgodna z częściowego renderowania strony, która nie ma żadnych zależności biblioteki Microsoft Ajax. Uruchamianie blokach skryptu, które są zarejestrowane przy użyciu tej metody są wysyłane do strony tylko wtedy, gdy formant, który rejestruje bloku znajduje się wewnątrz <xref:System.Web.UI.UpdatePanel> kontrolkę, która jest aktualizowana. Aby zarejestrować zawsze występuje asynchronicznego ogłaszania zwrotnego bloku skryptu uruchamiania, należy użyć <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować skryptu uruchomieniowego, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować tylko jeden raz podczas renderowania strony początkowej skryptu użyj <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 Blok skryptu, który jest renderowany przez <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> metoda jest wykonywana po stronie zakończeniu ładowania, ale przed jego strony klienta `onload` zdarzenia. Bloki skryptu uruchamiania znajdują się w dolnej części renderowanej strony ASP.NET tuż przed `</form>` tagu.  
  
 Uruchamianie blokach skryptu, które są zarejestrowane przy użyciu <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> nie ma gwarancji jako dane wyjściowe w tej samej kolejności, w którym są rejestrowane. Jeśli kolejność uruchamiania blokach skryptu odgrywa ważną rolę, użyj <xref:System.Text.StringBuilder> do zebrania blokach skryptu w ciągu jednego obiektu, a następnie zarejestruj je wszystkie jako pojedynczego uruchomienia skryptu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.  \- lub - <paramref name="type" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> nie jest w drzewa formantów strony.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Obiekt strony, który rejestruje bloku skryptu klienta.</param>
        <param name="type">Typ bloku skryptu klienta. Ten parametr jest zazwyczaj określony za pomocą typeof — operator (C#) lub operator GetType (Visual Basic), można pobrać typu formantu, który rejestruje skryptu.</param>
        <param name="key">Unikatowy identyfikator bloku skryptu.</param>
        <param name="script">Skrypt do zarejestrowania.</param>
        <param name="addScriptTags">
          <see langword="true" /> Aby załączyć bloku skryptu <see langword="&lt;script&gt;" /> i <see langword="&lt;/script&gt;" /> tagów; w przeciwnym razie <see langword="false" />.</param>
        <summary>Rejestruje blok skryptu uruchamiania na każdym asynchronicznym ogłaszaniu z <see cref="T:System.Web.UI.ScriptManager" /> kontroli i dodaje bloku skryptu do strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używany do rejestrowania blok skryptu uruchamiania dołączoną zawsze występuje asynchronicznego ogłaszania zwrotnego. Aby zarejestrować formantu, który znajduje się wewnątrz bloku skryptu <xref:System.Web.UI.UpdatePanel> , aby blok skryptu jest zarejestrowany tylko wtedy, gdy <xref:System.Web.UI.UpdatePanel> aktualizacji formantu, użyj <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> przeciążenie tej metody.  
  
 Jeśli chcesz zarejestrować skryptu uruchomieniowego, które nie dotyczą aktualizacje stron częściowych, a jeśli chcesz zarejestrować tylko jeden raz podczas renderowania strony początkowej skryptu użyj <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metody <xref:System.Web.UI.ClientScriptManager> klasy. Można pobrać odwołania do <xref:System.Web.UI.ClientScriptManager> obiekt z <xref:System.Web.UI.Page.ClientScript%2A> właściwości strony.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Obiekt, który odbiera zawartość formantu można zapisać do strony.</param>
        <summary>Renderuje <see cref="T:System.Web.UI.ScriptManager" /> formantu elementu zawartości do przeglądarki przy użyciu określonego <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana przez deweloperów formant do rozszerzenia <xref:System.Web.UI.ScriptManager> formantu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania tej metody, należy wywołać podstawowym <see cref="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" /> metody, aby skrypt klienta, który definiuje klasę jest renderowany na stronie.</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveCompositeScriptReference As EventHandler(Of CompositeScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::CompositeScriptReferenceEventArgs ^&gt; ^ ResolveCompositeScriptReference;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy skrypt złożonego jest zarejestrowana w usłudze <see cref="T:System.Web.UI.ScriptManager" /> formantu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveScriptReference As EventHandler(Of ScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::ScriptReferenceEventArgs ^&gt; ^ ResolveScriptReference;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy członek <see cref="P:System.Web.UI.ScriptManager.Scripts" /> kolekcji został zarejestrowany za pomocą <see cref="T:System.Web.UI.ScriptManager" /> formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest wywoływane jeden raz dla każdego członka <xref:System.Web.UI.ScriptManager.Scripts%2A> kolekcję podczas strony <xref:System.Web.UI.Control.PreRender> zdarzeń. To zdarzenie służy do przeprowadzania żadnych aktualizacji, przed wyświetleniem skrypt do strony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoleService">
      <MemberSignature Language="C#" Value="public System.Web.UI.RoleServiceManager RoleService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.RoleServiceManager RoleService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.RoleService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoleService As RoleServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::RoleServiceManager ^ RoleService { System::Web::UI::RoleServiceManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.RoleServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.RoleServiceManager" /> obiekt, który jest skojarzony z bieżącym <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</summary>
        <value>
          <see cref="T:System.Web.UI.RoleServiceManager" /> Obiektu dla bieżącej <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.RoleServiceManager> Usługa roli, która jest zarejestrowana na stronie reprezentuje obiekt, który jest zwracany przez tę właściwość. Usługa roli może być zdefiniowana w <xref:System.Web.UI.ScriptManager> kontroli lub skojarzony <xref:System.Web.UI.ScriptManagerProxy> formantu. Możesz użyć usługi roli ASP.NET lub usługi niestandardowej roli zabezpieczeń. Możesz dodać niestandardowe usługi w znaczniku przy tym `RoleService` element wewnątrz `asp:ScriptManager` elementu na stronie, jak pokazano w poniższym przykładzie:  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <RoleService Path="MyRoleService.asmx" LoadRoles="True" />  
</asp:ScriptManager>  
```  
  
 Można skonfigurować również programowo <xref:System.Web.UI.RoleServiceManager> obiektu. Usługi są zarejestrowane w usłudze <xref:System.Web.UI.ScriptManager> kontroli podczas strony <xref:System.Web.UI.Control.PreRender> etap cyklu życia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptMode ScriptMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ScriptMode ScriptMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptMode As ScriptMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptMode ScriptMode { System::Web::UI::ScriptMode get(); void set(System::Web::UI::ScriptMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą czy debugowania lub wersje bibliotek skryptu klienta są renderowane.</summary>
        <value>Wartość wyliczenia wskazująca bieżący tryb. Wartość domyślna to <see cref="F:System.Web.UI.ScriptMode.Auto" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.ScriptMode%2A> Właściwość określa, czy <xref:System.Web.UI.ScriptManager> formant powinien renderować debugowania lub wersje bibliotek skryptu klienta. Ta wartość może zostać zastąpiony przez wartości, które są ustawione w pliku konfiguracji i w dyrektywie page.  
  
 W poniższej tabeli przedstawiono prawidłowe wartości dla tej właściwości.  
  
|Wartość|Definicja|  
|-----------|----------------|  
|<xref:System.Web.UI.ScriptMode.Auto>|Wersja biblioteki są używane na stronie sieci Web skrypt po stronie klienta debugowania podczas `retail` ustawiono atrybut elementu konfiguracji `false`. W przeciwnym razie są używane wersje bibliotek skryptu klienta.|  
|<xref:System.Web.UI.ScriptMode.Inherit>|Gdy jest stosowany do <xref:System.Web.UI.ScriptManager.ScriptMode%2A> właściwość <xref:System.Web.UI.ScriptManager> obiektu, ta wartość jest taka sama jak <xref:System.Web.UI.ScriptMode.Auto>.|  
|<xref:System.Web.UI.ScriptMode.Debug>|Wersja biblioteki są używane na stronie sieci Web, chyba że skrypt po stronie klienta debugowania `retail` ustawiono atrybut elementu konfiguracji `true`.|  
|<xref:System.Web.UI.ScriptMode.Release>|Wersje bibliotek skryptu klienta są używane na stronie sieci Web, chyba że `retail` ustawiono atrybut elementu konfiguracji `false`.|  
  
> [!NOTE]
>  `debug` Atrybutu dyrektywy nie wpływa na aplikacje ASP.NET z włączoną obsługą technologii Ajax. <xref:System.Web.UI.ScriptManager> Formant używa tylko ustawienia w pliku Web.config, a w jego <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> i <xref:System.Web.UI.ScriptManager.ScriptMode%2A> właściwości w celu określenia, czy do renderowania debugowania skryptów.  
  
 Aby uzyskać więcej informacji, zobacz [debugowanie i śledzenie Ajax aplikacji — omówienie](http://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Web.UI.ScriptManager.ScriptMode" /> Właściwość nie jest jednym z <see cref="T:System.Web.UI.ScriptMode" /> wartości.</exception>
        <altmember cref="T:System.Web.UI.ScriptMode" />
      </Docs>
    </Member>
    <Member MemberName="ScriptPath">
      <MemberSignature Language="C#" Value="public string ScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Set the Path property on each individual ScriptReference instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę katalogu głównego lokalizacji, w której jest używany do tworzenia ścieżek do plików skryptu niestandardowego i ASP.NET Ajax.</summary>
        <value>Lokalizacja, w którym są przechowywane pliki skryptów. Wartość domyślna to ciąg pusty (""), który jest interpretowany jako ścieżki względnej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.ScriptPath%2A> Właściwość umożliwia określenie bezwzględnym, względną, lub blokuje względnego URL aplikacji dla wszystkich skryptu na stronie. Dotyczy to również blokach skryptu niestandardowego i innych firm, które są zarejestrowane z bieżącym <xref:System.Web.UI.ScriptManager> wystąpienia. <xref:System.Web.UI.ScriptManager.ScriptPath%2A> Właściwość jest zwykle ustawiana jako atrybut deklaratywnie `ScriptManager` elementu na stronie, ale można ustawić w kodzie również.  
  
 Jeśli `path` atrybutu lub <xref:System.Web.UI.ScriptReferenceBase.Path%2A> właściwość ma wartość dla <xref:System.Web.UI.ScriptReference> obiektu w <xref:System.Web.UI.ScriptManager.Scripts%2A> zastępuje wartość ścieżki w kolekcji, <xref:System.Web.UI.ScriptManager.ScriptPath%2A> wartość, która <xref:System.Web.UI.ScriptReference> wystąpienia.  
  
 Jeśli nie <xref:System.Web.UI.ScriptReferenceBase.Path%2A> określona jest wartość <xref:System.Web.UI.ScriptManager> formant wyszukiwania w katalogu, do którego jest definiowana za pomocą <xref:System.Web.UI.ScriptManager.ScriptPath%2A> odwołuje się do skryptu właściwości i jest rozpoznawana przez ich <xref:System.Web.UI.ScriptReference.Name%2A> lub <xref:System.Web.UI.ScriptReference.Assembly%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceMapping">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptResourceMapping ScriptResourceMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.UI.ScriptResourceMapping ScriptResourceMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ScriptResourceMapping As ScriptResourceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::UI::ScriptResourceMapping ^ ScriptResourceMapping { System::Web::UI::ScriptResourceMapping ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptResourceMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.ScriptResourceMapping" /> obiektu.</summary>
        <value>A <see cref="T:System.Web.UI.ScriptResourceMapping" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Statycznych <xref:System.Web.UI.ScriptManager.ScriptResourceMapping%2A> zwraca <xref:System.Web.UI.ScriptResourceMapping> obiekt, który może zawierać zbiór mapowania, które reprezentują lokalizację zasobu skryptu (przekierowywanie skryptu). Ta kolekcja mapowania mogą być mapowane na podstawie nazwy lub pary nazwa/zestawu i może wskazywać <xref:System.Web.UI.ScriptResourceDefinition> obiektu.  
  
   
  
## Examples  
 W poniższych przykładach przedstawiono sposób dodawania <xref:System.Web.UI.ScriptResourceDefinition> obiekt, który może odwoływać się <xref:System.Web.UI.ScriptManager> obiektu. Dodaj następujący kod do pliku Global.asax `Application_Start` zdarzeń.  
  
```csharp  
ScriptResourceDefinition myScriptResDef = new ScriptResourceDefinition();  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js";  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js";  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js";  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js";  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", null, myScriptResDef);  
```  
  
```vb  
Dim myScriptResDef As New ScriptResourceDefinition()  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js"  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js"  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js"  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js"  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", Nothing, myScriptResDef)  
```  
  
 W znaczniku strony formularzy sieci Web programu ASP.NET (pliku aspx), Dodaj następujący kod znaczników wewnątrz `form` elementu i przed wszystkie elementy lub kod, który używa skryptu jQuery.  
  
```  
<asp:ScriptManager ID="sm1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="jquery"/>  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptReferenceCollection Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ScriptReferenceCollection Scripts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Scripts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scripts As ScriptReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptReferenceCollection ^ Scripts { System::Web::UI::ScriptReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.ScriptReferenceCollection" /> obiekt, który zawiera <see cref="T:System.Web.UI.ScriptReference" /> obiektów, z których każdy reprezentuje plik skryptu renderowane do klienta.</summary>
        <value>
          <see cref="T:System.Web.UI.ScriptReferenceCollection" /> Obiektu <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptReferenceCollection> Obiekt, który jest zwracany przez tę właściwość jest kolekcją <xref:System.Web.UI.ScriptReference> obiektów, z których każdy reprezentuje plik skryptu. Kolekcja zawiera odwołania do wszystkich plików skryptu potrzebnych dla funkcjonalności interfejsu Ajax programu ASP.NET i w plikach skryptu niestandardowego. Pliki skryptu niestandardowego do renderowania można zdefiniować w <xref:System.Web.UI.ScriptManager> kontroli lub skojarzony <xref:System.Web.UI.ScriptManagerProxy> formantu.  
  
 Pliki skryptów można dodać do kolekcji w znaczniku, dodając `asp:ScriptReference` elementy `Scripts` węzła wewnątrz `asp:ScriptManager` elementu na stronie, jak pokazano w poniższym przykładzie.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="Script.js" />  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 Można również dodać <xref:System.Web.UI.ScriptReference> do obiektu <xref:System.Web.UI.ScriptManager.Scripts%2A> kolekcji programowo przy użyciu <xref:System.Collections.ObjectModel.Collection%601.Add%2A> metody <xref:System.Web.UI.ScriptReferenceCollection> klasy.  
  
 <xref:System.Web.UI.ScriptManager> Kontroli rejestruje pliki skryptów podczas formantu <xref:System.Web.UI.Control.PreRender> zdarzeń.  
  
 <xref:System.Web.UI.ScriptManager.Scripts%2A> Kolekcja nie zawiera skryptów Microsoft Ajax biblioteki podstawowej. Skrypty w podstawowej biblioteki są renderowane automatycznie; nie mają być zarejestrowany na <xref:System.Web.UI.ScriptManager> formantu. Jednak jeśli chcesz przesłonić skryptu rdzeni lub dowolny skrypt kontroli i zastępuje inną wersję skryptu, można dodać do wersji <xref:System.Web.UI.ScriptManager.Scripts%2A> kolekcji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public System.Web.UI.ServiceReferenceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ServiceReferenceCollection Services" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Services" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Services As ServiceReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ServiceReferenceCollection ^ Services { System::Web::UI::ServiceReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ServiceReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Web.UI.ServiceReferenceCollection" /> obiekt, który zawiera <see cref="T:System.Web.UI.ServiceReference" /> obiektu dla poszczególnych usług sieci Web ASP.NET ujawniający na kliencie dla funkcjonalności interfejsu Ajax.</summary>
        <value>
          <see cref="T:System.Web.UI.ServiceReferenceCollection" /> Obiektu dla bieżącej <see cref="T:System.Web.UI.ScriptManager" /> wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ServiceReferenceCollection> Obiekt, który jest zwracany przez tę właściwość jest kolekcją <xref:System.Web.UI.ServiceReference> obiektów, z których każdy reprezentuje usługi sieci Web, która jest zarejestrowana <xref:System.Web.UI.ScriptManager> formantu. Można zdefiniować usług w <xref:System.Web.UI.ScriptManager> kontroli lub skojarzony <xref:System.Web.UI.ScriptManagerProxy> formantu.  
  
 Usługi można dodać do kolekcji w znaczniku, dodając `asp:ServiceReference` elementu `Services` element wewnątrz `asp:ScriptManager` wystąpienia na stronie, jak pokazano w poniższym przykładzie.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Services>  
    <asp:ServiceReference Path="Service.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 Można również programowane Dodawanie <xref:System.Web.UI.ServiceReference> do obiektu <xref:System.Web.UI.ScriptManager.Services%2A> kolekcji za pomocą <xref:System.Collections.ObjectModel.Collection%601.Add%2A> metody <xref:System.Web.UI.ServiceReferenceCollection> klasy.  
  
 Usługi są zarejestrowane w usłudze <xref:System.Web.UI.ScriptManager> podczas strony <xref:System.Web.UI.Control.PreRender> etap cyklu życia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetFocus">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ustawia fokus przeglądarki do określonego formantu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus (clientID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::String ^ clientID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">Identyfikator formantu można ustawić fokusu.</param>
        <summary>Ustawia priorytet przeglądarki do formantu określony przez identyfikator.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.SetFocus%2A> Metody działa jak <xref:System.Web.UI.Page.SetFocus%2A> metodę <xref:System.Web.UI.Page> klasy. Obie metody Ustaw kontrolkę o określonym identyfikatorze aktywny formant na stronie sieci Web. <xref:System.Web.UI.ScriptManager.SetFocus%2A> Metody <xref:System.Web.UI.ScriptManager> klasa jest używana do ustawiania fokus podczas asynchronicznego ogłaszania zwrotnego. Podczas ogłaszania zwrotnego i po stronie najpierw renderowania <xref:System.Web.UI.ScriptManager.SetFocus%2A> wywołania metody <xref:System.Web.UI.Page.SetFocus%2A> metody <xref:System.Web.UI.Page> klasy.  
  
 Jeśli jest wiele wywołań <xref:System.Web.UI.ScriptManager.SetFocus%2A> formantu w ostatnim wywołaniu metody uzyskuje fokus.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.String)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Formant fokusu.</param>
        <summary>Ustawia fokus przeglądarki do określonego formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptManager.SetFocus%2A> Metody działa jak <xref:System.Web.UI.Page.SetFocus%2A> metodę <xref:System.Web.UI.Page> klasy. Obie metody należy określony formant aktywny formant na stronie sieci Web. <xref:System.Web.UI.ScriptManager.SetFocus%2A> Metody <xref:System.Web.UI.ScriptManager> klasa jest używana do ustawiania fokus podczas asynchronicznego ogłaszania zwrotnego. Podczas ogłaszania zwrotnego i po stronie najpierw renderowania <xref:System.Web.UI.ScriptManager.SetFocus%2A> wywołania metody <xref:System.Web.UI.Page.SetFocus%2A> metody <xref:System.Web.UI.Page> klasy.  
  
 Jeśli jest wiele wywołań <xref:System.Web.UI.ScriptManager.SetFocus%2A> formantu określony w ostatnim wywołaniu metody uzyskuje fokus.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SupportsPartialRendering">
      <MemberSignature Language="C#" Value="public bool SupportsPartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsPartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportsPartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsPartialRendering { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy klient obsługuje częściowego renderowania strony.</summary>
        <value>
          <see langword="true" /> Jeśli klient obsługuje renderowania stron częściowych; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> właściwość jest ustawiona na `false`, <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> zwraca właściwość `false`.  
  
 Sprawdź domyślne, aby określić, czy renderowanie stron częściowych jest obsługiwane zwraca `true` gdy są spełnione następujące warunki:  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.W3CDomVersion%2A> Wartość właściwości musi być większa lub równa 1.0.  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> Wartość właściwości musi być większa lub równa 1.0.  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> Musi mieć ustawioną wartość właściwości `true`.  
  
 Gdy <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> właściwość jest jawnie ustawiona, kontrole nie są używane.  
  
 Deweloperzy formant powinien używać <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> właściwości w celu określenia, czy powinien obsługiwać się częściowego renderowania strony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> Właściwość jest <see langword="false" /> i <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> ustawiono właściwość <see langword="true" />.  \- lub - <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> właściwość została ustawiona po <see cref="E:System.Web.UI.Control.Init" /> zdarzeń.</exception>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean Implements IPostBackDataHandler.LoadPostData" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Web.UI.IPostBackDataHandler.LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection) = System::Web::UI::IPostBackDataHandler::LoadPostData;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">— Identyfikator klucza dla formantu.</param>
        <param name="postCollection">Kolekcja wszystkich przychodzących danych post.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Web.UI.ScriptManager" /> stan formantu został zmieniony w wyniku odświeżania strony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Web.UI.ScriptManager> wystąpienia jest rzutowane na <xref:System.Web.UI.IPostBackDataHandler> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostDataChangedEvent () Implements IPostBackDataHandler.RaisePostDataChangedEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() = System::Web::UI::IPostBackDataHandler::RaisePostDataChangedEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Web.UI.ScriptManager> wystąpienia jest rzutowane na <xref:System.Web.UI.IPostBackDataHandler> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Ciąg par klucz/wartość, które reprezentują stan historii strony sieci Web.</param>
        <summary>Włącza <see cref="T:System.Web.UI.ScriptManager" /> formantu, aby przetworzyć zdarzenie ogłaszania zwrotnego strony i załadować historii stanu strony sieci Web.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.IsSecureConnection">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IScriptManager.IsSecureConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IScriptManager.IsSecureConnection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#IsSecureConnection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSecureConnection As Boolean Implements IScriptManager.IsSecureConnection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.IScriptManager.IsSecureConnection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue) = System::Web::UI::IScriptManager::RegisterArrayDeclaration;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="arrayName">To be added.</param>
        <param name="arrayValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterClientScriptBlock;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url) = System::Web::UI::IScriptManager::RegisterClientScriptInclude;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName) = System::Web::UI::IScriptManager::RegisterClientScriptResource;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="resourceName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterDispose">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript) = System::Web::UI::IScriptManager::RegisterDispose;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="disposeScript">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode) = System::Web::UI::IScriptManager::RegisterExpandoAttribute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="controlId">To be added.</param>
        <param name="attributeName">To be added.</param>
        <param name="attributeValue">To be added.</param>
        <param name="encode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterHiddenField">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldValue) = System::Web::UI::IScriptManager::RegisterHiddenField;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="hiddenFieldName">To be added.</param>
        <param name="hiddenFieldValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script) = System::Web::UI::IScriptManager::RegisterOnSubmitStatement;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterPostBackControl">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterPostBackControl(System::Web::UI::Control ^ control) = System::Web::UI::IScriptManager::RegisterPostBackControl;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterStartupScript">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterStartupScript;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.SetFocusInternal">
      <MemberSignature Language="C#" Value="void IScriptManager.SetFocusInternal (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.SetFocusInternal(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#SetFocusInternal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetFocusInternal (clientID As String) Implements IScriptManager.SetFocusInternal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.SetFocusInternal(System::String ^ clientID) = System::Web::UI::IScriptManager::SetFocusInternal;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zastępuje <see cref="P:System.Web.UI.Control.Visible" /> właściwość, która jest dziedziczona z podstawowym <see cref="T:System.Web.UI.Control" /> klasę, aby zapobiec ustawienie tej wartości.</summary>
        <value>
          <see langword="true" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Control.Visible%2A> Właściwość nie zostanie zastąpiona w <xref:System.Web.UI.ScriptManager> klasę, aby zapobiec ustawienie tej wartości. A <xref:System.NotImplementedException> błąd występuje, gdy wartość jest przypisany do tej właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Wartość jest przypisany do <see cref="P:System.Web.UI.ScriptManager.Visible" /> właściwości.</exception>
      </Docs>
    </Member>
  </Members>
</Type>