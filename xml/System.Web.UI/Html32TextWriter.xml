<Type Name="Html32TextWriter" FullName="System.Web.UI.Html32TextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="16d7105a6f6c8c2f1f1938cef401d72e202f1d76" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69388519" /></Metadata><TypeSignature Language="C#" Value="public class Html32TextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Html32TextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class Html32TextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class Html32TextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type Html32TextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje serie znaków HTML 3,2 i tekstu do strumienia wyjściowego dla kontrolki serwera ASP.NET. Klasa <see cref="T:System.Web.UI.Html32TextWriter" /> udostępnia funkcje formatowania, które są używane przez formanty serwera ASP.NET podczas renderowania zawartości HTML 3,2 na klientach.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa jest alternatywą <xref:System.Web.UI.HtmlTextWriter> dla klasy. <xref:System.Web.UI.Html32TextWriter> Konwertuje atrybuty stylu HTML 4,0 do odpowiednich tagów i atrybutów HTML 3,2. Pozwala ona na standaryzację propagacji atrybutów, takich jak kolory i czcionki, przy użyciu tabel HTML. ASP.NET automatycznie używa tej klasy dla przeglądarki HTML 3,2 i wcześniejszych, sprawdzając <xref:System.Web.Configuration.HttpCapabilitiesBase.TagWriter%2A> Właściwość <xref:System.Web.HttpBrowserCapabilities> klasy. Jeśli nie utworzysz niestandardowej strony ani karty kontrolnej, która odwołuje się do urządzeń korzystających z znaczników HTML 3,2, nie trzeba jawnie tworzyć wystąpienia <xref:System.Web.UI.Html32TextWriter> klasy.  
  
 Aby uzyskać więcej informacji na temat dostosowywania renderowania stron i kontrolek, zobacz [Przewodnik: Opracowywanie i używanie niestandardowej kontrolki](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)serwera sieci Web.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać klasy o nazwie `CustomHtml32TextWriter`, która pochodzi <xref:System.Web.UI.Html32TextWriter> od klasy. `CustomHtml32TextWriter`tworzy dwa konstruktory, które są zgodne ze wzorcem, <xref:System.Web.UI.HtmlTextWriter> który jest ustanowiony <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A>przez klasę <xref:System.Web.UI.Html32TextWriter.RenderBeforeTag%2A>i zastępuje <xref:System.Web.UI.Html32TextWriter.RenderAfterTag%2A> metody, <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A>,, i.  
  
 [!code-csharp[System.Web.UI.Html32TextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/cs/html32textwritersamps.cs#1)]
 [!code-vb[System.Web.UI.Html32TextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/VB/html32textwritersamps.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.HtmlTextWriter" />
    <related type="Article" href="https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08">Przewodnik: Tworzenie niestandardowej kontrolki serwera i korzystanie z niej</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.Html32TextWriter" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Html32TextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Html32TextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Html32TextWriter : System.IO.TextWriter -&gt; System.Web.UI.Html32TextWriter" Usage="new System.Web.UI.Html32TextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> To renderuje zawartość HTML.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.Html32TextWriter" /> klasy, która używa wcięcia wiersza, które jest określone <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> w polu, gdy przeglądarka żądająca wymaga wcięcia wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Html32TextWriter.%23ctor%2A> Konstruktor przekazujewartośćpoladodrugiejwersji,która<xref:System.Web.UI.HtmlTextWriter.DefaultTabString> ma dwa następujące parametry:  
  
-   `writer`, która przyjmuje wystąpienie <xref:System.IO.TextWriter> klasy.  
  
-   `tabString`, który pobiera ciąg znaków, który definiuje wcięcia linii.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać klasy niestandardowej, która pochodzi od <xref:System.Web.UI.Html32TextWriter> klasy. Ma dwa konstruktory, które są standardowe dla wszystkich klas, które są wyprowadzane bezpośrednio lub <xref:System.Web.UI.HtmlTextWriter> pośrednio z klasy.  
  
 [!code-csharp[System.Web.UI.Html32TextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/cs/html32textwritersamps.cs#1)]
 [!code-vb[System.Web.UI.Html32TextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/VB/html32textwritersamps.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Html32TextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Html32TextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Html32TextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.Html32TextWriter" Usage="new System.Web.UI.Html32TextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> To renderuje zawartość HTML 3,2.</param>
        <param name="tabString">Ciąg, który reprezentuje liczbę spacji zdefiniowanych przez <see cref="P:System.Web.UI.HtmlTextWriter.Indent" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.Html32TextWriter" /> klasy, która używa określonego wcięcia wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać klasy niestandardowej, która pochodzi od <xref:System.Web.UI.Html32TextWriter> klasy. Ma dwa konstruktory, które są standardowe dla wszystkich klas, które są wyprowadzane bezpośrednio lub <xref:System.Web.UI.HtmlTextWriter> pośrednio z klasy.  
  
 [!code-csharp[System.Web.UI.Html32TextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/cs/html32textwritersamps.cs#1)]
 [!code-vb[System.Web.UI.Html32TextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/VB/html32textwritersamps.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
      </Docs>
    </Member>
    <Member MemberName="FontStack">
      <MemberSignature Language="C#" Value="protected System.Collections.Stack FontStack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Stack FontStack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Html32TextWriter.FontStack" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property FontStack As Stack" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Stack ^ FontStack { System::Collections::Stack ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FontStack : System.Collections.Stack" Usage="System.Web.UI.Html32TextWriter.FontStack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Stack</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję informacji o czcionce dla kodu HTML do renderowania.</summary>
        <value>Kolekcja informacji o czcionce.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected override string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="override this.GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string" Usage="html32TextWriter.GetTagName tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Wartość <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wyliczenia, dla której ma zostać uzyskany element HTML.</param>
        <summary>Zwraca element HTML, który jest skojarzony z określoną <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartością wyliczenia.</summary>
        <returns>Element HTML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `tagKey` <xref:System.Web.UI.Html32TextWriter.ShouldPerformDivTableSubstitution%2A> `true`Jeśli pole jest przesyłane i właściwość jest ,<xref:System.Web.UI.Html32TextWriter.GetTagName%2A> Metoda zwraca`table`element. <xref:System.Web.UI.HtmlTextWriterTag.Div?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="html32TextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu HTML do zapisu w strumieniu wyjściowym.</param>
        <param name="value">Wartość skojarzona z atrybutem stylu HTML.</param>
        <param name="key">Wartość <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wyliczenia skojarzona z atrybutem stylu html.</param>
        <summary>Określa, czy należy napisać określony atrybut stylu HTML i jego wartość do strumienia wyjściowego.</summary>
        <returns><see langword="true" />Jeśli atrybut stylu HTML i jego wartość będą renderowane do strumienia wyjściowego; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda obsługuje mniejszą liczbę atrybutów stylu HTML <xref:System.Web.UI.Html32TextWriter.OnStyleAttributeRender%2A> niż Metoda zastąpień. <xref:System.Web.UI.Html32TextWriter.OnStyleAttributeRender%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="html32TextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Element HTML do zapisu w strumieniu wyjściowym.</param>
        <param name="key">Wartość <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wyliczenia skojarzona z elementem HTML.</param>
        <summary>Określa, czy należy napisać określony element HTML do strumienia wyjściowego.</summary>
        <returns><see langword="true" />Jeśli element HTML jest zapisywana w strumieniu wyjściowym; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true` <xref:System.Web.UI.Html32TextWriter.OnTagRender%2A> Jeśli właściwość ma wartość, metoda zastępuje wszystkie `div` elementy, które są renderowane przez kontrolkę z `table` elementami. <xref:System.Web.UI.Html32TextWriter.ShouldPerformDivTableSubstitution%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected override string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ RenderAfterContent();" />
      <MemberSignature Language="F#" Value="override this.RenderAfterContent : unit -&gt; string" Usage="html32TextWriter.RenderAfterContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje dowolny tekst lub odstępy, które pojawiają się po zawartości elementu HTML.</summary>
        <returns>Odstępy lub tekst do zapisu po zawartości elementu HTML; w przeciwnym razie, jeśli nie ma takich informacji do renderowania <see langword="null" />,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> jak zastąpić metodę. Każda zastąpiona metoda najpierw sprawdza, `th` czy element jest renderowany, a następnie <xref:System.Web.UI.Html32TextWriter.SupportsBold%2A> używa metody, aby sprawdzić, czy żądanie urządzenia może wyświetlać pogrubione formatowanie. Jeśli urządzenie obsługuje formatowanie pogrubione, <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> Metoda zapisuje tag `b` zamykający elementu. Jeśli urządzenie nie obsługuje formatowania pogrubionego, <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> Metoda zapisuje tag `font` zamykający elementu.  
  
 Następnie kod sprawdza, czy `h4` element jest renderowany, a następnie <xref:System.Web.UI.Html32TextWriter.SupportsItalic%2A> używa właściwości, aby sprawdzić, czy żądanie urządzenia może wyświetlać kursywę. Jeśli urządzenie obsługuje kursywę, <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> Metoda zapisuje tag `i` zamykający elementu. Jeśli urządzenie nie obsługuje formatowania kursywy, <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> Metoda zapisuje tag `font` zamykający elementu.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.Html32TextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.Html32TextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/cs/html32textwritersamps.cs#4)]
 [!code-vb[System.Web.UI.Html32TextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/VB/html32textwritersamps.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Html32TextWriter.RenderBeforeContent" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected override string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ RenderAfterTag();" />
      <MemberSignature Language="F#" Value="override this.RenderAfterTag : unit -&gt; string" Usage="html32TextWriter.RenderAfterTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje wszystkie odstępy lub tekst występujący po tagu zamykającym elementu HTML.</summary>
        <returns>Odstępy lub tekst do zapisu po tagu zamykającym elementu HTML; w przeciwnym razie, jeśli nie ma takich informacji do renderowania <see langword="null" />,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.Html32TextWriter.RenderAfterTag%2A> jak zastąpić metodę. Kod sprawdza, `a` czy element jest renderowany. Jeśli tak, <xref:System.Web.UI.Html32TextWriter.RenderAfterTag%2A> Metoda zapisuje tag `small` zamykający elementu. Przykładem dla <xref:System.Web.UI.Html32TextWriter.RenderBeforeTag%2A> metody jest wykonywanie tego samego sprawdzenia `a` dla elementu, a następnie zapisanie tagu `small` otwierającego elementu.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.Html32TextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.Html32TextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/cs/html32textwritersamps.cs#5)]
 [!code-vb[System.Web.UI.Html32TextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/VB/html32textwritersamps.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Html32TextWriter.RenderBeforeTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected override string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ RenderBeforeContent();" />
      <MemberSignature Language="F#" Value="override this.RenderBeforeContent : unit -&gt; string" Usage="html32TextWriter.RenderBeforeContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje wszelkie odstępy tabulacji lub informacje o czcionce, które są wyświetlane przed zawartością zawartą w elemencie HTML.</summary>
        <returns>Informacje o czcionce lub odstępach do zapisu przed renderowaniem zawartości elementu HTML; w przeciwnym razie, jeśli nie ma takich informacji do renderowania <see langword="null" />,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> jak zastąpić metodę. Kod sprawdza, czy `th` element jest renderowany, a następnie <xref:System.Web.UI.Html32TextWriter.SupportsBold%2A> używa metody, aby sprawdzić, czy żądanie urządzenia może wyświetlać pogrubione formatowanie. Jeśli urządzenie obsługuje formatowanie pogrubione, <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> Metoda zapisuje tag `b` otwierający elementu. Jeśli urządzenie nie obsługuje formatowania pogrubionego, <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> Metoda zapisuje tag `font` otwierającego elementu z `color` atrybutem ustawionym na wartość szesnastkową dla czerwieni.  
  
 Następnie każda metoda sprawdza, czy `h4` element jest renderowany, a następnie <xref:System.Web.UI.Html32TextWriter.SupportsItalic%2A> używa właściwości, aby sprawdzić, czy żądanie urządzenia może wyświetlać kursywę. Jeśli urządzenie obsługuje kursywę, <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> Metoda zapisuje tag `i` otwierający elementu. Jeśli urządzenie nie obsługuje formatowania kursywy, <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> Metoda zapisuje tag `font` otwierającego elementu z `color` atrybutem ustawionym na wartość szesnastkową dla granatu niebieski.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.Html32TextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.Html32TextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/cs/html32textwritersamps.cs#2)]
 [!code-vb[System.Web.UI.Html32TextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/VB/html32textwritersamps.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Html32TextWriter.RenderAfterContent" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected override string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ RenderBeforeTag();" />
      <MemberSignature Language="F#" Value="override this.RenderBeforeTag : unit -&gt; string" Usage="html32TextWriter.RenderBeforeTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje wszystkie odstępy tekstu lub tabulatorów, które występują przed tagiem otwierającym elementu HTML w strumieniu wyjściowym HTML 3,2.</summary>
        <returns>Informacje o czcionce i odstępach HTML do renderowania przed tagiem; w przeciwnym razie, jeśli nie ma takich informacji do renderowania <see langword="null" />,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.Html32TextWriter.RenderBeforeTag%2A> jak zastąpić metodę. Kod sprawdza, `a` czy element jest renderowany. Jeśli tak, zastąpiona <xref:System.Web.UI.Html32TextWriter.RenderBeforeTag%2A> Metoda zapisuje tag `small` otwierający elementu. Przykład dla <xref:System.Web.UI.Html32TextWriter.RenderAfterTag%2A> wykonuje to samo sprawdzenie `a` dla elementu, a następnie zapisuje tag `small` zamykający elementu.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.Html32TextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.Html32TextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/cs/html32textwritersamps.cs#3)]
 [!code-vb[System.Web.UI.Html32TextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/VB/html32textwritersamps.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Html32TextWriter.RenderAfterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public override void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="override this.RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="html32TextWriter.RenderBeginTag tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Wartość <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wyliczenia wskazująca, który element HTML ma zostać zapisany.</param>
        <summary>Zapisuje tag otwierającego określonego elementu w strumieniu wyjściowym HTML 3,2.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `table` `true` <xref:System.Web.UI.Html32TextWriter.ShouldPerformDivTableSubstitution%2A> <xref:System.Web.UI.Html32TextWriter.RenderBeginTag%2A> Jeśli element jest określony, a wartość właściwości to, Metoda wykonuje podstawowe formatowanie elementu, aby przedstawić zawartość znajdującą się w `div` elemencie. `div`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public override void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Html32TextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RenderEndTag();" />
      <MemberSignature Language="F#" Value="override this.RenderEndTag : unit -&gt; unit" Usage="html32TextWriter.RenderEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje tag końcowy elementu HTML w <see cref="T:System.Web.UI.Html32TextWriter" /> strumieniu wyjściowym wraz z wszelkimi informacjami o czcionce skojarzonymi z elementem.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldPerformDivTableSubstitution">
      <MemberSignature Language="C#" Value="public bool ShouldPerformDivTableSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldPerformDivTableSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Html32TextWriter.ShouldPerformDivTableSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property ShouldPerformDivTableSubstitution As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldPerformDivTableSubstitution { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShouldPerformDivTableSubstitution : bool with get, set" Usage="System.Web.UI.Html32TextWriter.ShouldPerformDivTableSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość logiczną wskazującą, czy <see langword="Table" /> element <see langword="Div" /> z elementem ma zostać zastąpiony, aby skrócić czas, jaki zajmie renderowanie bloku html.</summary>
        <value><see langword="true" />Aby zastąpić <see langword="Table" /> <see langword="Div" />; w przeciwnym razie <see langword="false" />,.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsBold">
      <MemberSignature Language="C#" Value="public bool SupportsBold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsBold" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Html32TextWriter.SupportsBold" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportsBold As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsBold { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportsBold : bool with get, set" Usage="System.Web.UI.Html32TextWriter.SupportsBold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość logiczną wskazującą, czy żądanie urządzenia obsługuje pogrubiony tekst w formacie HTML. Użyj właściwości <see cref="P:System.Web.UI.Html32TextWriter.SupportsBold" /> , aby warunkowo renderować pogrubiony tekst <see cref="T:System.Web.UI.Html32TextWriter" /> do strumienia wyjściowego.</summary>
        <value><see langword="true" />Jeśli żądanie urządzenia obsługuje pogrubiony tekst; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób przesłania <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> metod i. <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> Każde zastąpienie sprawdza, czy `Label` element jest renderowany, a następnie <xref:System.Web.UI.Html32TextWriter.SupportsBold%2A> używa metody, aby sprawdzić, czy żądanie urządzenia może wyświetlać pogrubione formatowanie. Jeśli urządzenie obsługuje formatowanie pogrubione, <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> Metoda zapisuje tag `b` otwierającego elementu, a <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> Metoda zapisuje jego tag zamykający. Jeśli urządzenie <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> nie obsługuje formatowania pogrubionego, Metoda zapisuje tag `Font` otwierającego elementu z `color` atrybutem ustawionym na wartość szesnastkową dla czerwonej, a <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> Metoda zapisuje tag zamykający.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.Html32TextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.Html32TextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/cs/html32textwritersamps.cs#2)]
 [!code-vb[System.Web.UI.Html32TextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/VB/html32textwritersamps.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Html32TextWriter.RenderBeforeContent" />
        <altmember cref="M:System.Web.UI.Html32TextWriter.RenderAfterContent" />
        <altmember cref="P:System.Web.UI.Html32TextWriter.SupportsItalic" />
      </Docs>
    </Member>
    <Member MemberName="SupportsItalic">
      <MemberSignature Language="C#" Value="public bool SupportsItalic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsItalic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Html32TextWriter.SupportsItalic" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportsItalic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsItalic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportsItalic : bool with get, set" Usage="System.Web.UI.Html32TextWriter.SupportsItalic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość logiczną wskazującą, czy urządzenie żądające obsługuje kursywę tekst HTML. Użyj właściwości <see cref="P:System.Web.UI.Html32TextWriter.SupportsItalic" /> , aby warunkowo renderować tekst pisany kursywą <see cref="T:System.Web.UI.Html32TextWriter" /> do strumienia wyjściowego.</summary>
        <value><see langword="true" />Jeśli żądanie urządzenia obsługuje kursywę; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób przesłania <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> metod i. <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> Każde zastąpienie sprawdza, czy `span` element jest renderowany, a następnie <xref:System.Web.UI.Html32TextWriter.SupportsItalic%2A> używa właściwości, aby sprawdzić, czy żądanie urządzenia może wyświetlać kursywę. Jeśli urządzenie obsługuje kursywę, <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> Metoda zapisuje tag `i` otwierającego elementu, a <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> Metoda zapisuje jego tag zamykający. Jeśli urządzenie <xref:System.Web.UI.Html32TextWriter.RenderBeforeContent%2A> nie obsługuje formatowania kursywy, Metoda zapisuje tag `Font` otwierającego elementu z `color` atrybutem ustawionym na wartość <xref:System.Web.UI.Html32TextWriter.RenderAfterContent%2A> szesnastkową dla granatu niebieska, a metoda zapisuje tag zamykający.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.Html32TextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.Html32TextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/cs/html32textwritersamps.cs#2)]
 [!code-vb[System.Web.UI.Html32TextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Html32TextWriter_Samples1/VB/html32textwritersamps.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Html32TextWriter.RenderBeforeContent" />
        <altmember cref="M:System.Web.UI.Html32TextWriter.RenderAfterContent" />
        <altmember cref="P:System.Web.UI.Html32TextWriter.SupportsBold" />
      </Docs>
    </Member>
  </Members>
</Type>
