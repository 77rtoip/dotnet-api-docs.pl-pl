<Type Name="ControlCollection" FullName="System.Web.UI.ControlCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0b959c74697841b7d198d15a346c4d91ae3e562f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37589437" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ControlCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ControlCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlCollection : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type ControlCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia kontener kolekcji, który umożliwia formanty serwera ASP.NET utrzymywać listę swoich formantów podrzędnych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz uzyskać dostęp właściwości i metod <xref:System.Web.UI.ControlCollection> klasy za pomocą <xref:System.Web.UI.Control.Controls%2A?displayProperty=nameWithType> właściwości. Ponieważ <xref:System.Web.UI.Control> klasy jest klasą bazową dla wszystkich kontrolek serwera ASP.NET, wszystkie formanty na serwerze dziedziczą tę właściwość.  
  
 Aby uzyskać więcej informacji na temat kolekcji, zobacz [kolekcje i struktury danych](http://msdn.microsoft.com/library/60cc581f-1db5-445b-ba04-a173396bf872).  
  
   
  
## Examples  
 Poniższy kod przykład zastąpienia <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> metodę w celu utworzenia dwóch kontrolek, oba wystąpienia klasy niestandardowej o nazwie `ChildControl`, która ma właściwość ciągu o nazwie `Message`. Po utworzeniu dwóch kontrolek zostaną dodane do <xref:System.Web.UI.ControlCollection>. <xref:System.Web.UI.ControlCollection.Add%2A> Metoda jest wywoływana w każdej z tych kontrolek, aby dodać je do klasy, która zawiera tę wersję <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType>. <xref:System.Web.UI.Control.ChildControlsCreated%2A> Właściwość jest ustawiona na `true` tak, aby tych kontrolek nie zostanie utworzony ponownie niepotrzebnie.  
  
 [!code-csharp[Control_Sample_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Control_Sample_1/CS/control_sample.cs#1)]
 [!code-vb[Control_Sample_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Control_Sample_1/VB/control_sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.UI.Control.Controls" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlCollection (System.Web.UI.Control owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Control owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.#ctor(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlCollection(System::Web::UI::Control ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ControlCollection : System.Web.UI.Control -&gt; System.Web.UI.ControlCollection" Usage="new System.Web.UI.ControlCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="owner">Formant serwera ASP.NET, utworzony dla kolekcji formantów.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ControlCollection" /> klasy dla kontrolki serwera określonego elementu nadrzędnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest niestandardowy <xref:System.Web.UI.ControlCollection> klasę, która zastępuje konstruktora, aby zapisywać komunikaty (który obejmuje nazwę <xref:System.Web.UI.ControlCollection.Owner%2A> właściwości) w dzienniku śledzenia, gdy tworzone jest wystąpienie kolekcji. Należy włączyć śledzenie dla strony lub aplikacji, w tym przykładzie do pracy.  
  
 [!code-csharp[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Występuje, gdy <paramref name="owner" /> parametr <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (child As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Web::UI::Control ^ child);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Web.UI.Control -&gt; unit&#xA;override this.Add : System.Web.UI.Control -&gt; unit" Usage="controlCollection.Add child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="child">
          <see cref="T:System.Web.UI.Control" /> Do dodania do kolekcji.</param>
        <summary>Dodaje określony <see cref="T:System.Web.UI.Control" /> do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nowy formant jest dodawany do końca tablicy indeksem. Formant może być wystąpieniem elementu dowolny formant serwera ASP.NET, niestandardowy formant serwera utworzonej lub formancie literal.  
  
 Aby dodać formant do kolekcji w lokalizacji określonej indeksu, należy użyć <xref:System.Web.UI.ControlCollection.AddAt%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.UI.ControlCollection.Add%2A> metody w celu dodania szereg elementów szablonu, liczba są pobierane z stan widoku formant serwera, aby formant z szablonem niestandardowego.  
  
 [!code-csharp[TemplatedDataBoundControl#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Element zgłaszany, gdy <paramref name="child" /> parametr określa formantu.</exception>
        <exception cref="T:System.Web.HttpException">Element zgłaszany, gdy <see cref="T:System.Web.UI.ControlCollection" /> jest tylko do odczytu.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public virtual void AddAt (int index, System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAt(int32 index, class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAt (index As Integer, child As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAt(int index, System::Web::UI::Control ^ child);" />
      <MemberSignature Language="F#" Value="abstract member AddAt : int * System.Web.UI.Control -&gt; unit&#xA;override this.AddAt : int * System.Web.UI.Control -&gt; unit" Usage="controlCollection.AddAt (index, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w tablicy, w którym można dodać kontrolki podrzędnej.</param>
        <param name="child">
          <see cref="T:System.Web.UI.Control" /> Do dodania do kolekcji.</param>
        <summary>Dodaje określony <see cref="T:System.Web.UI.Control" /> obiektu do kolekcji w określonej lokalizacji indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dodano kontroli może być wystąpieniem dowolny formant serwera ASP.NET, niestandardowy formant serwera utworzonej lub formancie literal.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.UI.ControlCollection.AddAt%2A> metodę, aby utworzyć nową <xref:System.Web.UI.LiteralControl> o nazwie `ChildControl2` i dodać go do `myButton` kontrolki <xref:System.Web.UI.ControlCollection> kolekcji w lokalizacji indeks 1.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="child" /> Parametr określa formantu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> Parametr jest mniejsza od zera lub większa niż <see cref="P:System.Web.UI.ControlCollection.Count" /> właściwości.</exception>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.UI.ControlCollection" /> Jest tylko do odczytu.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="controlCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie kontrolki z bieżącym kontrolki serwera <see cref="T:System.Web.UI.ControlCollection" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusty kontrolkę niestandardową przy użyciu tej metody <xref:System.Web.UI.ControlCollection> podczas zastąpienia <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> i <xref:System.Web.UI.Control.DataBind%2A> metody. W tym podczas tworzenia złożonych, oparte na szablonach formantów lub oparte na szablonach formantów powiązanych z danymi.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, zastępowanie <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> metody i przy użyciu <xref:System.Web.UI.ControlCollection.Clear%2A> metodę, aby usunąć wszystkich kontrolek podrzędnych wcześniej w <xref:System.Web.UI.ControlCollection> obiektu. W takim przypadku należy to zrobić, aby przestarzałe obiektów w kontroli nad <xref:System.Web.UI.ControlCollection> niewłaściwie nie są wyświetlane.  
  
 [!code-csharp[TemplatedDataBoundControl#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (System.Web.UI.Control c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Web.UI.Control c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Contains(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (c As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Web::UI::Control ^ c);" />
      <MemberSignature Language="F#" Value="abstract member Contains : System.Web.UI.Control -&gt; bool&#xA;override this.Contains : System.Web.UI.Control -&gt; bool" Usage="controlCollection.Contains c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="c">Formant serwera, aby wyszukać w kolekcji.</param>
        <summary>Określa, czy formant serwera określonego formantu serwera nadrzędnego <see cref="T:System.Web.UI.ControlCollection" /> obiektu.</summary>
        <returns>
          <see langword="true" /> Jeśli formant określonego serwera istnieje w kolekcji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[System.Web.UI.ctrlCollection_Contains#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/CS/ctrlcollection_contains.cs.aspx#1)]
 [!code-vb[System.Web.UI.ctrlCollection_Contains#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/VB/ctrlcollection_contains.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="controlCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> Do formanty podrzędne do skopiowania.</param>
        <param name="index">Liczony od zera indeks względne w <c>tablicy</c> gdzie rozpoczyna się kopiowanie.</param>
        <summary>Formanty podrzędne są przechowywane w kopii <see cref="T:System.Web.UI.ControlCollection" /> obiekt <see cref="T:System.Array" /> obiektu, rozpoczynając od określonej lokalizacji indeksu w <see cref="T:System.Array" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="array" /> nie jest <see langword="null" /> i nie jest jednowymiarowa.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.UI.ControlCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę kontrolek serwera w <see cref="T:System.Web.UI.ControlCollection" /> obiektu dla określonej kontrolki serwera ASP.NET.</summary>
        <value>Liczba kontrolek serwera w <see cref="T:System.Web.UI.ControlCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.ControlCollection.Count%2A> właściwości do iteracji przez kontrolki <xref:System.Web.UI.ControlCollection> obiektu. Korzystanie z <xref:System.Web.UI.Control.HasControls%2A?displayProperty=nameWithType> właściwość sprawdza, czy formant ma formantów podrzędnych. Jeśli <xref:System.Web.UI.Control.HasControls%2A?displayProperty=nameWithType> zwraca `false`, pozostałe kodu nie działa.  
  
 [!code-csharp[Classic Control.HasControls Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Control.HasControls Example/CS/source.cs#1)]
 [!code-vb[Classic Control.HasControls Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Control.HasControls Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="controlCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający, który można wykonać iterację <see cref="T:System.Web.UI.ControlCollection" /> obiektu.</summary>
        <returns>Moduł wyliczający do iterowania po kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu tworzy metodę, która wylicza <xref:System.Web.UI.ControlCollection> zbiór <xref:System.Web.UI.WebControls.Button> kontroli `myButton`. Podczas tworzenia modułu wyliczającego <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> właściwość jest zaznaczona, aby zobaczyć, jeśli operacja jest bezpieczny dla wątków, a nie jest dostępna, <xref:System.Web.UI.ControlCollection.SyncRoot%2A> właściwość jest używana do uzyskiwania obiektu nawiązać bezpieczne wątku operacji. Po wykonaniu wyliczenia, wartość <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> właściwości są zapisywane jako <xref:System.Web.UI.WebControls.Label.Text%2A> właściwość <xref:System.Web.UI.WebControls.Label> kontrolki na stronie zawierającej.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.IndexOf(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (value As Control) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::Web::UI::Control ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : System.Web.UI.Control -&gt; int&#xA;override this.IndexOf : System.Web.UI.Control -&gt; int" Usage="controlCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Web.UI.Control" /> Dla zwracany jest indeks.</param>
        <summary>Pobiera indeks określonego <see cref="T:System.Web.UI.Control" /> obiektu w kolekcji.</summary>
        <returns>Indeks kontroli określonego serwera. Jeśli formant serwera nie jest obecnie członkiem kolekcji, zwraca -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do określenia lokalizacji indeksu kontrolki określonego serwera <xref:System.Web.UI.ControlCollection> obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.UI.ControlCollection.IndexOf%2A> metodę, aby zapisać lokalizacja w indeksie kontrolki, `myLiteralControl`w <xref:System.Web.UI.ControlCollection> zbiór <xref:System.Web.UI.WebControls.Button> formantu o nazwie `myButton`.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Web.UI.ControlCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Web.UI.ControlCollection" /> obiekt jest tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Jeśli kontrolka jest tylko do odczytu. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu tworzy metodę, która wylicza <xref:System.Web.UI.ControlCollection> zbiór <xref:System.Web.UI.WebControls.Button> kontroli `myButton`. Podczas tworzenia modułu wyliczającego <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> właściwość jest zaznaczona, aby zobaczyć, jeśli operacja jest bezpieczny dla wątków, a nie jest dostępna, <xref:System.Web.UI.ControlCollection.SyncRoot%2A> właściwość jest używana do uzyskiwania obiektu nawiązać bezpieczne wątku operacji. Po zakończeniu wyliczenia, wartość <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> właściwości są zapisywane jako <xref:System.Web.UI.WebControls.Label.Text%2A> właściwość <xref:System.Web.UI.WebControls.Label> kontrolki na stronie zawierającej.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Web.UI.ControlCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Web.UI.ControlCollection" /> obiektu jest zsynchronizowany.</summary>
        <value>Ta właściwość jest zawsze <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu tworzy metodę, która wylicza <xref:System.Web.UI.ControlCollection> zbiór <xref:System.Web.UI.WebControls.Button> kontroli `myButton`. Podczas tworzenia modułu wyliczającego <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> właściwość jest zaznaczona, aby zobaczyć, jeśli operacja jest bezpieczny dla wątków, a nie jest dostępna, <xref:System.Web.UI.ControlCollection.SyncRoot%2A> właściwość jest używana do uzyskiwania obiektu nawiązać bezpieczne wątku operacji. Po zakończeniu wyliczenia, wartość <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> właściwości są zapisywane jako <xref:System.Web.UI.WebControls.Label.Text%2A> właściwość <xref:System.Web.UI.WebControls.Label> kontrolki na stronie zawierającej.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Control this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(index As Integer) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::Control ^ default[int] { System::Web::UI::Control ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Web.UI.Control" Usage="System.Web.UI.ControlCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Położenie formantu serwera w <see cref="T:System.Web.UI.ControlCollection" />.</param>
        <summary>Pobiera odwołanie do kontrolki serwera w określonej lokalizacji indeksu w <see cref="T:System.Web.UI.ControlCollection" /> obiektu.</summary>
        <value>Odwołanie do formantu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.UI.ControlCollection.Item%2A> właściwości w celu określenia lokalizacji indeksu dziecka kontrolkę, która zostanie usunięty w <xref:System.Web.UI.ControlCollection.Remove%2A> wywołania metody. Jest to wykonywane przez `myButton.Controls.Remove` składni.  
  
 [!code-aspx-csharp[ControlCollection_ReSubmit_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/CS/controlcollection_copyto.cs.aspx#1)]
 [!code-aspx-vb[ControlCollection_ReSubmit_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/VB/controlcollection_copyto.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> Parametr jest mniejsza od zera lub w większa lub równa <see cref="P:System.Web.UI.ControlCollection.Count" />.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Control Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Owner" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Owner" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Owner As Control" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Control ^ Owner { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Web.UI.Control" Usage="System.Web.UI.ControlCollection.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera formant serwera ASP.NET, do którego <see cref="T:System.Web.UI.ControlCollection" /> należy obiekt.</summary>
        <value>
          <see cref="T:System.Web.UI.Control" /> Do której <see cref="T:System.Web.UI.ControlCollection" /> należy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest niestandardowy <xref:System.Web.UI.ControlCollection> klasę, która zastępuje <xref:System.Web.UI.ControlCollection.%23ctor%2A> metody, aby zapisywać komunikaty (który obejmuje nazwę <xref:System.Web.UI.ControlCollection.Owner%2A> właściwości) w dzienniku śledzenia, gdy tworzone jest wystąpienie kolekcji. Należy włączyć śledzenie dla strony lub aplikacji, w tym przykładzie do pracy.  
  
 [!code-csharp[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (value As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Web::UI::Control ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Web.UI.Control -&gt; unit&#xA;override this.Remove : System.Web.UI.Control -&gt; unit" Usage="controlCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">Formant serwera, który ma zostać usunięty.</param>
        <summary>Usuwa kontroli określonego serwera z formantu serwera nadrzędnego <see cref="T:System.Web.UI.ControlCollection" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć formant z lokalizacją indeksu, należy użyć <xref:System.Web.UI.ControlCollection.RemoveAt%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.UI.ControlCollection.Remove%2A> metodę, aby usunąć kontrolki podrzędnej z `myButton` kontrolki serwera. Najpierw kod używa <xref:System.Web.UI.ControlCollection.Contains%2A> metodę pozwala ustalić czy `myChildControl` znajduje się w <xref:System.Web.UI.ControlCollection> obiektu, a jeśli tak jest, powoduje jej usunięcie.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#4)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="controlCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeksem porządkowym formant serwera, który ma zostać usunięty z kolekcji.</param>
        <summary>Usuwa kontrolki podrzędnej, w określonej lokalizacji indeksu, z <see cref="T:System.Web.UI.ControlCollection" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć formant z kolekcji, w oparciu o jego wartość, należy użyć <xref:System.Web.UI.ControlCollection.Remove%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.UI.ControlCollection.RemoveAt%2A> metodę, aby usunąć kontrolki podrzędnej z `myButton` kontrolki serwera. Wywołanie metody określa najpierw Lokalizacja indeksu, 1, w którym formant zostanie usunięty. Przykład, a następnie zapisuje do zawierającego stronie wiadomość SMS z informacją, że formant w tej lokalizacji został usunięty z <xref:System.Web.UI.ControlCollection> kolekcji.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#5)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Element zgłaszany, gdy <see cref="T:System.Web.UI.ControlCollection" /> jest tylko do odczytu.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Web.UI.ControlCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który może służyć do synchronizowania dostępu do kolekcji kontrolek.</summary>
        <value>
          <see cref="T:System.Object" /> Używane do synchronizowania kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu tworzy metodę, która wylicza <xref:System.Web.UI.ControlCollection> zbiór <xref:System.Web.UI.WebControls.Button> kontroli `myButton`. Podczas tworzenia modułu wyliczającego <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> właściwość jest zaznaczona, aby zobaczyć, jeśli operacja jest bezpieczny dla wątków, a nie jest dostępna, <xref:System.Web.UI.ControlCollection.SyncRoot%2A> właściwość jest używana do uzyskiwania obiektu nawiązać bezpieczne wątku operacji. Po zakończeniu wyliczenia, wartość <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> właściwości są zapisywane jako <xref:System.Web.UI.WebControls.Label.Text%2A> właściwość <xref:System.Web.UI.WebControls.Label> kontrolki na stronie zawierającej.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
  </Members>
</Type>