<Type Name="ICallbackEventHandler" FullName="System.Web.UI.ICallbackEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ef7b1b41a1d7ac8730ff15ee9421d471cd5ace43" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69398230" /></Metadata><TypeSignature Language="C#" Value="public interface ICallbackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICallbackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ICallbackEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICallbackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICallbackEventHandler" />
  <TypeSignature Language="F#" Value="type ICallbackEventHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Służy do wskazywania, że formant może być obiektem docelowym zdarzenia wywołania zwrotnego na serwerze.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.Web.UI.ICallbackEventHandler> interfejs dla dowolnej kontrolki niestandardowej, która musi odbierać zdarzenia wywołania zwrotnego. Aby uzyskać więcej informacji, zobacz [implementowanie wywołań zwrotnych klienta bez ogłaszania zwrotnego](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  
  
 Przykłady formantów, które implementują <xref:System.Web.UI.ICallbackEventHandler> Interfejs <xref:System.Web.UI.WebControls.GridView>, obejmują kontrolki, <xref:System.Web.UI.WebControls.TreeView> <xref:System.Web.UI.WebControls.DetailsView>, i. Gdy zdarzenie wywołania zwrotnego odwołuje się do kontrolki <xref:System.Web.UI.ICallbackEventHandler> implementującej <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> interfejs, metoda jest wywoływana w celu obsłużenia zdarzenia, przekazanie argumentu zdarzenia <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> jako parametru, a metoda zwraca wynik wywołania zwrotnego.  
  
 Kontrolki pobierające dane z kontrolki źródła danych podczas wywołania zwrotnego można wykonać synchronicznie lub asynchronicznie. ASP.NET formanty <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>i <xref:System.Web.UI.WebControls.TreeView> są zaimplementowane synchronicznie. Synchroniczne wywołania zwrotne nie uniemożliwiają użytkownikowi pracy w przeglądarce. W trybie synchronicznym można wykonać tylko jedno wywołanie zwrotne w czasie przy ostatnim priorytecie wywołania zwrotnego. Gdy kontrolka sieci Web jest zaimplementowana do obsługi zachowania asynchronicznego, jednocześnie może zostać podniesionych wiele wywołań zwrotnych. Aby uzyskać szczegółowe informacje o programowaniu asynchronicznym, zobacz temat [asynchroniczny wzorzec oparty na zdarzeniach (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).  
  
 Można określić, czy zdarzenia wywołania zwrotnego pochodzące z interfejsu użytkownika renderowane przez kontrolkę implementującą <xref:System.Web.UI.ICallbackEventHandler> interfejs są weryfikowane. Sprawdzanie poprawności zdarzeń jest dobrym sposobem na bezpieczeństwo. Jednak ze względu na wydajność można ją wyłączyć. Aby kontrolować, czy sprawdzanie poprawności zdarzeń odbywa się w przypadku zdarzeń wywołania `enableEventValidation` zwrotnego, należy ustawić atrybut dyrektywy [@ Page](https://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) lub `enableEventValidation` atrybutu [elementu Pages (ASP.NET Settings Schema)](https://msdn.microsoft.com/library/4123bb66-3fe4-4d62-b70e-33758656b458) pliku Web. config. Jeśli ustawisz <xref:System.Web.UI.Page.EnableEventValidation%2A> właściwość w kodzie, ustaw ją `Page_Init` w fazie przetwarzania strony. Aby uzyskać więcej informacji na temat równoważenia korzyści związanych z bezpieczeństwem w celu sprawdzenia poprawności zdarzeń, zobacz [ASP.NET Performance Overview](https://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b).  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
    <altmember cref="M:System.Web.UI.WebControls.DetailsView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
  </Docs>
  <Members>
    <Member MemberName="GetCallbackResult">
      <MemberSignature Language="C#" Value="public string GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCallbackResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackResult () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackResult();" />
      <MemberSignature Language="F#" Value="abstract member GetCallbackResult : unit -&gt; string" Usage="iCallbackEventHandler.GetCallbackResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wyniki zdarzenia wywołania zwrotnego, które jest przeznaczone dla kontrolki.</summary>
        <returns>Wynik wywołania zwrotnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyjątki zgłoszone <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> w programie nie <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> zapobiegają wywoływaniu i zwracaniu wyniku. Aby zapobiec <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> zwracaniu wyniku, Ustaw flagę, gdy wyjątek jest zgłaszany w <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> i zwracają pusty ciąg z <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.DetailsView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.GetCallbackResult" />
      </Docs>
    </Member>
    <Member MemberName="RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="public void RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseCallbackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseCallbackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaiseCallbackEvent : string -&gt; unit" Usage="iCallbackEventHandler.RaiseCallbackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Ciąg, który reprezentuje argument zdarzenia do przekazania do programu obsługi zdarzeń.</param>
        <summary>Przetwarza zdarzenie wywołania zwrotnego, które odwołuje się do kontrolki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy `null` jest używany jako parametr argumentu zdarzenia, ciąg jest serializowany do wartości "null" i wysyłany z powrotem do serwera. Ponieważ nie ma sposobu rozróżniania między `null` i "null", należy unikać używania `null` parametrów argumentów z wywołaniami zwrotnymi.  
  
 Wyjątki zgłoszone <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> w programie nie <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> zapobiegają wywoływaniu i zwracaniu wyniku. Aby zapobiec <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> zwracaniu wyniku, Ustaw flagę, gdy wyjątek jest zgłaszany w <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> i zwracają pusty ciąg z <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      </Docs>
    </Member>
  </Members>
</Type>
