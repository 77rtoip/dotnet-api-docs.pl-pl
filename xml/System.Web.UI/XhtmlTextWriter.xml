<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ed5666c41e14a8c09a19fb6d3a1f051af6117c5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69386402" /></Metadata><TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje tylko rozszerzalne znaki HTML (XHTML), w tym wszystkie różnice modułów XHTML, które pochodzą z XHTML, do strumienia wyjściowego dla kontrolki serwera ASP.NET dla urządzeń przenośnych. Zastąp <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasę, aby zapewnić niestandardowe renderowanie kodu XHTML dla stron ASP.NET i kontrolek serwera.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML jest zgodny z kodem XML językiem znaczników w oparciu o kod HTML 4,1, który umożliwia tworzenie witryn sieci Web, które są odpowiednie dla wielu typów urządzeń. Scala łatwość użycia zapewniane przez HTML z ścisłymi wskazówkami dotyczącymi elementów udostępnianymi przez język XML do tworzenia języka znaczników z szeroką gamę opcji formatowania i stylu oraz z skróconą niejednoznaczność znacznika znaczników. Klasa <xref:System.Web.UI.XhtmlTextWriter> udostępnia funkcje formatowania, które są używane przez formanty serwera ASP.NET podczas renderowania zawartości XHTML na klientach. Możesz użyć <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> metody, aby określić, jakiego typu XHTML renderuje Moduł zapisywania tekstu. Obsługiwane typy dokumentów są zdefiniowane w <xref:System.Web.UI.XhtmlMobileDocType> wyliczeniu.  
  
 <xref:System.Web.UI.XhtmlTextWriter> Klasa renderuje dwa zestawy atrybutów dla elementów. Jeden zestaw jest kolekcją wspólnych atrybutów, jak przywoływany we <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> właściwości. Drugi zestaw jest kolekcją atrybutów specyficznych dla elementu, jak przywoływano we <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> właściwości. Aby uzyskać więcej informacji na temat elementów i stylów, które są renderowane, zobacz specyfikację XHTML modularization w [witrynie sieci Web organizacja World Wide Web Consortium (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 Można użyć elementów członkowskich <xref:System.Web.UI.XhtmlTextWriter> klasy i dowolnych klas pochodnych, aby utworzyć niestandardowe składniki zapisywania tekstu do użycia w niestandardowych kartach stron XHTML lub kartach klas. Można również utworzyć klasy pochodne, które zastępują standardowe zachowanie <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 Domyślnie podczas pracy z przeglądarkami, które obsługują język HTML 4,0, ASP.NET stron i kontrolek renderuje znaczniki zgodne ze standardem XHTML 1,1. Aby uzyskać więcej informacji, zobacz [standardy XHTML w programie Visual Studio i ASP.NET](https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
  
 Dane <xref:System.Web.UI.HtmlTextWriter> wyjściowe XHTML, chyba że skonfigurowano ASP.NET w specjalny sposób, aby nie renderować znaczników XHTML. Aby uzyskać więcej informacji, [zobacz NIB: Instrukcje: Skonfiguruj renderowanie kodu XHTML w witrynach](https://msdn.microsoft.com/library/42483a54-f1ae-44e1-88e6-4370f8690149)sieci Web ASP.NET.  
  
   
  
## Examples  
 Przykład kodu w tej sekcji zawiera cztery części. Pierwszy przykład ilustruje sposób tworzenia klasy pochodnej. Drugi przykład kodu demonstruje, jak utworzyć kontrolkę niestandardową. Trzeci przykład kodu demonstruje, jak używać kontrolki niestandardowej. Czwarty przykład kodu zawiera kod, który jest wymagany do uruchomienia kontrolki niestandardowej.  
  
 Poniższy przykład kodu demonstruje sposób tworzenia klasy niestandardowej, która jest pochodną <xref:System.Web.UI.XhtmlTextWriter> klasy. Ma dwa konstruktory, które są standardowe dla wszystkich klas, które dziedziczą bezpośrednio lub pośrednio <xref:System.Web.UI.HtmlTextWriter> z klasy. Pierwszy Konstruktor przyjmuje <xref:System.IO.TextWriter> obiekt jako parametr i wywołuje drugiego konstruktora, przekazując poniższe dwie wartości parametrów:  
  
-   <xref:System.IO.TextWriter> Wystąpienie.  
  
-   Wartość <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> właściwości, która definiuje domyślne wcięcie linii, które jest używane przez moduł zapisujący tekstu XHTML.  
  
 Ten przykład kodu pokazuje również, jak zastąpić <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metody i <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> w celu odfiltrowania odpowiednio rozmiaru tekstu i stylu koloru. Ponadto zastępuje <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metody i <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> , aby napisać ciąg tekstowy przed i po wyrenderowaniu kontrolki.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 Poniższy przykład kodu demonstruje, jak utworzyć kontrolkę <xref:System.Web.UI.WebControls.Label> niestandardową `TestLabel` o nazwie i kartę niestandardową o nazwie `XhtmlTestLabelAdapter` , która renderuje zawartość formantu jako XHTML.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 Poniższy przykład kodu demonstruje, jak używać kontrolki `TestLabel` niestandardowej na stronie sieci Web ASP.NET.  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 Aby użyć kontrolki niestandardowej w poprzednim przykładzie kodu, Dodaj następujący `<controlAdapters>` element do jednego z dwóch plików. Można dodać go do odpowiedniego pliku całego komputera w podkatalogu dla określonej przeglądarki jako podfolder katalogu konfiguracji .NET Framework. Alternatywnie możesz dodać go do niestandardowego pliku przeglądarki w katalogu App_Browsers w folderze głównym aplikacji sieci Web.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <related type="Article" href="https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97">Zgodność ASP.NET i XHTML</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Wystąpienie, które renderuje zawartość XHTML.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy, która używa wcięcia wiersza, które jest określone <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> w polu. Użyj konstruktora <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> , jeśli nie chcesz zmieniać domyślnego wcięcia wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor, który <xref:System.IO.TextWriter> pobiera obiekt jako parametr wywołuje drugiego konstruktora, przekazując dwa wartości parametrów: <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A>  
  
-   <xref:System.IO.TextWriter> Wystąpienie.  
  
-   Wartość ciągu, która jest określona w <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> polu, która definiuje odstępy tabulacji używane przez moduł zapisujący tekstu XHTML.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak utworzyć dwa konstruktory, które są standardowe dla wszystkich klas, które są wyprowadzane bezpośrednio lub pośrednio <xref:System.Web.UI.HtmlTextWriter> z klasy, dla klasy niestandardowej, która jest pochodną <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Wystąpienie, które renderuje zawartość XHTML.</param>
        <param name="tabString">Ciąg używany do renderowania wcięcia wiersza.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy z określonym wcięciem wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, jak utworzyć dwa konstruktory, które są standardowe dla wszystkich klas, które są wyprowadzane bezpośrednio lub pośrednio <xref:System.Web.UI.HtmlTextWriter> z klasy, dla klasy niestandardowej, która jest pochodną <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element XHTML, do którego ma zostać dodany atrybut.</param>
        <param name="attributeName">Atrybut, który ma zostać dodany.</param>
        <summary>Dodaje atrybut do elementu XHTML. Kolekcja atrybutów specyficznych dla <see cref="T:System.Web.UI.XhtmlTextWriter" /> obiektu jest przywoływana <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> przez właściwość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> , aby dodać atrybut do elementu XHTML. Dodany atrybut może być następnie rozpoznany i renderowany przez <xref:System.Web.UI.XhtmlTextWriter> obiekt. Aby zapobiec renderowania przez moduł zapisu wspólnego atrybutu elementu XHTML, użyj <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt zawierający wspólne atrybuty tagów znaczników <see cref="T:System.Web.UI.XhtmlTextWriter" /> dla obiektu. <see cref="T:System.Collections.Hashtable" /></summary>
        <value><see cref="T:System.Collections.Hashtable" /> Obiekt zawierający wspólne atrybuty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kolekcja zawiera atrybuty, które są dozwolone w elementach XHTML i które nie są pomijane <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> we właściwości. <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> Aby uzyskać więcej informacji na temat typowych atrybutów, zobacz [witrynę sieci Web organizacja World Wide Web Consortium (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 Gdy tworzone jest nowe wystąpienie <xref:System.Web.UI.XhtmlTextWriter> klasy, najczęściej inicjowane atrybuty są następujące:  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Hashtable" /> Pobiera obiekt zawierający atrybuty specyficzne dla elementu.</summary>
        <value><see cref="T:System.Collections.Hashtable" /> Obiekt zawierający atrybuty specyficzne dla elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> , aby dodać rozpoznane atrybuty do elementu XHTML. Aby usunąć typowe atrybuty elementu XHTML, użyj <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> metody.  
  
 Gdy tworzone jest nowe wystąpienie <xref:System.Web.UI.XhtmlTextWriter> klasy <xref:System.Collections.Hashtable> , obiekt atrybutów specyficznych dla elementu jest wypełniany atrybutami podanymi w poniższej tabeli.  
  
|Element|Atrybuty|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 Aby uzyskać więcej informacji na temat elementów i stylów, które są renderowane, zobacz specyfikację XHTML modularization w [witrynie sieci Web organizacja World Wide Web Consortium (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Nazwa atrybutu do sprawdzenia.</param>
        <summary>Sprawdza atrybut XHTML, aby upewnić się, że może być renderowany w tagu <see langword="&lt;form&gt;" /> otwierającym elementu.</summary>
        <returns><see langword="true" />Jeśli atrybut może być stosowany do <see langword="&lt;form&gt;" /> elementu; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przydatna do warunkowego renderowania atrybutu w zależności od tego, czy jest on obsługiwany przez typ dokumentu XHTML urządzenia wysyłającego żądanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest częścią większego przykładu, który tworzy kontrolkę <xref:System.Web.UI.WebControls.Label> niestandardową i adapter, który renderuje zawartość formantu jako XHTML.  
  
 Ten przykład kodu demonstruje, jak utworzyć zmienną wartości logicznej `attTest` o nazwie i ustawić ją na wartość zwracaną, która wynika <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> z wywołania metody z wartością parametru "Style". Jeśli metoda zwróci `true`metodę, style, które są skojarzone z <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> kontrolką są renderowane przy użyciu metod <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType>i. <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> Jeśli wartość jest `false`, style nie są renderowane. `attTest` Zamiast tego na stronie jest wyświetlany tekst kontrolki, `<br/>` element, który jest renderowany <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> przez metodę, oraz ciąg tekstowy informujący użytkownika, że zawartość XHTML kontrolki jest renderowany warunkowo.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut XHTML do renderowania.</param>
        <param name="value">Wartość przypisana do atrybutu XHTML.</param>
        <param name="key">Wartość <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wyliczenia skojarzona z atrybutem XHTML.</param>
        <summary>Określa, czy określony atrybut XHTML i jego wartość mogą być renderowane do bieżącego elementu znaczników.</summary>
        <returns><see langword="true" />Jeśli atrybut jest renderowany na stronie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> jak zastąpić metodę, aby sprawdzić, `size` czy atrybut jest renderowany dla dowolnego elementu, który jest renderowany przez ten moduł zapisujący tekstu. `size` Jeśli atrybut jest renderowany, kod sprawdza, czy jego wartość to 8 punktów. Jeśli tak, <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> Metoda zwraca `true`, co pozwala na renderowanie atrybutu i jego wartości. Jeśli wartość jest inna niż 8 punktów, <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> Metoda zwraca `false`, a atrybut i jego wartość nie są renderowane. Jeśli parametr <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> klucza metody nie jest zgodny z <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutem, podstawowa funkcja <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> <xref:System.Web.UI.XhtmlTextWriter> metody jest wywoływana, zgodnie z definicją w klasie.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu XHTML do renderowania.</param>
        <param name="value">Wartość przypisana do atrybutu stylu XHTML.</param>
        <param name="key">Wartość <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wyliczenia skojarzona z atrybutem stylu XHTML.</param>
        <summary>Określa, czy określony atrybut stylu XHTML i jego wartość mogą być renderowane do bieżącego elementu znaczników.</summary>
        <returns><see langword="true" />Jeśli atrybut stylu jest renderowany; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> jak zastąpić metodę, aby sprawdzić, <xref:System.Web.UI.HtmlTextWriterStyle.Color> czy atrybut jest renderowany dla każdego elementu, który jest renderowany przez ten moduł zapisujący tekstu. <xref:System.Web.UI.HtmlTextWriterStyle.Color> Jeśli atrybut jest renderowany, kod sprawdza, czy jego wartość jest purpurowa. Jeśli wartość jest purpurowa, <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> Metoda zwraca `false` i atrybut i jego wartość nie są renderowane. Jeśli atrybut jest ustawiony na inną wartość <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> , metoda zwraca `true` , a atrybut i jego wartość są renderowane. <xref:System.Web.UI.HtmlTextWriterStyle.Color> Jeśli parametr <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> klucza metody nie jest zgodny z <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutem, podstawowa funkcja <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> <xref:System.Web.UI.XhtmlTextWriter> metody jest wywoływana, zgodnie z definicją w klasie.  
  
 Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element XHTML, z którego ma zostać usunięty atrybut.</param>
        <param name="attributeName">Atrybut, który ma zostać usunięty z określonego elementu XHTML.</param>
        <summary>Usuwa atrybut z <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> kolekcji elementu.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType">Jedna z <see cref="T:System.Web.UI.XhtmlMobileDocType" /> wartości wyliczenia.</param>
        <summary>Określa typ dokumentu XHTML dla składnika zapisywania tekstu, który ma być renderowany na stronie lub kontrolce.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> Użyj metody na niestandardowej karcie strony, aby zdefiniować typ kodu XHTML, który ma zostać przerenderowany do żądającego urządzenia. Obsługiwane typy dokumentów są zdefiniowane w <xref:System.Web.UI.XhtmlMobileDocType> wyliczeniu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt elementów, dla których <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> atrybuty są pomijane. <see cref="T:System.Collections.Hashtable" /></summary>
        <value><see cref="T:System.Collections.Hashtable" /> Elementy zawierające<see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> kolekcję, która nie jest renderowana.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pominięta Kolekcja atrybutów zawiera listę elementów XHTML, dla których <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> atrybuty nie są renderowane.  
  
 Gdy tworzone jest nowe wystąpienie <xref:System.Web.UI.XhtmlTextWriter> klasy <xref:System.Collections.Hashtable> , obiekt elementów, dla których <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> atrybuty są pomijane, obejmuje:  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="&lt;br/&gt;" /> Zapisuje element w strumieniu wyjściowym XHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia dziedziczonej <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> metody w celu zapisania ciągu tekstowego <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> przy użyciu metody <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> i `<br/>` elementu z metodą.  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
