<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33999e69327b007033ffe80d70ed36b9979d0675" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30694631" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje Extensible Hypertext Markup Language (XHTML)-określonych znaków, w tym wszystkie odmiany XHTML modułów, które pochodzą z XTHML, do strumienia wyjściowego dla kontrolki serwera ASP.NET dla urządzeń przenośnych. Zastąpienie <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy do zapewnienia niestandardowe renderowanie XHTML stron i kontrolek serwera ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML jest standardem XML języka znaczników, w oparciu o 4.1 HTML, który umożliwia tworzenie witryn sieci Web, które są odpowiednie dla różnych typów urządzeń. Scala go łatwość użycia dostarczanych przez HTML z podane wskazówki strict — element XML do produkcji język z szeroką gamę opcji format i styl i zmniejszenie znaczników tag niejednoznaczności. <xref:System.Web.UI.XhtmlTextWriter> Klasa udostępnia możliwości formatowania, korzystających z kontrolek serwera ASP.NET podczas renderowania XHTML zawartości do klientów. Można użyć <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> metodę, aby określić, jakiego typu XHTML składnik zapisywania tekstu renderuje. Dokument obsługiwane typy są definiowane w <xref:System.Web.UI.XhtmlMobileDocType> wyliczenia.  
  
 <xref:System.Web.UI.XhtmlTextWriter> Klasa renderuje dwa zestawy atrybutów elementów. Jeden zestaw jest kolekcją atrybuty wspólne, zgodnie z informacjami zawartymi w <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> właściwości. Drugi zestaw jest kolekcją atrybuty specyficzne dla elementu, zgodnie z informacjami zawartymi w <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> właściwości. Aby uzyskać więcej informacji na elementy i style, które mają być renderowane, zobacz specyfikację modularyzacji XHTML przy [witryny sieci Web w sieci World Wide Web konsorcjum W3C](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 Korzystając z członkami <xref:System.Web.UI.XhtmlTextWriter> klasy i wszystkie klasy pochodne do tworzenia modułów zapisywania tekstu niestandardowego do użycia w XHTML niestandardowe strony lub kartami klasy. Można również utworzyć klasy pochodne, które zastępują standardowe zachowanie <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 Domyślnie podczas pracy z przeglądarkach obsługujących język HTML 4.0, stron i kontrolek ASP.NET renderowania kodu znaczników zgodny ze standardem XHTML 1.1. Aby uzyskać więcej informacji, zobacz [standardów XHTML w Visual Studio i ASP.NET](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
  
 <xref:System.Web.UI.HtmlTextWriter> Danych wyjściowych XHTML dopiero po skonfigurowaniu programu ASP.NET, w szczególności, aby nie renderowania kodu znaczników XHTML. Aby uzyskać więcej informacji, zobacz [NIB: porady: Konfigurowanie XHTML renderowania w witrynach sieci Web platformy ASP.NET](http://msdn.microsoft.com/library/42483a54-f1ae-44e1-88e6-4370f8690149).  
  
   
  
## Examples  
 Przykład kodu w tej sekcji zawiera cztery części. W pierwszym przykładzie pokazano sposób tworzenia klasy pochodnej. W drugim przykładzie kodu pokazano, jak utworzyć niestandardowego formantu. W trzecim przykładzie kodu pokazano, jak użyć kontrolki niestandardowej. Czwarty przykładu kodu zawiera kod, który jest wymagany do uruchamiania kontrolki niestandardowej.  
  
 Poniższy przykładowy kod przedstawia sposób tworzenia niestandardowej klasy pochodzącej od <xref:System.Web.UI.XhtmlTextWriter> klasy. Ma dwa konstruktory, który jest standardem dla wszystkich klas, które dziedziczy pośrednio ani bezpośrednio po <xref:System.Web.UI.HtmlTextWriter> klasy. Pierwszy Konstruktor pobiera <xref:System.IO.TextWriter> obiektu jako parametru, a drugi Konstruktor, przekazywanie następujących dwóch wartości parametrów:  
  
-   <xref:System.IO.TextWriter> Wystąpienia.  
  
-   Wartość <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> właściwość, która definiuje wcięcie linii domyślny używany przez składnik zapisywania tekstu XHTML.  
  
 Ten przykładowy kod przedstawia również sposób przesłonięcia <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> i <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metody służące do filtrowania dla tekstu odpowiednio kolorów styl i rozmiar. Ponadto, zastępuje on <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> i <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> metody wpisz tekst ciągu przed i po formantu ma być renderowane.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 Poniższy przykładowy kod przedstawia sposób tworzenia niestandardowego <xref:System.Web.UI.WebControls.Label> formantu o nazwie `TestLabel` i adapter niestandardowy o nazwie `XhtmlTestLabelAdapter` która renderuje zawartość kontrolki jako XHTML.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak używać kontrolki niestandardowej `TestLabel` na stronie sieci Web ASP.NET.  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 Aby użyć kontrolki niestandardowej w poprzednim przykładzie kodu, Dodaj następujący element `<controlAdapters>` elementu do jednego z dwóch plików. Można dodać go do odpowiedniego pliku komputera w podkatalogu dla konkretnej przeglądarki, jako podfolder katalogu konfiguracji .NET Framework. Alternatywnie możesz można dodać go do pliku przeglądarki niestandardowe w katalogu App_Browsers w katalogu głównym aplikacji sieci Web.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> wystąpienia, który renderuje XHTML zawartości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy, która używa wcięcie linii, określonego w <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> pola. Użyj <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> konstruktora, jeśli nie chcesz zmienić domyślne wcięcie linii.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A> Konstruktora przyjmującego <xref:System.IO.TextWriter> obiekt jako parametr wywołań drugi Konstruktor przekazywanie dwóch wartości parametrów:  
  
-   <xref:System.IO.TextWriter> Wystąpienia.  
  
-   Wartość ciągu, która została określona w <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> pola, które definiuje odstęp kartę, który jest używany przez składnik zapisywania tekstu XHTML.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób tworzenia dwa konstruktory, który jest standardem dla wszystkich klas, które pochodzą od atrybutu bezpośrednio lub pośrednio <xref:System.Web.UI.HtmlTextWriter> klasy dla klasy niestandardowej pochodzącej z <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> wystąpienia, który renderuje XHTML zawartości.</param>
        <param name="tabString">Ciąg używany do renderowania wcięcie linii.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy z wcięcie określonego wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób tworzenia dwa konstruktory, który jest standardem dla wszystkich klas, które pochodzą od atrybutu bezpośrednio lub pośrednio <xref:System.Web.UI.HtmlTextWriter> klasy dla klasy niestandardowej pochodzącej z <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element XHTML, Dodaj atrybut do.</param>
        <param name="attributeName">Atrybut do dodania.</param>
        <summary>Dodaje atrybut do elementu XHTML. Kolekcja atrybutów elementu specyficznych dla <see cref="T:System.Web.UI.XhtmlTextWriter" /> odwołuje się obiekt <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> metodę, aby dodać atrybut do elementu XHTML. Następnie można rozpoznawać oraz renderowana przez dodane atrybuty <xref:System.Web.UI.XhtmlTextWriter> obiektu. Aby zapobiec twórcę renderowania wspólny atrybut elementu XHTML, użyj <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiekt zawierający atrybuty wspólne dla znaczników dla <see cref="T:System.Web.UI.XhtmlTextWriter" /> obiektu.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> obiekt zawierający atrybuty wspólne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> Kolekcja zawiera atrybuty, które są dozwolone w elementach XHTML i które nie są pomijane w <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> właściwości. Aby uzyskać więcej informacji na takie same atrybuty wspólne, zobacz [witryny sieci Web w sieci World Wide Web konsorcjum W3C](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 Jeśli nowe wystąpienie klasy <xref:System.Web.UI.XhtmlTextWriter> klasy jest tworzony, typowe atrybuty, które są inicjowane są:  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiekt zawierający atrybuty specyficzne dla elementu.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> obiekt zawierający atrybuty specyficzne dla elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> metody w celu dodania rozpoznanym atrybutów do elementu XHTML. Aby usunąć atrybuty wspólne dla elementu XHTML, użyj <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> metody.  
  
 Jeśli nowe wystąpienie klasy <xref:System.Web.UI.XhtmlTextWriter> utworzeniu klasy <xref:System.Collections.Hashtable> obiektu atrybuty specyficzne dla elementu jest wypełniana atrybuty przedstawiono w poniższej tabeli.  
  
|Element|Atrybuty|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 Aby uzyskać więcej informacji na elementy i style, które mają być renderowane, zobacz specyfikację modularyzacji XHTML przy [witryny sieci Web w sieci World Wide Web konsorcjum W3C](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Nazwa atrybutu do sprawdzenia.</param>
        <summary>Sprawdza atrybutu XHTML, aby upewnić się, że mogą być renderowane w tagu otwierającym <see langword="&lt;form&gt;" /> elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut można zastosować do <see langword="&lt;form&gt;" /> elementu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przydatna do renderowania warunkowo atrybutu w zależności od tego, czy jest to obsługiwane przez typu dokumentu XHTML urządzenia wysyłającego żądanie.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest częścią większego przykładu, która tworzy niestandardowy <xref:System.Web.UI.WebControls.Label> kontroli i karty, który renderuje zawartość kontrolki jako XHTML.  
  
 Ten przykładowy kod przedstawia sposób tworzenia zmiennej typu Boolean o nazwie `attTest` i ustaw ją na wartość zwrotną, będącą wynikiem wywołania <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> metody z wartością parametru "style". Jeśli <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> metoda zwraca `true`, style, które są skojarzone z formantem są renderowane przy użyciu <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> i <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> metody. Jeśli `attTest` wartość jest `false`, style nie są renderowane. Zamiast tego zostaje wyświetlona strona tekst formantu, `<br/>` element, który jest renderowany przez <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> — metoda i informującego o XHTML zawartość formantu ma renderowane warunkowo ciągu tekstowego.  
  
 Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut XHTML do renderowania.</param>
        <param name="value">Wartość atrybutu XHTML.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Wartość wyliczenia skojarzone z atrybutu XHTML.</param>
        <summary>Określa, czy określony atrybut XHTML i jej wartość może być renderowana do bieżącego elementu znaczników.</summary>
        <returns>
          <see langword="true" /> Jeśli atrybut jest odwzorowywany na stronie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> , aby sprawdzić, czy `size` atrybut jest odwzorowywany dla elementów, które mają być renderowane przez ten składnik zapisywania tekstu. Jeśli `size` atrybut jest odwzorowywany, kod sprawdza, czy jego wartość wynosi 8 punktów. Jeśli tak, <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metoda zwraca `true`, dzięki czemu atrybut i jego wartość do renderowania. Jeśli wartość jest równa 8 punktów <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metoda zwraca `false`, i atrybutu i jej wartości nie są renderowane. Jeśli parametr klucza <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metody jest niezgodna <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu podstawowe funkcje <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metoda jest wywoływana, zgodnie z definicją w <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu XHTML do renderowania.</param>
        <param name="value">Wartość atrybutu stylu XHTML.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Wartość wyliczenia skojarzony z atrybutem stylu XHTML.</param>
        <summary>Określa, czy określony atrybut stylu XHTML i jej wartość może być renderowana do bieżącego elementu znaczników.</summary>
        <returns>
          <see langword="true" /> Jeśli atrybut stylu jest renderowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> , aby sprawdzić, czy <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu jest renderowany dla elementów, które mają być renderowane przez ten składnik zapisywania tekstu. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybut jest odwzorowywany, kod sprawdza, czy wartość jest purpurowy. Jeśli wartość jest purpurowy, <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metoda zwraca `false` i atrybutu i jej wartości nie są renderowane. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybut jest ustawiony na żadnej wartości <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metoda zwraca `true` i są renderowane atrybutu i jego wartość. Jeśli parametr klucza <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metody jest niezgodna <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu podstawowe funkcje <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metoda jest wywoływana, zgodnie z definicją w <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Aby usunąć atrybut z elementu XHTML.</param>
        <param name="attributeName">Ten atrybut można usunąć z określonego elementu XHTML.</param>
        <summary>Usuwa atrybut z <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> kolekcji elementu.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType">Jeden z <see cref="T:System.Web.UI.XhtmlMobileDocType" /> wartości wyliczenia.</param>
        <summary>Określa typ dokumentu XHTML dla składnika zapisywania tekstu do renderowania strony lub kontrolki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> metody karty niestandardowej strony, aby określić typ XHTML, który ma być renderowany dla urządzenia wysyłającego żądanie. Dokument obsługiwane typy są definiowane w <xref:System.Web.UI.XhtmlMobileDocType> wyliczenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiektu elementy, dla którego <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> atrybuty są pomijane.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> zawierający kolekcję elementów <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> nie są renderowane.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kolekcja pominięty atrybut zawiera listę elementów XHTML dla którego <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> atrybuty nie są renderowane.  
  
 Gdy nowe wystąpienie klasy <xref:System.Web.UI.XhtmlTextWriter> utworzeniu klasy <xref:System.Collections.Hashtable> obiektu elementy, dla którego <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> atrybuty są pomijane obejmuje:  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje <see langword="&lt;br/&gt;" /> strumienia wyjściowego elementu XHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić dziedziczonego <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> metodę, aby zapisać ciąg tekstowy, z <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> — metoda i `<br/>` element z <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> metody.  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>