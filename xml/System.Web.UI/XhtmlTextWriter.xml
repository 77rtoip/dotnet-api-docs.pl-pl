<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7bcb9939e2311a341a254dd5ee361eb8b50dc72c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51862920" /></Metadata><TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje Extensible Hypertext Markup Language (XHTML)-określonych znaków, w tym wszystkie odmiany funkcji XHTML modułów, które wynikają z XTHML, do strumienia wyjściowego dla kontrolki serwera platformy ASP.NET dla urządzeń przenośnych. Zastąp <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy w celu zapewnienia niestandardowe renderowanie XHTML stron i kontrolek serwera ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML jest standardem XML języka znaczników, w oparciu o 4.1 HTML, który umożliwia tworzenie witryn sieci Web, które są odpowiednie dla wielu typów urządzeń. Ona scala łatwość użycia, dostarczone przez HTML za pomocą podane wskazówki strict — element XML do wygenerowania język znaczników z szeroką gamę opcji format i styl i zmniejszenie znaczników tag niejednoznaczności. <xref:System.Web.UI.XhtmlTextWriter> Klasa oferuje możliwości formatowania, korzystających z kontrolek serwera ASP.NET podczas renderowania XHTML zawartości do klientów. Możesz użyć <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> metodę, aby określić, jakiego typu XHTML składnik zapisywania tekstu renderuje. Typy dokumentów obsługiwane są zdefiniowane w <xref:System.Web.UI.XhtmlMobileDocType> wyliczenia.  
  
 <xref:System.Web.UI.XhtmlTextWriter> Klasy powoduje wyświetlenie dwóch zestawów atrybutów elementów. Jeden zestaw jest kolekcją wspólne atrybuty określone w <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> właściwości. Drugi zestaw jest kolekcją atrybuty specyficzne dla elementu, zgodnie z odwołaniem w <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> właściwości. Aby uzyskać więcej informacji na elementy i stylów, które mają być renderowane, zobacz specyfikację modularyzacji XHTML na [witryny sieci Web konsorcjum World Wide Web Consortium (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 Można użyć elementów członkowskich <xref:System.Web.UI.XhtmlTextWriter> klasy i wszystkie klasy pochodne, aby utworzyć autorzy niestandardowego tekstu do użycia w niestandardowych XHTML strony lub kartami klasy. Można również tworzyć klasy pochodne, które zastępują standardowego zachowania <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 Domyślnie podczas pracy z przeglądarkach obsługujących język HTML 4.0 stron i kontrolek ASP.NET renderowane znaczniki, które są zgodne ze standardem XHTML 1.1. Aby uzyskać więcej informacji, zobacz [XHTML standardów w programie Visual Studio i platformy ASP.NET](https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
  
 <xref:System.Web.UI.HtmlTextWriter> Generuje XHTML, o ile nie skonfigurowano ASP.NET specjalnie w celu nie renderowania kodu znaczników XHTML. Aby uzyskać więcej informacji, zobacz [NIB: instrukcje: Konfigurowanie XHTML renderowania w witrynach sieci Web platformy ASP.NET](https://msdn.microsoft.com/library/42483a54-f1ae-44e1-88e6-4370f8690149).  
  
   
  
## Examples  
 Przykład kodu w tej sekcji zawiera cztery części. Pierwszy przykład przedstawia sposób tworzenia klasy pochodnej. Drugi przykład kodu pokazuje, jak utworzyć formant niestandardowy. Trzeci przykład kodu demonstruje sposób użycia formantu niestandardowego. Czwarty przykład kodu zawiera kod, który jest wymagany do uruchomienia kontrolki niestandardowej.  
  
 Poniższy przykład kodu pokazuje, jak utworzyć klasę niestandardową, która jest pochodną <xref:System.Web.UI.XhtmlTextWriter> klasy. Ma dwa konstruktory, który jest standardem dla wszystkich klas dziedziczących bezpośrednio lub pośrednio <xref:System.Web.UI.HtmlTextWriter> klasy. Pierwszy Konstruktor przyjmuje <xref:System.IO.TextWriter> obiektu jako parametr i wywołuje drugi Konstruktor, przekazując następujące dwie wartości parametrów:  
  
-   <xref:System.IO.TextWriter> Wystąpienia.  
  
-   Wartość <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> właściwość, która definiuje wcięcie wiersza domyślny używany przez składnik zapisywania tekstu XHTML.  
  
 Ten przykładowy kod przedstawia również sposób przesłonięcia <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> i <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metody filtrowania dla tekstu rozmiar i kolor stylu, odpowiednio. Ponadto, zastępuje ona <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> i <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> metody próbę zapisania tekstu ciągu przed i po zakończeniu renderowania formantu.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak utworzyć niestandardową <xref:System.Web.UI.WebControls.Label> formantu o nazwie `TestLabel` i karty niestandardowej o nazwie `XhtmlTestLabelAdapter` która renderuje zawartość kontrolki jako XHTML.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 Poniższy przykład kodu pokazuje, jak użyć kontrolki niestandardowej `TestLabel` na stronie sieci Web platformy ASP.NET.  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 Aby użyć kontrolki niestandardowej w poprzednim przykładzie kodu, Dodaj następujący element `<controlAdapters>` elementu do jednego z dwóch plików. Możesz dodać go do odpowiedniego pliku komputera w podkatalogu dla konkretnej przeglądarki jako podfolder katalog konfiguracji .NET Framework. Alternatywnie można go dodać do pliku Przeglądarka niestandardowa katalog App_Browsers w katalogu głównym aplikacji sieci Web.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <related type="Article" href="https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97">Program ASP.NET i zgodności XHTML</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> wystąpienie, które renderuje zawartość XHTML.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasę, która używa wcięcia wiersza, który jest określony w <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> pola. Użyj <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> konstruktora, jeśli nie chcesz zmieniać domyślnego wcięcie wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A> Konstruktora przyjmującego <xref:System.IO.TextWriter> obiekt jako parametr wywołania drugi Konstruktor, przekazując dwie wartości parametrów:  
  
-   <xref:System.IO.TextWriter> Wystąpienia.  
  
-   Wartość ciągu, który jest określony w <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> pola, który definiuje odstęp karty, który jest używany przez składnik zapisywania tekstu XHTML.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć dwa konstruktory, który jest standardem dla wszystkich klas, które pochodzą bezpośrednio lub pośrednio z <xref:System.Web.UI.HtmlTextWriter> klasa pochodzi od klasy niestandardowej <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> wystąpienie, które renderuje zawartość XHTML.</param>
        <param name="tabString">Ciąg używany do renderowania wcięcie wiersza.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.XhtmlTextWriter" /> klasy z wcięciem określonego wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć dwa konstruktory, który jest standardem dla wszystkich klas, które pochodzą bezpośrednio lub pośrednio z <xref:System.Web.UI.HtmlTextWriter> klasa pochodzi od klasy niestandardowej <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element XHTML, można dodać atrybutu.</param>
        <param name="attributeName">Atrybut do dodania.</param>
        <summary>Dodaje atrybut do elementu XHTML. Kolekcja atrybutów elementów specyficznych dla <see cref="T:System.Web.UI.XhtmlTextWriter" /> odwołuje się obiekt <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> metodę, aby dodać atrybut do elementu XHTML. Następnie dodano atrybut może być rozpoznawany i renderowany przez <xref:System.Web.UI.XhtmlTextWriter> obiektu. Aby zapobiec sytuacji, w której moduł zapisujący renderowania wspólny atrybut elementu XHTML, należy użyć <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiekt, który zawiera wspólne atrybuty znaczniki dla <see cref="T:System.Web.UI.XhtmlTextWriter" /> obiektu.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> obiekt zawierający atrybuty wspólne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> Kolekcja zawiera atrybuty, które są dozwolone w elementach XHTML i które nie są pomijane w <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> właściwości. Aby uzyskać więcej informacji na temat wspólne atrybuty, zobacz [witryny sieci Web konsorcjum World Wide Web Consortium (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 Gdy nowe wystąpienie klasy <xref:System.Web.UI.XhtmlTextWriter> klasa jest tworzona, są wspólne atrybuty, które są inicjowane:  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiekt zawierający atrybuty specyficzne dla elementu.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> obiekt zawierający atrybuty specyficzne dla elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> metody w celu dodania rozpoznawanym atrybutów do elementu XHTML. Aby usunąć wspólne atrybuty w elemencie XHTML, użyj <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> metody.  
  
 Gdy nowe wystąpienie klasy <xref:System.Web.UI.XhtmlTextWriter> klasa jest tworzona, <xref:System.Collections.Hashtable> obiektu atrybuty specyficzne dla elementu jest wypełniana przy użyciu atrybutów pokazano w poniższej tabeli.  
  
|Element|Atrybuty|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 Aby uzyskać więcej informacji na elementy i stylów, które mają być renderowane, zobacz specyfikację modularyzacji XHTML na [witryny sieci Web konsorcjum World Wide Web Consortium (W3C)](https://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Nazwa atrybutu do sprawdzenia.</param>
        <summary>Sprawdza, czy atrybut XHTML, aby upewnić się, że mogą być renderowane w znaczniku otwierającym elementu <see langword="&lt;form&gt;" /> elementu.</summary>
        <returns><see langword="true" /> Jeśli ten atrybut można zastosować do <see langword="&lt;form&gt;" /> elementu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przydatna do renderowania warunkowo atrybutu w zależności od tego, czy nie jest obsługiwany przez typu dokumentu XHTML urządzenia wysyłającego żądanie.  
  
   
  
## Examples  
 Poniższy przykład kodu jest częścią większego przykładu, który tworzy niestandardowy <xref:System.Web.UI.WebControls.Label> kontrolki i karty, która renderuje zawartość kontrolki jako XHTML.  
  
 Ten przykładowy kod przedstawia sposób tworzenia zmiennej typu Boolean o nazwie `attTest` i ustaw ją na wartość zwracaną, która wynika z wywołania <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> metody z wartością parametru "style". Jeśli <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> metoda zwraca `true`, style, które są skojarzone z kontrolką są renderowane przy użyciu <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> i <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> metody. Jeśli `attTest` wartość `false`, stylów nie są renderowane. Zamiast tego zostanie wyświetlona strona tekstu dla formantu, `<br/>` element, który jest renderowany przez <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> metody, a ciąg tekstowy, informujący użytkownika, że zawartość XHTML formantu zakończeniu renderowania warunkowo.  
  
 Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Atrybutu XHTML do renderowania.</param>
        <param name="value">Wartość przypisana do atrybutu XHTML.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Wartość wyliczenia skojarzone z atrybutu XHTML.</param>
        <summary>Określa, czy określonego atrybutu XHTML i jego wartość może być renderowany do bieżącego elementu znaczników.</summary>
        <returns><see langword="true" /> Jeśli ten atrybut jest renderowany do strony; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metodę sprawdzania, czy `size` atrybutu jest renderowana dla żadnego z elementów, które są renderowane przy tym składnik zapisywania tekstu. Jeśli `size` atrybutu jest renderowana, kod sprawdza, czy jego wartość wynosi 8 punktów. Jeśli tak, <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metoda zwraca `true`, dzięki czemu atrybut i jego wartość do renderowania. Jeśli wartość jest inne niż 8 punktów <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metoda zwraca `false`, i atrybutu i jego wartość nie są renderowane. Jeśli parametr klucza <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metody jest niezgodna <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu podstawowe funkcje <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metoda jest wywoływana, zgodnie z definicją w <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu XHTML do renderowania.</param>
        <param name="value">Wartość przypisana do atrybut stylu XHTML.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Wartość wyliczenia skojarzony atrybut stylu XHTML.</param>
        <summary>Określa, czy określony atrybut stylu XHTML i jego wartość może być renderowany do bieżącego elementu znaczników.</summary>
        <returns><see langword="true" /> Jeśli atrybut stylu jest renderowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metodę sprawdzania, czy <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu jest renderowany dla żadnego z elementów, które są renderowane przy tym składnik zapisywania tekstu. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu jest renderowana, kod sprawdza, czy wartość jest purpurowy. Jeśli wartość jest purpurowy, <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metoda zwraca `false` i atrybutu i jego wartość nie są renderowane. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybut jest ustawiony na jakąkolwiek inną wartość, <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metoda zwraca `true` i atrybutu i jej wartość są renderowane. Jeśli parametr klucza <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metody jest niezgodna <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu podstawowe funkcje <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metoda jest wywoływana, zgodnie z definicją w <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Web.UI.XhtmlTextWriter> klasy.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Element XHTML, aby usunąć atrybut z.</param>
        <param name="attributeName">Ten atrybut można usunąć z określonego elementu XHTML.</param>
        <summary>Usuwa atrybut z <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> kolekcji elementu.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType">Jedną z <see cref="T:System.Web.UI.XhtmlMobileDocType" /> wartości wyliczenia.</param>
        <summary>Określa typ dokumentu XHTML składnik zapisywania tekstu do renderowania strony lub formant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> metoda karty niestandardowej strony, aby zdefiniować typ XHTML, który ma być renderowany do urządzenia wysyłającego żądanie. Typy dokumentów obsługiwane są zdefiniowane w <xref:System.Web.UI.XhtmlMobileDocType> wyliczenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Collections.Hashtable" /> obiektu elementy, dla którego <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> atrybuty są pomijane.</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> zawierający kolekcję elementów <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> nie są renderowane.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kolekcja pominięty atrybut zawiera listy elementów XHTML, dla którego <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> atrybuty nie są renderowane.  
  
 Gdy nowe wystąpienie klasy <xref:System.Web.UI.XhtmlTextWriter> klasa jest tworzona, <xref:System.Collections.Hashtable> obiektu elementy, dla którego <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> atrybuty są pomijane obejmuje:  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje <see langword="&lt;br/&gt;" /> elementu XHTML strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia dziedziczonego <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> metodę, aby zapisać ciąg tekstowy z <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> metody i `<br/>` element z <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> metody.  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>