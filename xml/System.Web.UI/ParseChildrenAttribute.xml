<Type Name="ParseChildrenAttribute" FullName="System.Web.UI.ParseChildrenAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1ec6efec0d8cd87c1f803f7d1e8c9ce7a9ffc602" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69397419" /></Metadata><TypeSignature Language="C#" Value="public sealed class ParseChildrenAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ParseChildrenAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ParseChildrenAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ParseChildrenAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParseChildrenAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ParseChildrenAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje atrybut metadanych, którego można użyć podczas tworzenia formantów serwera ASP.NET. Użyj klasy <see cref="T:System.Web.UI.ParseChildrenAttribute" /> , aby wskazać, w jaki sposób Analizator strony ma traktować zawartość zagnieżdżoną wewnątrz tagu formantu serwera zadeklarowanego na stronie. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa umożliwia określenie logiki analizy dla niestandardowej kontrolki serwerowej przez oznaczenie kontrolki serwer <xref:System.Web.UI.ParseChildrenAttribute> przy użyciu atrybutu metadanych. <xref:System.Web.UI.ParseChildrenAttribute>  
  
 Oznaczenie kontrolki serwera przy użyciu atrybutu `ParseChildren(true)` metadanych powoduje, że analizator interpretuje elementy, które są zawarte w tagach formantu serwera jako właściwości. W tym scenariuszu <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A> właściwość jest `true`.  
  
 Oznaczenie kontrolki serwera przy użyciu atrybutu `ParseChildren(true,"<Default Property>")` metadanych <xref:System.Web.UI.ParseChildrenAttribute.DefaultProperty%2A> ustawia właściwość na nazwę właściwości, która jest przesyłana do atrybutu.  
  
 Oznaczenie kontrolki serwera przy użyciu atrybutu `ParseChildren(false)`metadanych, wartości domyślnej, powoduje, że analizator interpretuje elementy, które są zawarte w tagach formantu serwera jako zawartość, która zostanie przeanalizowana przy użyciu skojarzonej <xref:System.Web.UI.ControlBuilder> , która jest, jako kontrolki. W tym scenariuszu <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A> właściwość jest `false`.  
  
 Aby uzyskać informacje o korzystaniu z atrybutów, zobacz [atrybuty](~/docs/standard/attributes/index.md).  
  
   
  
## Examples  
 Przykład kodu w tej sekcji zawiera dwie części. Pierwszy przykład kodu demonstruje, jak ustawić właściwości dla <xref:System.Web.UI.ParseChildrenAttribute> klasy. Drugi przykład kodu demonstruje, jak używać klas na stronie ASP.NET.  
  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.ParseChildrenAttribute> jak ustawić obiekt niestandardowej kontrolki serwera o nazwie. `CollectionPropertyControl` <xref:System.Web.UI.ParseChildrenAttribute> Ustawia właściwość na`true` i Właściwośćna`Employee` klasę. <xref:System.Web.UI.ParseChildrenAttribute.DefaultProperty%2A> <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A>  
  
 [!code-csharp[ParseChildrenAttribute_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_1/CS/parsechildren.cs#1)]
 [!code-vb[ParseChildrenAttribute_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_1/VB/parsechildren.vb#1)]  
  
 Poniższy przykład kodu ilustruje sposób używania `CollectionPropertyControl` klas i `Employee` na stronie ASP.NET. `Employee` Wystąpienia klasy są dodawane deklaratywnie.  
  
 [!code-aspx-csharp[ParseChildrenAttribute_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_1/CS/parsechildren.aspx#3)]
 [!code-aspx-vb[ParseChildrenAttribute_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_1/VB/parsechildren.aspx#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.Web.UI.PersistChildrenAttribute" />
    <related type="Article" href="~/docs/standard/attributes/index.md">Rozszerzanie metadanych za pomocą atrybutów</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ParseChildrenAttribute" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParseChildrenAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ParseChildrenAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ParseChildrenAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.ParseChildrenAttribute" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zostanie utworzone nowe wystąpienie <xref:System.Web.UI.ParseChildrenAttribute> klasy <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A> z właściwością ustawioną na `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParseChildrenAttribute (bool childrenAsProperties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool childrenAsProperties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ParseChildrenAttribute.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childrenAsProperties As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ParseChildrenAttribute(bool childrenAsProperties);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ParseChildrenAttribute : bool -&gt; System.Web.UI.ParseChildrenAttribute" Usage="new System.Web.UI.ParseChildrenAttribute childrenAsProperties" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="childrenAsProperties" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="childrenAsProperties"><see langword="true" />Aby przeanalizować elementy jako właściwości kontrolki serwera; w przeciwnym razie. <see langword="false" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.ParseChildrenAttribute" /> klasy <see cref="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" /> przy użyciu właściwości, aby określić, czy elementy znajdujące się w formancie serwera są analizowane jako właściwości kontrolki serwer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `childrenAsProperties` tak`false`, elementy, które są zawarte w formancie serwera, są analizowane jako kontrolka. `false`jest wartością domyślną dla <xref:System.Web.UI.ParseChildrenAttribute>.  
  
   
  
## Examples  
 Przykład kodu w tej sekcji zawiera dwie części. Pierwszy przykład kodu demonstruje, jak ustawić właściwości dla <xref:System.Web.UI.ParseChildrenAttribute> klasy. Drugi przykład kodu demonstruje, jak używać klas na stronie ASP.NET.  
  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.ParseChildrenAttribute> jak ustawić obiekt dla niestandardowej kontrolki serwera o nazwie. `CollectionPropertyControl` `true` <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A> <xref:System.Web.UI.ParseChildrenAttribute> `CollectionPropertyControl`Gdy jest zadeklarowana przed zdefiniowaniem klasy, ustawia właściwość na. <xref:System.Web.UI.ParseChildrenAttribute>  
  
 [!code-csharp[ParseChildrenAttribute_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_2/CS/parsechildren.cs#1)]
 [!code-vb[ParseChildrenAttribute_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_2/VB/parsechildren.vb#1)]  
  
 Poniższy przykład kodu ilustruje sposób używania `CollectionPropertyControl` klas i `Employee` na stronie ASP.NET. Jedno wystąpienie `Employee` klasy jest dodawane deklaratywnie i inne jest dodawane programowo.  
  
 [!code-aspx-csharp[ParseChildrenAttribute_2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_2/CS/parsechildren.aspx#3)]
 [!code-aspx-vb[ParseChildrenAttribute_2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_2/VB/parsechildren.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParseChildrenAttribute (Type childControlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type childControlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ParseChildrenAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childControlType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ParseChildrenAttribute(Type ^ childControlType);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ParseChildrenAttribute : Type -&gt; System.Web.UI.ParseChildrenAttribute" Usage="new System.Web.UI.ParseChildrenAttribute childControlType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childControlType" Type="System.Type" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="childControlType">Typ formantu do przeanalizowania jako właściwość.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.ParseChildrenAttribute" /> klasy za pomocą właściwości, <see cref="P:System.Web.UI.ParseChildrenAttribute.ChildControlType" /> aby określić, które elementy zawarte w formancie serwera są analizowane jako kontrolki.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="childControlType" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ParseChildrenAttribute.#ctor(System.Boolean,System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParseChildrenAttribute (bool childrenAsProperties, string defaultProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool childrenAsProperties, string defaultProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ParseChildrenAttribute.#ctor(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (childrenAsProperties As Boolean, defaultProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ParseChildrenAttribute(bool childrenAsProperties, System::String ^ defaultProperty);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ParseChildrenAttribute : bool * string -&gt; System.Web.UI.ParseChildrenAttribute" Usage="new System.Web.UI.ParseChildrenAttribute (childrenAsProperties, defaultProperty)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="childrenAsProperties" Type="System.Boolean" />
        <Parameter Name="defaultProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childrenAsProperties"><see langword="true" />Aby przeanalizować elementy jako właściwości kontrolki serwera; w przeciwnym razie. <see langword="false" /></param>
        <param name="defaultProperty">Ciąg, który definiuje Właściwość kolekcji kontrolki serwera, do której zawartość zagnieżdżona jest analizowana domyślnie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.ParseChildrenAttribute" /> klasy <paramref name="childrenAsProperties" /> za pomocą parametrów i <paramref name="defaultProperty" /> .</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `childrenAsProperties` jest`false`, elementy są analizowane jako kontrolki.  
  
   
  
## Examples  
 Przykład kodu w tej sekcji zawiera dwie części. Pierwszy przykład kodu demonstruje, jak ustawić właściwości dla <xref:System.Web.UI.ParseChildrenAttribute> klasy. Drugi przykład kodu demonstruje, jak używać klas na stronie ASP.NET.  
  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.ParseChildrenAttribute> jak ustawić obiekt niestandardowej kontrolki serwera o nazwie. `CollectionPropertyControl` <xref:System.Web.UI.ParseChildrenAttribute> Ustawia właściwość na`true` i Właściwośćna`Employee` klasę. <xref:System.Web.UI.ParseChildrenAttribute.DefaultProperty%2A> <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A>  
  
 [!code-csharp[ParseChildrenAttribute_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_1/CS/parsechildren.cs#2)]
 [!code-vb[ParseChildrenAttribute_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_1/VB/parsechildren.vb#2)]  
  
 Poniższy przykład kodu ilustruje sposób używania `CollectionPropertyControl` klas i `Employee` na stronie ASP.NET.  
  
 [!code-aspx-csharp[ParseChildrenAttribute_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_1/CS/parsechildren.aspx#3)]
 [!code-aspx-vb[ParseChildrenAttribute_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_1/VB/parsechildren.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" />
        <altmember cref="F:System.Web.UI.ParseChildrenAttribute.Default" />
      </Docs>
    </Member>
    <Member MemberName="ChildControlType">
      <MemberSignature Language="C#" Value="public Type ChildControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ChildControlType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ParseChildrenAttribute.ChildControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChildControlType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ChildControlType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChildControlType : Type" Usage="System.Web.UI.ParseChildrenAttribute.ChildControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą dozwolony typ formantu.</summary>
        <value>Typ formantu. Wartość domyślna to <see cref="T:System.Web.UI.Control" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli dozwolony typ kontroli to `null`, oznacza, że nie został określony, zwracany jest domyślny typ, który <xref:System.Web.UI.Control?displayProperty=nameWithType> jest kontrolką.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.ParseChildrenAttribute.ChildControlType%2A> jak zbadać właściwość. Aby zapoznać się `CollectionPropertyControl` z definicjami klas i `Employee` , które są używane w tym przykładzie <xref:System.Web.UI.ParseChildrenAttribute.%23ctor%2A>kodu, zobacz.  
  
 [!code-aspx-csharp[ParseChildrenAttribute_2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_2/CS/parsechildren.aspx#3)]
 [!code-aspx-vb[ParseChildrenAttribute_2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_2/VB/parsechildren.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="ChildrenAsProperties">
      <MemberSignature Language="C#" Value="public bool ChildrenAsProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ChildrenAsProperties" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property ChildrenAsProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ChildrenAsProperties { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ChildrenAsProperties : bool with get, set" Usage="System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy przeanalizować elementy znajdujące się w kontrolce serwera jako właściwości.</summary>
        <value><see langword="true" />Aby przeanalizować elementy jako właściwości; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest ustawiona na `false`, elementy, które są zawarte w formancie serwera, są analizowane jako kontrolka. <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties%2A> jak zbadać właściwość. Aby zapoznać się `CollectionPropertyControl` z definicjami klas i `Employee` , które są używane w tym przykładzie <xref:System.Web.UI.ParseChildrenAttribute>kodu, zobacz.  
  
 [!code-aspx-csharp[ParseChildrenAttribute_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_1/CS/parsechildren.aspx#3)]
 [!code-aspx-vb[ParseChildrenAttribute_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_1/VB/parsechildren.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Bieżący <see cref="T:System.Web.UI.ParseChildrenAttribute" /> został wywołany z <paramref name="childrenAsProperties" /> ustawionym <see langword="false" />na.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.ParseChildrenAttribute Default;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.ParseChildrenAttribute Default" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ParseChildrenAttribute.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Default As ParseChildrenAttribute " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::ParseChildrenAttribute ^ Default;" />
      <MemberSignature Language="F#" Value=" staticval mutable Default : System.Web.UI.ParseChildrenAttribute" Usage="System.Web.UI.ParseChildrenAttribute.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ParseChildrenAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Definiuje wartość domyślną dla <see cref="T:System.Web.UI.ParseChildrenAttribute" /> klasy. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna dla <xref:System.Web.UI.ParseChildrenAttribute.Default> pola to `false`, co oznacza, że elementy nie są analizowane jako właściwości kontrolki serwer.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ParseChildrenAttribute.IsDefaultAttribute" />
      </Docs>
    </Member>
    <Member MemberName="DefaultProperty">
      <MemberSignature Language="C#" Value="public string DefaultProperty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultProperty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ParseChildrenAttribute.DefaultProperty" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultProperty As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultProperty { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultProperty : string with get, set" Usage="System.Web.UI.ParseChildrenAttribute.DefaultProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia właściwość domyślną dla formantu serwera, do którego są analizowane elementy.</summary>
        <value>Nazwa domyślnej właściwości kolekcji kontrolki serwera, do której są analizowane elementy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest używana tylko wtedy, gdy <xref:System.Web.UI.ParseChildrenAttribute> do konstruktora jest przekazanie ciągu. <xref:System.Web.UI.ParseChildrenAttribute.DefaultProperty%2A> Po utworzeniu <xref:System.Web.UI.ParseChildrenAttribute> <xref:System.Web.UI.ParseChildrenAttribute.DefaultProperty%2A> klasy Właściwość definiuje domyślną właściwość kontrolki serwera, która jest analizowana.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.ParseChildrenAttribute.DefaultProperty%2A> jak zbadać właściwość. Aby zapoznać się `CollectionPropertyControl` z definicjami klas i `Employee` , które są używane w tym przykładzie <xref:System.Web.UI.ParseChildrenAttribute>kodu, zobacz.  
  
 [!code-aspx-csharp[ParseChildrenAttribute_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_1/CS/parsechildren.aspx#3)]
 [!code-aspx-vb[ParseChildrenAttribute_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_1/VB/parsechildren.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Bieżący <see cref="T:System.Web.UI.ParseChildrenAttribute" /> został wywołany z <paramref name="childrenAsProperties" /> ustawionym <see langword="false" />na.</exception>
        <altmember cref="M:System.Web.UI.ParseChildrenAttribute.#ctor(System.Boolean,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ParseChildrenAttribute.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="parseChildrenAttribute.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącym obiektem.</param>
        <summary>Określa, czy określony obiekt jest równy bieżącemu obiektowi.</summary>
        <returns><see langword="true" />Jeśli <paramref name="obj" /> jest równe bieżącemu obiektowi; w przeciwnym <see langword="false" />razie,.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ParseChildrenAttribute.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="parseChildrenAttribute.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcja skrótu dla <see cref="T:System.Web.UI.ParseChildrenAttribute" /> obiektu.</summary>
        <returns>Kod skrótu dla bieżącego <see cref="T:System.Web.UI.ParseChildrenAttribute" /> obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultAttribute">
      <MemberSignature Language="C#" Value="public override bool IsDefaultAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefaultAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ParseChildrenAttribute.IsDefaultAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefaultAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefaultAttribute();" />
      <MemberSignature Language="F#" Value="override this.IsDefaultAttribute : unit -&gt; bool" Usage="parseChildrenAttribute.IsDefaultAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość wskazującą, czy wartość bieżącego wystąpienia <see cref="T:System.Web.UI.ParseChildrenAttribute" /> klasy jest wartością domyślną klasy pochodnej.</summary>
        <returns><see langword="true" />Jeśli bieżąca <see cref="T:System.Web.UI.ParseChildrenAttribute" /> wartość jest wystąpieniem domyślnym; w przeciwnym razie <see langword="false" />,.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartością <xref:System.Web.UI.ParseChildrenAttribute> domyślną klasy <xref:System.Web.UI.ParseChildrenAttribute.ParseAsChildren> jest pole.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.ParseChildrenAttribute.IsDefaultAttribute%2A> jak zbadać właściwość. Aby zapoznać się `CollectionPropertyControl` z definicjami klas i `Employee` , które są używane w tym przykładzie <xref:System.Web.UI.ParseChildrenAttribute>kodu, zobacz.  
  
 [!code-aspx-csharp[ParseChildrenAttribute_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/ParseChildrenAttribute_1/CS/parsechildren.aspx#3)]
 [!code-aspx-vb[ParseChildrenAttribute_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ParseChildrenAttribute_1/VB/parsechildren.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.ParseChildrenAttribute.Default" />
      </Docs>
    </Member>
    <Member MemberName="ParseAsChildren">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.ParseChildrenAttribute ParseAsChildren;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.ParseChildrenAttribute ParseAsChildren" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ParseChildrenAttribute.ParseAsChildren" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ParseAsChildren As ParseChildrenAttribute " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::ParseChildrenAttribute ^ ParseAsChildren;" />
      <MemberSignature Language="F#" Value=" staticval mutable ParseAsChildren : System.Web.UI.ParseChildrenAttribute" Usage="System.Web.UI.ParseChildrenAttribute.ParseAsChildren" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ParseChildrenAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, że zagnieżdżona zawartość, która jest zawarta w formancie serwera, jest analizowana jako kontrolki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ParseChildrenAttribute.ParseAsChildren> Jeśli pole jest wywoływane, zawartość zagnieżdżona znajdująca się w kontrolce serwer nie jest analizowana jako właściwości; zamiast tego są analizowane jako kontrolka.  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.ParseChildrenAttribute.Default" />
        <altmember cref="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" />
      </Docs>
    </Member>
    <Member MemberName="ParseAsProperties">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.ParseChildrenAttribute ParseAsProperties;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.ParseChildrenAttribute ParseAsProperties" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ParseChildrenAttribute.ParseAsProperties" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ParseAsProperties As ParseChildrenAttribute " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::ParseChildrenAttribute ^ ParseAsProperties;" />
      <MemberSignature Language="F#" Value=" staticval mutable ParseAsProperties : System.Web.UI.ParseChildrenAttribute" Usage="System.Web.UI.ParseChildrenAttribute.ParseAsProperties" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ParseChildrenAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, że zagnieżdżona zawartość, która jest zawarta w formancie serwera, jest analizowana jako właściwości formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ParseChildrenAttribute.ParseAsProperties> Jeśli pole jest wywoływane, zawartość zagnieżdżona znajdująca się w kontrolce serwer jest analizowana jako właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.ParseChildrenAttribute.Default" />
        <altmember cref="F:System.Web.UI.ParseChildrenAttribute.ParseAsChildren" />
      </Docs>
    </Member>
  </Members>
</Type>
