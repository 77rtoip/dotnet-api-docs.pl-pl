<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5da70a9feb3161643610796afaeb84a6348e82eb" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69397600" /></Metadata><TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje na temat asynchronicznego zadania zarejestrowanego na stronie. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET w wersji 2,0 umożliwia rejestrowanie wielu zadań na stronie i uruchamianie ich asynchronicznie przed renderowaniem strony. Możesz określić, że zadanie ma być uruchamiane asynchronicznie, jeśli jest to proces powolny i nie chcesz, aby inne procesy były powiązane w trakcie jego wykonywania. Zadania asynchroniczne można wykonywać równolegle lub sekwencyjnie.  
  
 Obiekt musi być zarejestrowany na stronie <xref:System.Web.UI.Page.RegisterAsyncTask%2A> za pomocą metody. <xref:System.Web.UI.PageAsyncTask> Sama strona nie musi być przetwarzana asynchronicznie w celu wykonywania zadań asynchronicznych. Można ustawić `Async` atrybut na jeden `true` (jak pokazano w poniższym przykładzie kodu) lub `false` w dyrektywie page, a zadania asynchroniczne będą nadal przetwarzane asynchronicznie:  
  
 `<%@ Page Async="true" %>`  
  
 Gdy atrybut jest ustawiony na `false`, wątek wykonujący stronę będzie zablokowany do momentu ukończenia wszystkich zadań asynchronicznych. `Async`  
  
 Wszystkie zadania asynchroniczne zarejestrowane przed <xref:System.Web.UI.Page.PreRenderComplete> zdarzeniem zostaną automatycznie wykonane przez stronę, jeśli nie zostały jeszcze wykonane. Te zadania asynchroniczne zarejestrowane po <xref:System.Web.UI.Page.PreRenderComplete> zdarzeniu muszą zostać wykonane jawnie <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> za pomocą metody. Metody można również użyć do uruchomienia zadań <xref:System.Web.UI.Page.PreRenderComplete> przed zdarzeniem. <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Metoda wykonuje wszystkie zarejestrowane zadania asynchroniczne na stronie, które nie zostały wykonane.  
  
 Domyślnie zadanie asynchroniczne przekroczy limit czasu, jeśli nie zostało zakończone w ciągu 45 sekund. Możesz określić inną wartość limitu czasu w pliku Web. config lub w dyrektywie page. Sekcja pliku Web. config `asyncTimeout` zawiera atrybut, jak pokazano poniżej. `<pages>`  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 Dyrektywa Page zawiera `AsyncTimeout` atrybut.  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 Poniższy przykład kodu rejestruje trzy zadania asynchroniczne na stronie i wykonuje je równolegle. Każde zadanie wywołuje metodę, która powoduje jedynie, że wątek przestanie być uśpiony przez 5 sekund.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.PageAsyncTask" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">Procedura obsługi zdarzeń.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.PageAsyncTask" /> klasy za pomocą procedury obsługi zdarzeń, która umożliwia anulowanie zadania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor otacza <xref:System.Web.TaskEventHandler> delegata tak <xref:System.Web.UI.PageAsyncTask> , aby obiekt mógł zintegrować kod asynchroniczny (oparty <xref:System.Threading.Tasks.Task> na obiektach) z istniejącą funkcją stron asynchronicznych formularzy sieci Web ASP.NET. ASP.NET będzie sygnalizować <xref:System.Threading.CancellationToken> obiekt, który jest przesyłany <xref:System.Web.TaskEventHandler> do delegata <xref:System.Web.UI.Page.AsyncTimeout%2A> w celu anulowania w oparciu o atrybut ustawiony `@ Page` w dyrektywie strony sieci Web. Po osiągnięciu <xref:System.Threading.CancellationToken> wartości zostanie zasygnalizowanie obiektu. <xref:System.Web.UI.Page.AsyncTimeout%2A> Parametr musi być przesłany do wszystkich asynchronicznych interfejsów API, które są wywoływane przez implementację <xref:System.Web.TaskEventHandler> klasy. `CancellationToken`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">Procedura obsługi zdarzeń.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.PageAsyncTask" /> klasy za pomocą procedury obsługi zdarzeń, która umożliwia obsługę zadania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Program obsługi wywoływany podczas rozpoczynania zadania asynchronicznego.</param>
        <param name="endHandler">Procedura obsługi do wywołania, gdy zadanie zostanie ukończone pomyślnie w określonym limicie czasu.</param>
        <param name="timeoutHandler">Procedura obsługi do wywołania, gdy zadanie nie zostało zakończone pomyślnie w określonym limicie czasu.</param>
        <param name="state">Obiekt, który reprezentuje stan zadania.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.PageAsyncTask" /> klasy przy użyciu wartości domyślnej do wykonania równolegle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja konstruktora ustawia <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> właściwość na `false` tak, aby zadanie asynchroniczne nie było przetwarzane równolegle z innymi zadaniami na stronie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono <paramref name="endHandler" /> parametru lub parametru. <paramref name="beginHandler" /></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Program obsługi wywoływany podczas rozpoczynania zadania asynchronicznego.</param>
        <param name="endHandler">Procedura obsługi do wywołania, gdy zadanie zostanie ukończone pomyślnie w określonym limicie czasu.</param>
        <param name="timeoutHandler">Procedura obsługi do wywołania, gdy zadanie nie zostało zakończone pomyślnie w określonym limicie czasu.</param>
        <param name="state">Obiekt, który reprezentuje stan zadania.</param>
        <param name="executeInParallel">Wartość wskazująca, czy zadanie może być przetwarzane równolegle z innymi zadaniami.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.PageAsyncTask" /> klasy przy użyciu określonej wartości do wykonania równolegle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja konstruktora pozwala określić, czy zadanie asynchroniczne będzie przetwarzane równolegle z innymi zadaniami na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy trzy zadania asynchroniczne, które są przetwarzane równolegle ze sobą. Ten przykład jest częścią większego przykładu znajdującego się <xref:System.Web.UI.PageAsyncTask> w przeglądzie klasy.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nie określono <paramref name="endHandler" /> parametru lub parametru. <paramref name="beginHandler" /></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę do wywołania przy rozpoczynaniu zadania asynchronicznego.</summary>
        <value><see cref="T:System.Web.BeginEventHandler" /> Delegat reprezentujący metodę do wywołania po rozpoczęciu zadania asynchronicznego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> Delegat jest ustawiony w konstruktorze.  
  
   
  
## Examples  
 Poniższy przykład kodu rejestruje trzy zadania asynchroniczne na stronie i wykonuje je równolegle. Każde zadanie wywołuje metodę, która powoduje jedynie, że wątek przestanie być uśpiony przez 5 sekund. Dla każdego zadania określono delegata.<xref:System.Web.UI.PageAsyncTask.BeginHandler%2A>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę do wywołania, gdy zadanie zakończy się pomyślnie w określonym limicie czasu.</summary>
        <value><see cref="T:System.Web.EndEventHandler" /> Delegat reprezentujący metodę do wywołania, gdy zadanie zakończy się pomyślnie w określonym limicie czasu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> Delegat jest ustawiony w konstruktorze.  
  
   
  
## Examples  
 Poniższy przykład kodu rejestruje trzy zadania asynchroniczne na stronie i wykonuje je równolegle. Każde zadanie wywołuje metodę, która powoduje jedynie, że wątek przestanie być uśpiony przez 5 sekund. Dla każdego zadania określono delegata.<xref:System.Web.UI.PageAsyncTask.EndHandler%2A>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy zadanie może być przetwarzane równolegle z innymi zadaniami.</summary>
        <value><see langword="true" />Jeśli zadanie powinno być przetwarzane równolegle z innymi zadaniami; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> Właściwość jest ustawiana w konstruktorze. Gdy na stronie zarejestrowano wiele zadań, a <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> właściwość jest ustawiona na `true`, te zadania są przetwarzane współbieżnie. Jeśli <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> jednak właściwość jest ustawiona na `false`, te zadania są przetwarzane sekwencyjnie. Na przykład, jeśli strona zawiera dwa zadania asynchroniczne, które zostały wykonane z 5 sekund i <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> są ustawione na `true`, oba zadania zostaną wykonane w ciągu 5 sekund. Jeśli <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> jest ustawiona na `false` te same dwa zadania, pierwsze zadanie zostanie wykonane w ciągu 5 sekund, a drugie zadanie zostanie wykonane 5 sekund po zakończeniu pierwszego zadania.  
  
   
  
## Examples  
 Poniższy przykład kodu definiuje trzy zadania asynchroniczne, które są dla każdego zestawu przetwarzane równolegle. Ten przykład jest częścią większego przykładu znajdującego się <xref:System.Web.UI.PageAsyncTask> w przeglądzie klasy.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który reprezentuje stan zadania.</summary>
        <value><see cref="T:System.Object" /> Reprezentuje stan zadania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.State%2A> Właściwość jest ustawiana w konstruktorze i nie można jej modyfikować podczas wykonywania zadania asynchronicznego. Można odróżnić zadania asynchroniczne na stronie, przypisując unikatowe wartości ciągu do odpowiednich <xref:System.Web.UI.PageAsyncTask.State%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy trzy zadania asynchroniczne i nadaje im unikatowe wartości <xref:System.Web.UI.PageAsyncTask.State%2A> właściwości. Ten przykład jest częścią większego przykładu znajdującego się <xref:System.Web.UI.PageAsyncTask> w przeglądzie klasy.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę do wywołania, gdy zadanie nie zakończy się pomyślnie w określonym limicie czasu.</summary>
        <value><see cref="T:System.Web.EndEventHandler" /> Delegat reprezentujący metodę do wywołania, gdy zadanie nie zakończy się pomyślnie w określonym limicie czasu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> Delegat jest ustawiony w konstruktorze.  
  
   
  
## Examples  
 Poniższy przykład kodu rejestruje trzy zadania asynchroniczne na stronie i wykonuje je równolegle. Każde zadanie wywołuje metodę, która powoduje jedynie, że wątek przestanie być uśpiony przez 5 sekund. Dla każdego zadania określono delegata.<xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
