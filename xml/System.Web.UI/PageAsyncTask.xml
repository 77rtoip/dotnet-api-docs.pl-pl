<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d1079f4cbaf4f9bde92409a2b96155ff21afa4a7" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39813319" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje o zadanie asynchroniczne zarejestrowany do strony. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verze technologie ASP.NET 2.0 umożliwia rejestrowanie wielu zadań do strony i ich uruchamianie asynchronicznie przed renderowanie strony. Może określić, czy zadanie jest uruchamiane asynchronicznie jest procesem powolnym, jeśli nie chcesz, aby inne procesy powiązanie podczas wykonywania. Zadania asynchroniczne mogą być wykonywane równolegle lub sekwencyjnie.  
  
 A <xref:System.Web.UI.PageAsyncTask> obiektu musi być zarejestrowana na strony za pomocą <xref:System.Web.UI.Page.RegisterAsyncTask%2A> metody. Sama strona ma zostać przetworzone asynchronicznie do wykonywania zadań asynchronicznych. Możesz ustawić `Async` atrybutu do jednej `true` (jak pokazano w poniższym przykładzie kodu) lub `false` na stronie dyrektywy i zadań asynchronicznych będą nadal przetwarzane asynchronicznie:  
  
 `<%@ Page Async="true" %>`  
  
 Gdy `Async` ma ustawioną wartość atrybutu `false`, wątek, który wykonuje strony zostanie zablokowane, dopiero po zakończeniu wszystkich zadań asynchronicznych.  
  
 Wszystkie zadania asynchronicznego zarejestrowane przed <xref:System.Web.UI.Page.PreRenderComplete> zdarzenia będą wykonywane automatycznie przez stronę jeśli one nie zostały już wykonane. Te zadania asynchronicznego rejestrowane po <xref:System.Web.UI.Page.PreRenderComplete> zdarzenia musi zostać wykonana jawnie za pomocą <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> metody. <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Metodę można również uruchomić zadań przed <xref:System.Web.UI.Page.PreRenderComplete> zdarzeń. <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Metoda wykonuje wszystkie zarejestrowane zadania asynchroniczne na stronie, które nie zostały wykonane.  
  
 Domyślnie zadanie asynchroniczne przekroczy limit czasu, jeśli nie zostało ukończone w ciągu 45 sekund. Można określić wartość limitu czasu w innej w pliku Web.config lub dyrektywie page. `<pages>` Sekcja pliku Web.config zawiera `asyncTimeout` atrybutu, jak pokazano poniżej.  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 Zawiera strony dyrektyw `AsyncTimeout` atrybutu.  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 Poniższy przykład kodu rejestruje trzech zadań asynchronicznych do strony i wykonuje je w sposób równoległy. Każde zadanie wywołuje metodę, która jedynie powoduje, że wątek w stan uśpienia na 5 sekund.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.PageAsyncTask" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Program obsługi zdarzeń.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.PageAsyncTask" /> przy użyciu obsługi zdarzeń, który umożliwia zadania, które zostaną anulowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest zawijany <xref:System.Web.TaskEventHandler> delegować tak, aby <xref:System.Web.UI.PageAsyncTask> obiektu można zintegrować kodu asynchronicznego (na podstawie <xref:System.Threading.Tasks.Task> obiektów) przy użyciu istniejącą funkcję asynchroniczną stron ASP.NET Web Forms. Sygnał ASP.NET <xref:System.Threading.CancellationToken> obiekt, który jest przekazywany do <xref:System.Web.TaskEventHandler> delegować anulowania w oparciu o <xref:System.Web.UI.Page.AsyncTimeout%2A> atrybut ustawiony w `@ Page` dyrektywy strony sieci Web. Gdy <xref:System.Web.UI.Page.AsyncTimeout%2A> została osiągnięta wartość <xref:System.Threading.CancellationToken> obiektu zostanie zasygnalizowane. `CancellationToken` Parametru muszą zostać przekazane do asynchronicznej interfejsów API, które są wywoływane przy implementacji <xref:System.Web.TaskEventHandler> klasy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Program obsługi zdarzeń.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.PageAsyncTask" /> przy użyciu obsługi zdarzeń, który umożliwia zadania, które mają być obsługiwane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Program obsługi do wywołania podczas rozpoczynania zadania asynchronicznego.</param>
        <param name="endHandler">Program obsługi do wywołania po pomyślnym zakończeniu zadania przed upływem limitu czasu.</param>
        <param name="timeoutHandler">Program obsługi do wywołania, gdy zadanie nie zostało pomyślnie ukończone przed upływem limitu czasu.</param>
        <param name="state">Obiekt, który reprezentuje stan zadania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.PageAsyncTask" /> klasy przy użyciu wartości domyślnej dla wykonywanych równolegle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja ustawia konstruktora <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> właściwość `false` więc zadanie asynchroniczne nie została przetworzona równolegle z innymi zadaniami na stronie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="beginHandler" /> Parametru lub <paramref name="endHandler" /> parametr nie zostanie określony.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Program obsługi do wywołania podczas rozpoczynania zadania asynchronicznego.</param>
        <param name="endHandler">Program obsługi do wywołania po pomyślnym zakończeniu zadania przed upływem limitu czasu.</param>
        <param name="timeoutHandler">Program obsługi do wywołania, gdy zadanie nie zostało pomyślnie ukończone przed upływem limitu czasu.</param>
        <param name="state">Obiekt, który reprezentuje stan zadania.</param>
        <param name="executeInParallel">Wartość, która wskazuje, czy zadania mogą być przetwarzane równolegle z innymi zadaniami.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.PageAsyncTask" /> klasy przy użyciu określonej wartości dla wykonywanych równolegle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja konstruktora pozwala określić, czy zadanie asynchroniczne, które będą przetwarzane równolegle z innymi zadaniami na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy trzy zadania asynchroniczne, które są przetwarzane równolegle do siebie nawzajem. W tym przykładzie jest częścią większego przykładu w <xref:System.Web.UI.PageAsyncTask> klasa — Przegląd.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="beginHandler" /> Parametru lub <paramref name="endHandler" /> parametr nie zostanie określony.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę do wywołania, gdy rozpoczyna zadanie asynchroniczne.</summary>
        <value>A <see cref="T:System.Web.BeginEventHandler" /> delegata, który reprezentuje metodę do wywołania podczas rozpoczynania zadania asynchronicznego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> Delegata jest ustawiony w konstruktorze.  
  
   
  
## Examples  
 Poniższy przykład kodu rejestruje trzech zadań asynchronicznych do strony i wykonuje je w sposób równoległy. Każde zadanie wywołuje metodę, która jedynie powoduje, że wątek w stan uśpienia na 5 sekund. A <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegata jest określona dla każdego zadania.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę do wywołania, gdy zadanie zakończy się pomyślnie przed upływem limitu czasu.</summary>
        <value>
          <see cref="T:System.Web.EndEventHandler" /> Delegata, który reprezentuje metodę wywoływaną, gdy zadanie zakończy się pomyślnie przed upływem limitu czasu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> Delegata jest ustawiony w konstruktorze.  
  
   
  
## Examples  
 Poniższy przykład kodu rejestruje trzech zadań asynchronicznych do strony i wykonuje je w sposób równoległy. Każde zadanie wywołuje metodę, która jedynie powoduje, że wątek w stan uśpienia na 5 sekund. <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> Delegata jest określona dla każdego zadania.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy zadania mogą być przetwarzane równolegle z innymi zadaniami.</summary>
        <value>
          <see langword="true" /> Jeśli zadania mają być przetwarzane równolegle z innymi zadaniami; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> Właściwość jest ustawiona w konstruktorze. Po wielu zadań są rejestrowane na stronie i <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> właściwość jest ustawiona na `true`, a następnie tych zadań są przetwarzane współbieżnie. Jednak jeśli <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> właściwość jest ustawiona na `false`, a następnie tych zadań są przetwarzane sekwencyjnie. Na przykład, jeśli strona zawiera dwa asynchroniczne zadania, każdego miał 5 sekund, aby zakończyć i <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> ustawiono `true`, zarówno do zadań zostanie ukończone w ciągu 5 sekund. Jeśli <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> ustawiono `false` dla tych samych dwa zadania, a następnie pierwsze zadanie zostanie ukończone w ciągu 5 sekund i drugie zadanie zostanie ukończone 5 sekund po zakończeniu pierwszego zadania.  
  
   
  
## Examples  
 Poniższy kod definiuje trzy zadania asynchroniczne, które są każdego zestawu do przetwarzania równoległego. W tym przykładzie jest częścią większego przykładu w <xref:System.Web.UI.PageAsyncTask> klasa — Przegląd.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt reprezentujący stan zadania.</summary>
        <value>
          <see cref="T:System.Object" /> Reprezentujący stan zadania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.State%2A> Właściwość jest ustawiona w Konstruktorze i nie może być modyfikowany podczas wykonywania zadania asynchronicznego. Istnieje możliwość szybkiego rozróżniania zadań asynchronicznych na stronie, przypisując unikatowy ciąg wartości do odpowiednich <xref:System.Web.UI.PageAsyncTask.State%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy trzy zadań asynchronicznych i umożliwia im wartości unikatowe dla ich <xref:System.Web.UI.PageAsyncTask.State%2A> właściwości. W tym przykładzie jest częścią większego przykładu w <xref:System.Web.UI.PageAsyncTask> klasa — Przegląd.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera metodę do wywołania, gdy zadanie nie zostanie ukończone pomyślnie przed upływem limitu czasu.</summary>
        <value>
          <see cref="T:System.Web.EndEventHandler" /> Delegata, który reprezentuje metodę do wywołania, gdy zadanie nie zostanie ukończone pomyślnie przed upływem limitu czasu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> Delegata jest ustawiony w konstruktorze.  
  
   
  
## Examples  
 Poniższy przykład kodu rejestruje trzech zadań asynchronicznych do strony i wykonuje je w sposób równoległy. Każde zadanie wywołuje metodę, która jedynie powoduje, że wątek w stan uśpienia na 5 sekund. A <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegata jest określona dla każdego zadania.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>