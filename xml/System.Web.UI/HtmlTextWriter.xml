<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3a8fb2f7e2f68d7ac988952a27d646a631b2924" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34255046" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje znaki znaczników i tekst w strumieniu wyjściowym kontroli serwera ASP.NET. Ta klasa udostępnia możliwości formatowania kontrolek serwera ASP.NET używany do renderowania kodu znaczników do klientów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Klasa jest używana do renderowania kodu HTML 4.0 dla przeglądarek komputerowych. <xref:System.Web.UI.HtmlTextWriter> Jest również klasę podstawową dla wszystkich autorów znaczników w <xref:System.Web.UI> przestrzeni nazw, w tym <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>, i <xref:System.Web.UI.XhtmlTextWriter> klasy. Te klasy służą do zapisu elementy, atrybuty i informacje o różnych typów znaczników styl i układu. Ponadto te klasy są używane przez klasy karty strony i kontrolki, które są skojarzone z każdym języka znaczników.  
  
 W większości przypadków ASP.NET automatycznie używa twórcę odpowiedniego dla urządzenia wysyłającego żądanie. Jednak w przypadku utworzenia składnik zapisywania tekstu niestandardowego lub jeśli chcesz określić określonego składnika zapisywania do renderowania strony dla określonego urządzenia należy zamapować twórcę do strony `controlAdapters` sekcji pliku .browser aplikacji.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia <xref:System.Web.UI.Control.Render%2A> metody kontrolki niestandardowej, która jest pochodną <xref:System.Web.UI.Control> klasy. Przykładowy kod przedstawia sposób użycia różnych <xref:System.Web.UI.HtmlTextWriter> metody, właściwości i pola.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Wystąpienia, który renderuje zawartość znacznika.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, która korzysta z domyślnego ciągu kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Przeciążenia z <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> Konstruktor korzysta <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> stała, gdy konieczne jest wcięcie linii. Wywołuje <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> przeciążenia zainicjować nowego wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> konstruktora w celu utworzenia niestandardowego <xref:System.Web.UI.HtmlTextWriter> obiektu o nazwie `StyledLabelHtmlWriter.` podczas `MyPage` klasy niestandardowej, która jest pochodną <xref:System.Web.UI.Page> klasa, jest wymagany przez klienta przeglądarki, używa `StyledLabelHtmlWriter` klasy do renderowania jej zawartości do strumienia wyjściowego.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Która renderuje zawartość znacznika.</param>
        <param name="tabString">Ciąg używany do renderowania wcięcie linii.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy z znak tabulacji określonego ciągu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Przeciążenia z <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> Konstruktor korzysta `tabString` gdy konieczne jest wcięcie linii. Wywołuje <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> konstruktora podstawowego można zainicjować nowego wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> konstruktora w celu utworzenia niestandardowego <xref:System.Web.UI.HtmlTextWriter> obiektu o nazwie `StyledLabelHtmlWriter.` podczas `MyPage` klasy niestandardowej, która jest pochodną <xref:System.Web.UI.Page> klasa, jest wymagany przez klienta przeglądarki, używa `StyledLabelHtmlWriter` klasy do renderowania jej zawartości do strumienia wyjściowego.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje atrybut określonego znacznika i wartość do otwierający tag elementu który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu, aby dodać.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <summary>Dodaje atrybut określonego znacznika i wartość do otwierający tag elementu który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> metodę, jeśli ten atrybut nie jest jednym z <xref:System.Web.UI.HtmlTextWriterAttribute> wartości, lub jeśli ten atrybut nie jest znany do czasu wykonywania.  
  
 Dla wystąpienia elementu danego znaczników <xref:System.Web.UI.HtmlTextWriter> klasy przechowuje listę atrybutów dla tego elementu. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszystkie atrybuty dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody mają być renderowane otwierający tag elementu. Lista atrybutów jest następnie usuwane z <xref:System.Web.UI.HtmlTextWriter> obiektu.  
  
 Kodowania wzorzec do renderowania elementów kodu znaczników jest następujący:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodę, aby dodać atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, w razie potrzeby do renderowania zawartości pomiędzy otwierającym, a zamykającym tagiem elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metoda przed wywołaniem <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody. Kod wywołuje dwa różne przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> i dwa różne przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> przed wywołaniem <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody do renderowania `<span>` element do strumienia wyjściowego. <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> Metoda służy do definiowania atrybutu niestandardowego o nazwie `CustomAttribute` i wartość niestandardowego o nazwie `CustomAttributeValue` dla `<span>` element, który renderuje tego kodu.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentujący atrybut znaczników do dodania do strumienia wyjściowego.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <summary>Dodaje atrybut znaczników i wartość atrybutu do otwierający tag elementu który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metody do renderowania atrybutów standardowych znaczników.  
  
 Dla wystąpienia elementu danego znaczników <xref:System.Web.UI.HtmlTextWriter> klasy przechowuje listę atrybutów dla tego elementu. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszelkie atrybuty, które są dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody mają być renderowane otwierający tag elementu. Lista atrybutów jest następnie usuwane z <xref:System.Web.UI.HtmlTextWriter>.  
  
 Kodowania wzorzec do renderowania elementów kodu znaczników jest następujący:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodę, aby dodać atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, w razie potrzeby do renderowania zawartości pomiędzy otwierającym, a zamykającym tagiem elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metody w celu dodania `Onclick` atrybutu element znaczników, a następnie ustaw jej wartość poniższy kod języka ECMAScript:  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu, aby dodać.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <param name="fEndode">
          <see langword="true" /> kodowanie atrybutu i jego wartości; w przeciwnym razie <see langword="false" />.</param>
        <summary>Dodaje atrybut określonego znacznika i wartość do otwierający tag elementu który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody z kodowaniem opcjonalne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metodę, jeśli ten atrybut nie jest jednym z <xref:System.Web.UI.HtmlTextWriterAttribute> wartości lub jest potrzebna, jeśli ten atrybut nie jest znany do kodowania i czasie wykonywania.  
  
 Dla wystąpienia elementu danego znaczników <xref:System.Web.UI.HtmlTextWriter> klasy przechowuje listę atrybutów dla tego elementu. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszystkie atrybuty dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody mają być renderowane otwierający tag elementu. Lista atrybutów jest następnie usuwane z <xref:System.Web.UI.HtmlTextWriter> obiektu.  
  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metody z `fEncode` ustawioną `true`, jeśli atrybut może zawierać znaku cudzysłowu ("), znak mniejszości (<) lub handlowego" i "(&). Wywołanie metody zostanie kodowanie atrybutu, aby spełnić wymagania dotyczące urządzenia wysyłającego żądanie. Można ustawić `fEncode` do `false`, jeśli wiadomo, że żaden z tych znaków zostanie wygenerowane, lub jeśli wiadomo, że ten atrybut jest już zaszyfrowana.  
 
Jeśli typ atrybutu jest `Style`, nie można zakodować wartość nawet wtedy, gdy `fEndode` jest `true`. Upewnij się, że wartość stylu jest zgodna z CSS i nie zawierają złośliwego kodu.
  
 Kodowania wzorzec do renderowania elementów kodu znaczników jest następujący:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodę, aby dodać atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, w razie potrzeby do renderowania zawartości pomiędzy otwierającym, a zamykającym tagiem elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metodę, aby upewnić się, że atrybut niestandardowy o nazwie `myattribute`, a jego wartość nie jest zakodowana do `<img>` elementu.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu, aby dodać.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentujący atrybutu.</param>
        <summary>Dodaje atrybut określonego znacznika i wartość, wraz z <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartość wyliczenia do otwierający tag elementu który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> — metoda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> metody tylko w przypadku dziedziczenia z <xref:System.Web.UI.HtmlTextWriter> klasy. Umożliwia tworzenie nowych `name` i `key` pary dla atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentujący atrybut znaczników do dodania do strumienia wyjściowego.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <param name="fEncode">
          <see langword="true" /> kodowanie atrybutu i jego wartości; w przeciwnym razie <see langword="false" />.</param>
        <summary>Dodaje atrybut znaczników i wartość atrybutu do otwierający tag elementu który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody z kodowaniem opcjonalne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metody do renderowania atrybutem standardowych znaczników z kodowaniem opcjonalne.  
  
 Dla wystąpienia elementu danego znaczników <xref:System.Web.UI.HtmlTextWriter> klasy przechowuje listę atrybutów dla tego elementu. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszystkie atrybuty dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> mają być renderowane otwierający tag elementu. Lista atrybutów jest następnie usuwane z <xref:System.Web.UI.HtmlTextWriter> obiektu.  
  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metody z `fEncode` ustawioną `true`, jeśli atrybut może zawierać znaku cudzysłowu ("), znak mniejszości (<) lub handlowego" i "(&). Wywołanie metody zostanie kodowanie atrybutu, aby spełnić wymagania dotyczące urządzenia wysyłającego żądanie. Można ustawić `fEncode` do `false`, jeśli wiadomo, że żaden z tych znaków zostanie wygenerowane, lub jeśli wiadomo, że ten atrybut jest już zaszyfrowana.  
 
 Jeśli typ atrybutu jest `Style`, nie można zakodować wartość nawet wtedy, gdy `fEncode` jest `true`. Upewnij się, że wartość stylu jest zgodna z CSS i nie zawierają złośliwego kodu.

  
 Kodowania wzorzec do renderowania elementów kodu znaczników jest następujący:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodę, aby dodać atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, w razie potrzeby do renderowania zawartości pomiędzy otwierającym, a zamykającym tagiem elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metody upewnij się, że wartość ciągu, która jest przypisana do `Alt` atrybutu dla `<img>` element został zakodowany dla urządzenia wysyłającego żądanie.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje znacznik nadawania stylu atrybut do tagu otwierającego elementu <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg, który zawiera atrybut stylu, aby dodać.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <summary>Dodaje atrybut styl znaczników określonego i wartość atrybutu do znacznika otwierającego tag utworzone przez kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> metody, gdy styl nie jest elementem członkowskim <xref:System.Web.UI.HtmlTextWriterStyle> wyliczenia lub nie jest znany do czasu wykonywania.  
  
 <xref:System.Web.UI.HtmlTextWriter> Klasy przechowuje listę style dla elementów znaczników renderowania. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszystkie style, które są dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody mają być renderowane otwierający tag elementu. Na liście stylów następnie jest wyczyszczone.  
  
 Kodowania wzorzec do renderowania elementów kodu znaczników jest następujący:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody, aby dodać wszystkie atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, w razie potrzeby do renderowania zawartości między element otwierające i zamykające znaczniki.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> metody do renderowania `font-size` i `color` styl atrybutów na `<p>` elementu. W tym przykładzie kodu używane <xref:System.Web.UI.HtmlTextWriter> klasy do renderowania zawartości formantu.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Reprezentujący atrybutu style do dodania do strumienia wyjściowego.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <summary>Dodaje atrybut styl znacznika skojarzonego z określonym <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartość i wartość atrybutu do znacznika otwierającego tag utworzone przez kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> metody, gdy styl jest elementem członkowskim <xref:System.Web.UI.HtmlTextWriterStyle> wyliczenia, wiadomo, że przed w czasie wykonywania.  
  
 <xref:System.Web.UI.HtmlTextWriter> Klasy przechowuje listę style dla elementów znaczników renderowania. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszystkie style dodane przez <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody mają być renderowane otwierający tag elementu. Na liście stylów następnie jest wyczyszczone.  
  
 Kodowania wzorzec do renderowania elementów kodu znaczników jest następujący:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody, aby dodać wszystkie atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, w razie potrzeby do renderowania zawartości między element otwierające i zamykające znaczniki.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia część zastępująca <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę w klasie pochodnej z <xref:System.Web.UI.HtmlTextWriter> klasy. Sprawdza kod czy `<Label>` element jest renderowany. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metoda jest wywoływana, aby sprawdzić, czy `Color` atrybutu style został zdefiniowany dla `<Label>` elementu. Jeśli `Color` nie zdefiniowano atrybutu, kod wywołuje tego przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody w celu dodania `Color` atrybutu z atrybutem style, a następnie ustaw dla niego wartość `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg, który zawiera atrybut style ma zostać dodana.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Reprezentujący atrybutu style do dodania.</param>
        <summary>Dodaje atrybut stylu określonego znacznika i wartość atrybutu wraz z <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartość wyliczenia znaczników otwierający tag utworzone przez kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> — metoda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> metody tylko w przypadku dziedziczenia z <xref:System.Web.UI.HtmlTextWriter> klasy. Umożliwia tworzenie nowych `name` i `value` pary dla <xref:System.Web.UI.HtmlTextWriterStyle> atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powiadamia <see cref="T:System.Web.UI.HtmlTextWriter" /> obiekt lub obiekt klasy pochodnej, która ma być renderowany formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacja klasy <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metoda nie ma żadnych funkcji. Konieczne jest przesłonięcie <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metodę w klasie pochodnej z <xref:System.Web.UI.HtmlTextWriter> umożliwiają korzystanie z własnych funkcji renderowania. Na przykład w języku znaczników, który może wymagać `<p>` elementy, które mają być odwzorowane natychmiast wcześniejsze formantu, ale gdzie potrzebę `<p>` wcześniej ustalona elementu, można użyć <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> zastąpienia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu i zwalnia wszystkie zasoby systemu skojarzonych z nim.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja <xref:System.Web.UI.HtmlTextWriter.Close%2A> wywołania metody <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> podstawowa metoda.  
  
 Po wywołaniu <xref:System.Web.UI.HtmlTextWriter.Close%2A> metoda, jakichkolwiek działań na <xref:System.Web.UI.HtmlTextWriter> obiektu może zgłaszają wyjątki, ponieważ wszystkie jej zasoby zostały zwolnione.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje pojedynczy znak tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pojedynczej karcie jest reprezentowana przez znaków ASCII 9.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób tworzenia konstruktora przyjmującego <xref:System.IO.TextWriter> obiektu jako parametr i przekazuje <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> pole jako argument parametru do drugiej wersji konstruktora. Gdy ten konstruktor jest wywoływany z kodu, <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> pola definiuje zasady wcięcie dla wystąpienia edytor znaczników, który jest używany przez stronę lub karty.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak cudzysłowu (").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody, aby zamknąć atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania `border` atrybutu dla `<table>` elementu. Kod wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania atrybutu i jego wartość i używa <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> i <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> pól.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Koduje wartość atrybutu określonego znacznika na podstawie wymagań z <see cref="T:System.Web.HttpRequest" /> obiektu bieżącego kontekstu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający wartość atrybutu do zakodowania.</param>
        <param name="fEncode">
          <see langword="true" /> Aby zakodować wartość atrybutu; w przeciwnym razie <see langword="false" />.</param>
        <summary>Koduje wartość atrybutu określonego znacznika na podstawie wymagań z <see cref="T:System.Web.HttpRequest" /> obiektu bieżącego kontekstu.</summary>
        <returns>Ciąg zawierający wartość atrybutu zakodowanego <see langword="null" /> Jeśli <paramref name="value" /> jest pusta lub wartość atrybutu niekodowany, jeśli <paramref name="fEncode" /> jest <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metodę, jeśli nie jest atrybutem <xref:System.Web.UI.HtmlTextWriterAttribute> wartość wyliczenia lub nie jest znany do czasu wykonywania.  
  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Metoda usuwa znaki podwójnego cudzysłowu ("), ampersandu (&) i mniejszości (<), tak że nieprawidłowy element tags znaki nie są generowane, niezależnie od danych wejściowych. Rzeczywistym kodowaniem jest wykonywane przez <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> metody jako parametru w <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> wywołania metody, a następnie koduje `color:blue` styl wartość atrybutu.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentujący atrybut znacznika.</param>
        <param name="value">Ciąg zawierający wartość atrybutu do zakodowania.</param>
        <summary>Koduje wartość atrybutu określonego znacznika na podstawie wymagań z <see cref="T:System.Web.HttpRequest" /> obiektu bieżącego kontekstu.</summary>
        <returns>Ciąg zawierający wartość atrybutu zakodowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Metoda usuwa znaki podwójnego cudzysłowu ("), ampersandu (&) i mniejszości (<), tak że nieprawidłowy element tags znaki nie są generowane, niezależnie od danych wejściowych. Rzeczywistym kodowaniem jest wykonywane przez <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Ciąg zawierający adres URL do kodowania.</param>
        <summary>Wykonuje minimalnego kodowania adresu URL, konwertując spacje w adresie URL określonego ciągu "% 20".</summary>
        <returns>Ciąg zawierający adres URL zakodowanym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Adres URL kodowanie znaku składa się z symbolem procentu (%), następuje dwucyfrowe szesnastkową reprezentację (bez uwzględniania wielkości liter) punktu kod ISO-Latin znaku. Szesnastkową reprezentację miejsce wynosi 20.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> metodę, aby przekonwertować spacje w adresie URL, który jest przekazywany jako parametru w <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> wywołania metody.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kodowanie <see cref="T:System.Web.UI.HtmlTextWriter" /> obiekt używa do zapisu zawartości strony.</summary>
        <value>
          <see cref="T:System.Text.Encoding" /> , W której zapisany jest kod znaczników do strony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> Właściwość uzyskuje wartość od podstawy <xref:System.IO.TextWriter> obiektu.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> właściwość do zapisania typu kodowania, używany do renderowania tekstu do strony, która go zawiera kontrolki niestandardowej.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powiadamia <see cref="T:System.Web.UI.HtmlTextWriter" /> obiekt lub obiekt klasy pochodnej, że formant zakończył renderowania. Ta metoda umożliwia Zamknij wszelkie elementy znaczników otwarty w <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacja klasy <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> metoda nie ma żadnych funkcji. Konieczne jest przesłonięcie <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> w klasie pochodnej z <xref:System.Web.UI.HtmlTextWriter> klasę, aby umożliwić korzystanie z własnych funkcji renderowania.  
  
 Można użyć <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> metodę, aby zamknąć wszelkie elementy znaczników jest otwarty w <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje lewy kąt znak nawiasu i ukośnika (&lt;/) tagu zamykającego elementu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody do skonstruowania zakończenia elementu znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania tagu zamykającego `<table>` element kodu znaczników przy użyciu <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> i <xref:System.Web.UI.HtmlTextWriter.TagRightChar> pola jako wartości parametrów w wywołaniach <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje otwierający tag elementu znaczników, który zawiera atrybuty, które implementują układ i formatowanie znaków określony styl.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> , który określa układ i formatowanie, aby rozpocząć stosowanie do bloku kodu znaczników.</param>
        <summary>Zapisuje otwierający tag z <see langword="&lt;span&gt;" /> element, który zawiera atrybuty, które implementują układ i formatowanie znaków określony styl.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> stosowaną style, takie jak kolor tła lub obramowanie szerokość, do bloku kodu znaczników.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> i <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody umożliwiają adapterem urządzenia lub formant utworzyć kod znaczników, który używa formatowanie znaków określony styl. Użyj tej samej wartości dla `style` w <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> używanej w odpowiedniej metody <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Przeciążenia z <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> metoda renderuje tagu otwierającego `<span>` elementu. Ta metoda następnie dodaje niezbędne atrybuty oraz atrybuty stylu do tagu otwierającego `<span>` element, aby wyświetlić ustawienia określone przez <xref:System.Web.UI.WebControls.Style> obiektu. Aby renderować element różnych znaczników zawierają atrybuty oraz atrybuty stylu, należy użyć <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> przeciążenia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania niestandardowej klasy o nazwie `TextSample`, pochodną <xref:System.Web.UI.WebControls.WebControl> klasy, która używa <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> stosowaną <xref:System.Web.UI.WebControls.Style.ForeColor%2A> styl ciągu tekstowego.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Metoda renderuje kod HTML `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Zamyka wywołania metody `<span>` elementu Po wyrenderowaniu tekst.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> , który określa układ i formatowanie, aby rozpocząć stosowanie do bloku kodu znaczników.</param>
        <param name="tag">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> , Który określa elementu znaczników, który będzie zawierać style obiektu określonego w tagu otwierającym <c>styl</c>.</param>
        <summary>Zapisuje otwierający tag elementu znaczników, który zawiera atrybuty, które implementują układ i formatowanie znaków określony styl.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> stosowaną style, takie jak kolor tła lub obramowanie szerokość, do bloku kodu znaczników.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> i <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody umożliwiają adapterem urządzenia lub formant utworzyć kod znaczników, który używa formatowanie znaków określony styl. Użyj tej samej wartości dla `style` w <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> używanej w odpowiedniej metody <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Przeciążenia z <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> metoda renderuje tagu otwierającego określony przez element `tag` parametru. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> Metoda następnie dodaje niezbędne atrybuty oraz atrybuty stylu otwierający tag elementu, aby wyświetlić ustawienia określone przez <xref:System.Web.UI.WebControls.Style> obiektu. Użyj <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> przeciążenia do renderowania tagu otwierającego `<span>` elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania niestandardowej klasy o nazwie `TextSample`, pochodną <xref:System.Web.UI.WebControls.WebControl> klasy, która używa <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> stosowaną <xref:System.Web.UI.WebControls.Style.ForeColor%2A> styl ciągu tekstowego.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Metoda renderuje kod HTML`<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Zamyka wywołania metody `<span>` elementu Po wyrenderowaniu tekst.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak równości (<see langword="=" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz chcieć użyć <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> pole zamiast <xref:System.Web.UI.HtmlTextWriter.EqualsChar> podczas konstruowania ogranicznik otwarcia wartości atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania `src` atrybut i część jej wartość `<img>` elementu. W kodzie użyto <xref:System.Web.UI.HtmlTextWriter.EqualsChar> w <xref:System.Web.UI.HtmlTextWriter.Write%2A> wywołanie metody do renderowania znak równości (=) między `src` atrybutu i jego wartość.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znakiem równości (=) i podwójny cudzysłów (") w ciągu (=").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> i <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody do skonstruowania ogranicznik otwarcia wartości atrybutów.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania `border` atrybutu dla `<table>` elementu. Kod wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania atrybutu i jego wartość i używa <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> i <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> pól.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje tagu zamykającego elementu znacznika do końca określonego układ i formatowanie znaków.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> , który określa układ i formatowanie, aby zamknąć.</param>
        <summary>Zapisuje tagu zamykającego <see langword="&lt;span&gt;" /> elementu, aby zakończyć wybranego układu i formatowanie znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Przeciążenia z <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> metoda renderuje tag zamykający `<span>` elementu po tagu zamykającego formantu, zamykanie elementu otwarty przez odpowiednie <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> wywołania.  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> i <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody umożliwiają adapterem urządzenia lub formantu utworzyć kod znaczników rozpoczęcia i zakończenia bloku przy użyciu formatowanie znaków określony styl. Użyj tej samej wartości dla `style` w <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> używanej w odpowiedniej metody <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania niestandardowej klasy o nazwie `TextSample`, pochodną <xref:System.Web.UI.WebControls.WebControl> klasy, która używa <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> stosowaną <xref:System.Web.UI.WebControls.Style.ForeColor%2A> styl ciągu tekstowego.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Metoda renderuje kod HTML `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Zamyka wywołania metody `<span>` elementu Po wyrenderowaniu tekst.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> , który określa układ i formatowanie do zaprzestanie stosowania do tekstu wyjściowego.</param>
        <param name="tag">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> , Który określa tagu zamykającego elementu znaczników, który zawiera atrybuty, które zastosowano określony styl. Klucz przekazany w polu musi odpowiadać <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" /> wywołania.</param>
        <summary>Zapisuje tagu zamykającego elementu określonego znacznika do końca określonego układ i formatowanie znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Przeciążenia z <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> metoda renderuje tagu zamykającego elementu, który jest określony przez `tag` po tagu zamykającego formantu, zamykanie elementu, która została otwarta przez odpowiednie <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> wywołania metody.  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> i <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody umożliwiają adapterem urządzenia lub formantu utworzyć kod znaczników rozpoczęcia i zakończenia bloku przy użyciu formatowanie znaków określony styl. Użyj tej samej wartości dla `style` w <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> używanej w odpowiedniej metody <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania niestandardowej klasy o nazwie `TextSample`, pochodną <xref:System.Web.UI.WebControls.WebControl> klasy, która używa <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> stosowaną <xref:System.Web.UI.WebControls.Style.ForeColor%2A> styl ciągu tekstowego.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Metoda renderuje kod HTML `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Zamyka wywołania metody `<span>` elementu Po wyrenderowaniu tekst.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie atrybuty znacznika i stylu dla wszystkich właściwości strony i kontrolki serwera sieci Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed renderowaniem atrybuty w elemencie znaczników <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metoda jest wywoływana. Z kolei <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> wywołania metody <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> i <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> metody dla każdego atrybutu i styl do renderowania.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania niestandardowej klasy pochodzącej od <xref:System.Web.UI.HtmlTextWriter> klasy, która zastępuje <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metody. Po wywołaniu <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> zastąpienie sprawdza, czy składnik zapisywania tekstu renderuje żadnego `<label>` lub `<a>` elementy:  
  
-   Jeśli `<label>` renderowania elementu <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metoda sprawdza czy `style` atrybut jest renderowany w elemencie i, jeśli nie, tworzy `style` atrybutu i ustawia ją na `color: blue`.  
  
-   Jeśli `<a>` renderowania elementu <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Metoda określa, czy `href` atrybut jest dołączony i, jeśli nie, dodaje `href` do adresu URL http://www.cohowinery.com.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści wszystkie bufory dla bieżącego <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu i powoduje, że wszelkie buforowane dane są zapisywane do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacja klasy <xref:System.Web.UI.HtmlTextWriter.Flush%2A> metoda po prostu wywołuje <xref:System.IO.TextWriter.Flush%2A> podstawowa metoda.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">Ciąg, który zawiera ten atrybut, do których chcesz uzyskać <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Uzyskuje odpowiednie <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartość wyliczenia dla określonego atrybutu.</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Wartość wyliczenia dla określonego atrybutu; w przeciwnym razie nieprawidłową <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartość, gdy atrybut nie jest elementem członkowskim wyliczenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `attrName` jest `null` lub ciąg pusty (""), lub nie można znaleźć w tabeli nazw atrybutu, wartość -1, wpisany do <xref:System.Web.UI.HtmlTextWriterAttribute> obiektu, jest zwracany.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia klasy pochodzącej od <xref:System.Web.UI.HtmlTextWriter> klasy, która zastępuje <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody. Zastępowanie kontroli czy `tagKey` jest równa <xref:System.Web.UI.HtmlTextWriterTag.Font> pola, który wskazuje, że `<font>` znacznika elementu, który będzie renderowany. Jeśli tak, wywołuje zastąpienie <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodę, aby dowiedzieć się, czy `<font>` zawiera element <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu. Jeśli <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> zwraca `false`, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> wywołania metody <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> metodę, która definiuje <xref:System.Web.UI.HtmlTextWriterAttribute.Size> i ustawia wartość `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Uzyskać nazwę atrybutu znaczników.</param>
        <summary>Uzyskuje nazwę atrybutu znaczników skojarzonego z określonym <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartość.</summary>
        <returns>Ciąg zawierający nazwę atrybutu znaczników.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> Metoda zwraca ciąg pusty (""), jeśli `attrKey` nie jest prawidłową <xref:System.Web.UI.HtmlTextWriterAttribute> wartość.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> metodę, aby przekonwertować <xref:System.Web.UI.HtmlTextWriterAttribute.Size> wartość wyliczenia do jego nazwy ciągiem.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">Atrybut stylu, dla którego będzie można uzyskać <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Uzyskuje <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartość wyliczenia dla określonego stylu.</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Wyliczenia wartości odpowiadających <paramref name="styleName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> Metoda zwraca wartość -1 jako wpisana <xref:System.Web.UI.HtmlTextWriterStyle> wartość, jeśli `styleName` nie odpowiada żadnemu <xref:System.Web.UI.HtmlTextWriterStyle> wartości wyliczenia.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak zastąpić <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę w klasie pochodnej z <xref:System.Web.UI.HtmlTextWriter> klasy. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Określa zastąpienie czy `<label>` znaczników będzie odtwarzany, a jeśli tak, sprawdza elementu dla <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> nie zdefiniowano atrybutu <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> metoda jest używana jako pierwszy parametr w wywołaniu <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody w celu dodania <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu `<label>` elementu znaczników i zestaw <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Można uzyskać nazwy atrybutu style dla.</param>
        <summary>Uzyskuje nazwę atrybutu styl znacznika skojarzonego z określonym <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartości wyliczenia.</summary>
        <returns>Nazwa atrybutu styl skojarzony z <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> określony w wartości wyliczenia <paramref name="styleKey" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `styleKey` nie jest prawidłową <xref:System.Web.UI.HtmlTextWriterStyle> obiektu <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> metoda zwraca ciąg pusty ("").  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób sprawdzić, czy `<label>` element jest renderowany. Jeśli tak, Kreator sprawdza, czy <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu style został zdefiniowany w elemencie. Jeśli nie zdefiniowano atrybutu <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metoda jest wywoływana i <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> metoda konwertuje <xref:System.Web.UI.HtmlTextWriterStyle.Color> element członkowski wyliczenia do reprezentacji ciągu do przekazania do <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> — metoda.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element znaczników, dla którego będzie można uzyskać <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</param>
        <summary>Uzyskuje <see cref="T:System.Web.UI.HtmlTextWriterTag" /> skojarzone z elementem znaczników określona wartość wyliczenia.</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Wartość wyliczenia; w przeciwnym razie, jeśli <paramref name="tagName" /> nie jest skojarzony z określonym <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartość <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `tagName` jest `null`, ciąg pusty (""), lub nie można znaleźć w tabeli nazw tagów znaczników <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> metoda zwraca <xref:System.Web.UI.HtmlTextWriterTag.Unknown> pola.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia przeciążenia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody pobierającej ciąg jako jego parametr. Ten ciąg jest przekazywany do <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> metodę, która konwertuje je do odpowiednich <xref:System.Web.UI.HtmlTextWriterTag> wyliczeniowego, a następnie przekazuje do <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> przeciążenia, które przyjmuje <xref:System.Web.UI.HtmlTextWriterTag> wartość wyliczenia jako parametr.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Można uzyskać elementu znaczników.</param>
        <summary>Pobiera element znaczników skojarzonego z określonym <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartości wyliczenia.</summary>
        <returns>Ciąg reprezentujący element znaczników.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `tagKey` nie jest prawidłową <xref:System.Web.UI.HtmlTextWriterTag> wartość <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> metoda zwraca ciąg pusty ("").  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób zamknięcia `<font>` elementu przy użyciu <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody. <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Wywołania metody <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> metodę, aby przekonwertować <xref:System.Web.UI.HtmlTextWriterTag.Font> wartość na ciąg.  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę pozycji tabulatorów wcięcia początku każdej linii znacznika.</summary>
        <value>Liczba pozycji tabulatorów zwiększyć wcięcie każdego wiersza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wcięcie jest wykonywane przez ciąg, który jest określony przez zapisywanie `tabString` parametr <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> Konstruktor liczbę razy, które są określone przez <xref:System.Web.UI.HtmlTextWriter.Indent%2A> właściwości.  
  
 Jeśli <xref:System.Web.UI.HtmlTextWriter.Indent%2A> właściwość jest ustawiona na wartość ujemną, zostanie zmieniona na 0, przed zapisaniem.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak zwiększyć wartość, która jest przypisana do <xref:System.Web.UI.HtmlTextWriter.Indent%2A> właściwości, gdy zostały dodane atrybuty do tagu otwierającego `<span>` elementu i <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> została wywołana metoda. Zwiększa wcięcie dla żadnych znaczników, który jest renderowany wewnątrz `<span>` elementu.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia Edytor tekstu, który zapisuje zawartość elementu znaczników.</summary>
        <value>A <see cref="T:System.IO.TextWriter" /> który zapisuje zawartość wewnętrzny znaczników.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wewnętrzny markup zawartość jest tekst pomiędzy otwierającym, a zamykającym tagiem elementu języka znaczników.  
  
 Jeśli <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> właściwość jest ustawiona na <xref:System.IO.TextWriter> obiekt, który jest wystąpieniem <xref:System.Web.HttpWriter> klasy, fakt ten jest odnotowany i oddzielne odwołanie jest zapisywany.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać niestandardowej kontrolki serwera sieci Web, pochodzących z <xref:System.Web.UI.WebControls.WebControl> klasy, która zastępuje <xref:System.Web.UI.Control.Render%2A> metody. Używa <xref:System.Web.UI.HtmlTextWriter> klasa umożliwiająca zapisanie `<font>` elementu. Po zapisuje otwierający tag elementu, używa <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> właściwość do zapisania ciągu `"<br> The time on the server:"` i łączy ten ciąg wartością <xref:System.DateTime.Now%2A?displayProperty=nameWithType> właściwości.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy atrybut określonego znacznika i jego wartość jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzony z atrybutem znaczników.</param>
        <summary>Określa, czy atrybut określonego znacznika i jego wartość jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać wartość do przypisania do <xref:System.Web.UI.HtmlTextWriterAttribute> obiektów, użyj <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> przeciążenia zamiast tego.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono użycie zastępująca <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę w klasie, która dziedziczy <xref:System.Web.UI.HtmlTextWriter> klasy. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Czy zastąpić kontroli `<font>` znacznika elementu, który będzie renderowany. Jeśli tak, wywołuje zastąpienie <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> , aby sprawdzić, czy `<font>` zawiera element <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu. Jeśli nie, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> wywołania metody <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> metodę, która definiuje <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu i ustawia wartość `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzony z atrybutem znaczników.</param>
        <param name="value">Wartość atrybutu.</param>
        <summary>Określa, czy atrybut określonego znacznika i jego wartość jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metoda zwraca `true`, wartość do przypisania do <xref:System.Web.UI.HtmlTextWriterAttribute> obiekt jest zwracany w `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy atrybut styl znaczników jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzony z atrybutem.</param>
        <summary>Określa, czy atrybut styl znacznika określony jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut będzie odtwarzany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby pobrać wartości, który będzie renderowany z atrybutem określonego stylu, należy użyć <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metody.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób sprawdzić, czy `<label>` element jest renderowany. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metody sprawdza czy <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu style został zdefiniowany w elemencie. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> nie zdefiniowano atrybutu <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> definiuje metodę <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu i ustawia wartość `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzony z atrybutem.</param>
        <param name="value">Wartość atrybutu style.</param>
        <summary>Określa, czy atrybut stylu określonego znacznika i jej wartość jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut i jej wartość będzie odtwarzany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metoda zwraca `true`, wartość do przypisania do <xref:System.Web.UI.HtmlTextWriterStyle> atrybutu jest zwracany w `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribute">Ciąg zawierający nazwę atrybutu, aby sprawdzić.</param>
        <summary>Sprawdza atrybutu, aby upewnić się, że mogą być renderowane w tagu otwierającym <see langword="&lt;form&gt;" /> element znaczników.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacja klasy <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> metoda zwraca `true` dla wszystkich atrybutów. Zastąpienie <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> ograniczyć atrybuty, które mogą być renderowane w tagu otwierającym `<form>` elementu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zastąpienie <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /> metodę, aby zwrócić <see langword="true" /> tylko dla tych atrybutów, które mogą znajdować się w <see langword="&lt;form&gt;" /> element znaczników, dla których klasa pochodzi od <see cref="T:System.Web.UI.HtmlTextWriter" /> klasa ma.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ciąg terminator wiersza, które są używane przez <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu.</summary>
        <value>Ciąg terminator wiersza używanego przez bieżących <see cref="T:System.Web.UI.HtmlTextWriter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest powrót karetki następuje znak wysuwu wiersza ("\r\n").  
  
 Ciąg terminator wiersza są zapisywane do strumienia wyjściowego zawsze, gdy jeden z <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> nosi nazwę metody. Jeśli <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> właściwość jest ustawiona na `null`, używany jest domyślny znaku nowego wiersza.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób używania niestandardowej klasy pochodzącej od <xref:System.Web.UI.HtmlTextWriter> klasy, która zastępuje <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metody. Po wywołaniu <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> zastąpienie sprawdza, czy składnik zapisywania tekstu renderuje żadnego `<label>` lub `<a>` elementów. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Metoda określa, czy atrybut styl jest zdefiniowany dla etykiety. Jeśli żaden styl jest zdefiniowany, <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metoda ustawia wartość domyślną `style:color` atrybutu na niebieski. <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Używa metody <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> właściwości, aby wstawić wiersz przerywanie w tagu znaczników i zapisuje zdefiniowanych atrybutów.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu do renderowania.</param>
        <param name="value">Ciąg zawierający wartość, która jest przypisana do atrybutu.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzony z atrybutem znaczników.</param>
        <summary>Określa, czy atrybut określony znaczników i jej wartość może być renderowana do bieżącego elementu znaczników.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacja klasy <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> metoda zawsze zwraca `true`. <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> Zastąpień można określić, czy atrybut będzie odtwarzany na stronę.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> metody. Jeśli <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybut jest odwzorowywany, ale <xref:System.Web.UI.HtmlTextWriterAttribute.Size> wartość nie jest `30pt`, <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> zastąpienia wywołania <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody w celu dodania <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu i ustaw dla niego wartość `30pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli dziedziczą z <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> metodę, aby zwrócić <see langword="false" /> aby zapobiec atrybut renderowanego w ogóle, renderowany na dany element lub renderowanego dla określonego kodu znaczników. Na przykład, jeśli nie chcesz, aby obiekt pochodzący od <see cref="T:System.Web.UI.HtmlTextWriter" /> do renderowania <see langword="bgcolor" /> atrybutu <see langword="&lt;table&gt;" /> elementy, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> i zwracać <see langword="false" /> podczas <paramref name="name" /> przekazuje <see langword="bgcolor" /> i <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> wartość właściwości jest <see langword="table" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu style do renderowania.</param>
        <param name="value">Ciąg zawierający wartość, która jest przypisana do atrybutu style.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzony z atrybutem style.</param>
        <summary>Określa, czy atrybut stylu określonego znacznika i jej wartość może być renderowana do bieżącego elementu znaczników.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacja klasy <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> metoda zawsze zwraca `true`. <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> Zastąpień można określić, czy atrybut stylu są wyświetlane na stronie.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> metody. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> styl atrybut jest odwzorowywany, ale <xref:System.Web.UI.HtmlTextWriterStyle.Color> wartość nie jest `purple`, <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> zastąpienia używa <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodę, aby ustawić <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu `purple`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli dziedziczą z <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> metodę, aby zwrócić <see langword="false" /> aby zapobiec atrybutu style renderowany w ogóle, renderowany na dany element lub renderowanego dla konkretnego język. Na przykład, jeśli nie chcesz, aby obiekt, który jest pochodną <see cref="T:System.Web.UI.HtmlTextWriter" /> do renderowania <see langword="color" /> atrybutu stylu <see langword="&lt;p&gt;" /> elementu, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> i zwracać <see langword="false" /> podczas <paramref name="name" /> przekazuje <see langword="color" />i <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> wartość właściwości jest <see langword="p" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę elementu do renderowania.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Skojarzone z elementem.</param>
        <summary>Określa, czy element określony znaczników będzie renderowany do żądania strony.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacja klasy <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> metoda zawsze zwraca `true`. <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> Zastąpień można określić, czy element będzie odtwarzany na stronę.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> metody. Jeśli <xref:System.Web.UI.HtmlTextWriterTag.Font> renderowania elementu <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> zastąpienia używa <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodę, aby określić, czy <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu jest renderowany. Jeśli nie, używa <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodę w celu utworzenia <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu i ustaw dla niego wartość `20pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli dziedziczą z <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> metodę, aby zwrócić <see langword="false" /> aby zapobiec renderowany na wszystkich lub w języku znaczników określonego elementu znaczników. Na przykład, jeśli nie chcesz, aby obiekt, który jest pochodną <see cref="T:System.Web.UI.HtmlTextWriter" /> do renderowania <see langword="&lt;font&gt;" /> elementu, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> metodę, aby zwrócić <see langword="false" /> gdy zostanie zażądana strona zawierający <see langword="&lt;font&gt;" /> elementu.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje szereg kartę ciągów, które reprezentują poziom wcięcia linii znacznika znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> Używa metody <xref:System.Web.UI.HtmlTextWriter.Indent%2A> umożliwia określenie, ile ciągi kartę można zapisać do uzyskania żądanej wcięcia.  
  
 Ciąg karty zostanie określony z <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> konstruktora. Jeśli nie kartę podano ciągu, <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> stałych (`\t`) jest używany.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> metodę w klasie pochodzącej z <xref:System.Web.UI.HtmlTextWriter> klasy. <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> Zastąpienie zawsze używa <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> stała przeprowadzić wcięcie.  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa element ostatnio zapisanych znaczników z listy elementów renderowanych.</summary>
        <returns>A <see cref="T:System.String" /> zawierający ostatnio renderowany element znaczników.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy są dodawane do listy elementów renderowanego kodu znaczników przy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Metoda usuwa z listy elementów kodu znaczników przez wywołanie metody <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Lista elementów renderowanych jest pusta.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">Tagu zamykającego elementu znaczników.</param>
        <summary>Zapisuje element określony znaczników do późniejszego użycia podczas generowania tagu końcowego dla elementu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy są dodawane do listy elementów renderowanego kodu znaczników przy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> wywołania metody <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> metody. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> — Metoda usuwa znaczników elementy z listy po renderowaniu tagu końcowego dla elementu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu znaczników do zarejestrowania.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> o nazwie atrybutu, który odpowiada.</param>
        <summary>Rejestruje atrybutów znacznika czy literały lub dynamicznie generowane ze źródłowego pliku, dzięki czemu mogą być poprawnie odwzorowywany na klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wstępnie zdefiniowanych atrybutów języka znaczników HTML są zarejestrowane w wyniku wywołania <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metody podczas pierwszego <xref:System.Web.UI.HtmlTextWriter> tworzony jest obiekt. Dynamiczne atrybuty mogą być rejestrowane za pomocą <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metody w innym czasie.  
  
 Tabela rejestracji używana przez <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metoda jest `static`, więc rejestracja atrybutów ma zastosowanie do wszystkich <xref:System.Web.UI.HtmlTextWriter> obiektów na komputerze hosta.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg przekazany z pliku źródłowego, określając nazwę stylu.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Przy użyciu określonego stylu, który odpowiada.</param>
        <summary>Rejestruje właściwości Styl znaczników, czy literały lub dynamicznie generowane ze źródłowego pliku, dzięki czemu mogą być poprawnie odwzorowywany na klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wstępnie zdefiniowane kaskadowy arkusz (CSS) atrybuty stylu języka znaczników HTML są rejestrowane przez wywołania <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> — metoda podczas pierwszego <xref:System.Web.UI.HtmlTextWriter> tworzony jest obiekt. Atrybuty stylu dynamicznej można zarejestrować za pomocą <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metody w innym czasie.  
  
 Tabela rejestracji używana przez <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metoda jest `static`, więc rejestracja atrybutów ma zastosowanie do wszystkich <xref:System.Web.UI.HtmlTextWriter> obiektów na komputerze hosta.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg, który zawiera znacznik HTML.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Określa, który element do renderowania.</param>
        <summary>Rejestruje znaczników, czy literały lub dynamicznie generowane ze źródłowego pliku, dzięki czemu mogą być poprawnie odwzorowywany na klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wstępnie zdefiniowane znaczników języka HTML są rejestrowane przez wywołania <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> — metoda podczas pierwszego <xref:System.Web.UI.HtmlTextWriter> tworzony jest obiekt. Znaczniki dynamicznej można zarejestrować za pomocą <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metody w innym czasie.  
  
 Tabela rejestracji używana przez <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> jest metoda `static`, więc rejestracja tagów ma zastosowanie do wszystkich <xref:System.Web.UI.HtmlTextWriter> obiektów na komputerze hosta.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje tekst lub odstępy występujący po zawartości i przed tagu zamykającego elementu znaczników do strumienia wyjściowego znaczników.</summary>
        <returns>Ciąg, który zawiera odstępy lub tekst można zapisać po zawartości elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> Metoda może być przydatna, jeśli chcesz wstawić elementów podrzędnych do bieżącego elementu znaczników.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> metodę w klasie pochodnej z <xref:System.Web.UI.HtmlTextWriter> klasę, aby określić czy `<label>` element jest renderowany. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> zastąpienie wstawia znacznik zamykający `<font>` element bezpośrednio przed zamykającym tagu `<label>` elementu. Jeśli element innych niż `<label>` jest renderowany, <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> podstawowa metoda jest używana.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementacja klasy <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> metoda zwraca <see langword="null" />. Zastąpienie <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> Jeśli chcesz zapisać tekstu lub odstęp po zawartości elementu, ale przed tagu zamykającego.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje odstępów ani tekstu występujący po tag zamykający dla elementu znaczników.</summary>
        <returns>Odstępy lub tekst można zapisać po tagu zamykającego elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> Metoda może być przydatna, jeśli ma być renderowany dodatkowe zamykającym tagiem po znaczniku elementu.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> metodę, aby określić, czy klasa pochodna od <xref:System.Web.UI.HtmlTextWriter> renderowania klasy `<label>` elementu. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> zastąpienie wstawia znacznik zamykający `<font>` element natychmiast po `<label>` elementu. Jeśli nie jest `<label>` elementu <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> podstawowa metoda jest używana.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementacja klasy <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> metoda zwraca <see langword="null" />. Zastąpienie <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> Jeśli chcesz zapisać tekst lub odstęp po elemencie tagu zamykającego.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje tekst i odstępy przed zawartością i po otwierający tag elementu znaczników.</summary>
        <returns>Tekst lub odstępy zapisać przed zawartością elementu. Jeśli nie została zastąpiona, <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> zwraca <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Metoda może być przydatna, jeśli chcesz wstawić elementów podrzędnych do bieżącego elementu znaczników przed wewnętrzny znaczników.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> metodę, aby określić, czy klasa pochodna od <xref:System.Web.UI.HtmlTextWriter> klasa ma renderować `<label>` elementu. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> zastąpienie wstawia tagu otwierającego `<font>` element bezpośrednio po tagu otwierającego `<label>` elementu. Jeśli nie jest `<label>` elementu <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> podstawowa metoda jest używana.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementacja klasy <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> metoda zwraca <see langword="null" />. Zastąpienie <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> Jeśli chcesz zapisać tekstu lub odstęp po otwierający tag, ale przed zawartością elementu.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje tekst lub odstęp, który występuje przed otwierający tag elementu znaczników.</summary>
        <returns>Tekst lub odstępy zapisać przed elementem znaczników tagu początkowego. Jeśli nie została zastąpiona, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Metoda może być przydatna, jeśli ma być renderowany dodatkowe otwarcia tagów przed otwierający tag danego elementu.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metodę, aby określić, czy klasa, która jest pochodną <xref:System.Web.UI.HtmlTextWriter> klasa ma renderować `<label>` elementu. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> zastąpienie wstawia tagu otwierającego `<font>` element bezpośrednio przed `<label>` elementu. Jeśli nie jest renderowanie `<label>` elementu <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> podstawowa metoda jest używana.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementacja klasy <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> metoda zwraca <see langword="null" />. Zastąpienie <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> Jeśli chcesz zapisać tekst lub odstępy przed elementem tagu początkowego.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje otwierający tag elementu znaczników do strumienia wyjściowego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Ciąg zawierający nazwę elementu znaczników, dla której do renderowania tagu otwierającego.</param>
        <summary>Zapisuje otwierający tag elementu określonego znacznika do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> zastąpienie <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29> metody, jeśli element znacznika nie jest jednym z <xref:System.Web.UI.HtmlTextWriterTag> wartości wyliczenia.  
  
 Aby wygenerować element kodu znaczników przy użyciu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda, pierwsze wywołanie <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> i <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metod, w razie potrzeby, aby określić atrybuty elementu ani atrybuty stylu, które mają znaleźć się w tagu otwierającym elementu. Po wygenerowaniu wewnętrzny markup, wywołaj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodę, aby wygenerować tagu zamykającego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> w formantu niestandardowego do renderowania tagu otwierającego niestandardowej metody `MyTag` elementu. Przykładowy kod wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> renderowanie wewnętrznego znacznika, a następnie wywołuje metodę <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody, aby zamknąć element.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Jeden z <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartości, które definiuje otwierający tag elementu znaczników do renderowania.</param>
        <summary>Zapisuje otwierający tag znacznika elementu skojarzonego z określonym <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartość wyliczenia do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> przeciążenia z <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> metodę, jeśli element znaczników jest znanym typem, który jest jednym z <xref:System.Web.UI.HtmlTextWriterTag> wartości wyliczenia.  
  
 Aby wygenerować element kodu znaczników przy użyciu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda, pierwsze wywołanie <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> i <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metod, w razie potrzeby, aby określić atrybuty elementu ani atrybuty stylu, które mają znaleźć się w tagu otwierającym elementu. Po wygenerowaniu wewnętrzny markup, wywołaj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodę, aby wygenerować tagu zamykającego.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody do wyjściowego tagu otwierającego `<img>` elementu. Atrybuty, które są dodawane do elementu przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metoda będzie w otwarcia `<img>` tagu. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Metoda jest używana do generowania tagu zamykającego.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje do tagu końcowego elementu znaczników do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody po <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> wywołać przeciążenia i Po wyrenderowaniu całą zawartość pomiędzy otwierającym, a zamykającym tagiem (wewnętrzny markup) elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody po obu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę, która generuje otwierający tag i <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę, która renderuje wewnętrzny markup pomiędzy otwierającym, a zamykającym tagiem niestandardowe `MyTag` Wywołano element.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje spację i samozamykającego znaku ukośnika (/) tagu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> Pole jest używane w elementy znaczników, które są automatycznie zamknięte. Na przykład:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje zamknięcie ukośnika znaku i prawego nawiasu (/&gt;) elementu samozamykającego znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody podczas konstruowania samozamykającego elementów kodu znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania wartości niestandardowego `FileName` właściwość następuje znak cudzysłowu i znaków reprezentowany przez <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> pola. Kod wywołuje przykład <xref:System.Web.UI.HtmlTextWriter.Write%2A> — metoda i przekazuje <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> pole jako argument parametru, aby zamknąć element.  
  
 W tym przykładzie kodu renderuje `FileName` wartości właściwości, a następnie następujący kod:  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje średnika (;).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekaż <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> pole jako argument parametru w <xref:System.Web.UI.HtmlTextWriter.Write%2A> wywołania metody, gdy ma być renderowany średnikiem z kontrolkę niestandardową lub karty.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania ręcznie szereg style w elemencie znaczników. Przykład kodu wykorzystuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania `font-size` i `border-style` stylu atrybutów. <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> Pole jest używane jako parametr <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do oddzielania wartość `font-size` atrybutu od początku `border-style` atrybutu.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje apostrof (').</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> pola, gdy jest to niezbędne do renderowania apostrof.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znaku ukośnika (/).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.SlashChar> pola do renderowania ukośnik oznacza podczas pisania adresu URL. <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Używa metody <xref:System.Web.UI.HtmlTextWriter.SlashChar> podczas zapisywania tagu zamykającego elementu znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania ręcznie `src` atrybutu `<img>` elementu. Przykład kodu wykorzystuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody z <xref:System.Web.UI.HtmlTextWriter.SlashChar> oznacza pole jako jego parametr do renderowania ukośnika w ścieżce, która jest stosowana do `src` atrybutu.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak spacji ().</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> i <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody podczas zapisywania separatory między elementów i atrybutów.  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób tworzenia tablicy znaków. Drugi przedstawiono sposób użycia tablicy.  
  
 Te przykłady kodu generuje następujący kod:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 W poniższym przykładzie przedstawiono sposób tworzenia <xref:System.Char> tablica zawierająca <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 W poniższym przykładzie przedstawiono użycie tablicy, który został utworzony w poprzednim przykładzie kodu jako parametr podczas wywoływania metody <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje styl equals (<see langword=":" />) służy do określania stylu znak atrybutów równa wartości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> metody, aby ograniczyć styl nazwy i wartości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania `FontWeight` atrybutów i wartości `bold` do otwierający tag elementu. Przykład kodu wykorzystuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody z <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> pole jako parametr do renderowania znak, który ustawia wartości każdego atrybutu stylu.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartość elementu określonego znacznika.</summary>
        <value>Element znaczników, który ma tagu otwierającego renderowane.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> Właściwość jest używana tylko dla klas, które dziedziczą z <xref:System.Web.UI.HtmlTextWriter> klasy. Należy odczytać lub ustawić <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> właściwość tylko w wywołaniu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody; tylko raz ma ustawioną wartość spójne.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zastąpiona wersja <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> metodę w klasie, która jest pochodną <xref:System.Web.UI.HtmlTextWriter> klasy. Używa wartości <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> właściwości, aby określić, czy formant serwera przy użyciu niestandardowego <xref:System.Web.UI.HtmlTextWriter> renderowania obiektu `<label>` element znaczników. Jeśli tak jest, `<font>` element z `color` ustawić atrybutu `red` jest zwracana do modyfikowania formatowanie `<label>` tekstu elementu.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Nie można ustawić wartości właściwości.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje otwierającego nawiasu ostrego (&lt;) tagu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, i <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody podczas zapisywania znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu renderuje pierwszy znak w tagu otwierającym `<table>` element o takiej nazwie elementu. Przykład kodu wykorzystuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody z <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> pole jako parametr.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę tagu renderowanego elementu znaczników.</summary>
        <value>Nazwa tagu renderowanego elementu znaczników.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagName%2A> Właściwość jest używana tylko dla klas, które dziedziczą z <xref:System.Web.UI.HtmlTextWriter> klasy. Należy odczytać lub ustawić <xref:System.Web.UI.HtmlTextWriter.TagName%2A> właściwość tylko w <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> wywołań metod; tylko raz ma ustawioną wartość spójne.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zastąpiona wersja <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metodę w klasie, która jest pochodną <xref:System.Web.UI.HtmlTextWriter> klasy. Przykład kodu sprawdza, czy element do renderowania `<label>` element wywołując <xref:System.String.Compare%2A?displayProperty=nameWithType> metody, a następnie przekazywanie <xref:System.Web.UI.HtmlTextWriter.TagName%2A> wartość właściwości i ciąg, `"label"`, jako argumenty parametrów. Jeśli `<label>` element ma być renderowany tagu otwierającego `<font>` elementu z `color` ustawić atrybutu `red`, jest renderowany przed `<label>` element do tagu początkowego. Jeśli nie jest element do renderowania `<label>` element, wersja klasy podstawowej <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metoda jest wywoływana.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje zamykającego nawiasu ostrego (&gt;) tagu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, i <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody podczas zapisywania znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania tagu zamykającego `<table>` element dokonując wywołania przeciążenia metody <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody. Do renderowania tagu ostatni znak, przykładzie kodu używane <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody z <xref:System.Web.UI.HtmlTextWriter.TagRightChar> pole jako parametr.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje określony typ danych do strumienia wyjściowego, wraz z odstępy kartę oczekujące.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Boolean" /> Można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje Reprezentacja tekstowa typu wartość logiczna do strumienia wyjściowego, wraz z odstępy kartę oczekujące.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje reprezentację tekstu znaku Unicode do strumienia wyjściowego, wraz z odstępy kartę oczekujące.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, za pomocą <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę, aby zakończyć tagu otwierającego `<img>` elementu przy użyciu <xref:System.Web.UI.HtmlTextWriter.TagRightChar> stałej.  
  
 W tym przykładzie kodu renderuje następujący kod znaczników:  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków Unicode do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje Reprezentacja tekstowa typu tablicy znaków Unicode do strumienia wyjściowego, wraz z odstępy kartę oczekujące.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób tworzenia tablicy znaków. Drugi przedstawiono sposób użycia tablicy.  
  
 Te przykłady kodu generuje następujący kod:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Poniższy przykładowy kod przedstawia sposób tworzenia tablicy znaków, które pełnych `hello world`. Uwzględnione w tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola, które tworzy odstęp między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania `hello world` tablicy znaków utworzony w poprzednim przykładzie kodu do strony, gdy formant, który zawiera ten przykładowy kod znajduje się na stronie.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczbie zmiennoprzecinkowej podwójnej precyzji można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje Reprezentacja tekstowa liczby zmiennoprzecinkowej podwójnej precyzji do strumienia wyjściowego, wraz z odstępy kartę oczekujące.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania wartości <xref:System.Double.MaxValue?displayProperty=nameWithType> pola.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bajtowych całkowita można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje Reprezentacja tekstowa typu całkowita 32 bajtów do strumienia wyjściowego, oraz wszelkie oczekujące odstępy kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bajtowych całkowita można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje Reprezentacja tekstowa typu całkowita 64 bajtów do strumienia wyjściowego, oraz wszelkie oczekujące odstępy kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje Reprezentacja tekstowa typu obiektu do strumienia wyjściowego, wraz z odstępy kartę oczekujące.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 Wartość <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości:  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowych pojedynczej precyzji do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje Reprezentacja tekstowa liczby zmiennoprzecinkowej pojedynczej precyzji do strumienia wyjściowego, wraz z odstępy kartę oczekujące.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania wartości <xref:System.Single.Epsilon?displayProperty=nameWithType> pola, które jest najmniejsza możliwa wartość z <xref:System.Single> struktury.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje określony ciąg do strumienia wyjściowego, wraz z odstępy kartę oczekujące.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania ciąg pomiędzy otwierającym, a zamykającym tagiem elementu znacznika niestandardowego.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do formatu.</param>
        <summary>Zapisuje ciąg kartę i ciąg formatowania do strumienia wyjściowego przy użyciu tej samej semantyki jako <see cref="M:System.String.Format(System.String,System.Object)" /> metody oraz wszelkie oczekujące odstępy kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania sformatowany ciąg z wartością <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg">Tablica obiektów do formatowania.</param>
        <summary>Zapisuje sformatowany ciąg, który zawiera Reprezentacja tekstowa typu tablicy obiektów do strumienia wyjściowego, wraz z odstępy kartę oczekujące. Ta metoda używa tej samej semantyki jako <see cref="M:System.String.Format(System.String,System.Object[])" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwsza z nich pokazano, jak ciąg sformatowany i zawartości tablicy. Drugi pokazuje, jak można zadeklarować tablicy.  
  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania ciąg sformatowany i zawartości tablicy obiektów o nazwie `curPriceTime`. Wywołanie metody renderuje drugiego elementu członkowskiego tablicy przed renderowanie pierwszego elementu członkowskiego.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 Poniższy przykład kodu pokazuje deklarowanie `curPriceTime` Tablica obiektów.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków, z którego ma zostać zapisywanie tekstu do strumienia wyjściowego.</param>
        <param name="index">Lokalizacja indeksu w tablicy, którym rozpoczyna się zapisu.</param>
        <param name="count">Liczba znaków do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje Reprezentacja tekstowa typu subarray znaków Unicode do strumienia wyjściowego, wraz z odstępy kartę oczekujące.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób tworzenia tablicy znaków. Drugi przedstawiono sposób użycia tablicy.  
  
 Te przykłady kodu generuje następujący kod:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 W poniższym przykładzie przedstawiono sposób tworzenia tablicy znaków, które pełnych `hello world`. Uwzględnione w tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola, które tworzy odstęp między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Część następujący przykładowy kod `index` i `count` parametry <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania pięć pierwszych znaków do tablicy utworzonej w poprzednim przykładzie.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do formatu.</param>
        <param name="arg1">Obiekt do formatu.</param>
        <summary>Zapisuje sformatowany ciąg, który zawiera Reprezentacja tekstowa dwóch obiektów do strumienia wyjściowego, wraz z odstępy kartę oczekujące. Ta metoda używa tej samej semantyki jako <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje żadnych kart, które oczekują, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania ciąg formatowania i wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.DateTime.Today%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje atrybut znaczników i jego wartość strumienia wyjściowego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ten atrybut można zapisać do strumienia wyjściowego.</param>
        <param name="value">Wartość atrybutu.</param>
        <summary>Zapisuje określony znaczników atrybut i wartość do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody można zapisać znacznika atrybutów i ich wartości bez kodowania. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda zapisuje wartość atrybutu ujęta w znaki cudzysłowu ("). Jeśli `value` jest `null`, <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metoda zapisuje nazwy atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje renderowanie `<img>` element, w których oba przeciążeń <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metoda jest wywoływana. Przykład kodu wykorzystuje następujący proces:  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodę, która renderuje znaków otwarcia elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> przeciążenia, który zapisuje dane `alt` atrybutu i jego wartość `<img>` elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> przeciążenia do renderowania niestandardowego `myattribute` atrybutu o wartości `No "encoding" required`, a następnie ustawia `fEncode` do `false`.  
  
-   Zamyka otwierający tag elementu, a następnie wywołuje <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody, aby zamknąć `<img>` elementu.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W klasach pochodnych, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> metodę, aby zdefiniować reguły niestandardowe dla zapisywania atrybutów i ich wartości. Na przykład można napisać kod, który może <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> metody do zapisania atrybutu o wartości pustej.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut znaczników do zapisu do strumienia wyjściowego.</param>
        <param name="value">Wartość atrybutu.</param>
        <param name="fEncode">
          <see langword="true" /> kodowanie atrybutu i jego przypisanej wartości; w przeciwnym razie <see langword="false" />.</param>
        <summary>Zapisuje atrybut określonego znacznika i wartość do strumienia wyjściowego i, jeśli jest określony, zapisuje wartość zakodowany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody do zapisywania atrybutów znacznika i ich wartości z lub bez kodowania. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Używa metody <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metody w celu kodowania.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda zapisuje wartość atrybutu ujęta w znaki cudzysłowu ("). Jeśli `value` jest `null`, <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metoda zapisuje nazwy atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje renderowanie `<img>` element, w których oba przeciążeń <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metoda jest wywoływana. Przykład kodu wykorzystuje następujący proces:  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodę, która renderuje znaków otwarcia elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> przeciążenia, który zapisuje dane `alt` atrybutu i jego wartość `<img>` elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> przeciążenia do renderowania niestandardowego `myattribute` atrybutu o wartości `No "encoding" required`, a następnie ustawia `fEncode` do `false`.  
  
-   Zamyka otwierający tag elementu, a następnie wywołuje <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody, aby zamknąć `<img>` elementu.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W klasach pochodnych, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> metodę, aby zdefiniować reguły niestandardowe dla zapisywania atrybutów i ich wartości. Na przykład można napisać kod, który może <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> metody do zapisania atrybutu o wartości pustej.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element znaczników którego można zapisać znacznika otwierającego.</param>
        <summary>Zapisuje odstępy kartę i otwierający tag elementu określonego znacznika do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> — Metoda nie zapisuje zamykającego nawiasu ostrego (>) tagu otwierającego element znaczników. Dzięki temu zapisywania atrybutów znacznika otwierający tag elementu. Użyj <xref:System.Web.UI.HtmlTextWriter.TagRightChar> stała, aby zamknąć otwierający tag podczas wywoływania metody <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody. Użyj <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody z <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> stała podczas pisania elementów kodu znaczników, które są samozamykającego.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Metoda jest używana przez formanty niestandardowego serwera, które nie umożliwia mapowanie tagów lub atrybutów i renderowania elementów kodu znaczników w taki sam sposób dla każdego żądania.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje renderowanie `<img>` element, w których oba przeciążeń <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metoda jest wywoływana. Przykład kodu wykorzystuje następujący proces:  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodę, która renderuje znaków otwarcia elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> przeciążenia, który zapisuje dane `alt` atrybutu i jego wartość `<img>` elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> przeciążenia do renderowania niestandardowego `myattribute` atrybutu o wartości `No "encoding" required`, a następnie ustawia `fEncode` do `false`.  
  
-   Zamyka otwierający tag elementu, a następnie wywołuje <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody, aby zamknąć `<img>` elementu.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje <see langword="&lt;br /&gt;" /> element znaczników do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> metody do renderowania wiersza przerwy w niestandardowych znaczników formant lub karty. <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> Metoda zapisuje odstęp między `br` i `/` lepszą zgodność HTML.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> metodę, aby zapisać `<br />` element do przeglądarki po <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metoda zapisuje zakodowanego `&lt;custID&gt; &amp; &lt;invoice#&gt;` znaczników.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg tekstowy do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <summary>Koduje tekst określony dla urządzenia wysyłającego żądanie, a następnie zapisuje do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metody, jeśli ciąg zawiera nawiasy (\< lub >) lub handlowego "i" (&).  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> Używa metody <xref:System.Web.HttpUtility.HtmlEncode%2A> metodę w celu kodowania i również konwertuje znak Unicode `00A0` do `&nbsp;`.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metody można zapisać znacznika zakodowanego `&lt;custID&gt; &amp; &lt;invoice#&gt;` do strumienia wyjściowego. <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> Zapisy metody `<br />`.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Adres URL ciąg do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <summary>Koduje określony adres URL, a następnie zapisuje do strumienia wyjściowego. Adres URL może zawierać parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> Metoda koduje ciąg w `url` parametru zgodnie ze specyfikacją kodowania adresów URL. Parametry, które należy wykonać ogranicznik znak zapytania (?) nie jest zaszyfrowana.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> metodę, która generuje następujące dane wyjściowe:  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlText">Parametr adresu URL ciąg do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <summary>Koduje określony parametr adresu URL dla urządzenia wysyłającego żądanie, a następnie zapisuje do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spacje w parametru część adresu URL są zakodowane jako znak plus (+), a następnie znaku równości (=) są kodowane jako `%3d`.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> metodę, która generuje następujące dane wyjściowe:  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element, aby zapisać tagu zamykającego.</param>
        <summary>Zapisuje odstępy kartę i tagu zamykającego znacznika określonego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W odróżnieniu od <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metoda nie ma żadnych logiki dokonanie tagu końcowym elementu odpowiada odpowiadających tagu początkowego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje renderowanie `<img>` elementu. Przykład kodu wykorzystuje następujący proces:  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody do renderowania znaków otwarcia elementu.  
  
-   Wymaga dwóch przeciążeń <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodę, aby zapisywać atrybuty do `<img>` elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody, aby zamknąć `<img>` elementu.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje odstępy kartę i otwierający tag elementu określonego znacznika do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> Metody automatycznie zapisuje zamykającego nawiasu ostrego (>) znacznika otwierającego elementu, w odróżnieniu od <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodę, która nie zapisuje zamykającego nawiasu ostrego. Użyj <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> dla znaczników elementów, które mają żadnych atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane do <see cref="T:System.Web.UI.HtmlTextWriter" /> strumienia wyjściowego określoną przez parametry przeciążone następuje ciąg terminator wiersza. Wszystkie wersje tej metody zapisu odstępy oczekujące kartę do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). Aby uzyskać więcej informacji, zobacz <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> do wstawienia wiersza po `<img>` element jest renderowany.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i reprezentacja tekstowa typu wartość logiczna, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i znaku Unicode, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i tablicy znaków Unicode, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób tworzenia tablicy. Drugi pokazuje, jak użyć tej tablicy.  
  
 Te przykłady kodu generuje następujący kod:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 W poniższym przykładzie przedstawiono sposób tworzenia tablicy znaków, które pełnych `hello world`. Uwzględnione w tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola, które tworzy odstęp między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Poniższy kod przykładowy renderuje `hello world` tablicy znaków, który został utworzony w poprzednim przykładzie przy użyciu <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody.  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczbie zmiennoprzecinkowej podwójnej precyzji można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i reprezentacja tekstowa typu liczbą zmiennoprzecinkowe podwójnej precyzji, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania wartości <xref:System.Double.MaxValue?displayProperty=nameWithType> pola.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bajtowych całkowita można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i reprezentacja tekstowa typu całkowita 32-bajtowych, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bajtowych całkowita można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i reprezentacja tekstowa typu całkowita 64-bajtowych, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i reprezentacja tekstowa typu obiektu, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości do formantu.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Pojedynczej precyzji liczba zmiennoprzecinkowa można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i reprezentacja tekstowa typu liczbą zmiennoprzecinkowych pojedynczej precyzji, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania wartości <xref:System.Single.Epsilon?displayProperty=nameWithType> pola, które jest najmniejsza możliwa wartość z <xref:System.Single> struktury.  
  
 W tym przykładzie kodu generuje następujący kod znaczników:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i ciąg tekstowy, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">4-bajtowych całkowitą bez znaku można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i reprezentacja tekstowa 4-bajtowych wartości całkowitej bez znaku, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do formatu.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i sformatowany ciąg zawierający Reprezentacja tekstowa typu obiektu, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> — Metoda korzysta z tej samej semantyki jako <xref:System.String.Format%28System.String%2CSystem.Object%29> metody. <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania sformatowany ciąg z wartością <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg">Tablica obiektów do formatowania.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i sformatowany ciąg, który zawiera Reprezentacja tekstowa typu tablicy obiektów, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> — Metoda korzysta z tej samej semantyki jako <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> metody. <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` metody.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób renderowania ciąg i Tablica do strumienia wyjściowego. Drugi przedstawia sposób zadeklarować tablicy.  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania ciąg sformatowany i zawartości tablicy obiektów do strumienia wyjściowego.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 Poniższy przykład kodu pokazuje, jak zadeklarować tablicę obiektów, który był renderowany w poprzednim przykładzie kodu.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablicy znaków, z którego ma zostać zapisywanie tekstu do strumienia wyjściowego.</param>
        <param name="index">Lokalizacja tablicy znaków, w którym rozpoczyna się zapisu.</param>
        <param name="count">Liczba znaków w tablicy można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i subarray znaków Unicode, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób tworzenia tablicy znaków. Drugi przedstawiono sposób użycia tablicy.  
  
 Te przykłady kodu generuje następujący kod:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Poniższy przykładowy kod przedstawia sposób tworzenia tablicy znaków, które pełnych `hello world`. Uwzględnione w tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola, które tworzy odstęp między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Poniższy przykład kodu wykorzystuje `index` i `count` parametry <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania pięć pierwszych znaków do tablicy utworzonej w poprzednim przykładzie kodu.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do formatu.</param>
        <param name="arg1">Obiekt do formatu.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępy i sformatowany ciąg, który zawiera Reprezentacja tekstowa typu dwa obiekty następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> — Metoda korzysta z tej samej semantyki jako <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> metody. <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania ciąg formatowania i wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości i <xref:System.DateTime.Today%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje ciąg, następuje ciąg terminator wiersza do strumienia wyjściowego. Ta metoda powoduje ignorowanie odstępy określonej karty.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> metody zamiast <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody, jeśli nie chcesz renderowania kartę odstępy przed renderowanych ciąg `s`.  
  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki następuje wiersz ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używana podczas zapisu `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje atrybut stylu i jej wartość strumienia wyjściowego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu można zapisać do strumienia wyjściowego.</param>
        <param name="value">Wartość atrybutu style.</param>
        <summary>Zapisuje określony styl atrybutu do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> Metoda zapisuje atrybut stylu w następującym formacie:  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu można zapisać do strumienia wyjściowego.</param>
        <param name="value">Wartość atrybutu style.</param>
        <param name="fEncode">
          <see langword="true" /> kodowanie atrybutu style i jej wartość przypisaną; w przeciwnym razie <see langword="false" />.</param>
        <summary>Zapisuje określony styl atrybut i wartość strumienia wyjściowego i koduje wartość, jeśli określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> Metoda zapisuje atrybut stylu w następującym formacie:  
  
 `name` `=` `value` `;`  
  
 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> Metody jest używany do kodowania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="argument" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <param name="argument">
          <see langword="true" /> Aby zakodować ciąg w ramach sekcji parametr adresu URL; <see langword="false" /> Aby zakodować ciąg jako części sekcji ścieżki adresu URL.</param>
        <summary>Zapisuje określony ciąg kodowania go zgodnie z wymaganiami adresu URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> Metoda koduje znaki, które można uwzględnić ograniczniki adresu URL (zależy od ustawienia `argument`) do ciągów w postaci `%xx`, jeśli kod ASCII jest mniejsza niż 128; w przeciwnym razie `%uxxxx`, gdzie `x` jest szesnastkową wartością cyfrową.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> i <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> metody <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> metody jako metodę narzędzia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>