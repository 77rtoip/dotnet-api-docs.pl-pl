<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d78992dfc8469140633229082294ead77c3d2811" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37532276" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <TypeSignature Language="F#" Value="type HtmlTextWriter = class&#xA;    inherit TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje znaczników znaków i tekst w strumieniu wyjściowym formant serwera ASP.NET. Ta klasa udostępnia możliwości formatowania, korzystających z kontrolek serwera ASP.NET podczas renderowania kodu znaczników dla klientów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Klasy jest używany do renderowania język HTML 4.0 dla przeglądarek komputerowych. <xref:System.Web.UI.HtmlTextWriter> Jest również klasą bazową dla wszystkich znaczników składników zapisywania <xref:System.Web.UI> przestrzeni nazw, w tym <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>, i <xref:System.Web.UI.XhtmlTextWriter> klasy. Te klasy są używane do zapisania elementów, atrybutów i stylu i układu informacje dotyczące różnych typów znaczników. Ponadto te klasy są używane przez klasy karty strony i kontrolki, które są skojarzone z każdym języku znaczników.  
  
 W większości przypadków ASP.NET automatycznie używa zapisywania odpowiednie dla urządzenia wysyłającego żądanie. Jednak jeśli utworzony Edytor niestandardowy tekst lub chcesz określić określonego składnika zapisywania do renderowania strony dla określonego urządzenia, musisz dokonać mapowania modułu zapisującego do strony w `controlAdapters` części pliku .browser aplikacji.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia <xref:System.Web.UI.Control.Render%2A> metoda formant niestandardowy, który jest tworzony na podstawie <xref:System.Web.UI.Control> klasy. Przykładowy kod przedstawia sposób użycia różnych <xref:System.Web.UI.HtmlTextWriter> metody, właściwości i pola.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Wystąpienie, które renderuje zawartość znaczników.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.HtmlTextWriter" /> klasę, która korzysta z domyślnego ciągu kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Przeciążenia <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> Konstruktor korzysta z <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> stałej, gdy konieczne jest wcięcie wiersza. Wywołuje <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> przeciążenie, można zainicjować nowego wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> konstruktora, aby utworzyć niestandardową <xref:System.Web.UI.HtmlTextWriter> obiektu o nazwie `StyledLabelHtmlWriter.` podczas `MyPage` niestandardowej klasy, która jest pochodną <xref:System.Web.UI.Page> klasy, jest wymagany przez klienta przez przeglądarkę, `StyledLabelHtmlWriter` klasy do renderowania jej zawartość do strumienia wyjściowego.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> Która renderuje zawartość znaczników.</param>
        <param name="tabString">Ciąg używany do renderowania wcięcie wiersza.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy przy użyciu znaku ciągu określonej karty.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Przeciążenia <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> Konstruktor korzysta z `tabString` gdy konieczne jest wcięcie wiersza. Wywołuje <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> podstawowy Konstruktor, inicjuje nowe wystąpienie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> konstruktora, aby utworzyć niestandardową <xref:System.Web.UI.HtmlTextWriter> obiektu o nazwie `StyledLabelHtmlWriter.` podczas `MyPage` niestandardowej klasy, która jest pochodną <xref:System.Web.UI.Page> klasy, jest wymagany przez klienta przez przeglądarkę, `StyledLabelHtmlWriter` klasy do renderowania jej zawartość do strumienia wyjściowego.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje atrybut adiustacji określonego i wartość w znaczniku otwierającym elementu, <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu tworzy o kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string -&gt; unit&#xA;override this.AddAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu, aby dodać.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <summary>Dodaje atrybut adiustacji określonego i wartość w znaczniku otwierającym elementu, <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu tworzy o kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> metodę, jeśli ten atrybut nie jest jednym z <xref:System.Web.UI.HtmlTextWriterAttribute> wartości, lub jeśli ten atrybut jest nieznany do czasu wykonywania.  
  
 W przypadku wystąpienia dowolnego elementu danego znaczników <xref:System.Web.UI.HtmlTextWriter> klasa przechowuje listę atrybutów dla tego elementu. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszelkie atrybuty dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody są renderowane w znaczniku otwierającym elementu. Listę atrybutów, które następnie zostanie usunięte z <xref:System.Web.UI.HtmlTextWriter> obiektu.  
  
 Wzorzec pisania kodu do renderowania elementów kodu znaczników jest następująca:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody w celu dodania wszelkie atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, zgodnie z potrzebami do renderowania zawartości między otwierającym i zamykającym tagiem elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywołania <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metoda przed wywołaniem <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody. Kod wywołuje dwie różne przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> i dwa różne przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> przed wywołaniem <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody do renderowania `<span>` elementu w strumieniu wyjściowym. <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> Metoda jest używana do definiowania atrybutu niestandardowego o nazwie `CustomAttribute` oraz wartość niestandardową o nazwie `CustomAttributeValue` dla `<span>` element, który powoduje wyświetlenie tego kodu.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentujący atrybut adiustacji, aby dodać do strumienia wyjściowego.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <summary>Dodaje atrybut adiustacji i wartości atrybutów w znaczniku otwierającym elementu, <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu tworzy o kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metody do renderowania atrybutów standardowych znaczników.  
  
 W przypadku wystąpienia dowolnego elementu danego znaczników <xref:System.Web.UI.HtmlTextWriter> klasa przechowuje listę atrybutów dla tego elementu. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszelkie atrybuty, które są dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody są renderowane w znaczniku otwierającym elementu. Listę atrybutów, które następnie zostanie usunięte z <xref:System.Web.UI.HtmlTextWriter>.  
  
 Wzorzec pisania kodu do renderowania elementów kodu znaczników jest następująca:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody w celu dodania wszelkie atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, zgodnie z potrzebami do renderowania zawartości między otwierającym i zamykającym tagiem elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metody w celu dodania `Onclick` atrybutu do elementu znaczników, a następnie ustaw jego wartość z następującym kodem ECMAScript:  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * bool -&gt; unit&#xA;override this.AddAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, fEndode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu, aby dodać.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <param name="fEndode">
          <see langword="true" /> kodowanie atrybutu i jego wartość; w przeciwnym razie <see langword="false" />.</param>
        <summary>Dodaje atrybut adiustacji określonego i wartość w znaczniku otwierającym elementu, <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu tworzy o kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody z kodowaniem opcjonalne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metodę, jeśli ten atrybut nie jest jednym z <xref:System.Web.UI.HtmlTextWriterAttribute> wartości lub jest potrzebna, jeśli ten atrybut nie jest znany aż do czasu uruchamiania kodowania.  
  
 W przypadku wystąpienia dowolnego elementu danego znaczników <xref:System.Web.UI.HtmlTextWriter> klasa przechowuje listę atrybutów dla tego elementu. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszelkie atrybuty dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody są renderowane w znaczniku otwierającym elementu. Listę atrybutów, które następnie zostanie usunięte z <xref:System.Web.UI.HtmlTextWriter> obiektu.  
  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metody z `fEncode` równa `true`, jeśli ten atrybut może zawierać znaku cudzysłowu ("), znak mniejszości (<) lub handlowe" i "(&). Wywołania metody które będą kodowanie atrybutu do spełnienia wymagań urządzenia wysyłającego żądanie. Możesz ustawić `fEncode` do `false`, jeśli wiesz, że żadna z tych znaków zostanie wygenerowany lub jeśli wiesz, że ten atrybut jest już zaszyfrowana.  
 
Jeśli typem atrybutu jest `Style`, wartość nie będzie zakodowana nawet wtedy, gdy `fEndode` jest `true`. Upewnij się, że wartość stylu jest zgodna z CSS i nie zawierają złośliwego kodu.
  
 Wzorzec pisania kodu do renderowania elementów kodu znaczników jest następująca:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody w celu dodania wszelkie atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, zgodnie z potrzebami do renderowania zawartości między otwierającym i zamykającym tagiem elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metodę, aby upewnić się, że atrybut niestandardowy o nazwie `myattribute`, a jego wartość nie jest zakodowany na potrzeby `<img>` elementu.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit&#xA;override this.AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu, aby dodać.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentujący ten atrybut.</param>
        <summary>Dodaje atrybut adiustacji określonego i wartość, wraz z <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartość wyliczenia w znaczniku otwierającym elementu, <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu tworzy o kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> metody tylko wtedy, gdy dziedziczenie z <xref:System.Web.UI.HtmlTextWriter> klasy. Umożliwia tworzenie nowych `name` i `key` pary dla atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentujący atrybut adiustacji, aby dodać do strumienia wyjściowego.</param>
        <param name="value">Ciąg zawierający wartość do przypisania do atrybutu.</param>
        <param name="fEncode">
          <see langword="true" /> kodowanie atrybutu i jego wartość; w przeciwnym razie <see langword="false" />.</param>
        <summary>Dodaje atrybut adiustacji i wartości atrybutów w znaczniku otwierającym elementu, <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu tworzy o kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody z kodowaniem opcjonalne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metody do renderowania atrybutem standardowych znaczników z kodowaniem opcjonalne.  
  
 W przypadku wystąpienia dowolnego elementu danego znaczników <xref:System.Web.UI.HtmlTextWriter> klasa przechowuje listę atrybutów dla tego elementu. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszelkie atrybuty dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> są renderowane w znaczniku otwierającym elementu. Listę atrybutów, które następnie zostanie usunięte z <xref:System.Web.UI.HtmlTextWriter> obiektu.  
  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metody z `fEncode` równa `true`, jeśli ten atrybut może zawierać znaku cudzysłowu ("), znak mniejszości (<) lub handlowe" i "(&). Wywołania metody które będą kodowanie atrybutu do spełnienia wymagań urządzenia wysyłającego żądanie. Możesz ustawić `fEncode` do `false`, jeśli wiesz, że żadna z tych znaków zostanie wygenerowany lub jeśli wiesz, że ten atrybut jest już zaszyfrowana.  
 
 Jeśli typem atrybutu jest `Style`, wartość nie będzie zakodowana nawet wtedy, gdy `fEncode` jest `true`. Upewnij się, że wartość stylu jest zgodna z CSS i nie zawierają złośliwego kodu.

  
 Wzorzec pisania kodu do renderowania elementów kodu znaczników jest następująca:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody w celu dodania wszelkie atrybuty do elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Użyj innych metod, zgodnie z potrzebami do renderowania zawartości między otwierającym i zamykającym tagiem elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metodę, aby zapewnić, że wartość ciągu, która jest przypisana do `Alt` atrybutu dla `<img>` element jest zakodowana urządzenia wysyłającego żądanie.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje znacznik nadawania stylu atrybutów w znaczniku otwierającym elementu <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu tworzy o kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string -&gt; unit&#xA;override this.AddStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg, który zawiera atrybut stylu do dodania.</param>
        <param name="value">Ciąg, który zawiera wartość do przypisania do atrybutu.</param>
        <summary>Dodaje atrybut stylu określonego znaczników oraz wartość atrybutu do znaczników otwierający tag utworzony przez kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> metody, gdy styl nie jest członkiem <xref:System.Web.UI.HtmlTextWriterStyle> wyliczenia lub nie jest znany do czasu wykonywania.  
  
 <xref:System.Web.UI.HtmlTextWriter> Klasa przechowuje listę style dla elementów kodu znaczników renderowania. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszystkie style, które są dodawane przez <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody są renderowane w znaczniku otwierającym elementu. Na liście stylów następnie są usuwane.  
  
 Wzorzec pisania kodu do renderowania elementów kodu znaczników jest następująca:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody w celu dodania dowolny styl atrybuty dla elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Korzysta z innych metod zgodnie z potrzebami do renderowania zawartości, o których odnaleźć pomiędzy otwierającym elementu, a zamykającym tagiem.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> metody do renderowania `font-size` i `color` stylu atrybutów na `<p>` elementu. W tym przykładzie kodu użyto <xref:System.Web.UI.HtmlTextWriter> klasy do renderowania zawartości formantu.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit&#xA;override this.AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Reprezentujący atrybut stylu, aby dodać do strumienia wyjściowego.</param>
        <param name="value">Ciąg, który zawiera wartość do przypisania do atrybutu.</param>
        <summary>Dodaje atrybut stylu znaczników, które są skojarzone z określonym <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartość i wartość atrybutu adiustacji otwierający tag utworzony przez kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> metody, gdy członek jest to styl <xref:System.Web.UI.HtmlTextWriterStyle> wyliczenie, wiadomo, że przed w czasie wykonywania.  
  
 <xref:System.Web.UI.HtmlTextWriter> Klasa przechowuje listę style dla elementów kodu znaczników renderowania. Gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metoda jest wywoływana, wszystkie style, dodane przez <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody są renderowane w znaczniku otwierającym elementu. Na liście stylów następnie są usuwane.  
  
 Wzorzec pisania kodu do renderowania elementów kodu znaczników jest następująca:  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody w celu dodania dowolny styl atrybuty dla elementu.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody.  
  
-   Korzysta z innych metod zgodnie z potrzebami do renderowania zawartości, o których odnaleźć pomiędzy otwierającym elementu, a zamykającym tagiem.  
  
-   Użyj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania część nadpisanie <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę w klasie pochodnej od <xref:System.Web.UI.HtmlTextWriter> klasy. Sprawdzanie kodu czy `<Label>` element jest renderowany. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metoda jest wywoływana, aby sprawdzić, czy `Color` atrybut stylu został zdefiniowany dla `<Label>` elementu. Jeśli `Color` atrybut nie został zdefiniowany, kod wywołuje to przeciążenie <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody w celu dodania `Color` atrybutu z atrybutem styl, a następnie ustaw dla niego wartość `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit&#xA;override this.AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg, który zawiera atrybut stylu, który ma zostać dodana.</param>
        <param name="value">Ciąg, który zawiera wartość do przypisania do atrybutu.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Reprezentujący atrybut stylu do dodania.</param>
        <summary>Dodaje atrybut stylu określonego znaczników oraz wartość atrybutu wraz z <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartość wyliczenia znaczników otwierający tag utworzony przez kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> metody tylko wtedy, gdy dziedziczenie z <xref:System.Web.UI.HtmlTextWriter> klasy. Umożliwia tworzenie nowych `name` i `value` pary dla <xref:System.Web.UI.HtmlTextWriterStyle> atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberSignature Language="F#" Value="abstract member BeginRender : unit -&gt; unit&#xA;override this.BeginRender : unit -&gt; unit" Usage="htmlTextWriter.BeginRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powiadamia <see cref="T:System.Web.UI.HtmlTextWriter" /> obiekt lub obiekt klasy pochodnej, która ma być renderowany kontrolki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacji klasy <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metoda nie ma żadnych funkcji. Konieczne jest przesłonięcie <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metodę w klasie pochodnej od <xref:System.Web.UI.HtmlTextWriter> zapewnienie własnej funkcji renderowania. Na przykład w języku znaczników, które mogą wymagać `<p>` elementy do renderowania natychmiast wcześniej kontrolki, ale gdzie potrzebę `<p>` wcześniej ustalona elementu, można użyć <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> zastąpienia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="htmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu i zwalnia wszystkie zasoby systemu skojarzonych z nim.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja <xref:System.Web.UI.HtmlTextWriter.Close%2A> wywołania metody <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> podstawowa metoda.  
  
 Po wywołaniu <xref:System.Web.UI.HtmlTextWriter.Close%2A> metody, żadnych operacji na <xref:System.Web.UI.HtmlTextWriter> obiektu może zgłaszać wyjątki, ponieważ wszystkie jej zasoby zostały zwolnione.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberSignature Language="F#" Value="val mutable DefaultTabString : string" Usage="System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje pojedynczy znak tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pojedynczej karcie jest reprezentowany przez znak ASCII 9.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób tworzenia konstruktora przyjmującego <xref:System.IO.TextWriter> obiektu jako parametr i przekazuje <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> pola jako argument parametru na drugą wersję konstruktora. Gdy ten konstruktor jest wywoływana z kodu, <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> pole definiuje zasady wcięć dla wystąpienia edytor znaczników, który jest używany przez strony lub karty.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable DoubleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak cudzysłowu (").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodę, aby zamknąć atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania `border` atrybutu dla `<table>` elementu. Kod wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania atrybutu i jego wartość i używa <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> i <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> pola.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Koduje wartość atrybutu określonego znaczników na podstawie wymagań z <see cref="T:System.Web.HttpRequest" /> obiekt z bieżącego kontekstu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="member this.EncodeAttributeValue : string * bool -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający wartość atrybutu do zakodowania.</param>
        <param name="fEncode">
          <see langword="true" /> Aby zakodować wartości atrybutu; w przeciwnym razie <see langword="false" />.</param>
        <summary>Koduje wartość atrybutu określonego znaczników na podstawie wymagań z <see cref="T:System.Web.HttpRequest" /> obiekt z bieżącego kontekstu.</summary>
        <returns>Ciąg zawierający wartość atrybutu zakodowany <see langword="null" /> Jeśli <paramref name="value" /> jest pusta lub wartość atrybutu niezaszyfrowana, jeśli <paramref name="fEncode" /> jest <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metodę, jeśli atrybut nie jest <xref:System.Web.UI.HtmlTextWriterAttribute> wartość wyliczenia lub nie jest znany do czasu wykonywania.  
  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Metoda usuwa podwójnego cudzysłowu ("), ampersandu (&) i mniejszości znaki (<), tak że nieprawidłowa wartość pola tagi nie są generowane, niezależnie od tego, w danych wejściowych. Rzeczywistego kodowania jest wykonywane przez <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> metoda jako parametr w <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> wywołania metody, a następnie koduje `color:blue` stylu wartość atrybutu.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string&#xA;override this.EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (attrKey, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentujący atrybut znaczników.</param>
        <param name="value">Ciąg zawierający wartość atrybutu do zakodowania.</param>
        <summary>Koduje wartość atrybutu określonego znaczników na podstawie wymagań z <see cref="T:System.Web.HttpRequest" /> obiekt z bieżącego kontekstu.</summary>
        <returns>Ciąg zawierający wartość atrybutu zakodowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Metoda usuwa podwójnego cudzysłowu ("), ampersandu (&) i mniejszości znaki (<), tak że nieprawidłowa wartość pola tagi nie są generowane, niezależnie od tego, w danych wejściowych. Rzeczywistego kodowania jest wykonywane przez <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.EncodeUrl : string -&gt; string" Usage="htmlTextWriter.EncodeUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Ciąg zawierający adres URL do zakodowania.</param>
        <summary>Wykonuje minimalnego kodowania adresu URL, dokonując przekonwertowania miejsca do magazynowania w określonym adresie URL na ciąg "% 20".</summary>
        <returns>Ciąg zawierający zakodowanym adresu URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kodowanie znaków adresu URL składa się z symbolu procentu (%), następuje dwucyfrowy reprezentację szesnastkową (bez uwzględniania wielkości liter) punkt kodowy ISO (łaciński) dla znaków. Reprezentacji szesnastkowej miejsca wynosi 20.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywołania <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> metodę, aby przekonwertować wszystkie spacje w adresie URL, który jest przekazywany jako parametr w <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> wywołania metody.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kodowanie <see cref="T:System.Web.UI.HtmlTextWriter" /> obiekt używa do zapisywania zawartości strony.</summary>
        <value>
          <see cref="T:System.Text.Encoding" /> , W którym znaczniki są zapisywane do strony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> Właściwość uzyskuje wartość od podstawy <xref:System.IO.TextWriter> obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> właściwość do zapisania typ kodowania, że formant niestandardowy używa do renderowania tekstu do strony, która go zawiera.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberSignature Language="F#" Value="abstract member EndRender : unit -&gt; unit&#xA;override this.EndRender : unit -&gt; unit" Usage="htmlTextWriter.EndRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powiadamia <see cref="T:System.Web.UI.HtmlTextWriter" /> obiekt lub obiekt klasy pochodnej, że formant zakończył renderowanie. Ta metoda umożliwia Zamknij wszelkie elementy znaczników otwarty w <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacji klasy <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> metoda nie ma żadnych funkcji. Konieczne jest przesłonięcie <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> w klasę pochodną <xref:System.Web.UI.HtmlTextWriter> klasy, które umożliwiają korzystanie z własnych funkcji renderowania.  
  
 Możesz użyć <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> metodę, aby zamknąć wszystkie elementy znaczników jest otwarty w <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberSignature Language="F#" Value="val mutable EndTagLeftChars : string" Usage="System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje kąt po lewej stronie znaku nawiasu i ukośnika (&lt;/) tagu zamykającego elementu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody do konstruowania znacznikami końcowymi element znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania tagu zamykającego `<table>` znaczników elementu za pomocą <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> i <xref:System.Web.UI.HtmlTextWriter.TagRightChar> pola jako wartości parametrów w wywołaniach <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje otwierający tag elementu znaczników, który zawiera atrybuty, które implementują układu i formatowania znaków z określonego stylu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.EnterStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> określający układu i formatowania, aby rozpocząć stosowanie do bloku znaczników.</param>
        <summary>Zapisuje otwierający tag z <see langword="&lt;span&gt;" /> element, który zawiera atrybuty, które implementują formatowanie i układ znaków z określonego stylu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody do stosowania stylów, takich jak kolor tła lub obramowanie szerokość, do bloku znaczników.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> i <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody umożliwiają adapter urządzenia lub formantu utworzyć kod znaczników, który używa formatowanie znaków określony styl. Użyj tej samej wartości dla `style` w <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody użytej w odpowiednich <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Przeciążenia <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> metoda renderuje znaczniku otwierającym elementu `<span>` elementu. Ta metoda dodaje niezbędne atrybuty oraz atrybuty stylu na znaczniku otwierającym elementu `<span>` element, aby wyświetlić ustawienia określone przez <xref:System.Web.UI.WebControls.Style> obiektu. Jeśli chcesz renderować element różny kod znaczników zawierają atrybuty oraz atrybuty stylu, należy użyć <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> przeciążenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania niestandardowej klasy o nazwie `TextSample`, pochodzącej z <xref:System.Web.UI.WebControls.WebControl> klasy, która używa <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody do stosowania <xref:System.Web.UI.WebControls.Style.ForeColor%2A> styl do ciągu tekstowego.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Metoda renderuje kod HTML `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Zamyka wywołania metody `<span>` elementu po zrenderowaniu tekstu.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.EnterStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> określający układu i formatowania, aby rozpocząć stosowanie do bloku znaczników.</param>
        <param name="tag">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Określający otwierający tag elementu znaczników, który będzie zawierać obiekt stylu określony w <c>styl</c>.</param>
        <summary>Zapisuje otwierający tag elementu znaczników, który zawiera atrybuty, które implementują układu i formatowania znaków z określonego stylu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody do stosowania stylów, takich jak kolor tła lub obramowanie szerokość, do bloku znaczników.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> i <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody umożliwiają adapter urządzenia lub formantu utworzyć kod znaczników, który używa formatowanie znaków określony styl. Użyj tej samej wartości dla `style` w <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody użytej w odpowiednich <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Przeciążenia <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> metoda renderuje znaczniku otwierającym elementu określony przez element `tag` parametru. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> Metoda następnie dodaje niezbędne atrybuty oraz atrybuty stylu znaczniku otwierającym elementu element, aby wyświetlić ustawienia, które są określone przez <xref:System.Web.UI.WebControls.Style> obiektu. Użyj <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> przeciążenia do renderowania tagu otwierającego `<span>` elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania niestandardowej klasy o nazwie `TextSample`, pochodzącej z <xref:System.Web.UI.WebControls.WebControl> klasy, która używa <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody do stosowania <xref:System.Web.UI.WebControls.Style.ForeColor%2A> styl do ciągu tekstowego.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Metoda renderuje kod HTML`<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Zamyka wywołania metody `<span>` elementu po zrenderowaniu tekstu.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable EqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak równości (<see langword="=" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz chcieć użyć <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> pola zamiast <xref:System.Web.UI.HtmlTextWriter.EqualsChar> pole przy konstruowaniu ogranicznik otwierający wartości atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania `src` atrybutu, jego wartość jest częścią `<img>` elementu. Kod używa <xref:System.Web.UI.HtmlTextWriter.EqualsChar> pole <xref:System.Web.UI.HtmlTextWriter.Write%2A> wywołanie metody do renderowania znaku równości (=) między `src` atrybutu i jego wartość.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberSignature Language="F#" Value="val mutable EqualsDoubleQuoteString : string" Usage="System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak równości (=) i podwójnego cudzysłowu (") w ciągu (=").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> i <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody do konstruowania ogranicznik otwierający wartości atrybutów.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania `border` atrybutu dla `<table>` elementu. Kod wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania atrybutu i jego wartość i używa <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> i <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> pola.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje tagu zamykającego elementu znacznika do końca określonego formatowanie i układ znaków.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.ExitStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> określający układu i formatowania, aby zamknąć.</param>
        <summary>Zapisuje tag zamykający <see langword="&lt;span&gt;" /> element do końca określonego formatowanie i układ znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Przeciążenia <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> metoda renderuje tag zamykający `<span>` elementu po tagu zamykającym kontrolki, zamykanie elementu otwierane przez odpowiednie <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> wywołania.  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> i <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody umożliwiają adapter urządzenia lub formantu utworzyć kod znaczników, który rozpoczyna się i kończy blok przy użyciu znaków formatowania stylu określonego. Użyj tej samej wartości dla `style` w <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody użytej w odpowiednich <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania niestandardowej klasy o nazwie `TextSample`, pochodzącej z <xref:System.Web.UI.WebControls.WebControl> klasy, która używa <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody do stosowania <xref:System.Web.UI.WebControls.Style.ForeColor%2A> styl do ciągu tekstowego.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Metoda renderuje kod HTML `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Zamyka wywołania metody `<span>` elementu po zrenderowaniu tekstu.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.ExitStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> określający układu i formatowania do zaprzestanie stosowania do tekstu wyjściowego.</param>
        <param name="tag">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> , Który określa tag zamykający elementu znaczników, który zawiera atrybuty, które zastosowano określony styl. Musi on być zgodny klucz przekazany w odpowiednich <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" /> wywołania.</param>
        <summary>Zapisuje tagu zamykającego elementu określonego znacznika do końca określonego układu i formatowania znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Przeciążenia <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> metoda renderuje tag zamykający elementu, który jest określony przez `tag` po tagu zamykającym kontrolki, zamykanie elementu, która została otwarta przez odpowiednie <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> wywołania metody.  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> i <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody umożliwiają adapter urządzenia lub formantu utworzyć kod znaczników, który rozpoczyna się i kończy blok przy użyciu znaków formatowania stylu określonego. Użyj tej samej wartości dla `style` w <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody użytej w odpowiednich <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania niestandardowej klasy o nazwie `TextSample`, pochodzącej z <xref:System.Web.UI.WebControls.WebControl> klasy, która używa <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody do stosowania <xref:System.Web.UI.WebControls.Style.ForeColor%2A> styl do ciągu tekstowego.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Metoda renderuje kod HTML `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> Zamyka wywołania metody `<span>` elementu po zrenderowaniu tekstu.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : unit -&gt; unit&#xA;override this.FilterAttributes : unit -&gt; unit" Usage="htmlTextWriter.FilterAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie atrybuty znaczników i styl na temat wszystkich właściwości strony lub kontrolki serwera sieci Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed wyświetleniem atrybuty są w elemencie znaczników <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metoda jest wywoływana. Z kolei <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> wywołania metody <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> i <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> metody dla każdego atrybutu i styl do renderowania.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób korzystania z niestandardowej klasy pochodzącej od <xref:System.Web.UI.HtmlTextWriter> klasy, w którym jest zastępowana <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metody. Po wywołaniu <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> zastąpienie sprawdza, czy składnik zapisywania tekstu renderuje dowolne `<label>` lub `<a>` elementy:  
  
-   Jeśli `<label>` renderowania elementu <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metoda sprawdza czy `style` atrybut jest renderowany w elemencie i, jeśli nie, tworzy `style` atrybutu i ustawia ją na `color: blue`.  
  
-   Jeśli `<a>` renderowania elementu <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Metoda określa, czy `href` atrybut jest dołączony i, jeśli nie, dodaje `href` do adresu URL http://www.cohowinery.com.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="htmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści wszystkie bufory dla bieżącego <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu i powoduje, że dowolne buforowane dane są zapisywane do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacji klasy <xref:System.Web.UI.HtmlTextWriter.Flush%2A> metoda po prostu wywołuje <xref:System.IO.TextWriter.Flush%2A> podstawowa metoda.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeKey : string -&gt; System.Web.UI.HtmlTextWriterAttribute" Usage="htmlTextWriter.GetAttributeKey attrName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">Ciąg, który zawiera atrybut, do których chcesz uzyskać <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Uzyskuje odpowiednie <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartość wyliczenia dla określonego atrybutu.</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Wartość wyliczenia dla określonego atrybutu; w przeciwnym razie nieprawidłową <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartość, jeśli atrybut nie jest członkiem wyliczenia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `attrName` jest `null` ani być pustym ciągiem (""), lub nie można znaleźć w tabeli nazw atrybutu, wartość -1, wpisany <xref:System.Web.UI.HtmlTextWriterAttribute> obiektu, jest zwracana.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia klasy pochodzącej od <xref:System.Web.UI.HtmlTextWriter> klasy, w którym jest zastępowana <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody. Sprawdzanie zastąpienie czy `tagKey` jest równa <xref:System.Web.UI.HtmlTextWriterTag.Font> pola, co oznacza, że `<font>` znaczników elementu, który będzie renderowany. Jeśli tak, wywołuje zastąpienie <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodę, aby dowiedzieć się, czy `<font>` element zawiera <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu. Jeśli <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> zwraca `false`, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> wywołania metody <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> metody, która definiuje <xref:System.Web.UI.HtmlTextWriterAttribute.Size> i ustawia dla niej wartość `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeName : System.Web.UI.HtmlTextWriterAttribute -&gt; string" Usage="htmlTextWriter.GetAttributeName attrKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Uzyskać nazwę atrybutu znaczników.</param>
        <summary>Uzyskuje nazwę atrybutu adiustacji skojarzonego z określonym <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartość.</summary>
        <returns>Ciąg zawierający nazwę atrybutu, znaczników.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> Metoda zwraca pusty ciąg (""), jeśli `attrKey` nie jest prawidłowym <xref:System.Web.UI.HtmlTextWriterAttribute> wartość.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> metodę, aby przekonwertować <xref:System.Web.UI.HtmlTextWriterAttribute.Size> wartość wyliczenia do nazwy ciągu.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberSignature Language="F#" Value="member this.GetStyleKey : string -&gt; System.Web.UI.HtmlTextWriterStyle" Usage="htmlTextWriter.GetStyleKey styleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">Atrybut stylu, dla którego będzie można uzyskać <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Uzyskuje <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartość wyliczenia określony styl.</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Wyliczenie odpowiadający wartości <paramref name="styleName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> Metoda zwraca wartość -1 jako <xref:System.Web.UI.HtmlTextWriterStyle> wartość, jeśli `styleName` nie odpowiada żadnemu kodowi <xref:System.Web.UI.HtmlTextWriterStyle> wartość wyliczenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zastąpienia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę w klasie pochodnej od <xref:System.Web.UI.HtmlTextWriter> klasy. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Zastąpienie Określa, czy `<label>` będzie renderowana znaczników i jeśli tak, sprawdza, czy element dla <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> nie zdefiniowano atrybutu <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> metoda jest używana jako pierwszy parametr w wywołaniu <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody w celu dodania <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu `<label>` znaczników elementu i ustaw <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="F#" Value="member this.GetStyleName : System.Web.UI.HtmlTextWriterStyle -&gt; string" Usage="htmlTextWriter.GetStyleName styleKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Uzyskać nazwę atrybut stylu.</param>
        <summary>Uzyskuje nazwę atrybutu styl znaczników, skojarzonego z określonym <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartość wyliczenia.</summary>
        <returns>Nazwa atrybutu stylu skojarzone z <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> określona wartość wyliczenia <paramref name="styleKey" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `styleKey` nie jest prawidłowym <xref:System.Web.UI.HtmlTextWriterStyle> obiektu <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> metoda zwraca pusty ciąg ("").  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób sprawdzić, czy `<label>` element jest renderowany. Jeśli tak, sprawdza, czy <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybut stylu został zdefiniowany w elemencie. Jeśli ten atrybut nie został zdefiniowany, <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metoda jest wywoływana i <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> konwertuje metody <xref:System.Web.UI.HtmlTextWriterStyle.Color> element członkowski wyliczenia na jego reprezentację ciągu do przekazania do <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag&#xA;override this.GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag" Usage="htmlTextWriter.GetTagKey tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element znaczników, dla którego będzie można uzyskać <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</param>
        <summary>Uzyskuje <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartość wyliczenia skojarzone z elementem określonym znaczników.</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Wartość wyliczenia; w przeciwnym razie, jeśli <paramref name="tagName" /> nie jest skojarzony z określonym <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartość <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `tagName` jest `null`, ciąg pusty (""), lub nie można znaleźć w tabeli nazw tagów znaczników <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> metoda zwraca <xref:System.Web.UI.HtmlTextWriterTag.Unknown> pola.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia przeciążenia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody, która przyjmuje parametry jako parametr. Ten ciąg jest przekazywany do <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> metody, która konwertuje je do odpowiednich <xref:System.Web.UI.HtmlTextWriterTag> elementu członkowskiego wyliczenia, a następnie przekazuje ją do <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> przeciążenia przyjmującego <xref:System.Web.UI.HtmlTextWriterTag> wartość wyliczenia jako parametr.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string&#xA;override this.GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string" Usage="htmlTextWriter.GetTagName tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Można uzyskać elementu znaczników.</param>
        <summary>Pobiera element znaczników skojarzonego z określonym <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartość wyliczenia.</summary>
        <returns>Ciąg reprezentujący element znaczników.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `tagKey` nie jest prawidłowym <xref:System.Web.UI.HtmlTextWriterTag> wartość <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> metoda zwraca pusty ciąg ("").  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zamknięcia `<font>` elementu za pomocą <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody. <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Wywołania metody <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> metodę, aby przekonwertować <xref:System.Web.UI.HtmlTextWriterTag.Font> wartość na ciąg.  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : int with get, set" Usage="System.Web.UI.HtmlTextWriter.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę pozycji tabulatorów wcięcia na początku każdego wiersza kodu znaczników.</summary>
        <value>Numer pozycji tabulatorów zwiększyć wcięcie każdego wiersza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wcięcie odbywa się przez pisanie ciąg, który jest określony przez `tabString` parametru <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> Konstruktor liczbę razy, które są określone przez <xref:System.Web.UI.HtmlTextWriter.Indent%2A> właściwości.  
  
 Jeśli <xref:System.Web.UI.HtmlTextWriter.Indent%2A> właściwość jest ustawiona na wartość ujemna, zostanie on zmieniony na wartość 0 przed zapisaniem.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zwiększać wartość, która jest przypisana do <xref:System.Web.UI.HtmlTextWriter.Indent%2A> właściwości atrybuty zostały dodane do znaczniku otwierającym elementu `<span>` elementu i <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> została wywołana metoda. Zwiększa wcięcie dla żadnych znaczników, który jest renderowany wewnątrz `<span>` elementu.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerWriter : System.IO.TextWriter with get, set" Usage="System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia Edytor tekstu, który zapisuje zawartość elementu znaczników.</summary>
        <value>A <see cref="T:System.IO.TextWriter" /> , zapisuje zawartość wewnętrzna znaczników.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawartość wewnętrzna znaczników jest tekstu między otwierającym i zamykającym tagiem elementu języka znaczników.  
  
 Jeśli <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> właściwość jest ustawiona na <xref:System.IO.TextWriter> obiekt, który jest wystąpieniem <xref:System.Web.HttpWriter> klasy, należy zauważyć, ten fakt, a oddzielne odwołania są zapisywane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak użyć niestandardowego formantu serwera sieci Web, pochodzące z <xref:System.Web.UI.WebControls.WebControl> klasy, w którym jest zastępowana <xref:System.Web.UI.Control.Render%2A> metody. Używa ona <xref:System.Web.UI.HtmlTextWriter> klasę umożliwiającą zapisanie `<font>` elementu. Po zapisuje otwierający tag elementu, używa <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> właściwość do zapisania ciągu `"<br> The time on the server:"` i łączy ten ciąg wartością <xref:System.DateTime.Now%2A?displayProperty=nameWithType> właściwości.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy atrybut adiustacji określonego i jego wartość jest renderowany podczas następnego wywołania metody <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzony z atrybutem znaczników.</param>
        <summary>Określa, czy atrybut adiustacji określonego i jego wartość jest renderowany podczas następnego wywołania metody <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut jest renderowany podczas następnego wywołania metody <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metoda; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać wartość do przypisania do <xref:System.Web.UI.HtmlTextWriterAttribute> obiektu, należy użyć <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> przeciążenia zamiast tego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia nadpisanie <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody w klasie, która dziedziczy <xref:System.Web.UI.HtmlTextWriter> klasy. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Czy zastąpić kontroli `<font>` znaczników elementu, który będzie renderowany. Jeśli tak, wywołuje zastąpienie <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodę sprawdzania, czy `<font>` element zawiera <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu. Jeśli nie, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> wywołania metody <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> metody, która definiuje <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu i ustawia dla niej wartość `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute *  -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzony z atrybutem znaczników.</param>
        <param name="value">Wartość atrybutu.</param>
        <summary>Określa, czy atrybut adiustacji określonego i jego wartość jest renderowany podczas następnego wywołania metody <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut jest renderowany podczas następnego wywołania metody <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metoda; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metoda zwraca `true`, wartość do przypisania do <xref:System.Web.UI.HtmlTextWriterAttribute> obiekt jest zwracany w `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy atrybut stylu znacznika jest renderowany podczas następnego wywołania metody <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzony z atrybutem.</param>
        <summary>Określa, czy atrybut stylu określonego znaczników jest renderowany podczas następnego wywołania metody <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut będzie wyświetlany podczas następnego wywołania metody <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metoda; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać wartość, która będzie renderowana atrybutem określony styl, użyj <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> przeciążenia <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób sprawdzić, czy `<label>` element jest renderowany. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metoda sprawdza czy <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybut stylu został zdefiniowany w elemencie. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> nie zdefiniowano atrybutu <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> definiuje metodę <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu i ustawia dla niej wartość `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle *  -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzony z atrybutem.</param>
        <param name="value">Wartość przypisana do atrybut stylu.</param>
        <summary>Określa, czy podczas następnego wywołania metody mają być renderowane znaczników określony atrybut stylu i jego wartość <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut i jego wartość będzie renderowana podczas następnego wywołania metody <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metoda; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metoda zwraca `true`, wartość do przypisania do <xref:System.Web.UI.HtmlTextWriterStyle> atrybutu jest zwracany w `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member IsValidFormAttribute : string -&gt; bool&#xA;override this.IsValidFormAttribute : string -&gt; bool" Usage="htmlTextWriter.IsValidFormAttribute attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribute">Ciąg, który zawiera nazwę atrybutu, aby sprawdzić.</param>
        <summary>Sprawdza, czy atrybut, aby upewnić się, że mogą być renderowane w znaczniku otwierającym elementu <see langword="&lt;form&gt;" /> znaczników elementu.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacji klasy <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> metoda zwraca `true` dla wszystkich atrybutów. Zastąp <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> ograniczyć atrybuty, które mogą być renderowane w znaczniku otwierającym elementu `<form>` elementu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zastąpienie <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /> metodę, aby zwrócić <see langword="true" /> tylko w przypadku tych atrybutów, które mogą być zawarte w <see langword="&lt;form&gt;" /> element adiustacji, dla którego klasę pochodną <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy jest przeznaczony.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ciąg terminator wiersza, które są używane przez <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu.</summary>
        <value>Parametry terminator wiersza, które są używane przez bieżące <see cref="T:System.Web.UI.HtmlTextWriter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki, następuje znak wysuwu wiersza ("\r\n").  
  
 Ciąg terminator wiersza jest zapisywany do strumienia wyjściowego, zawsze, gdy jest to jeden z <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> nosi nazwę metody. Jeśli <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> właściwość jest ustawiona na `null`, używany jest domyślny znak nowego wiersza.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób korzystania z niestandardowej klasy pochodzącej od <xref:System.Web.UI.HtmlTextWriter> klasy, w którym jest zastępowana <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metody. Po wywołaniu <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> zastąpienie sprawdza, czy składnik zapisywania tekstu renderuje dowolne `<label>` lub `<a>` elementów. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Metoda określa, czy atrybut stylu jest zdefiniowana dla etykiety. Jeśli żaden styl nie jest zdefiniowany, <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metody ustawia domyślną wartość dla `style:color` atrybutu na niebieski. <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Metoda następnie używa <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> właściwości, aby wstawić wiersz włamanie się tag znaczników i zapisuje zdefiniowanych atrybutów.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool&#xA;override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu do renderowania.</param>
        <param name="value">Ciąg zawierający wartość, która jest przypisana do atrybutu.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzony z atrybutem znaczników.</param>
        <summary>Określa, czy atrybut adiustacji określonego i jego wartość może być renderowany do bieżącego elementu znaczników.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacji klasy <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> metoda zawsze zwraca `true`. <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> Zastąpień można określić, czy atrybut będzie wyświetlany na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> metody. Jeśli <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu jest renderowany, ale <xref:System.Web.UI.HtmlTextWriterAttribute.Size> wartość nie jest `30pt`, <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> zastępują wywołania <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody w celu dodania <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybut i ustawić jej wartość na `30pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli dziedziczą z <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> metodę, aby zwrócić <see langword="false" /> aby zapobiec atrybutu są renderowane w ogóle, są renderowane w określonym elemencie lub są renderowane dla określonego kodu znaczników. Na przykład, jeśli nie chcesz, aby obiekt pochodzący od <see cref="T:System.Web.UI.HtmlTextWriter" /> do renderowania <see langword="bgcolor" /> atrybutu <see langword="&lt;table&gt;" /> elementy, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> i zwracają <see langword="false" /> podczas <paramref name="name" /> przekazuje <see langword="bgcolor" /> i <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> wartość właściwości jest <see langword="table" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool&#xA;override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybut stylu do renderowania.</param>
        <param name="value">Ciąg zawierający wartość, która jest przypisana do atrybut stylu.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzony atrybut stylu.</param>
        <summary>Określa, czy znaczników określony atrybut stylu i jego wartość może być renderowany do bieżącego elementu znaczników.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacji klasy <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> metoda zawsze zwraca `true`. <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> Zastąpień można określić, czy atrybut stylu będą renderowane na stronę.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> metody. Jeśli <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybut stylu jest renderowany, ale <xref:System.Web.UI.HtmlTextWriterStyle.Color> wartość nie jest `purple`, <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> zastąpienia używa <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodę, aby ustawić <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybutu `purple`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli dziedziczą z <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> metodę, aby zwrócić <see langword="false" /> aby zapobiec atrybut stylu są renderowane w ogóle, są renderowane w określonym elemencie lub są renderowane w języku znaczników określonej. Na przykład, jeśli nie chcesz, aby obiekt, który jest tworzony na podstawie <see cref="T:System.Web.UI.HtmlTextWriter" /> do renderowania <see langword="color" /> atrybut stylu do <see langword="&lt;p&gt;" /> elementu, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> i zwracają <see langword="false" /> podczas <paramref name="name" /> przekazuje <see langword="color" />i <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> wartość właściwości jest <see langword="p" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="abstract member OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool&#xA;override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="htmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę elementu do renderowania.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> Skojarzone z elementem.</param>
        <summary>Określa, czy element określony znaczników będzie renderowana do żądania strony.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacji klasy <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> metoda zawsze zwraca `true`. <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> Zastąpień można określić, czy element będzie wyświetlany na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> metody. Jeśli <xref:System.Web.UI.HtmlTextWriterTag.Font> renderowania elementu <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> zastąpienia używa <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodę pozwala ustalić czy <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybutu jest renderowany. Jeśli nie, używa <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodę w celu utworzenia <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybut i ustawić jej wartość na `20pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli dziedziczą z <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> metodę, aby zwrócić <see langword="false" /> aby zapobiec renderowanego wcale lub języka znaczników określonego elementu znaczników. Na przykład, jeśli nie chcesz, aby obiekt, który jest tworzony na podstawie <see cref="T:System.Web.UI.HtmlTextWriter" /> do renderowania <see langword="&lt;font&gt;" /> elementu, można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> metodę, aby zwrócić <see langword="false" /> po żądaniu strony zawierający <see langword="&lt;font&gt;" /> elementu.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberSignature Language="F#" Value="abstract member OutputTabs : unit -&gt; unit&#xA;override this.OutputTabs : unit -&gt; unit" Usage="htmlTextWriter.OutputTabs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje szereg ciągów karty, które reprezentują poziom wcięcia linii znaczników znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> Metoda używa <xref:System.Web.UI.HtmlTextWriter.Indent%2A> właściwości, aby określić, ile ciągi kartę do zapisu do uzyskania żądanego wcięcia.  
  
 Ciąg karty jest określony za pomocą <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> konstruktora. Jeśli zostanie określony ciąg nie karty, <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> stałych (`\t`) jest używany.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> metody w klasie, która jest pochodną <xref:System.Web.UI.HtmlTextWriter> klasy. <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> Zastąpienia zawsze używa <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> stała przeprowadzić wcięcia.  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberSignature Language="F#" Value="member this.PopEndTag : unit -&gt; string" Usage="htmlTextWriter.PopEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa z listy elementów renderowanych ostatnio zapisanych element znaczników.</summary>
        <returns>Element <see cref="T:System.String" /> zawierający ostatnio renderowania kodu znaczników elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy są dodawane do listy elementów renderowanego kodu znaczników przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Metoda usuwa elementy znaczników z listy, wywołując <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Lista elementów renderowanych jest pusta.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberSignature Language="F#" Value="member this.PushEndTag : string -&gt; unit" Usage="htmlTextWriter.PushEndTag endTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">Tag zamykający elementu znaczników.</param>
        <summary>Zapisuje element określony znaczników w celu późniejszego użycia podczas generowania tagu końcowego dla elementu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy są dodawane do listy elementów renderowanego kodu znaczników przy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> wywołania metody <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> metody. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Metoda usuwa elementy znaczników z listy po renderowaniu produktu do tagu końcowego dla elementu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="static member RegisterAttribute : string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterAttribute (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu znaczników do zarejestrowania.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Nazwą atrybutu, który odpowiada.</param>
        <summary>Rejestruje atrybuty znaczników, czy literały lub dynamicznie generowany z pliku źródłowego, dzięki czemu może być prawidłowo renderowany do klienta wysyłającego żądanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wstępnie zdefiniowanych atrybutów języka znaczników HTML są rejestrowane przez wywołania <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metody podczas pierwszego <xref:System.Web.UI.HtmlTextWriter> obiekt zostanie utworzony. Dynamiczne atrybuty mogą być zarejestrowane przy użyciu <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metody w pozostałych godzinach.  
  
 Tabela rejestracji używana przez <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metodą jest `static`, więc rejestracja atrybutów ma zastosowanie do wszystkich <xref:System.Web.UI.HtmlTextWriter> obiektów na komputerze-hoście.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="static member RegisterStyle : string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterStyle (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg przekazany z pliku źródłowego, określając nazwę stylu.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> , Który odpowiada określony styl.</param>
        <summary>Rejestruje ponownego obliczenia właściwości stylu znacznika, czy literały lub dynamicznie generowany z pliku źródłowego, dzięki czemu może być prawidłowo renderowany do klienta wysyłającego żądanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wstępnie zdefiniowane kaskadowy arkusz (CSS) atrybuty stylu języku znaczników HTML są rejestrowane przez wywołania <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metody podczas pierwszego <xref:System.Web.UI.HtmlTextWriter> obiekt zostanie utworzony. Atrybuty stylu dynamiczne mogą być zarejestrowane przy użyciu <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metody w pozostałych godzinach.  
  
 Tabela rejestracji używana przez <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metodą jest `static`, więc rejestracja atrybutów ma zastosowanie do wszystkich <xref:System.Web.UI.HtmlTextWriter> obiektów na komputerze-hoście.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="static member RegisterTag : string * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterTag (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg, który zawiera znacznik HTML.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> , Który określa element, który do renderowania.</param>
        <summary>Rejestruje znaczniki, czy literały lub dynamicznie generowany z pliku źródłowego, dzięki czemu może być prawidłowo renderowany do klienta wysyłającego żądanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wstępnie zdefiniowane znaczników języka HTML są rejestrowane przez wywołania <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metody podczas pierwszego <xref:System.Web.UI.HtmlTextWriter> obiekt zostanie utworzony. Dynamiczne znaczniki mogą być zarejestrowane przy użyciu <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metody w pozostałych godzinach.  
  
 Tabela rejestracji używana przez <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metodą jest `static`, więc rejestracja tagi ma zastosowanie do wszystkich <xref:System.Web.UI.HtmlTextWriter> obiektów na komputerze-hoście.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterContent : unit -&gt; string&#xA;override this.RenderAfterContent : unit -&gt; string" Usage="htmlTextWriter.RenderAfterContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje tekst lub odstępy występujący po zawartości i przed tagiem zamykającym elementu znaczników do strumienia wyjściowego znaczników.</summary>
        <returns>Ciąg, który zawiera odstępy lub tekst można zapisać po zawartości elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> Metoda może być przydatna, jeśli chcesz wstawić elementy podrzędne do bieżącego elementu znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> metodę w klasie pochodnej od <xref:System.Web.UI.HtmlTextWriter> klasy, aby określić, czy `<label>` element jest renderowany. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> zastąpienie wstawi tag zamykający `<font>` element bezpośrednio przed tagiem zamykającym z `<label>` elementu. Jeśli element innych niż `<label>` jest renderowany, <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> używana jest metoda podstawowa.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementacji klasy <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> metoda zwraca <see langword="null" />. Zastąp <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> Jeśli chcesz napisać tekst lub odstęp po zawartości elementu, ale przed tagiem zamykającym.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterTag : unit -&gt; string&#xA;override this.RenderAfterTag : unit -&gt; string" Usage="htmlTextWriter.RenderAfterTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje wszelkie odstępy lub tekst występujący po tag zamykający dla elementu znaczników.</summary>
        <returns>Odstępy między lub tekst można zapisać po tagu zamykającego elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> Metoda może być przydatna, jeśli chcesz renderować dodatkowe zamykającym tagiem po tagu elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> metodę pozwala ustalić, czy klasę pochodną <xref:System.Web.UI.HtmlTextWriter> renderowania klasy `<label>` elementu. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> zastąpienie wstawi tag zamykający `<font>` element natychmiast po `<label>` elementu. Jeśli nie jest `<label>` elementu <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> używana jest metoda podstawowa.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementacji klasy <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> metoda zwraca <see langword="null" />. Zastąp <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> Jeśli chcesz napisać tekst lub odstęp po elemencie tagu zamykającego.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeContent : unit -&gt; string&#xA;override this.RenderBeforeContent : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje tekst i odstępy przed zawartością i po znaczniku otwierającym elementu znaczników.</summary>
        <returns>Tekst lub odstępy można zapisać przed zawartością elementu. Jeśli nie zostanie zastąpiona <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> zwraca <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Metoda może być przydatna, jeśli chcesz wstawić elementy podrzędne do bieżącego elementu znaczników przed wewnętrzny znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> metodę pozwala ustalić, czy klasę pochodną <xref:System.Web.UI.HtmlTextWriter> klasa ma renderować `<label>` elementu. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> zastąpienie wstawia znaczniku otwierającym elementu `<font>` element natychmiast po znaczniku otwierającym elementu `<label>` elementu. Jeśli nie jest `<label>` elementu <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> używana jest metoda podstawowa.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementacji klasy <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> metoda zwraca <see langword="null" />. Zastąp <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> Jeśli chcesz napisać tekst lub odstęp po znaczniku otwierającym, ale wcześniej zawartości elementu.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeTag : unit -&gt; string&#xA;override this.RenderBeforeTag : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje tekst lub odstępy występujący przed otwierający tag elementu znaczników.</summary>
        <returns>Tekst lub odstępy można zapisać przed elementem znaczników tagu początkowego. Jeśli nie zostanie zastąpiona <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> Metoda może być przydatna, jeśli mają być renderowane znaczniki otwarcia dodatkowe przed otwierający tag zamierzonego elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metodę, aby określić, czy klasa, która jest pochodną <xref:System.Web.UI.HtmlTextWriter> klasa ma renderować `<label>` elementu. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> zastąpienie wstawia znaczniku otwierającym elementu `<font>` element bezpośrednio przed `<label>` elementu. Jeśli nie jest renderowany `<label>` elementu <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> używana jest metoda podstawowa.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Web.UI.HtmlTextWriter" /> Implementacji klasy <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> metoda zwraca <see langword="null" />. Zastąp <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> Jeśli chcesz napisać tekst lub odstępy przed elementem tagu początkowego.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje otwierający tag elementu znaczników do strumienia wyjściowego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : string -&gt; unit&#xA;override this.RenderBeginTag : string -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Ciąg zawierający nazwę elementu znaczników, dla którego ma zostać renderowania tagu otwierającego.</param>
        <summary>Zapisuje otwierający tag elementu określonego znaczników do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> zastępowania <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29> metody, jeśli element znaczników nie jest jednym z <xref:System.Web.UI.HtmlTextWriterTag> wartości wyliczenia.  
  
 Aby wygenerować element kodu znaczników przy użyciu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody, pierwsze wywołanie <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> i <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metod, zgodnie z potrzebami, aby określić wszystkie atrybuty elementów lub atrybutów stylu, które są wyświetlane w znaczniku otwierającym elementu. Po wygenerowaniu wewnętrzny znaczników, należy wywołać <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodę w celu wygenerowania tagu zamykającego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody w formant niestandardowy do renderowania tagu otwierającego niestandardowych `MyTag` elementu. Przykładowy kod wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> renderowanie wewnętrznego znacznika, a następnie wywołuje metodę <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodę, aby zamknąć element.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Jedną z <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartości, które definiuje otwierający tag elementu znaczników do renderowania.</param>
        <summary>Zapisuje otwierający tag elementu znaczników skojarzonego z określonym <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartość wyliczenia do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> metodę, jeśli element znaczników jest znany typ, który jest jednym z <xref:System.Web.UI.HtmlTextWriterTag> wartości wyliczenia.  
  
 Aby wygenerować element kodu znaczników przy użyciu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody, pierwsze wywołanie <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> i <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metod, zgodnie z potrzebami, aby określić wszystkie atrybuty elementów lub atrybutów stylu, które są wyświetlane w znaczniku otwierającym elementu. Po wygenerowaniu wewnętrzny znaczników, należy wywołać <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodę w celu wygenerowania tagu zamykającego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę, aby dane wyjściowe w znaczniku otwierającym elementu `<img>` elementu. Atrybuty, które są dodawane do elementu przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metoda będzie w otwarcia `<img>` tagu. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Metoda jest używana do generowania tagu zamykającego.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderEndTag : unit -&gt; unit&#xA;override this.RenderEndTag : unit -&gt; unit" Usage="htmlTextWriter.RenderEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje tagu końcowego elementu znaczników do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> wywołać przeciążenia i po przeprowadzeniu renderowania zawartości wszystkie między otwierającym i zamykającym (wewnętrzny markup) tego elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywołania <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> obie metody <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę, która generuje otwierający tag i <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę, która renderuje wewnętrzny kod znaczników pomiędzy otwierającym, a zamykającym tagiem niestandardowe `MyTag` o nazwie elementu.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingChars : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje spację i samozamykającego znaku ukośnika (/) tagu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> Pole jest używane w elementy znaczników, które są zamknięte samodzielnie. Na przykład:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingTagEnd : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje zamknięcie ukośnika znak i prawego nawiasu (/&gt;) elementu samozamykającego znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody podczas tworzenia znaczników Self-Closing.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania wartości niestandardowej `FileName` właściwość następuje znak cudzysłowu i znaków, reprezentowane przez <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> pola. Kod przykładowy wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody i przekazuje <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> pola jako argument parametru, aby zamknąć element.  
  
 Ten przykładowy kod powoduje wyświetlenie `FileName` wartości właściwości, a następnie następujące znaczniki:  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberSignature Language="F#" Value="val mutable SemicolonChar : char" Usage="System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje średnika (;).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekaż <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> pola jako argument parametru w <xref:System.Web.UI.HtmlTextWriter.Write%2A> wywołania metody, jeśli chcesz renderować średnik z karty lub kontrolki niestandardowej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak ręczne renderowanie szereg style w elemencie znaczników. Przykład kodu wykorzystuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania `font-size` i `border-style` atrybuty stylu. <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> Pole jest używane jako parametr <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę, aby oddzielić wartości `font-size` atrybut od początku `border-style` atrybutu.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable SingleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje apostrof (').</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> pola, gdy jest to konieczne do renderowania apostrof.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberSignature Language="F#" Value="val mutable SlashChar : char" Usage="System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak ukośnika (/).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.SlashChar> pola do renderowania ukośnik oznacza podczas wpisywania adresu URL. <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Metoda używa <xref:System.Web.UI.HtmlTextWriter.SlashChar> pola podczas zapisywania tagu zamykającego elementu znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak ręczne renderowanie `src` atrybutu `<img>` elementu. Przykład kodu wykorzystuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody z <xref:System.Web.UI.HtmlTextWriter.SlashChar> pola jako parametr do renderowania ukośnik oznacza w ścieżce, która jest stosowana do `src` atrybutu.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberSignature Language="F#" Value="val mutable SpaceChar : char" Usage="System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak spacji ().</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> i <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody podczas zapisywania separatory między elementów i atrybutów.  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób tworzenia tablicy znaków. Drugi pokazuje, jak używać tablicy.  
  
 Te przykłady kodu generuje następujące znaczniki:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje sposób tworzenia <xref:System.Char> tablicę, która zawiera <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Poniższy przykład kodu pokazuje, jak używać tablicy, który został utworzony w poprzednim przykładzie kodu jako parametr podczas wywoływania <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable StyleEqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje metodę equals stylu (<see langword=":" />) znak używany do ustawiania stylu atrybutów równy wartości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> metody do ograniczania styl nazwy i wartości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób renderowania `FontWeight` atrybut i wartości `bold` w znaczniku otwierającym elementu. Przykład kodu wykorzystuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody z <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> pola jako parametr do renderowania znak, który ustawia wartość każdego z atrybutów stylu.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberSignature Language="F#" Value="member this.TagKey : System.Web.UI.HtmlTextWriterTag with get, set" Usage="System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartość dla elementu określonego znaczników.</summary>
        <value>Element znaczników, który jest po jego znaczniku otwierającym renderowane.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> Właściwość, jest użycie tylko dla klas, które dziedziczą z <xref:System.Web.UI.HtmlTextWriter> klasy. Należy odczytać lub ustawić <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> właściwość tylko w wywołaniu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody; jest to jedyny raz, jest ustawiona na wartość spójne.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje zastąpiona wersja <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> metody w klasie, która pochodzi od klasy <xref:System.Web.UI.HtmlTextWriter> klasy. Używa wartości <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> właściwości, aby określić, czy formant serwera, za pomocą niestandardowego <xref:System.Web.UI.HtmlTextWriter> renderowania obiektu `<label>` znaczników elementu. Jeśli tak jest, `<font>` element z `color` ustawioną wartość atrybutu `red` jest zwracany do modyfikowania formatowanie `<label>` tekstu elementu.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Nie można ustawić wartości właściwości.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberSignature Language="F#" Value="val mutable TagLeftChar : char" Usage="System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje otwierającego nawiasu ostrego (&lt;) tagu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, i <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody podczas zapisywania znaczniki.  
  
   
  
## Examples  
 Poniższy przykładowy kod renderuje pierwszego znaku w znaczniku otwierającym elementu `<table>` elementu o nazwie elementu. Przykład kodu wykorzystuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody z <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> pola jako parametr.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string with get, set" Usage="System.Web.UI.HtmlTextWriter.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę tagu elementu znaczników są renderowane.</summary>
        <value>Nazwa tagu elementu znaczników są renderowane.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagName%2A> Właściwość, jest użycie tylko dla klas, które dziedziczą z <xref:System.Web.UI.HtmlTextWriter> klasy. Należy odczytać lub ustawić <xref:System.Web.UI.HtmlTextWriter.TagName%2A> właściwość tylko w <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> wywołań metod; jest to jedyny raz, jest ustawiona na wartość spójne.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje zastąpiona wersja <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metody w klasie, która pochodzi od klasy <xref:System.Web.UI.HtmlTextWriter> klasy. Przykład kodu sprawdza, czy element w celu renderowania jest `<label>` element przez wywołanie metody <xref:System.String.Compare%2A?displayProperty=nameWithType> metody, a następnie przekazywanie <xref:System.Web.UI.HtmlTextWriter.TagName%2A> wartości właściwości i ciąg, `"label"`, jako argumenty parametrów. Jeśli `<label>` element ma być renderowany znaczniku otwierającym elementu `<font>` elementu z `color` ustawioną wartość atrybutu `red`, jest renderowany przed `<label>` elementu w tagu początkowego. Jeśli nie jest elementem do renderowania `<label>` elementu, klasę bazową wersję <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metoda jest wywoływana.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberSignature Language="F#" Value="val mutable TagRightChar : char" Usage="System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje zamykającego nawiasu ostrego (&gt;) tagu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> Pole jest używane przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, i <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody podczas zapisywania znaczniki.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób renderowania tagu zamykającego `<table>` elementu przez wykonywanie wywołań do przeciążenia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody. Aby renderować ostatni znak w tagu, przykładowy kod używa <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody z <xref:System.Web.UI.HtmlTextWriter.TagRightChar> pola jako parametr.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje określony typ danych w strumieniu wyjściowym, oraz wszelkie odstępy oczekujące kartę.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberSignature Language="F#" Value="abstract member Write : bool -&gt; unit&#xA;override this.Write : bool -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Boolean" /> Można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje tekst reprezentujący wartość typu Boolean do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberSignature Language="F#" Value="abstract member Write : char -&gt; unit&#xA;override this.Write : char -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje reprezentację tekstową znak Unicode do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę, aby zakończyć znaczniku otwierającym elementu `<img>` elementu za pomocą <xref:System.Web.UI.HtmlTextWriter.TagRightChar> stałej.  
  
 Ten przykładowy kod powoduje wyświetlenie następujących znaczników:  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] -&gt; unit&#xA;override this.Write : char[] -&gt; unit" Usage="htmlTextWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków Unicode, aby zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje reprezentację tekstową z tablicy znaków Unicode do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwszy pokazuje, jak utworzyć tablicę znaków. Drugi pokazuje, jak używać tablicy.  
  
 Te przykłady kodu generuje następujące znaczniki:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje, jak utworzyć tablicę znaków, które zawierają bardziej `hello world`. Uwzględnione w tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola, które tworzy spację między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania `hello world` tablicy znaków utworzony w poprzednim przykładzie kodu do strony, gdy formant, który zawiera ten przykładowy kod znajduje się na stronie.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberSignature Language="F#" Value="abstract member Write : double -&gt; unit&#xA;override this.Write : double -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje reprezentację tekstową liczba zmiennoprzecinkowa podwójnej precyzji do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania wartości <xref:System.Double.MaxValue?displayProperty=nameWithType> pola.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int -&gt; unit&#xA;override this.Write : int -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bajtowych liczby całkowitej ze znakiem można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje tekst reprezentujący liczbę całkowitą ze znakiem 32 bajtów do strumienia wyjściowego, oraz wszelkie oczekujące odstępy kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int64 -&gt; unit&#xA;override this.Write : int64 -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bajtowych liczby całkowitej ze znakiem można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje tekst reprezentujący liczbę całkowitą ze znakiem 64 bajtów do strumienia wyjściowego, oraz wszelkie oczekujące odstępy kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : obj -&gt; unit&#xA;override this.Write : obj -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje reprezentację tekstową z obiektu do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 Wartość <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości:  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberSignature Language="F#" Value="abstract member Write : single -&gt; unit&#xA;override this.Write : single -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje reprezentację tekstową liczba zmiennoprzecinkowa pojedynczej precyzji do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania wartości <xref:System.Single.Epsilon?displayProperty=nameWithType> pola, które jest najmniejsza możliwa wartość z <xref:System.Single> struktury.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="htmlTextWriter.Write s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg, który można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje określony ciąg znaków do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania ciągiem o długości od otwierającym i zamykającym tagiem elementu niestandardowych znaczników.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit&#xA;override this.Write : string * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg, który zawiera zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do sformatowania.</param>
        <summary>Zapisuje ciąg kartę i sformatowany ciąg do strumienia wyjściowego przy użyciu tej samej semantyki jako <see cref="M:System.String.Format(System.String,System.Object)" /> metody, oraz wszelkie oczekujące odstępy kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania sformatowany ciąg z wartością <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj[] -&gt; unit&#xA;override this.Write : string * obj[] -&gt; unit" Usage="htmlTextWriter.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg, który zawiera zero lub więcej elementów formatu.</param>
        <param name="arg">Tablica obiektów do sformatowania.</param>
        <summary>Zapisuje sformatowany ciąg, który zawiera tekst reprezentujący Tablica obiektów do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę. Ta metoda korzysta z tą samą semantyką jako <see cref="M:System.String.Format(System.String,System.Object[])" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób renderowania sformatowany ciąg i zawartość tablicy. Drugi pokazuje, jak zadeklarować tablicy.  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania sformatowany ciąg i zawartości tablicy obiektów o nazwie `curPriceTime`. Wywołanie metody renderuje drugiego elementu członkowski tablicy renderuje produkt pierwszego elementu członkowskiego.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 Poniższy przykład kodu ilustruje deklarowanie `curPriceTime` tablicę obiektów.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] * int * int -&gt; unit&#xA;override this.Write : char[] * int * int -&gt; unit" Usage="htmlTextWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków, z którego można wpisać tekst w strumieniu wyjściowym.</param>
        <param name="index">Lokalizacja indeksu w tablicy, gdzie rozpoczyna się zapisywanie.</param>
        <param name="count">Liczba znaków do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje reprezentację tekstową podtablicę o długości, znaków Unicode do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób tworzenia tablicy znaków. Drugi pokazuje, jak używać tablicy.  
  
 Te przykłady kodu generuje następujące znaczniki:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje, jak utworzyć tablicę znaków, które zawierają bardziej `hello world`. Uwzględnione w tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola, które tworzy spację między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Poniższy fragment przykładowy kod używa `index` i `count` parametry <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania pięć pierwszych znaków w tablicy, utworzony w poprzednim przykładzie.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj * obj -&gt; unit&#xA;override this.Write : string * obj * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg, który zawiera zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do sformatowania.</param>
        <param name="arg1">Obiekt do sformatowania.</param>
        <summary>Zapisuje sformatowany ciąg, który zawiera tekst reprezentujący dwa obiekty przeznaczone do strumienia wyjściowego, oraz wszelkie odstępy oczekujące kartę. Ta metoda korzysta z tą samą semantyką jako <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> Metoda generuje dowolnej karty, oczekujące, a następnie wywołania <xref:System.IO.TextWriter.Write%2A> podstawowa metoda.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania, sformatowany ciąg i wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A> i <xref:System.DateTime.Today%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje atrybut adiustacji i jego wartość strumienia wyjściowego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string -&gt; unit&#xA;override this.WriteAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut, który można zapisać do strumienia wyjściowego.</param>
        <param name="value">Wartość atrybutu.</param>
        <summary>Zapisuje znaczników określony atrybut i wartości do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody do zapisywania atrybutów znaczników i ich wartości bez kodowania. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda zapisuje wartość atrybutu ujęty w znaki podwójnego cudzysłowu ("). Jeśli `value` jest `null`, <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metoda zapisuje nazwy atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje renderowanie `<img>` elementu, w których oba przeciążenia <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody są wywoływane. Przykład kodu używa następującego procesu:  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody, która renderuje znaków otwarcia elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> przeciążenia, które zapisuje `alt` atrybutu i jego wartość `<img>` elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> przeciążenia do renderowania niestandardowego `myattribute` atrybutu o wartości `No "encoding" required`, a następnie ustawia `fEncode` do `false`.  
  
-   Zamyka znaczniku otwierającym elementu element, a następnie wywołuje <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodę, aby zamknąć `<img>` elementu.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W klasach pochodnych można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> metodę, aby zdefiniować niestandardowe reguły do zapisywania atrybutów i ich wartości. Na przykład można napisać kod, który może <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> metoda próbę zapisania atrybutu o wartości pustej.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string * bool -&gt; unit&#xA;override this.WriteAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut adiustacji można zapisać do strumienia wyjściowego.</param>
        <param name="value">Wartość atrybutu.</param>
        <param name="fEncode">
          <see langword="true" /> kodowanie atrybutu i jego przypisaną wartością; w przeciwnym razie <see langword="false" />.</param>
        <summary>Zapisuje znaczników określony atrybut i wartości do strumienia wyjściowego i, jeśli zostanie określony, zapisuje wartość zakodowany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody do zapisywania atrybutów znaczników i ich wartości, z lub bez kodowania. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda używa <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metody w celu kodowania.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda zapisuje wartość atrybutu ujęty w znaki podwójnego cudzysłowu ("). Jeśli `value` jest `null`, <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metoda zapisuje nazwy atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje renderowanie `<img>` elementu, w których oba przeciążenia <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody są wywoływane. Przykład kodu używa następującego procesu:  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody, która renderuje znaków otwarcia elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> przeciążenia, które zapisuje `alt` atrybutu i jego wartość `<img>` elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> przeciążenia do renderowania niestandardowego `myattribute` atrybutu o wartości `No "encoding" required`, a następnie ustawia `fEncode` do `false`.  
  
-   Zamyka znaczniku otwierającym elementu element, a następnie wywołuje <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodę, aby zamknąć `<img>` elementu.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W klasach pochodnych można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> metodę, aby zdefiniować niestandardowe reguły do zapisywania atrybutów i ich wartości. Na przykład można napisać kod, który może <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> metoda próbę zapisania atrybutu o wartości pustej.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteBeginTag : string -&gt; unit&#xA;override this.WriteBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element znaczników, które można zapisać znacznika otwierającego.</param>
        <summary>Zapisuje wszelkie odstępy kartę i otwierający tag elementu określonego znaczników do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Metody nie zapisuje nawiasu ostrego (>) zamykającego tagu początkowego elementu znaczników. Umożliwia to pisanie kodu znaczników atrybutów w znaczniku otwierającym elementu. Użyj <xref:System.Web.UI.HtmlTextWriter.TagRightChar> stała można zamknąć otwierający tag w przypadku, gdy wywołanie <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody. Użyj <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody z <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> stała podczas pisania elementy znaczników, które są samozamykającego.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Metoda jest używana przez niestandardowe formanty serwera, które nie zezwalaj na tagów lub atrybutów mapowania i renderowanie elementów kodu znaczników w taki sam sposób dla każdego żądania.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje renderowanie `<img>` elementu, w których oba przeciążenia <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody są wywoływane. Przykład kodu używa następującego procesu:  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody, która renderuje znaków otwarcia elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> przeciążenia, które zapisuje `alt` atrybutu i jego wartość `<img>` elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> przeciążenia do renderowania niestandardowego `myattribute` atrybutu o wartości `No "encoding" required`, a następnie ustawia `fEncode` do `false`.  
  
-   Zamyka znaczniku otwierającym elementu element, a następnie wywołuje <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodę, aby zamknąć `<img>` elementu.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberSignature Language="F#" Value="abstract member WriteBreak : unit -&gt; unit&#xA;override this.WriteBreak : unit -&gt; unit" Usage="htmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje <see langword="&lt;br /&gt;" /> znaczników elementu w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> metody do renderowania wiersza przerywa w niestandardowych znaczników kontrolki lub karty. <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> Metoda zapisuje odstęp między `br` i `/` ulepszone zgodności HTML.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób wywoływania <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> metodę, aby zapisać `<br />` element do przeglądarki po <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metoda zapisuje zakodowany `&lt;custID&gt; &amp; &lt;invoice#&gt;` znaczników.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedText : string -&gt; unit&#xA;override this.WriteEncodedText : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg tekstowy do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <summary>Koduje określony tekst dla urządzenia wysyłającego żądanie, a następnie zapisuje je do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metody, gdy ciąg zawiera nawiasy (\< lub >) lub handlowe "i" (&).  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> Metoda używa <xref:System.Web.HttpUtility.HtmlEncode%2A> metodę w celu kodowania i również konwertuje znak Unicode `00A0` do `&nbsp;`.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metodę, aby zapisać zakodowany znaczników `&lt;custID&gt; &amp; &lt;invoice#&gt;` do strumienia wyjściowego. <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> Zapisów metoda `<br />`.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrl : string -&gt; unit&#xA;override this.WriteEncodedUrl : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Ciąg adresu URL do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <summary>Koduje pod określony adres URL, a następnie zapisuje je do strumienia wyjściowego. Adres URL może zawierać parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> Metoda koduje ciąg w `url` parametru, zgodnie ze specyfikacją kodowania adresu URL. Parametry, które należy wykonać ogranicznik znak zapytania (?) nie są kodowane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> metody, która generuje następujące wyniki:  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrlParameter : string -&gt; unit&#xA;override this.WriteEncodedUrlParameter : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrlParameter urlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlText">Parametr adresu URL ciąg do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <summary>Koduje określony parametr adresu URL dla urządzenia wysyłającego żądanie, a następnie zapisuje je do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Miejsca do magazynowania w parametrze część adresu URL są kodowane jako znak plus (+) i znaku równości (=) są zakodowane jako `%3d`.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> metody, która generuje następujące wyniki:  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteEndTag : string -&gt; unit&#xA;override this.WriteEndTag : string -&gt; unit" Usage="htmlTextWriter.WriteEndTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element, który można zapisać tagu zamykającego.</param>
        <summary>Zapisuje wszelkie odstępy kartę i tag zamykający elementu określonego znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W odróżnieniu od <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metody <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metoda nie ma żadnych logiki umożliwiającej wykonywanie tagu końcowym elementu dopasowania odpowiedniego tagu początkowego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje renderowanie `<img>` elementu. Przykład kodu używa następującego procesu:  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody do renderowania znaków otwarcia elementu.  
  
-   Wywołuje dwa przeciążenia metody <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody do zapisywania atrybutów, które mają `<img>` elementu.  
  
-   Wywołania <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodę, aby zamknąć `<img>` elementu.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteFullBeginTag : string -&gt; unit&#xA;override this.WriteFullBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteFullBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element, który można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszelkie odstępy kartę i otwierający tag elementu określonego znaczników do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> Metoda automatycznie zapisuje zamykającego nawiasu ostrego (>) znacznika otwierającego elementu, w odróżnieniu od <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody, która nie zapisał nawias zamykający. Użyj <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> dla elementów kodu znaczników, które nie uwzględniając atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane do <see cref="T:System.Web.UI.HtmlTextWriter" /> strumienia wyjściowego, określony przez parametry przeciążona, następuje ciąg terminator wiersza. Wszystkie wersje tej metody zapisu odstępy oczekujące kartę do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : unit -&gt; unit&#xA;override this.WriteLine : unit -&gt; unit" Usage="htmlTextWriter.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). Aby uzyskać więcej informacji, zobacz <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody Wstaw wiersz po `<img>` element jest renderowany.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : bool -&gt; unit&#xA;override this.WriteLine : bool -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna, można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i tekst reprezentujący wartość logiczną, w którym następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char -&gt; unit&#xA;override this.WriteLine : char -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje wszelkie odstępy oczekujące kartę i znaku Unicode, a następnie ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char[] -&gt; unit&#xA;override this.WriteLine : char[] -&gt; unit" Usage="htmlTextWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i Tablica znaków Unicode, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwszy pokazuje, jak utworzyć tablicę. Drugi pokazuje, jak użyć tej tablicy.  
  
 Te przykłady kodu generuje następujące znaczniki:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje, jak utworzyć tablicę znaków, które zawierają bardziej `hello world`. Uwzględnione w tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola, które tworzy spację między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Poniższy kod przykładowy renderuje `hello world` tablicy znaków, który został utworzony w poprzednim przykładzie, za pomocą <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody.  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : double -&gt; unit&#xA;override this.WriteLine : double -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i tekstowa reprezentacja liczba zmiennoprzecinkowa podwójnej precyzji, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania wartości <xref:System.Double.MaxValue?displayProperty=nameWithType> pola.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : int -&gt; unit&#xA;override this.WriteLine : int -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bajtowych liczby całkowitej ze znakiem można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i tekstowa reprezentacja 32-bajtowych podpisane liczby całkowite, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : int64 -&gt; unit&#xA;override this.WriteLine : int64 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bajtowych liczby całkowitej ze znakiem można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i tekstowa reprezentacja 64-bajtowych podpisane liczby całkowite, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : obj -&gt; unit&#xA;override this.WriteLine : obj -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i tekstowa reprezentacja obiektu, a następnie ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości do kontrolki.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : single -&gt; unit&#xA;override this.WriteLine : single -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Pojedynczej precyzji ruchomy punkt numer do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i tekstowa reprezentacja liczba zmiennoprzecinkowa pojedynczej precyzji, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania wartości <xref:System.Single.Epsilon?displayProperty=nameWithType> pola, które jest najmniejsza możliwa wartość z <xref:System.Single> struktury.  
  
 Ten przykładowy kod generuje następujące znaczniki:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="htmlTextWriter.WriteLine s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg, który można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszelkie odstępy oczekujące kartę i ciąg tekstowy, po której następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : uint32 -&gt; unit&#xA;override this.WriteLine : uint32 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">4-bajtowa liczba całkowita bez znaku do zapisu do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i tekstowa reprezentacja 4-bajtowa liczba całkowita bez znaku, a następnie ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj -&gt; unit&#xA;override this.WriteLine : string * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do sformatowania.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i sformatowany ciąg zawierający tekst reprezentujący obiekt następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Metoda korzysta z tą samą semantyką jako <xref:System.String.Format%28System.String%2CSystem.Object%29> metody. <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania sformatowany ciąg z wartością <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj[] -&gt; unit&#xA;override this.WriteLine : string * obj[] -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg">Tablica obiektów do sformatowania.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i sformatowany ciąg, który zawiera tekst reprezentujący tablicę obiektów, następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Metoda korzysta z tą samą semantyką jako <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> metody. <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` metody.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy pokazuje, jak renderować ciąg i Tablica do strumienia wyjściowego. Drugi pokazuje sposób deklarowania tablicy.  
  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania sformatowany ciąg i zawartość Tablica obiektów do strumienia wyjściowego.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 Poniższy przykład kodu pokazuje sposób deklarowania tablicy obiektu, który był renderowany w poprzednim przykładzie kodu.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char[] * int * int -&gt; unit&#xA;override this.WriteLine : char[] * int * int -&gt; unit" Usage="htmlTextWriter.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków, z którego można wpisać tekst w strumieniu wyjściowym.</param>
        <param name="index">Lokalizacja tablicy znaków, w którym rozpoczyna się zapisywanie.</param>
        <param name="count">Liczba znaków w tablicy można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i podtablicę o długości, znaków Unicode, a następnie ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwsza z nich przedstawia sposób tworzenia tablicy znaków. Drugi pokazuje, jak używać tablicy.  
  
 Te przykłady kodu generuje następujące znaczniki:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje, jak utworzyć tablicę znaków, które zawierają bardziej `hello world`. Uwzględnione w tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pola, które tworzy spację między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Poniższy przykład kodu wykorzystuje `index` i `count` parametry <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania pięć pierwszych znaków w tablicy, utworzony w poprzednim przykładzie kodu.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj * obj -&gt; unit&#xA;override this.WriteLine : string * obj * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do sformatowania.</param>
        <param name="arg1">Obiekt do sformatowania.</param>
        <summary>Zapisuje wszystkie oczekujące kartę odstępów i sformatowany ciąg, który zawiera reprezentację tekstową z dwóch obiektów, w którym następuje ciąg terminator wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Metoda korzysta z tą samą semantyką jako <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> metody. <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania, sformatowany ciąg i wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości i <xref:System.DateTime.Today%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.WriteLineNoTabs : string -&gt; unit" Usage="htmlTextWriter.WriteLineNoTabs s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg, który można zapisać do strumienia wyjściowego.</param>
        <summary>Zapisuje ciąg, a następnie ciąg terminator wiersza do strumienia wyjściowego. Ta metoda ignoruje wszelkie odstępy w określoną kartę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> metody zamiast <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody, gdy nie chcesz renderować kartę odstępy przed renderowanych ciąg `s`.  
  
 Domyślny ciąg terminator wiersza jest znak powrotu karetki i LF ("\r\n"). <xref:System.IO.TextWriter.WriteLine%2A> Metoda podstawowa jest używany do zapisywania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje atrybut stylu i jego wartość strumienia wyjściowego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string -&gt; unit&#xA;override this.WriteStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu, który można zapisać do strumienia wyjściowego.</param>
        <param name="value">Wartość przypisana do atrybut stylu.</param>
        <summary>Zapisuje atrybut stylu określony do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> Metoda zapisuje atrybut stylu w następującej postaci:  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string * bool -&gt; unit&#xA;override this.WriteStyleAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu, który można zapisać do strumienia wyjściowego.</param>
        <param name="value">Wartość przypisana do atrybut stylu.</param>
        <param name="fEncode">
          <see langword="true" /> Aby zakodować atrybut stylu i jego przypisaną wartością; w przeciwnym razie <see langword="false" />.</param>
        <summary>Zapisuje określony styl atrybut i wartości do strumienia wyjściowego i koduje wartość, jeśli określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> Metoda zapisuje atrybut stylu w następującej postaci:  
  
 `name` `=` `value` `;`  
  
 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> Metoda służy do kodowania `value` parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberSignature Language="F#" Value="member this.WriteUrlEncodedString : string * bool -&gt; unit" Usage="htmlTextWriter.WriteUrlEncodedString (text, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="argument" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do zakodowania i zapisania w strumieniu wyjściowym.</param>
        <param name="argument">
          <see langword="true" /> Aby zakodować ciąg jako część sekcji parametrów adresu URL; <see langword="false" /> zakodować ciąg jako część sekcji Ścieżka adresu URL.</param>
        <summary>Zapisuje określony ciąg kodowania go zgodnie z wymaganiami dotyczącymi adresu URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> Metoda koduje znaki, które można uznać za ograniczniki adresu URL (zależne od ustawień `argument`) na ciągi w postaci `%xx`, jeśli w kodzie ASCII jest mniejszy niż 128; w przeciwnym razie `%uxxxx`, gdzie `x` jest cyfra szesnastkowa.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> i <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> metody za pomocą <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> metody jako metodę narzędzia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>