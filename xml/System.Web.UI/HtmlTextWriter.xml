<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6c0d543b23fbf3fc5f29e33a7864c41598c33ff" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69398419" /></Metadata><TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <TypeSignature Language="F#" Value="type HtmlTextWriter = class&#xA;    inherit TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapisuje znaki znaczników i tekst w strumieniu wyjściowym kontrolki serwera ASP.NET. Ta klasa udostępnia funkcje formatowania, które są używane przez formanty serwera ASP.NET podczas renderowania znaczników do klientów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Klasa jest używana do renderowania HTML 4,0 w przeglądarkach klasycznych. <xref:System.Web.UI.ChtmlTextWriter> <xref:System.Web.UI> <xref:System.Web.UI.XhtmlTextWriter> <xref:System.Web.UI.Html32TextWriter>Jest również klasą bazową dla wszystkich modułów zapisujących znaczników w przestrzeni nazw, w tym klas, i. <xref:System.Web.UI.HtmlTextWriter> Te klasy są używane do zapisywania elementów, atrybutów i stylów oraz informacji o układzie dla różnych typów znaczników. Ponadto klasy te są używane przez klasy kart stron i kontrolek, które są skojarzone z poszczególnymi językami znaczników.  
  
 W większości przypadków ASP.NET automatycznie używa odpowiedniego składnika zapisywania dla żądającego urządzenia. Jeśli jednak utworzysz niestandardowy moduł zapisywania tekstu lub chcesz określić konkretny składnik zapisywania do renderowania strony dla określonego urządzenia, musisz zmapować składnik zapisywania na stronę w `controlAdapters` sekcji pliku Application. browser.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.Control.Render%2A> jak zastąpić metodę kontrolki niestandardowej, która jest pochodną <xref:System.Web.UI.Control> klasy. W przykładzie kodu pokazano, jak używać różnych <xref:System.Web.UI.HtmlTextWriter> metod, właściwości i pól.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Wystąpienie, które renderuje zawartość znaczników.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, która używa domyślnego ciągu tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przeciążenie konstruktora używa stałej, <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> gdy jest wymagane wcięcie wiersza. <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Wywołuje Przeciążenie, <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> aby zainicjować nowe wystąpienie.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób użycia <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> konstruktora do utworzenia niestandardowego <xref:System.Web.UI.HtmlTextWriter> obiektu o nazwie `StyledLabelHtmlWriter.` , gdy `MyPage` Klasa niestandardowa, która jest pochodną <xref:System.Web.UI.Page> klasy, jest zażądana przez klienta Przeglądarka używa `StyledLabelHtmlWriter` klasy w celu renderowania jej zawartości w strumieniu wyjściowym.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> Renderuje zawartość znaczników.</param>
        <param name="tabString">Ciąg, który ma być używany do renderowania wcięcia wiersza.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy z określonym znakiem ciągu tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> Przeciążenie <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> używa przeciążenia`tabString` konstruktora, gdy jest wymagane wcięcie wiersza. Wywołuje konstruktora podstawowego <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> , aby zainicjować nowe wystąpienie.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób użycia <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> konstruktora do utworzenia niestandardowego <xref:System.Web.UI.HtmlTextWriter> obiektu o nazwie `StyledLabelHtmlWriter.` , gdy `MyPage` Klasa niestandardowa, która jest pochodną <xref:System.Web.UI.Page> klasy, jest zażądana przez klienta Przeglądarka używa `StyledLabelHtmlWriter` klasy w celu renderowania jej zawartości w strumieniu wyjściowym.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje określony atrybut znacznika i wartość do tagu otwierającego elementu, który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z następnym wywołaniem <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string -&gt; unit&#xA;override this.AddAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu do dodania.</param>
        <param name="value">Ciąg zawierający wartość, która ma zostać przypisana do atrybutu.</param>
        <summary>Dodaje określony atrybut znacznika i wartość do tagu otwierającego elementu, który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z następnym wywołaniem <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> metody, jeśli atrybut nie <xref:System.Web.UI.HtmlTextWriterAttribute> jest jedną z wartości lub jeśli atrybut nie jest znany do czasu wykonywania.  
  
 Dla wystąpienia dowolnego danego elementu <xref:System.Web.UI.HtmlTextWriter> znaczników Klasa utrzymuje listę atrybutów dla tego elementu. Gdy wywoływana jest <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Metoda,wszystkieatrybutydodaneprzezmetodęsąrenderowanedotagu<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> otwierającego elementu. Lista atrybutów jest następnie czyszczona z <xref:System.Web.UI.HtmlTextWriter> obiektu.  
  
 Wzorzec kodowania dla elementów znaczników renderowania jest następujący:  
  
-   Użyj metody <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> , aby dodać wszystkie atrybuty do elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Użyj metody.  
  
-   Użyj innych metod, gdy jest to konieczne do renderowania zawartości znalezionej między tagiem otwierającym i zamykającym elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Użyj metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> jak wywołać metodę przed <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> wywołaniem metody. Kod <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> wywołuje dwa różne przeciążenia i dwa różne <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> przeciążenia przed wywołaniem <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody w celu renderowania `<span>` elementu do strumienia wyjściowego. Metoda jest używana do definiowania atrybutu niestandardowego o nazwie `CustomAttribute` i wartości `<span>` niestandardowej o nazwie `CustomAttributeValue` dla elementu, który renderuje ten kod. <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29>  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Reprezentuje atrybut Markup, którymazostaćdodanydostrumieniawyjściowego.<see cref="T:System.Web.UI.HtmlTextWriterAttribute" /></param>
        <param name="value">Ciąg zawierający wartość, która ma zostać przypisana do atrybutu.</param>
        <summary>Dodaje atrybut Markup i wartość atrybutu do tagu otwierającego elementu, który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z następnym wywołaniem <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metody, aby renderować standardowy atrybut znaczników.  
  
 Dla wystąpienia dowolnego danego elementu <xref:System.Web.UI.HtmlTextWriter> znaczników Klasa utrzymuje listę atrybutów dla tego elementu. Gdy wywoływana jest <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Metoda,wszystkieatrybuty,któresądodawaneprzezmetodęsąrenderowanedotagu<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> otwierającego elementu. Lista atrybutów zostanie następnie wyczyszczona z <xref:System.Web.UI.HtmlTextWriter>.  
  
 Wzorzec kodowania dla elementów znaczników renderowania jest następujący:  
  
-   Użyj metody <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> , aby dodać wszystkie atrybuty do elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Użyj metody.  
  
-   Użyj innych metod, gdy jest to konieczne do renderowania zawartości znalezionej między tagiem otwierającym i zamykającym elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Użyj metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metody do dodawania `Onclick` atrybutu do elementu znaczników, a następnie ustawić jego wartość na następujący kod języka ECMAScript:  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * bool -&gt; unit&#xA;override this.AddAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, fEndode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu do dodania.</param>
        <param name="value">Ciąg zawierający wartość, która ma zostać przypisana do atrybutu.</param>
        <param name="fEndode"><see langword="true" />aby zakodować atrybut i jego wartość; w przeciwnym razie. <see langword="false" /></param>
        <summary>Dodaje określony atrybut znacznika i wartość do tagu otwierającego elementu, który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z kolejnym wywołaniem <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody, z opcjonalnym kodowaniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metody, jeśli atrybut nie <xref:System.Web.UI.HtmlTextWriterAttribute> jest jedną z wartości lub jeśli atrybut nie jest znany, dopóki nie jest wymagany czas wykonywania i kodowanie.  
  
 Dla wystąpienia dowolnego danego elementu <xref:System.Web.UI.HtmlTextWriter> znaczników Klasa utrzymuje listę atrybutów dla tego elementu. Gdy wywoływana jest <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Metoda,wszystkieatrybutydodaneprzezmetodęsąrenderowanedotagu<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> otwierającego elementu. Lista atrybutów jest następnie czyszczona z <xref:System.Web.UI.HtmlTextWriter> obiektu.  
  
 Użyj metody z `fEncode` ustawionym na `true`, jeśli atrybut może zawierać znak cudzysłowu ("), znak mniejszości (<) lub znak" i "(&). <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> Wywołanie metody zakoduje atrybut w celu spełnienia wymagań urządzenia wysyłającego żądanie. Możesz ustawić `fEncode` na `false`, Jeśli wiesz, że żaden z tych znaków nie zostanie wygenerowany lub jeśli wiesz, że atrybut jest już zakodowany.  
 
Jeśli typem atrybutu jest `Style`, wartość nie będzie zakodowana, nawet jeśli `fEndode` jest. `true` Upewnij się, że wartość stylu jest zgodna ze standardem CSS i nie zawiera złośliwego kodu.
  
 Wzorzec kodowania dla elementów znaczników renderowania jest następujący:  
  
-   Użyj metody <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> , aby dodać wszystkie atrybuty do elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Użyj metody.  
  
-   Użyj innych metod, gdy jest to konieczne do renderowania zawartości znalezionej między tagiem otwierającym i zamykającym elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Użyj metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> używać przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metody, aby upewnić się, że atrybut niestandardowy, o nazwie `myattribute` `<img>` i jego wartość nie są zakodowane dla elementu.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit&#xA;override this.AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu do dodania.</param>
        <param name="value">Ciąg zawierający wartość, która ma zostać przypisana do atrybutu.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentuje atrybut.</param>
        <summary>Dodaje określony atrybut i wartość znacznika wraz z <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartością wyliczenia do tagu otwierającego elementu, <see cref="T:System.Web.UI.HtmlTextWriter" /> który tworzy obiekt z kolejnym wywołaniem <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> metody tylko w <xref:System.Web.UI.HtmlTextWriter> przypadku dziedziczenia z klasy. Umożliwia tworzenie nowych `name` i `key` par dla atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Reprezentuje atrybut Markup, którymazostaćdodanydostrumieniawyjściowego.<see cref="T:System.Web.UI.HtmlTextWriterAttribute" /></param>
        <param name="value">Ciąg zawierający wartość, która ma zostać przypisana do atrybutu.</param>
        <param name="fEncode"><see langword="true" />aby zakodować atrybut i jego wartość; w przeciwnym razie. <see langword="false" /></param>
        <summary>Dodaje atrybut Markup i wartość atrybutu do tagu otwierającego elementu, który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z kolejnym wywołaniem <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody, z opcjonalnym kodowaniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metody, aby renderować standardowy atrybut znaczników z opcjonalnym kodowaniem.  
  
 Dla wystąpienia dowolnego danego elementu <xref:System.Web.UI.HtmlTextWriter> znaczników Klasa utrzymuje listę atrybutów dla tego elementu. Gdy wywoływana jest <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Metoda,wszystkieatrybutydodaneprzezsąrenderowanedotagu<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> otwierającego elementu. Lista atrybutów jest następnie czyszczona z <xref:System.Web.UI.HtmlTextWriter> obiektu.  
  
 Użyj metody z `fEncode` ustawionym na `true`, jeśli atrybut może zawierać znak cudzysłowu ("), znak mniejszości (<) lub znak" i "(&). <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> Wywołanie metody zakoduje atrybut w celu spełnienia wymagań urządzenia wysyłającego żądanie. Możesz ustawić `fEncode` na `false`, Jeśli wiesz, że żaden z tych znaków nie zostanie wygenerowany lub jeśli wiesz, że atrybut jest już zakodowany.  
 
 Jeśli typem atrybutu jest `Style`, wartość nie będzie zakodowana, nawet jeśli `fEncode` jest. `true` Upewnij się, że wartość stylu jest zgodna ze standardem CSS i nie zawiera złośliwego kodu.

  
 Wzorzec kodowania dla elementów znaczników renderowania jest następujący:  
  
-   Użyj metody <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> , aby dodać wszystkie atrybuty do elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Użyj metody.  
  
-   Użyj innych metod, gdy jest to konieczne do renderowania zawartości znalezionej między tagiem otwierającym i zamykającym elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Użyj metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak użyć <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metody, aby upewnić się, że wartość ciągu, która jest przypisana `Alt` do atrybutu `<img>` dla elementu jest zakodowana dla urządzenia wysyłającego żądanie.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje atrybut stylu znaczników do tagu otwierającego elementu, który <see cref="T:System.Web.UI.HtmlTextWriter" /> tworzy obiekt z następnym wywołaniem <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string -&gt; unit&#xA;override this.AddStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg, który zawiera atrybut stylu do dodania.</param>
        <param name="value">Ciąg, który zawiera wartość, która ma zostać przypisana do atrybutu.</param>
        <summary>Dodaje określony atrybut stylu znaczników i wartość atrybutu do otwierającego znacznika znaczników utworzonego przez kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> metody, gdy styl <xref:System.Web.UI.HtmlTextWriterStyle> nie jest elementem członkowskim wyliczenia lub nie jest znany do czasu wykonania.  
  
 <xref:System.Web.UI.HtmlTextWriter> Klasa zachowuje listę stylów dla elementów znaczników, które renderuje. Gdy wywoływana jest <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Metoda,wszystkiestyle,któresądodawaneprzezmetodęsąrenderowanedotagu<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> otwierającego elementu. Zostanie wyczyszczona Lista stylów.  
  
 Wzorzec kodowania dla elementów znaczników renderowania jest następujący:  
  
-   Użyj metody <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> , aby dodać atrybuty stylu do elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Użyj metody.  
  
-   Użyj innych metod, gdy jest to konieczne do renderowania zawartości znalezionej między tagiem otwierającym i zamykającym.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Użyj metody.  
  
   
  
## Examples  
 Poniższy przykład kodu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> pokazuje, jak używać przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> metody do renderowania `font-size` i `color` atrybutów `<p>` stylu elementu. Ten przykład kodu używa <xref:System.Web.UI.HtmlTextWriter> klasy do renderowania zawartości kontrolki.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit&#xA;override this.AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Reprezentuje atrybut stylu, który ma zostać dodany do strumienia wyjściowego. <see cref="T:System.Web.UI.HtmlTextWriterStyle" /></param>
        <param name="value">Ciąg, który zawiera wartość, która ma zostać przypisana do atrybutu.</param>
        <summary>Dodaje atrybut stylu znacznika skojarzonego z określoną <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartością i wartość atrybutu do otwierającego znacznika znaczników utworzonego przez kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> metody, gdy styl <xref:System.Web.UI.HtmlTextWriterStyle> jest elementem członkowskim wyliczenia i jest znany przed godziną wykonywania.  
  
 <xref:System.Web.UI.HtmlTextWriter> Klasa zachowuje listę stylów dla elementów znaczników, które renderuje. Gdy wywoływana jest <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Metoda,wszystkiestyledodawaneprzezmetodęsąrenderowanedotagu<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> otwierającego elementu. Zostanie wyczyszczona Lista stylów.  
  
 Wzorzec kodowania dla elementów znaczników renderowania jest następujący:  
  
-   Użyj metody <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> , aby dodać atrybuty stylu do elementu.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Użyj metody.  
  
-   Użyj innych metod, gdy jest to konieczne do renderowania zawartości znalezionej między tagiem otwierającym i zamykającym.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Użyj metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia części przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody w klasie pochodnej <xref:System.Web.UI.HtmlTextWriter> klasy. Kod sprawdza, `<Label>` czy element jest renderowany. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> Metoda jest wywoływana, aby sprawdzić, `Color` czy atrybut stylu `<Label>` został zdefiniowany dla elementu. Jeśli atrybut nie został zdefiniowany, kod wywołuje to Przeciążenie <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody, aby dodać `Color` atrybut do atrybutu stylu, a następnie ustawić jego wartość na `red`. `Color`  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit&#xA;override this.AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg, który zawiera atrybut stylu, który ma zostać dodany.</param>
        <param name="value">Ciąg, który zawiera wartość, która ma zostać przypisana do atrybutu.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Reprezentuje atrybut stylu do dodania.</param>
        <summary>Dodaje określony atrybut stylu znacznika i wartość atrybutu wraz z <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartością wyliczenia do otwierającego znacznika znaczników utworzonego przez kolejne wywołanie <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> metody tylko w <xref:System.Web.UI.HtmlTextWriter> przypadku dziedziczenia z klasy. Umożliwia tworzenie nowych `name` i `value` par dla <xref:System.Web.UI.HtmlTextWriterStyle> atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberSignature Language="F#" Value="abstract member BeginRender : unit -&gt; unit&#xA;override this.BeginRender : unit -&gt; unit" Usage="htmlTextWriter.BeginRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlTextWriter" /> Powiadamia obiekt lub obiekt klasy pochodnej, że formant ma być renderowany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacja<xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> klasy metody nie ma żadnej funkcji. Należy zastąpić <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metodę w klasie <xref:System.Web.UI.HtmlTextWriter> pochodnej, aby zapewnić własne funkcje renderowania. Na przykład w języku znaczników, który może wymagać `<p>` , aby elementy, które mają być renderowane bezpośrednio przed formantem, ale gdzie należy `<p>` określić wcześniej <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> , można użyć przesłonięcia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="htmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlTextWriter" /> Zamyka obiekt i zwalnia wszystkie skojarzone z nim zasoby systemowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja <xref:System.Web.UI.HtmlTextWriter.Close%2A> metody <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> wywołuje metodę bazową.  
  
 Po wywołaniu <xref:System.Web.UI.HtmlTextWriter.Close%2A> metody wszystkie operacje <xref:System.Web.UI.HtmlTextWriter> na obiekcie mogą zgłosić wyjątki, ponieważ wszystkie jej zasoby zostały wydane.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberSignature Language="F#" Value="val mutable DefaultTabString : string" Usage="System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje pojedynczy znak tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pojedyncza karta jest reprezentowana przez znak ASCII 9.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób tworzenia konstruktora, który przyjmuje <xref:System.IO.TextWriter> obiekt jako parametr i <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> przekazuje pole jako argument parametru do drugiej wersji konstruktora. Gdy ten konstruktor jest wywoływany z kodu, <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> pole definiuje zasady wcięć dla wystąpienia składnika zapisywania znaczników, który jest używany przez stronę lub kartę.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable DoubleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak cudzysłowu (").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To pole jest używane przez metodę do zamykania atrybutu. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, `border` jak renderować atrybut `<table>` dla elementu. Kod wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę w celu renderowania atrybutu i jego wartości i <xref:System.Web.UI.HtmlTextWriter.Write%2A> używa metody do renderowania <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> pól i <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> .  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Koduje wartość określonego atrybutu Markup Language na podstawie wymagań <see cref="T:System.Web.HttpRequest" /> obiektu bieżącego kontekstu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="member this.EncodeAttributeValue : string * bool -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Ciąg zawierający wartość atrybutu do kodowania.</param>
        <param name="fEncode"><see langword="true" />aby zakodować wartość atrybutu, w przeciwnym razie. <see langword="false" /></param>
        <summary>Koduje wartość określonego atrybutu Markup Language na podstawie wymagań <see cref="T:System.Web.HttpRequest" /> obiektu bieżącego kontekstu.</summary>
        <returns>Ciąg zawierający <see langword="null" /> zakodowaną wartość atrybutu, jeśli <paramref name="value" /> jest pusty lub Niezakodowana wartość atrybutu if <paramref name="fEncode" /> is <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metody, jeśli atrybut nie <xref:System.Web.UI.HtmlTextWriterAttribute> jest wartością wyliczenia lub nie jest znany do czasu wykonania.  
  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Metoda usuwa znaki podwójnego cudzysłowu ("), & handlowe" i mniejsze niż znaki (<), dzięki czemu nieprawidłowe Tagi nie są generowane, niezależnie od danych wejściowych. Rzeczywiste kodowanie jest wykonywane przez <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metodę.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wywołać <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> metodę jako parametr <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> w wywołaniu metody, `color:blue` a następnie kodować wartość atrybutu stylu.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string&#xA;override this.EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (attrKey, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Reprezentująca atrybut znacznika.</param>
        <param name="value">Ciąg zawierający wartość atrybutu do kodowania.</param>
        <summary>Koduje wartość określonego atrybutu Markup Language na podstawie wymagań <see cref="T:System.Web.HttpRequest" /> obiektu bieżącego kontekstu.</summary>
        <returns>Ciąg zawierający zakodowaną wartość atrybutu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> Metoda usuwa znaki podwójnego cudzysłowu ("), & handlowe" i mniejsze niż znaki (<), dzięki czemu nieprawidłowe Tagi nie są generowane, niezależnie od danych wejściowych. Rzeczywiste kodowanie jest wykonywane przez <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metodę.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.EncodeUrl : string -&gt; string" Usage="htmlTextWriter.EncodeUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Ciąg zawierający adres URL do zakodowania.</param>
        <summary>Wykonuje minimalne kodowanie adresu URL, konwertując spacje w określonym adresie URL na ciąg "% 20".</summary>
        <returns>Ciąg zawierający zakodowany adres URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kodowanie adresu URL znaku składa się z symbolu procentu (%), po którym następuje dwucyfrowy reprezentacja szesnastkowa (bez uwzględniania wielkości liter) dla znaku w kodzie ISO-Latin. Reprezentacja szesnastkowa miejsca wynosi 20.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak wywołać metodę, <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> aby przekonwertować wszystkie spacje w adresie URL, który jest przesyłany jako parametr <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> w wywołaniu metody.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kodowanie używane przez <see cref="T:System.Web.UI.HtmlTextWriter" /> obiekt do zapisywania zawartości na stronie.</summary>
        <value>, <see cref="T:System.Text.Encoding" /> W którym Adiustacja jest zapisywana na stronie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość uzyskuje swoją wartość z obiektu podstawowego <xref:System.IO.TextWriter>. <xref:System.Web.UI.HtmlTextWriter.Encoding%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak użyć <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> właściwości w celu zapisania typu kodowania, które jest używane przez kontrolkę niestandardową do renderowania tekstu na stronie zawierającej ją.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberSignature Language="F#" Value="abstract member EndRender : unit -&gt; unit&#xA;override this.EndRender : unit -&gt; unit" Usage="htmlTextWriter.EndRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlTextWriter" /> Powiadamia obiekt lub obiekt klasy pochodnej, że formant zakończył renderowanie. Tej metody można użyć do zamknięcia wszystkich elementów znaczników otwartych w <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" /> metodzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> Implementacja<xref:System.Web.UI.HtmlTextWriter.EndRender%2A> klasy metody nie ma żadnej funkcji. Należy przesłonić <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> klasę pochodną klasy, <xref:System.Web.UI.HtmlTextWriter> aby zapewnić własne funkcje renderowania.  
  
 Możesz użyć metody, <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> aby zamknąć wszystkie elementy znaczników otwartych <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> w metodzie.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberSignature Language="F#" Value="val mutable EndTagLeftChars : string" Usage="System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje lewy nawias ostry i ukośnik (&lt;/) tagu zamykającego elementu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To pole jest używane przez metodę do konstruowania tagów końcowych elementów znaczników. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje `<table>` , jak renderować tag zamykający elementu znaczników <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> przy użyciu i <xref:System.Web.UI.HtmlTextWriter.TagRightChar> <xref:System.Web.UI.HtmlTextWriter.Write%2A> pola jako wartości parametrów w wywołaniach metody.  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje tag otwierający elementu znaczników, który zawiera atrybuty, które implementują formatowanie układu i znaków określonego stylu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.EnterStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> , który określa układ i formatowanie do rozpoczęcia stosowania do bloku znaczników.</param>
        <summary>Zapisuje tag <see langword="&lt;span&gt;" /> otwierający elementu, który zawiera atrybuty, które implementują formatowanie układu i znaków określonego stylu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Użyj metody, aby zastosować style, takie jak kolor tła lub szerokość obramowania, do bloku znaczników.  
  
 Metody <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> i<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> umożliwiają karcie urządzenia lub kontrolce Tworzenie znaczników, które używają formatowania znaków określonego stylu. Użyj tej samej wartości dla `style` <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody, która jest używana w odpowiedniej <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metodzie.  
  
 Przeciążenie metody renderuje tag otwierający `<span>`elementu. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> Następnie ta metoda dodaje niezbędne atrybuty i atrybuty stylu do otwierającego tagu `<span>` elementu, aby wyświetlić ustawienia określone <xref:System.Web.UI.WebControls.Style> przez obiekt. Jeśli chcesz renderować inny element znaczników, aby zawierał atrybuty i atrybuty stylu, użyj <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> przeciążenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać klasy niestandardowej o `TextSample`nazwie pochodnej <xref:System.Web.UI.WebControls.WebControl> z <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> klasy, która używa metody do zastosowania <xref:System.Web.UI.WebControls.Style.ForeColor%2A> stylu do ciągu tekstu.  
  
 Metoda renderuje kod HTML `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Wywołanie <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody `<span>` zamyka element po wyrenderowaniu tekstu.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.EnterStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> , który określa układ i formatowanie do rozpoczęcia stosowania do bloku znaczników.</param>
        <param name="tag">Określa tag otwierającego elementu znaczników, który będzie zawierać obiekt stylu określony w <paramref name="style" />. <see cref="T:System.Web.UI.HtmlTextWriterTag" /></param>
        <summary>Zapisuje tag otwierający elementu znaczników, który zawiera atrybuty, które implementują formatowanie układu i znaków określonego stylu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Użyj metody, aby zastosować style, takie jak kolor tła lub szerokość obramowania, do bloku znaczników.  
  
 Metody <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> i<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> umożliwiają karcie urządzenia lub kontrolce Tworzenie znaczników, które używają formatowania znaków określonego stylu. Użyj tej samej wartości dla `style` <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody, która jest używana w odpowiedniej <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metodzie.  
  
 Przeciążenie metody renderuje tag otwierający elementu określonego przez `tag` parametr. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Następnie Metoda dodaje niezbędne atrybuty i atrybuty stylu do otwierającego tagu elementu, aby wyświetlić ustawienia, które są określone <xref:System.Web.UI.WebControls.Style> przez obiekt. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> , aby renderować tag `<span>` otwierający elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać klasy niestandardowej o `TextSample`nazwie pochodnej <xref:System.Web.UI.WebControls.WebControl> z <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> klasy, która używa metody do zastosowania <xref:System.Web.UI.WebControls.Style.ForeColor%2A> stylu do ciągu tekstu.  
  
 Metoda renderuje kod HTML`<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Wywołanie <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody `<span>` zamyka element po wyrenderowaniu tekstu.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable EqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak równości (<see langword="=" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz chcieć użyć <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> pola zamiast <xref:System.Web.UI.HtmlTextWriter.EqualsChar> pola podczas konstruowania ogranicznika otwierającego wartości atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, `src` jak renderować atrybut i część jego wartości `<img>` dla elementu. Kod używa <xref:System.Web.UI.HtmlTextWriter.EqualsChar> pola <xref:System.Web.UI.HtmlTextWriter.Write%2A> w wywołaniu metody w celu renderowania znaku równości `src` (=) między atrybutem a jego wartością.  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberSignature Language="F#" Value="val mutable EqualsDoubleQuoteString : string" Usage="System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak równości (=) i podwójny cudzysłów (") razem w ciągu (=").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To pole jest używane <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> przez metody i <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> do konstruowania ogranicznika otwierającego wartości atrybutów. <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, `border` jak renderować atrybut `<table>` dla elementu. Kod wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę w celu renderowania atrybutu i jego wartości i <xref:System.Web.UI.HtmlTextWriter.Write%2A> używa metody do renderowania <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> pól i <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> .  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje tag zamykający elementu znaczników, aby zakończyć określony układ i formatowanie znaków.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.ExitStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style"><see cref="T:System.Web.UI.WebControls.Style" /> Określa układ i formatowanie do zamknięcia.</param>
        <summary>Zapisuje tag <see langword="&lt;span&gt;" /> zamykający elementu, aby zakończyć określony układ i formatowanie znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przeciążenie metody renderuje tag `<span>` zamykający elementu po tagu zamykającym kontrolki, zamykając element otwarty przez odpowiednie <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> wywołanie. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>  
  
 Metody <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> i<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> umożliwiają karcie urządzenia lub kontrolce Tworzenie znaczników zaczynających się i kończących blok przy użyciu formatowania znaków określonego stylu. Użyj tej samej wartości dla `style` <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody, która jest używana w odpowiedniej <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metodzie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać klasy niestandardowej o `TextSample`nazwie pochodnej <xref:System.Web.UI.WebControls.WebControl> z <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> klasy, która używa metody do zastosowania <xref:System.Web.UI.WebControls.Style.ForeColor%2A> stylu do ciągu tekstu.  
  
 Metoda renderuje kod HTML `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Wywołanie <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody `<span>` zamyka element po wyrenderowaniu tekstu.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.ExitStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> , który określa układ i formatowanie, które mają zostać zatrzymane do tekstu wyjściowego.</param>
        <param name="tag"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> Określa tag zamykający elementu znaczników, który zawiera atrybuty, które zastosowały określony styl. Musi on być zgodny z kluczem przekazaną <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" /> w odpowiednim wywołaniu.</param>
        <summary>Zapisuje tag zamykający określonego elementu znaczników, aby zakończyć określony układ i formatowanie znaków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przeciążenie metody renderuje tag zamykający elementu, który jest określony przez `tag` po tagu zamykającym kontrolki, zamykając element, który został otwarty przez odpowiednie <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> wywołanie metody. <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>  
  
 Metody <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> i<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> umożliwiają karcie urządzenia lub kontrolce Tworzenie znaczników zaczynających się i kończących blok przy użyciu formatowania znaków określonego stylu. Użyj tej samej wartości dla `style` <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metody, która jest używana w odpowiedniej <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metodzie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać klasy niestandardowej o `TextSample`nazwie pochodnej <xref:System.Web.UI.WebControls.WebControl> z <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> klasy, która używa metody do zastosowania <xref:System.Web.UI.WebControls.Style.ForeColor%2A> stylu do ciągu tekstu.  
  
 Metoda renderuje kod HTML `<span style="color:Navy;">`. <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> Wywołanie <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metody `<span>` zamyka element po wyrenderowaniu tekstu.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : unit -&gt; unit&#xA;override this.FilterAttributes : unit -&gt; unit" Usage="htmlTextWriter.FilterAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie atrybuty znaczników i stylu we wszystkich właściwościach strony lub kontrolki serwera sieci Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed renderowaniem atrybutów dla elementu <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> znaczników wywoływana jest metoda. Z kolei <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Metoda <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> wywołuje metody i <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> dla każdego atrybutu i stylu do renderowania.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać klasy niestandardowej pochodnej od <xref:System.Web.UI.HtmlTextWriter> klasy, która <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> zastępuje metodę. Gdy jest <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> wywoływana, przesłonięcie sprawdza, czy moduł zapisujący `<a>` tekstu `<label>` renderuje elementy lub:  
  
-   `style` `color: blue` `style` Jeśli element jest renderowany <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> , Metoda sprawdza, czy atrybut jest renderowany w elemencie i, jeśli nie, tworzy atrybut i ustawia go na. `<label>`  
  
-   `href` http://www.cohowinery.com `href` Jeśli element jest renderowany <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> , Metoda określa, czy atrybut jest dołączony i, jeśli nie, dodaje do adresu URL. `<a>`  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="htmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści wszystkie bufory dla bieżącego <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu i powoduje, że wszystkie buforowane dane są zapisywane w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja <xref:System.Web.UI.HtmlTextWriter> <xref:System.IO.TextWriter.Flush%2A> klasy metodypoprostuwywołuje<xref:System.Web.UI.HtmlTextWriter.Flush%2A> metodę bazową.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeKey : string -&gt; System.Web.UI.HtmlTextWriterAttribute" Usage="htmlTextWriter.GetAttributeKey attrName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">Ciąg, który zawiera atrybut, dla którego ma zostać uzyskana wartość <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Uzyskuje odpowiednią <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartość wyliczenia dla określonego atrybutu.</summary>
        <returns>Wartość wyliczenia dla określonego atrybutu; w przeciwnym razie wartość jest nieprawidłowa <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> , jeśli atrybut nie jest elementem członkowskim wyliczenia. <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `attrName` jest `null` lub jest ciągiem pustym ("") lub nie można go znaleźć w tabeli nazw atrybutów, zwracany jest wartość- <xref:System.Web.UI.HtmlTextWriterAttribute> 1, która jest wpisana do obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak użyć klasy pochodzącej z <xref:System.Web.UI.HtmlTextWriter> klasy, która <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> zastępuje metodę. Przesłonięcie sprawdza `tagKey` ,czy<xref:System.Web.UI.HtmlTextWriterTag.Font> wartość jest równa wartości pola, co oznacza, że element znacznikówbędzierenderowany.`<font>` Jeśli tak, przesłonięcie wywołuje <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodę, aby dowiedzieć się `<font>` , czy element <xref:System.Web.UI.HtmlTextWriterAttribute.Size> zawiera atrybut. <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> Jeśli zwraca `false` `30pt`, metoda wywołuje metodę, która definiuje iustawiajejwartośćna.<xref:System.Web.UI.HtmlTextWriterAttribute.Size> <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeName : System.Web.UI.HtmlTextWriterAttribute -&gt; string" Usage="htmlTextWriter.GetAttributeName attrKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">W <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> celu uzyskania nazwy atrybutu znacznika dla.</param>
        <summary>Uzyskuje nazwę atrybutu znacznika skojarzonego z określoną <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> wartością.</summary>
        <returns>Ciąg zawierający nazwę atrybutu znacznika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zwraca pusty ciąg (""), jeśli `attrKey` nie jest prawidłową <xref:System.Web.UI.HtmlTextWriterAttribute> wartością. <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> jak używać metody do <xref:System.Web.UI.HtmlTextWriterAttribute.Size> konwersji wartości wyliczenia na nazwę ciągu.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberSignature Language="F#" Value="member this.GetStyleKey : string -&gt; System.Web.UI.HtmlTextWriterStyle" Usage="htmlTextWriter.GetStyleKey styleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">Atrybut stylu, dla którego ma zostać uzyskany <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Uzyskuje wartość <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wyliczenia dla określonego stylu.</summary>
        <returns>Wartość <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wyliczenia odpowiadająca. <paramref name="styleName" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zwraca wartość-1 wpisaną <xref:System.Web.UI.HtmlTextWriterStyle> jako wartość, jeśli `styleName` nie odpowiada żadnej <xref:System.Web.UI.HtmlTextWriterStyle> wartości wyliczenia. <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> jak zastąpić metodę w klasie pochodnej <xref:System.Web.UI.HtmlTextWriter> klasy. Przesłonięcie określa, `<label>` czy Adiustacja będzie renderowana, i, jeśli tak, <xref:System.Web.UI.HtmlTextWriterStyle.Color> sprawdza element atrybutu. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> <xref:System.Web.UI.HtmlTextWriterStyle.Color> `<label>` <xref:System.Web.UI.HtmlTextWriterStyle.Color> <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> Jeśli atrybut nie został zdefiniowany <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> , metoda jest używana jako pierwszy parametr w wywołaniu metody, aby dodać atrybut do elementu znaczników i ustawić atrybut na <xref:System.Web.UI.HtmlTextWriterStyle.Color> `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="F#" Value="member this.GetStyleName : System.Web.UI.HtmlTextWriterStyle -&gt; string" Usage="htmlTextWriter.GetStyleName styleKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">W <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> celu uzyskania nazwy atrybutu stylu dla.</param>
        <summary>Uzyskuje nazwę atrybutu stylu znaczników skojarzoną z określoną <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartością wyliczenia.</summary>
        <returns>Nazwa atrybutu stylu skojarzona z <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> wartością wyliczenia określoną w <paramref name="styleKey" />elemencie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `styleKey` nie jest prawidłowym <xref:System.Web.UI.HtmlTextWriterStyle> obiektem, <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> Metoda zwraca pusty ciąg ("").  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak sprawdzić, `<label>` czy element jest renderowany. Jeśli tak, sprawdza, czy <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybut stylu został zdefiniowany w elemencie. Jeśli atrybut nie został zdefiniowany <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> , metoda jest wywoływana, <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> a Metoda konwertuje <xref:System.Web.UI.HtmlTextWriterStyle.Color> element członkowski wyliczenia na jego reprezentację ciągu do przekazania do <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag&#xA;override this.GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag" Usage="htmlTextWriter.GetTagKey tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element znaczników, dla którego ma zostać uzyskany <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</param>
        <summary>Uzyskuje wartość <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wyliczenia skojarzoną z określonym elementem znaczników.</summary>
        <returns>Wartość wyliczenia; w przeciwnym razie, <paramref name="tagName" /> Jeśli nie jest skojarzona <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />z <see cref="T:System.Web.UI.HtmlTextWriterTag" /> określoną wartością. <see cref="T:System.Web.UI.HtmlTextWriterTag" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `tagName` <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> <xref:System.Web.UI.HtmlTextWriterTag.Unknown> jest `null`, pusty ciąg ("") lub nie można go znaleźć w tabeli nazw tagów znaczników, metoda zwraca pole.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zastąpić Przeciążenie <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody, która przyjmuje ciąg jako parametr. Ten ciąg jest przekazywany <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> do metody, która konwertuje ją na odpowiedni <xref:System.Web.UI.HtmlTextWriterTag> element członkowski wyliczenia, a <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> następnie przekazuje je do przeciążenia, które pobiera <xref:System.Web.UI.HtmlTextWriterTag> wartość wyliczenia jako parametr.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string&#xA;override this.GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string" Usage="htmlTextWriter.GetTagName tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> Do uzyskania elementu znaczników dla.</param>
        <summary>Uzyskuje element znaczników skojarzony z określoną <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartością wyliczenia.</summary>
        <returns>Ciąg reprezentujący element znaczników.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `tagKey` nie jest prawidłową <xref:System.Web.UI.HtmlTextWriterTag> wartością, <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> Metoda zwraca pusty ciąg ("").  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób zamykania `<font>` elementu przy <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> użyciu metody. Metoda wywołuje metodę w celu konwersji <xref:System.Web.UI.HtmlTextWriterTag.Font> wartości na ciąg. <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A>  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : int with get, set" Usage="System.Web.UI.HtmlTextWriter.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę pozycji tabulatora, aby zwiększyć wcięcie początku każdego wiersza znaczników.</summary>
        <value>Liczba pozycji tabulacji do wcięcia poszczególnych wierszy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wcięcie jest wykonywane przez zapisanie ciągu, który jest określony przez `tabString` parametr <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> konstruktora liczbę razy określony przez <xref:System.Web.UI.HtmlTextWriter.Indent%2A> właściwość.  
  
 <xref:System.Web.UI.HtmlTextWriter.Indent%2A> Jeśli właściwość jest ustawiona na wartość ujemną, zostanie zmieniona na 0 przed zapisaniem.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak zwiększyć wartość przypisaną do <xref:System.Web.UI.HtmlTextWriter.Indent%2A> właściwości po dodaniu atrybutów do tagu `<span>` otwierającego elementu i <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> wywołaniu metody. Zwiększa to wcięcie dla dowolnego znacznika, który jest renderowany wewnątrz `<span>` elementu.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerWriter : System.IO.TextWriter with get, set" Usage="System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia składnik zapisywania tekstu, który zapisuje wewnętrzną zawartość elementu znaczników.</summary>
        <value>A <see cref="T:System.IO.TextWriter" /> , który zapisuje wewnętrzną zawartość znaczników.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wewnętrzna zawartość znaczników jest tekstem znalezionym między tagiem otwierającym i zamykającym elementu języka znaczników.  
  
 Jeśli właściwość jest ustawiona <xref:System.IO.TextWriter> na obiekt, który <xref:System.Web.HttpWriter> jest wystąpieniem klasy, ten fakt jest zanotowany i zapisywane jest oddzielne odwołanie. <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać niestandardowej kontrolki serwera sieci Web, pochodzącej od <xref:System.Web.UI.WebControls.WebControl> klasy, która <xref:System.Web.UI.Control.Render%2A> zastępuje metodę. Używa <xref:System.Web.UI.HtmlTextWriter> klasy do `<font>` napisania elementu. Po wpisaniu tagu otwierającego elementu używa <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> właściwości, aby napisać ciąg `"<br> The time on the server:"` i połączyć ten ciąg <xref:System.DateTime.Now%2A?displayProperty=nameWithType> z wartością właściwości.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy określony atrybut znacznika i jego wartość są renderowane podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzona z atrybutem znacznika.</param>
        <summary>Określa, czy określony atrybut znacznika i jego wartość są renderowane podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns><see langword="true" />Jeśli atrybut jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać wartość, która ma zostać przypisana <xref:System.Web.UI.HtmlTextWriterAttribute> do obiektu, <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> Użyj przeciążenia zamiast tego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody w klasie, która dziedziczy <xref:System.Web.UI.HtmlTextWriter> z klasy. Przesłonięcie sprawdza <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> , `<font>` czy element znaczników będzie renderowany. Jeśli tak, przesłonięcie wywołuje <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodę, aby sprawdzić, `<font>` czy element zawiera <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybut. Jeśli nie, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Metoda <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> wywołuje <xref:System.Web.UI.HtmlTextWriterAttribute.Size> metodę, która definiuje atrybut i ustawia jego wartość na `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute *  -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzona z atrybutem znacznika.</param>
        <param name="value">Wartość przypisana do atrybutu.</param>
        <summary>Określa, czy określony atrybut znacznika i jego wartość są renderowane podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns><see langword="true" />Jeśli atrybut jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli metoda zwraca `true`, wartość, <xref:System.Web.UI.HtmlTextWriterAttribute> która ma zostać przypisana do obiektu, jest zwracana w `value` parametrze. <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy atrybut stylu znaczników jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzona z atrybutem.</param>
        <summary>Określa, czy określony atrybut stylu znaczników jest renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns><see langword="true" />Jeśli atrybut będzie renderowany podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać wartość, która będzie renderowana z określonym atrybutem stylu, użyj <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> przeciążenia <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak sprawdzić, `<label>` czy element jest renderowany. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> Metoda sprawdza, <xref:System.Web.UI.HtmlTextWriterStyle.Color> czy atrybut stylu został zdefiniowany w elemencie. Jeśli atrybut nie został zdefiniowany <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> , metoda definiuje <xref:System.Web.UI.HtmlTextWriterStyle.Color> atrybut i ustawia jego wartość na `red`. <xref:System.Web.UI.HtmlTextWriterStyle.Color>  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle *  -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzona z atrybutem.</param>
        <param name="value">Wartość przypisana do atrybutu style.</param>
        <summary>Określa, czy określony atrybut stylu znacznika i jego wartość są renderowane podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody.</summary>
        <returns><see langword="true" />Jeśli atrybut i jego wartość będą renderowane podczas następnego wywołania <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> metody; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli metoda zwraca `true`, wartość, <xref:System.Web.UI.HtmlTextWriterStyle> która ma zostać przypisana do atrybutu, jest zwracana w `value` parametrze. <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member IsValidFormAttribute : string -&gt; bool&#xA;override this.IsValidFormAttribute : string -&gt; bool" Usage="htmlTextWriter.IsValidFormAttribute attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="attribute">Ciąg, który zawiera nazwę atrybutu do sprawdzenia.</param>
        <summary>Sprawdza atrybut, aby upewnić się, że może być renderowany w tagu <see langword="&lt;form&gt;" /> otwierającym elementu znaczników.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja <xref:System.Web.UI.HtmlTextWriter> klasy<xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> zwraca`true` dla wszystkich atrybutów. Zastąp <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> , aby ograniczyć atrybuty, które mogą być renderowane w tagu `<form>` otwierającym elementu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zastąp <see langword="true" /> <see langword="&lt;form&gt;" /> metodę, aby zwrócić tylko te atrybuty, które mogą być zawarte w elemencie <see cref="T:System.Web.UI.HtmlTextWriter" /> znacznika, dla którego Klasa pochodna klasy jest zamierzona. <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /></para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ciąg terminatora wiersza używany przez <see cref="T:System.Web.UI.HtmlTextWriter" /> obiekt.</summary>
        <value>Ciąg zakończenia wiersza używany przez bieżący <see cref="T:System.Web.UI.HtmlTextWriter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora linii jest znakiem powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n").  
  
 Ciąg terminatora wiersza jest zapisywana w strumieniu wyjściowym za każdym <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> razem, gdy jedna z metod jest wywoływana. Jeśli właściwość jest ustawiona na `null`, używany jest domyślny znak nowego wiersza. <xref:System.Web.UI.HtmlTextWriter.NewLine%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać klasy niestandardowej pochodnej od <xref:System.Web.UI.HtmlTextWriter> klasy, która <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> zastępuje metodę. Gdy jest <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> wywoływana, przesłonięcie sprawdza, czy moduł zapisujący `<a>` tekstu `<label>` renderuje elementy lub. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Metoda określa, czy atrybut stylu jest zdefiniowany dla etykiety. Jeśli styl nie jest zdefiniowany, <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> Metoda ustawia wartość domyślną `style:color` dla atrybutu na niebieską. Metoda następnie używa właściwości, <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> aby wstawić podział wiersza w znaczniku znacznika i zapisuje wszystkie inne zdefiniowane atrybuty. <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A>  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool&#xA;override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu do renderowania.</param>
        <param name="value">Ciąg zawierający wartość, która jest przypisana do atrybutu.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Skojarzona z atrybutem znacznika.</param>
        <summary>Określa, czy określony atrybut znacznika i jego wartość mogą być renderowane do bieżącego elementu znaczników.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`Implementacja <xref:System.Web.UI.HtmlTextWriter> klasy<xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> zawsze zwraca wartość. <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> Przesłonięcia mogą określić, czy atrybut będzie renderowany na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> jak zastąpić metodę. <xref:System.Web.UI.HtmlTextWriterAttribute.Size> `30pt` `30pt` <xref:System.Web.UI.HtmlTextWriterAttribute.Size> <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Jeśli atrybut jest renderowany, ale<xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> wartość nie jest, przesłonięcie wywołuje metodę, aby dodać atrybut i ustawić jej wartość na. <xref:System.Web.UI.HtmlTextWriterAttribute.Size>  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Jeśli dziedziczysz z <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, możesz <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> zastąpić metodę, aby przywrócić <see langword="false" /> , aby zapobiec renderowaniu atrybutu w ogóle, jest renderowany w określonym elemencie lub renderowany dla określonego znacznika. Na przykład, jeśli nie chcesz, aby obiekt pochodzący od <see cref="T:System.Web.UI.HtmlTextWriter" /> nie był <see langword="bgcolor" /> renderowany atrybutu do <see langword="&lt;table&gt;" /> elementów, możesz przesłonić <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> i zwrócić <see langword="false" /> , <paramref name="name" /> gdy <see langword="bgcolor" /> są przekazywane i wartość właściwości to <see langword="table" />. <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool&#xA;override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu stylu do renderowania.</param>
        <param name="value">Ciąg zawierający wartość, która jest przypisana do atrybutu style.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Skojarzona z atrybutem style.</param>
        <summary>Określa, czy określony atrybut stylu znacznika i jego wartość mogą być renderowane do bieżącego elementu znaczników.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`Implementacja <xref:System.Web.UI.HtmlTextWriter> klasy<xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> zawsze zwraca wartość. <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> Przesłonięcia mogą określić, czy atrybut stylu będzie renderowany na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> jak zastąpić metodę. <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> `purple` <xref:System.Web.UI.HtmlTextWriterStyle.Color> <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> `purple`Jeśli atrybut <xref:System.Web.UI.HtmlTextWriterStyle.Color> stylu jest renderowany, ale wartość nie jest, przesłonięcie używa metody, aby ustawić atrybut na. <xref:System.Web.UI.HtmlTextWriterStyle.Color>  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Jeśli dziedziczysz z <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy, możesz <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> przesłonić metodę, aby przywrócić <see langword="false" /> atrybut stylu w ogóle, który jest renderowany w określonym elemencie lub jest renderowany dla określonego języka znaczników. Na przykład, jeśli nie chcesz, aby obiekt, który jest wyprowadzany <see cref="T:System.Web.UI.HtmlTextWriter" /> z <see langword="&lt;p&gt;" /> elementu w <see langword="color" /> celu renderowania atrybutu stylu, można przesłonić <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> i zwrócić <see langword="false" /> , gdy <paramref name="name" /> przebiega <see langword="color" />i wartość <see langword="p" />właściwości to. <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /></para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="abstract member OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool&#xA;override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="htmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę elementu do renderowania.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> Skojarzona z elementem.</param>
        <summary>Określa, czy określony element znaczników będzie renderowany na stronie żądającej.</summary>
        <returns>Zawsze <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`Implementacja <xref:System.Web.UI.HtmlTextWriter> klasy<xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> zawsze zwraca wartość. <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> Przesłonięcia mogą określić, czy element będzie renderowany na stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> jak zastąpić metodę. Jeśli element jest renderowany <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> , przesłonięcie używa metody, <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> aby określić, czy <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atrybut jest renderowany. <xref:System.Web.UI.HtmlTextWriterTag.Font> W przeciwnym razie używa <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metody, aby <xref:System.Web.UI.HtmlTextWriterAttribute.Size> utworzyć atrybut i ustawić jego wartość na `20pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W przypadku dziedziczenia z <see cref="T:System.Web.UI.HtmlTextWriter" /> klasy można <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> przesłonić metodę, aby <see langword="false" /> zapobiec renderowaniu elementu znaczników w ogóle lub dla określonego języka oznakowania. Na przykład, jeśli nie chcesz, aby obiekt pochodzący z <see cref="T:System.Web.UI.HtmlTextWriter" /> <see langword="&lt;font&gt;" /> elementu był renderowany <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> , można zastąpić metodę, aby zwracała <see langword="false" /> się, gdy strona zostanie zażądana, która zawiera <see langword="&lt;font&gt;" /> element.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberSignature Language="F#" Value="abstract member OutputTabs : unit -&gt; unit&#xA;override this.OutputTabs : unit -&gt; unit" Usage="htmlTextWriter.OutputTabs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje serię ciągów tabulacji, które reprezentują poziom wcięcia dla wiersza znaków znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda używa właściwości, <xref:System.Web.UI.HtmlTextWriter.Indent%2A> aby określić liczbę ciągów tabulacji do zapisu w celu uzyskania żądanego wcięcia. <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A>  
  
 Ciąg tabulacji jest określany za <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> pomocą konstruktora. Jeśli nie określono ciągu tabulatora, <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> używana jest stała (`\t`).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> jak zastąpić metodę w klasie, która jest pochodną <xref:System.Web.UI.HtmlTextWriter> klasy. Przesłonięcie zawsze <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> używa stałej do wykonania wcięcia. <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A>  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberSignature Language="F#" Value="member this.PopEndTag : unit -&gt; string" Usage="htmlTextWriter.PopEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa ostatnio zapisany element znaczników z listy renderowane elementy.</summary>
        <returns>A <see cref="T:System.String" /> zawierający ostatnio renderowany element znaczników.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy są dodawane do listy renderowane elementy znaczników przez <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę. Metoda usuwa elementy znaczników z listy przez <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> wywołanie metody. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Lista renderowanych elementów jest pusta.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberSignature Language="F#" Value="member this.PushEndTag : string -&gt; unit" Usage="htmlTextWriter.PushEndTag endTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">Tag zamykający elementu znaczników.</param>
        <summary>Zapisuje określony element znaczników do późniejszego użycia podczas generowania tagu końcowego dla elementu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy są dodawane do listy renderowane elementy znaczników, gdy <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Metoda <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> wywołuje metodę. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Metoda usuwa elementy znaczników z listy po renderowania tagu końcowego elementu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="static member RegisterAttribute : string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterAttribute (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg zawierający nazwę atrybutu znacznika do zarejestrowania.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> Odpowiada nazwa atrybutu.</param>
        <summary>Rejestruje atrybuty znaczników, czy literały lub dynamicznie generowane, z pliku źródłowego, aby mogły być prawidłowo renderowane do żądającego klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wstępnie zdefiniowane atrybuty języka HTML Markup Language są rejestrowane przez wywołania <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metody podczas tworzenia pierwszego <xref:System.Web.UI.HtmlTextWriter> obiektu. Atrybuty dynamiczne mogą być rejestrowane przy użyciu <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metody w innym czasie.  
  
 Tabela rejestracji używana przez <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metodę to `static`, więc Rejestracja atrybutów ma zastosowanie do wszystkich <xref:System.Web.UI.HtmlTextWriter> obiektów na komputerze-hoście.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="static member RegisterStyle : string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterStyle (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg przesłany z pliku źródłowego, określając nazwę stylu.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> Odpowiada określony styl.</param>
        <summary>Rejestruje właściwości stylu znaczników, czy są to literały czy dynamicznie generowane, z pliku źródłowego, aby mogły być prawidłowo renderowane do żądającego klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wstępnie zdefiniowane atrybuty kaskadowego arkusza stylów (CSS) języka HTML Markup Language są rejestrowane przez wywołania <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metody podczas tworzenia pierwszego <xref:System.Web.UI.HtmlTextWriter> obiektu. Atrybuty stylu dynamicznego można zarejestrować za pomocą <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metody w innym czasie.  
  
 Tabela rejestracji używana przez <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metodę to `static`, więc Rejestracja atrybutów ma zastosowanie do wszystkich <xref:System.Web.UI.HtmlTextWriter> obiektów na komputerze-hoście.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="static member RegisterTag : string * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterTag (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg, który zawiera tag HTML.</param>
        <param name="key">Określa <see cref="T:System.Web.UI.HtmlTextWriterTag" /> , który element ma być renderowany.</param>
        <summary>Rejestruje znaczniki znaczników, czy są to literały czy dynamicznie generowane, z pliku źródłowego, aby mogły być prawidłowo renderowane do żądającego klienta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wstępnie zdefiniowane znaczniki znaczników języka HTML są rejestrowane przez wywołania <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metody podczas tworzenia pierwszego <xref:System.Web.UI.HtmlTextWriter> obiektu. Dynamiczne Tagi znaczników można zarejestrować za pomocą <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metody w innym czasie.  
  
 Tabela rejestracji używana przez <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metodę to `static`, więc Rejestracja tagów ma zastosowanie do wszystkich <xref:System.Web.UI.HtmlTextWriter> obiektów na komputerze-hoście.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterContent : unit -&gt; string&#xA;override this.RenderAfterContent : unit -&gt; string" Usage="htmlTextWriter.RenderAfterContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje dowolny tekst lub odstępy występujące po treści i przed tagiem zamykającym elementu Markup w strumieniu wyjściowym znaczników.</summary>
        <returns>Ciąg, który zawiera odstępy lub tekst do zapisu po zawartości elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> może być przydatna, jeśli chcesz wstawić elementy podrzędne do bieżącego elementu znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zastąpić metodę w <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> klasie pochodnej klasy, <xref:System.Web.UI.HtmlTextWriter> aby określić, czy `<label>` element jest renderowany. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> przesłonięcie wstawia tag `<font>` zamykający elementu bezpośrednio przed tagiem `<label>` zamykającym elementu. Jeśli element inny niż `<label>` jest renderowany <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> , używana jest metoda podstawowa.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementacja <see cref="T:System.Web.UI.HtmlTextWriter" /> klasyzwraca<see langword="null" />metodę. <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> Przesłoń <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> , jeśli chcesz pisać tekst lub odstępy po zawartości elementu, ale przed tagiem zamykającym.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterTag : unit -&gt; string&#xA;override this.RenderAfterTag : unit -&gt; string" Usage="htmlTextWriter.RenderAfterTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje wszystkie odstępy lub tekst występujący po tagu zamykającym dla elementu znaczników.</summary>
        <returns>Odstępy lub tekst do zapisu po tagu zamykającym elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> może być przydatna, jeśli chcesz renderować dodatkowe tagi zamykające po tagu elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zastąpić metodę, <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> aby określić, czy Klasa pochodna <xref:System.Web.UI.HtmlTextWriter> klasy jest renderowana `<label>` elementu. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> zastąpienie wstawia tag `<font>` zamykający elementu bezpośrednio po `<label>` elemencie. Jeśli nie `<label>` jest elementem <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> , używana jest metoda podstawowa.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementacja <see cref="T:System.Web.UI.HtmlTextWriter" /> klasyzwraca<see langword="null" />metodę. <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> Przesłoń <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> , jeśli chcesz pisać tekst lub odstępy po tagu zamykającym element.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeContent : unit -&gt; string&#xA;override this.RenderBeforeContent : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje dowolny tekst lub odstępy przed zawartością i po tagu otwierającym elementu znaczników.</summary>
        <returns>Tekst lub odstępy do zapisu przed zawartością elementu. Jeśli nie zostanie zastąpiony <see langword="null" />, <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> zwraca.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> Metoda może być przydatna, jeśli chcesz wstawić elementy podrzędne do bieżącego elementu znaczników przed znacznikiem wewnętrznym.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zastąpić metodę, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> aby określić, czy Klasa pochodna <xref:System.Web.UI.HtmlTextWriter> klasy `<label>` ma renderować element. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> przesłonięcie wstawia tag `<font>` otwierającego elementu bezpośrednio po tagu `<label>` otwierającym elementu. Jeśli nie `<label>` jest elementem <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> , używana jest metoda podstawowa.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementacja <see cref="T:System.Web.UI.HtmlTextWriter" /> klasyzwraca<see langword="null" />metodę. <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> Przesłoń <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> , jeśli chcesz pisać tekst lub odstępy po tagu otwierającym, ale przed zawartością elementu.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeTag : unit -&gt; string&#xA;override this.RenderBeforeTag : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje dowolny tekst lub odstępy, które występują przed tagiem otwierającym elementu znaczników.</summary>
        <returns>Tekst lub odstępy do zapisu przed tagiem otwierającym elementu znaczników. Jeśli nie zostanie zastąpiony, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> może być przydatna, jeśli chcesz renderować dodatkowe Tagi otwierające przed tagiem otwierającym zamierzonego elementu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> jak zastąpić metodę, aby określić, czy Klasa, która jest pochodną <xref:System.Web.UI.HtmlTextWriter> klasy `<label>` ma renderować element. Jeśli tak, <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> przesłonięcie wstawia tag `<font>` otwierającego elementu bezpośrednio przed `<label>` elementem. Jeśli nie renderuje `<label>` elementu <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> , używana jest metoda podstawowa.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementacja <see cref="T:System.Web.UI.HtmlTextWriter" /> klasyzwraca<see langword="null" />metodę. <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> Zastąp <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> , jeśli chcesz napisać tekst lub odstępy przed tagiem otwierającym elementu.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje tag otwierającego elementu Markup w strumieniu wyjściowym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : string -&gt; unit&#xA;override this.RenderBeginTag : string -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Ciąg zawierający nazwę elementu znaczników, dla którego ma być renderowany tag otwierający.</param>
        <summary>Zapisuje tag otwierającego określonego elementu Markup Language w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj przesłonięcia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29> metody, jeśli element Markup nie <xref:System.Web.UI.HtmlTextWriterTag> jest jedną z wartości wyliczenia. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>  
  
 Aby wygenerować element znaczników przy użyciu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody, najpierw <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Wywołaj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody i, w razie potrzeby,, aby określić atrybuty elementu lub atrybuty stylu, które mają być wyświetlane w tagu otwierającym elementu. Po wygenerowaniu znaczników wewnętrznych Wywołaj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodę, aby wygenerować tag zamykający.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> jak wywołać metodę w kontrolce niestandardowej w celu renderowania tagu otwierającego niestandardowego `MyTag` elementu. Przykład kodu wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę w celu renderowania oznaczeń wewnętrznych, a następnie <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> wywołuje metodę, aby zamknąć element.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Jedna z <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartości, która definiuje tag otwierającego elementu znaczników do renderowania.</param>
        <summary>Zapisuje tag otwierający elementu znaczników skojarzonego z określoną <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartością wyliczenia do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> Użyj przeciążenia <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> metody, jeśli element znacznika jest typu znanego <xref:System.Web.UI.HtmlTextWriterTag> , który jest jednym z wartości wyliczenia.  
  
 Aby wygenerować element znaczników przy użyciu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody, najpierw <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> Wywołaj <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metody i, w razie potrzeby,, aby określić atrybuty elementu lub atrybuty stylu, które mają być wyświetlane w tagu otwierającym elementu. Po wygenerowaniu znaczników wewnętrznych Wywołaj <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodę, aby wygenerować tag zamykający.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody do wyprowadzania tagu `<img>` otwierającego elementu. Atrybuty, które są dodawane do elementu przez <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodę, będą znajdować się w tagu otwierającym. `<img>` <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> Metoda jest używana do generowania tagu zamykającego.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderEndTag : unit -&gt; unit&#xA;override this.RenderEndTag : unit -&gt; unit" Usage="htmlTextWriter.RenderEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje tag końcowy elementu znaczników w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodę po wywołaniu przeciążenia i po wyrenderowaniu całej zawartości między otwierającym i zamykającym tagiem (znakiem wewnętrznym) elementu. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> jak wywołać metodę po <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> obu metodach, które generują tag otwierającego i <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę, która renderuje znacznik wewnętrzny między tagiem otwierającym i zamykającym niestandardowego `MyTag` element został wywołany.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingChars : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje spację i znacznik ukośnika (/) znacznika znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> Pole jest używane w elementach znaczników, które są zamknięte. Na przykład:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingTagEnd : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak ukośnika zamykającego i prawego nawiasu&gt;ostrego (/) elementu znaczników, które są zamykane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To pole jest używane przez metodę podczas konstruowania samozamykających elementów znaczników. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak renderować wartość właściwości niestandardowej `FileName` , a następnie znak cudzysłowu i znaki reprezentowane <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> przez pole. Przykładowy kod wywołuje <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodę i <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> przekazuje pole jako argument parametru, aby zamknąć element.  
  
 Ten przykład kodu renderuje `FileName` wartość właściwości, a następnie następujące znaczniki:  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberSignature Language="F#" Value="val mutable SemicolonChar : char" Usage="System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje średnika (;).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekaż pole jako argument parametru <xref:System.Web.UI.HtmlTextWriter.Write%2A> w wywołaniu metody, gdy chcesz renderować średnik z kontrolki niestandardowej lub karty. <xref:System.Web.UI.HtmlTextWriter.SemicolonChar>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób ręcznego renderowania szeregu stylów dla elementu znaczników. Przykład kodu używa <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania `font-size` i `border-style` atrybutów stylu. To pole jest używane jako parametr <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do `font-size` oddzielenia wartości atrybutu od początku `border-style` atrybutu. <xref:System.Web.UI.HtmlTextWriter.SemicolonChar>  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable SingleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje apostrof (').</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj pola <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> , gdy jest to konieczne do renderowania apostrofu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberSignature Language="F#" Value="val mutable SlashChar : char" Usage="System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak ukośnika (/).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SlashChar> Użyj pola, aby renderować znaczniki ukośnika podczas wpisywania adresu URL. <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> Metoda<xref:System.Web.UI.HtmlTextWriter.SlashChar> używa pola podczas pisania tagu zamykającego elementu znaczników.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, `src` jak ręcznie renderować atrybut `<img>` elementu. W przykładzie kodu użyto <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody <xref:System.Web.UI.HtmlTextWriter.SlashChar> z polem jako parametru do renderowania ukośników w ścieżce stosowanej do `src` atrybutu.  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberSignature Language="F#" Value="val mutable SpaceChar : char" Usage="System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak spacji ().</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To pole jest używane <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> przez metody i <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> podczas zapisywania separatorów między elementami i atrybutami. <xref:System.Web.UI.HtmlTextWriter.SpaceChar>  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwszy z nich pokazuje, jak utworzyć tablicę znaków. Drugi pokazuje, jak używać tablicy.  
  
 Te przykłady kodu generują następujące znaczniki:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje, jak utworzyć <xref:System.Char> tablicę <xref:System.Web.UI.HtmlTextWriter.SpaceChar> zawierającą pole.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Poniższy przykład kodu pokazuje, jak używać tablicy, która została utworzona w poprzednim przykładzie kodu jako parametru podczas wywoływania <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable StyleEqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje znak równości (<see langword=":" />) używany do ustawiania atrybutów stylu równych wartości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To pole jest używane przez metodę do rozgraniczania nazw i wartości stylów. <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób renderowania `FontWeight` atrybutu i `bold` wartości do tagu otwierającego elementu. Przykład kodu używa <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> z polem jako parametru do renderowania znaku, który ustawia wartość każdego atrybutu stylu.  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberSignature Language="F#" Value="member this.TagKey : System.Web.UI.HtmlTextWriterTag with get, set" Usage="System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Web.UI.HtmlTextWriterTag" /> wartość dla określonego elementu znaczników.</summary>
        <value>Element znaczników, który ma renderowany tag otwierający.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest używana tylko dla klas, które dziedziczą <xref:System.Web.UI.HtmlTextWriter> z klasy. <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> Należy odczytywać lub ustawiać <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> właściwość tylko w wywołaniu <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metody; jest to jedyna wartość, która jest ustawiana na spójne wartości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje przesłoniętą wersję <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> metody w klasie, która pochodzi <xref:System.Web.UI.HtmlTextWriter> od klasy. Używa wartości <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> właściwości, aby określić, czy formant serwera używający obiektu niestandardowego <xref:System.Web.UI.HtmlTextWriter> renderuje `<label>` element znaczników. Jeśli tak jest `<font>` , element `color` z atrybutem ustawionym na `red` `<label>` jest zwracany, aby zmodyfikować formatowanie tekstu elementu.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Nie można ustawić wartości właściwości.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberSignature Language="F#" Value="val mutable TagLeftChar : char" Usage="System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje nawias ostry (&lt;) tagu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>Pole jest używane przez, ,<xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> i<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody podczas pisania znaczników znaczników. <xref:System.Web.UI.HtmlTextWriter.TagLeftChar>  
  
   
  
## Examples  
 Poniższy przykład kodu renderuje pierwszy znak taga `<table>` otwierającego elementu z nazwą elementu. Przykład kodu używa <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> z polem jako parametr.  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string with get, set" Usage="System.Web.UI.HtmlTextWriter.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę tagu renderowanego elementu znaczników.</summary>
        <value>Nazwa tagu dla renderowanego elementu znaczników.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest używana tylko dla klas, które dziedziczą <xref:System.Web.UI.HtmlTextWriter> z klasy. <xref:System.Web.UI.HtmlTextWriter.TagName%2A> <xref:System.Web.UI.HtmlTextWriter.TagName%2A> Właściwość powinna być odczytywana lub ustawiana tylko <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> w wywołaniach metod; jest to jedyna wartość, która jest ustawiana jako spójna.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje przesłoniętą wersję <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metody w klasie, która pochodzi <xref:System.Web.UI.HtmlTextWriter> od klasy. Przykładowy `<label>` kod sprawdza <xref:System.String.Compare%2A?displayProperty=nameWithType> ,czyelement,`"label"`który ma być renderowany, jest elementem przez wywołanie metody, a następnie przekazanie wartości właściwościiciągu,jakoargumentyparametru.<xref:System.Web.UI.HtmlTextWriter.TagName%2A> `<label>` `red` `color` `<font>` Jeśli element ma być renderowany, tag otwierającego elementu, z atrybutem ustawionym na, jest renderowany przed tagiem otwierającym elementu. `<label>` Jeśli element do renderowania nie `<label>` jest elementem, wywoływana jest wersja <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metody klasy bazowej.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberSignature Language="F#" Value="val mutable TagRightChar : char" Usage="System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reprezentuje nawias ostry (&gt;) tagu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pole jest używane <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>przez, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>i <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metody podczas pisania znaczników znaczników. <xref:System.Web.UI.HtmlTextWriter.TagRightChar>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak renderować tag `<table>` zamykający elementu przez wykonywanie wywołań do przeciążenia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody. Aby renderować końcowy znak tagu, przykład kodu używa <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody <xref:System.Web.UI.HtmlTextWriter.TagRightChar> z polem jako parametr.  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje określony typ danych w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberSignature Language="F#" Value="override this.Write : bool -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Boolean" /> Do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje tekstową reprezentację wartości logicznej w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberSignature Language="F#" Value="override this.Write : char -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak Unicode do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje tekstową reprezentację znaku Unicode w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do zakończenia tagu `<img>` otwierającego elementu przy użyciu <xref:System.Web.UI.HtmlTextWriter.TagRightChar> stałej.  
  
 Ten przykład kodu renderuje następujące znaczniki:  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] -&gt; unit" Usage="htmlTextWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków Unicode do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje tekstową reprezentację tablicy znaków Unicode w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwszy z nich pokazuje, jak utworzyć tablicę znaków. Drugi pokazuje, jak używać tablicy.  
  
 Te przykłady kodu generują następujące znaczniki:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje, jak utworzyć tablicę znaków, która `hello world`się odnotuje. W tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pole, które tworzy spację między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody w celu `hello world` renderowania tablicy znaków utworzonej w poprzednim przykładzie kodu na stronie, gdy kontrolka zawierająca ten przykładowy kod jest uwzględniona na stronie.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberSignature Language="F#" Value="override this.Write : double -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje tekstową reprezentację liczby zmiennoprzecinkowej o podwójnej precyzji w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania wartości <xref:System.Double.MaxValue?displayProperty=nameWithType> pola.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberSignature Language="F#" Value="override this.Write : int -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bajtowa liczba całkowita ze znakiem do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje tekstową reprezentację liczby całkowitej ze znakiem 32-bajtowej w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberSignature Language="F#" Value="override this.Write : int64 -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bajtowa liczba całkowita ze znakiem do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje tekstową reprezentację liczby całkowitej ze znakiem 64-bajtowej w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Write : obj -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje tekstową reprezentację obiektu w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 Wartość <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości:  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberSignature Language="F#" Value="override this.Write : single -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje tekstową reprezentację liczby zmiennoprzecinkowej o pojedynczej precyzji w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody do renderowania wartości <xref:System.Single.Epsilon?displayProperty=nameWithType> pola, czyli <xref:System.Single> najmniejszej możliwej wartości struktury.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="htmlTextWriter.Write s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje określony ciąg w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób użycia <xref:System.Web.UI.HtmlTextWriter.Write%2A> metody w celu renderowania ciągu między tagiem otwierającym i zamykającym elementu znaczników niestandardowych.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg, który zawiera zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do sformatowania.</param>
        <summary>Zapisuje ciąg tabulacji i sformatowany ciąg do strumienia wyjściowego, używając tej samej semantyki jako <see cref="M:System.String.Format(System.String,System.Object)" /> metody, wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.Write%2A> jak używać metody do renderowania sformatowanego ciągu z wartością <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj[] -&gt; unit" Usage="htmlTextWriter.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg, który zawiera zero lub więcej elementów formatu.</param>
        <param name="arg">Tablica obiektów do sformatowania.</param>
        <summary>Zapisuje sformatowany ciąg, który zawiera tekstową reprezentację tablicy obiektów do strumienia wyjściowego, wraz z wszelkimi oczekującymi odstępami tabulacji. Ta metoda używa tej samej semantyki co <see cref="M:System.String.Format(System.String,System.Object[])" /> Metoda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy z nich demonstruje sposób renderowania sformatowanego ciągu i zawartości tablicy. Drugi pokazuje, jak zadeklarować tablicę.  
  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.Write%2A> jak używać metody do renderowania sformatowanego ciągu i zawartości tablicy obiektu o nazwie. `curPriceTime` Wywołanie metody renderuje drugi element członkowski tablicy przed renderowaniem pierwszego elementu członkowskiego.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 Poniższy przykład kodu demonstruje zadeklarowanie `curPriceTime` tablicy obiektów.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] * int * int -&gt; unit" Usage="htmlTextWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków, z której ma zostać zapisany tekst w strumieniu wyjściowym.</param>
        <param name="index">Lokalizacja indeksu w tablicy, w której rozpoczyna się pisanie.</param>
        <param name="count">Liczba znaków do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje tekstową reprezentację podtablicy znaków Unicode w strumieniu wyjściowym wraz z wszelkimi oczekującymi odstępami tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwszy z nich pokazuje, jak utworzyć tablicę znaków. Drugi pokazuje, jak używać tablicy.  
  
 Te przykłady kodu generują następujące znaczniki:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje, jak utworzyć tablicę znaków, która `hello world`się odnotuje. W tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pole, które tworzy spację między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 W poniższym przykładzie kodu są użyte `index` parametry <xref:System.Web.UI.HtmlTextWriter.Write%2A> i `count` metody w celu renderowania pierwszych pięciu znaków tablicy utworzonej w poprzednim przykładzie.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg, który zawiera zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do sformatowania.</param>
        <param name="arg1">Obiekt do sformatowania.</param>
        <summary>Zapisuje sformatowany ciąg zawierający tekstową reprezentację dwóch obiektów w strumieniu wyjściowym wraz z oczekującymi odstępami tabulacji. Ta metoda używa tej samej semantyki co <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> Metoda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda generuje wszystkie oczekujące karty, a następnie <xref:System.IO.TextWriter.Write%2A> wywołuje metodę bazową. <xref:System.Web.UI.HtmlTextWriter.Write%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.Write%2A> jak używać metody do renderowania sformatowanego ciągu oraz wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości i <xref:System.DateTime.Today%2A> .  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje atrybut Markup i jego wartość w strumieniu wyjściowym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string -&gt; unit&#xA;override this.WriteAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut do zapisu w strumieniu wyjściowym.</param>
        <param name="value">Wartość przypisana do atrybutu.</param>
        <summary>Zapisuje określony atrybut znacznika i wartość do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> , aby zapisać atrybuty znaczników i ich wartości bez kodowania. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda zapisuje wartość atrybutu ujętą w znaki podwójnego cudzysłowu ("). Jeśli `value` jest `null` ,<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda zapisuje tylko nazwę atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje renderowanie `<img>` elementu, w którym są wywoływane oba przeciążenia <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody. W przykładzie kodu jest stosowany następujący proces:  
  
-   <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Wywołuje metodę, która renderuje znaki otwierające elementu.  
  
-   Wywołuje Przeciążenie, które `alt` zapisuje atrybut `<img>` i jego wartość do elementu. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29>  
  
-   `false` `fEncode` `No "encoding" required` `myattribute` Wywołuje Przeciążenie w celu renderowania atrybutu niestandardowego, z wartością, a następnie ustawia na. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>  
  
-   Zamyka tag otwierający elementu, a następnie wywołuje <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodę w celu `<img>` zamknięcia elementu.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W klasach pochodnych można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> metodę, aby zdefiniować niestandardowe reguły zapisu atrybutów i ich wartości. Można na przykład napisać kod, który zezwolił na <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> metodę zapisu atrybutu z pustą wartością.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string * bool -&gt; unit&#xA;override this.WriteAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut znacznika do zapisu w strumieniu wyjściowym.</param>
        <param name="value">Wartość przypisana do atrybutu.</param>
        <param name="fEncode"><see langword="true" />aby zakodować atrybut i jego przypisaną wartość; w przeciwnym razie. <see langword="false" /></param>
        <summary>Zapisuje określony atrybut i wartość znacznika w strumieniu wyjściowym i, jeśli jest określony, zapisuje zakodowaną wartość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> , aby zapisać atrybuty znaczników i ich wartości z kodowaniem lub bez. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda<xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> używa metody do wykonania kodowania.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda zapisuje wartość atrybutu ujętą w znaki podwójnego cudzysłowu ("). Jeśli `value` jest `null` ,<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> Metoda zapisuje tylko nazwę atrybutu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje renderowanie `<img>` elementu, w którym są wywoływane oba przeciążenia <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody. W przykładzie kodu jest stosowany następujący proces:  
  
-   <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Wywołuje metodę, która renderuje znaki otwierające elementu.  
  
-   Wywołuje Przeciążenie, które `alt` zapisuje atrybut `<img>` i jego wartość do elementu. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29>  
  
-   `false` `fEncode` `No "encoding" required` `myattribute` Wywołuje Przeciążenie w celu renderowania atrybutu niestandardowego, z wartością, a następnie ustawia na. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>  
  
-   Zamyka tag otwierający elementu, a następnie wywołuje <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodę w celu `<img>` zamknięcia elementu.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W klasach pochodnych można zastąpić <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> metodę, aby zdefiniować niestandardowe reguły zapisu atrybutów i ich wartości. Można na przykład napisać kod, który zezwolił na <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> metodę zapisu atrybutu z pustą wartością.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteBeginTag : string -&gt; unit&#xA;override this.WriteBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element znaczników, który ma zostać zapisany w tagu otwierającym.</param>
        <summary>Zapisuje wszystkie odstępy tabulacji i tag otwierający określonego elementu znaczników w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Metoda nie zapisuje zamykającego nawiasu ostrego (>) tagu otwierającego elementu znaczników. Dzięki temu można pisać atrybuty znaczników do otwierającego tagu elementu. Użyj stałej <xref:System.Web.UI.HtmlTextWriter.TagRightChar> , aby zamknąć tag otwierającego podczas <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> wywoływania metody. <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Użyj metody<xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> ze stałą podczas pisania elementów znaczników, które są zamykane automatycznie.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Metoda jest używana przez niestandardowe kontrolki serwera, które nie zezwalają na mapowanie tagów lub atrybutów oraz renderowanie elementów znaczników w taki sam sposób dla każdego żądania.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje renderowanie `<img>` elementu, w którym są wywoływane oba przeciążenia <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody. W przykładzie kodu jest stosowany następujący proces:  
  
-   <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Wywołuje metodę, która renderuje znaki otwierające elementu.  
  
-   Wywołuje Przeciążenie, które `alt` zapisuje atrybut `<img>` i jego wartość do elementu. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29>  
  
-   `false` `fEncode` `No "encoding" required` `myattribute` Wywołuje Przeciążenie w celu renderowania atrybutu niestandardowego, z wartością, a następnie ustawia na. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29>  
  
-   Zamyka tag otwierający elementu, a następnie wywołuje <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodę w celu `<img>` zamknięcia elementu.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberSignature Language="F#" Value="abstract member WriteBreak : unit -&gt; unit&#xA;override this.WriteBreak : unit -&gt; unit" Usage="htmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje element <see langword="&lt;br /&gt;" /> znaczników w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> , aby renderować podziały wierszy w kontrolkach niestandardowych lub znacznikach kart. Metoda zapisuje spację `br` między i `/` w celu uzyskania ulepszonej zgodności html. <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak wywołać metodę, <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> aby `<br />` napisać element do przeglądarki <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> żądającej, gdy metoda zapisuje zakodowane `&lt;custID&gt; &amp; &lt;invoice#&gt;` znaczniki.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedText : string -&gt; unit&#xA;override this.WriteEncodedText : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg tekstowy do kodowania i zapisu w strumieniu wyjściowym.</param>
        <summary>Koduje określony tekst dla urządzenia wysyłającego żądanie, a następnie zapisuje go w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> , jeśli ciąg zawiera nawiasy kątowe\< (lub >) lub znak handlowego "i" (&).  
  
 Metoda używa metody do wykonania kodowania, a także konwertuje znak `00A0` Unicode na `&nbsp;`. <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> <xref:System.Web.HttpUtility.HtmlEncode%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> jak używać metody do zapisywania zakodowanego znacznika `&lt;custID&gt; &amp; &lt;invoice#&gt;` w strumieniu wyjściowym. Metoda <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> zapisuje`<br />`dane.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="text" />jest <see langword="null" />.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrl : string -&gt; unit&#xA;override this.WriteEncodedUrl : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="url">Ciąg adresu URL do kodowania i zapisu w strumieniu wyjściowym.</param>
        <summary>Koduje określony adres URL, a następnie zapisuje go w strumieniu wyjściowym. Adres URL może zawierać parametry.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda koduje ciąg w parametrze zgodnie ze specyfikacją dla kodowania adresu URL. `url` <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> Parametry występujące po ograniczniku znaku zapytania (?) nie są zakodowane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> metody, która generuje następujące dane wyjściowe:  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrlParameter : string -&gt; unit&#xA;override this.WriteEncodedUrlParameter : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrlParameter urlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="urlText">Ciąg parametru adresu URL do kodowania i zapisu w strumieniu wyjściowym.</param>
        <summary>Koduje określony parametr adresu URL dla urządzenia wysyłającego żądanie, a następnie zapisuje go w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spacje w części parametru adresu URL są kodowane jako znaki plus (+) i znak równości (=) są kodowane jako `%3d`.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> metody, która generuje następujące dane wyjściowe:  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteEndTag : string -&gt; unit&#xA;override this.WriteEndTag : string -&gt; unit" Usage="htmlTextWriter.WriteEndTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element, dla którego ma zostać zapisany tag zamykający.</param>
        <summary>Zapisuje wszystkie odstępy tabulacji i tag zamykający określonego elementu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> W<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> przeciwieństwie do metody, metoda nie ma logiki, aby tag końcowy elementu był zgodny z odpowiadającym mu tagiem otwierającym.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje renderowanie `<img>` elementu. W przykładzie kodu jest stosowany następujący proces:  
  
-   <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> Wywołuje metodę w celu renderowania znaków otwierających elementu.  
  
-   Wywołuje dwa przeciążenia <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metody w celu zapisania atrybutów `<img>` do elementu.  
  
-   Wywołuje metodę <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> , aby `<img>` zamknąć element.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteFullBeginTag : string -&gt; unit&#xA;override this.WriteFullBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteFullBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Element do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie odstępy tabulacji i tag otwierający określonego elementu znaczników w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda automatycznie zapisuje zamykający nawias ostry (>) tagu otwierającego elementu, w przeciwieństwie do <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metody, która nie zapisuje zamykającego nawiasu ostrego. <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> Używane <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> dla elementów znaczników, które nie mają atrybutów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane w <see cref="T:System.Web.UI.HtmlTextWriter" /> strumieniu wyjściowym, jak określono przez przeciążone parametry, a następnie ciąg terminatora wiersza. Wszystkie wersje tej metody zapisują wszystkie oczekujące odstępy tabulacji do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberSignature Language="F#" Value="override this.WriteLine : unit -&gt; unit" Usage="htmlTextWriter.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapisuje ciąg terminatora wiersza w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Aby uzyskać więcej informacji, zobacz <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> jak za pomocą metody wstawić wiersz `<img>` po wyrenderowaniu elementu.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : bool -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Wartość logiczna do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i tekstową reprezentację wartości logicznej, po której następuje ciąg terminatora wiersza, do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Znak do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i znak Unicode, po którym następuje ciąg terminatora wiersza, do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] -&gt; unit" Usage="htmlTextWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i tablicę znaków Unicode, po którym następuje ciąg terminatora wiersza, do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady kodu. Pierwszy z nich pokazuje, jak utworzyć tablicę. Drugi pokazuje, jak używać tej tablicy.  
  
 Te przykłady kodu generują następujące znaczniki:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje, jak utworzyć tablicę znaków, która `hello world`się odnotuje. W tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pole, które tworzy spację między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Poniższy przykład kodu renderuje `hello world` tablicę znaków, która została utworzona w poprzednim przykładzie przy <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> użyciu metody.  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : double -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa podwójnej precyzji do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i tekstową reprezentację liczby zmiennoprzecinkowej podwójnej precyzji, a po niej ciąg terminatora wiersza, do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania wartości <xref:System.Double.MaxValue?displayProperty=nameWithType> pola.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">32-bajtowa liczba całkowita ze znakiem do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i tekstową reprezentację 32-bajtowej liczby całkowitej ze znakiem, a następnie ciąg terminatora wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int64 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">64-bajtowa liczba całkowita ze znakiem do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i tekstową reprezentację 64-bajtowej liczby całkowitej ze znakiem, a następnie ciąg terminatora wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : obj -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i tekstową reprezentację obiektu, po którym następuje ciąg terminatora wiersza, do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> jak używać metody do renderowania wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> właściwości do kontrolki.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : single -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Liczba zmiennoprzecinkowa pojedynczej precyzji do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i tekstową reprezentację liczby zmiennoprzecinkowej o pojedynczej precyzji, po której następuje ciąg terminatora wiersza, do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody do renderowania wartości <xref:System.Single.Epsilon?displayProperty=nameWithType> pola, czyli <xref:System.Single> najmniejszej możliwej wartości struktury.  
  
 Ten przykład kodu generuje następujący znacznik:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="htmlTextWriter.WriteLine s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i ciąg tekstowy, po którym następuje ciąg terminatora wiersza, do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : uint32 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">4-bajtowa liczba całkowita bez znaku do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i tekstową reprezentację 4-bajtowej liczby całkowitej bez znaku, a następnie ciąg terminatora wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do sformatowania.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i sformatowany ciąg zawierający tekstową reprezentację obiektu, po którym następuje ciąg terminatora wiersza, do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda używa tej samej semantyki <xref:System.String.Format%28System.String%2CSystem.Object%29> co metoda. <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> jak używać metody do renderowania sformatowanego ciągu z wartością <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj[] -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg">Tablica obiektów do sformatowania.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i sformatowany ciąg, który zawiera tekstową reprezentację tablicy obiektów, a następnie ciąg terminatora wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda używa tej samej semantyki <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> co metoda. <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Metoda bazowa służy do `value` zapisywania metody. <xref:System.IO.TextWriter.WriteLine%2A>  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy z nich demonstruje sposób renderowania ciągu i tablicy w strumieniu wyjściowym. Druga z nich pokazuje, jak zadeklarować tablicę.  
  
 Poniższy przykład kodu ilustruje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody w celu renderowania sformatowanego ciągu i zawartości tablicy obiektów do strumienia wyjściowego.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 Poniższy przykład kodu pokazuje, jak zadeklarować tablicę obiektów, która została renderowana w poprzednim przykładzie kodu.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] * int * int -&gt; unit" Usage="htmlTextWriter.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica znaków, z której ma zostać zapisany tekst w strumieniu wyjściowym.</param>
        <param name="index">Lokalizacja w tablicy znaków, w której rozpoczyna się pisanie.</param>
        <param name="count">Liczba znaków w tablicy do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i podtablicę znaków Unicode, po którym następuje ciąg terminatora wiersza, do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
   
  
## Examples  
 Ten rozdział zawiera dwa przykłady kodu. Pierwszy z nich pokazuje, jak utworzyć tablicę znaków. Drugi pokazuje, jak używać tablicy.  
  
 Te przykłady kodu generują następujące znaczniki:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Poniższy przykład kodu pokazuje, jak utworzyć tablicę znaków, która `hello world`się odnotuje. W tablicy jest <xref:System.Web.UI.HtmlTextWriter.SpaceChar> pole, które tworzy spację między dwoma wyrazami.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Poniższy przykład kodu używa `index` parametrów <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> i `count` metody w celu renderowania pierwszych pięciu znaków tablicy utworzonej w poprzednim przykładzie kodu.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ciąg zawierający zero lub więcej elementów formatu.</param>
        <param name="arg0">Obiekt do sformatowania.</param>
        <param name="arg1">Obiekt do sformatowania.</param>
        <summary>Zapisuje wszystkie oczekujące odstępy tabulacji i sformatowany ciąg, który zawiera tekstową reprezentację dwóch obiektów, a następnie ciąg terminatora wiersza do strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda używa tej samej semantyki <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> co metoda. <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metody w celu renderowania sformatowanego ciągu oraz wartości <xref:System.Globalization.CultureInfo.CurrentCulture%2A> właściwości i <xref:System.DateTime.Today%2A> właściwości.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.WriteLineNoTabs : string -&gt; unit" Usage="htmlTextWriter.WriteLineNoTabs s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Ciąg do zapisu w strumieniu wyjściowym.</param>
        <summary>Zapisuje ciąg, po którym następuje ciąg terminatora wiersza, do strumienia wyjściowego. Ta metoda ignoruje wszystkie określone odstępy tabulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> , a nie metody <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> , jeśli nie chcesz renderować żadnych odstępów między tabulatorami przed renderowanym ciągiem `s`.  
  
 Domyślny ciąg terminatora wiersza to znak powrotu karetki, po którym następuje znak wysuwu wiersza ("\r\n"). Metoda bazowa służy do `value` zapisywania parametru. <xref:System.IO.TextWriter.WriteLine%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje atrybut stylu i jego wartość w strumieniu wyjściowym.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string -&gt; unit&#xA;override this.WriteStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu do zapisu w strumieniu wyjściowym.</param>
        <param name="value">Wartość przypisana do atrybutu style.</param>
        <summary>Zapisuje określony atrybut style w strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> Metoda zapisuje atrybut stylu w następującej postaci:  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string * bool -&gt; unit&#xA;override this.WriteStyleAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Atrybut stylu do zapisu w strumieniu wyjściowym.</param>
        <param name="value">Wartość przypisana do atrybutu style.</param>
        <param name="fEncode"><see langword="true" />aby zakodować atrybut stylu i jego przypisaną wartość; w przeciwnym razie. <see langword="false" /></param>
        <summary>Zapisuje określony atrybut i wartość stylu w strumieniu wyjściowym i koduje wartość (jeśli została określona).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> Metoda zapisuje atrybut stylu w następującej postaci:  
  
 `name` `=` `value` `;`  
  
 Metoda jest używana do `value` kodowania parametru. <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberSignature Language="F#" Value="member this.WriteUrlEncodedString : string * bool -&gt; unit" Usage="htmlTextWriter.WriteUrlEncodedString (text, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="argument" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="text">Ciąg do kodowania i zapisu w strumieniu wyjściowym.</param>
        <param name="argument"><see langword="true" />aby zakodować ciąg jako część sekcji parametru adresu URL; <see langword="false" /> aby zakodować ciąg jako część sekcji Path w adresie URL.</param>
        <summary>Zapisuje określony ciąg i kodowanie go zgodnie z wymaganiami dotyczącymi adresów URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `%xx` `argument` `x` `%uxxxx`Metoda koduje znaki, które mogą być uważane za ograniczniki adresów URL (zależnie od ustawienia) do ciągów formularza, jeśli kod ASCII jest mniejszy niż 128; w przeciwnym razie, gdzie jest <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> cyfra szesnastkowa.  
  
 Metody <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> i <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> używają<xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> metody jako metody narzędziowej.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
