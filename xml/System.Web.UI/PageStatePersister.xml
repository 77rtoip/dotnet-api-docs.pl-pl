<Type Name="PageStatePersister" FullName="System.Web.UI.PageStatePersister">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f49b7ecb1ed06ac52d52e6f52f00af58a0317546" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69397505" /></Metadata><TypeSignature Language="C#" Value="public abstract class PageStatePersister" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PageStatePersister extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageStatePersister" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PageStatePersister" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageStatePersister abstract" />
  <TypeSignature Language="F#" Value="type PageStatePersister = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia podstawową funkcjonalność dla mechanizmów ASP.NET widoku stanu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Żądania HTTP i odpowiedzi są z natury bezstanowe. Aby zachować informacje o stanie między żądaniami HTTP, strony serwera ASP.NET <xref:System.Web.UI.Page> mogą przechowywać stan. Ten stan, nazywany stanem widoku, składa się z ustawień strony i kontroli oraz danych, które sprawiają, że strona i kontrolki pojawiają się tak, jakby były to te same, które użytkownik wywołał i połączył się w ostatniej podróży z serwerem. Istnieje kilka mechanizmów przechowywania stanu widoku między kolejnymi żądaniami do tej samej strony. Klasa abstrakcyjna <xref:System.Web.UI.PageStatePersister> reprezentuje klasę bazową dla tych mechanizmów magazynu informacji o stanie.  
  
 Domyślnym mechanizmem trwałości stanu widoku w ASP.NET jest utrzymywanie informacji o stanie jako ciągu zakodowanego algorytmem Base64 w ukrytym elemencie HTML (element z `type` atrybutem ustawionym na `"hidden"`) na stronie. Strona ASP.NET używa <xref:System.Web.UI.HiddenFieldPageStatePersister> obiektu do wykonania tej pracy <xref:System.Web.UI.IStateFormatter> przy użyciu wystąpienia do serializacji i deserializacji informacji o stanie obiektu. Alternatywnie można przechowywać stan widoku stron w <xref:System.Web.HttpContext.Session%2A> obiekcie na serwerze <xref:System.Web.UI.SessionPageStatePersister> przy użyciu klasy dla klientów mobilnych z ograniczoną przepustowością i zasobami. W niektórych przypadkach można całkowicie wyłączyć opcję wyświetlania stanu trwałości. Jeśli to zrobisz, wynikiem jest to, że czasami strony i kontrolki, które opierają się na trwałości stanu, nie działają prawidłowo. Aby uzyskać więcej informacji o zarządzaniu stanem strony i stanie widoku, zobacz [ASP.NET State Management — Omówienie](https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)).  
  
 W przypadku pisania kontrolek można przechowywać informacje o stanie dla kontrolek w <xref:System.Web.UI.Control.ViewState%2A> słowniku, który <xref:System.Web.UI.StateBag> jest obiektem. Deweloper odzyska stan kontroli za pomocą <xref:System.Web.UI.PageStatePersister.ControlState%2A> właściwości. Do <xref:System.Web.UI.Control.ViewState%2A> właściwości przypisuje się klucze i wartości, <xref:System.Web.UI.Page> a obiekt serializować informacje o stanie między żądaniami. Aby wykonać niestandardową obsługę stanu w formancie, <xref:System.Web.UI.Control.LoadViewState%2A> Zastąp <xref:System.Web.UI.Control.SaveViewState%2A> metody i. Wszelkie informacje o stanie przechowywane w tym słowniku zostaną utracone, gdy stan widoku jest wyłączony przez dewelopera strony. Aby rozwiązać ten problem, w programie ASP.NET w wersji 2,0 można przechowywać informacje o stanie krytycznym w oddzielnym obiekcie o nazwie State Control. Nie ma to wpływ na obiekt stanu formantu, gdy stan widoku jest wyłączony przez dewelopera strony. Przechowywanie informacji o stanie w obiekcie stan formantu wymaga, aby formant <xref:System.Web.UI.Control.LoadControlState%2A> zastąpił metody i <xref:System.Web.UI.Control.SaveControlState%2A> i że formant jest zarejestrowany do przechowywania informacji o stanie w stanie kontroli za każdym razem, gdy formant jest zainicjowany. Aby można było zarejestrować formant do używania stanu kontroli, zastępując <xref:System.Web.UI.Control.OnInit%2A> metodę i <xref:System.Web.UI.Page.RegisterRequiresControlState%2A> wywołując metodę. Aby uzyskać więcej informacji na temat <xref:System.Web.UI.Control.ViewState%2A> używania właściwości i stanu formantu podczas tworzenia formantów, zobacz [Tworzenie niestandardowych kontrolek serwera ASP.NET](https://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
 Aby zachować stan widoku na klientach, którzy nie mogą obsługiwać istniejących mechanizmów trwałości stanu widoku, można zwiększyć <xref:System.Web.UI.PageStatePersister> klasę, aby wprowadzić własne metody stanu widoku, i można użyć kart strony do skonfigurowania aplikacji ASP.NET Aby użyć różnych mechanizmów trwałości stanu widoku w zależności od typu klienta, do którego jest obsługiwana strona. Klasy, które pochodzą z <xref:System.Web.UI.PageStatePersister> klasy, muszą przesłaniać <xref:System.Web.UI.PageStatePersister.Save%2A> metodę abstrakcyjną w celu przechowywania stanu widoku i kontroli w <xref:System.Web.UI.PageStatePersister.Load%2A> nośniku trwałości i przesłaniać metodę w celu wyodrębnienia. Jeśli zachodzi potrzeba serializacji stanu widoku i kontroli do ciągu, można użyć <xref:System.Web.UI.IStateFormatter> obiektu, do którego uzyskuje się dostęp <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> przy użyciu właściwości. Efektywnie deserializacji i deserializacji informacje o stanie obiektu do ciągu zakodowanego algorytmem Base64. Możesz również zastąpić właściwość, <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> aby dostarczyć własny mechanizm serializacji stanu obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć <xref:System.Web.UI.PageStatePersister> obiekt, który zapisuje stan widoku i kontroli na serwerze sieci Web. Demonstruje sposób przesłonięcia <xref:System.Web.UI.PageStatePersister.Save%2A> metod iwceluwyodrębnieniaizapisaniainformacjiostaniewidoku.<xref:System.Web.UI.PageStatePersister.Load%2A> `StreamPageStatePersister` Ze względu na to, że mechanizmy trwałości stanu są powiązane z możliwością dostosowania `MyPageAdapter` do funkcji przetwarzania i `StreamPageStatePersister` obsługi klienta, Klasa jest udostępniana w celu aktywowania aplikacji ASP.NET. Na koniec jest dostarczany plik funkcji przeglądarki (przeglądarki), aby umożliwić `MyPageAdapter` adapterowi dla określonej klasy klientów (w tym przypadku domyślna przeglądarka sieci Web).  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#1)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#1)]  
  
 Poniższy przykład kodu ilustruje sposób tworzenia <xref:System.Web.UI.Adapters.PageAdapter> klasy, która zwraca `StreamPageStatePersister`wystąpienie, które jest używane do utrwalania stanu widoku i kontroli dla strony sieci Web ASP.NET.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#5)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#5)]  
  
 Skompiluj te dwie klasy do zestawu, którego można użyć do uruchomienia przykładu, przy użyciu następującego wiersza polecenia kompilatora. Upewnij się, że skompilowany zestaw znajduje się w katalogu \Bin pod katalogiem głównym aplikacji ASP.NET.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#6)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#6)]  
  
 Na koniec aby włączyć `MyPageAdapter` kartę, należy utworzyć katalog o nazwie browsers pod katalogiem głównym aplikacji ASP.NET i dołączyć plik. Browser z informacjami o konfiguracji. `<refid>` Element w pliku konfiguracji wskazuje, że konfiguracja zastępuje wartości określone dla domyślnej przeglądarki w domyślnym pliku konfiguracyjnym przeglądarki. W tym przykładzie `MyPageAdapter` jest używany dla stron sieci Web ASP.NET (gdzie zwykle nie jest używana karta).  
  
```  
<browsers>  
    <browser refid="Default" >  
        <controlAdapters>  
            <adapter   
                controlType="System.Web.UI.Page"                              
                adapterType="Samples.AspNet.CS.MyPageAdapter" />  
        </controlAdapters>  
    </browser>  
</browsers>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ObjectStateFormatter" />
    <altmember cref="T:System.Web.UI.LosFormatter" />
    <altmember cref="T:System.Web.UI.Pair" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PageStatePersister (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.#ctor(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PageStatePersister(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageStatePersister : System.Web.UI.Page -&gt; System.Web.UI.PageStatePersister" Usage="new System.Web.UI.PageStatePersister page" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page"><see cref="T:System.Web.UI.Page" /> , Dla którego jest tworzony mechanizm trwałości stanu widoku.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.UI.PageStatePersister" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="page" /></exception>
      </Docs>
    </Member>
    <Member MemberName="ControlState">
      <MemberSignature Language="C#" Value="public object ControlState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ControlState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ControlState" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ControlState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ControlState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt reprezentujący dane, które kontrolki zawarte w bieżącym <see cref="T:System.Web.UI.Page" /> obiekcie używają do zachowywania żądań HTTP do serwera sieci Web.</summary>
        <value>Obiekt, który zawiera dane stanu widoku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stan kontroli to obiekt składający się z danych stanu widoku krytycznego, które kontrolki serwera sieci Web muszą działać i są zawarte w oddzielnym obiekcie od informacji o stanie widoku normalnego. Dane stanu formantu nie mają zastosowania, gdy stan widoku jest wyłączony na <xref:System.Web.UI.Page> poziomie, ale wymaga zastosowania dodatkowych kroków implementacji. Aby uzyskać więcej informacji na temat <xref:System.Web.UI.Control.ViewState%2A> używania właściwości i stanu formantu podczas tworzenia formantów, zobacz [Tworzenie niestandardowych kontrolek serwera ASP.NET](https://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.PageStatePersister> <xref:System.Web.UI.PageStatePersister.ControlState%2A> jak Klasa, która dziedziczy z klasy inicjuje właściwość. W tym przykładzie <xref:System.Web.UI.PageStatePersister.ControlState%2A> właściwość została przypisana <xref:System.Web.UI.Pair.Second> do pola <xref:System.Web.UI.Pair> obiektu i serializowana przy użyciu <xref:System.Web.UI.ObjectStateFormatter> klasy. <xref:System.Web.UI.Pair.Second> <xref:System.Web.UI.Pair> <xref:System.Web.UI.PageStatePersister.ControlState%2A> Gdy wywoływana jest <xref:System.Web.UI.ObjectStateFormatter>Metoda, Klasa jest używana do deserializacji informacji o stanie widoku i kontroli, a właściwość jest inicjowana z pola wyniku obiektu. <xref:System.Web.UI.PageStatePersister.Load%2A> Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.PageStatePersister> klasy.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Load" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Load();" />
      <MemberSignature Language="F#" Value="abstract member Load : unit -&gt; unit" Usage="pageStatePersister.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przesłonięte przez klasy pochodne, aby deserializować i załadować utrwalone informacje o stanie, gdy <see cref="T:System.Web.UI.Page" /> obiekt inicjuje swoją hierarchię kontroli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy pochodne od <xref:System.Web.UI.PageStatePersister> klasy <xref:System.Web.UI.PageStatePersister.Load%2A> implementują metodę inicjowania <xref:System.Web.UI.PageStatePersister.ViewState%2A> właściwości i <xref:System.Web.UI.PageStatePersister.ControlState%2A> w nietrwałym formacie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.PageStatePersister> <xref:System.Web.UI.PageStatePersister.Load%2A> jak Klasa, która dziedziczy z klasy implementuje metodę ładowania stanu widoku z nośnika trwałości. `StreamPageStatePersister` Próby odczytu danych ze strumienia. Używa <xref:System.Web.UI.IStateFormatter> obiektu, aby deserializować dane stanu widoku i <xref:System.Web.UI.PageStatePersister.ViewState%2A> zainicjować właściwość oraz <xref:System.Web.UI.PageStatePersister.ControlState%2A> właściwość, której strona używa do zainicjowania kontrolek. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.PageStatePersister> klasy.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Page">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Page Page { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Page Page" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.Page" />
      <MemberSignature Language="VB.NET" Value="Protected Property Page As Page" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Page ^ Page { System::Web::UI::Page ^ get(); void set(System::Web::UI::Page ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Page : System.Web.UI.Page with get, set" Usage="System.Web.UI.PageStatePersister.Page" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Page</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Web.UI.Page" /> obiekt, dla którego jest tworzony mechanizm trwałości stanu widoku.</summary>
        <value><see cref="T:System.Web.UI.Page" /> Skojarzona<see cref="T:System.Web.UI.PageStatePersister" /> z.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Web.UI.PageStatePersister.Page%2A> właściwości, aby uzyskać dostęp do bieżącego <xref:System.Web.HttpContext> obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public abstract void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Save" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Save();" />
      <MemberSignature Language="F#" Value="abstract member Save : unit -&gt; unit" Usage="pageStatePersister.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zastąpione przez klasy pochodne, aby serializować utrwalone informacje <see cref="T:System.Web.UI.Page" /> o stanie, gdy obiekt jest zwolniony z pamięci.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy, które pochodzą z <xref:System.Web.UI.PageStatePersister> klasy <xref:System.Web.UI.PageStatePersister.Save%2A> implementują metodę, aby <xref:System.Web.UI.PageStatePersister.ViewState%2A> zachować zawartość właściwości i <xref:System.Web.UI.PageStatePersister.ControlState%2A> na nośniku trwałości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.PageStatePersister> <xref:System.Web.UI.PageStatePersister.Save%2A> jak Klasa, która dziedziczy z klasy implementuje metodę, aby utrzymać stan widoku na nośnik trwałości. Używa obiektu do serializacji zawartości <xref:System.Web.UI.PageStatePersister.ControlState%2A> właściwości i właściwości. <xref:System.Web.UI.PageStatePersister.ViewState%2A> <xref:System.Web.UI.IStateFormatter> `StreamPageStatePersister` Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.PageStatePersister> klasy.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateFormatter">
      <MemberSignature Language="C#" Value="protected System.Web.UI.IStateFormatter StateFormatter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IStateFormatter StateFormatter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StateFormatter As IStateFormatter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::IStateFormatter ^ StateFormatter { System::Web::UI::IStateFormatter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StateFormatter : System.Web.UI.IStateFormatter" Usage="System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IStateFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.PageStatePersister.Load" /> <see cref="M:System.Web.UI.PageStatePersister.Save" /> <see cref="P:System.Web.UI.PageStatePersister.ControlState" /> <see cref="P:System.Web.UI.PageStatePersister.ViewState" /> Pobiera obiekt, który jest używany do serializacji i deserializacji informacji o stanie zawartych we właściwościach i podczas wywołań metod i. <see cref="T:System.Web.UI.IStateFormatter" /></summary>
        <value>Wystąpienie <see cref="T:System.Web.UI.IStateFormatter" /> , które jest używane do serializacji i deserializacji stanu obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można zastąpić <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> właściwość, aby zapewnić własny program formatujący stanu widoku.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak Klasa, która dziedziczy <xref:System.Web.UI.PageStatePersister> z klasy, uzyskuje dostęp <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> do właściwości w celu pobrania <xref:System.Web.UI.ObjectStateFormatter> obiektu <xref:System.Web.UI.IStateFormatter> , który jest domyślną implementacją interfejsu, do serializacji widoku stan i kontrola do strumienia. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.PageStatePersister> klasy.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewState">
      <MemberSignature Language="C#" Value="public object ViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ViewState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ViewState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt reprezentujący dane, które kontrolki zawarte w bieżącym <see cref="T:System.Web.UI.Page" /> obiekcie używają do zachowywania żądań HTTP do serwera sieci Web.</summary>
        <value>Obiekt, który zawiera dane stanu widoku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stan widoku to słownik danych stanu, które są wymagane przez kontrolki serwera sieci Web do działania i renderowania. Deweloperzy formantów zwykle uzyskują dostęp do obiektu stanu widoku <xref:System.Web.UI.Control.ViewState%2A> przy użyciu właściwości. Stan widoku jest zmieniany, gdy stan widoku jest wyłączony <xref:System.Web.UI.Page> na poziomie, a kontrolki wynikowe mogą nie działać poprawnie w tych scenariuszach. Aby uzyskać więcej informacji na <xref:System.Web.UI.Control.ViewState%2A> temat używania i kontroli stanu podczas tworzenia formantów, zobacz [Tworzenie niestandardowych kontrolek serwera ASP.NET](https://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Web.UI.PageStatePersister> <xref:System.Web.UI.PageStatePersister.ViewState%2A> jak Klasa, która dziedziczy z klasy inicjuje właściwość. <xref:System.Web.UI.PageStatePersister.ViewState%2A> W tym przykładzie właściwość została przypisana <xref:System.Web.UI.Pair> <xref:System.Web.UI.Pair.First> do pola obiektu i serializowana przy użyciu <xref:System.Web.UI.ObjectStateFormatter> obiektu, który jest wystąpieniem <xref:System.Web.UI.IStateFormatter> interfejsu. <xref:System.Web.UI.Pair.First> <xref:System.Web.UI.Pair> <xref:System.Web.UI.PageStatePersister.ViewState%2A> Gdy wywoływana jest <xref:System.Web.UI.ObjectStateFormatter>Metoda, interfejs jest używany do deserializacji informacji o stanie widoku, a właściwość jest inicjowana z pola wyniku obiektu. <xref:System.Web.UI.PageStatePersister.Load%2A> Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Web.UI.PageStatePersister> klasy.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
