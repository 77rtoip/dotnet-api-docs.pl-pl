<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19dabc2ace8fba060536a278060176e6f5b49aa4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36607316" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera informacje o wyrażenie regularne, która jest używana do kompilowania wyrażenia regularnego do autonomicznego zestawu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tablica <xref:System.Text.RegularExpressions.RegexCompilationInfo> obiekty są przekazywane do <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> metody, aby podać informacje o każdym wyrażenia regularnego do uwzględnienia w zestawie. Każdego skompilowanych wyrażenie regularne, który znajduje się w zestawie jest reprezentowany jako klasą pochodną <xref:System.Text.RegularExpressions.Regex>. Właściwości <xref:System.Text.RegularExpressions.RegexCompilationInfo> typ definiuje nazwę klasy wyrażenia regularnego, jego w pełni kwalifikowana nazwa (to, że przestrzeń nazw i jego nazwa typu), jego wzorzec wyrażenia regularnego, dodatkowe opcje (na przykład tego, czy wyrażenie regularne jest bez uwzględniania wielkości liter), a limit czasu, który określa, jak długo aparat wyrażeń regularnych należy wyszukać.  
  
 Można utworzyć wystąpienia <xref:System.Text.RegularExpressions.RegexCompilationInfo> obiektu przez wywołanie jego konstruktora klasy przeciążona.  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">Wyrażenie regularne do skompilowania.</param>
        <param name="options">Opcje wyrażeń regularnych do użycia w przypadku kompilowania kodu wyrażenia regularnego.</param>
        <param name="name">Nazwa typu, który reprezentuje skompilowane wyrażenia regularnego.</param>
        <param name="fullnamespace">Przestrzeń nazw, do którego należy nowego typu.</param>
        <param name="ispublic">
          <see langword="true" /> Aby skompilowane wyrażenia regularnego publicznie widoczna; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> klasy, który zawiera informacje o wyrażenie regularne do uwzględnienia w zestawie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy parametr <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Konstruktor bezpośrednio odpowiada właściwości <xref:System.Text.RegularExpressions.RegexCompilationInfo> klasy. Ponieważ wszystkie właściwości odczytu/zapisu, ich wartości można również przypisać bezpośrednio.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Metoda generuje zestaw, który zawiera skompilowane wyrażenia regularnego. W związku z tym nie należy określać <xref:System.Text.RegularExpressions.RegexOptions.Compiled> jako jedna z wartości `options`.  
  
 Jeśli `ispublic` jest `true`, klasa skompilowane wyrażenia regularnego podano powszechnej dostępności. Oznacza to może być utworzone z kodu, który wykonuje żadnych zestawów. Jeśli `ispublic` jest `false`, otrzymuje klasy skompilowane wyrażenia regularnego `internal` (w języku C#) lub `Friend` (w języku Visual Basic) ułatwień dostępu. Oznacza to można wdrożyć tylko z kodu wykonywanego w tym samym zestawie co klasa wyrażenia regularnego.  
  
   
  
## Examples  
 Poniższy przykład tworzy i używa wyrażenia regularnego skompilowany w dwóch krokach.  
  
 W pierwszym kroku kompilacji, a następnie wykonaj poniższy przykład kodu. <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A> Skompilowane wyrażenia regularnego definiuje konstruktora w przykładzie kodu. Wynik wykonania kodu jest zestaw o nazwie FishRegex.dll zawierającą skompilowane wyrażenia regularnego typu o nazwie `FishRegex`.  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 W drugim kroku skompilować poniższy przykład kodu przy użyciu odwołania do FishRegex.dll, a następnie uruchom wynikowy plik wykonywalny. Plik wykonywalny dopasowuje ciąg docelowego przy użyciu `FishRegex` wpisz i wyświetla dopasowania, grupy, grupa przechwytywania i indeks dopasowań w ciągu docelowego.  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> jest <see langword="null" />.  - lub - <paramref name="name" /> jest <see langword="null" />.  - lub - <paramref name="fullnamespace" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Ten konstruktor tworzy wyrażenie regularne skompilowanych domyślną wartość limitu czasu domeny aplikacji, w której została utworzona. Jeśli wartość limitu czasu jest zdefiniowany dla domeny aplikacji, skompilowane wyrażenia regularnego używa wartości <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, co uniemożliwia operację dopasowywanie do wzorca z przekroczeniem limitu czasu. Jest zalecana Konstruktor do tworzenia wyrażenia regularnego skompilowanych <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, umożliwiające ustawienie interwału limitu czasu.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">Wyrażenie regularne do skompilowania.</param>
        <param name="options">Opcje wyrażeń regularnych do użycia w przypadku kompilowania kodu wyrażenia regularnego.</param>
        <param name="name">Nazwa typu, który reprezentuje skompilowane wyrażenia regularnego.</param>
        <param name="fullnamespace">Przestrzeń nazw, do którego należy nowego typu.</param>
        <param name="ispublic">
          <see langword="true" /> Aby skompilowane wyrażenia regularnego publicznie widoczna; w przeciwnym razie <see langword="false" />.</param>
        <param name="matchTimeout">Domyślny limit czasu dla wyrażenia regularnego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> klasy, który zawiera informacje o wyrażenia regularnego z określoną wartość limitu czasu mają zostać uwzględnione w zestawie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy parametr <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Konstruktor bezpośrednio odpowiada właściwości <xref:System.Text.RegularExpressions.RegexCompilationInfo> klasy. Ponieważ wszystkie właściwości odczytu/zapisu, ich wartości można również przypisać bezpośrednio.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Metoda generuje zestaw, który zawiera skompilowane wyrażenia regularnego. W związku z tym nie należy określać <xref:System.Text.RegularExpressions.RegexOptions.Compiled> jako jedna z wartości `options`.  
  
 Jeśli `ispublic` jest `true`, klasa skompilowane wyrażenia regularnego podano powszechnej dostępności. Oznacza to może być utworzone z kodu, który wykonuje żadnych zestawów. Jeśli `ispublic` jest `false`, otrzymuje klasy skompilowane wyrażenia regularnego `internal` (w języku C#) lub `Friend` (w języku Visual Basic) ułatwień dostępu. Oznacza to można wdrożyć tylko z kodu wykonywanego w tym samym zestawie co klasa wyrażenia regularnego.  
  
 `matchTimeout` Parametr określa domyślny limit czasu dla skompilowanych wyrażenia regularnego. Ta wartość przedstawia przybliżoną ilość czasu obiekt skompilowane wyrażenia regularnego wykona jednej operacji dopasowywania, zanim upłynie limit czasu operacji i zgłasza wyjątek, aparat wyrażeń regularnych <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> wyjątek podczas jego następnego sprawdzania chronometrażu . Aby uzyskać dodatkowe informacje o wartość limitu czasu, zobacz <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> właściwości.  
  
> [!IMPORTANT]
>  Firma Microsoft zaleca zawsze wartość domyślna wartość limitu czasu dla skompilowanych wyrażenia regularnego. Konsumenci biblioteki wyrażenia regularnego można zastąpić tę wartość limitu czasu przez przekazanie <xref:System.TimeSpan> wartość, która reprezentuje nowy interwał limitu czasu tego przeciążenia konstruktora.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano pojedynczego skompilowane wyrażenia regularnego o nazwie `DuplicateChars` , które identyfikują dwa lub więcej wystąpień tego samego znaku w ciągu wejściowym. Skompilowane wyrażenia regularnego ma domyślny limit czasu w sekundach 2. Podczas wykonywania przykładzie tworzy bibliotekę klasy o nazwie RegexLib.dll zawierającą skompilowane wyrażenia regularnego.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Wzorzec wyrażenia regularnego `(\w)\1+` jest zdefiniowany, jak pokazano w poniższej tabeli.  
  
|Wzorzec|Opis|  
|-------------|-----------------|  
|`(\w)`|Dopasowuje dowolny znak słowa i przypisz je do pierwszej grupy przechwytywania.|  
|`\1+`|Odpowiada jedno lub więcej wystąpień wartości pierwszego przechwyconej grupy.|  
  
 W poniższym przykładzie użyto `DuplicatedChars` wyrażenie regularne, aby zidentyfikować zduplikowane znaków w tablicy ciągów. Gdy wywołuje `DuplicatedChars` konstruktora, zmienia się.5 sekund limitu czasu.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> jest <see langword="null" />.  - lub - <paramref name="name" /> jest <see langword="null" />.  - lub - <paramref name="fullnamespace" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="matchTimeout" /> ma wartość ujemną, zero, lub większa niż około 24 dni.</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy skompilowane wyrażenia regularnego ma widoczności publicznej.</summary>
        <value>
          <see langword="true" /> Jeśli wyrażenie regularne ma publiczny widoczność; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> właściwość jest `false`, zdefiniowany przez bieżące wystąpienie klasy wyrażeń regularnych można wdrożyć tylko przez kod, który jest wykonywany w zestawie, który zawiera klasę. Jednak ponieważ <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> metoda generuje zestawu, który zawiera tylko wyrażenia regularne skompilowany i nie zezwala na dodatkowy kod w celu dodania, zwykle nie istnieje przyczyna można przypisać wartość tej właściwości `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wyrażenia regularnego domyślny limit czasu.</summary>
        <value>Domyślny interwał maksymalny czas, jaki może upłynąć w dopasowywanie do wzorca operacji przed <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> jest zgłaszany, lub <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> wyłączenie limitu czasu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> Właściwość definiuje domyślny interwał limitu czasu dla skompilowanych wyrażenia regularnego. Ta wartość przedstawia przybliżoną ilość czasu skompilowane wyrażenia regularnego wykona jednej operacji dopasowywania, zanim upłynie limit czasu operacji i zgłasza wyjątek, aparat wyrażeń regularnych <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> wyjątek podczas jego następnego sprawdzania chronometrażu.  
  
> [!IMPORTANT]
>  Firma Microsoft zaleca zawsze wartość domyślna wartość limitu czasu dla skompilowanych wyrażenia regularnego. Konsumenci biblioteki wyrażenia regularnego można zastąpić tę wartość limitu czasu przez przekazanie <xref:System.TimeSpan> wartość, która reprezentuje nowy interwał limitu czasu do konstruktora klasy skompilowane wyrażenia regularnego.  
  
 Można przypisać domyślnej wartości limitu czasu na <xref:System.Text.RegularExpressions.RegexCompilationInfo> obiektu w jednym z następujących sposobów:  
  
-   Wywołując <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> — metoda i udostępnia reprezentację ciągu <xref:System.TimeSpan> wartości dla właściwości "REGEX_DEFAULT_MATCH_TIMEOUT".  
  
-   Wywołując <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> Konstruktor i podawania wartości dla `matchTimeout` parametru.  
  
-   Za pomocą ustawienia wartości tej właściwości.  
  
 Aby ustawić interwał limitu czasu uzasadnione, należy wziąć pod uwagę następujące czynniki:  
  
-   Długość i złożoność wzorzec wyrażenia regularnego. Wyrażenia regularne dłużej i bardziej złożonej wymagają więcej czasu niż krótsze i łatwiejsze.  
  
-   Obciążenie maszyny oczekiwanego. Przetwarzanie zajmuje więcej czasu na komputerach z wysokie użycie procesora CPU i pamięci.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano pojedynczego skompilowane wyrażenia regularnego o nazwie `DuplicateChars` , które identyfikują dwa lub więcej wystąpień tego samego znaku w ciągu wejściowym. Skompilowane wyrażenia regularnego ma domyślny limit czasu w sekundach 2. Podczas wykonywania przykładzie tworzy bibliotekę klasy o nazwie RegexLib.dll zawierającą skompilowane wyrażenia regularnego.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Wzorzec wyrażenia regularnego `(\w)\1+` jest zdefiniowany, jak pokazano w poniższej tabeli.  
  
|Wzorzec|Opis|  
|-------------|-----------------|  
|`(\w)`|Dopasowuje dowolny znak słowa i przypisz je do pierwszej grupy przechwytywania.|  
|`\1+`|Odpowiada jedno lub więcej wystąpień wartości pierwszego przechwyconej grupy.|  
  
 W poniższym przykładzie użyto `DuplicatedChars` wyrażenie regularne, aby zidentyfikować zduplikowane znaków w tablicy ciągów. Gdy wywołuje `DuplicatedChars` konstruktora, zmienia się.5 sekund limitu czasu.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę typu, który reprezentuje skompilowane wyrażenia regularnego.</summary>
        <value>Nazwa nowego typu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> Umożliwia definiowanie skompilowanych wyrażenie regularne, które jest reprezentowany jako klasą pochodną klasy <xref:System.Text.RegularExpressions.Regex>. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> Właściwość definiuje nazwę klasy tego typu wyrażeń regularnych, a <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> i <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> właściwości definiują jego w pełni kwalifikowanej nazwy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość tej właściwości jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Wartość tej właściwości jest pustym ciągiem.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obszar nazw, do którego należy nowego typu.</summary>
        <value>Przestrzeń nazw nowego typu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> Umożliwia definiowanie skompilowanych wyrażenie regularne, które jest reprezentowany jako klasą pochodną klasy <xref:System.Text.RegularExpressions.Regex>. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> Właściwość definiuje obszar nazw, który zawiera typ skompilowane wyrażenia regularnego i <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> i <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> właściwości definiują jego w pełni kwalifikowanej nazwy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość tej właściwości jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opcje do użycia w przypadku kompilowania kodu wyrażenia regularnego.</summary>
        <value>Bitowe połączenie wartości wyliczenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Metoda generuje zestaw, który zawiera skompilowane wyrażenia regularnego. W związku z tym nie trzeba określić <xref:System.Text.RegularExpressions.RegexOptions.Compiled> jako jedna z wartości tej właściwości. Jeśli jest obecny, <xref:System.Text.RegularExpressions.RegexOptions.Compiled> opcja została zignorowana.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wyrażenie regularne do skompilowania.</summary>
        <value>Wyrażenie regularne do skompilowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> Właściwość może zawierać dowolne prawidłowe wyrażenie regularne. Jeśli wartość <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> właściwość nie jest wzorzec wyrażenia regularnego poprawna składniowo wywołanie <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> metoda zgłasza <xref:System.ArgumentException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość tej właściwości jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>