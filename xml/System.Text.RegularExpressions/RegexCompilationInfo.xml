<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7209323c5df7eb4955c832df732c089c306d181b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48761536" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera informacje dotyczące wyrażeń regularnych, które służy do kompilowania wyrażeń regularnych do autonomicznego zestawu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tablica <xref:System.Text.RegularExpressions.RegexCompilationInfo> przekazywanym do <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> metodę w celu udostępnienia informacji na temat poszczególnych wyrażeń regularnych do uwzględnienia w zestawie. Każde skompilowane wyrażenie regularne, który znajduje się w zestawie jest reprezentowane jako klasą pochodną <xref:System.Text.RegularExpressions.Regex>. Właściwości <xref:System.Text.RegularExpressions.RegexCompilationInfo> Nazwa klasy wyrażeń regularnych, jego w pełni kwalifikowana nazwa (oznacza to, że jego przestrzeń nazw i nazwy typu), jej wzorca wyrażenia regularnego, dodatkowe opcje (na przykład wyrażenie regularne jest, definicja typu bez uwzględniania wielkości liter), a interwał limitu czasu, określający, jak długo ma poszukiwać aparat wyrażeń regularnych dopasowania.  
  
 Można utworzyć wystąpienie <xref:System.Text.RegularExpressions.RegexCompilationInfo> obiektu przez wywołanie metody jej konstruktora klasy przeciążona.  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
    <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">Kompilacja i ponowne użycie</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> klasy.</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Elementy języka wyrażeń regularnych</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">Wyrażenie regularne, aby skompilować.</param>
        <param name="options">Opcje wyrażeń regularnych do użycia podczas kompilowania wyrażeń regularnych.</param>
        <param name="name">Nazwa typu, który reprezentuje skompilowane wyrażenie regularne.</param>
        <param name="fullnamespace">Przestrzeń nazw, do której należy nowego typu.</param>
        <param name="ispublic">
          <see langword="true" /> Aby publicznie uwidocznić skompilowane wyrażenie regularne; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> klasy, który zawiera informacje dotyczące wyrażeń regularnych do uwzględnienia w zestawie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy parametr <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Konstruktor odnosi się bezpośrednio z właściwością <xref:System.Text.RegularExpressions.RegexCompilationInfo> klasy. Ponieważ wszystkie właściwości odczytu/zapisu, ich wartości można przypisać również bezpośrednio.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Metoda generuje zestaw zawierający skompilowane wyrażenia regularne. W związku z tym, nie należy określać <xref:System.Text.RegularExpressions.RegexOptions.Compiled> jako jedna z wartości `options`.  
  
 Jeśli `ispublic` jest `true`, klasa skompilowane wyrażenie regularne otrzymuje powszechnej dostępności. Oznacza to mogą być utworzone z kodu, który jest wykonywany w każdym zestawie. Jeśli `ispublic` jest `false`, otrzymuje klasy skompilowane wyrażenie regularne `internal` (w języku C#) lub `Friend` (w języku Visual Basic) ułatwień dostępu. Oznacza to może zostać utworzona tylko z kodu, która jest wykonywana w tym samym zestawie co klasa wyrażenia regularnego.  
  
   
  
## Examples  
 Poniższy przykład tworzy i używa skompilowane wyrażenie regularne w dwóch krokach.  
  
 W pierwszym kroku kompilacji, a następnie wykonaj poniższy kod. <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A> Konstruktora w przykładzie kodu definiuje skompilowane wyrażenie regularne. Wynik wykonania kodu jest zestaw o nazwie FishRegex.dll zawierający skompilowane wyrażenie regularne typu o nazwie `FishRegex`.  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 W drugim kroku skompilować poniższy kod, za pomocą odwołania do FishRegex.dll, a następnie uruchom wynikowego pliku wykonywalnego. Plik wykonywalny pasuje do ciągu docelowego przy użyciu `FishRegex` wpisz i wyświetla dopasowanie, grupy, grupa przechwytywania i pozycja indeksu parametru dopasowania w ciągu docelowym.  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="name" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="fullnamespace" /> jest <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Ten konstruktor tworzy skompilowane wyrażenie regularne, które używa wartości limitu czasu domyślnej domeny aplikacji, w którym zostanie utworzona. Jeśli nie zdefiniowano wartości limitu czasu dla domeny aplikacji, skompilowane wyrażenie regularne używa wartości <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, co uniemożliwia operację dopasowania do wzorca z przekroczeniem limitu czasu. Zalecane Konstruktor do tworzenia skompilowane wyrażenie regularne jest <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, która pozwala ustawić interwał limitu czasu.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">Wyrażenie regularne, aby skompilować.</param>
        <param name="options">Opcje wyrażeń regularnych do użycia podczas kompilowania wyrażeń regularnych.</param>
        <param name="name">Nazwa typu, który reprezentuje skompilowane wyrażenie regularne.</param>
        <param name="fullnamespace">Przestrzeń nazw, do której należy nowego typu.</param>
        <param name="ispublic">
          <see langword="true" /> Aby publicznie uwidocznić skompilowane wyrażenie regularne; w przeciwnym razie <see langword="false" />.</param>
        <param name="matchTimeout">Domyślny interwał limitu czasu wyrażenia regularnego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> klasy, który zawiera informacje o wyrażenia regularnego z określoną wartość limitu czasu mają zostać uwzględnione w zestawie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy parametr <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> Konstruktor odnosi się bezpośrednio z właściwością <xref:System.Text.RegularExpressions.RegexCompilationInfo> klasy. Ponieważ wszystkie właściwości odczytu/zapisu, ich wartości można przypisać również bezpośrednio.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Metoda generuje zestaw zawierający skompilowane wyrażenia regularne. W związku z tym, nie należy określać <xref:System.Text.RegularExpressions.RegexOptions.Compiled> jako jedna z wartości `options`.  
  
 Jeśli `ispublic` jest `true`, klasa skompilowane wyrażenie regularne otrzymuje powszechnej dostępności. Oznacza to mogą być utworzone z kodu, który jest wykonywany w każdym zestawie. Jeśli `ispublic` jest `false`, otrzymuje klasy skompilowane wyrażenie regularne `internal` (w języku C#) lub `Friend` (w języku Visual Basic) ułatwień dostępu. Oznacza to może zostać utworzona tylko z kodu, która jest wykonywana w tym samym zestawie co klasa wyrażenia regularnego.  
  
 `matchTimeout` Parametr określa domyślny interwał limitu czasu dla skompilowanego wyrażenia regularnego. Ta wartość reprezentuje przybliżony ilość czasu, który obiekt skompilowane wyrażenie regularne zostaną wykonane pojedynczej operacji dopasowywania, zanim upłynie limit czasu operacji, i zgłasza aparat wyrażeń regularnych <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> wyjątek podczas jego następnego sprawdzania chronometrażu . Aby uzyskać dodatkowe informacje o wartość limitu czasu, zobacz <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> właściwości.  
  
> [!IMPORTANT]
>  Firma Microsoft zaleca, zawsze wartość domyślną wartość limitu czasu dla skompilowanego wyrażenia regularnego. Konsumenci biblioteki wyrażenia regularnego można zastąpić tę wartość limitu czasu przez przekazanie <xref:System.TimeSpan> wartości, który reprezentuje nowy interwał limitu czasu tego przeciążenia konstruktora.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano pojedynczego skompilowane wyrażenie regularne o nazwie `DuplicateChars` określający co najmniej dwóch wystąpień takiego samego znaku w ciągu wejściowym. Skompilowane wyrażenie regularne ma domyślny limit czasu 2 sekundy. Podczas wykonywania przykład tworzy bibliotekę klas o nazwie RegexLib.dll zawierający skompilowane wyrażenie regularne.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Definicję wzorca wyrażenia regularnego `(\w)\1+` jest zdefiniowany jak pokazano w poniższej tabeli.  
  
|Wzorzec|Opis|  
|-------------|-----------------|  
|`(\w)`|Dopasowuje dowolny znak słowa i przypisz je do pierwszej grupy przechwytywania.|  
|`\1+`|Dopasowuje jeden lub więcej wystąpień wartość pierwszej przechwyconej grupy.|  
  
 W poniższym przykładzie użyto `DuplicatedChars` wyrażenie regularne, aby zidentyfikować zduplikowane znaki w tablicy ciągów. Kiedy wywołuje `DuplicatedChars` konstruktora, zmienia się.5 sekund limitu czasu.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> jest <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="name" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="fullnamespace" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="matchTimeout" /> ma wartość ujemną, zerowego, lub większa od około 24 dni.</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy skompilowane wyrażenie regularne ma publiczny widoczność.</summary>
        <value>
          <see langword="true" /> Jeśli wyrażenie regularne ma publiczny widoczność; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> właściwość `false`, zdefiniowane przez bieżące wystąpienie klasy wyrażeń regularnych można wdrożyć tylko przez kod, który jest wykonywany w zestawie, który zawiera klasę. Jednak ponieważ <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> metoda generuje zestaw, który zawiera tylko skompilowanych wyrażeń regularnych, a nie zezwala na dodatkowy kod ma zostać dodany, zwykle ma powodu, aby przypisać wartość tej właściwości `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia interwał limitu czasu domyślnego wyrażenia regularnego.</summary>
        <value>Domyślny interwał maksymalny czas, jaki może upłynąć dopasowania do wzorca operacji przed <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> jest zgłaszany, lub <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> wyłączenie przekroczeń limitu czasu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> Właściwość definiuje domyślny interwał limitu czasu dla skompilowanego wyrażenia regularnego. Ta wartość reprezentuje przybliżony ilość czasu, które skompilowane wyrażenie regularne spowodują wykonanie jednej operacji dopasowywania, zanim upłynie limit czasu operacji, i zgłasza aparat wyrażeń regularnych <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> wyjątek podczas jego następnego sprawdzania czasu.  
  
> [!IMPORTANT]
>  Firma Microsoft zaleca, zawsze wartość domyślną wartość limitu czasu dla skompilowanego wyrażenia regularnego. Konsumenci biblioteki wyrażenia regularnego można zastąpić tę wartość limitu czasu przez przekazanie <xref:System.TimeSpan> wartość, która reprezentuje nowy interwał limitu czasu do konstruktora klasy skompilowane wyrażenie regularne.  
  
 Domyślna wartość limitu czasu, aby można przypisać <xref:System.Text.RegularExpressions.RegexCompilationInfo> obiektu w dowolnym z następujących sposobów:  
  
-   Przez wywołanie metody <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> metody, a także reprezentację ciągu <xref:System.TimeSpan> wartość właściwości "REGEX_DEFAULT_MATCH_TIMEOUT".  
  
-   Przez wywołanie metody <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> Konstruktor i podanie wartości dla `matchTimeout` parametru.  
  
-   Ustawiając wartość tej właściwości.  
  
 Aby ustawić interwał limitu czasu uzasadnione, należy wziąć pod uwagę następujące czynniki:  
  
-   Długość i złożoność wzorca wyrażenia regularnego. Dłużej i bardziej złożonych wyrażeń regularnych wymagają więcej czasu niż te krótsze i łatwiejsze.  
  
-   Maszyny oczekiwanego obciążenia. Przetwarzanie zajmuje więcej czasu w systemach z wysokim użyciem Procesora i pamięci.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano pojedynczego skompilowane wyrażenie regularne o nazwie `DuplicateChars` określający co najmniej dwóch wystąpień takiego samego znaku w ciągu wejściowym. Skompilowane wyrażenie regularne ma domyślny limit czasu 2 sekundy. Podczas wykonywania przykład tworzy bibliotekę klas o nazwie RegexLib.dll zawierający skompilowane wyrażenie regularne.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Definicję wzorca wyrażenia regularnego `(\w)\1+` jest zdefiniowany jak pokazano w poniższej tabeli.  
  
|Wzorzec|Opis|  
|-------------|-----------------|  
|`(\w)`|Dopasowuje dowolny znak słowa i przypisz je do pierwszej grupy przechwytywania.|  
|`\1+`|Dopasowuje jeden lub więcej wystąpień wartość pierwszej przechwyconej grupy.|  
  
 W poniższym przykładzie użyto `DuplicatedChars` wyrażenie regularne, aby zidentyfikować zduplikowane znaki w tablicy ciągów. Kiedy wywołuje `DuplicatedChars` konstruktora, zmienia się.5 sekund limitu czasu.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę typu, który reprezentuje skompilowane wyrażenie regularne.</summary>
        <value>Nazwa nowego typu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> Klasa jest używana do definiowania skompilowanego wyrażenia regularnego, który jest reprezentowany jako klasą pochodną <xref:System.Text.RegularExpressions.Regex>. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> Właściwość definiuje nazwę klasy tego typu wyrażenia regularnego i <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> i <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> właściwości razem definiują jego w pełni kwalifikowana nazwa.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość tej właściwości jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Wartość tej właściwości jest ciągiem pustym.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obszar nazw, do której należy nowego typu.</summary>
        <value>Przestrzeń nazw nowego typu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> Klasa jest używana do definiowania skompilowanego wyrażenia regularnego, który jest reprezentowany jako klasą pochodną <xref:System.Text.RegularExpressions.Regex>. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> Właściwość definiuje obszar nazw, który zawiera typ skompilowanego wyrażenia regularnego i <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> i <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> właściwości razem definiują jego w pełni kwalifikowana nazwa.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość tej właściwości jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opcje do użycia podczas kompilowania wyrażeń regularnych.</summary>
        <value>Bitowe połączenie wartości wyliczenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Metoda generuje zestaw zawierający skompilowane wyrażenia regularne. W związku z tym, nie trzeba określać <xref:System.Text.RegularExpressions.RegexOptions.Compiled> jako jedna z wartości tej właściwości. Jeśli jest obecny, <xref:System.Text.RegularExpressions.RegexOptions.Compiled> opcja jest ignorowana.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wyrażenia regularnego, skompilować.</summary>
        <value>Wyrażenie regularne, aby skompilować.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> Właściwość może zawierać dowolne prawidłowe wyrażenie regularne. Jeśli wartość <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> właściwość nie jest wzorzec wyrażenia regularnego poprawnych składniowo, wywołanie <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> metoda zgłasza wyjątek <xref:System.ArgumentException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość tej właściwości jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">.NET Framework — Wyrażenia regularne</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Elementy języka wyrażeń regularnych</related>
      </Docs>
    </Member>
  </Members>
</Type>