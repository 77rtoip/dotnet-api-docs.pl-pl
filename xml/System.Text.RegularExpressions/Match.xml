<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1ae3d1a8366308d45ec74411563c61beaaa5c316" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69144955" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Przedstawia wyniki z pojedynczego wyrażenia regularnego dopasowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Match> Obiekt jest niezmienny i nie ma konstruktora publicznego. Wystąpienie <xref:System.Text.RegularExpressions.Match> klasy jest zwracane <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> przez metodę i reprezentuje pierwsze dopasowanie do wzorca w ciągu. Kolejne dopasowania są reprezentowane przez <xref:System.Text.RegularExpressions.Match> obiekty zwracane <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> przez metodę. Dodatkowo <xref:System.Text.RegularExpressions.MatchCollection> obiekt, który składa się z zero, jeden lub więcej <xref:System.Text.RegularExpressions.Match> <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> obiektów jest zwracany przez metodę.  
  
 Jeśli metoda nie pasuje do wzorca wyrażenia regularnego w ciągu wejściowym, zwraca pusty <xref:System.Text.RegularExpressions.MatchCollection> obiekt. <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> Następnie można użyć `foreach` konstrukcji w C# lub `For Each` konstrukcji w Visual Basic, aby wykonać iterację kolekcji.  
  
 Jeśli metoda nie jest zgodna ze wzorcem wyrażenia regularnego, <xref:System.Text.RegularExpressions.Match> zwraca <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>obiekt, który jest równy. <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> Możesz użyć <xref:System.Text.RegularExpressions.Group.Success%2A> właściwości, aby określić, czy dopasowanie zakończyło się pomyślnie. Poniższy przykład stanowi ilustrację.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 Jeśli dopasowanie wzorca zakończyło się pomyślnie <xref:System.Text.RegularExpressions.Capture.Value%2A> , właściwość zawiera dopasowany podciąg <xref:System.Text.RegularExpressions.Capture.Index%2A> , właściwość wskazuje pozycję początkową w ciągu <xref:System.Text.RegularExpressions.Capture.Length%2A> wejściowym liczonym od zera, a właściwość wskazuje Długość dopasowanego podciągu w ciągu wejściowym.  
  
 Ponieważ pojedyncze dopasowanie może dotyczyć wielu grup przechwytywania, <xref:System.Text.RegularExpressions.Match> <xref:System.Text.RegularExpressions.Match.Groups%2A> ma właściwość, która zwraca <xref:System.Text.RegularExpressions.GroupCollection>. Samo wystąpienie jest odpowiednikiem pierwszego obiektu w kolekcji, w `Match.Groups[0]` (`Match.Groups(0)` w Visual Basic), który reprezentuje całe dopasowanie. <xref:System.Text.RegularExpressions.Match> Możesz uzyskać dostęp do przechwyconych grup w dopasowaniu w następujący sposób:  
  
-   Można wykonać iterację <xref:System.Text.RegularExpressions.GroupCollection> elementów członkowskich obiektu za `foreach` pomocą konstrukcji (C#) lub `For Each` (Visual Basic).  
  
-   Możesz użyć <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> właściwości, aby pobrać grupy według liczby grup przechwytywania. Należy pamiętać, że można określić, które grupy numerowane znajdują się w wyrażeniu regularnym, wywołując metodę wystąpienia <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> .  
  
-   Możesz użyć <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> właściwości, aby pobrać grupy według nazwy grupy przechwytywania. Należy pamiętać, że można określić, które nazwane grupy są obecne w wyrażeniu regularnym przez <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> wywołanie metody wystąpienia.  
  
   
  
## Examples  
 W poniższych przykładach użyto wyrażenia `Console\.Write(Line)?`regularnego. Wyrażenie regularne jest interpretowane w następujący sposób:  
  
|||  
|-|-|  
|Konsola\\programu. Prawem|Dopasowuje ciąg "Console. Write". Należy zauważyć, że znak "." jest wyprowadzany w taki sposób, aby był interpretowany jako okres literału, a nie jako symbol wieloznaczny, który pasuje do dowolnego znaku.|  
|(Wiersz)?|Dopasowanie do zera lub jednego wystąpienia ciągu "line".|  
  
 **Przykład 1**  
  
 Poniższy przykład wywołuje metodę, <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> aby pobrać wszystkie dopasowania wzorców w ciągu wejściowym. Następnie iteruje <xref:System.Text.RegularExpressions.Match> obiekty w zwracanym <xref:System.Text.RegularExpressions.MatchCollection> obiekcie, aby wyświetlić informacje na temat każdego dopasowania.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **Przykład 2**  
  
 Poniższy przykład wywołuje <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> metody i <xref:System.Text.RegularExpressions.Match.NextMatch%2A> , aby pobrać jedno dopasowanie jednocześnie.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pustą grupę. Wszystkie nieudane dopasowania zwracają te puste dopasowanie.</summary>
        <value>Puste dopasowanie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość nie powinna służyć do określenia, czy dopasowanie zakończy się pomyślnie. Zamiast tego należy użyć `Match.Success` właściwości (która jest dziedziczona z <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję grup dopasowaną przez wyrażenie regularne.</summary>
        <value>Grupy znaków dopasowane przez wzorzec.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wzorzec wyrażenia regularnego może zawierać podwyrażenia, które są definiowane przez zawrzeć część wzorca wyrażenia regularnego w nawiasach. Każde takie Podwyrażenie tworzy grupę. <xref:System.Text.RegularExpressions.Match.Groups%2A> Właściwość zapewnia dostęp do informacji o tych podwyrażeniach. Na przykład wzorzec `(\d{3})-(\d{3}-\d{4})`wyrażenia regularnego, który dopasowuje numery telefonów Ameryki Północnej, ma dwa Podwyrażenie. Pierwszy składa się z kodu obszaru, który składa pierwsze trzy cyfry numeru telefonu. Ta grupa jest przechwytywana przez pierwszą część wyrażenia `(\d{3})`regularnego. Drugi składa się z pojedynczego numeru telefonu, który składa się z ostatnich siedmiu cyfr numeru telefonu. Ta grupa jest przechwytywana przez drugą część wyrażenia `(\d{3}-\d{4})`regularnego. Te dwie grupy można następnie pobrać z <xref:System.Text.RegularExpressions.GroupCollection> obiektu, który jest zwracany <xref:System.Text.RegularExpressions.Match.Groups%2A> przez właściwość, jak pokazano w poniższym przykładzie.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <xref:System.Text.RegularExpressions.GroupCollection> Obiekt zwrócony<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> przez właściwość jest obiektem kolekcji liczonym od zera, który zawsze ma co najmniej jeden element członkowski. Jeśli aparat wyrażeń regularnych nie może znaleźć żadnych dopasowań w konkretnym ciągu wejściowym <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> , właściwość pojedynczego <xref:System.Text.RegularExpressions.Group> obiektu w kolekcji (obiekt pod indeksem 0) <xref:System.Text.RegularExpressions.Group> jest ustawiona na `false` , a obiekt <xref:System.Text.RegularExpressions.Capture.Value%2A>właściwość jest ustawiona na <xref:System.String.Empty?displayProperty=nameWithType>. Jeśli aparat wyrażeń regularnych może znaleźć dopasowanie, pierwszy element <xref:System.Text.RegularExpressions.GroupCollection> obiektu (element pod indeksem 0) zwracany <xref:System.Text.RegularExpressions.Match.Groups%2A> przez właściwość zawiera ciąg, który jest zgodny z całym wzorcem wyrażenia regularnego. Każdy kolejny element, od indeksu jeden do góry, reprezentuje przechwyconą grupę, jeśli wyrażenie regularne zawiera grupy przechwytywania. Aby uzyskać więcej informacji, zobacz sekcję "Konstrukcje grupujące i obiekty wyrażeń regularnych" w artykule [konstrukcje grupujące](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) .  
  
   
  
## Examples  
 Poniższy przykład próbuje dopasować wzorzec wyrażenia regularnego z przykładowym ciągiem. W przykładzie użyta <xref:System.Text.RegularExpressions.Match.Groups%2A> jest właściwość do przechowywania informacji pobieranych przez dopasowanie na potrzeby wyświetlania do konsoli.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca nowy <see cref="T:System.Text.RegularExpressions.Match" /> obiekt z wynikami dla następnego dopasowania, rozpoczynając od położenia, od którego zostało zakończone ostatnie dopasowanie (znak po ostatnim dopasowanym znaku).</summary>
        <returns>Następne wyrażenie regularne jest zgodne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest podobna do wywoływania <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> i przekazywania (`Index+Length`) jako nowej pozycji początkowej.  
  
> [!NOTE]
>  Ta metoda nie modyfikuje bieżącego wystąpienia. Zamiast tego zwraca nowy <xref:System.Text.RegularExpressions.Match> obiekt, który zawiera informacje o następnym dopasowaniu.  
  
 Próba pobrania następnego dopasowania może zgłosić <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> , jeśli limit czasu dla zgodnych operacji jest obowiązujący, a próba znalezienia następnego dopasowania przekracza limit czasu.  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano <xref:System.Text.RegularExpressions.Match.NextMatch%2A> metodę, aby przechwycić dopasowania wyrażenia regularnego poza pierwszym dopasowaniem.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Przekroczono limit czasu.</exception>
        <block subset="none" type="usage"><para>Gdy próba dopasowania jest powtórzona przez wywołanie metody <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> , aparat wyrażeń regularnych daje puste dopasowanie do specjalnego traktowania. <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> Zwykle rozpoczyna wyszukiwanie następnego dopasowania dokładnie wtedy, gdy poprzednie dopasowanie zostało pozostawione. Jednak po pustym dopasowaniu <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> Metoda postępuje o jeden znak przed próbą kolejnego dopasowania. To zachowanie gwarantuje, że aparat wyrażeń regularnych będzie postępować przez ciąg. W przeciwnym razie, ponieważ puste dopasowanie nie powoduje żadnego ruchu do przodu, kolejne dopasowanie zostanie uruchomione w dokładnie tym samym miejscu co poprzednie dopasowanie i będzie wielokrotnie zgodne z tym samym pustym ciągiem.  
  
Poniższy przykład stanowi ilustrację. Wzorzec wyrażenia regularnego <c>a *</c> wyszukuje zero lub więcej wystąpień litery "a" w ciągu "abaabb". Ponieważ dane wyjściowe z przykładu są widoczne, wyszukiwanie znajdzie sześć dopasowań. Pierwsza próba dopasowania powoduje znalezienie pierwszego "a". Drugie dopasowanie zaczyna się dokładnie wtedy, gdy pierwsze dopasowanie zostanie zakończone przed pierwszym b; znajduje zero wystąpień elementu "a" i zwraca pusty ciąg. Trzecie dopasowanie nie zaczyna się dokładnie w miejscu zakończenia drugiego dopasowania, ponieważ drugie dopasowanie zwróciło pusty ciąg. Zamiast tego rozpoczyna jeden znak później, po pierwszym "b". Trzeci odpowiednik znajduje dwa wystąpienia elementu "a" i zwraca wartość "AA". Próba czwartego dopasowania rozpoczyna się od zakończenia trzeciego dopasowania przed drugim "b" i zwraca pusty ciąg. Próba piątego dopasowania spowoduje ponowne naliczenie pierwszego znaku, tak aby zaczynał się przed trzeci "b" i zwraca pusty ciąg. Szóste dopasowanie rozpoczyna się po ostatnim znaku "b" i ponownie zwraca pusty ciąg.  
  
[!code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [!code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">Wzorzec wymiany do użycia.</param>
        <summary>Zwraca rozszerzenie określonego wzorca zastępczego.</summary>
        <returns>Rozwinięta wersja <paramref name="replacement" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Natomiast metoda zastępuje wszystkie dopasowania w ciągu wejściowym z określonym wzorcem zastępującym <xref:System.Text.RegularExpressions.Match.Result%2A> , metoda zastępuje pojedyncze dopasowanie z określonym wzorcem zastępczym. <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> Ponieważ działa on w ramach poszczególnych odpowiedników, możliwe jest również przeprowadzenie przetwarzania w dopasowanym ciągu przed wywołaniem <xref:System.Text.RegularExpressions.Match.Result%2A> metody.  
  
 `replacement` Parametr jest standardowym wzorcem wyrażenia regularnego. Może składać się z znaków literału i podstawienia wyrażenia regularnego. Aby uzyskać więcej informacji, [](~/docs/standard/base-types/substitutions-in-regular-expressions.md)Zobacz podstawianie.  
  
   
  
## Examples  
 Poniższy przykład zastępuje łączniki zaczynające się i kończące wyrażenie ujęte w nawiasy.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 Wzorzec `--(.+?)--` wyrażenia regularnego jest interpretowany jak pokazano w poniższej tabeli.  
  
|Wzorzec|Opis|  
|-------------|-----------------|  
|`--`|Dopasowuje dwa łączniki.|  
|`(.+?)`|Dopasowuje dowolny znak jeden lub więcej razy, ale tyle razy, ile to możliwe. Jest to pierwsza grupa przechwytywania.|  
|`--`|Dopasowuje dwa łączniki.|  
  
 Należy zauważyć, że wzorzec `--(.+?)--` wyrażenia regularnego używa `+?`kwantyfikatora z opóźnieniem. Jeśli zamiast tego użyto kwantyfikatora `+` zachłanne, aparat wyrażeń regularnych odnajdzie tylko jedno dopasowanie w ciągu wejściowym.  
  
 Ciąg `($1)` zastępujący zastępuje dopasowanie do pierwszej przechwyconej grupy, która jest ujęta w nawiasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="replacement" />jest <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Rozszerzanie jest niedozwolone dla tego wzorca.</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">Zastępstwa</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="inner">Wyrażenie regularne jest zgodne z oczekiwanym.</param>
        <summary><see cref="T:System.Text.RegularExpressions.Match" /> Zwraca wystąpienie równoważne dostarczonemu z tym, które jest odpowiednie do współdzielenia między wiele wątków.</summary>
        <returns>Dopasowanie wyrażenia regularnego, które jest odpowiednie do udostępniania między wieloma wątkami.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inner" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
