<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7bd3cccac8dcf1dc1ebd2bd1454ae68b76101fc1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37755151" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje wyniki z pojedynczego wyrażenia regularnego dopasowanie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Match> Obiektu jest niemodyfikowalna i nie ma publicznego konstruktora. Wystąpienie <xref:System.Text.RegularExpressions.Match> klasy jest zwracany przez <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> metody i reprezentuje definicję wzorca pierwszego dopasowania w ciągu. Kolejne dopasowania są reprezentowane przez <xref:System.Text.RegularExpressions.Match> obiektów zwróconych przez <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> metody. Ponadto <xref:System.Text.RegularExpressions.MatchCollection> obiekt, który składa się z zero, co najmniej jeden <xref:System.Text.RegularExpressions.Match> obiektów jest zwracany przez <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> metody.  
  
 Jeśli <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> metoda nie powiedzie się dopasować wzorzec wyrażenia regularnego w ciągu wejściowym, zwracana jest pusta <xref:System.Text.RegularExpressions.MatchCollection> obiektu. Następnie można użyć `foreach` konstruowania w języku C# lub `For Each` konstruowania w języku Visual Basic do iteracji kolekcji.  
  
 Jeśli <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> metoda nie pasuje do wzorca wyrażenia regularnego, zwraca <xref:System.Text.RegularExpressions.Match> obiektu, który jest równy <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>. Możesz użyć <xref:System.Text.RegularExpressions.Group.Success%2A> właściwości w celu określenia, czy dopasowanie zakończyło się pomyślnie. Poniższy przykład stanowi ilustrację.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 Jeśli operacja się powiedzie, dopasowania do wzorca <xref:System.Text.RegularExpressions.Capture.Value%2A> właściwość zawiera dopasowanego podciągu <xref:System.Text.RegularExpressions.Capture.Index%2A> właściwość wskazuje liczony od zera pozycja początkowa dopasowanego podciągu w ciągu wejściowym i <xref:System.Text.RegularExpressions.Capture.Length%2A> właściwość wskazuje Długość dopasowanego podciągu w ciągu wejściowym.  
  
 Ponieważ pojedyncze dopasowanie może obejmować wiele grup przechwytywania, <xref:System.Text.RegularExpressions.Match> ma <xref:System.Text.RegularExpressions.Match.Groups%2A> właściwość, która zwraca <xref:System.Text.RegularExpressions.GroupCollection>. <xref:System.Text.RegularExpressions.Match> Samego wystąpienia jest odpowiednikiem pierwszy obiekt w kolekcji, w `Match.Groups[0]` (`Match.Groups(0)` w języku Visual Basic), która reprezentuje całego dopasowania. Aby uzyskać dostęp przechwyconych grup w dopasowania w następujący sposób:  
  
-   Można wykonać iterację członkowie <xref:System.Text.RegularExpressions.GroupCollection> obiektu za pomocą `foreach` (C#) lub `For Each` konstrukcji (Visual Basic).  
  
-   Możesz użyć <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> właściwości do pobrania grup z numerem grupy przechwytywania. Należy pamiętać, że można określić numerowanej grupy, które są obecne w wyrażeniu regularnym przez wywołanie metody wystąpienia <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> metody.  
  
-   Możesz użyć <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> właściwość służąca do pobierania grup według nazwy grupy przechwytywania. Należy pamiętać, że można określić nazwanej grupy, które są obecne w wyrażeniu regularnym przez wywołanie metody wystąpienia <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 W poniższych przykładach użyto wyrażenia regularnego `Console\.Write(Line)?`. Wyrażenia regularnego jest interpretowany w następujący sposób:  
  
|||  
|-|-|  
|Konsola\\. Zapis|Pasuje do ciągu "Console.Write —". Należy pamiętać, że "." znaków została zmieniona tak, aby był interpretowany jako literał okres, a nie jako symbolu wieloznacznego, który dopasowuje dowolny znak.|  
|(Wiersz)?|Dopasowuje zero lub jeden wystąpienie ciągu "Wiersz".|  
  
 **Przykład 1**  
  
 Poniższy przykład wywołuje <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> metodę, aby pobrać wszystkie dopasowania do wzorca w ciągu wejściowym. Następnie iterację <xref:System.Text.RegularExpressions.Match> obiektów w zwróconym elemencie <xref:System.Text.RegularExpressions.MatchCollection> obiektu do wyświetlenia informacji na temat każdego dopasowania.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **Przykład 2**  
  
 Poniższy przykład wywołuje <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> i <xref:System.Text.RegularExpressions.Match.NextMatch%2A> metody pobierania jedno dopasowanie w danym momencie.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pustej grupy. Wszystkie nieudane dopasowania zwracać ten pusty dopasowania.</summary>
        <value>Pusty dopasowanie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej właściwości nie powinny służyć do określenia, czy dopasowanie jest pomyślne. Zamiast tego należy użyć `Match.Success` właściwości (dziedziczoną z <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję grup dopasowane przez wyrażenia regularne.</summary>
        <value>Grupy znaków pasuje wzorzec.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wzorzec wyrażenia regularnego może obejmować podwyrażenia, które są zdefiniowane, umieszczając część wzorca wyrażenia regularnego w nawiasach. Co takiego Podwyrażenie tworzy grupę. <xref:System.Text.RegularExpressions.Match.Groups%2A> Właściwość zapewnia dostęp do informacji o tych Podwyrażenie dopasowuje. Na przykład wzorzec wyrażenia regularnego `(\d{3})-(\d{3}-\d{4})`, który dopasowuje numery telefonów w Ameryce Północnej, ma dwa podwyrażenia. Pierwszy zawiera numer kierunkowy, który komponuje się pierwsze trzy cyfry numeru telefonu. Ta grupa jest przechwytywany przez pierwszą część wyrażenia regularnego `(\d{3})`. Drugi zawiera numer telefonu indywidualnych, który komponuje się siedem ostatnich cyfr numeru telefonu. Ta grupa jest przechwytywany przez drugi część wyrażenia regularnego `(\d{3}-\d{4})`. Następnie można pobrać tych dwóch grup z <xref:System.Text.RegularExpressions.GroupCollection> obiektu, który jest zwracany przez <xref:System.Text.RegularExpressions.Match.Groups%2A> właściwości, co ilustruje poniższy przykład.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <xref:System.Text.RegularExpressions.GroupCollection> Obiektu zwróconego przez <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> właściwości jest obiektem kolekcji liczony od zera, która zawsze ma co najmniej jednego członka. Jeśli aparat wyrażeń regularnych nie może znaleźć dopasowań w określonym ciągu wejściowego <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> właściwości pojedynczej precyzji <xref:System.Text.RegularExpressions.Group> obiektu w kolekcji (obiekt pod indeksem 0) jest ustawiona na `false` i <xref:System.Text.RegularExpressions.Group> obiektu <xref:System.Text.RegularExpressions.Capture.Value%2A>właściwość jest ustawiona na <xref:System.String.Empty?displayProperty=nameWithType>. Jeśli aparat wyrażeń regularnych można znaleźć dopasowania, pierwszy element <xref:System.Text.RegularExpressions.GroupCollection> (element pod indeksem 0) obiektu zwróconego przez <xref:System.Text.RegularExpressions.Match.Groups%2A> właściwość zawiera ciąg, który pasuje do wzorca całego wyrażenia regularnego. Z indeksu, jeden każdego kolejnego elementu w górę, reprezentuje grupę przechwyconych w Jeśli wyrażenie regularne zawiera grupy przechwytywania. Aby uzyskać więcej informacji, zobacz sekcję "Grupowanie konstrukcji i regularnego wyrażenia obiekty" [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) artykułu.  
  
   
  
## Examples  
 Poniższy przykład próbuje dopasować wzorzec wyrażenia regularnego względem to przykładowy ciąg. W przykładzie użyto <xref:System.Text.RegularExpressions.Match.Groups%2A> właściwość do przechowywania informacji, które są pobierane przez dopasowanie do wyświetlenia w konsoli.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca nowy <see cref="T:System.Text.RegularExpressions.Match" /> obiekt z wynikami dla następnego dopasowania, zaczynając od pozycji jaką ostatniego dopasowania zakończył się (na znak po ostatni dopasowany znak).</summary>
        <returns>Dalej dopasowanie wyrażenia regularnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest podobna do wywoływania <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> ponownie i zakończone powodzeniem (`Index+Length`) jako nową pozycję początkową.  
  
> [!NOTE]
>  Ta metoda nie powoduje modyfikacji bieżącego wystąpienia. Zamiast tego zwraca nowy <xref:System.Text.RegularExpressions.Match> obiektu, który zawiera informacje dotyczące następnego dopasowania.  
  
 Próby pobrania następnego dopasowania może zgłaszać <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Jeśli wartość limitu czasu dla operacji dopasowywania jest aktywna i próba Znajdź następny dopasowanie przekroczy ten interwał limitu czasu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Text.RegularExpressions.Match.NextMatch%2A> metody do przechwytywania wyrażenia regularnego dopasowuje poza pierwsze dopasowanie.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Upłynął limit czasu.</exception>
        <block subset="none" type="usage">
          <para>Podczas próby dopasowania jest powtarzany, wywołując <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> metody, aparat wyrażeń regularnych zapewnia pusty dopasowania specjalnego traktowania. Zazwyczaj <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> rozpocznie się wyszukiwanie następnego dopasowania dokładnie tam, gdzie poprzednie dopasowanie przerwaliśmy. Jednak po dopasowaniu pusty <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> metody jest przesuwany o jeden znak przed podjęciem próby następnego dopasowania. Takie zachowanie gwarantuje, że aparat wyrażeń regularnych będzie postęp za pomocą ciągu. W przeciwnym razie dopasowanie pusty, nie powoduje żadnych przenoszenia do przodu, następnego dopasowania zaczyna się w tym samym miejscu, co poprzednie dopasowanie dlatego byłby on zgodny z tym samym pustym ciągiem wielokrotnie.  Poniższy przykład stanowi ilustrację. Definicję wzorca wyrażenia regularnego <c>*</c> wyszukuje zero lub więcej wystąpień litery "a" w ciągu "abaabb". Dane wyjściowe z przykładu pokazują, wyszukiwania umożliwia znalezienie sześć dopasowań. Pierwsza próba dopasowania znajdzie pierwszy "". Drugi rozpoczyna się dopasowanie, gdzie pierwszy identyczne kończy się przed pierwszym b; znajdzie zero wystąpienia znaku "a" i zwraca pusty ciąg. Trzeci dopasowanie nie rozpoczyna się dokładnie gdzie drugi dopasowanie zakończyło się, ponieważ drugi dopasowanie zwrócił pusty ciąg. Zamiast tego należy go rozpoczyna się o jeden znak później, po pierwszym "b". Trzeci dopasowanie znajduje dwa wystąpienia znaku "a" i zwraca "aa". Czwarty próby dopasowania rozpoczyna się, gdzie trzeci dopasowanie zakończyło się przed drugim "b" i zwraca pusty ciąg. Piąty próby dopasowania ponownie przechodzi jeden znak, który rozpoczyna się przed trzeci "b" i zwraca pusty ciąg. Szósty dopasowanie rozpoczyna się po ostatnim "b" i ponownie zwraca pusty ciąg.  [! code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [! code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">Wzorzec zamieniania do użycia.</param>
        <summary>Zwraca rozszerzenie wzorzec zamieniania określony.</summary>
        <returns>Rozszerzona wersja <paramref name="replacement" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Natomiast <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> metoda zastępuje wszystkie dopasowania w ciągu wejściowym, wzorcu zamieniania znak określony <xref:System.Text.RegularExpressions.Match.Result%2A> metoda zastępuje pojedynczego dopasowania wzorca zamieniania określony. Ponieważ działa w poszczególnych dopasowania, istnieje również możliwość przeprowadzania przetwarzania dopasowany ciąg przed wywołaniem <xref:System.Text.RegularExpressions.Match.Result%2A> metody.  
  
 `replacement` Parametr jest wzorzec zamieniania standardowego wyrażenia regularnego. Może składać się znaki literału i podstawienia wyrażenia regularnego. Aby uzyskać więcej informacji, zobacz [podstawienia](~/docs/standard/base-types/substitutions-in-regular-expressions.md).  
  
   
  
## Examples  
 Poniższy przykład zastępuje łączniki, które zaczynają się i kończą w nawiasach wyrażenia w nawiasach.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 Definicję wzorca wyrażenia regularnego `--(.+?)--` jest interpretowane tak jak pokazano w poniższej tabeli.  
  
|Wzorzec|Opis|  
|-------------|-----------------|  
|`--`|Dopasowuje dwa łączniki.|  
|`(.+?)`|Dopasowuje dowolny znak jeden lub więcej razy, ale jak tyle razy, ile to możliwe. Jest to pierwsza grupa przechwytywania.|  
|`--`|Dopasowuje dwa łączniki.|  
  
 Należy pamiętać, że wzorzec wyrażenia regularnego `--(.+?)--` korzysta z kwantyfikatorem opóźniającym `+?`. Jeśli zachłanne kwantyfikator `+` były używane zamiast tego aparat wyrażeń regularnych może być tylko pojedyncze dopasowanie w ciągu wejściowym.  
  
 Ciąg zastępujący `($1)` zamienia dopasowanie pierwszej przechwyconej grupy, który jest ujęty w nawiasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="replacement" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Rozszerzenie nie jest dozwolone dla tego wzoru.</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner">Wyrażenie regularne dopasowuje wersją oczekiwaną wartość równoważna.</param>
        <summary>Zwraca <see cref="T:System.Text.RegularExpressions.Match" /> odpowiednikiem dostarczonego wystąpienia, które jest odpowiednie do udostępniania między wieloma wątkami.</summary>
        <returns>Dopasowanie wyrażenia regularnego, który jest odpowiedni do udostępniania między wieloma wątkami.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inner" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>