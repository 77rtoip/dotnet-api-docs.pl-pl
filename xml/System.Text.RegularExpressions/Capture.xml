<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6bd094fcd16b7f605955b6f1e9e71ca2a9b2584a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408312" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="VB.NET" Value="Public Class Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Capture" />
  <TypeSignature Language="F#" Value="type Capture = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje wyniki przechwytywania pojedynczego Podwyrażenie powiodło się.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Text.RegularExpressions.Capture> obiektu jest niemodyfikowalna i nie ma publicznego konstruktora. Wystąpienia są zwracane przez <xref:System.Text.RegularExpressions.CaptureCollection> obiektu, który jest zwracany przez `Match.Captures` i <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> właściwości. Jednak `Match.Captures` właściwość zawiera informacje o tym samym dopasowania jako <xref:System.Text.RegularExpressions.Match> obiektu.  
  
 Jeśli nie mają zastosowania do przechwytywania grupy <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> zwraca <xref:System.Text.RegularExpressions.CaptureCollection> za pomocą jednej <xref:System.Text.RegularExpressions.Capture> obiektu, który zawiera informacje o tym samym przechwytywania jako <xref:System.Text.RegularExpressions.Group> obiektu. W przypadku zastosowania kwantyfikatora do przechwytywania grupy `Group.Index`, `Group.Length`, i `Group.Value` właściwości zapewniają informacje tylko o ostatniej przechwyconej grupy, podczas gdy <xref:System.Text.RegularExpressions.Capture> obiekty w <xref:System.Text.RegularExpressions.CaptureCollection> zawierają informacje o wszystkich Przechwytuje Podwyrażenie. Przykład stanowi ilustrację.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano wyrażenia regularnego odpowiadający zdania zawierające nie znaków interpunkcyjnych z wyjątkiem okres (".").  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 Wzorzec wyrażenia regularnego `((\w+)[\s.])+` jest zdefiniowany, jak pokazano w poniższej tabeli. Należy pamiętać, że w tym wyrażeniu regularnym kwantyfikator (+) jest stosowane do całego wyrażenia regularnego.  
  
|Wzorzec|Opis|  
|-------------|-----------------|  
|`(\w+)`|Dopasowuje co najmniej jeden znak słowa. Jest to druga grupa przechwytywania.|  
|`[\s.])`|Zgodne biały znak oraz kropki (".").|  
|`((\w+)[\s.])`|Zgodne z co najmniej jeden znak word następuje biały znak lub okres ("."). Jest to pierwsza grupa przechwytywania.|  
|`((\w+)[\s.])+`|Odpowiada jedno lub więcej wystąpień znak słowa lub znaków, a następnie biały znak lub okres (".").|  
  
 W tym przykładzie ciąg wejściowy zawiera dwa zdania. Jako dane wyjściowe zawierają, zdanie pierwsze składa się tylko jedno słowo, więc <xref:System.Text.RegularExpressions.CaptureCollection> obiekt ma jeden <xref:System.Text.RegularExpressions.Capture> obiekt, który reprezentuje tego samego przechwytywania jako <xref:System.Text.RegularExpressions.Group> obiektu. Drugie zdanie składa się z wielu wyrazów, więc <xref:System.Text.RegularExpressions.Group> obiektów tylko zawierają informacje o ostatnim Podwyrażenie dopasowany. Grupy 1, która reprezentuje pierwszy przechwytywania, zawiera wyraz ostatniej zdanie, który ma okres zamknięcia. Grupa 2, reprezentujący drugi przechwytywania zawiera wyraz ostatniej zdanie. Jednak <xref:System.Text.RegularExpressions.Capture> obiekty z grupy <xref:System.Text.RegularExpressions.CaptureCollection> obiektu przechwytywania każdym dopasowaniu wyrażenia podrzędnego. <xref:System.Text.RegularExpressions.Capture> Obiektów w kolekcji pierwszej grupy przechwytywania przechwytywania zawierają informacje o każdej word przechwycony i biały znak lub okres. <xref:System.Text.RegularExpressions.Capture> Obiektów w drugiej grupy przechwytywania kolekcji przechwytywania zawierają informacje dotyczące każdego wyrazu przechwycony.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pozycja w oryginalnego ciągu, gdzie znajduje się pierwszy znak przechwyconych podciąg.</summary>
        <value>Liczony od zera pozycja początkowa w oryginalnym ciągu wykryto przechwyconych podciąg.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera długość przechwyconych podciąg.</summary>
        <value>Długość przechwyconych podciąg.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="capture.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera przechwyconych podciąg z ciągu wejściowego wywołując <see cref="P:System.Text.RegularExpressions.Capture.Value" /> właściwości.</summary>
        <returns>Podciąg został przechwycony przez dopasowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToString` jest rzeczywiście wywołaniem wewnętrznym do <xref:System.Text.RegularExpressions.Capture.Value%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera przechwyconych podciąg z ciągu wejściowego.</summary>
        <value>Podciąg przechwycony przez dopasowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wywołanie <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> lub <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> — metoda nie znaleziono dopasowania, wartość zwracana `Match.Value` jest właściwość <xref:System.String.Empty?displayProperty=nameWithType>. Jeśli aparat wyrażeń regularnych nie można dopasować przechwytywania grupy. Wartość zwracana `Group.Value` jest właściwość <xref:System.String.Empty?displayProperty=nameWithType>. Zobacz drugi przykład ilustracji.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano wyrażenia regularnego odpowiadający zdania zawierające nie znaków interpunkcyjnych z wyjątkiem okres ("."). `Match.Value` Właściwości zawiera ciąg wynik, który składa się z dopasowanych zdania, dla każdego dopasowania. `Group.Value` Właściwość wskazuje ciąg wyniku dla każdej grupy przechwytywania; składa się z ostatnim ciągu przechwycone przez tę grupę przechwytywania. <xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=nameWithType> Właściwości zawiera ciąg wyniku dla każdego przechwytywania.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 Wzorzec wyrażenia regularnego `((\w+)[\s.])+` jest zdefiniowany, jak pokazano w poniższej tabeli. Należy pamiętać, że w tym wyrażeniu regularnym kwantyfikator (+) jest stosowane do całego wyrażenia regularnego.  
  
|Wzorzec|Opis|  
|-------------|-----------------|  
|`(\w+)`|Dopasowuje co najmniej jeden znak słowa. Jest to druga grupa przechwytywania.|  
|`[\s.])`|Zgodne biały znak oraz kropki (".").|  
|`((\w+)[\s.])`|Zgodne z co najmniej jeden znak word następuje biały znak lub okres ("."). Jest to pierwsza grupa przechwytywania.|  
|`((\w+)[\s.])+`|Odpowiada jedno lub więcej wystąpień znak słowa lub znaków, a następnie biały znak lub okres (".").|  
  
 W tym przykładzie ciąg wejściowy zawiera dwa zdania. Jako dane wyjściowe zawierają, zdanie pierwsze składa się tylko jedno słowo, więc <xref:System.Text.RegularExpressions.CaptureCollection> obiekt ma jeden <xref:System.Text.RegularExpressions.Capture> obiekt, który reprezentuje tego samego przechwytywania jako <xref:System.Text.RegularExpressions.Group> obiektu. Drugie zdanie składa się z wielu wyrazów, więc <xref:System.Text.RegularExpressions.Group> obiektów tylko zawierają informacje o ostatnim Podwyrażenie dopasowany. Grupy 1, która reprezentuje pierwszy przechwytywania, zawiera wyraz ostatniej zdanie, który ma okres zamknięcia. Grupa 2, reprezentujący drugi przechwytywania zawiera wyraz ostatniej zdanie. Jednak <xref:System.Text.RegularExpressions.Capture> obiekty z grupy <xref:System.Text.RegularExpressions.CaptureCollection> obiektu przechwytywania każdym dopasowaniu wyrażenia podrzędnego. <xref:System.Text.RegularExpressions.Capture> Obiektów w kolekcji pierwszej grupy przechwytywania przechwytywania zawierają informacje o każdej word przechwycony i biały znak lub okres. <xref:System.Text.RegularExpressions.Capture> Obiektów w drugiej grupy przechwytywania kolekcji przechwytywania zawierają informacje dotyczące każdego wyrazu przechwycony.  
  
 W poniższym przykładzie użyto wzorzec wyrażenia regularnego, `^([a-z]+)(\d+)*\.([a-z]+(\d)*)$`, aby dopasować numeru produktu, który składa się z dwóch części oddzielone kropką. Obie części składają się z alfabetu następuje opcjonalny cyfry. Ponieważ pierwszy ciąg wejściowy nie jest zgodna z wzorcem, wartość zwracana <xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType> obiektu `Value` jest właściwość <xref:System.String.Empty?displayProperty=nameWithType>. Podobnie, gdy nie można dopasować grupę przechwyconą wartość odpowiadającego jest wzorzec wyrażenia regularnego <xref:System.Text.RegularExpressions.Group> obiektu `Value` jest właściwość <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb#1)]  
  
 Wzorzec wyrażenia regularnego jest zdefiniowany, jak pokazano w poniższej tabeli:  
  
|Wzorzec|Opis|  
|-------------|-----------------|  
|`^`|Rozpocznij dopasowania na początku ciąg.|  
|`([a-z]+)`|Odpowiada jedno lub więcej wystąpień dowolnego znaku z do z. Ponieważ jest przekazywany przez aparat wyrażeń regularnych <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> opcji to porównanie nie uwzględnia wielkości liter. Jest to pierwsza grupa przechwytywania.|  
|`(\d+)?`|Dopasowanie zero lub jeden wystąpienie jednego lub więcej cyfr dziesiętnych. Jest to druga grupa przechwytywania.|  
|`\.`|Zgodne literału znaku kropki.|  
|`([a-z]+`|Odpowiada jedno lub więcej wystąpień dowolnego znaku z do z. Wynik porównania ma bez uwzględniania wielkości liter.|  
|`(\d)*`|Dopasowanie do zera lub większej liczby cyfr dziesiętnych. Pojedynczą cyfrą dopasowane jest czwarty grupy przechwytywania.|  
|`([a-z]+(\d)*)`|Odpowiada jeden lub więcej znaków alfabetu z do z, następnie zero, jeden lub więcej cyfr dziesiętnych. Jest to czwarty grupa przechwytywania.|  
|`$`|Zawierania dopasowuje koniec ciągu.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>