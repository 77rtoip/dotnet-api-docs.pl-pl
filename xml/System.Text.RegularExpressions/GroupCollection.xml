<Type Name="GroupCollection" FullName="System.Text.RegularExpressions.GroupCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="305a8b9d8e98b7fb3da9ebf00b8c123e2e51f113" /><Meta Name="ms.sourcegitcommit" Value="5c332e8417c001736f7e2f33a84791feebba2cd7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/30/2019" /><Meta Name="ms.locfileid" Value="68632622" /></Metadata><TypeSignature Language="C#" Value="public class GroupCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit GroupCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.GroupCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupCollection : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type GroupCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cefa1-101">Zwraca zestaw przechwyconych grup w jednym dopasowaniu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-101">Returns the set of captured groups in a single match.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cefa1-102">Klasa jest klasą kolekcji o wartości zero, która składa się z co <xref:System.Text.RegularExpressions.Group> najmniej jednego obiektu, który zawiera informacje o przechwyconych grupach w dopasowaniu wyrażenia regularnego. <xref:System.Text.RegularExpressions.GroupCollection></span><span class="sxs-lookup"><span data-stu-id="cefa1-102">The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match.</span></span> <span data-ttu-id="cefa1-103">Kolekcja jest niezmienna (tylko do odczytu) i nie ma konstruktora publicznego.</span><span class="sxs-lookup"><span data-stu-id="cefa1-103">The collection is immutable (read-only) and has no public constructor.</span></span> <span data-ttu-id="cefa1-104">Obiekt jest zwracany <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> przez właściwość. <xref:System.Text.RegularExpressions.GroupCollection></span><span class="sxs-lookup"><span data-stu-id="cefa1-104">A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="cefa1-105">Kolekcja zawiera jeden lub więcej <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> obiektów.</span><span class="sxs-lookup"><span data-stu-id="cefa1-105">The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> objects.</span></span> <span data-ttu-id="cefa1-106">Jeśli dopasowanie zakończyło się pomyślnie, pierwszy element w kolekcji zawiera <xref:System.Text.RegularExpressions.Group> obiekt, który odnosi się do całego dopasowania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-106">If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match.</span></span> <span data-ttu-id="cefa1-107">Każdy kolejny element reprezentuje przechwyconą grupę, jeśli wyrażenie regularne zawiera grupy przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-107">Each subsequent element represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="cefa1-108">Dopasowania z numerowanych (nienazwanych) grup przechwytywania są wyświetlane w kolejności liczbowej przed dopasowaniem z nazwanych grup przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-108">Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups.</span></span> <span data-ttu-id="cefa1-109">Jeśli <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> dopasowanie nie powiedzie się, kolekcja zawiera pojedynczy obiekt, którego <xref:System.Text.RegularExpressions.Group.Success%2A> właściwość jest i której `false` <xref:System.Text.RegularExpressions.Capture.Value%2A> właściwość jest równa <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cefa1-109">If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cefa1-110">Aby uzyskać więcej informacji, zobacz sekcję "Konstrukcje grupujące i obiekty wyrażeń regularnych" w artykule [konstrukcje grupujące](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) .</span><span class="sxs-lookup"><span data-stu-id="cefa1-110">For more information, see the "Grouping Constructs and Regular Expression Objects" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
 <span data-ttu-id="cefa1-111">Aby wykonać iterację elementów członkowskich kolekcji, należy użyć konstrukcji iteracji kolekcji dostarczonej przez język ( `foreach` na przykład w C# systemach i `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="cefa1-111">To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="cefa1-112">w Visual Basic) zamiast pobierania modułu wyliczającego, który jest zwracany <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> przez metodę.</span><span class="sxs-lookup"><span data-stu-id="cefa1-112">in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method.</span></span> <span data-ttu-id="cefa1-113">Ponadto można uzyskać dostęp do poszczególnych numerowanych grup z <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> właściwości (indeksator w programie C#) i można uzyskać dostęp do pojedynczych nazwanych <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> przechwyconych grup z właściwości.</span><span class="sxs-lookup"><span data-stu-id="cefa1-113">In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property.</span></span> <span data-ttu-id="cefa1-114">Należy zauważyć, że można pobrać tablicę zawierającą liczby i nazwy wszystkich grup przechwytywania, wywołując <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> odpowiednio metody i. <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cefa1-114">Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> methods, respectively.</span></span> <span data-ttu-id="cefa1-115">Oba są metodami wystąpień i wymagają, aby utworzyć <xref:System.Text.RegularExpressions.Regex> wystąpienie obiektu, który reprezentuje wyrażenie regularne, które ma zostać dopasowane.</span><span class="sxs-lookup"><span data-stu-id="cefa1-115">Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cefa1-116">W poniższym przykładzie użyto wyrażenia regularnego z grupami przechwytywania w celu wyodrębnienia informacji o znakach towarowych i zarejestrowanych znakach towarowych używanych w tekście.</span><span class="sxs-lookup"><span data-stu-id="cefa1-116">The following example uses a regular expression with capturing groups to extract information about trademarks and registered trademarks used in text.</span></span> <span data-ttu-id="cefa1-117">Wzorzec wyrażenia regularnego jest `\b(\w+?)([\u00AE\u2122])`interpretowany jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cefa1-117">The regular expression pattern is `\b(\w+?)([\u00AE\u2122])`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="cefa1-118">Wzorzec</span><span class="sxs-lookup"><span data-stu-id="cefa1-118">Pattern</span></span>|<span data-ttu-id="cefa1-119">Opis</span><span class="sxs-lookup"><span data-stu-id="cefa1-119">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="cefa1-120">Poszukaj granicy wyrazu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-120">Look for a word boundary.</span></span>|  
|`(\w+?)`|<span data-ttu-id="cefa1-121">Wyszukaj jeden lub więcej znaków wyrazu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-121">Look for one or more word characters.</span></span> <span data-ttu-id="cefa1-122">Razem są to znaki towarowe.</span><span class="sxs-lookup"><span data-stu-id="cefa1-122">Together, these form the trademarked name.</span></span> <span data-ttu-id="cefa1-123">(Należy zauważyć, że to wyrażenie regularne zakłada, że znak towarowy składa się z jednego wyrazu). Jest to pierwsza grupa przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-123">(Note that this regular expression assumes that a trademark consists of a single word.) This is the first capturing group.</span></span>|  
|`([\u00AE\u2122])`|<span data-ttu-id="cefa1-124">Poszukaj® lub™ znaku.</span><span class="sxs-lookup"><span data-stu-id="cefa1-124">Look for either the ® or the ™ character.</span></span> <span data-ttu-id="cefa1-125">Jest to druga grupa przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-125">This is the second capturing group.</span></span>|  
  
 <span data-ttu-id="cefa1-126">Dla każdego dopasowania, <xref:System.Text.RegularExpressions.GroupCollection> zawiera trzy <xref:System.Text.RegularExpressions.Group> obiekty.</span><span class="sxs-lookup"><span data-stu-id="cefa1-126">For each match, the <xref:System.Text.RegularExpressions.GroupCollection> contains three <xref:System.Text.RegularExpressions.Group> objects.</span></span> <span data-ttu-id="cefa1-127">Pierwszy obiekt zawiera ciąg, który jest zgodny z całym wyrażeniem regularnym.</span><span class="sxs-lookup"><span data-stu-id="cefa1-127">The first object contains the string that matches the entire regular expression.</span></span> <span data-ttu-id="cefa1-128">Drugi obiekt, który reprezentuje pierwszą przechwyconą grupę, zawiera nazwę produktu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-128">The second object, which represents the first captured group, contains the product name.</span></span> <span data-ttu-id="cefa1-129">Trzeci obiekt, który reprezentuje drugą przechwyconą grupę, zawiera znak towarowy lub zarejestrowany znak towarowy.</span><span class="sxs-lookup"><span data-stu-id="cefa1-129">The third object, which represents the second captured group, contains the trademark or registered trademark symbol.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/cs/Example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/vb/Example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.Group" />
  </Docs>
  <Members>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="groupCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="cefa1-130">Ciąg o nazwie przechwyconej grupy do zlokalizowania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-130">A string with the name of the captured group to locate.</span></span></param>
        <summary><span data-ttu-id="cefa1-131">Określa, czy kolekcja grup zawiera przechwyconą grupę identyfikowaną przez określoną nazwę.</span><span class="sxs-lookup"><span data-stu-id="cefa1-131">Determines whether the group collection contains a captured group identified by the specified name.</span></span></summary>
        <returns><span data-ttu-id="cefa1-132"><see langword="true" />Jeśli kolekcja grup zawiera przechwyconą grupę identyfikowaną <paramref name="key" />przez; <see langword="false" /> w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-132"><see langword="true" /> if the group collection contains a captured group identified by <paramref name="key" />; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="groupCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="cefa1-133">Tablica, do której ma zostać skopiowana kolekcja.</span><span class="sxs-lookup"><span data-stu-id="cefa1-133">The array the collection is to be copied into.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="cefa1-134">Pozycja w tablicy docelowej, w której ma się rozpocząć kopiowanie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-134">The position in the destination array where the copying is to begin.</span></span></param>
        <summary><span data-ttu-id="cefa1-135">Kopiuje wszystkie elementy kolekcji do danej tablicy, zaczynając od danego indeksu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-135">Copies all the elements of the collection to the given array beginning at the given index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cefa1-136">Ponieważ cała kolekcja jest kopiowana do tablicy, rozpoczynając od danego indeksu, Tablica docelowa musi być co najmniej tak duża jak kolekcja.</span><span class="sxs-lookup"><span data-stu-id="cefa1-136">Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="cefa1-137">Ten element członkowski nie znajduje się w [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span><span class="sxs-lookup"><span data-stu-id="cefa1-137">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="cefa1-138">W przypadku tworzenia aplikacji przeznaczonych dla programu [!INCLUDE[net_portable](~/includes/net-portable-md.md)]należy zamiast tego <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> użyć metody.</span><span class="sxs-lookup"><span data-stu-id="cefa1-138">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> method instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cefa1-139">Poniższy przykład wyodrębnia każdy wyraz ze zdania i przechwytuje je w grupie przechwytywania, <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> Metoda jest następnie używana do kopiowania elementów w każdym <xref:System.Text.RegularExpressions.GroupCollection> obiekcie dopasowania do tablicy zawierającej grupy przechwytywania ze wszystkich dopasowań.</span><span class="sxs-lookup"><span data-stu-id="cefa1-139">The following example extracts each word from a sentence and captures it in a capturing group, The <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> method is then used to copy the elements in each match's <xref:System.Text.RegularExpressions.GroupCollection> object to an array that contains the capturing groups from all matches.</span></span> <span data-ttu-id="cefa1-140">Pojedyncze przechwycone słowa są następnie wyświetlane w konsoli programu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-140">The individual captured words are then displayed to the console.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/cs/copyto1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/vb/copyto1.vb#1)]  
  
 <span data-ttu-id="cefa1-141">Wyrażenie regularne jest zdefiniowane w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="cefa1-141">The regular expression is defined as follows:</span></span>  
  
|<span data-ttu-id="cefa1-142">Wzorzec</span><span class="sxs-lookup"><span data-stu-id="cefa1-142">Pattern</span></span>|<span data-ttu-id="cefa1-143">Opis</span><span class="sxs-lookup"><span data-stu-id="cefa1-143">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="cefa1-144">Dopasowuje granicę wyrazu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-144">Match a word boundary.</span></span>|  
|`(\S+?)`|<span data-ttu-id="cefa1-145">Dopasowuje co najmniej jeden znak niebędący odstępem.</span><span class="sxs-lookup"><span data-stu-id="cefa1-145">Match one or more non-white space characters.</span></span> <span data-ttu-id="cefa1-146">Przypisz je do pierwszej grupy przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-146">Assign them to the first capturing group.</span></span>|  
|`\b`|<span data-ttu-id="cefa1-147">Dopasowuje granicę wyrazu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-147">Match a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cefa1-148"><paramref name="array" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-148"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="cefa1-149"><paramref name="arrayIndex" />znajduje się poza granicami <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-149"><paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.</span></span>

<span data-ttu-id="cefa1-150">—lub—</span><span class="sxs-lookup"><span data-stu-id="cefa1-150">-or-</span></span>

<span data-ttu-id="cefa1-151"><paramref name="arrayIndex" />znak <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> Plus znajduje się poza granicami <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-151"><paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Text.RegularExpressions.Group[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Text.RegularExpressions.Group[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Group(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Text::RegularExpressions::Group ^&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : System.Text.RegularExpressions.Group[] * int -&gt; unit&#xA;override this.CopyTo : System.Text.RegularExpressions.Group[] * int -&gt; unit" Usage="groupCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Text.RegularExpressions.Group[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="cefa1-152">Jednowymiarowa tablica, która jest miejscem docelowym elementów skopiowanych z kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-152">The one-dimensional array that is the destination of the elements copied from the group collection.</span></span> <span data-ttu-id="cefa1-153">Tablica musi mieć indeksowane zaczynające od zera.</span><span class="sxs-lookup"><span data-stu-id="cefa1-153">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="cefa1-154">Indeks (liczony od zera) <paramref name="array" /> , w którym rozpoczyna się kopiowanie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-154">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="cefa1-155">Kopiuje elementy kolekcji grupy do <see cref="T:System.Text.RegularExpressions.Group[]" /> tablicy, rozpoczynając od określonego indeksu tablicy.</span><span class="sxs-lookup"><span data-stu-id="cefa1-155">Copies the elements of the group collection to a <see cref="T:System.Text.RegularExpressions.Group[]" /> array, starting at a particular array index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cefa1-156"><paramref name="array" />ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="cefa1-156"><paramref name="array" /> is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cefa1-157"><paramref name="arrayIndex" />jest mniejsza od zera.</span><span class="sxs-lookup"><span data-stu-id="cefa1-157"><paramref name="arrayIndex" /> is less than zero.</span></span>

<span data-ttu-id="cefa1-158">—lub—</span><span class="sxs-lookup"><span data-stu-id="cefa1-158">-or-</span></span>

<span data-ttu-id="cefa1-159"><paramref name="arrayIndex" />jest większa niż długość <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-159"><paramref name="arrayIndex" /> is greater than the length of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cefa1-160">Długość <paramref name="array" /> jestmniejszaniż<paramref name="arrayIndex" /> liczba kolekcji grup.  - </span><span class="sxs-lookup"><span data-stu-id="cefa1-160">The length of <paramref name="array" /> - <paramref name="arrayIndex" /> is less than the group collection count.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cefa1-161">Zwraca liczbę grup w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-161">Returns the number of groups in the collection.</span></span></summary>
        <value><span data-ttu-id="cefa1-162">Liczba grup w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-162">The number of groups in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cefa1-163"><xref:System.Text.RegularExpressions.GroupCollection> Obiekt zawsze ma co najmniej jeden element członkowski.</span><span class="sxs-lookup"><span data-stu-id="cefa1-163">The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member.</span></span> <span data-ttu-id="cefa1-164">Jeśli dopasowanie nie powiedzie się, <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> Właściwość <xref:System.Text.RegularExpressions.GroupCollection> zwraca obiekt, który zawiera pojedynczy element członkowski.</span><span class="sxs-lookup"><span data-stu-id="cefa1-164">If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="groupCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cefa1-165">Dostarcza moduł wyliczający, który wykonuje iterację kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-165">Provides an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="cefa1-166">Moduł wyliczający, który <see cref="T:System.Text.RegularExpressions.Group" /> zawiera wszystkie obiekty <see cref="T:System.Text.RegularExpressions.GroupCollection" />w.</span><span class="sxs-lookup"><span data-stu-id="cefa1-166">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cefa1-167">Zamiast wywoływania <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> metody w celu pobrania modułu wyliczającego, który umożliwia iteracyjne <xref:System.Text.RegularExpressions.Group> przechodzenie przez obiekty w kolekcji, należy użyć konstrukcji `foreach` iteracji grupy (na przykład w C# i `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="cefa1-167">Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="cefa1-168">w Visual Basic), który jest dostarczany przez język programowania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-168">in Visual Basic) that is provided by your programming language.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cefa1-169">Pobiera wartość wskazującą, czy kolekcja jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-169">Gets a value that indicates whether the collection is read-only.</span></span></summary>
        <value><span data-ttu-id="cefa1-170"><see langword="true" />we wszystkich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="cefa1-170"><see langword="true" /> in all cases.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cefa1-171">Pobiera wartość wskazującą, czy dostęp do programu <see cref="T:System.Text.RegularExpressions.GroupCollection" /> jest synchronizowany (bezpieczny wątkowo).</span><span class="sxs-lookup"><span data-stu-id="cefa1-171">Gets a value that indicates whether access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" /> is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="cefa1-172"><see langword="false" />we wszystkich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="cefa1-172"><see langword="false" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="cefa1-173">Ten element członkowski nie znajduje się w [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span><span class="sxs-lookup"><span data-stu-id="cefa1-173">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="cefa1-174">W przypadku tworzenia aplikacji przeznaczonych dla programu [!INCLUDE[net_portable](~/includes/net-portable-md.md)]należy zamiast tego <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> użyć właściwości.</span><span class="sxs-lookup"><span data-stu-id="cefa1-174">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cefa1-175">Umożliwia dostęp do pojedynczego elementu członkowskiego kolekcji przez liczbę całkowitą lub indeks ciągu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-175">Enables access to a single member of the collection by integer or string index.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[int groupnum] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupnum As Integer) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[int] { System::Text::RegularExpressions::Group ^ get(int groupnum); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.GroupCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupnum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupnum"><span data-ttu-id="cefa1-176">Indeks (liczony od zera) składowej kolekcji, która ma zostać pobrana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-176">The zero-based index of the collection member to be retrieved.</span></span></param>
        <summary><span data-ttu-id="cefa1-177">Umożliwia dostęp do elementu członkowskiego kolekcji przez indeks liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="cefa1-177">Enables access to a member of the collection by integer index.</span></span></summary>
        <value><span data-ttu-id="cefa1-178">Element członkowski kolekcji określony przez <paramref name="groupnum" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-178">The member of the collection specified by <paramref name="groupnum" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cefa1-179">Właściwość jest indeksem (in C#) lub właściwością domyślną (w <xref:System.Text.RegularExpressions.GroupCollection> Visual Basic) klasy. <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29></span><span class="sxs-lookup"><span data-stu-id="cefa1-179">The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class.</span></span> <span data-ttu-id="cefa1-180">Umożliwia Wyliczenie elementów członkowskich kolekcji przy użyciu `foreach` instrukcji in C# lub `For Each` instrukcji w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="cefa1-180">It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.</span></span>  
  
 <span data-ttu-id="cefa1-181">Można także użyć tej właściwości do pobrania poszczególnych przechwyconych grup według ich numeru indeksu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-181">You can also use this property to retrieve individual captured groups by their index number.</span></span> <span data-ttu-id="cefa1-182">Możesz pobrać tablicę zawierającą liczby wszystkich grup przechwytywania w wyrażeniu regularnym, wywołując metodę wystąpienia <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="cefa1-182">You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cefa1-183">Można także mapować nazwane grupy przechwytywania na ich liczby, wywołując metodę wystąpienia <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="cefa1-183">You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="cefa1-184">Możesz określić liczbę elementów w kolekcji, pobierając wartość <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="cefa1-184">You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property.</span></span> <span data-ttu-id="cefa1-185">Prawidłowe wartości `groupnum` parametru zakres od 0 do jeden jest mniejszy niż liczba elementów w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-185">Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.</span></span>  
  
 <span data-ttu-id="cefa1-186"><xref:System.Text.RegularExpressions.GroupCollection> Obiekt zwrócony<xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> przez właściwość zawsze ma co najmniej jednego członka.</span><span class="sxs-lookup"><span data-stu-id="cefa1-186">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property always has at least one member.</span></span> <span data-ttu-id="cefa1-187">Jeśli aparat wyrażeń regularnych nie może znaleźć żadnych dopasowań w konkretnym ciągu wejściowym, <xref:System.Text.RegularExpressions.Group> pojedynczy obiekt w kolekcji ma swoją <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> Właściwość ustawioną `false` na wartość `Group.Value` i jej właściwość <xref:System.String.Empty?displayProperty=nameWithType>jest ustawiona na.</span><span class="sxs-lookup"><span data-stu-id="cefa1-187">If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cefa1-188">Jeśli `groupnum` nie jest indeksem elementu członkowskiego kolekcji lub jeśli `groupnum` jest indeksem grupy przechwytywania, która nie została dopasowana w ciągu wejściowym <xref:System.Text.RegularExpressions.Group> , metoda zwraca obiekt, którego <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> właściwość jest `false` i której `Group.Value` właściwość jest <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cefa1-188">If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cefa1-189">Poniższy przykład definiuje wyrażenie regularne, które składa się z dwóch numerowanych grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-189">The following example defines a regular expression that consists of two numbered groups.</span></span> <span data-ttu-id="cefa1-190">Pierwsza grupa przechwytuje jedną lub kilka kolejnych cyfr.</span><span class="sxs-lookup"><span data-stu-id="cefa1-190">The first group captures one or more consecutive digits.</span></span> <span data-ttu-id="cefa1-191">Druga grupa dopasowuje pojedynczy znak.</span><span class="sxs-lookup"><span data-stu-id="cefa1-191">The second group matches a single character.</span></span> <span data-ttu-id="cefa1-192">Ponieważ aparat wyrażeń regularnych szuka zera lub jednego wystąpienia pierwszej grupy, nie zawsze znajdzie dopasowanie, nawet jeśli dopasowanie wyrażenia regularnego zakończyło się pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-192">Because the regular expression engine looks for zero or one occurrence of the first group, it does not always find a match even if the regular expression match is successful.</span></span> <span data-ttu-id="cefa1-193">Przykład ilustruje wynik, gdy <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> właściwość jest używana do pobierania niedopasowanej grupy, dopasowanej grupy i grupy, która nie jest zdefiniowana w wyrażeniu regularnym.</span><span class="sxs-lookup"><span data-stu-id="cefa1-193">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="cefa1-194">W przykładzie zdefiniowano wzorzec `(\d+)*(\w)\2`wyrażenia regularnego, który jest interpretowany jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cefa1-194">The example defines a regular expression pattern `(\d+)*(\w)\2`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="cefa1-195">Wzorzec</span><span class="sxs-lookup"><span data-stu-id="cefa1-195">Pattern</span></span>|<span data-ttu-id="cefa1-196">Opis</span><span class="sxs-lookup"><span data-stu-id="cefa1-196">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)*`|<span data-ttu-id="cefa1-197">Dopasowuje jedno lub więcej wystąpień cyfry dziesiętnej.</span><span class="sxs-lookup"><span data-stu-id="cefa1-197">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="cefa1-198">Jest to pierwsza grupa przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-198">This is the first capturing group.</span></span> <span data-ttu-id="cefa1-199">Dopasowuje ten wzorzec jako zero lub jeden raz.</span><span class="sxs-lookup"><span data-stu-id="cefa1-199">Match this pattern either zero or one time.</span></span>|  
|`(\w)`|<span data-ttu-id="cefa1-200">Jest to druga grupa przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-200">This is the second capturing group.</span></span>|  
|`\k`|<span data-ttu-id="cefa1-201">Dopasowuje ciąg przechwycony przez drugą grupę przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-201">Match the string captured by the second capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item3.cs#2)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item3.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="cefa1-202">Konstrukty grupujące</span><span class="sxs-lookup"><span data-stu-id="cefa1-202">Grouping Constructs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[string groupname] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupname As String) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[System::String ^] { System::Text::RegularExpressions::Group ^ get(System::String ^ groupname); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.GroupCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupname"><span data-ttu-id="cefa1-203">Nazwa grupy przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-203">The name of a capturing group.</span></span></param>
        <summary><span data-ttu-id="cefa1-204">Umożliwia dostęp do elementu członkowskiego kolekcji przez indeks ciągu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-204">Enables access to a member of the collection by string index.</span></span></summary>
        <value><span data-ttu-id="cefa1-205">Element członkowski kolekcji określony przez <paramref name="groupname" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-205">The member of the collection specified by <paramref name="groupname" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cefa1-206">`groupName`może to być nazwa grupy przechwytywania, która jest zdefiniowana przez `(?<`element *name* `>)` w wyrażeniu regularnym, lub ciąg reprezentujący liczbę grup przechwytywania, które są zdefiniowane przez konstrukcję grupującą.</span><span class="sxs-lookup"><span data-stu-id="cefa1-206">`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct.</span></span> <span data-ttu-id="cefa1-207">Aby uzyskać więcej informacji na temat grup w wyrażeniach [](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md)regularnych, zobacz Grouping konstrukcjes.</span><span class="sxs-lookup"><span data-stu-id="cefa1-207">For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="cefa1-208">Można pobrać nazwy wszystkich przechwyconych grup w <xref:System.Text.RegularExpressions.Regex> obiekcie, <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> wywołując metodę.</span><span class="sxs-lookup"><span data-stu-id="cefa1-208">You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cefa1-209">Możesz również zmapować liczby grup przechwytywania w wyrażeniu regularnym do ich nazw, wywołując <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> metodę.</span><span class="sxs-lookup"><span data-stu-id="cefa1-209">You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cefa1-210">Pojedyncze nazwy z tablicy można następnie przesłać do <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> właściwości w celu pobrania przechwyconego ciągu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-210">Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.</span></span>  
  
 <span data-ttu-id="cefa1-211">Jeśli `groupname` nie jest nazwą grupy przechwytywania w kolekcji lub jeśli `groupname` jest nazwą grupy przechwytywania, która nie została dopasowana w ciągu wejściowym, metoda zwraca obiekt, <xref:System.Text.RegularExpressions.Group> którego <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> właściwość jest `false` i którego `Group.Value` właściwość jest <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cefa1-211">If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cefa1-212">Poniższy przykład definiuje wyrażenie regularne, które składa się z dwóch nazwanych grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-212">The following example defines a regular expression that consists of two named groups.</span></span> <span data-ttu-id="cefa1-213">Pierwsza grupa `numbers`,,, przechwytuje co najmniej jedną kolejne cyfry.</span><span class="sxs-lookup"><span data-stu-id="cefa1-213">The first group, `numbers`, captures one or more consecutive digits.</span></span> <span data-ttu-id="cefa1-214">Druga grupa `letter`,, dopasowuje pojedynczy znak.</span><span class="sxs-lookup"><span data-stu-id="cefa1-214">The second group, `letter`, matches a single character.</span></span> <span data-ttu-id="cefa1-215">Ponieważ aparat wyrażeń regularnych szuka zera lub jednego wystąpienia wzorca zdefiniowanego przez `numbers` grupę `numbers` , Grupa nie zawsze jest obecna, nawet jeśli dopasowanie zakończy się pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-215">Because the regular expression engine looks for zero or one occurrence of the pattern defined by the `numbers` group, the `numbers` group is not always present even if a match is successful.</span></span> <span data-ttu-id="cefa1-216">Przykład ilustruje wynik, gdy <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> właściwość jest używana do pobierania niedopasowanej grupy, dopasowanej grupy i grupy, która nie jest zdefiniowana w wyrażeniu regularnym.</span><span class="sxs-lookup"><span data-stu-id="cefa1-216">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="cefa1-217">W przykładzie zdefiniowano wzorzec `(?<numbers>\d+)*(?<letter>\w)\k<letter>`wyrażenia regularnego, który jest interpretowany jak pokazano w poniższej tabeli.</span><span class="sxs-lookup"><span data-stu-id="cefa1-217">The example defines a regular expression pattern `(?<numbers>\d+)*(?<letter>\w)\k<letter>`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="cefa1-218">Wzorzec</span><span class="sxs-lookup"><span data-stu-id="cefa1-218">Pattern</span></span>|<span data-ttu-id="cefa1-219">Opis</span><span class="sxs-lookup"><span data-stu-id="cefa1-219">Description</span></span>|  
|-------------|-----------------|  
|`(?<numbers>\d+)*`|<span data-ttu-id="cefa1-220">Dopasowuje jedno lub więcej wystąpień cyfry dziesiętnej.</span><span class="sxs-lookup"><span data-stu-id="cefa1-220">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="cefa1-221">Nadaj nazwę tej `numbers` grupie przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-221">Name this the `numbers` capturing group.</span></span> <span data-ttu-id="cefa1-222">Dopasowuje ten wzorzec jako zero lub jeden raz.</span><span class="sxs-lookup"><span data-stu-id="cefa1-222">Match this pattern either zero or one time.</span></span>|  
|`(?<letter>\w)`|<span data-ttu-id="cefa1-223">Dopasowuje pojedynczy znak słowa.</span><span class="sxs-lookup"><span data-stu-id="cefa1-223">Match a single word character.</span></span> <span data-ttu-id="cefa1-224">Nadaj nazwę tej `letter` grupie przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-224">Name this the `letter` capturing group.</span></span>|  
|`\k<letter>`|<span data-ttu-id="cefa1-225">Dopasowuje ciąg przechwycony przez `letter` grupę przechwytywania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-225">Match the string captured by the `letter` capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item2.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item2.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="cefa1-226">Konstrukty grupujące</span><span class="sxs-lookup"><span data-stu-id="cefa1-226">Grouping Constructs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ Keys { System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : seq&lt;string&gt;" Usage="System.Text.RegularExpressions.GroupCollection.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cefa1-227">Pobiera Wyliczenie ciągów zawierające klucze nazw kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-227">Gets a string enumeration that contains the name keys of the group collection.</span></span></summary>
        <value><span data-ttu-id="cefa1-228">Klucze nazw kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-228">The name keys of the group collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cefa1-229">Pobiera obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-229">Gets an object that can be used to synchronize access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></summary>
        <value><span data-ttu-id="cefa1-230">Kopia <see cref="T:System.Text.RegularExpressions.Match" /> obiektu do zsynchronizowania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-230">A copy of the <see cref="T:System.Text.RegularExpressions.Match" /> object to synchronize.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="cefa1-231">Ten element członkowski nie znajduje się w [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span><span class="sxs-lookup"><span data-stu-id="cefa1-231">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="cefa1-232">W przypadku tworzenia aplikacji przeznaczonych dla programu [!INCLUDE[net_portable](~/includes/net-portable-md.md)]należy zamiast tego <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> użyć właściwości.</span><span class="sxs-lookup"><span data-stu-id="cefa1-232">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Add (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Add(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As Group) Implements ICollection(Of Group).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="cefa1-233">Grupa, która ma zostać dodana do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-233">The group to add to the collection.</span></span></param>
        <summary><span data-ttu-id="cefa1-234"><see cref="T:System.Text.RegularExpressions.Group" /> Dodaje do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-234">Adds a <see cref="T:System.Text.RegularExpressions.Group" /> to the collection.</span></span> <span data-ttu-id="cefa1-235">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-235">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-236">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-236">This method is not supported.</span></span> <span data-ttu-id="cefa1-237">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-237">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of Group).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cefa1-238">Czyści kolekcję.</span><span class="sxs-lookup"><span data-stu-id="cefa1-238">Clears the collection.</span></span> <span data-ttu-id="cefa1-239">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-239">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-240">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-240">This method is not supported.</span></span> <span data-ttu-id="cefa1-241">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-241">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Contains (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Contains(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Group) As Boolean Implements ICollection(Of Group).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="cefa1-242">Grupa do zlokalizowania w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-242">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="cefa1-243">Określa, czy kolekcja grup zawiera określony element grupy.</span><span class="sxs-lookup"><span data-stu-id="cefa1-243">Determines whether the group collection contains a specific group item.</span></span></summary>
        <returns><span data-ttu-id="cefa1-244"><see langword="true" />Jeśli element grupy zostanie znaleziony w kolekcji grup; <see langword="false" /> w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-244"><see langword="true" /> if the group item is found in the group collection; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="cefa1-245">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="cefa1-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cefa1-246">Może być używana tylko wtedy, <xref:System.Text.RegularExpressions.GroupCollection> gdy wystąpienie jest rzutowane <xref:System.Collections.Generic.ICollection%601> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-246">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span> 

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Remove (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Remove(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As Group) As Boolean Implements ICollection(Of Group).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="cefa1-247">Grupa do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="cefa1-247">The group to remove.</span></span></param>
        <summary><span data-ttu-id="cefa1-248"><see cref="T:System.Text.RegularExpressions.Group" /> Usuwa z kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-248">Removes a <see cref="T:System.Text.RegularExpressions.Group" /> from the collection.</span></span> <span data-ttu-id="cefa1-249">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-249">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="cefa1-250">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-250">This method is not supported.</span></span> <span data-ttu-id="cefa1-251">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="cefa1-251">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-252">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-252">This method is not supported.</span></span> <span data-ttu-id="cefa1-253">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-253">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.RegularExpressions.Group&gt;&gt; IEnumerable&lt;KeyValuePair&lt;string,Group&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.RegularExpressions.Group&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#RegularExpressions#Group&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Group)) Implements IEnumerable(Of KeyValuePair(Of String, Group)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cefa1-254">Dostarcza moduł wyliczający, który wykonuje iterację w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-254">Provides an enumerator that iterates through the group collection.</span></span></summary>
        <returns><span data-ttu-id="cefa1-255">Moduł wyliczający, który zawiera wszystkie nazwy i obiekty <see cref="T:System.Text.RegularExpressions.Group" /> w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-255">An enumerator that contains all names and objects in the <see cref="T:System.Text.RegularExpressions.Group" /> collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="cefa1-256">Zamiast wywoływania tej metody w celu pobrania modułu wyliczającego, <xref:System.Text.RegularExpressions.Group> który umożliwia iterację obiektów w kolekcji, należy użyć konstrukcji iteracji grupy ( `foreach` na przykład w C# i `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="cefa1-256">Instead of calling this method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="cefa1-257">w Visual Basic), który jest dostarczany przez język programowania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-257">in Visual Basic) that is provided by your programming language.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt; IEnumerable&lt;Group&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Text.RegularExpressions.Group&gt; System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Text#RegularExpressions#Group&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Group) Implements IEnumerable(Of Group).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Text::RegularExpressions::Group ^&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cefa1-258">Dostarcza moduł wyliczający, który wykonuje iterację w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-258">Provides an enumerator that iterates through the group collection.</span></span></summary>
        <returns><span data-ttu-id="cefa1-259">Moduł wyliczający, który <see cref="T:System.Text.RegularExpressions.Group" /> zawiera wszystkie obiekty w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-259">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the group collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="cefa1-260">Zamiast wywoływania tej metody w celu pobrania modułu wyliczającego, <xref:System.Text.RegularExpressions.Group> który umożliwia iterację obiektów w kolekcji, należy użyć konstrukcji iteracji grupy ( `foreach` na przykład w C# i `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="cefa1-260">Instead of calling this method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="cefa1-261">w Visual Basic), który jest dostarczany przez język programowania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-261">in Visual Basic) that is provided by your programming language.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;Group&gt;.IndexOf (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#IndexOf(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Group) As Integer Implements IList(Of Group).IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="cefa1-262">Grupa do zlokalizowania w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-262">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="cefa1-263">Określa indeks określonej grupy w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-263">Determines the index of a specific group in the group collection.</span></span></summary>
        <returns><span data-ttu-id="cefa1-264">Indeks w <paramref. name="item" /> przypadku znalezienia; w przeciwnym razie,-1.</span><span class="sxs-lookup"><span data-stu-id="cefa1-264">The index of the <paramref. name="item" /> if found; otherwise, -1.</span></span></returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="cefa1-265">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="cefa1-265">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cefa1-266">Może być używana tylko wtedy, <xref:System.Text.RegularExpressions.GroupCollection> gdy wystąpienie jest rzutowane <xref:System.Collections.Generic.IList%601> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-266">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

         ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.Insert (int index, System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int32 index, class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Insert(System.Int32,System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Group) Implements IList(Of Group).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int index, System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cefa1-267">Pozycja, w której ma zostać wstawiona Grupa.</span><span class="sxs-lookup"><span data-stu-id="cefa1-267">The position at which to insert the group.</span></span></param>
        <param name="item"><span data-ttu-id="cefa1-268">Grupa do wstawienia.</span><span class="sxs-lookup"><span data-stu-id="cefa1-268">The group to insert.</span></span></param>
        <summary><span data-ttu-id="cefa1-269"><see cref="T:System.Text.RegularExpressions.Group" /> Wstawia do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-269">Inserts a <see cref="T:System.Text.RegularExpressions.Group" /> into the collection.</span></span> <span data-ttu-id="cefa1-270">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-270">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-271">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-271">This method is not supported.</span></span> <span data-ttu-id="cefa1-272">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-272">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item">
      <MemberSignature Language="C#" Value="System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Group Implements IList(Of Group).Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Text::RegularExpressions::Group ^ System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group&gt;::Item[int] { System::Text::RegularExpressions::Group ^ get(int index); void set(int index, System::Text::RegularExpressions::Group ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cefa1-273">Indeks (liczony od zera) grupy w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-273">The zero-based index of the group in the group collection.</span></span></param>
        <summary><span data-ttu-id="cefa1-274">Pobiera grupę na określonej pozycji w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-274">Gets the group at the specified position in the collection.</span></span></summary>
        <value><span data-ttu-id="cefa1-275">Grupa w żądanym położeniu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-275">The group in the desired position.</span></span></value>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="cefa1-276">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="cefa1-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cefa1-277">Może być używana tylko wtedy, <xref:System.Text.RegularExpressions.GroupCollection> gdy wystąpienie jest rzutowane <xref:System.Collections.Generic.IList%601> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-277">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>

         ]]></format>
         </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-278">Nie można ustawić elementu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-278">Cannot set an item.</span></span> <span data-ttu-id="cefa1-279">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-279">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of Group).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cefa1-280">Indeks (liczony od zera) grupy do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="cefa1-280">The zero-based index of the group to remove.</span></span></param>
        <summary><span data-ttu-id="cefa1-281"><see cref="T:System.Text.RegularExpressions.Group" /> Usuwa z kolekcji o określonym indeksie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-281">Removes the <see cref="T:System.Text.RegularExpressions.Group" /> from the collection at the specified index.</span></span> <span data-ttu-id="cefa1-282">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-282">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-283">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-283">This method is not supported.</span></span> <span data-ttu-id="cefa1-284">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-284">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="cefa1-285">Tablica Jednowymiarowa, do której ma zostać skopiowana kolekcja.</span><span class="sxs-lookup"><span data-stu-id="cefa1-285">The one-dimensional array the collection is to be copied into.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="cefa1-286">Indeks (liczony od zera) w tablicy docelowej, w której ma się rozpocząć kopiowanie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-286">The zero-based index in the destination array where copying is to begin.</span></span></param>
        <summary><span data-ttu-id="cefa1-287">Kopiuje wszystkie elementy kolekcji do określonej tablicy, zaczynając od określonego indeksu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-287">Copies all the elements of the collection to the specified array beginning at the specified index.</span></span></summary>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="cefa1-288">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="cefa1-288">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cefa1-289">Może być używana tylko wtedy, <xref:System.Text.RegularExpressions.GroupCollection> gdy wystąpienie jest rzutowane <xref:System.Collections.ICollection> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-289">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span> 

         ]]></format>
         </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cefa1-290"><paramref name="array" />ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="cefa1-290"><paramref name="array" /> is null.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="cefa1-291"><paramref name="arrayIndex" />znajduje się poza <paramref name="array" />granicami.-lub-<paramref name="arrayIndex" /> Plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> znajduje się poza granicami <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-291"><paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.-or-<paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cefa1-292">Pobiera wartość wskazującą, czy dostęp do kolekcji jest synchronizowany (bezpieczny wątkowo).</span><span class="sxs-lookup"><span data-stu-id="cefa1-292">Gets a value that indicates whether access to the collection is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="cefa1-293">fałszywy we wszystkich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="cefa1-293">false in all cases.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cefa1-294">Pobiera obiekt, który może służyć do synchronizowania dostępu do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-294">Gets an object that can be used to synchronize access to the collection.</span></span></summary>
        <value><span data-ttu-id="cefa1-295">Obiekt, który może służyć do synchronizowania dostępu do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-295">An object that can be used to synchronize access to the collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cefa1-296">Obiekt, który ma zostać dodany do kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-296">The object to add to the group collection.</span></span></param>
        <summary><span data-ttu-id="cefa1-297">Dodaje obiekt do kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-297">Adds an object to the group collection.</span></span> <span data-ttu-id="cefa1-298">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-298">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-299">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-299">This method is not supported.</span></span> <span data-ttu-id="cefa1-300">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-300">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cefa1-301">Czyści kolekcję.</span><span class="sxs-lookup"><span data-stu-id="cefa1-301">Clears the collection.</span></span> <span data-ttu-id="cefa1-302">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-302">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-303">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-303">This method is not supported.</span></span> <span data-ttu-id="cefa1-304">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-304">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cefa1-305">Grupa do zlokalizowania w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-305">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="cefa1-306">Określa, czy kolekcja grup zawiera określony element grupy.</span><span class="sxs-lookup"><span data-stu-id="cefa1-306">Determines whether the group collection contains a specific group item.</span></span></summary>
        <returns><span data-ttu-id="cefa1-307"><see langword="true" />Jeśli element grupy zostanie znaleziony w kolekcji grup; <see langword="false" /> w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-307"><see langword="true" /> if the group item is found in the group collection; <see langword="false" /> otherwise.</span></span></returns>
         <remarks>
           <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="cefa1-308">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="cefa1-308">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cefa1-309">Może być używana tylko wtedy, <xref:System.Text.RegularExpressions.GroupCollection> gdy wystąpienie jest rzutowane <xref:System.Collections.IList> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-309">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cefa1-310">Grupa do zlokalizowania w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-310">The group to locate in the group collection.</span></span></param>
        <summary><span data-ttu-id="cefa1-311">Określa indeks określonej grupy w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-311">Determines the index of a specific group in the group collection.</span></span></summary>
        <returns><span data-ttu-id="cefa1-312">Indeks w <paramref. name="item" /> przypadku znalezienia; w przeciwnym razie,-1.</span><span class="sxs-lookup"><span data-stu-id="cefa1-312">The index of the <paramref. name="item" /> if found; otherwise, -1.</span></span></returns>
         <remarks>
           <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="cefa1-313">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="cefa1-313">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cefa1-314">Może być używana tylko wtedy, <xref:System.Text.RegularExpressions.GroupCollection> gdy wystąpienie jest rzutowane <xref:System.Collections.IList> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-314">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cefa1-315">Pozycja, w której ma zostać wstawiona Grupa.</span><span class="sxs-lookup"><span data-stu-id="cefa1-315">The position at which to insert the group.</span></span></param>
        <param name="value"><span data-ttu-id="cefa1-316">Grupa do wstawienia.</span><span class="sxs-lookup"><span data-stu-id="cefa1-316">The group to insert.</span></span></param>
        <summary><span data-ttu-id="cefa1-317"><see cref="T:System.Text.RegularExpressions.Group" /> Wstawia do kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-317">Inserts a <see cref="T:System.Text.RegularExpressions.Group" /> into the collection.</span></span> <span data-ttu-id="cefa1-318">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-318">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-319">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-319">This method is not supported.</span></span> <span data-ttu-id="cefa1-320">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-320">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cefa1-321">Pobiera wartość wskazującą, czy kolekcja grup ma stały rozmiar.</span><span class="sxs-lookup"><span data-stu-id="cefa1-321">Gets a value indicating whether the group collection has a fixed size.</span></span></summary>
        <value><span data-ttu-id="cefa1-322"><see langword="true" />stałego.</span><span class="sxs-lookup"><span data-stu-id="cefa1-322"><see langword="true" /> always.</span></span></value>
         <remarks>
           <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="cefa1-323">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="cefa1-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cefa1-324">Może być używana tylko wtedy, <xref:System.Text.RegularExpressions.GroupCollection> gdy wystąpienie jest rzutowane <xref:System.Collections.IList> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-324">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
         </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cefa1-325">Pozycja indeksu zerowego dla grupy w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-325">The zero-index position of the group in the group collection.</span></span></param>
        <summary><span data-ttu-id="cefa1-326">Pobiera grupę w żądanym położeniu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-326">Gets the group in the desired position.</span></span></summary>
        <value><span data-ttu-id="cefa1-327">Grupa w żądanym położeniu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-327">The group in the desired position.</span></span></value>
         <remarks>
           <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="cefa1-328">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="cefa1-328">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cefa1-329">Może być używana tylko wtedy, <xref:System.Text.RegularExpressions.GroupCollection> gdy wystąpienie jest rzutowane <xref:System.Collections.IList> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-329">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.IList> interface.</span></span> 

           ]]></format>
         </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-330">Nie można ustawić elementu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-330">Cannot set an item.</span></span> <span data-ttu-id="cefa1-331">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-331">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cefa1-332">Grupa do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="cefa1-332">The group to remove.</span></span></param>
        <summary><span data-ttu-id="cefa1-333"><see cref="T:System.Text.RegularExpressions.Group" /> Usuwa z kolekcji.</span><span class="sxs-lookup"><span data-stu-id="cefa1-333">Removes a <see cref="T:System.Text.RegularExpressions.Group" /> from the collection.</span></span> <span data-ttu-id="cefa1-334">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-334">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="cefa1-335">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-335">This method is not supported.</span></span> <span data-ttu-id="cefa1-336">Nie jest zwracana żadna wartość.</span><span class="sxs-lookup"><span data-stu-id="cefa1-336">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-337">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-337">This method is not supported.</span></span> <span data-ttu-id="cefa1-338">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-338">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="cefa1-339">Indeks (liczony od zera) grupy do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="cefa1-339">The zero-based index of the group to remove.</span></span></param>
        <summary><span data-ttu-id="cefa1-340"><see cref="T:System.Text.RegularExpressions.Group" /> Usuwa z kolekcji o określonym indeksie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-340">Removes the <see cref="T:System.Text.RegularExpressions.Group" /> from the collection at the specified index.</span></span> <span data-ttu-id="cefa1-341">Wywołanie tej metody zawsze zgłasza <see cref="T:System.NotSupportedException" />.</span><span class="sxs-lookup"><span data-stu-id="cefa1-341">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cefa1-342">Ta metoda nie jest obsługiwana.</span><span class="sxs-lookup"><span data-stu-id="cefa1-342">This method is not supported.</span></span> <span data-ttu-id="cefa1-343">Jest to kolekcja tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-343">This is a read-only collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (string key, out System.Text.RegularExpressions.Group value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(string key, [out] class System.Text.RegularExpressions.Group&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As String, ByRef value As Group) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(System::String ^ key, [Runtime::InteropServices::Out] System::Text::RegularExpressions::Group ^ % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : string *  -&gt; bool&#xA;override this.TryGetValue : string *  -&gt; bool" Usage="groupCollection.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="value" Type="System.Text.RegularExpressions.Group" RefType="out" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="cefa1-344">Ciąg z kluczem nazwy grupy do wyszukania.</span><span class="sxs-lookup"><span data-stu-id="cefa1-344">A string with the group name key to look for.</span></span></param>
        <param name="value"><span data-ttu-id="cefa1-345">Gdy metoda zwraca, Grupa, której nazwa to <paramref name="key" />, jeśli zostanie znaleziona; w przeciwnym razie, <see langword="null" /> Jeśli nie zostanie znaleziona.</span><span class="sxs-lookup"><span data-stu-id="cefa1-345">When the method returns, the group whose name is <paramref name="key" />, if it is found; otherwise, <see langword="null" /> if not found.</span></span></param>
        <summary><span data-ttu-id="cefa1-346">Próbuje pobrać grupę identyfikowaną za pomocą podanego klucza nazwy, jeśli istnieje w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-346">Attempts to retrieve a group identified by the provided name key, if it exists in the group collection.</span></span></summary>
        <returns><span data-ttu-id="cefa1-347"><see langword="true" />Jeśli istnieje grupa identyfikowana za pomocą podanego klucza nazwy; <see langword="false" /> w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="cefa1-347"><see langword="true" /> if a group identified by the provided name key exists; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Text.RegularExpressions.Group&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IEnumerable(Of Group)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt; ^ Values { System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : seq&lt;System.Text.RegularExpressions.Group&gt;" Usage="System.Text.RegularExpressions.GroupCollection.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cefa1-348">Pobiera Wyliczenie grupy ze wszystkimi grupami w kolekcji grup.</span><span class="sxs-lookup"><span data-stu-id="cefa1-348">Gets a group enumeration with all the groups in the group collection.</span></span></summary>
        <value><span data-ttu-id="cefa1-349">Wyliczenie grupy.</span><span class="sxs-lookup"><span data-stu-id="cefa1-349">A group enumeration.</span></span></value>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="cefa1-350">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="cefa1-350">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cefa1-351">Może być używana tylko wtedy, <xref:System.Text.RegularExpressions.GroupCollection> gdy wystąpienie jest rzutowane <xref:System.Collections.Generic.IEnumerable%601> do interfejsu.</span><span class="sxs-lookup"><span data-stu-id="cefa1-351">It can be used only when the <xref:System.Text.RegularExpressions.GroupCollection> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span> 

         ]]></format>
         </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
