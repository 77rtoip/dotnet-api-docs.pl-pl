<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="604364a9fb843d960f70874b849b40c35eb11b70" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36413584" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <TypeSignature Language="F#" Value="type SecureConversationServiceCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera ustawienia poświadczeń dla usługi bezpiecznej konwersacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezpiecznych konwersacji obejmują wymiany wiele komunikatów i użyj narzędzia zabezpieczeń kontekstu tokenu (SCT) do zapewnienia bezpieczeństwa. SCT współużytkowany komunikującymi się Stronami przez czas ich istnienia sesji komunikacji. Usługa może wystawiać dwóch różnych rodzajów SCTs:  
  
-   Pierwsza to SCT opartymi na sesji, który zawiera unikatowy identyfikator. Tylko identyfikator przenoszenia wiadomości, a usługa zachowuje mapowanie stanu pamięci podręcznej, mapująca się między identyfikatorami SCT i zawartości (na przykład oświadczenia, kluczy zabezpieczeń i tak dalej). Dobrze behaved klient musi wysłać anulowania SCT, aby ułatwić usługi optymalizacji zasobów pamięci podręcznej. Jeśli wystąpienia tej klasy, wywołując <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> z `requireCancellation` parametru równa `true`, SCT wystawiony w ten sposób.  
  
-   Drugim jest niezależna SCT, która znajduje się w pliku cookie na komputerze klienckim. Ta SCT zawiera informacje o stanie całego, wymaga stanu zarządzania z usługi ani anulowania SCT od klienta. Jest to czasem nazywane SCT "Tryb plików cookie". Ponieważ SCT zawiera informacje o stanie całego, jego rozmiar jest większy niż w przypadku opartymi na sesji. Z opartymi na sesji SCTs usługi przechowuje podobne informacje o stanie. Jednak ponieważ jest ona niezależne, można stosować w przypadku istnienia usługi i będzie się powtarzał przez zamknięcie usługi i uruchom ponownie.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContextClaimTypes : System.Collections.ObjectModel.Collection&lt;Type&gt;" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Type" /> oświadczenia dla pliku cookie serializacji.</summary>
        <value>Kolekcja <see cref="T:System.Type" /> oświadczenia dla pliku cookie serializacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do serializacji oświadczenia do SCT plików cookie, usługi Windows Communication Foundation (WCF) używa <xref:System.Runtime.Serialization.DataContractSerializer> jako domyślny. Ponieważ zasobów oświadczeń jest rozszerzalny, WCF umożliwia podanie listy zasoby znanych typów. Pomaga to <xref:System.Runtime.Serialization.DataContractSerializer> podczas deserializacji oświadczeń w pliku cookie, aby przywrócić oryginalny silnie typizowanych obiektów.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób pobrania tej właściwości.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder with get, set" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia dostosowany <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> kodowania i dekodowania serializacji pliku cookie.</summary>
        <value>A <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> obiektu, który jest dostosowanie z <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W "Tryb plików cookie" Usługa wystawia klienta token kontekstu zabezpieczeń (SCT) w postaci pliku cookie do klienta, dzięki czemu nie trzeba zachować każdy stan zabezpieczeń. Klient wysyła plik cookie w komunikacie żądania, aby usługa potrafi usunięcia ochrony i sprawdź komunikat żądania. Ponieważ SCT często są przesyłane przez sieć niezabezpieczone, muszą być chronione.  
  
 Domyślnie korzysta z usługi Windows Communication Foundation (WCF) <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> klasę, aby chronić plik cookie przy użyciu interfejsu API ochrony danych (DPAPI). Dla DPAPI do pracy w środowisku farmy sieci Web wszystkie usługi wewnętrznej bazy danych musi działać jako tego samego konta użytkownika domeny. Innymi słowy Jeśli usługa jest obsługiwana w sieci Web, następnie proces roboczy usług Internet Information Services (IIS) musi być skonfigurowana do uruchamiania jako użytkownik domeny.  
  
 Ta właściwość umożliwia używanie dostosowany <xref:System.ServiceModel.Security.SecurityStateEncoder> do szyfrowania i odszyfrowywania pliku cookie i nie zależą od DPAPI.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób ustawić tę właściwość.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>