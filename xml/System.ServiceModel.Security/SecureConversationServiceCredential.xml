<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2195adac5533763c67aba666b17818fac8740c7d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69234182" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <TypeSignature Language="F#" Value="type SecureConversationServiceCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia ustawienia poświadczeń dla usługi bezpiecznej konwersacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezpieczne konwersacje obejmują wymianę wielu wiadomości i używają tokenu kontekstu zabezpieczeń (SCT) w celu zapewnienia bezpieczeństwa. SCT jest współużytkowany przez strony komunikujące się w okresie istnienia sesji komunikacji. Usługa może wydać dwa różne rodzaje SCTs:  
  
-   Pierwszy to oparty na sesji SCT, który zawiera unikatowy identyfikator. Komunikaty mają tylko identyfikator, a usługa utrzymuje pamięć podręczną mapowania stanu, która jest mapowana między identyfikatorami i zawartością elementu SCT (na przykład oświadczenia, klucze zabezpieczeń itd.). Dobrze działający klient musi wysłać anulowanie z SCT, aby ułatwić usłudze optymalizację zasobów pamięci podręcznej. Jeśli utworzysz wystąpienie tej klasy przez wywołanie <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> `requireCancellation` z parametrem równym `true`, SCT zostanie wystawiony w ten sposób.  
  
-   Druga to samodzielny SCT, który znajduje się w pliku cookie na kliencie. Ten SCT zawiera wszystkie informacje o stanie, dlatego nie wymaga zarządzania stanem z usługi ani anulowania z programu SCT z poziomu klienta. Jest to czasami nazywane "trybem plików cookie" SCT. Ponieważ SCT zawiera całe informacje o stanie, jego rozmiar jest większy niż w przypadku sesji. W przypadku SCTs opartego na sesji usługa przechowuje większość informacji o stanie. Jednak ponieważ jest ona samodzielna, może być używana między okresem istnienia usługi i utrzymuje między zamknięciem usługi a ponownym uruchomieniem.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContextClaimTypes : System.Collections.ObjectModel.Collection&lt;Type&gt;" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Type" /> oświadczeń dla serializacji plików cookie.</summary>
        <value>Kolekcja <see cref="T:System.Type" /> oświadczeń do serializacji plików cookie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby serializować oświadczenia do plików cookie SCT, program Windows Communication Foundation (WCF <xref:System.Runtime.Serialization.DataContractSerializer> ) używa jako domyślnego. Ponieważ zasób żądania jest rozszerzalny, WCF pozwala na udostępnienie listy znanych typów zasobów. Pomaga <xref:System.Runtime.Serialization.DataContractSerializer> to podczas deserializacji oświadczeń w pliku cookie, dzięki czemu może zwrócić oryginalne obiekty o jednoznacznie określonym typie.  
  
   
  
## Examples  
 Poniższy kod pokazuje, jak uzyskać tę właściwość.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder with get, set" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia dostosowany <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> kod serializacji plików cookie kodowania i dekodowania.</summary>
        <value>Obiekt, który jest dostosowywany do <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />. <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W trybie "plik cookie" usługa wystawia klientowi token kontekstu zabezpieczeń (SCT) w postaci pliku cookie na kliencie, aby nie musiał zachować żadnego stanu zabezpieczeń. Klient wysyła plik cookie z powrotem do komunikatu żądania, aby usługa wiedziała, jak wyłączyć ochronę i zweryfikować komunikat żądania. Ponieważ SCT jest często przesyłany za pośrednictwem niezabezpieczonej sieci, musi być chroniona.  
  
 Domyślnie Windows Communication Foundation (WCF) używa <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> klasy do ochrony plików cookie przy użyciu interfejsu API ochrony danych (DPAPI). Aby działanie DPAPI działało w środowisku kolektywu serwerów sieci Web, wszystkie usługi zaplecza muszą być uruchomione jako konto użytkownika domeny. Innymi słowy, jeśli usługa jest hostowana w sieci Web, proces roboczy Internet Information Services (IIS) musi być skonfigurowany do uruchamiania jako użytkownik domeny.  
  
 Ta właściwość umożliwia użycie dostosowanej <xref:System.ServiceModel.Security.SecurityStateEncoder> do szyfrowania i odszyfrowywania pliku cookie i nie zależy od interfejsu DPAPI.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób ustawienia tej właściwości.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
