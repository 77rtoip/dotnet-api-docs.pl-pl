<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b507ff86d3d28a0198880442d73a284a2a76dd60" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39810638" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <TypeSignature Language="F#" Value="type SecureConversationServiceCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera ustawienia poświadczeń dla usługi bezpiecznej konwersacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezpieczne konwersacje obejmują wymiany wiele wiadomości i użyć narzędzia zabezpieczeń kontekstu tokenu (SCT) w celu zapewnienia bezpieczeństwa. SCT jest współdzielona przez strony komunikujące się okres istnienia sesji komunikacji. Usługa może wystawiać dwa różne rodzaje SCTs:  
  
-   Pierwsza to SCT oparte na sesji, który zawiera unikatowy identyfikator. Komunikaty zawierają tylko identyfikator, a usługa zapewnia mapowanie stanu pamięci podręcznej, mapująca się między identyfikatorami SCT i zawartości (na przykład oświadczenia, kluczy zabezpieczeń i tak dalej). Dobrze behaved klient musi przesłać anulowania SCT ułatwiające usługi optymalizacji zasobów pamięci podręcznej. Jeśli wywołując utworzyć wystąpienie tej klasy <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> z `requireCancellation` równa parametr `true`, SCT wystawiono w ten sposób.  
  
-   Drugim jest niezależna SCT, który znajduje się w pliku cookie na komputerze klienckim. Ta SCT zawiera informacje o stanie całego, wymaga zarządzania stanem usługi ani anulowania SCT od klienta. Jest to czasem nazywane SCT "Tryb plików cookie". Ponieważ SCT zawiera informacje o stanie całego, jego rozmiar jest większy niż w przypadku opartego na sesji. Usługi za pomocą SCTs oparte na sesji, przechowuje ilości informacji o stanie. Jednak ponieważ jest ona niezależna, można na okres istnienia usługi i są utrwalane w usługa zamykania i ponownego uruchamiania.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContextClaimTypes : System.Collections.ObjectModel.Collection&lt;Type&gt;" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Type" /> oświadczenia dla pliku cookie serializacji.</summary>
        <value>Kolekcja <see cref="T:System.Type" /> oświadczenia dla pliku cookie serializacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do wykonywania serializacji oświadczenia do plików cookie SCT, korzysta z usługi Windows Communication Foundation (WCF) <xref:System.Runtime.Serialization.DataContractSerializer> jako domyślny. Ponieważ zasobów oświadczeń jest rozszerzalny, WCF umożliwia podanie listy zasoby znanych typów. Pomaga to <xref:System.Runtime.Serialization.DataContractSerializer> podczas deserializacji oświadczenia w plik cookie, które dział it może zwrócić oryginalnego silnie typizowanych obiektów.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób pobrania tej właściwości.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder with get, set" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia dostosowany <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> kodowania i dekodowania pliku cookie serializacji.</summary>
        <value>A <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> obiektu, który jest dostosowanie programu <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W "trybie plik cookie", problemy z usługą klienta tokenu kontekstu zabezpieczeń (SCT) w postaci pliku cookie do klienta tak, aby nie trzeba utrzymywać dowolny stan zabezpieczeń. Klient wysyła plik cookie w komunikacie żądania, aby usługa wie, jak wyłączyć ochronę oraz zweryfikować komunikatu żądania. Ponieważ SCT często są przesyłane za pośrednictwem sieci niezabezpieczone, muszą być chronione.  
  
 Domyślnie program Windows Communication Foundation (WCF) używa <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> klasy w celu ochrony plików cookie, przy użyciu interfejsu API ochrony danych (DPAPI). Interfejsu DPAPI do pracy w środowisku farmy sieci Web wszystkie usługi wewnętrznej bazy danych musi działać jako tego samego konta użytkownika domeny. Innymi słowy Jeśli usługa jest hostowana w sieci Web, proces roboczy usług Internet Information Services (IIS) należy można skonfigurować do uruchamiania jako użytkownik domeny.  
  
 Ta właściwość umożliwia użycie dostosowany <xref:System.ServiceModel.Security.SecurityStateEncoder> do szyfrowania i odszyfrowywania pliku cookie i nie są zależne od interfejsu DPAPI.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób ustawić tę właściwość.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>