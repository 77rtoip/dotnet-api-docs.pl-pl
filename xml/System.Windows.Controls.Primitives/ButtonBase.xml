<Type Name="ButtonBase" FullName="System.Windows.Controls.Primitives.ButtonBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13e555cd2ed8ffe1e34cbc976d8ddc082c6bce0a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30697529" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ButtonBase : System.Windows.Controls.ContentControl, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ButtonBase extends System.Windows.Controls.ContentControl implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ButtonBase&#xA;Inherits ContentControl&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class ButtonBase abstract : System::Windows::Controls::ContentControl, System::Windows::Input::ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Button)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje klasę podstawową dla wszystkich <see cref="T:System.Windows.Controls.Button" /> kontrolki.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń odpowiadać, gdy użytkownik kliknie <xref:System.Windows.Controls.Primitives.ButtonBase>. Użytkownik może zgłaszać <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń za pomocą <xref:System.Windows.Controls.AccessText> lub naciskając klawisz ENTER lub spację, gdy formant ma fokus.  Gdy użytkownik naciśnie spację, ustawia sterowania <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> do `true` i przechwytywanie myszy.  W związku z tym formant będzie wywoływanie zdarzeń myszy takich jak <xref:System.Windows.UIElement.MouseEnter> i <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>. Należy pamiętać, że przy użyciu <xref:System.Windows.Controls.AccessText> lub ENTER nie powoduje zmiany <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> lub przechwytywanie myszy, ale także podnieść go <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 <xref:System.Windows.Controls.Primitives.ButtonBase> Ustawia <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> dołączona właściwość do `true`.  
  
 <xref:System.Windows.Controls.Primitives.ButtonBase> Ustawia <xref:System.Windows.UIElement.IsInputMethodEnabled%2A> właściwości `false`.  
  
 A <xref:System.Windows.Controls.Primitives.ButtonBase> jest <xref:System.Windows.Controls.ContentControl>, co oznacza, że może zawierać pojedynczy obiekt dowolnego typu (np. ciąg, obrazu lub panelu). Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Controls.ContentControl> klasy.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ButtonBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ButtonBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Primitives.ButtonBase.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="T:System.Windows.Controls.Button" /> zostanie kliknięty.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użytkownik może zgłaszać <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń za pomocą <xref:System.Windows.Controls.AccessText> lub naciskając klawisz ENTER lub spację, gdy formant ma fokus.  Gdy użytkownik naciśnie spację, ustawia sterowania <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> do `true` i przechwytywanie myszy.  W związku z tym formant będzie wywoływanie zdarzeń myszy takich jak <xref:System.Windows.UIElement.MouseEnter> i <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>. Należy pamiętać, że przy użyciu <xref:System.Windows.Controls.AccessText> lub ENTER nie powoduje zmiany <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> lub przechwytywanie myszy, ale także podnieść go <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 <xref:System.Windows.Controls.Primitives.ButtonBase> Znaczniki <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzeń jako obsługiwane w <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> — metoda i zgłasza <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń. W związku z tym <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> nigdy nie wystąpi zdarzenie dla formantu, który dziedziczy z <xref:System.Windows.Controls.Primitives.ButtonBase>. Zamiast tego należy dołączyć program obsługi zdarzeń do <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> zdarzenia lub wywołanie <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` ustawioną `true`.  
  
<a name="routedEventInfo_Click"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Primitives.ButtonBase.ClickEvent>|  
|Strategii routingu|Bubbling|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono trzy przyciski, które odpowiadanie na kliknięcia na trzy różne sposoby.  
  
-   Hover - przycisku pierwszej zmiany kolorów, gdy użytkownik znajduje się za pomocą myszy nad przycisku  
  
-   Naciśnij klawisz - drugiego przycisku wymaga nacisnąć przycisk myszy, gdy wskaźnik myszy znajduje się przycisk.  
  
-   Release - trzeci nie powoduje resetowania kolor tła przycisków, dopóki wskaźnik myszy jest wciśnięty i wydane w ramach przycisku.  
  
 [!code-xaml[ClickModes_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml#1)]  
  
 [!code-csharp[ClickModes_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml.cs#2)]
 [!code-vb[ClickModes_snip#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClickModes_snip/VisualBasic/Window1.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ClickEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ClickEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.ClickEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClickEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ClickEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie odnosi się po lewej stronie kliknięcie przycisku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickMode">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ClickMode ClickMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ClickMode ClickMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ClickMode As ClickMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ClickMode ClickMode { System::Windows::Controls::ClickMode get(); void set(System::Windows::Controls::ClickMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ClickMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia, kiedy <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> zdarzenie.</summary>
        <value>Gdy <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> zdarzenie. Wartość domyślna to <see cref="F:System.Windows.Controls.ClickMode.Release" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_ClickMode"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClickModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClickModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClickModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClickModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia polecenie wywoływane po kliknięciu przycisku.</summary>
        <value>Polecenie wywoływane po kliknięciu przycisku. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest używana do skojarzenia z wystąpieniem określonego przycisku polecenia.  
  
 W [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], ta właściwość ma najczęściej wartość jako wartość polecenia statyczne z jednego z istniejących bibliotek polecenia, takich jak <xref:System.Windows.Input.ApplicationCommands> lub <xref:System.Windows.Input.NavigationCommands>. Aby uzyskać więcej informacji, zobacz [droższe omówienie](~/docs/framework/wpf/advanced/commanding-overview.md) lub <xref:System.Windows.Input.ICommand>.  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object Command="commandName"/>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *commandName*  
 Polecenie wywoływane po kliknięciu przycisku.  
  
<a name="dependencyPropertyInfo_Command"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia parametr do przekazania do <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> właściwości.</summary>
        <value>Parametr do przekazania do <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> właściwości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Większość istniejących poleceń z bibliotek polecenia należy używać parametru polecenia. Poleceń, które korzystają z parametrem polecenia większość z nich zająć parametr o niektórych wartości typu pierwotnego, takie jak liczba całkowita lub ciąg. Jednak można tworzyć niestandardowe polecenia jest, gdzie to polecenie oczekuje typu nonprimitive jako jego parametr polecenia. W przypadku polecenia niestandardowych, takich jak to ustawienie <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> kodu może wymagać wystąpienie nowego lub istniejącego obiektu. Ustawienie <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> w znaczniku może wymagać składni elementu właściwości, gdzie element object wypełnianie składni elementu właściwości to nowy element w typ oczekiwany przez polecenie. Możesz też ustawienie w znaczniku może wymagać odwołanie za pośrednictwem rozszerzenia znaczników do istniejącego obiektu (zwykle te odwołania są wykonywane przy [powiązanie — rozszerzenie znaczników](~/docs/framework/wpf/advanced/binding-markup-extension.md) lub [StaticResource — rozszerzenie znaczników ](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)).  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object CommandParameter="commandParameter" />  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *commandParameter*  
 Wartość tego samego typu co konkretnego polecenia określone w <xref:System.Windows.Controls.Primitives.ButtonBase.Command%2A> oczekuje właściwości. Jeśli używasz istniejącego polecenia biblioteki polecenia, zobacz dokumentację tej biblioteki polecenia dla [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] informacje dotyczące użycia typu w tym <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> polecenie oczekuje. Jeśli używasz polecenia niestandardowych, zobacz uwagi.  
  
<a name="dependencyPropertyInfo_CommandParameter"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje routingiem <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia element, dla którego zostanie wywołane określone polecenie.</summary>
        <value>Element, na którym należy wywołać polecenie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> Właściwości nie można użyć do zdefiniowania <xref:System.Windows.UIElement>. <xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> Właściwość zawiera odwołanie do elementu, który jest już zdefiniowany gdzieś w aplikacji.  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<ButtonBase CommandTarget="{Binding ElementName= elementName }"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *elementName*  
 Nazwa <xref:System.Windows.IInputElement> który odbierze polecenie.  
  
<a name="dependencyPropertyInfo_CommandTarget"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected override bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość <see cref="P:System.Windows.ContentElement.IsEnabled" /> właściwości.</summary>
        <value>
          <see langword="true" /> Jeśli formant jest włączony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli chcesz przesłonić tę implementację, należy upewnić się, że należy wywołać metodę podstawową.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPressed">
      <MemberSignature Language="C#" Value="public bool IsPressed { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPressed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPressed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:  property bool IsPressed {  public:&#xA;bool get(); protected:&#xA; void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> jest aktywowany.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> jest aktywowane; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> jest w stanie przycisku, który wskazuje lewego przycisku myszy lub naciśnięciu spacja na przycisku. Gdy <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> jest `true`, formantu przechwytuje mysz.  W związku z tym formant będzie wywoływanie zdarzeń myszy takich jak <xref:System.Windows.UIElement.MouseEnter> i <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>. Należy pamiętać, że przy użyciu <xref:System.Windows.Controls.AccessText> lub ENTER nie powoduje zmiany <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> lub przechwytywanie myszy, ale jest Zgłoś ma <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 Począwszy od programu .NET Framework w wersji 3.0 z dodatkiem Service Pack 1, <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> ma chronione metody ustawiającej. Aby używać tej funkcji, aplikacja powinna wskazywać .NET Framework w wersji 3.5.  Aby uzyskać więcej informacji, zobacz [wersje i zależności](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
<a name="dependencyPropertyInfo_IsPressed"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> właściwości stylu wyzwalacza.  
  
 [!code-xaml[BtnColor#9](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnColor/CSharp/Pane1.xaml#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPressedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsPressedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsPressedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsPressedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsPressedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected override void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> zdarzeń.</param>
        <summary>Odpowiada podczas <see cref="P:System.Windows.Controls.AccessText.AccessKey" /> jest nazywana tego formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Input.AccessKeyEventArgs.IsMultiple%2A> jest `true`, ta metoda wywołuje Podstawowa implementacja przenosi fokus tego formantu.  W przeciwnym razie ta metoda zgłasza <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zgłasza <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontrolka wywołuje <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzenia przez wywołanie metody <xref:System.Windows.UIElement.RaiseEvent%2A>. Aby uzyskać więcej informacji, zobacz [kierowane Przegląd zdarzeń](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsPressedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsPressedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsPressedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsPressedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsPressedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</param>
        <summary>Wywoływane, gdy <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> zmiany właściwości.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.KeyDown" /> kierowanego zdarzenia, który występuje, gdy użytkownik naciśnie klawisza, gdy formant ma fokus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja oznacza <xref:System.Windows.UIElement.KeyDown> zdarzeń jako obsługiwany dzięki ustawieniu <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości danych zdarzenia `true` podczas <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> nie jest ustawiony na <xref:System.Windows.Controls.ClickMode.Hover> i spełnione są jednym z następujących przypadków:  
  
-   Użytkownik naciska klawisz spacji.  
  
-   Użytkownik naciśnie ENTER i <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> jest `true` dla tego formantu.  
  
 We wszystkich innych przypadkach ta implementacja nie zmienia obsługiwanego stanu ( <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości) z <xref:System.Windows.UIElement.KeyDown> danych zdarzenia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli można zastąpić <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />, zawsze wywoływać implementację podstawową Twojej <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" /> implementacji. Nie można wywoływać implementację podstawową zapobiega obsługi zdarzeń z obsługą klasy, która może zmienić zachowania w czasie wykonywania końcowej klasy klas podstawowych. W zależności od wymagań, można wywoływać implementację podstawową przed lub po Twoje specjalnej obsługi.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia <see cref="E:System.Windows.UIElement.KeyUp" /> zdarzeń.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.KeyUp" /> kierowanego zdarzenia, który występuje, gdy użytkownik zwolni klawisz, gdy formant ma fokus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja oznacza <xref:System.Windows.UIElement.KeyUp> zdarzeń jako obsługiwany dzięki ustawieniu <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości danych zdarzenia `true` gdy użytkownik zwolni klawisz spacji. W przeciwnym razie ta implementacja nie zmienia obsługiwanego stanu ( <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości) z <xref:System.Windows.UIElement.KeyUp> danych zdarzenia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli można zastąpić <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />, zawsze wywoływać implementację podstawową Twojej <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" /> implementacji. Nie można wywoływać implementację podstawową zapobiega obsługi zdarzeń z obsługą klasy, która może zmienić zachowania w czasie wykonywania końcowej klasy klas podstawowych. W zależności od wymagań, można wywoływać implementację podstawową przed lub po Twoje specjalnej obsługi.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected override void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia <see cref="E:System.Windows.IInputElement.LostKeyboardFocus" /> zdarzeń.</param>
        <summary>Wywoływane, gdy element utraci fokus klawiatury.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected override void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> zdarzeń.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.LostMouseCapture" /> kierowanego zdarzenia, gdy ten formant nie jest otrzymują komunikaty zdarzeń myszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja nie zmienia stanu obsługiwany ( <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości) z <xref:System.Windows.UIElement.LostMouseCapture> danych zdarzenia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli można zastąpić <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />, zawsze wywoływać implementację podstawową Twojej <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" /> implementacji. Nie można wywoływać implementację podstawową zapobiega obsługi zdarzeń z obsługą klasy, która może zmienić zachowania w czasie wykonywania końcowej klasy klas podstawowych. W zależności od wymagań, można wywoływać implementację podstawową przed lub po Twoje specjalnej obsługi.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> zdarzeń.</param>
        <summary>Udostępnia klasę obsługi <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> kierowanego zdarzenia, który występuje, gdy mysz przejdzie tego formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> ma ustawioną wartość <xref:System.Windows.Controls.ClickMode.Hover>, oznacza to implementacja <xref:System.Windows.UIElement.MouseEnter> zdarzeń jako obsługiwany dzięki ustawieniu <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości danych zdarzenia `true` i zgłasza <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli można zastąpić <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />, zawsze wywoływać implementację podstawową Twojej <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" /> implementacji. Nie można wywoływać implementację podstawową zapobiega obsługi zdarzeń z obsługą klasy, która może zmienić zachowania w czasie wykonywania końcowej klasy klas podstawowych. W zależności od wymagań, można wywoływać implementację podstawową przed lub po Twoje specjalnej obsługi.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> zdarzeń.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.MouseLeave" /> kierowanego zdarzenia, który występuje, gdy mysz opuści elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja oznacza <xref:System.Windows.UIElement.MouseLeave> zdarzeń jako obsługiwany dzięki ustawieniu <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości danych zdarzenia `true` podczas <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> ma ustawioną wartość <xref:System.Windows.Controls.ClickMode.Hover>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli można zastąpić <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />, zawsze wywoływać implementację podstawową Twojej <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" /> implementacji. Nie można wywoływać implementację podstawową zapobiega obsługi zdarzeń z obsługą klasy, która może zmienić zachowania w czasie wykonywania końcowej klasy klas podstawowych. W zależności od wymagań, można wywoływać implementację podstawową przed lub po Twoje specjalnej obsługi.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> kierowanego zdarzenia, która występuje po naciśnięciu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tego formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja oznacza <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzeń jako obsługiwany dzięki ustawieniu <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości danych zdarzenia `true` podczas <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> nie jest ustawiony na <xref:System.Windows.Controls.ClickMode.Hover>. Aby odpowiedzieć na <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzeń, dołączyć program obsługi zdarzeń do <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> zdarzenia lub wywołanie <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` ustawioną `true`.  
  
 Gdy <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> ustawiono <xref:System.Windows.Controls.ClickMode.Press>, ta metoda zgłasza <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli można zastąpić <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />, zawsze wywoływać implementację podstawową Twojej <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" /> implementacji. Nie można wywoływać implementację podstawową zapobiega obsługi zdarzeń z obsługą klasy, która może zmienić zachowania w czasie wykonywania końcowej klasy klas podstawowych. W zależności od wymagań, można wywoływać implementację podstawową przed lub po Twoje specjalnej obsługi.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> kierowanego zdarzenia, która występuje po zwolnieniu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tego formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja oznacza <xref:System.Windows.UIElement.MouseLeftButtonUp> zdarzeń jako obsługiwany dzięki ustawieniu <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości danych zdarzenia `true` podczas <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> nie jest ustawiony na <xref:System.Windows.Controls.ClickMode.Hover>. Aby odpowiedzieć na <xref:System.Windows.UIElement.MouseLeftButtonUp> zdarzeń, dołączyć program obsługi zdarzeń do <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> zdarzenia lub wywołanie <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` ustawioną `true`.  
  
 Gdy <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> ustawiono <xref:System.Windows.Controls.ClickMode.Release> jest <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> jest `true`, ta metoda zgłasza <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli można zastąpić <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />, zawsze wywoływać implementację podstawową Twojej <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" /> implementacji. Nie można wywoływać implementację podstawową zapobiega obsługi zdarzeń z obsługą klasy, która może zmienić zachowania w czasie wykonywania końcowej klasy klas podstawowych. W zależności od wymagań, można wywoływać implementację podstawową przed lub po Twoje specjalnej obsługi.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.MouseMove" /> kierowanego zdarzenia, który występuje, gdy wskaźnik myszy porusza się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja oznacza <xref:System.Windows.UIElement.MouseMove> zdarzeń jako obsługiwany dzięki ustawieniu <xref:System.Windows.RoutedEventArgs.Handled%2A> właściwości danych zdarzenia `true` podczas <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> nie jest ustawiony na <xref:System.Windows.Controls.ClickMode.Hover> i <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> jest `true`. Aby odpowiedzieć na <xref:System.Windows.UIElement.MouseMove> zdarzeń, dołączyć program obsługi zdarzeń do <xref:System.Windows.ContentElement.PreviewMouseMove> zdarzenia lub wywołanie <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` ustawioną `true`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli można zastąpić <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />, zawsze wywoływać implementację podstawową Twojej <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" /> implementacji. Nie można wywoływać implementację podstawową zapobiega obsługi zdarzeń z obsługą klasy, która może zmienić zachowania w czasie wykonywania końcowej klasy klas podstawowych. W zależności od wymagań, można wywoływać implementację podstawową przed lub po Twoje specjalnej obsługi.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">Określa zmiany rozmiaru.</param>
        <summary>Wywoływane, gdy zmieni się rozmiar renderowanych formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zastępuje <xref:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged%2A> metody <xref:System.Windows.UIElement>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>