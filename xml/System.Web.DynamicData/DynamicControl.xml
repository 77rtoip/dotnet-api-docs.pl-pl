<Type Name="DynamicControl" FullName="System.Web.DynamicData.DynamicControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2ad449c084f3fbbe5f36562fdca675ad4cb2658c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30582589" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicControl : System.Web.UI.Control, System.Web.DynamicData.IFieldFormattingOptions, System.Web.DynamicData.IFieldTemplateHost, System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicControl extends System.Web.UI.Control implements class System.Web.DynamicData.IFieldFormattingOptions, class System.Web.DynamicData.IFieldTemplateHost, class System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicControl" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicControl&#xA;Inherits Control&#xA;Implements IAttributeAccessor, IFieldFormattingOptions, IFieldTemplateHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicControl : System::Web::UI::Control, System::Web::DynamicData::IFieldFormattingOptions, System::Web::DynamicData::IFieldTemplateHost, System::Web::UI::IAttributeAccessor" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldFormattingOptions</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldTemplateHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IAttributeAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.bmp")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyświetla zawartość, która jest zdefiniowana dla pola w formantach powiązanych z danymi szablonem, za pomocą funkcji danych dynamicznych platformy ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym temacie:  
  
-   [Wprowadzenie](#introduction)  
  
-   [Składni deklaratywnej](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Wprowadzenie  
 <xref:System.Web.DynamicData.DynamicControl> Formant jest używany przez opartego na szablonie formanty powiązane z danymi, takich jak <xref:System.Web.UI.WebControls.FormView> lub <xref:System.Web.UI.WebControls.ListView>, aby wyświetlić pola danych, który używa funkcji danych dynamicznych platformy ASP.NET w niestandardowej strony. Można również użyć <xref:System.Web.DynamicData.DynamicControl> kontroli w <xref:System.Web.UI.WebControls.TemplateField> pole <xref:System.Web.UI.WebControls.GridView> lub <xref:System.Web.UI.WebControls.DetailsView> formantu.  
  
 <xref:System.Web.DynamicData.DynamicControl> Formant zawiera funkcję, która jest podobna do <xref:System.Web.DynamicData.DynamicField> pola. Jednak ponieważ <xref:System.Web.DynamicData.DynamicControl> kontroli jest używana tylko wewnątrz szablonów, zapewnia większą elastyczność kontroli, jak dane są wyświetlane, ponieważ można dodać inne elementy HTML wokół pola. Jeśli używasz <xref:System.Web.DynamicData.DynamicControl> sterowania, można korzystać z następujących funkcji danych dynamicznych:  
  
-   Automatycznie renderowania kontroli dla pola przy użyciu szablonów pól na podstawie typu danych. Szablony pól można globalnie modyfikować dla całej aplikacji.  
  
-   Udostępnianie danych wbudowanych weryfikacji na podstawie schematu bazy danych. Można również dodać typy sprawdzania poprawności, dostosowując modelu danych.  
  
-   Dostosowywanie Renderowanie danych dla poszczególnych pól, za pomocą atrybutów w modelu danych lub za pomocą <xref:System.Web.DynamicData.DynamicField.UIHint%2A> właściwości.  
  
 Aby określić pole do wyświetlenia w <xref:System.Web.DynamicData.DynamicControl> kontrolować, ustaw <xref:System.Web.DynamicData.DynamicControl.DataField%2A> dla właściwości nazwy pola. Można zastosować niestandardowy ciąg formatowania do wartości pola przez ustawienie <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> właściwości. Domyślnie jest stosowany do wartości pola ciąg formatowania, tylko wtedy, gdy formant powiązany z danymi jest w trybie tylko do odczytu. Aby zastosować ciągu formatowania wartości wyświetlane, gdy formant powiązany z danymi jest w trybie edycji, ustaw <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> właściwości `true`. Jeśli pole ma wartość `null`, podpis niestandardowego można wyświetlić, ustawiając <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> właściwości. <xref:System.Web.DynamicData.DynamicControl> Formant może również automatycznie przekonwertować pustego ciągu ("") do pola przez ustawienie wartości do wartości null <xref:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull%2A> właściwości `true`.  
  
 <xref:System.Web.DynamicData.DynamicControl> Sterowanie obsługuje trybów wyświetlania. Aby określić tryb wyświetlania <xref:System.Web.DynamicData.DynamicControl> kontrolować, ustaw <xref:System.Web.DynamicData.DynamicControl.Mode%2A> właściwości. W poniższej tabeli przedstawiono różne tryby.  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>  
 dla trybu wyświetlania. Uniemożliwia to modyfikowanie wartości pola danych lub rekordu użytkownika. Może służyć w tych szablonów.  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>  
 w trybie edycji. Dzięki temu użytkownicy zaktualizować wartości istniejącego rekordu. Jest on używany w szablonie edycji (zwykle o nazwie `EditItemTemplate`).  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>  
 w trybie wstawiania. Umożliwia to użytkownikom na wprowadzanie wartości dla nowego rekordu. Jest on używany w szablonie Wstaw (zwykle o nazwie `InsertItemTemplate`).  
  
 Można ukryć <xref:System.Web.DynamicData.DynamicControl> formantu w formancie powiązane z danymi, ustawiając <xref:System.Web.UI.Control.Visible%2A> właściwości `false`.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Składnia deklaracyjna  
  
```  
<asp:DynamicControl  
    ApplyFormatInEditMode="True|False"  
    ConvertEmptyStringToNull="True|False"  
    CssClass="string"  
    DataField="string"  
    DataFormatString="string"  
    EnableViewState="True|False"  
    HtmlEncode="True|False"  
    ID="string"  
    Mode="Edit|Insert|ReadOnly"  
    NullDisplayText="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    UIHint="string"  
    ValidationGroup="string"  
    Visible="True|False"  
>  
</asp:DynamicControl>  
```  
  
   
  
## Examples  
 Zobacz przykładowego kodu w czasie wykonywania tej funkcji: [Uruchom](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl).  
  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Web.DynamicData.DynamicControl> kontroli w <xref:System.Web.UI.WebControls.ListView> formantu, aby wyświetlić, wstawianie, usuwanie i edytowanie wartości z tabeli bazy danych. Ważne jest, aby Zwróć uwagę, że operacja wstawiania do pracy, aby <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> właściwość `rowguid` i `ModifiedDate` kolumny są ustawione `true`.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.ListView" />
    <altmember cref="T:System.Web.UI.WebControls.Repeater" />
    <altmember cref="T:System.Web.DynamicData.DynamicField" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.DynamicData.DynamicControl" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.DynamicData.DynamicControl" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl (System.Web.UI.WebControls.DataBoundControlMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.WebControls.DataBoundControlMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As DataBoundControlMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl(System::Web::UI::WebControls::DataBoundControlMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.UI.WebControls.DataBoundControlMode" />
      </Parameters>
      <Docs>
        <param name="mode">Jedna z wartości wyliczenia, które określa tryb formantu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.DynamicData.DynamicControl" /> klasy z określonym trybem.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplyFormatInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApplyFormatInEditMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ciąg formatowania określone przez <see cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" /> właściwość jest stosowana do wartości pola, gdy pole jest w trybie edycji.</summary>
        <value>
          <see langword="true" /> Jeśli zastosowano ciągu formatowania; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicControl> Formantem i trybów wyświetlania, które umożliwiają użytkownikom do odczytu, edytować lub wstawić pole. Domyślnie ten ciąg formatowania określony przez <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> właściwość jest stosowana do wartości pola tylko wtedy, gdy <xref:System.Web.DynamicData.DynamicControl> formant jest w trybie tylko do odczytu. Aby zastosować ciągu formatowania wartości wyświetlane, gdy formant powiązany z danymi jest w trybie edycji, ustaw <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> właściwości `true`.  
  
> [!NOTE]
>  <xref:System.Web.DynamicData.DynamicControl> Formantu nie są automatycznie usuwane formatowania po zaktualizowaniu pole w źródle danych. Jeśli nie chcesz formatowania wartości przechowywanej w ramach, konieczne będzie usunięcie formatowania programowo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Mode" />
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt kolumn, który jest skojarzony z formantem.</summary>
        <value>Obiekt kolumn, który jest skojarzony z formantem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Web.DynamicData.DynamicControl.Column%2A> właściwości, aby uzyskać informacje o metadanych o określonej kolumny. <xref:System.Web.DynamicData.DynamicControl.Column%2A> Właściwość jest automatycznie ustawiana przez <xref:System.Web.DynamicData.DynamicControl> formant oparty na nazwę pola przewidzianych <xref:System.Web.DynamicData.DynamicControl.DataField%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Table" />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertEmptyStringToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertEmptyStringToNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy puste ciągi ("") są automatycznie konwertowane do wartości null po zaktualizowaniu pole danych w źródle danych.</summary>
        <value>
          <see langword="true" /> Jeśli wartości pustego ciągu zostaną automatycznie przekonwertowane na wartości null. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Parameter> z kontroli źródła danych ma również właściwość o nazwie <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=nameWithType>. Ta właściwość działa tak samo. Upewnij się, że obie właściwości są ustawione właściwie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CssClass">
      <MemberSignature Language="C#" Value="public virtual string CssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CssClass" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CssClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CssClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.CssClassProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia klasę kaskadowych arkuszy stylów (CSS), który określa style dla <see cref="T:System.Web.DynamicData.DynamicControl" /> kontroli zawartości.</summary>
        <value>Nazwa klasy CSS.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę pola danych, które <see cref="T:System.Web.DynamicData.DynamicControl" /> formant jest powiązany.</summary>
        <value>Nazwa pola danych do powiązania <see cref="T:System.Web.DynamicData.DynamicControl" /> formant. Wartość domyślna to ciąg pusty (""), co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.DynamicData.DynamicControl.DataField%2A> właściwości w celu określenia pole danych, aby powiązać <xref:System.Web.DynamicData.DynamicControl> formantu. W polu danych może być kolumna nazwie lub dla kolumny klucza obcego, Nazwa relacji.  
  
 Domyślnie, wyświetlane jest pole określone dane, przez <xref:System.Web.DynamicData.DynamicControl> sterować przy użyciu szablonu pola, która jest skojarzona z typem danych pola. Można zmienić szablonu pola, który jest renderowany w polu danych przez ustawienie <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> właściwości. Można również sformatować tekstu wyświetlanego przez ustawienie <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> właściwości.  
  
 **Uwaga** Jeśli chcesz zmienić globalnie wyświetlania i zachowanie pola danych, należy zastosować atrybutów do modelu danych zamiast to ustawienie w konkretnego wystąpienia <xref:System.Web.DynamicData.DynamicControl> formantu. Aby uzyskać więcej informacji, zobacz [danych dynamicznych platformy ASP.NET](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.Web.DynamicData.DynamicControl.DataField%2A> właściwości w celu określenia pole, które mają być wyświetlane w <xref:System.Web.DynamicData.DynamicControl> formantu.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/VB/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.UIHint" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ciąg, który określa format wyświetlania wartości pola.</summary>
        <value>Ciąg formatowania, który określa format wyświetlania wartości pola. Wartość domyślna to ciąg pusty (""), co oznacza, że specjalne formatowanie nie jest stosowane do wartości pola.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> właściwości w celu określenia niestandardowych formatów wyświetlania wartości wyświetlanych w <xref:System.Web.DynamicData.DynamicControl> formantu. Jeśli <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> właściwość nie jest ustawiona, wartość pola jest wyświetlany bez żadnego formatowania.  
  
 Domyślnie ten ciąg formatowania jest stosowany do wartości pola tylko wtedy, gdy <xref:System.Web.DynamicData.DynamicControl.Mode%2A> właściwość jest ustawiona na <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>. Aby zastosować ciąg formatowania do wartości pola w trybie edycji, ustaw <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> właściwości `true`.  
  
 Format wyświetlania, które można określić za pomocą <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> właściwości jest przeznaczony dla tego wystąpienia <xref:System.Web.DynamicData.DynamicControl> formantu. Format wyświetlania dla pola danych można zmienić w całej aplikacji, stosując <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute> do modelu danych i ustawienie <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=nameWithType> nazwany parametr w konstruktorze. Aby uzyskać więcej informacji, zobacz [danych dynamicznych platformy ASP.NET](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
        <altmember cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
      </Docs>
    </Member>
    <Member MemberName="FieldTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FieldTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FieldTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FieldTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FieldTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera szablon pola, dla którego utworzono <see cref="T:System.Web.DynamicData.DynamicControl" /> formantu.</summary>
        <value>Szablon pola, dla którego utworzono <see cref="T:System.Web.DynamicData.DynamicControl" /> formantu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetAttribute(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa atrybutu.</param>
        <summary>Pobiera wartość atrybutu przy użyciu określonego klucza.</summary>
        <returns>Wartość atrybutu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli zbieranie atrybutów jest `null`, ta metoda zwraca pusty ciąg.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberSignature Language="VB.NET" Value="Public Property HtmlEncode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HtmlEncode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy w danych dla formantu jest kodowany w formacie HTML przed renderowaniem.</summary>
        <value>
          <see langword="true" /> Jeśli danych dla formantu jest kodowany w formacie HTML przed renderowaniem; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.DynamicData.DynamicControl.HtmlEncode%2A> właściwości w celu określenia, czy wartości pól są kodowany w formacie HTML do ich odpowiednich ciąg oświadczenia zanim zostaną one wyświetlone.  
  
> [!NOTE]
>  Kodowanie HTML pola wartości pomaga zapobiegać wyświetlaniu ataków skryptów między witrynami i złośliwej zawartości. Ta właściwość powinna być włączona, jeśli to możliwe. Aby uzyskać więcej informacji, zobacz [Przegląd wykorzystuje skryptu](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.DataBoundControlMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As DataBoundControlMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::DataBoundControlMode Mode { System::Web::UI::WebControls::DataBoundControlMode get(); void set(System::Web::UI::WebControls::DataBoundControlMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb renderowania.</summary>
        <value>Jedna z wartości wyliczenia, które określa tryb renderowania dla formantu. Wartość domyślna to <see cref="F:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.DynamicData.DynamicControl.Mode%2A> właściwości w celu określenia tryb renderowania, który zostanie użyty do wyświetlenia <xref:System.Web.DynamicData.DynamicControl> formantu. W poniższej tabeli przedstawiono różne tryby.  
  
|Tryb|Opis|  
|----------|-----------------|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>|dla trybu wyświetlania. Uniemożliwia to modyfikowanie wartości pola danych lub rekordu użytkownika. Może służyć w tych szablonów. Jest to wartość domyślna.|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>|w trybie edycji. Dzięki temu użytkownicy zaktualizować wartości istniejącego rekordu. Jest on używany w `EditItemTemplate` szablonu.|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>|w trybie wstawiania. Umożliwia to użytkownikom na wprowadzanie wartości dla nowego rekordu. Jest on używany w `InsertItemTemplate` szablonu.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberSignature Language="VB.NET" Value="Public Property NullDisplayText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NullDisplayText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia Podpis wyświetlany dla pola danych, wartość pola jest <see langword="null" />.</summary>
        <value>Podpis wyświetlany dla pola danych, wartość pola jest <see langword="null" />. Wartość domyślna to ciąg pusty (""), co oznacza, że ta właściwość nie jest ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasami wartość pola jest przechowywana jako wartość null w źródle danych. Można określić niestandardowe podpis ma być wyświetlany dla pola, które mają wartość null przez ustawienie <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> właściwości. Jeśli ta właściwość nie jest ustawiona, wartości null pola są wyświetlane jako puste ciągi ("").  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Web.UI.Control.Init" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Web.DynamicData.DynamicControl.OnInit%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.DynamicData.DynamicControl.DataField" /> Nie ustawiono właściwości.</exception>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Obiekt, który jest używany do renderowania <see cref="T:System.Web.DynamicData.DynamicControl" /> kontrolowanie zawartości w przeglądarce klienta.</param>
        <summary>Renderuje <see cref="T:System.Web.DynamicData.DynamicControl" /> kontroli zawartości do przeglądarki klienta przy użyciu określonego <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicControl.Render%2A> Metody jest głównie używana przez deweloperów formant do rozszerzenia <xref:System.Web.DynamicData.DynamicControl> formantu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttribute(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAttribute(System::String ^ key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa atrybutu, aby ustawić.</param>
        <param name="value">Wartość do przypisania do atrybutu.</param>
        <summary>Ustawia określoną wartość określonego atrybutu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions">
      <MemberSignature Language="C#" Value="System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property FormattingOptions As IFieldFormattingOptions Implements IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::DynamicData::IFieldFormattingOptions ^ System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { System::Web::DynamicData::IFieldFormattingOptions ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldFormattingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />.</summary>
        <value>Opcje formatowania, który ma zostać zastosowany do szablonu pola.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.MetaTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Table" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Table As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::DynamicData::MetaTable ^ Table { System::Web::DynamicData::MetaTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt tabeli, który jest skojarzony z formantem.</summary>
        <value>Obiekt tabeli, który jest skojarzony z formantem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.DynamicData.DynamicControl.Table%2A> właściwości uzyskanie dostępu do metadanych informacji o tabeli, która jest skojarzona z formantem powiązane z danymi, który zawiera <xref:System.Web.DynamicData.DynamicControl> formantu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <see cref="T:System.Web.DynamicData.DynamicControl" /> Formant znajduje się wewnątrz kontrolki powiązania danych, który nie jest powiązany z kontrolą źródła danych, który implementuje <see cref="T:System.Web.DynamicData.IDynamicDataSource" /> interfejsu.</exception>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Column" />
      </Docs>
    </Member>
    <Member MemberName="UIHint">
      <MemberSignature Language="C#" Value="public virtual string UIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę szablonu pola, który zostanie użyty do wyświetlenia w polu danych.</summary>
        <value>Nazwa szablonu pola, który zostanie użyty do wyświetlenia w polu danych. Wartość domyślna to ciąg pusty (""), co oznacza, że szablon pole będzie renderowany na podstawie typu pola danych lub informacji o metadanych zastosowano do modelu danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> właściwości w celu określenia pola szablon zostanie użyty do wyświetlenia interfejsu użytkownika dla pola danych. Szablony pól domyślnie są kontrolek użytkownika i ich nazwy zawierają sufiks, aby zidentyfikować szablony pola, które są używane dla operacji Edytuj i liczba operacji wstawienia. Sufiksy są odpowiednio _edytuj i _Wstaw. Jeśli zostanie ustawiona wartość <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> właściwość, ustaw nazwę bez sufiksy. Identyfikuje tryb danych dynamicznych wyniku obliczenia <xref:System.Web.DynamicData.DynamicControl.Mode%2A> właściwości wartość i będzie renderowania szablonu poprawne pola.  
  
 Jeśli <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> właściwość nie jest ustawiona, domyślnie danych dynamicznych spowoduje, że szablon pole na podstawie typu pola. Aby uzyskać więcej informacji, zobacz [funkcja szkieletów danych dynamicznych ASP.NET](http://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12).  
  
 Szablon pola, który można określić za pomocą <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> właściwości jest przeznaczony dla tego wystąpienia <xref:System.Web.DynamicData.DynamicControl> formantu. Możesz również zmienić szablonu pola używane przez pola danych w całej aplikacji, stosując <xref:System.ComponentModel.DataAnnotations.UIHintAttribute> do modelu danych. Ustawienie <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> właściwość zastępuje metadane zastosowano do modelu danych. Aby uzyskać więcej informacji na temat atrybutów metadanych, zobacz [danych dynamicznych platformy ASP.NET](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).  
  
   
  
## Examples  
 Zobacz przykładowego kodu w czasie wykonywania tej funkcji: [Uruchom](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl.UIHint).  
  
 W poniższym przykładzie pokazano, jak można określić pole danych, aby użyć szablonu inne pole do renderowania zawartości. W drugim przykładzie szablonu niestandardowego pola określonego przez <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> właściwości.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Default.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Email.ascx#2)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Email.ascx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę grupy sprawdzania poprawności dla formantu.</summary>
        <value>Nazwa grupy walidacji formantu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sprawdzanie poprawności grupy umożliwiają przypisywanie weryfikacji formantów na stronie do jednej konkretnej kategorii. Każda grupa sprawdzania poprawności można zweryfikować niezależnie od innych grup sprawdzania poprawności na stronie. Użyj <xref:System.Web.DynamicData.DynamicControl.ValidationGroup%2A> właściwości w celu określenia Nazwa grupy walidacji, dla którego <xref:System.Web.DynamicData.DynamicControl> formant powoduje weryfikacji po stronie ogłoszenia na serwerze.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>