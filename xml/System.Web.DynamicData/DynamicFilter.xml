<Type Name="DynamicFilter" FullName="System.Web.DynamicData.DynamicFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f41522e7936ecab719707b142c69acb3c0848010" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36601473" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicFilter : System.Web.UI.Control, System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicFilter extends System.Web.UI.Control implements class System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicFilter&#xA;Inherits Control&#xA;Implements IFilterExpressionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicFilter : System::Web::UI::Control, System::Web::DynamicData::IFilterExpressionProvider" />
  <TypeSignature Language="F#" Value="type DynamicFilter = class&#xA;    inherit Control&#xA;    interface IFilterExpressionProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFilterExpressionProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Wyświetla interfejsu użytkownika w celu filtrowania wiersze tabeli, używając określonej kolumny.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W tym temacie:  
  
-   [Wprowadzenie](#introduction)  
  
-   [ClassContext](#ClassContext)  
  
-   [Składni deklaratywnej](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Wprowadzenie  
 <xref:System.Web.DynamicData.DynamicFilter> Formant jest używany w znaczniku strony do generowania interfejsu użytkownika w celu filtrowania wierszy tabeli. Dane dynamiczne tworzy interfejsu użytkownika przy użyciu filtru domyślnych szablonów, które znajdują się w folderze ~\DynamicData\Filters. Te szablony obsługuje typy kolumn klucza obcego, Boolean i wyliczenia.  
  
 W poniższej tabeli przedstawiono niektóre z zadań, które można wykonywać.  
  
|Scenariusz|Opis|  
|--------------|-----------------|  
|Określ kolumny służące do filtrowania wiersza tabeli.|Użyj właściwości <xref:System.Web.DynamicData.DynamicFilter.DataField%2A> do określenia kolumny służące do filtrowania wiersza tabeli.|  
|Określ nazwę szablonu filtru używać do tworzenia interfejsu użytkownika.|Użyj właściwości <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> do określenia nazwy szablonu filtru używać do tworzenia interfejsu użytkownika.|  
|Wykonaj operacje niestandardowe przed renderowaniem interfejsu użytkownika.|Użyj <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> do operacji niestandardowych przed renderowaniem interfejsu użytkownika.|  
  
 Można określić szablonu filtru do użycia w następujący sposób:  
  
-   Za pomocą <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> właściwości w znaczniku strony. Ta metoda jest dostosowanie warstwę prezentacji, która jest niezależna od schematu (baza danych), a co dotyczy jednej strony.  
  
-   Za pomocą <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> atrybutu w modelu. Ta metoda jest dostosowanie Warstwa danych, która jest zależna od określonego schematu (baza danych) i które ma zastosowanie do całej aplikacji.  
  
 Jeśli używasz obu podejść szablonu filtru, który jest określony w znaczniku mają pierwszeństwo przed szablon, który określono w modelu danych.  
  
<a name="ClassContext"></a>   
## <a name="class-context"></a>Kontekst klasy  
 <xref:System.Web.DynamicData.DynamicFilter> Kontroli jest przeznaczona do pracy z <xref:System.Web.UI.WebControls.QueryExtender> formantu. <xref:System.Web.DynamicData.DynamicFilter> Odwołuje się formant <xref:System.Web.DynamicData.DynamicFilterExpression> wystąpienie wewnątrz <xref:System.Web.UI.WebControls.QueryExtender> obiektu w znaczniku strony.  
  
 Na poniższej ilustracji przedstawiono kroki, które następuje danymi dynamicznymi w celu wdrożenia filtrowanie według kolumny klucza obcego wiersza tabeli.  
  
 ![Elementy zapytania danych dynamicznych](~/add/media/dynamic-dataquery.png "elementy zapytania danych dynamicznych")  
  
1.  <xref:System.Web.DynamicData.DynamicFilter> Kontroli przekazuje wybranej wartości do <xref:System.Web.UI.WebControls.QueryExtender> formantu.  
  
2.  <xref:System.Web.UI.WebControls.QueryExtender> Kontroli używa wartości, aby utworzyć kwerendę filtrowania informacji. Następnie przekazuje informację do kontroli źródła danych.  
  
3.  Kontroli źródła danych przekazuje filtrowania informacji zapytanie do dostawcy źródła danych.  
  
4.  Dostawca źródła danych przekazuje zapytanie do bazy danych.  
  
5.  Bazy danych zwraca wiersze tabeli filtrowane.  
  
6.  Dostawca źródła danych wysyła te dane z powrotem do kontroli źródła danych.  
  
7.  Formant źródła danych przekazuje wiersze tabeli filtrowane do kontrolki powiązania danych do wyświetlenia.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Składnia deklaracyjna  
  
```  
<asp:DynamicFilter  
    ID="Control ID"  
    DataField="Name of the data field to use for filtering"  
    EnableViewState="True|False"   
    FilterUIHint="Name of the filter template to generate the UI"  
    OnFilterChanged="Filter changed event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"   
    Visible="True|False"  
    runat="server"/>  
```  
  
   
  
## Examples  
 Projektu programu Visual Studio z kodem źródłowym jest dostępne w tej lokalizacji: [Pobierz](http://go.microsoft.com/fwlink/?LinkId=168914).  
  
 Poniższe przykłady szablon domyślny ForeignKey.ascx filtr do tworzenia interfejsu użytkownika do filtrowania według kolumny klucza obcego ProductCategory wiersze tabeli Produkty. Gdy użytkownik wybierze wartość ProductCategory, są wyświetlane tylko wiersze zawierające tę wartość.  
  
 Przykład wymaga następujących elementów:  
  
-   Dynamiczne danych witryny lub aplikacji sieci Web danych dynamicznych. Dzięki temu można utworzyć `AdventureWorksLTDataContext` kontekst danych dla bazy danych oraz do tworzenia klas dla tabele, aby uzyskać dostęp. Aby uzyskać więcej informacji, zobacz `Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding`.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx#1)]  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#2)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.DynamicData.DynamicFilter" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj nie zostanie wywołana <xref:System.Web.DynamicData.DynamicFilter.%23ctor%2A> bezpośrednio konstruktora. Zamiast tego należy użyć <xref:System.Web.DynamicData.DynamicFilter> klasy w znaczniku strony i klasy został zainicjowany podczas ładowania strony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="protected internal System.Web.DynamicData.MetaColumn Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.Column" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn" Usage="System.Web.DynamicData.DynamicFilter.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kolumnę tabeli można użyć do filtrowania.</summary>
        <value>Kolumna tabeli używana w celu filtrowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest tylko do użytku wewnętrznego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę kolumny służące do filtrowania wiersza tabeli.</summary>
        <value>Nazwa kolumny używanej do filtrowania wiersza tabeli.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak można określić kolumny wiersza tabeli filtrowanie w znaczniku.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    DataField="ProductCategory" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FilterChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FilterChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.DynamicData.DynamicFilter.FilterChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event FilterChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FilterChanged;" />
      <MemberSignature Language="F#" Value="member this.FilterChanged : EventHandler " Usage="member this.FilterChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wybierz wartość dla klucza obcego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> Zdarzenie jest wywoływane, gdy użytkownik wybierze wartość klucza obcego i przed wyświetleniem nową wartość. Dzięki temu można posługiwać się metody obsługi zdarzeń, które mogą wykonywać operacje niestandardowe, takie jak stronicowania niestandardowego.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak obsługi zdarzenia filtr został zmieniony. Program obsługi resetuje indeksu strony przed filtrowane wiersze są wyświetlane.  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#3)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FilterTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FilterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FilterTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterTemplate : System.Web.UI.Control" Usage="System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera szablon filtru, który jest skojarzony z bieżącym wystąpieniem tego formantu.</summary>
        <value>Szablon filtru, który jest skojarzony z bieżącym wystąpieniem tego formantu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dane dynamiczne generuje filtrowania wiersze tabeli, kolumny obsługiwanych typów interfejsu użytkownika. Używa domyślnych szablonów filtru, które znajdują się w folderze ~\DynamicData\Filters.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterUIHint">
      <MemberSignature Language="C#" Value="public string FilterUIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterUIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterUIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterUIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterUIHint : string with get, set" Usage="System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę szablonu filtru, który służy do tworzenia interfejsu użytkownika.</summary>
        <value>Nazwa szablonu filtru.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> Właściwość umożliwia określenie szablon filtru, aby utworzyć interfejsu użytkownika w celu filtrowania wiersza tabeli. Można określić szablonu filtru do użycia w następujący sposób:  
  
-   Za pomocą <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> właściwości w znaczniku strony. Ta metoda jest dostosowanie warstwę prezentacji, która jest niezależna od schematu (baza danych) i które dotyczy jednej strony.  
  
-   Za pomocą <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> atrybutu w modelu. Ta metoda jest dostosowanie Warstwa danych, która jest zależna od określonego schematu (baza danych) i które ma zastosowanie do całej aplikacji.  
  
 Jeśli używasz obu podejść szablonu filtru określony w znaczniku mają pierwszeństwo przed szablon określony w modelu danych.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak określić szablonu filtru w znaczniku służące do filtrowania.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    FilterUIHint="ForeignKey" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member Render : System.Web.UI.HtmlTextWriter -&gt; unit&#xA;override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="dynamicFilter.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Obiekt, który odbiera zawartość sterującą serwera.</param>
        <summary>Wysyła zawartość sterującą serwera do określonego <see cref="T:System.Web.UI.HtmlTextWriter" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Moduł zapisujący renderuje zawartość do strony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.GetQueryable">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IFilterExpressionProvider.GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Function GetQueryable (source As IQueryable) As IQueryable Implements IFilterExpressionProvider.GetQueryable" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System::Linq::IQueryable ^ source) = System::Web::DynamicData::IFilterExpressionProvider::GetQueryable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System.Linq.IQueryable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Kwerenda źródła danych.</param>
        <summary>Pobiera zmodyfikowane zapytanie przy użyciu bieżącej wartości filtru.</summary>
        <returns>Filtr.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Web.DynamicData.DynamicFilter> wystąpienia jest rzutowane na <xref:System.Web.DynamicData.IFilterExpressionProvider> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.Initialize">
      <MemberSignature Language="C#" Value="void IFilterExpressionProvider.Initialize (System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.DynamicData.IFilterExpressionProvider.Initialize(class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Sub Initialize (dataSource As IQueryableDataSource) Implements IFilterExpressionProvider.Initialize" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.DynamicData.IFilterExpressionProvider.Initialize(System::Web::UI::WebControls::IQueryableDataSource ^ dataSource) = System::Web::DynamicData::IFilterExpressionProvider::Initialize;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.Initialize(System.Web.UI.WebControls.IQueryableDataSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="dataSource">Źródło danych.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.DynamicData.DynamicFilter" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Web.DynamicData.DynamicFilter> wystąpienia jest rzutowane na <xref:System.Web.DynamicData.IFilterExpressionProvider> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>