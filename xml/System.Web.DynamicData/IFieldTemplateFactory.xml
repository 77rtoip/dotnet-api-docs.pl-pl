<Type Name="IFieldTemplateFactory" FullName="System.Web.DynamicData.IFieldTemplateFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="59d7d0466dfc2da220d7afc79a06df5efc2b59b8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69139623" /></Metadata><TypeSignature Language="C#" Value="public interface IFieldTemplateFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFieldTemplateFactory" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.IFieldTemplateFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFieldTemplateFactory" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFieldTemplateFactory" />
  <TypeSignature Language="F#" Value="type IFieldTemplateFactory = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje interfejs zaimplementowany przez obiekty, które tworzą szablony pól.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było utworzyć szablon pola, <xref:System.Web.DynamicData.FieldTemplateFactory> Ta klasa musi być implementowana przez klasę. Ten interfejs zapewnia metody, które inicjują <xref:System.Web.DynamicData.FieldTemplateFactory> i tworzą szablony pól.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateFieldTemplate">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.IFieldTemplate CreateFieldTemplate (System.Web.DynamicData.MetaColumn column, System.Web.UI.WebControls.DataBoundControlMode mode, string uiHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.DynamicData.IFieldTemplate CreateFieldTemplate(class System.Web.DynamicData.MetaColumn column, valuetype System.Web.UI.WebControls.DataBoundControlMode mode, string uiHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.IFieldTemplateFactory.CreateFieldTemplate(System.Web.DynamicData.MetaColumn,System.Web.UI.WebControls.DataBoundControlMode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateFieldTemplate (column As MetaColumn, mode As DataBoundControlMode, uiHint As String) As IFieldTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::DynamicData::IFieldTemplate ^ CreateFieldTemplate(System::Web::DynamicData::MetaColumn ^ column, System::Web::UI::WebControls::DataBoundControlMode mode, System::String ^ uiHint);" />
      <MemberSignature Language="F#" Value="abstract member CreateFieldTemplate : System.Web.DynamicData.MetaColumn * System.Web.UI.WebControls.DataBoundControlMode * string -&gt; System.Web.DynamicData.IFieldTemplate" Usage="iFieldTemplateFactory.CreateFieldTemplate (column, mode, uiHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Web.DynamicData.MetaColumn" />
        <Parameter Name="mode" Type="System.Web.UI.WebControls.DataBoundControlMode" />
        <Parameter Name="uiHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">Określa kolumnę danych, która ma być używana do wyświetlania szablonu pola.</param>
        <param name="mode">Określa tryb wyświetlania szablonu pola.</param>
        <param name="uiHint">Określa szablon pola do użycia.</param>
        <summary>Tworzy wystąpienie szablonu pola przy użyciu <see cref="T:System.Web.DynamicData.MetaColumn" /> klasy <see cref="T:System.Web.UI.WebControls.DataBoundControlMode" /> , klasy i <see cref="P:System.Web.DynamicData.MetaColumn.UIHint" /> właściwości.</summary>
        <returns>Wystąpienie <see cref="T:System.Web.DynamicData.FieldTemplateFactory" /> obiektu w przypadku zaimplementowania w klasie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Szablony dynamicznego pola danych ASP.NET są ASP.NETmi kontrolkami użytkownika, które mapują kontrolki danych na typy danych w modelu danych. Szablony pól zazwyczaj pochodzą od <xref:System.Web.DynamicData.FieldTemplateUserControl>klasy, która umożliwia dostęp do pól danych, kolumn danych i metadanych w modelach danych. Dynamiczne projekty danych zapewniają domyślne szablony pól, ale można je modyfikować lub tworzyć niestandardowe szablony pól. Po zaimplementowaniu ta metoda tworzy szablon pola na podstawie kolumny dane, trybu kolumny dane i <xref:System.Web.DynamicData.MetaColumn.UIHint%2A> właściwości. Należy określić parametr `uiHint` , jeśli chcesz, aby dane były renderowane przy użyciu niestandardowego szablonu pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (System.Web.DynamicData.MetaModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.Web.DynamicData.MetaModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.IFieldTemplateFactory.Initialize(System.Web.DynamicData.MetaModel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (model As MetaModel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize(System::Web::DynamicData::MetaModel ^ model);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : System.Web.DynamicData.MetaModel -&gt; unit" Usage="iFieldTemplateFactory.Initialize model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="System.Web.DynamicData.MetaModel" />
      </Parameters>
      <Docs>
        <param name="model">Określa model danych, którego używa szablon pola.</param>
        <summary><see cref="T:System.Web.DynamicData.FieldTemplateFactory" /> Inicjuje przy użyciu określonego modelu danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dane dynamiczne ASP.NET używają szablonów pól do wyświetlania pojedynczych pól danych. Szablony pól są zwykle implementowane jako kontrolki użytkownika, które mapują typy danych w modelu danych do poszczególnych pól w kontrolce danych. Ta metoda inicjuje <xref:System.Web.DynamicData.FieldTemplateFactory> klasę, która jest używana do tworzenia szablonów pól przy użyciu modelu danych, który będzie używany przez szablon pola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
