<Type Name="DynamicFilterExpression" FullName="System.Web.DynamicData.DynamicFilterExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d34bba93fbe9c56fdfcf340e3b139b23384d0dd" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36402183" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicFilterExpression : System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicFilterExpression extends System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicFilterExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicFilterExpression&#xA;Inherits DataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicFilterExpression : System::Web::UI::WebControls::Expressions::DataSourceExpression" />
  <TypeSignature Language="F#" Value="type DynamicFilterExpression = class&#xA;    inherit DataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.DataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Modyfikuje zapytania do bazy danych przy użyciu wartości z określonego filtru formantu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicFilterExpression> Klasa umożliwia modyfikację zapytania do bazy danych przy użyciu wartości, które są przypisane w <xref:System.Web.DynamicData.DynamicFilter> formantu. Ten formant deleguje zadanie budowania <xref:System.Linq.IQueryable> zapytania do formantu specjalne takie jak <xref:System.Web.DynamicData.QueryableFilterRepeater> kontroli lub <xref:System.Web.DynamicData.DynamicFilter> formantu.  
  
 Formanty filtru delegować z kolei budynku zapytania do szablonu filtru, które odwołują się do. Następnie wykonać zapytanie przez formant źródła danych, do której odwołuje się <xref:System.Web.UI.WebControls.QueryExtender> formantu.  
  
 Aby użyć <xref:System.Web.DynamicData.DynamicFilterExpression> klasy strony, wykonaj następujące kroki:  
  
-   Dodaj <xref:System.Web.UI.WebControls.QueryExtender> formantu do strony.  
  
-   Ustaw `TargetControlID` właściwość <xref:System.Web.UI.WebControls.QueryExtender> formantu, aby odwołać formantu źródła danych.  
  
-   Dodaj <xref:System.Web.DynamicData.DynamicFilterExpression> obiektu jako element podrzędny <xref:System.Web.UI.WebControls.QueryExtender> formantu.  
  
-   Ustaw `ControlID` właściwość <xref:System.Web.DynamicData.DynamicFilterExpression> obiekt, aby odwołać formant filtru.  
  
 W poprzednich krokach przyjęto, że filtr powiązanych formantów, formanty powiązane z danymi i kontroli źródła danych są zdefiniowane na stronie.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Web.DynamicData.DynamicFilterExpression> sterowania, aby wybrać szablon filtru na stronie. Szablon filtr jest zaznaczony, <xref:System.Web.DynamicData.DynamicFilter> formant, który jest identyfikowany przez <xref:System.Web.DynamicData.DynamicFilterExpression> kontrolować za pośrednictwem jego `ControID` właściwości.  
  
```  
<asp:QueryExtender ID="QueryExtender1"   
    TargetControlID="GridDataSource" runat="server">  
    <asp:DynamicFilterExpression ControlID="CategoryFilterID" />  
</asp:QueryExtender>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
    <altmember cref="T:System.Web.DynamicData.DynamicFilter" />
    <altmember cref="T:System.Web.UI.WebControls.QueryExtender" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicFilterExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilterExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicFilterExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Web.DynamicData.DynamicFilterExpression" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlID">
      <MemberSignature Language="C#" Value="public string ControlID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ControlID" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilterExpression.ControlID" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ControlID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlID : string with get, set" Usage="System.Web.DynamicData.DynamicFilterExpression.ControlID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia identyfikator formantu filtru.</summary>
        <value>Identyfikator formantu filtru.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten identyfikator formantu jest używany przez <xref:System.Web.DynamicData.DynamicFilterExpression> klasy, aby wybrać filtr kontroli, których deleguje zadania tworzenia zapytania, który z kolei jest wykonywana przez formant źródła danych.  
  
 Formant filtru deleguje zadania tworzenia zapytania do szablonu filtru on odwołania. Następnie wykonać zapytanie przez formant źródła danych, do której odwołuje się <xref:System.Web.UI.WebControls.QueryExtender> formantu.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Web.DynamicData.DynamicFilterExpression> klasy, aby wybrać formant filtru na stronie.  
  
```  
<asp:QueryExtender ID="QueryExtender1"   
    TargetControlID="GridDataSource" runat="server">  
    <asp:DynamicFilterExpression ControlID="CategoryFilterID" />  
</asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.DynamicData.DynamicFilter" />
        <altmember cref="T:System.Web.UI.WebControls.QueryExtender" />
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilterExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="dynamicFilterExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Źródła danych zapytania można zmodyfikować.</param>
        <summary>Pobiera zmodyfikowane zapytanie przy użyciu bieżącej wartości filtru.</summary>
        <returns>Zapytania źródła danych, które jest modyfikowany przez przy użyciu bieżącej wartości, który jest zawarty w <see cref="T:System.Web.DynamicData.DynamicFilterExpression" /> wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicFilterExpression.GetQueryable%2A> Metody deleguje zadania tworzenia zapytania do szablonu filtru odwołuje się formant filtru, który jest określony przez <xref:System.Web.DynamicData.DynamicFilterExpression.ControlID%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public override void SetContext (System.Web.UI.Control owner, System.Web.HttpContext context, System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetContext(class System.Web.UI.Control owner, class System.Web.HttpContext context, class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilterExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetContext (owner As Control, context As HttpContext, dataSource As IQueryableDataSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetContext(System::Web::UI::Control ^ owner, System::Web::HttpContext ^ context, System::Web::UI::WebControls::IQueryableDataSource ^ dataSource);" />
      <MemberSignature Language="F#" Value="override this.SetContext : System.Web.UI.Control * System.Web.HttpContext * System.Web.UI.WebControls.IQueryableDataSource -&gt; unit" Usage="dynamicFilterExpression.SetContext (owner, context, dataSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.Control" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="owner">Formant zawierający <see cref="T:System.Web.DynamicData.DynamicFilterExpression" /> wystąpienia, takich jak <see cref="T:System.Web.UI.WebControls.QueryExtender" /> formantu.</param>
        <param name="context">Bieżący <see cref="T:System.Web.HttpContext" /> obiektu.</param>
        <param name="dataSource">Źródło danych docelowych dla <see cref="T:System.Web.DynamicData.DynamicFilterExpression" /> wystąpienia.</param>
        <summary>Inicjuje wyrażenia informacje o źródle danych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>