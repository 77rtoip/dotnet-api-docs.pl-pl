<Type Name="SpeechSynthesizer" FullName="System.Speech.Synthesis.SpeechSynthesizer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f5ddb80a6d71816ce8f565903642ddd9938ac1b5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69145608" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpeechSynthesizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpeechSynthesizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeechSynthesizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpeechSynthesizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechSynthesizer sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechSynthesizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zapewnia dostęp do funkcji zainstalowanego aparatu syntezy mowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia nowego <xref:System.Speech.Synthesis.SpeechSynthesizer> obiektu używa domyślnego głosu systemowego. Aby skonfigurować <xref:System.Speech.Synthesis.SpeechSynthesizer> na potrzeby używania jednego z głosów z zainstalowanych syntezy mowy (zamiany tekstu na mowę), <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> Użyj metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> lub. Aby uzyskać informacje o tym, które głosy są zainstalowane, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Użyj metody <xref:System.Speech.Synthesis.VoiceInfo> i klasy.  
  
 Ta klasa zapewnia również kontrolę nad następującymi aspektami syntezy mowy:  
  
-   Aby <xref:System.Speech.Synthesis.SpeechSynthesizer> skonfigurować dane wyjściowe dla obiektu, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>Użyj metod, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>,, i <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> .  
  
-   Aby wygenerować mowę <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, użyj metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, lub <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> . Może generować mowę z tekstu <xref:System.Speech.Synthesis.Prompt> , obiektu lub <xref:System.Speech.Synthesis.PromptBuilder> z poziomu [języka SSML (Speech syntezing Language) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201763). <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
-   Aby wstrzymywać i wznawiać syntezę mowy, <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> Użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> metod i.  
  
-   Aby dodać lub usunąć leksykony, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> metod i. <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer> Może użyć co najmniej jednego leksykonu, aby obsłużyć wymowę wyrazów.  
  
-   Aby zmodyfikować dostarczanie danych wyjściowych mowy, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> właściwości i. <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A>  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached><xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>Wywołuje zdarzenia podczas napotkania niektórych funkcji w komunikatach: (,, i). <xref:System.Speech.Synthesis.SpeechSynthesizer> Wywołuje także zdarzenia, które są zgłaszane na początku (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) i na końcu<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>() operacji mówienia oraz o zmianie głosu (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>).  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> przed wydaniem ostatniego odwołania <xref:System.Speech.Synthesis.SpeechSynthesizer>do. W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Object.Finalize%2A> metody obiektu przez moduł zbierający elementy bezużyteczne.  
  
   
  
## Examples  
 Poniższy przykład jest częścią aplikacji konsolowej, która inicjuje <xref:System.Speech.Synthesis.SpeechSynthesizer> obiekt i mówi ciągu.  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string.  
      synth.Speak("This example demonstrates a basic use of Speech Synthesizer");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
    <altmember cref="T:System.Speech.Synthesis.Prompt" />
    <altmember cref="T:System.Speech.Synthesis.PromptBuilder" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361644(v%3doffice.14)">Synteza mowy</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechSynthesizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po zainicjowaniu nowego <xref:System.Speech.Synthesis.SpeechSynthesizer> wystąpienia używa domyślnego głosu systemowego. Aby skonfigurować <xref:System.Speech.Synthesis.SpeechSynthesizer> na potrzeby używania jednego z głosów z zainstalowanych syntezy mowy (zamiany tekstu na mowę), <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> Użyj metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> lub. Aby uzyskać informacje o tym, które głosy są zainstalowane, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Użyj metody <xref:System.Speech.Synthesis.VoiceInfo> i klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public void AddLexicon (Uri uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLexicon(class System.Uri uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLexicon(Uri ^ uri, System::String ^ mediaType);" />
      <MemberSignature Language="F#" Value="member this.AddLexicon : Uri * string -&gt; unit" Usage="speechSynthesizer.AddLexicon (uri, mediaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">Lokalizacja informacji o leksykonie.</param>
        <param name="mediaType">Typ nośnika leksykonu. W wartościach typu nośnika nie jest rozróżniana wielkość liter.</param>
        <summary>Dodaje Leksykon do <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leksykon wymowy to kolekcja słów lub fraz wraz z wymowymi, które składają się z liter i znaków z obsługiwanego alfabetu fonetycznego. Możesz użyć leksykonu, aby określić niestandardowe wymowy dla wyspecjalizowanego słownictwa w aplikacji.  
  
 Wymowy określone w zewnętrznym pliku leksykonu mają pierwszeństwo przed wymowąm leksykonu lub słownika wewnętrznego syntezatora mowy. Jednak wymowy określone w tekście w wierszach polecenia <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,, lub <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> mają <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>pierwszeństwo przed wydaniami, które są określone w dowolnym leksykonie. Wymowy wbudowane mają zastosowanie tylko do jednego wystąpienia wyrazu. Aby uzyskać więcej informacji [, zobacz leksykony i alfabety fonetyczne](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) .  
  
 Do <xref:System.Speech.Synthesis.SpeechSynthesizer> obiektu można dodać wiele leksykonów. Dwie wartości są obecnie obsługiwane dla `mediaType` parametru:  
  
-   Wartość `application/pls+xml` wskazuje, że Leksykon jest zgodny ze [specyfikacją leksykonu wymowy (innych obszarów roboczych) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201766). Jest to preferowany format do użycia.  
  
-   Wartość `application/vdn.ms-sapi-lex` wskazuje, że format leksykonu jest nieskompresowanym leksykonem, który jest formatem zastrzeżonym przez firmę Microsoft. Jest to starszy format i zalecamy użycie opisanego powyżej formatu innych obszarów roboczych.  
  
   
  
## Examples  
 Poniższy przykład ilustruje efekt dodania i usunięcia leksykonu, który zawiera niestandardową wymowę dla wyrazu "Blue". Leksykon definiuje wymowę "niebieska" do dźwięku, takiego jak "Bleep". Podczas ładowania leksykonu, syntezator mowy używa wymowy zdefiniowanej w leksykonie.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Add a lexicon that changes the pronunciation of "blue".  
        synth.AddLexicon(new Uri("C:\\test\\Blue.pls"), "application/pls+xml");  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Remove the lexicon.  
        synth.RemoveLexicon(new Uri("C:\\test\\Blue.pls"));  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 Poniżej znajduje się zawartość pliku leksykonu Blue. innych obszarów roboczych:  
  
```xml  
<?xml version="1.0" encoding="UTF-8"?>  
  
<lexicon version="1.0"   
      xmlns="http://www.w3.org/2005/01/pronunciation-lexicon"  
      alphabet="x-microsoft-ups" xml:lang="en-US">  
  
  <lexeme>  
    <grapheme> blue </grapheme>  
    <phoneme> B L I P </phoneme>  
  </lexeme>  
  
</lexicon>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="BookmarkReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BookmarkReached As EventHandler(Of BookmarkReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::BookmarkReachedEventArgs ^&gt; ^ BookmarkReached;" />
      <MemberSignature Language="F#" Value="member this.BookmarkReached : EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " Usage="member this.BookmarkReached : System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uruchamiany, <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> gdy napotkają zakładkę w wierszu polecenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>Wywołuje to zdarzenie podczas przetwarzania dowolnej metody,, lub. <xref:System.Speech.Synthesis.SpeechSynthesizer> Informacje o danych skojarzonych ze zdarzeniem znajdują się <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>w temacie.  
  
 Możesz dodać zakładki przy użyciu <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład tworzy monit zawierający dwie zakładki i wysyła dane wyjściowe do pliku WAV na potrzeby odtwarzania. Procedura obsługi dla <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> zdarzenia zapisuje nazwę zakładki i jej położenie w strumieniu audio, gdy zdarzenie zostało zgłoszone do konsoli.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechSynthesizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> Usuwa obiekt i zwalnia zasoby używane podczas sesji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SpeechSynthesizer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="speechSynthesizer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Działa jako ochrona do czyszczenia zasobów w przypadku, <see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" /> gdy metoda nie jest wywoływana.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentlySpokenPrompt">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentlySpokenPrompt () As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ GetCurrentlySpokenPrompt();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentlySpokenPrompt : unit -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.GetCurrentlySpokenPrompt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera informację o tym <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> , że mówi.</summary>
        <returns>Zwraca obiekt monitu, który jest obecnie wypowiadany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInstalledVoices">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję danych syntezy mowy (zamiany tekstu na mowę), które są obecnie zainstalowane w systemie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy aplikacja wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodę, sprawdza, czy każdy głos (aparaty do zamiany tekstu na mowę) znaleziony w rejestrze spełnia pewne minimalne kryteria. Dla dowolnego głosu, którego weryfikacja nie <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> powiodła <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> się, `False`ustawia jego właściwość na. Aplikacja nie może wybrać głosu, którego <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Właściwość to `False`. Zazwyczaj aplikacje nie będą ustawiać <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwości głosu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices () As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices();" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wszystkie zainstalowane głosy syntezy mowy (zamiana tekstu na mowę).</summary>
        <returns>Zwraca kolekcję "tylko do odczytu" głosów aktualnie zainstalowanych w systemie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Głos jest aparatem do syntezy mowy (zamiany tekstu na mowę lub TTS) zainstalowanej w systemie.  
  
   
  
## Examples  
 Poniższy przykład jest częścią aplikacji konsolowej, która inicjuje <xref:System.Speech.Synthesis.SpeechSynthesizer> obiekt i wyjście do konsoli listą zainstalowanych głosów (aparatów dla syntezy mowy) i pokazuje informacje dostępne dla każdego głosu.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices.   
        Console.WriteLine("Installed voices -");  
        foreach (InstalledVoice voice in synth.GetInstalledVoices())  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          string AudioFormats = "";  
          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  
          {  
            AudioFormats += String.Format("{0}\n",  
            fmt.EncodingFormat.ToString());  
          }  
  
          Console.WriteLine(" Name:          " + info.Name);  
          Console.WriteLine(" Culture:       " + info.Culture);  
          Console.WriteLine(" Age:           " + info.Age);  
          Console.WriteLine(" Gender:        " + info.Gender);  
          Console.WriteLine(" Description:   " + info.Description);  
          Console.WriteLine(" ID:            " + info.Id);  
          Console.WriteLine(" Enabled:       " + voice.Enabled);  
          if (info.SupportedAudioFormats.Count != 0)  
          {  
            Console.WriteLine( " Audio formats: " + AudioFormats);  
          }  
          else  
          {  
            Console.WriteLine(" No supported audio formats found");  
          }  
  
          string AdditionalInfo = "";  
          foreach (string key in info.AdditionalInfo.Keys)  
          {  
            AdditionalInfo += String.Format("  {0}: {1}\n", key, info.AdditionalInfo[key]);  
          }  
  
          Console.WriteLine(" Additional Info - " + AdditionalInfo);  
          Console.WriteLine();  
        }  
      }  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints" />
        <altmember cref="Overload:System.Speech.Synthesis.PromptBuilder.StartVoice" />
      </Docs>
    </Member>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices (culture As CultureInfo) As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : System.Globalization.CultureInfo -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Ustawienia regionalne, które muszą być obsługiwane przez głos.</param>
        <summary>Zwraca wszystkie zainstalowane głosy syntezy mowy (zamiany tekstu na mowę), które obsługują konkretne ustawienia regionalne.</summary>
        <returns>Zwraca kolekcję tylko do odczytu głosów aktualnie zainstalowanych w systemie, która obsługuje określone ustawienia regionalne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli żaden z zainstalowanych głosów nie obsługuje określonych ustawień regionalnych, ta metoda zwraca pustą kolekcję.  
  
 Microsoft Windows i system. Speech API akceptują wszystkie prawidłowe kody krajów językowych. Aby przeprowadzić zamianę tekstu na mowę przy użyciu języka określonego we właściwości kultury, należy zainstalować aparat syntezy mowy obsługujący ten kod w języku kraju. Aparaty syntezy mowy dostarczane z systemem Microsoft Windows 7 współpracują z następującymi kodami języka:  
  
-   en-US. Angielski (Stany Zjednoczone)  
  
-   zh-CN. Chiński (Chiny)  
  
-   zh-TW. Chiński (Tajwan)  
  
 Dozwolone są również dwuliterowe kody języka, takie jak "en".  
  
   
  
## Examples  
 Poniższy przykład jest częścią aplikacji konsolowej, która inicjuje <xref:System.Speech.Synthesis.SpeechSynthesizer> obiekt i wyjście do konsoli listą zainstalowanych głosów, które obsługują ustawienia regionalne en-us.  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices that  
        // support the en-US locale.   
        Console.WriteLine("Installed voices for the en-US locale:");  
        foreach (InstalledVoice voice in  
          synthesizer.GetInstalledVoices(new CultureInfo("en-US")))  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          OutputVoiceInfo(info);  
        }  
  
        // Output information about the current voice.  
        Console.WriteLine();  
        Console.WriteLine("Current voice:");  
        OutputVoiceInfo(synthesizer.Voice);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Display information about a synthesizer voice.  
    private static void OutputVoiceInfo(VoiceInfo info)  
    {  
      Console.WriteLine("  Name: {0}, culture: {1}, gender: {2}, age: {3}.",  
        info.Name, info.Culture, info.Gender, info.Age);  
      Console.WriteLine("    Description: {0}", info.Description);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="speechSynthesizer.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wstrzymuje <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiekt.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="PhonemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PhonemeReached As EventHandler(Of PhonemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::PhonemeReachedEventArgs ^&gt; ^ PhonemeReached;" />
      <MemberSignature Language="F#" Value="member this.PhonemeReached : EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " Usage="member this.PhonemeReached : System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uruchamiany, gdy zostanie osiągnięty fonem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fonem jest podstawowym składnikiem pisania języka, zazwyczaj literą alfabetu (lub kombinacją dwóch liter) reprezentującą jeden lub kilka różnych dźwięków. Na przykład litera "c" jest fonem, która może być dźwiękowa, jak "s" w "Cinder" lub "k" w "Catch". Wyraz pisanych to asembler fonemów. Zmiana fonem w wyrazie zmieni jego pisownię.  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Wystąpienie<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> generuje zdarzenie dla każdej części wyrazu, która stanowi fonem. Na przykład w przypadku wyrazu "motyw" generowane są trzy <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> zdarzenia: jeden dla dźwięku "TH", jeden dla dźwięku "e" i jeden dla dźwięku "m" (Me).  
  
 Przykład i informacje o danych skojarzonych ze zdarzeniem znajdują się w <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>temacie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public int Rate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rate" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberSignature Language="VB.NET" Value="Public Property Rate As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rate { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Rate : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia stawkę <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> głosu obiektu.</summary>
        <value>Zwraca współczynnik <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> mówienia obiektu, od-10 do 10.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład mówi ciągu z stawką głosu ustawioną na wartość-2.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Set a value for the speaking rate.  
      synth.Rate = -2;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a text string synchronously.  
      synth.Speak("This example speaks a string with the speaking rate set to -2.");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }     
  }    
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.PromptStyle" />
        <altmember cref="T:System.Speech.Synthesis.PromptRate" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public void RemoveLexicon (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveLexicon(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveLexicon(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="member this.RemoveLexicon : Uri -&gt; unit" Usage="speechSynthesizer.RemoveLexicon uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Lokalizacja dokumentu leksykonu.</param>
        <summary>Usuwa Leksykon z <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zobacz <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> , aby zapoznać się z przykładem.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="speechSynthesizer.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> Wznawia obiekt po jego wstrzymaniu.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoice">
      <MemberSignature Language="C#" Value="public void SelectVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.SelectVoice : string -&gt; unit" Usage="speechSynthesizer.SelectVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa głosu do wybrania.</param>
        <summary>Wybiera określony głos według nazwy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazw zainstalowanych głosów tekstu na mowę (TTS), które można wybrać. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Aby wybrać głos, Przekaż całą zawartość <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> właściwości jako argument <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> dla metody. Obiekt wybiera pierwszy zainstalowany głos, który zawiera `name` we <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=nameWithType> właściwości głosu. <xref:System.Speech.Synthesis.SpeechSynthesizer> Wykonuje porównywanie podciągów z uwzględnieniem wielkości liter, aby określić, czy głos jest zgodny z `name`. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Gdy aplikacja wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodę, sprawdza, czy każdy głosy znaleziony w rejestrze spełnia pewne minimalne kryteria. Dla dowolnego głosu, którego weryfikacja nie <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> powiodła <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> się, `False`ustawia jego właściwość na. Aplikacja nie może wybrać głosu, którego <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Właściwość to `False`. Zazwyczaj aplikacje nie będą ustawiać <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwości głosu.  
  
 Aby wybrać głos według płci, wieku lub ustawień regionalnych, użyj jednej z <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> metod.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectVoiceByHints">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wybiera głos o określonej charakterystyce.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazw zainstalowanych głosów tekstu na mowę (TTS), które można wybrać. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer> Obiekt wybiera pierwszy zainstalowany głos, który odpowiada określonej charakterystyce.  
  
 Gdy aplikacja wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodę, sprawdza, czy każdy głosy znaleziony w rejestrze spełnia pewne minimalne kryteria. Dla dowolnego głosu, którego weryfikacja nie <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> powiodła <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> się, `False`ustawia jego właściwość na. Aplikacja nie może wybrać głosu, którego <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Właściwość to `False`. Zazwyczaj aplikacje nie będą ustawiać <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwości głosu.  
  
 Aby wybrać głos według nazwy, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> metody  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">Płeć głosu do wybrania.</param>
        <summary>Wybiera głos z określoną płcią.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazw zainstalowanych głosów tekstu na mowę (TTS), które można wybrać. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Obiekt wybiera pierwszy zainstalowany głos, którego <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> Właściwość pasuje do `gender` parametru. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Gdy aplikacja wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodę, sprawdza, czy każdy głosy znaleziony w rejestrze spełnia pewne minimalne kryteria. Dla dowolnego głosu, którego weryfikacja nie <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> powiodła <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> się, `False`ustawia jego właściwość na. Aplikacja nie może wybrać głosu, którego <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Właściwość to `False`. Zazwyczaj aplikacje nie będą ustawiać <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwości głosu.  
  
 Aby wybrać głos na podstawie innych cech, zobacz inne <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> metody.  
  
 Aby wybrać głos według nazwy, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">Płeć głosu do wybrania.</param>
        <param name="age">Wiek głosu do wybrania.</param>
        <summary>Wybiera głos z określoną płcią i wiekiem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazw zainstalowanych głosów tekstu na mowę (TTS), które można wybrać. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> `age` Obiekt wybiera pierwszy zainstalowany głos, którego właściwości są zgodne z `gender` parametrami i. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Gdy aplikacja wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodę, sprawdza, czy każdy głosy znaleziony w rejestrze spełnia pewne minimalne kryteria. Dla dowolnego głosu, którego weryfikacja nie <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> powiodła <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> się, `False`ustawia jego właściwość na. Aplikacja nie może wybrać głosu, którego <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Właściwość to `False`. Zazwyczaj aplikacje nie będą ustawiać <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwości głosu.  
  
 Aby wybrać głos na podstawie innych cech, zobacz inne <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> metody.  
  
 Aby wybrać głos według nazwy, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">Płeć głosu do wybrania.</param>
        <param name="age">Wiek głosu do wybrania.</param>
        <param name="voiceAlternate">Pozycja głosu do wybrania.</param>
        <summary>Wybiera głos o określonej płci i wieku, na podstawie pozycji, w której głosy są uporządkowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazw zainstalowanych głosów tekstu na mowę (TTS), które można wybrać. <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> `gender` `age` Obiekt znajduje zainstalowane głosy, których <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> właściwości są zgodne z parametrami i. <xref:System.Speech.Synthesis.SpeechSynthesizer> Zlicza Znalezione wyniki i zwraca głos, gdy liczba `voiceAlternate` jest równa parametrowi. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Gdy aplikacja wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodę, sprawdza, czy każdy głosy znaleziony w rejestrze spełnia pewne minimalne kryteria. Dla dowolnego głosu, którego weryfikacja nie <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> powiodła <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> się, `False`ustawia jego właściwość na. Aplikacja nie może wybrać głosu, którego <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Właściwość to `False`. Zazwyczaj aplikacje nie będą ustawiać <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwości głosu.  
  
 Aby wybrać głos na podstawie innych właściwości, zobacz inne <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> przeciążenia.  
  
 Aby wybrać głos według nazwy, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer, culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int * System.Globalization.CultureInfo -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="gender">Płeć głosu do wybrania.</param>
        <param name="age">Wiek głosu do wybrania.</param>
        <param name="voiceAlternate">Pozycja głosu do wybrania.</param>
        <param name="culture">Ustawienia regionalne głosu do wybrania.</param>
        <summary>Wybiera głos z określoną płcią, wiekiem i ustawieniami regionalnymi na podstawie pozycji, w której głosy są uporządkowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> `age` `culture` Obiekt odnajdzie głosy, `gender`których <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> właściwościsązgodnezparametrami<xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>,i. <xref:System.Speech.Synthesis.SpeechSynthesizer> Zlicza Znalezione wyniki i zwraca głos, gdy liczba `voiceAlternate` jest równa parametrowi. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Microsoft Windows i system. Speech API akceptują wszystkie prawidłowe kody krajów językowych. Aby przeprowadzić zamianę tekstu na mowę przy użyciu języka określonego w `culture` parametrze, należy zainstalować aparat syntezy mowy obsługujący ten kod w języku kraju. Aparaty syntezy mowy dostarczane z systemem Microsoft Windows 7 współpracują z następującymi kodami języka:  
  
-   en-US. Angielski (Stany Zjednoczone)  
  
-   zh-CN. Chiński (Chiny)  
  
-   zh-TW. Chiński (Tajwan)  
  
 Dozwolone są również dwuliterowe kody języka, takie jak "en".  
  
 Gdy aplikacja wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodę, sprawdza, czy każdy głosy znaleziony w rejestrze spełnia pewne minimalne kryteria. Dla dowolnego głosu, którego weryfikacja nie <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> powiodła <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> się, `False`ustawia jego właściwość na. Aplikacja nie może wybrać głosu, którego <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Właściwość to `False`. Zazwyczaj aplikacje nie będą ustawiać <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwości głosu.  
  
 Aby wybrać głos na podstawie innych właściwości, zobacz inne <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> przeciążenia.  
  
 Aby wybrać głos według nazwy, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToAudioStream(class System.IO.Stream audioDestination, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToAudioStream (audioDestination As Stream, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToAudioStream(System::IO::Stream ^ audioDestination, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToAudioStream (audioDestination, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioDestination">Strumień, do którego mają zostać dołączone dane wyjściowe syntezy.</param>
        <param name="formatInfo">Format do użycia w danych wyjściowych syntezy.</param>
        <summary>Konfiguruje <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiekt do dołączania danych wyjściowych do strumienia audio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> w celu <xref:System.Speech.Synthesis.SpeechSynthesizer>zwolnienia odwołania do strumienia.  
  
 Aby poznać inne opcje konfiguracji wyjściowej, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>zobacz <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>,, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> , i.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetOutputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToDefaultAudioDevice : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konfiguruje <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiekt do wysyłania danych wyjściowych do domyślnego urządzenia audio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć okna **dźwięk** w **Panelu sterowania** systemu Windows, aby skonfigurować domyślne urządzenie audio dla komputera.  
  
 Aby poznać inne opcje konfiguracji wyjściowej, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>zobacz <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>,, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> , i.  
  
   
  
## Examples  
 Poniższy przykład używa syntezatora do wymawiania frazy z domyślnym wyjściem audio.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the synthesizer to send output to the default audio device.  
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToNull">
      <MemberSignature Language="C#" Value="public void SetOutputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToNull : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konfiguruje <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiekt do niewysyłania danych wyjściowych z operacji syntezy do urządzenia, pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody, aby zwolnić <xref:System.Speech.Synthesis.SpeechSynthesizer>odwołanie do pliku lub strumienia. Zobacz <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> , aby zapoznać się z przykładem.  
  
 Aby poznać inne opcje konfiguracji wyjściowej, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>zobacz <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>,, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> , i.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputToWaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konfiguruje <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiekt do dołączania danych wyjściowych do pliku w formacie Wave audio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zwolnić <xref:System.Speech.Synthesis.SpeechSynthesizer>odwołanie do pliku, <xref:System.Speech.Synthesis.SpeechSynthesizer>skonfiguruj ponownie dane wyjściowe, na przykład przez wywołanie <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.  
  
 Aby poznać inne opcje konfiguracji wyjściowej, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>zobacz <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>,, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> , i.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka do pliku.</param>
        <summary>Konfiguruje <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiekt do dołączania danych wyjściowych do pliku, który zawiera dźwięk formatu Wave.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby skonfigurować dane wyjściowe i określić format audio, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie użyto wystąpienia programu <xref:System.Media.SoundPlayer> w celu odtworzenia monitu, który został przesłany do pliku WAV. Ponieważ wywołanie jest asynchroniczne <xref:System.Media.SoundPlayer> , wystąpienie <xref:System.Media.SoundPlayer.Play%2A> jest tworzone (i wywoływana <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> Metoda) w programie obsługi zdarzenia. <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToWaveFile(@"C:\Test\Sample.wav");  
  
      // Register for the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Build a prompt.  
      PromptBuilder builder = new PromptBuilder();  
      builder.AppendText("This sample asynchronously speaks a prompt to a WAVE file.");  
  
      // Speak the string asynchronously.  
      synth.SpeakAsync(builder);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeakCompleted event.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
  
      // Create a SoundPlayer instance to play the output audio file.  
      System.Media.SoundPlayer m_SoundPlayer =  
        new System.Media.SoundPlayer(@"C:\Test\Sample.wav");  
  
      //  Play the output file.  
      m_SoundPlayer.Play();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile (path, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="path">Ścieżka do pliku.</param>
        <param name="formatInfo">Informacje o formacie audio.</param>
        <summary>Konfiguruje <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiekt do dołączania danych wyjściowych do pliku dźwiękowego formatu Wave w określonym formacie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład określa format danych wyjściowych syntezy mowy i wysyła je do pliku WAV.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\temp\test.wav",   
          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Create a SoundPlayer instance to play output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =   
          new System.Media.SoundPlayer(@"C:\temp\test.wav");  
  
        // Build a prompt.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is sample output to a WAVE file.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveStream (System.IO.Stream audioDestination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveStream(class System.IO.Stream audioDestination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveStream (audioDestination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveStream(System::IO::Stream ^ audioDestination);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveStream audioDestination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioDestination">Strumień, do którego mają zostać dołączone dane wyjściowe syntezy.</param>
        <summary>Konfiguruje <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiekt do dołączania danych wyjściowych do strumienia zawierającego format Wave.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zwolnić <xref:System.Speech.Synthesis.SpeechSynthesizer>odwołanie do strumienia, ponownie skonfiguruj dane wyjściowe syntezatora, na przykład przez wywołanie metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.  
  
 Aby poznać inne opcje konfiguracji wyjściowej, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>zobacz <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>,, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> , i.  
  
   
  
## Examples  
 Poniższy przykład wyprowadza frazę do strumienia WAV.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      using (MemoryStream streamAudio = new MemoryStream())  
      {  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  
  
        // Configure the synthesizer to output to an audio stream.  
        synth.SetOutputToWaveStream(streamAudio);  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
        streamAudio.Position = 0;  
        m_SoundPlayer.Stream = streamAudio;  
        m_SoundPlayer.Play();  
  
        // Set the synthesizer output to null to release the stream.   
        synth.SetOutputToNull();  
  
        // Insert code to persist or process the stream contents here.  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Speak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Generuje dane wyjściowe mowy synchronicznie z ciągu, <see cref="T:System.Speech.Synthesis.Prompt" /> obiektu <see cref="T:System.Speech.Synthesis.PromptBuilder" /> lub obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> Metody generują mowę synchronicznie. Metody nie zwracają, dopóki zawartość <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> wystąpienia nie zostanie całkowicie wymawiana. Jest to najprostszy sposób na generowanie mowy. Jeśli jednak aplikacja musi wykonywać zadania podczas mówienia, na przykład wyróżnianie tekstu, animacji programu Paint, kontrolek monitorów lub innych zadań, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> metod <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> lub metody do asynchronicznego generowania mowy.  
  
 W trakcie wywołania tej metody <xref:System.Speech.Synthesis.SpeechSynthesizer> może wywołać następujące zdarzenia:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Uruchamiany, gdy stan mówienia syntezatora ulegnie zmianie.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Uruchamiany, gdy syntezator rozpocznie generowanie mowy.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Wywoływane za każdym razem, gdy syntezator osiągnie literę lub kombinację liter, które stanowią dyskretny dźwięk mowy w języku.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Wywoływane za każdym razem, gdy syntezator ukończy wyraz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Zdarzenie wywoływane po każdym wypowiadaniu danych wyjściowych wymaga zmiany w pozycji jamy lub mięśni twarzy używanych do tworzenia mowy.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Uruchamiany, gdy syntezator napotka zakładkę w wierszu polecenia.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Uruchamiany, gdy głos mowy zostanie zmieniony dla syntezatora.  
  
 Nie wywołuje zdarzenia podczas przetwarzania żadnej z metod.<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.Speak prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Zawartość do wymowy.</param>
        <summary>Synchronicznie mówi zawartość <see cref="T:System.Speech.Synthesis.Prompt" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby asynchronicznie wypowiadać zawartość <xref:System.Speech.Synthesis.Prompt> obiektu, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Synthesis.Prompt> obiekt z ciągu i przekazuje obiekt jako argument <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> do metody.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="speechSynthesizer.Speak promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">Zawartość do wymowy.</param>
        <summary>Synchronicznie mówi zawartość <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby asynchronicznie wypowiadać zawartość <xref:System.Speech.Synthesis.PromptBuilder> obiektu, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> obiekt z ciągu i przekazuje obiekt jako argument <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> do metody.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder song = new PromptBuilder();  
        song.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(song);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.Speak : string -&gt; unit" Usage="speechSynthesizer.Speak textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Tekst, który ma zostać wypowiadany.</param>
        <summary>Synchronicznie mówi zawartości ciągu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby synchronicznie wypowiadać ciąg, który zawiera SSML, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> metody. Aby asynchronicznie wypowiedzieć zawartość ciągu, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> metody.  
  
   
  
## Examples  
 Jak pokazano w poniższym przykładzie, <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> Metoda zapewnia najprostszy sposób, aby generować dane wyjściowe mowy synchronicznie.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a string synchronously.  
        synth.Speak("What is your favorite color?");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpeakAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Generuje dane wyjściowe mowy asynchronicznie z ciągu, <see cref="T:System.Speech.Synthesis.Prompt" /> obiektu <see cref="T:System.Speech.Synthesis.PromptBuilder" /> lub obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> Metody generują mowę asynchronicznie. Metody zwracają natychmiast bez oczekiwania na zakończenie działania <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> zawartości obiektu. Użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> , jeśli aplikacja wymaga wykonywania zadań podczas mówienia, na przykład wyróżnianie tekstu, animacji programu Paint, kontrolek monitora lub innych zadań.  
  
 W trakcie wywołania tej metody <xref:System.Speech.Synthesis.SpeechSynthesizer> może wywołać następujące zdarzenia:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Uruchamiany, gdy stan mówienia syntezatora ulegnie zmianie.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Uruchamiany, gdy syntezator rozpocznie generowanie mowy.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Wywoływane za każdym razem, gdy syntezator osiągnie literę lub kombinację liter, które stanowią dyskretny dźwięk mowy w języku.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Wywoływane za każdym razem, gdy syntezator ukończy wyraz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Zdarzenie wywoływane po każdym wypowiadaniu danych wyjściowych wymaga zmiany w pozycji jamy lub mięśni twarzy używanych do tworzenia mowy.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Uruchamiany, gdy syntezator napotka zakładkę w wierszu polecenia.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Uruchamiany, gdy głos mowy zostanie zmieniony dla syntezatora.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Uruchamiany, gdy syntezator kończy <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> operację.  
  
 Jeśli aplikacja nie musi wykonywać zadań podczas mówienia, można użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> metod <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> lub metody do synchronicznego generowania mowy.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsync(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsync(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsync prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Zawartość do wymowy.</param>
        <summary>Asynchronicznie mówi zawartość <see cref="T:System.Speech.Synthesis.Prompt" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można anulować asynchroniczne wypowiadanie monitu przy użyciu <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> metody lub.  
  
 Aby synchronicznie wypowiadać zawartość <xref:System.Speech.Synthesis.Prompt> obiektu, użyj. <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Synthesis.Prompt> obiekt z ciągu i przekazuje obiekt jako argument <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> do metody.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a prompt from a string.  
      Prompt color = new Prompt("What is your favorite color?");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(color);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.PromptBuilder -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">Zawartość do wymowy.</param>
        <summary>Asynchronicznie mówi zawartość <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</summary>
        <returns>Zwraca obiekt, który zawiera zawartość, aby mówić.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby synchronicznie wypowiadać zawartość <xref:System.Speech.Synthesis.PromptBuilder> obiektu, użyj. <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> obiekt z ciągu i przekazuje obiekt jako argument <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> do metody.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a PromptBuilder object and append a text string.  
      PromptBuilder song = new PromptBuilder();  
      song.AppendText("Say the name of the song you want to hear");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(song);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Tekst, który ma zostać wypowiadany.</param>
        <summary>Asynchronicznie mówi zawartość ciągu.</summary>
        <returns>Zwraca obiekt, który zawiera zawartość, aby mówić.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby asynchronicznie mówić ciąg, który zawiera SSML, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> metody. Aby synchronicznie wypowiedzieć zawartość ciągu, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> metody. Można anulować asynchroniczne wypowiadanie monitu przy użyciu <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> metody lub.  
  
   
  
## Examples  
 Jak pokazano w poniższym przykładzie, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> Metoda zapewnia najprostszy sposób, aby generować dane wyjściowe mowy asynchronicznie.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.Speak" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancel">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancel(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancel(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancel : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancel prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Zawartość, dla której ma zostać anulowana operacja mówienia.</param>
        <summary>Anuluje asynchroniczne operacje syntezy dla monitu w kolejce.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody można również użyć do anulowania asynchronicznej operacji dyktowania dla następujących:  
  
-   Zawartość <xref:System.String> określonego<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> przez metodę.  
  
-   Zawartość <xref:System.Speech.Synthesis.PromptBuilder> określonego<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> przez metodę.  
  
-   Zawartość <xref:System.String> zawierającego SSML określona <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> przez metodę.  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>Po wywołaniu <xref:System.Speech.Synthesis.Prompt> , <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, lub <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, system. Speech tworzy <xref:System.Speech.Synthesis.Prompt> obiekt i wypełnia go zawartością parametru metody i zwraca obiekt. Jeśli zachowasz kopię <xref:System.Speech.Synthesis.Prompt>zwracanego elementu, możesz przekazać <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> ją do programu, aby anulować zawartość <xref:System.String> wymawianą w <xref:System.Speech.Synthesis.PromptBuilder> obiekcie lub.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancelAll">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancelAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsyncCancelAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancelAll();" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancelAll : unit -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancelAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Anuluje wszystkie operacje w kolejce, asynchroniczne i syntezy mowy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano, jak użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> , aby anulować asynchroniczne wypowiadanie monitu, aby można było wypowiadać nowy monit. Należy zauważyć, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> że zdarzenie jest wyzwalane, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> gdy operacja zostanie anulowana.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Threading;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the StateChanged event.  
      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  
  
      // Subscribe to the SpeakProgress event.  
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Subscribe to the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Begin speaking a text string asynchronously.  
      synth.SpeakAsync("Speech is an effective and natural way for people to interact with applications, " +  
        "complementing or even replacing the use of mice, keyboards, controllers, and gestures.");  
  
      // Speak for four seconds.  
      Thread.Sleep(4000);  
  
      // Cancel the SpeakAsync operation and wait one second.  
      synth.SpeakAsyncCancelAll();  
      Thread.Sleep(1000);  
  
      // Speak a new text string.  
      synth.Speak("An urgent email message has arrived. Do you want to hear it?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write to the console when the SpeakAsync operation has been cancelled.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
      Console.WriteLine("\nThe SpeakAsync operation was cancelled!!");  
    }  
  
    // When it changes, write the state of the SpeechSynthesizer to the console.  
    static void synth_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      Console.WriteLine("\nSynthesizer State: {0}    Previous State: {1}\n", e.State, e.PreviousState);  
    }  
  
    // Write the text being spoken by the SpeechSynthesizer to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }      
  }    
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakCompleted As EventHandler(Of SpeakCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakCompletedEventArgs ^&gt; ^ SpeakCompleted;" />
      <MemberSignature Language="F#" Value="member this.SpeakCompleted : EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " Usage="member this.SpeakCompleted : System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uruchamiany po <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> zakończeniu mówienia monitu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołuje zdarzenie po zakończeniu dowolnej metody <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>lub. <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>  
  
 Klasa nie ma właściwości i nie zwraca danych <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> ze zdarzenia. <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> Jest on dostępny, aby umożliwić autorom aplikacji pisanie obsługi zdarzeń dla <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> zdarzenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.SpeakCompletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeakProgress">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakProgress As EventHandler(Of SpeakProgressEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakProgressEventArgs ^&gt; ^ SpeakProgress;" />
      <MemberSignature Language="F#" Value="member this.SpeakProgress : EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " Usage="member this.SpeakProgress : System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uruchamiany po rozpoczęciu <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> poszczególnych wyrazów monitu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>Wywołuje to zdarzenie dla każdego nowego wyrazu, który mówią w monicie przy użyciu dowolnej z metod,,, lub. <xref:System.Speech.Synthesis.SpeechSynthesizer> Aby zapoznać się z przykładem i więcej informacji na temat danych skojarzonych ze <xref:System.Speech.Synthesis.SpeakProgressEventArgs>zdarzeniem, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsml">
      <MemberSignature Language="C#" Value="public void SpeakSsml (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakSsml(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakSsml (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakSsml(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsml : string -&gt; unit" Usage="speechSynthesizer.SpeakSsml textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Ciąg SSML, który ma zostać wypowiadany.</param>
        <summary>Synchronicznie mówi <see cref="T:System.String" /> , że zawiera SSML znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawartość `textToSpeak` parametru musi `speak` zawierać element i musi być zgodna z [językiem SSML (Speech syntezing Language) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201763). Aby uzyskać więcej informacji, zobacz [Informacje o języku znaczników funkcji rozpoznawania mowy](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
 Aby asynchronicznie mówić ciąg, który zawiera SSML, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> metody. Można użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> , aby zainicjować synchroniczne wypowiadanie ciągu, który nie zawiera SSML znaczników.  
  
 W trakcie wywołania tej metody <xref:System.Speech.Synthesis.SpeechSynthesizer> może wywołać następujące zdarzenia:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Uruchamiany, gdy stan mówienia syntezatora ulegnie zmianie.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Uruchamiany, gdy syntezator rozpocznie generowanie mowy.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Wywoływane za każdym razem, gdy syntezator osiągnie literę lub kombinację liter, które stanowią dyskretny dźwięk mowy w języku.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Wywoływane za każdym razem, gdy syntezator ukończy wyraz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Zdarzenie wywoływane po każdym wypowiadaniu danych wyjściowych wymaga zmiany w pozycji jamy lub mięśni twarzy używanych do tworzenia mowy.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Uruchamiany, gdy syntezator napotka zakładkę w wierszu polecenia.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Uruchamiany, gdy głos mowy zostanie zmieniony dla syntezatora.  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Podczas <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> przetwarzania metody<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> nie zgłasza zdarzenia.  
  
   
  
## Examples  
 Poniższy przykład ilustruje datę 1/29/2009 jako datę, w miesiącu, dzień, w kolejności lat.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt synchronously.
      synth.SpeakSsml(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsmlAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakSsmlAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakSsmlAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakSsmlAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsmlAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakSsmlAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">SMML adiustację.</param>
        <summary>Asynchronicznie mówi <see cref="T:System.String" /> , że zawiera SSML znaczników.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zawartość `textToSpeak` parametru musi `speak` zawierać element i musi być zgodna z [językiem SSML (Speech syntezing Language) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201763). Aby uzyskać więcej informacji, zobacz [Informacje o języku znaczników funkcji rozpoznawania mowy](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
 Aby synchronicznie wypowiadać ciąg, który zawiera SSML, użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> metody. Możesz użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> , aby zainicjować asynchroniczne wypowiadanie ciągu, który nie zawiera SSML znaczników.  
  
 W trakcie wywołania tej metody <xref:System.Speech.Synthesis.SpeechSynthesizer> może wywołać następujące zdarzenia:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Uruchamiany, gdy stan mówienia syntezatora ulegnie zmianie.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Uruchamiany, gdy syntezator rozpocznie generowanie mowy.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Wywoływane za każdym razem, gdy syntezator osiągnie literę lub kombinację liter, które stanowią dyskretny dźwięk mowy w języku.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Wywoływane za każdym razem, gdy syntezator ukończy wyraz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Zdarzenie wywoływane po każdym wypowiadaniu danych wyjściowych wymaga zmiany w pozycji jamy lub mięśni twarzy używanych do tworzenia mowy.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Uruchamiany, gdy syntezator napotka zakładkę w wierszu polecenia.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Uruchamiany, gdy głos mowy zostanie zmieniony dla syntezatora.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Uruchamiany, gdy syntezator zakończy przetwarzanie <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> operacji.  
  
 Jeśli aplikacja DOS nie musi wykonywać żadnych zadań podczas mówienia, można użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> metody lub, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> aby wygenerować mowę synchronicznie.  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakSsmlAsync(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakStarted As EventHandler(Of SpeakStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakStartedEventArgs ^&gt; ^ SpeakStarted;" />
      <MemberSignature Language="F#" Value="member this.SpeakStarted : EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " Usage="member this.SpeakStarted : System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uruchamiany, gdy <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> rozpocznie się wypowiadanie monitu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>Wywołuje to zdarzenie po rozpoczęciu przetwarzania monitu przy użyciu dowolnej z metod,,, lub. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Klasa nie ma właściwości i nie zwraca danych <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> ze zdarzenia. <xref:System.Speech.Synthesis.SpeakStartedEventArgs> Jest on dostępny, aby umożliwić autorom aplikacji pisanie obsługi zdarzeń dla <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.SynthesizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.SynthesizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As SynthesizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::SynthesizerState State { System::Speech::Synthesis::SynthesizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.SynthesizerState" Usage="System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.SynthesizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący stan <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> wymowy obiektu.</summary>
        <value>Zwraca bieżący stan <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> wymowy obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać nowy stan <xref:System.Speech.Synthesis.SpeechSynthesizer> po zmianie, należy <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> użyć właściwości <xref:System.Speech.Synthesis.StateChangedEventArgs> klasy.  
  
   
  
## Examples  
 Poniższy przykład ilustruje stan <xref:System.Speech.Synthesis.SpeechSynthesizer> przed, podczas i po wyświetleniu monitu.  
  
```csharp  
using System;  
using System.Threading;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer() ;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the SpeakProgress event.         
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Write the state of the SpeechSynthesizer to the console.  
      Console.WriteLine("Current Synthesizer state: " + synth.State + "\n");  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      // Write the state of the SpeechSynthesizer to the console while it is speaking.  
      Thread.Sleep(1000);  
      Console.WriteLine("\n - Current Synthesizer state: " + synth.State + " - \n");  
  
      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  
      Thread.Sleep(2000);  
      Console.WriteLine("\nCurrent Synthesizer state: " + synth.State);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of StateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uruchamiany, gdy stan <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer> to zdarzenie, gdy jego zmiany <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> głosują. Aby zapoznać się z przykładem i więcej informacji na temat danych skojarzonych ze <xref:System.Speech.Synthesis.StateChangedEventArgs>zdarzeniem, zobacz.  
  
 Aby wstrzymywać i wznawiać syntezę mowy, <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> Użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> metod i.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisemeReached As EventHandler(Of VisemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VisemeReachedEventArgs ^&gt; ^ VisemeReached;" />
      <MemberSignature Language="F#" Value="member this.VisemeReached : EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " Usage="member this.VisemeReached : System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uruchamiany, gdy zostanie osiągnięty viseme.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Viseme jest podstawowym położeniem jamy ustnej i czołowej podczas wymawiania fonemu. Visemes są wizualną reprezentacją fonemów.  
  
 System. Speech obsługuje 21 visemes dla angielskiej wersji językowej USA, z których każdy odpowiada jednemu lub więcej fonemów.  <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>zdarzenia są zgłaszane, gdy osiągnięto nowy fonem, który ma inne odpowiadające viseme niż poprzednia fonem. Ponieważ niektóre visemes reprezentują więcej niż jeden fonem, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> zdarzenie nie jest generowane, jeśli Następna fonem została osiągnięta jako odpowiednik tego samego viseme, co poprzednie fonem. Na przykład dla mówionych słów "Ta strefa" <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> zdarzenie jest zgłaszane dla "s" w "This" i "z" w "strefie". <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> Jednak zdarzenie nie jest zgłaszane dla "z" w "strefie", ponieważ odnosi się do tego samego viseme, co "s" w "This".  
  
 Poniżej znajduje się lista 21 fonemów i grup fonem SAPI, które odpowiadają viseme w języku angielskim USA.  
  
|Viseme|Fonem|  
|------------|------------------|  
|0|wyciszenia|  
|1|AE, AX, Ah|  
|2|aa|  
|3|Ao|  
|4|EY, eh, zapomniano|  
|5|encj|  
|6|y, m, IH, IX|  
|7|w, UW|  
|8|ow|  
|9|AW|  
|10|Oy-|  
|11|ay|  
|12|h|  
|13|r|  
|14|l|  
|15|s, z|  
|16|sh, ch, jh, zh|  
|17|th, DH|  
|18|f, v|  
|19|d, t, n|  
|20|k, g, ng|  
|21|p, b, m|  
  
 Informacje o danych skojarzonych ze `VisemeReached` zdarzeniem znajdują się w temacie. <xref:System.Speech.Synthesis.VisemeReachedEventArgs>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Voice">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.VoiceInfo Voice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Synthesis.VoiceInfo Voice" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Voice As VoiceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::VoiceInfo ^ Voice { System::Speech::Synthesis::VoiceInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Voice : System.Speech.Synthesis.VoiceInfo" Usage="System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.VoiceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o bieżącym głosowaniu <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiektu.</summary>
        <value>Zwraca informacje o bieżącym głosowaniu <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po zainicjowaniu nowego <xref:System.Speech.Synthesis.SpeechSynthesizer>elementu używa domyślnego głosu systemowego. Aby skonfigurować <xref:System.Speech.Synthesis.SpeechSynthesizer> obiekt do użycia jednego z zainstalowanych głosów syntezy mowy, <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> Użyj metody lub <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> . Aby uzyskać informacje o tym, które głosy są zainstalowane, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Użyj metody <xref:System.Speech.Synthesis.VoiceInfo> i klasy.  
  
   
  
## Examples  
 Poniższy przykład Inicjuje wystąpienie programu <xref:System.Speech.Synthesis.SpeechSynthesizer> i pobiera informacje o bieżącym głosie.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Get information about supported audio formats.  
        string AudioFormats = "";  
        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  
        {  
          AudioFormats += String.Format("{0}\n",  
          fmt.EncodingFormat.ToString());  
        }  
  
        // Write information about the voice to the console.  
        Console.WriteLine(" Name:          " + synth.Voice.Name);  
        Console.WriteLine(" Culture:       " + synth.Voice.Culture);  
        Console.WriteLine(" Age:           " + synth.Voice.Age);  
        Console.WriteLine(" Gender:        " + synth.Voice.Gender);  
        Console.WriteLine(" Description:   " + synth.Voice.Description);  
        Console.WriteLine(" ID:            " + synth.Voice.Id);  
        if (synth.Voice.SupportedAudioFormats.Count != 0)  
        {  
          Console.WriteLine(" Audio formats: " + AudioFormats);  
        }  
        else  
        {  
          Console.WriteLine(" No supported audio formats found");  
        }  
  
        // Get additional information about the voice.  
        string AdditionalInfo = "";  
        foreach (string key in synth.Voice.AdditionalInfo.Keys)  
        {  
          AdditionalInfo += String.Format("  {0}: {1}\n",  
            key, synth.Voice.AdditionalInfo[key]);  
        }  
  
        Console.WriteLine(" Additional Info - " + AdditionalInfo);  
        Console.WriteLine();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </Member>
    <Member MemberName="VoiceChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VoiceChange As EventHandler(Of VoiceChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VoiceChangeEventArgs ^&gt; ^ VoiceChange;" />
      <MemberSignature Language="F#" Value="member this.VoiceChange : EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " Usage="member this.VoiceChange : System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uruchamiany, gdy głos <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> zmiany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przykład i informacje o danych skojarzonych ze zdarzeniem znajdują się w <xref:System.Speech.Synthesis.VoiceChangeEventArgs>temacie.  
  
 Możesz zmienić głos <xref:System.Speech.Synthesis.SpeechSynthesizer> , którego używa z dowolnymi <xref:System.Speech.Synthesis.PromptBuilder> <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> metodami lub <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> metodami lub.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public int Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Volume" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberSignature Language="VB.NET" Value="Public Property Volume As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Volume { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Volume : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ilość <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> wyjściową obiektu.</summary>
        <value>Zwraca objętość z przenoszącą <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />od 0 do 100.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie ustawiono głośność <xref:System.Speech.Synthesis.SpeechSynthesizer>dźwięku dźwiękowego i pliku WAV z wynikiem syntezy.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Set the volume of the SpeechSynthesizer's ouput.  
        synth.Volume = 60;  
  
        // Build a prompt containing recorded audio and synthesized speech.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendAudio("C:\\Test\\WelcomeToContosoRadio.wav");  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
