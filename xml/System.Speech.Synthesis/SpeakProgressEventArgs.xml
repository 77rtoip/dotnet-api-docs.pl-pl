<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f5a146867d4dbd7adf493e2df44878f559c9c62" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39928843" /></Metadata><TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <TypeSignature Language="F#" Value="type SpeakProgressEventArgs = class&#xA;    inherit PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zwraca dane z <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" /> zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie <xref:System.Speech.Synthesis.SpeakProgressEventArgs> jest tworzone, gdy <xref:System.Speech.Synthesis.SpeechSynthesizer> obiektu zgłasza <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzeń. <xref:System.Speech.Synthesis.SpeechSynthesizer> Zgłasza to zdarzenie, dla każdego nowego wyrazu, który komunikuje się on w wierszu polecenia przy użyciu dowolnej z <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, lub <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> metody.  
  
 Zwrócone dane opiera się na mowy syntezy Markup Language (SSML) generujący kod. Wartości zwracane dla <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> obejmują spacje i znaki i zawartość tagów SSML wygenerowane przez kod.  
  
   
  
## Examples  
 Poniższy przykład pokazuje informacje, które są dostępne z <xref:System.Speech.Synthesis.SpeakProgressEventArgs>. Uwaga jak <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, i <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> wpływa na metody <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> przez dodanie ich ** \<p >**, ** \</p >**, ** \<s >**, i ** \</s >** tagi do wygenerowanego SSML. Ponadto istnieją dwa wpisy w danych wyjściowych dla "% 30", jeden dla każdego wyrazu mówić następujący ciąg liczb (trzydzieści procent). <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> i <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> są takie same dla każdego wpisu i reprezentują znaków "30%. Jednak <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> zmiany w celu uwzględnienia wypowiedzi słów "trzydzieści" i "procent" przez <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character postion to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pozycję audio zdarzenia.</summary>
        <value>Zwraca pozycję zdarzenia do strumienia wyjściowego audio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizuje numery wyrazy, które odpowiadają jak numer będzie używany. Na przykład Syntezator mówi numer "4003" jako "trzy tysiąc czterech". Zgłasza <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzenia dla każdego wypowiadanych słów i zwraca <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> dla każdego wyrazu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterCount : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaków w programie word, który był używany przed zdarzenia zostało podniesione.</summary>
        <value>Zwraca liczbę znaków w programie word, który był używany przed zdarzenia zostało podniesione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizuje numery wyrazy, które odpowiadają jak numer będzie używany. Na przykład Syntezator mówi numer "4003" jako "trzy tysiąc czterech". Zgłasza <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzeń dla każdego wypowiadanych słów. Jednak <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> właściwości dla każdego z trzech słów, jest taka sama. Liczba znaków w numerze "4003" w tekście wiersza, w tym przypadku to cztery.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterPosition : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaków i spacji na początku wybrać odpowiedni monitu o do pozycji przed pierwszą literę wyrazu, który został właśnie używany.</summary>
        <value>Zwraca liczbę znaków i spacji na początku wybrać odpowiedni monitu o do pozycji przed pierwszą literę wyrazu, który został właśnie używany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> Zawiera liczbę znaków w tagów XML, łącznie z ich obejmującego nawiasy kwadratowe. Używając dowolnego <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, lub <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> metod zawartości są dodawane do wiersza SSML, która obejmuje otwierającym i zamykającym `speak` elementów. Otwieranie `speak` elementu dodaje wartość przesunięcia 82 znaków i spacji do <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> wszystkie wyrazy i liter w wierszu polecenia. Na przykład w poniższym fragmencie kodu <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> pierwszy wyraz, "", jest to 82.  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 W powyższym przykładzie <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> słowa "test" jest 92. W poniższym fragmencie kodu <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> słowa "test" jest wyższa o 23 znaków (115), ponieważ otwarcie ** \<pomysłu prosody = "high" >** tag, poprzedzającym go zawiera 23 znaków i spacji (dwa znak ucieczki znaki "\\" nie są liczone).  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 Jeśli używasz <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> metody do dodawania zawartości do wiersza, określając plik otwarcia `xml` deklaracji i `speak` elementy w pliku są używane lub nie traktowane. Pierwszy znak w pliku po otwarciu `speak` tag będzie pozycja 82, jeśli jest pierwszym zawartości w wierszu polecenia.  
  
 Natomiast parametr ciągu <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> metody nie poproś o dodanie Cię do wiersza SSML przed mowy. W związku z tym <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> pierwszy wyraz "this" w poniższym fragmencie kodu wynosi zero.  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizuje numery wyrazy, które odpowiadają jak numer będzie używany. Na przykład Syntezator mówi numer "4003" jako "trzy tysiąc czterech". Zgłasza <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzeń dla każdego z trzech wypowiadanych słów. Jednak <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> właściwości dla każdego z trzech słów, jest taka sama. Jest pozycji przed pierwszym znakiem numeru "4003", tekst monitu o.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> i dołącza zawartość pliku XML przy użyciu SSML <xref:System.Xml.XmlReader>. Przykład danych wyjściowych mowy do pliku WAV do odtwarzania. Zawartość pliku XML zawierającego SSML pojawia się w poniższym przykładzie kodu.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tekst, który został właśnie używany podczas zdarzenia zostało podniesione.</summary>
        <value>Zwraca tekst, który został właśnie używany podczas zdarzenia zostało podniesione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizuje numery wyrazy, które odpowiadają jak numer będzie używany. Na przykład Syntezator mówi numer "4003" jako "trzy tysiąc czterech". Zgłasza <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzeń dla każdego wypowiadanych słów. Jednak <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> właściwości dla każdego z trzech słów, jest taka sama. Jest tekst "4003" w wierszu polecenia.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> raporty zdarzeń <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> i <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> właściwości ciągów, które zawierają liczby.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>