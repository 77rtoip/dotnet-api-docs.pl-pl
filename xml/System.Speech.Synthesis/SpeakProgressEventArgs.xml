<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="14a63a784adf4b871867f9253662cb34de5e6479" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69145625" /></Metadata><TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <TypeSignature Language="F#" Value="type SpeakProgressEventArgs = class&#xA;    inherit PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zwraca dane ze <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" /> zdarzenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie <xref:System.Speech.Synthesis.SpeakProgressEventArgs> jest tworzone, <xref:System.Speech.Synthesis.SpeechSynthesizer> gdy obiekt wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzenie. <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>Wywołuje to zdarzenie dla każdego nowego wyrazu, który mówią w monicie przy użyciu dowolnej z metod,,, lub. <xref:System.Speech.Synthesis.SpeechSynthesizer>  
  
 Zwrócone dane są oparte na języku SSML (Speech Syntezing Language), który generuje kod. Wartości zwracane <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> przez funkcję include Spaces oraz znaki i zawartość tagów SSML generowanych przez kod.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono informacje, które są dostępne w <xref:System.Speech.Synthesis.SpeakProgressEventArgs>programie. Należy zwrócić uwagę <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>jak <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>metody, <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> , <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A>iwpływają na to poprzez dodanie  **>p,/p>,s>i\<**  **\<**  **\<** /s > Tagi dla wygenerowanego SSML.  **\<** Ponadto istnieją dwa wpisy w danych wyjściowych dla "30%", jeden dla każdego wyrazu, aby wypowiedzieć ten ciąg liczbowy (30 procent). <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> I<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> są takie same dla każdego wpisu i reprezentują znaki "30%. Jednakże zmiany odzwierciedlają słowa "30" i "procent" <xref:System.Speech.Synthesis.SpeechSynthesizer>przez. <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pozycję audio zdarzenia.</summary>
        <value>Zwraca pozycję zdarzenia w strumieniu wyjściowym audio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizuje liczby do wyrazów, które odpowiadają sposobom wymawiania liczby. Na przykład syntezator wypowiada liczbę "4003" jako "4003". Wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzenie dla każdego z wypowiadanych słów i <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> zwraca wartość dla każdego wyrazu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterCount : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaków w wyrazie, które zostały wypowiadane tuż przed podniesieniem zdarzenia.</summary>
        <value>Zwraca liczbę znaków w słowie, która została wypowiadana tuż przed podniesieniem zdarzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizuje liczby do wyrazów, które odpowiadają sposobom wymawiania liczby. Na przykład syntezator wypowiada liczbę "4003" jako "4003". Wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzenie dla każdego z wypowiadanych słów. <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> Jednak właściwość dla każdego z trzech wyrazów jest taka sama. Jest to liczba znaków w numerze "4003" w tekście monitu, w tym przypadku cztery.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterPosition : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaków i spacji od początku monitu do pozycji przed pierwszą literą wyrazu, który właśnie wymawiał.</summary>
        <value>Zwraca liczbę znaków i spacji od początku monitu do pozycji przed pierwszą literą wyrazu, który właśnie wymawiał.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> Zawiera liczbę znaków w tagach XML, w tym ich nawiasy klamrowe. W przypadku używania dowolnej z <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>metod, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, lub <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> , zawartość jest dodawana do wiersza polecenia SSML, który zawiera elementy otwierające i `speak` zamykające. Element otwierający `speak` dodaje przesunięcie o 82 znaków i spacji <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> do wszystkich wyrazów i liter w monicie. Na przykład w poniższym fragmencie kodu <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> pierwszy wyraz, "This" jest 82.  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 W powyższym przykładzie <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> słowo "test" ma wartość 92. W poniższym fragmencie kodu <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> słowo "test" ma 23 znaki wyższe (115), ponieważ otwierająca  **\<Prosody gęstość = "High" >** znacznik zawierający 23 znaki i\\ spacje (dwa znaki ucieczki). "nie są zliczane).  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 W przypadku używania <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> metod do dodawania zawartości do monitu przez określenie pliku, deklaracja otwierająca `xml` i `speak` elementy w pliku nie są używane ani zliczane. Pierwszy znak w pliku po tagu otwierającym `speak` będzie na pozycji 82, jeśli jest to pierwsza zawartość w wierszu.  
  
 Z kolei parametr <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> String metody nie jest dodawany do monitu SSML przed wymawianiem. W związku z tym, z pierwszego wyrazu, "This", w poniższym fragmencie kodu jest zero. <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A>  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizuje liczby do wyrazów, które odpowiadają sposobom wymawiania liczby. Na przykład syntezator wypowiada liczbę "4003" jako "4003". Wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzenie dla każdego z trzech wypowiadanych słów. <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> Jednak właściwość dla każdego z trzech wyrazów jest taka sama. Jest to pozycja przed pierwszym znakiem liczby "4003" w tekście monitu.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> i dołącza zawartość SSML pliku XML przy użyciu <xref:System.Xml.XmlReader>. Przykład wyprowadza mowę do pliku WAV na potrzeby odtwarzania. Zawartość pliku XML zawierającego SSML pojawia się poniżej przykładu kodu.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tekst, który był właśnie wymawiany podczas zgłoszenia zdarzenia.</summary>
        <value>Zwraca tekst, który był właśnie wymawiany po wywołaniu zdarzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizuje liczby do wyrazów, które odpowiadają sposobom wymawiania liczby. Na przykład syntezator wypowiada liczbę "4003" jako "4003". Wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> zdarzenie dla każdego z wypowiadanych słów. <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> Jednak właściwość dla każdego z trzech wyrazów jest taka sama. Jest to tekst "4003" z wiersza polecenia.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> zgłaszania przez zdarzenie właściwości i <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> dla ciągów zawierających liczby.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
