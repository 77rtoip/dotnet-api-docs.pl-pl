<Type Name="PromptBuilder" FullName="System.Speech.Synthesis.PromptBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d3cf191e551b332cdd652ad1dfd6b103d7383185" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58701044" /></Metadata><TypeSignature Language="C#" Value="public class PromptBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PromptBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.PromptBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PromptBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PromptBuilder" />
  <TypeSignature Language="F#" Value="type PromptBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="952ef-101">Tworzy pustą <see cref="T:System.Speech.Synthesis.Prompt" /> obiektu i zawiera metody służące do dodawania zawartości, wybierając głosów, kontrolowania atrybuty głosu i kontrolowanie Wymowa wypowiadanych słów.</span><span class="sxs-lookup"><span data-stu-id="952ef-101">Creates an empty <see cref="T:System.Speech.Synthesis.Prompt" /> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-102">Za pomocą <xref:System.Speech.Synthesis.PromptBuilder>, Dodaj różne typy zawartości do wiersza, w tym zwykłego tekstu, SSML znaczników (jako ciąg lub pliku), rejestrowane audio, lub nawet inny <xref:System.Speech.Synthesis.PromptBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-102">With <xref:System.Speech.Synthesis.PromptBuilder>, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span>  
  
 <span data-ttu-id="952ef-103">Aby dołączyć tekst do <xref:System.Speech.Synthesis.PromptBuilder> obiekt oraz opcjonalnie kontrolować głosu atrybutów, takich jak wyróżnienia, szybkości i wolumin, użyj jednej z <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-103">To append text to a <xref:System.Speech.Synthesis.PromptBuilder> object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods.</span></span>  <span data-ttu-id="952ef-104">Można również sterować atrybuty głosu jako grupa o <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> i <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-104">You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods.</span></span>  
  
 <span data-ttu-id="952ef-105">Możesz dołączyć tekst i kontrolować wypowiadanych lub, w jaki sposób są wymawiane, za pomocą <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, lub <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-105">You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods.</span></span>  
  
 <span data-ttu-id="952ef-106">Zmień obecnie wybranego głosu wypowiedzi w wierszu polecenia przy użyciu jednej z przeciążonych <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> metod, nazwy określonego głosu do użycia lub określenie wymagane właściwości głosowych, takich jak wieku oraz płci.</span><span class="sxs-lookup"><span data-stu-id="952ef-106">Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.</span></span>  
  
 <span data-ttu-id="952ef-107">Na potrzeby generowania mowy z <xref:System.Speech.Synthesis.PromptBuilder> obiektu przekazywanej jako argument do <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-107">To generate speech from a <xref:System.Speech.Synthesis.PromptBuilder> object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
 <span data-ttu-id="952ef-108">Aby uzyskać więcej informacji, zobacz [konstruowania złożonych monitu](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span><span class="sxs-lookup"><span data-stu-id="952ef-108">For more information, see [Constructing a Complex Prompt](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="952ef-109">Tworzy nowe wystąpienie klasy <see cref="T:System.Speech.Synthesis.PromptBuilder" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="952ef-109">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-110">Tworzy nowe wystąpienie klasy <see cref="T:System.Speech.Synthesis.PromptBuilder" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="952ef-110">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="952ef-111">Poniższy przykład tworzy nowy <xref:System.Speech.Synthesis.PromptBuilder> wystąpieniu oraz dodaje ciąg tekstowy do niego.</span><span class="sxs-lookup"><span data-stu-id="952ef-111">The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="952ef-112">Następujący kod Pokazuje odpowiednik w mowy syntezy Markup Language (SSML), (`xml:lang` jest wymaganego atrybutu `speak` elementu):</span><span class="sxs-lookup"><span data-stu-id="952ef-112">The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.PromptBuilder : System.Globalization.CultureInfo -&gt; System.Speech.Synthesis.PromptBuilder" Usage="new System.Speech.Synthesis.PromptBuilder culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="952ef-113">Zawiera informacje dotyczące określonej kultury, takie jak jego język, nazwa kultury, system pisma, kalendarz używany i sposób formatowania dat i sortowania ciągów.</span><span class="sxs-lookup"><span data-stu-id="952ef-113">Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="952ef-114">Tworzy nowe wystąpienie klasy <see cref="T:System.Speech.Synthesis.PromptBuilder" /> klasy i określa kulturę.</span><span class="sxs-lookup"><span data-stu-id="952ef-114">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class and specifies a culture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-115">Ten konstruktor ustawia wartość <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="952ef-115">This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="952ef-116"><xref:System.Speech.Synthesis.SpeechSynthesizer> Obiektu będzie podejmować próby Wybierz zainstalowany głos, obsługujący język określony przez `culture` parametru do przetwarzania w wierszu polecenia.</span><span class="sxs-lookup"><span data-stu-id="952ef-116">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt.</span></span> <span data-ttu-id="952ef-117">Jeśli zostanie znaleziony głosu przy użyciu określonej kultury, będzie on używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-117">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="952ef-118">Jeśli nie można odnaleźć głosu przy użyciu określonej kultury, głos domyślny będą używane.</span><span class="sxs-lookup"><span data-stu-id="952ef-118">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="952ef-119">Poprawnie Wymowa słów w języku określonym przez `culture` parametru, aparat syntezy (zamiana tekstu na mowę lub TTS) mowy, który obsługuje język musi być zainstalowany.</span><span class="sxs-lookup"><span data-stu-id="952ef-119">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="952ef-120">Zainstalowane aparatu TTS nosi nazwę głosu.</span><span class="sxs-lookup"><span data-stu-id="952ef-120">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="952ef-121">Aby uzyskać informacje o tym, które są zainstalowane głosów dla określonej kultury, należy użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-121">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="952ef-122">Program Microsoft Windows i interfejsu API System.Speech Zaakceptuj wszystkie prawidłowe kody krajów języka jako wartości dla `culture`.</span><span class="sxs-lookup"><span data-stu-id="952ef-122">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="952ef-123">Aparaty TTS, które są dostarczane z programem Windows 7 obsługują następujące kody krajów języka:</span><span class="sxs-lookup"><span data-stu-id="952ef-123">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="952ef-124">en-US.</span><span class="sxs-lookup"><span data-stu-id="952ef-124">en-US.</span></span> <span data-ttu-id="952ef-125">Angielski (Stany Zjednoczone)</span><span class="sxs-lookup"><span data-stu-id="952ef-125">English (United States)</span></span>  
  
-   <span data-ttu-id="952ef-126">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="952ef-126">zh-CN.</span></span> <span data-ttu-id="952ef-127">Chiński (Chiny)</span><span class="sxs-lookup"><span data-stu-id="952ef-127">Chinese (China)</span></span>  
  
-   <span data-ttu-id="952ef-128">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="952ef-128">zh-TW.</span></span> <span data-ttu-id="952ef-129">Chiński (Tajwan)</span><span class="sxs-lookup"><span data-stu-id="952ef-129">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="952ef-130">Kody dwuliterowych języków, takich jak "en", również są dozwolone.</span><span class="sxs-lookup"><span data-stu-id="952ef-130">Two-letter language codes such as "en" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-131">Tworzy w poniższym przykładzie <xref:System.Speech.Synthesis.PromptBuilder> wystąpienia i określa jej <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-131">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo("en-US"));  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="952ef-132">Następujący kod przedstawia równoważne SSML:</span><span class="sxs-lookup"><span data-stu-id="952ef-132">The following markup shows the equivalent SSML:</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendAudio">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="952ef-133">Dołącza określony plik dźwiękowy do <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-133">Appends a specified audio file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : string -&gt; unit" Usage="promptBuilder.AppendAudio path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="952ef-134">W pełni kwalifikowana ścieżka do pliku audio.</span><span class="sxs-lookup"><span data-stu-id="952ef-134">A fully qualified path to the audio file.</span></span></param>
        <summary><span data-ttu-id="952ef-135">Dołącza określony plik dźwiękowy do <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="952ef-135">Appends the specified audio file to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri -&gt; unit" Usage="promptBuilder.AppendAudio audioFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="audioFile"><span data-ttu-id="952ef-136">Identyfikator URI dla pliku audio.</span><span class="sxs-lookup"><span data-stu-id="952ef-136">URI for the audio file.</span></span></param>
        <summary><span data-ttu-id="952ef-137">Dołącza plik dźwiękowy na określony identyfikator URI do <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="952ef-137">Appends the audio file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="952ef-138">Poniższy przykład inicjuje nowe wystąpienie klasy <xref:System.Speech.Synthesis.PromptBuilder> klasy, a następnie dodaje tekst do niego, a następnie plik audio.</span><span class="sxs-lookup"><span data-stu-id="952ef-138">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
    // Add a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("How are you today?");  
    builder.AppendAudio(new Uri ("http://www.speech.microsoft.com/ding.wav"));  
}  
```  
  
 <span data-ttu-id="952ef-139">Następujący kod przedstawia równoważne znaczników SSML.</span><span class="sxs-lookup"><span data-stu-id="952ef-139">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  How are you today?  
  <audio src="http://www.speech.microsoft.com/ding.wav" />  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile, string alternateText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile, string alternateText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri, alternateText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile, System::String ^ alternateText);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri * string -&gt; unit" Usage="promptBuilder.AppendAudio (audioFile, alternateText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile"><span data-ttu-id="952ef-140">Identyfikator URI dla pliku audio.</span><span class="sxs-lookup"><span data-stu-id="952ef-140">URI for the audio file.</span></span></param>
        <param name="alternateText"><span data-ttu-id="952ef-141">Ciąg zawierający tekst zastępczy reprezentujący audio.</span><span class="sxs-lookup"><span data-stu-id="952ef-141">A string containing alternate text representing the audio.</span></span></param>
        <summary><span data-ttu-id="952ef-142">Dołącza określony plik audio i tekst alternatywny do <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="952ef-142">Appends the specified audio file and alternate text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-143">Aparat synteza mowy będzie odtwarzać tekst alternatywny, jeśli nie można odtworzyć plik audio.</span><span class="sxs-lookup"><span data-stu-id="952ef-143">The speech synthesis engine will speak the alternate text if the audio file cannot be played.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-144">Poniższy przykład dodaje plik dźwiękowy do <xref:System.Speech.Synthesis.PromptBuilder> wystąpienia i określa tekst mówić, jeśli nie można odtworzyć plik audio.</span><span class="sxs-lookup"><span data-stu-id="952ef-144">The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
  
    // Concatenate a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendAudio(new Uri ("C:\\OnHold.wav"), "Your call will be answered in the order it was received");  
}  
```  
  
 <span data-ttu-id="952ef-145">Następujący kod przedstawia równoważne znaczników SSML.</span><span class="sxs-lookup"><span data-stu-id="952ef-145">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  <audio src="C:\OnHold.wav"> Your call will be answered in the order it was received. </audio>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBookmark">
      <MemberSignature Language="C#" Value="public void AppendBookmark (string bookmarkName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBookmark(string bookmarkName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBookmark (bookmarkName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBookmark(System::String ^ bookmarkName);" />
      <MemberSignature Language="F#" Value="member this.AppendBookmark : string -&gt; unit" Usage="promptBuilder.AppendBookmark bookmarkName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bookmarkName"><span data-ttu-id="952ef-146">Ciąg zawierający nazwę dołączonych zakładki.</span><span class="sxs-lookup"><span data-stu-id="952ef-146">A string containing the name of the appended bookmark.</span></span></param>
        <summary><span data-ttu-id="952ef-147">Dołącza zakładkę do <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-147">Appends a bookmark to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-148">Generuje aparatu synteza mowy <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> zdarzeń, jeśli wykryje nieważną ust monit przy użyciu dowolnej z zakładki <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, lub <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-148">A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-149">Poniższy przykład tworzy wiersza, która zawiera dwa zakładek i wysyła dane wyjściowe do pliku do odtwarzania WAV.</span><span class="sxs-lookup"><span data-stu-id="952ef-149">The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback.</span></span> <span data-ttu-id="952ef-150">Obsługa <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> zdarzeń zapisuje nazwy zakładki i położenia w strumienia audio, gdy zdarzenia zostało podniesione do konsoli.</span><span class="sxs-lookup"><span data-stu-id="952ef-150">The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendBreak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="952ef-151">Wstawia podział (Wstrzymaj) w treści <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-151">Inserts a break (pause) in the content of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak();" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : unit -&gt; unit" Usage="promptBuilder.AppendBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-152">Dołącza break, aby <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-152">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-153">Ta metoda nie określa czas trwania przerwy.</span><span class="sxs-lookup"><span data-stu-id="952ef-153">This method does not specify a duration for the break.</span></span> <span data-ttu-id="952ef-154"><xref:System.Speech.Synthesis.SpeechSynthesizer> Określi, że wartość czasu trwania na podstawie kontekstu językowego.</span><span class="sxs-lookup"><span data-stu-id="952ef-154">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-155">Poniższy przykład tworzy wiersz zawierający dwa zdania rozdzielonych przez podziały i mówi po wyświetleniu monitu domyślne urządzenie audio na komputerze.</span><span class="sxs-lookup"><span data-stu-id="952ef-155">The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.");  
        builder.AppendBreak();  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.Speech.Synthesis.PromptBreak strength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (strength As PromptBreak)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(System::Speech::Synthesis::PromptBreak strength);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : System.Speech.Synthesis.PromptBreak -&gt; unit" Usage="promptBuilder.AppendBreak strength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strength" Type="System.Speech.Synthesis.PromptBreak" />
      </Parameters>
      <Docs>
        <param name="strength"><span data-ttu-id="952ef-156">Wskazuje czas trwania przerwy, z następującymi wartościami zwiększa:</span><span class="sxs-lookup"><span data-stu-id="952ef-156">Indicates the duration of the break, with the following increasing values:</span></span></param>
        <summary><span data-ttu-id="952ef-157">Dołącza break, aby <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu oraz określa jego siły (czas trwania).</span><span class="sxs-lookup"><span data-stu-id="952ef-157">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its strength (duration).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-158">Wartości w <xref:System.Speech.Synthesis.PromptBreak> wyliczenie reprezentują szeroką gamę separacji interwałów (wstrzymuje się) między granicami programu word.</span><span class="sxs-lookup"><span data-stu-id="952ef-158">The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries.</span></span> <span data-ttu-id="952ef-159">Aparat synteza mowy określa dokładny czas trwania interwału.</span><span class="sxs-lookup"><span data-stu-id="952ef-159">The speech synthesis engine determines the exact duration of the interval.</span></span> <span data-ttu-id="952ef-160">Jeśli wymagane są podziału, jedną z następujących wartości są przekazywane do aparatu zamiany tekstu na mowę (TTS), który zawiera mapowania między te wartości i odpowiadające im wartości podziału milisekundach.</span><span class="sxs-lookup"><span data-stu-id="952ef-160">When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-161">Poniższy przykład tworzy wiersz zawierający dwa zdania rozdzielonych przez podziały i wysyła dane wyjściowe do pliku WAV do odtwarzania.</span><span class="sxs-lookup"><span data-stu-id="952ef-161">The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(PromptBreak.Medium);  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (duration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(TimeSpan duration);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : TimeSpan -&gt; unit" Usage="promptBuilder.AppendBreak duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="duration"><span data-ttu-id="952ef-162">Czas w dziesięciomilionowych częściach sekundy, gdzie jeden znaczników jest równa 100 nanosekund.</span><span class="sxs-lookup"><span data-stu-id="952ef-162">The time in ticks, where one tick equals 100 nanoseconds.</span></span></param>
        <summary><span data-ttu-id="952ef-163">Dołącza podziału przez określony czas na <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-163">Appends a break of the specified duration to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-164">Podział może służyć do kontrolowania, wstrzymuje lub innych akcent granice między wyrazami.</span><span class="sxs-lookup"><span data-stu-id="952ef-164">A break can be used to control pauses or other prosodic boundaries between words.</span></span> <span data-ttu-id="952ef-165">Podział jest opcjonalne.</span><span class="sxs-lookup"><span data-stu-id="952ef-165">A break is optional.</span></span> <span data-ttu-id="952ef-166">Jeśli nie ma podziału, Syntezator określa przerwy między wyrazami, w zależności od kontekstu językowego.</span><span class="sxs-lookup"><span data-stu-id="952ef-166">If a break is not present, the synthesizer determines the break between words depending on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-167">Poniższy przykład tworzy wiersz zawierający dwa zdania rozdzielonych przez podziały taktów 15000000 (1,5 s), a wybór wiersza do domyślnego urządzenia audio na komputerze.</span><span class="sxs-lookup"><span data-stu-id="952ef-167">The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(new TimeSpan(15000000));  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPromptBuilder">
      <MemberSignature Language="C#" Value="public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendPromptBuilder(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendPromptBuilder(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.AppendPromptBuilder : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="promptBuilder.AppendPromptBuilder promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder"><span data-ttu-id="952ef-168">Zawartość do dołączenia.</span><span class="sxs-lookup"><span data-stu-id="952ef-168">The content to append.</span></span></param>
        <summary><span data-ttu-id="952ef-169">Dołącza <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu do drugiego <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-169">Appends a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object to another <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="952ef-170">W poniższym przykładzie tworzy dwa <xref:System.Speech.Synthesis.PromptBuilder> wystąpień i dołącza je do innego <xref:System.Speech.Synthesis.PromptBuilder>.</span><span class="sxs-lookup"><span data-stu-id="952ef-170">The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\showtimes.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\showtimes.wav");  
  
        // Build child prompts.  
        PromptBuilder theatreA = new PromptBuilder();  
        theatreA.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30");  
        theatreA.AppendBreak(PromptBreak.Large);  
        PromptBuilder theatreB = new PromptBuilder();  
        theatreB.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Build the parent prompt and append the two child prompts.  
        PromptBuilder showTimes = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        showTimes.AppendText(  
          "The following are the show times for tonight's movies:");  
        showTimes.AppendPromptBuilder(theatreA);  
        showTimes.AppendPromptBuilder(theatreB);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(showTimes);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendSsml">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="952ef-171">Dołącza plik SSML do <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-171">Appends an SSML file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : string -&gt; unit" Usage="promptBuilder.AppendSsml path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="952ef-172">W pełni kwalifikowana ścieżka do pliku SSML do dołączenia.</span><span class="sxs-lookup"><span data-stu-id="952ef-172">A fully qualified path to the SSML file to append.</span></span></param>
        <summary><span data-ttu-id="952ef-173">Dołącza plik SSML w określonej ścieżce na <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-173">Appends the SSML file at the specified path to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-174">Plik SSML musi być plikiem formatu XML, który jest zgodny z [mowy syntezy Markup Language (SSML) w wersji 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specyfikacji.</span><span class="sxs-lookup"><span data-stu-id="952ef-174">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specification.</span></span>  
  
 <span data-ttu-id="952ef-175">Można także dołączyć znacznik SSML jako ciąg za pośrednictwem <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-175">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-176">Tworzy w poniższym przykładzie <xref:System.Speech.Synthesis.PromptBuilder> obiektu i dołącza zawartość pliku SSML przy użyciu <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-176">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml("c:\\test\\Weather.ssml");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 <span data-ttu-id="952ef-177">Poniżej znajduje się plik SSML, który odwołuje się do poprzedniego przykładu.</span><span class="sxs-lookup"><span data-stu-id="952ef-177">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (Uri ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Uri ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(Uri ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : Uri -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="ssmlFile"><span data-ttu-id="952ef-178">W pełni kwalifikowany identyfikator URI pliku SSML do dołączenia.</span><span class="sxs-lookup"><span data-stu-id="952ef-178">A fully qualified URI to the SSML file to append.</span></span></param>
        <summary><span data-ttu-id="952ef-179">Dołącza plik SSML na określony identyfikator URI do <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-179">Appends the SSML file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-180">Plik SSML musi być plikiem formatu XML, który jest zgodny z [mowy syntezy Markup Language (SSML) w wersji 1.0](https://www.w3.org/TR/speech-synthesis/) specyfikacji.</span><span class="sxs-lookup"><span data-stu-id="952ef-180">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="952ef-181">Można także dołączyć znacznik SSML jako ciąg za pośrednictwem <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-181">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-182">Tworzy w poniższym przykładzie <xref:System.Speech.Synthesis.PromptBuilder> obiektu i dołącza zawartość pliku SSML przy użyciu <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-182">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml(new Uri("c:\\test\\Weather.ssml"));  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 <span data-ttu-id="952ef-183">Poniżej znajduje się plik SSML, który odwołuje się do poprzedniego przykładu.</span><span class="sxs-lookup"><span data-stu-id="952ef-183">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (System.Xml.XmlReader ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Xml.XmlReader ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::Xml::XmlReader ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : System.Xml.XmlReader -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="ssmlFile"><span data-ttu-id="952ef-184">Pełna nazwa pliku XML do dołączenia.</span><span class="sxs-lookup"><span data-stu-id="952ef-184">A fully qualified name to the XML file to append.</span></span></param>
        <summary><span data-ttu-id="952ef-185">Dołącza <c>XMLReader</c> obiektu, który odwołuje się do SSML monit o <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-185">Appends an <c>XMLReader</c> object that references an SSML prompt to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-186">Plik SSML musi być plikiem formatu XML, który jest zgodny z [mowy syntezy Markup Language (SSML) w wersji 1.0](https://www.w3.org/TR/speech-synthesis/) specyfikacji.</span><span class="sxs-lookup"><span data-stu-id="952ef-186">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="952ef-187">Można także dołączyć znacznik SSML jako ciąg za pośrednictwem <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-187">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-188">Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> obiektu z <xref:System.Xml.XmlReader> obiektu, który odwołuje się do pliku zawierającego znaczników mowy syntezy Markup Language (SSML).</span><span class="sxs-lookup"><span data-stu-id="952ef-188">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.</span></span>  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Create the path to the SSML file.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.xml");  
        PromptBuilder builder = null;  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder = new PromptBuilder();  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsmlMarkup">
      <MemberSignature Language="C#" Value="public void AppendSsmlMarkup (string ssmlMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsmlMarkup(string ssmlMarkup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsmlMarkup (ssmlMarkup As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsmlMarkup(System::String ^ ssmlMarkup);" />
      <MemberSignature Language="F#" Value="member this.AppendSsmlMarkup : string -&gt; unit" Usage="promptBuilder.AppendSsmlMarkup ssmlMarkup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlMarkup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ssmlMarkup"><span data-ttu-id="952ef-189">Ciąg zawierający SSML znaczników.</span><span class="sxs-lookup"><span data-stu-id="952ef-189">A string containing SSML markup.</span></span></param>
        <summary><span data-ttu-id="952ef-190">Dołącza określony ciąg zawierający SSML znaczników w celu <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-190">Appends the specified string containing SSML markup to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-191">Podczas dołączania SSML znaczników, należy użyć znaków ucieczki odpowiednie.</span><span class="sxs-lookup"><span data-stu-id="952ef-191">You must use the appropriate escape characters when appending SSML markup.</span></span> <span data-ttu-id="952ef-192">Należy zauważyć, ze starszymi wersjami ukośników poprzedzających znaki cudzysłowu, otaczający wartość `interpret-as` atrybutu w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="952ef-192">Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:</span></span>  
  
```csharp  
builder.AppendSsmlMarkup("<say-as interpret-as = \"characters\"> chair </say-as>");  
```  
  
> [!NOTE]
>  <span data-ttu-id="952ef-193">Ciąg używany jako argument do <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> nie może zawierać `speak` elementu.</span><span class="sxs-lookup"><span data-stu-id="952ef-193">The string used as an argument to <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> cannot include a `speak` element.</span></span>  
  
 <span data-ttu-id="952ef-194">Korzystając z <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> do określenia wymowy wbudowanego w `phoneme` elementu, można użyć telefony z dowolnego z następujących alfabety fonetyczny, pod warunkiem, aparat rozpoznawania mowy w bieżącym obsługuje ona:</span><span class="sxs-lookup"><span data-stu-id="952ef-194">When using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:</span></span>  
  
-   <span data-ttu-id="952ef-195">Międzynarodowy alfabet fonetyczny (IPA)</span><span class="sxs-lookup"><span data-stu-id="952ef-195">International Phonetic Alphabet (IPA)</span></span>  
  
-   <span data-ttu-id="952ef-196">Zestaw Universal Phone (UPS)</span><span class="sxs-lookup"><span data-stu-id="952ef-196">Universal Phone Set (UPS)</span></span>  
  
-   <span data-ttu-id="952ef-197">Zestaw Phone nieokreślone</span><span class="sxs-lookup"><span data-stu-id="952ef-197">SAPI Phone Set</span></span>  
  
 <span data-ttu-id="952ef-198">Wszystkie zgodne SSML aparatu rozpoznawania mowy będzie odtwarzać telefony z IPA.</span><span class="sxs-lookup"><span data-stu-id="952ef-198">Any SSML-compliant speech engine will speak phones from the IPA.</span></span>  
  
 <span data-ttu-id="952ef-199">Można także dołączyć plik zawierający znaczników SSML przy użyciu jednej z <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-199">You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods.</span></span> <span data-ttu-id="952ef-200">Aby dołączyć wymawianie tekstu, który nie jest sformatowany w języku znaczników, użyj jednej z <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, lub <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-200">To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendText">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="952ef-201">Dołącza tekst <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-201">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string -&gt; unit" Usage="promptBuilder.AppendText textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="952ef-202">Ciąg zawierający tekst, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-202">A string containing the text to be spoken.</span></span></param>
        <summary><span data-ttu-id="952ef-203">Określa tekst do dołączenia do <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-203">Specifies text to append to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-204">Aby dołączyć tekst, który jest sformatowany jako język znaczników SSML, należy użyć <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-204">To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-205">Tworzy w poniższym przykładzie <xref:System.Speech.Synthesis.PromptBuilder> obiektu i dołącza ciąg tekstu za pomocą <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-205">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder speakText = new PromptBuilder();  
        speakText.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt.  
        synth.Speak(speakText);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptEmphasis emphasis) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, emphasis As PromptEmphasis)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptEmphasis emphasis);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptEmphasis -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, emphasis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="emphasis" Type="System.Speech.Synthesis.PromptEmphasis" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="952ef-206">Ciąg zawierający tekst, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-206">A string containing the text to be spoken.</span></span></param>
        <param name="emphasis"><span data-ttu-id="952ef-207">Wartość dla wyróżnienia lub obciążenia do zastosowania w tekście.</span><span class="sxs-lookup"><span data-stu-id="952ef-207">The value for the emphasis or stress to apply to the text.</span></span></param>
        <summary><span data-ttu-id="952ef-208">Dołącza tekst <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa stopień wyróżnienia do tekstu.</span><span class="sxs-lookup"><span data-stu-id="952ef-208">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the degree of emphasis for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-209">Aparaty synteza mowy w Windows obsługuje parametru nacisk w tej chwili.</span><span class="sxs-lookup"><span data-stu-id="952ef-209">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="952ef-210">Ustawianie wartości dla parametru wyróżnienia dadzą bez dźwiękowych zmian w danych wyjściowych syntezatora mowy.</span><span class="sxs-lookup"><span data-stu-id="952ef-210">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptRate rate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, rate As PromptRate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptRate rate);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptRate -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, rate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="rate" Type="System.Speech.Synthesis.PromptRate" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="952ef-211">Ciąg zawierający tekst, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-211">A string containing the text to be spoken.</span></span></param>
        <param name="rate"><span data-ttu-id="952ef-212">Wartość wypowiedzi stopa dyskontowa stosowana do tekstu.</span><span class="sxs-lookup"><span data-stu-id="952ef-212">The value for the speaking rate to apply to the text.</span></span></param>
        <summary><span data-ttu-id="952ef-213">Dołącza tekst <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa szybkość wypowiedzi w tekście.</span><span class="sxs-lookup"><span data-stu-id="952ef-213">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the speaking rate for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="952ef-214">Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> obiektu i dołącza ciągów tekstowych.</span><span class="sxs-lookup"><span data-stu-id="952ef-214">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="952ef-215">W przykładzie użyto <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> metodę, aby określić powolne wypowiedzi szybkości dla ciągu dodawane, które wylicza zawartości zamówienia.</span><span class="sxs-lookup"><span data-stu-id="952ef-215">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder speakRate = new PromptBuilder();  
        speakRate.AppendText("Your order for");  
        speakRate.AppendText("one kitchen sink and one faucet", PromptRate.Slow);  
        speakRate.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(speakRate);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptVolume volume) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, volume As PromptVolume)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptVolume volume);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptVolume -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, volume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="volume" Type="System.Speech.Synthesis.PromptVolume" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="952ef-216">Ciąg zawierający tekst, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-216">A string containing the text to be spoken.</span></span></param>
        <param name="volume"><span data-ttu-id="952ef-217">Wartość dla woluminu wypowiedzi (parametrów akustycznych) do zastosowania w tekście.</span><span class="sxs-lookup"><span data-stu-id="952ef-217">The value for the speaking volume (loudness) to apply to the text.</span></span></param>
        <summary><span data-ttu-id="952ef-218">Dołącza tekst <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa woluminu, który ma mowy na tekst.</span><span class="sxs-lookup"><span data-stu-id="952ef-218">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the volume to speak the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-219"><xref:System.Speech.Synthesis.PromptVolume.Default> Ustawienie <xref:System.Speech.Synthesis.PromptVolume> jest pełnym woluminie, która jest taka sama jak <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span><span class="sxs-lookup"><span data-stu-id="952ef-219">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="952ef-220">Inne ustawienia zmniejszenie ilości mowie względem całego woluminu.</span><span class="sxs-lookup"><span data-stu-id="952ef-220">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-221">W poniższym przykładzie użyto <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> metodę, aby określić ustawienia woluminu, <xref:System.Speech.Synthesis.SpeechSynthesizer> dotyczą mowie.</span><span class="sxs-lookup"><span data-stu-id="952ef-221">The following example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt that applies different volume settings.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is the default speaking volume.", PromptVolume.Default);  
        builder.AppendBreak();  
        builder.AppendText("This is the extra loud speaking volume.", PromptVolume.ExtraLoud);  
        builder.AppendBreak();  
        builder.AppendText("This is the medium speaking volume.", PromptVolume.Medium);  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithAlias">
      <MemberSignature Language="C#" Value="public void AppendTextWithAlias (string textToSpeak, string substitute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithAlias(string textToSpeak, string substitute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithAlias (textToSpeak As String, substitute As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithAlias(System::String ^ textToSpeak, System::String ^ substitute);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithAlias : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithAlias (textToSpeak, substitute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="substitute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="952ef-222">Ciąg zawierający reprezentację tekstową.</span><span class="sxs-lookup"><span data-stu-id="952ef-222">A string containing the text representation.</span></span></param>
        <param name="substitute"><span data-ttu-id="952ef-223">Ciąg zawierający tekst, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-223">A string containing the text to be spoken.</span></span></param>
        <summary><span data-ttu-id="952ef-224">Dołącza tekst <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa tekst alias wymawiane zamiast dołączony tekst.</span><span class="sxs-lookup"><span data-stu-id="952ef-224">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the alias text to be spoken in place of the appended text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-225">Dzięki temu dokumentu prowadzone i formę tekstową pojawił się monit.</span><span class="sxs-lookup"><span data-stu-id="952ef-225">This allows a document to contain both a spoken and a written form for a prompt.</span></span> <span data-ttu-id="952ef-226">Na przykład w formie pisemnej może być akronim, takich jak nieokreślone, i mówionej formy może być rozwinięty tekst akronim, w tym przypadków mowy Application Programming Interface.</span><span class="sxs-lookup"><span data-stu-id="952ef-226">For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-227">Poniższy przykład dołącza ciąg tekstowy ("mowy syntezy Markup Language") i jego aliasu ("SSML") do <xref:System.Speech.Synthesis.PromptBuilder> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-227">The following example appends a text string ("Speech Synthesis Markup Language") and its alias ("SSML") to a <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span> <span data-ttu-id="952ef-228">Syntezator będzie Wypowiedz "S S M L".</span><span class="sxs-lookup"><span data-stu-id="952ef-228">The synthesizer will pronounce "S S M L".</span></span>  
  
```  
PromptBuilder alias = new PromptBuilder();  
alias.AppendTextWithAlias("Speech Synthesis Markup Language","SSML");   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendTextWithHint">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="952ef-229">Dołącza tekst <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa typ zawartości tekstu.</span><span class="sxs-lookup"><span data-stu-id="952ef-229">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type of the text.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, valuetype System.Speech.Synthesis.SayAs sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::Speech::Synthesis::SayAs sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * System.Speech.Synthesis.SayAs -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.Speech.Synthesis.SayAs" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="952ef-230">Ciąg zawierający tekst, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-230">A string containing the text to be spoken.</span></span></param>
        <param name="sayAs"><span data-ttu-id="952ef-231">Typ zawartości tekstu.</span><span class="sxs-lookup"><span data-stu-id="952ef-231">The content type of the text.</span></span></param>
        <summary><span data-ttu-id="952ef-232">Dołącza tekst <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa typ zawartości przy użyciu członkiem <see cref="T:System.Speech.Synthesis.SayAs" /> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="952ef-232">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type using a member of the <see cref="T:System.Speech.Synthesis.SayAs" /> enumeration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-233">Typ zawartości, określony przez `sayAs` może stanowić wskazówkę dla aparatu synteza mowy o Wymowa zawartość `textToSpeak`.</span><span class="sxs-lookup"><span data-stu-id="952ef-233">The content type specified by `sayAs` can provide guidance to the speech synthesis engine about how to pronounce the contents of `textToSpeak`.</span></span>  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and define the data types for some of the added strings.  
        PromptBuilder sayAs = new PromptBuilder();  
        sayAs.AppendText("Your");  
        sayAs.AppendTextWithHint("1st", SayAs.NumberOrdinal);  
        sayAs.AppendText("request was for");  
        sayAs.AppendTextWithHint("1", SayAs.NumberCardinal);  
        sayAs.AppendText("room, on");  
        sayAs.AppendTextWithHint("10/19/2012,", SayAs.MonthDayYear);  
        sayAs.AppendText("with early arrival at");  
        sayAs.AppendTextWithHint("12:35pm", SayAs.Time12);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(sayAs);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, string sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, string sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithHint (textToSpeak As String, sayAs As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::String ^ sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="952ef-234">Ciąg zawierający tekst, który ma być używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-234">A string containing the text to be spoken.</span></span></param>
        <param name="sayAs"><span data-ttu-id="952ef-235">Typ zawartości tekstu.</span><span class="sxs-lookup"><span data-stu-id="952ef-235">The content type of the text.</span></span></param>
        <summary><span data-ttu-id="952ef-236">Dołącza tekst <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i <see cref="T:System.String" /> , który określa typ zawartości tekstu.</span><span class="sxs-lookup"><span data-stu-id="952ef-236">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and a <see cref="T:System.String" /> that specifies the content type of the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-237">Ta metoda służy do określania typu zawartości, która nie jest uwzględniony w <xref:System.Speech.Synthesis.SayAs> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="952ef-237">You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration.</span></span> <span data-ttu-id="952ef-238">Jednak aparatu TTS musi obsługiwać parametr, który określisz.</span><span class="sxs-lookup"><span data-stu-id="952ef-238">However, the TTS engine must support the parameter that you specify.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithPronunciation">
      <MemberSignature Language="C#" Value="public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithPronunciation(string textToSpeak, string pronunciation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithPronunciation (textToSpeak As String, pronunciation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithPronunciation(System::String ^ textToSpeak, System::String ^ pronunciation);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithPronunciation : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithPronunciation (textToSpeak, pronunciation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="pronunciation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="952ef-239">Ciąg zawierający formę tekstową programu word za pomocą konwencjonalnych alfabetu dla języka.</span><span class="sxs-lookup"><span data-stu-id="952ef-239">A string containing the written form of the word using the conventional alphabet for a language.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="952ef-240">Ciąg zawierający telefony wymawiane z międzynarodowy alfabet fonetyczny (IPA).</span><span class="sxs-lookup"><span data-stu-id="952ef-240">A string containing phones to be spoken from the International Phonetic Alphabet (IPA).</span></span></param>
        <summary><span data-ttu-id="952ef-241">Dołącza tekst <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa Wymowa tekstu.</span><span class="sxs-lookup"><span data-stu-id="952ef-241">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the pronunciation for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-242">Syntezator mówi zawartość `pronunciation` parametr, nie ich zawartość `textToSpeak` parametru.</span><span class="sxs-lookup"><span data-stu-id="952ef-242">The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.</span></span>  
  
 <span data-ttu-id="952ef-243">Wymowy określone w jednej linii monity mają zastosowanie tylko do poszczególnych wystąpień wyrazu i zastąpić wymowy aparatu rozpoznawania mowy, lub dowolnego z jego lexicons aktualnie aktywne.</span><span class="sxs-lookup"><span data-stu-id="952ef-243">Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons.</span></span> <span data-ttu-id="952ef-244">Zazwyczaj użyjesz wymowy wbudowanych niestandardowych wymowy istniejących słów lub Wymowa nietypowe słów, takich jak poprawne nazwy, które aparat synteza mowy może nie Wypowiedz, a także oczekiwano.</span><span class="sxs-lookup"><span data-stu-id="952ef-244">Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.</span></span>  
  
 <span data-ttu-id="952ef-245">Wbudowane wymowy musi być określona za pomocą telefony z międzynarodowy alfabet fonetyczny (IPA).</span><span class="sxs-lookup"><span data-stu-id="952ef-245">Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA).</span></span> <span data-ttu-id="952ef-246">Telefon jest literą lub znakiem, który reprezentuje niejawnego dźwięk mowy.</span><span class="sxs-lookup"><span data-stu-id="952ef-246">A phone is a letter or character that represents a discreet sound of speech.</span></span> <span data-ttu-id="952ef-247">Aparatów rozpoznawania mowy, które są zgodne z [mowy syntezy Markup Language (SSML) w wersji 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specyfikacji będzie Wypowiedz telefony z IPA.</span><span class="sxs-lookup"><span data-stu-id="952ef-247">Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA.</span></span> <span data-ttu-id="952ef-248">Aby określić wymowy tekście przy użyciu innych alfabety fonetyczny, zobacz <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-248">To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
 <span data-ttu-id="952ef-249">Publikuje IPA [wykresu](https://go.microsoft.com/fwlink/?LinkId=58362) , wyświetla listę swoich telefonach i mapuje je cyfry Unicode.</span><span class="sxs-lookup"><span data-stu-id="952ef-249">The IPA publishes a [chart](https://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.</span></span>  
  
 <span data-ttu-id="952ef-250">Niektórych telefonach w alfabecie IPA ma tej samej reprezentacji jako litery alfabetu łacińskiego.</span><span class="sxs-lookup"><span data-stu-id="952ef-250">Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet.</span></span> <span data-ttu-id="952ef-251">W takich przypadkach istnieje możliwość wpisz znaków łacińskich, a ma reprezentacji odpowiednich dla telefonu.</span><span class="sxs-lookup"><span data-stu-id="952ef-251">In those cases, it is possible to type the Latin character and have the proper representation for a phone.</span></span> <span data-ttu-id="952ef-252">Ponieważ znaki alfabetu łacińskiego, jak często używane w tekście mogą reprezentować kilka telefony zestawu IPA telefonu, po prostu wpisując znaków łacińskich może nie spowodować dokładne phone IPA żądanego.</span><span class="sxs-lookup"><span data-stu-id="952ef-252">Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired.</span></span> <span data-ttu-id="952ef-253">Inne telefony IPA alfabetu konieczność jest reprezentowana w kodzie jako znak odwołania składający się z handlowe "i" (&), znak numeru (#), a to liczba Unicode dla żądanego telefonu w formacie szesnastkowym lub decimal, wszystkie następuje średnik (;).</span><span class="sxs-lookup"><span data-stu-id="952ef-253">Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;).</span></span> <span data-ttu-id="952ef-254">Na przykład schwa (&\#x0259;) jest przedstawiany przez `&#x0259;`.</span><span class="sxs-lookup"><span data-stu-id="952ef-254">For example, a schwa (&\#x0259;) would be represented by `&#x0259;`.</span></span>  
  
 <span data-ttu-id="952ef-255">Aby dodać nowe lub niestandardowe wymowy wiele słów, na przykład dialekty express regionalne lub dodać prawidłowe nazwy lub słownictwa, które są specyficzne dla dyscypliny edukacyjnych lub medyczne, twórz leksykonu i dodać go do <xref:System.Speech.Synthesis.SpeechSynthesizer> przy użyciu <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-255">To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-256">Poniższy przykład inicjuje nowe wystąpienie klasy <xref:System.Speech.Synthesis.PromptBuilder> klasy.</span><span class="sxs-lookup"><span data-stu-id="952ef-256">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class.</span></span> <span data-ttu-id="952ef-257">Go następnie dołącza ciąg tekstowy "Moja nazwa to" do wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="952ef-257">It then appends the text string "My name is" to the instance.</span></span> <span data-ttu-id="952ef-258">Na koniec dołącza ciąg zawierający poprawnej nazwy "DuBois" i określa Wymowa nazwy.</span><span class="sxs-lookup"><span data-stu-id="952ef-258">Finally, it appends a string containing the proper name "DuBois" and specifies the pronunciation of the name.</span></span>  
  
```csharp  
public void ProperName()  
{  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("My name is");  
  
    // Add a proper name and its pronunciation.  
    builder.AppendTextWithPronunciation("DuBois", "duˈbwɑ");     
}  
```  
  
 <span data-ttu-id="952ef-259">Poniższy kod przedstawia SSML że <xref:System.Speech.Synthesis.PromptBuilder> generuje obiekt.</span><span class="sxs-lookup"><span data-stu-id="952ef-259">The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-us">  
  My name is <phoneme ph="duˈbwɑ"> DuBois </phoneme>  
</speak>  
```  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="952ef-260">Międzynarodowe Stowarzyszenie fonetycznych</span><span class="sxs-lookup"><span data-stu-id="952ef-260">International Phonetic Association</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ClearContent">
      <MemberSignature Language="C#" Value="public void ClearContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ClearContent" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearContent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearContent();" />
      <MemberSignature Language="F#" Value="member this.ClearContent : unit -&gt; unit" Usage="promptBuilder.ClearContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-261">Czyści zawartość z <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-261">Clears the content from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="952ef-262">Pobiera lub ustawia informacje dotyczące kultury dla <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-262">Gets or sets the culture information for the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-263"><xref:System.Speech.Synthesis.SpeechSynthesizer> Obiektu będzie podejmować próby Wybierz zainstalowany głos, obsługujący język określony przez <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwości do przetwarzania w wierszu polecenia.</span><span class="sxs-lookup"><span data-stu-id="952ef-263">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property to process the prompt.</span></span> <span data-ttu-id="952ef-264">Jeśli zostanie znaleziony głosu przy użyciu określonej kultury, będzie on używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-264">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="952ef-265">Jeśli nie można odnaleźć głosu przy użyciu określonej kultury, głos domyślny będą używane.</span><span class="sxs-lookup"><span data-stu-id="952ef-265">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="952ef-266">Kultura może zostać określony w wierszu dla niejawnego części zawartości przy użyciu <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, i <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-266">A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods.</span></span> <span data-ttu-id="952ef-267">Kultura określona dla fragmentu zawartości przy użyciu jednej z powyższych metod spowoduje przesłonięcie <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwości, a w efekcie i <xref:System.Speech.Synthesis.SpeechSynthesizer> podejmie próbę Wybierz zainstalowany głos, obsługujący język określony przez `culture` Parametr metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-267">A culture specified for a portion of content using one of the above methods will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.</span></span>  
  
 <span data-ttu-id="952ef-268">Poprawnie Wymowa słów w języku określonym przez <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwość, aparat syntezy (zamiana tekstu na mowę lub TTS) mowy, który obsługuje język musi być zainstalowany.</span><span class="sxs-lookup"><span data-stu-id="952ef-268">To correctly pronounce words in the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="952ef-269">Zainstalowane aparatu TTS nosi nazwę głosu.</span><span class="sxs-lookup"><span data-stu-id="952ef-269">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="952ef-270">Aby uzyskać informacje o tym, które są zainstalowane głosów dla określonej kultury, należy użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-270">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="952ef-271">Program Microsoft Windows i interfejsu API System.Speech Zaakceptuj wszystkie prawidłowe kody krajów języka jako wartości dla `culture`.</span><span class="sxs-lookup"><span data-stu-id="952ef-271">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="952ef-272">Aparaty TTS, które są dostarczane z programem Windows 7 obsługują następujące kody krajów języka:</span><span class="sxs-lookup"><span data-stu-id="952ef-272">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="952ef-273">en-US.</span><span class="sxs-lookup"><span data-stu-id="952ef-273">en-US.</span></span> <span data-ttu-id="952ef-274">Angielski (Stany Zjednoczone)</span><span class="sxs-lookup"><span data-stu-id="952ef-274">English (United States)</span></span>  
  
-   <span data-ttu-id="952ef-275">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="952ef-275">zh-CN.</span></span> <span data-ttu-id="952ef-276">Chiński (Chiny)</span><span class="sxs-lookup"><span data-stu-id="952ef-276">Chinese (China)</span></span>  
  
-   <span data-ttu-id="952ef-277">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="952ef-277">zh-TW.</span></span> <span data-ttu-id="952ef-278">Chiński (Tajwan)</span><span class="sxs-lookup"><span data-stu-id="952ef-278">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="952ef-279">Kody dwuliterowych języków, takich jak "en", również są dozwolone.</span><span class="sxs-lookup"><span data-stu-id="952ef-279">Two-letter language codes such as "en" are also permitted.</span></span>  <span data-ttu-id="952ef-280">Zobacz [stałe identyfikator języka i ciągi](https://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) Aby uzyskać pełną listę kodów języków.</span><span class="sxs-lookup"><span data-stu-id="952ef-280">See [Language Identifier Constants and Strings](https://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) for a comprehensive list of language codes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndParagraph">
      <MemberSignature Language="C#" Value="public void EndParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndParagraph();" />
      <MemberSignature Language="F#" Value="member this.EndParagraph : unit -&gt; unit" Usage="promptBuilder.EndParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-281">Określa koniec akapitu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-281">Specifies the end of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-282">Długie monity może być renderowany bardziej jak ludzkiej mowy, jeśli są one podzielone na zdania i akapitach.</span><span class="sxs-lookup"><span data-stu-id="952ef-282">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="952ef-283">Zobacz <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> przykład.</span><span class="sxs-lookup"><span data-stu-id="952ef-283">See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSentence">
      <MemberSignature Language="C#" Value="public void EndSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSentence();" />
      <MemberSignature Language="F#" Value="member this.EndSentence : unit -&gt; unit" Usage="promptBuilder.EndSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-284">Określa koniec zdania w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-284">Specifies the end of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-285">Długie monity może być renderowany bardziej jak ludzkiej mowy, jeśli są one podzielone na zdania i akapitach.</span><span class="sxs-lookup"><span data-stu-id="952ef-285">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="952ef-286">Zobacz <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> przykład.</span><span class="sxs-lookup"><span data-stu-id="952ef-286">See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStyle">
      <MemberSignature Language="C#" Value="public void EndStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndStyle();" />
      <MemberSignature Language="F#" Value="member this.EndStyle : unit -&gt; unit" Usage="promptBuilder.EndStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-287">Określa koniec stylu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-287">Specifies the end of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-288"><xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> Metoda Zatrzymuje bieżący styl wypowiedzi.</span><span class="sxs-lookup"><span data-stu-id="952ef-288">The <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method stops the current speaking style.</span></span> <span data-ttu-id="952ef-289">Stylu wypowiedzi przywraca ustawienie, które zostało obowiązywać przed <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> metoda zainicjowano nowy styl wypowiedzi.</span><span class="sxs-lookup"><span data-stu-id="952ef-289">The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style.</span></span> <span data-ttu-id="952ef-290">Zobacz <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> przykład.</span><span class="sxs-lookup"><span data-stu-id="952ef-290">See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndVoice">
      <MemberSignature Language="C#" Value="public void EndVoice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndVoice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndVoice" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndVoice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndVoice();" />
      <MemberSignature Language="F#" Value="member this.EndVoice : unit -&gt; unit" Usage="promptBuilder.EndVoice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-291">Określa koniec użytkowania głosu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-291">Specifies the end of use of a voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-292"><xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> Metoda zatrzymuje użytek mowie bieżącego głosu.</span><span class="sxs-lookup"><span data-stu-id="952ef-292">The <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> method stops the use of the current voice for speech output.</span></span> <span data-ttu-id="952ef-293">Głos przywraca ustawienie, które zostało obowiązywać przed <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> metoda zainicjowano nowy głos.</span><span class="sxs-lookup"><span data-stu-id="952ef-293">The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="952ef-294">Pobiera czy <see cref="T:System.Speech.Synthesis.PromptBuilder" /> jest pusty.</span><span class="sxs-lookup"><span data-stu-id="952ef-294">Gets whether the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> is empty.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartParagraph">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="952ef-295">Określa początek akapitu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiekt oraz opcjonalnie określa język.</span><span class="sxs-lookup"><span data-stu-id="952ef-295">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-296">Długie monity może być renderowany bardziej jak ludzkiej mowy, jeśli są one podzielone na zdania i akapitach.</span><span class="sxs-lookup"><span data-stu-id="952ef-296">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph();" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : unit -&gt; unit" Usage="promptBuilder.StartParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-297">Określa początek akapitu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-297">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-298">Długie monity może być renderowany bardziej jak ludzkiej mowy, jeśli są one podzielone na zdania i akapitach.</span><span class="sxs-lookup"><span data-stu-id="952ef-298">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-299">Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> obiektu, dołącza zawartość i organizuje zawartości w akapitów i zdania.</span><span class="sxs-lookup"><span data-stu-id="952ef-299">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartParagraph culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="952ef-300">Zawiera informacje dotyczące określonej kultury, takie jak język, nazwa kultury, system pisma, kalendarz używany i sposób formatowania dat i sortowania ciągów.</span><span class="sxs-lookup"><span data-stu-id="952ef-300">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="952ef-301">Określa początek akapitu w określonej kultury w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-301">Specifies the start of a paragraph in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-302">Długie monity może być renderowany bardziej jak ludzkiej mowy, jeśli są one podzielone na zdania i akapitach.</span><span class="sxs-lookup"><span data-stu-id="952ef-302">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="952ef-303">`culture` Parametr akapitu może być inna niż <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwość <xref:System.Speech.Synthesis.PromptBuilder> obiekt, który go zawiera.</span><span class="sxs-lookup"><span data-stu-id="952ef-303">The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span> <span data-ttu-id="952ef-304">W efekcie otrzymało wartość `culture` spowoduje zastąpienie parametru <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="952ef-304">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="952ef-305"><xref:System.Speech.Synthesis.SpeechSynthesizer> Podejmie próbę Wybierz zainstalowany głos, obsługujący język określony przez `culture` parametru, aby porozmawiać akapitu.</span><span class="sxs-lookup"><span data-stu-id="952ef-305">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph.</span></span> <span data-ttu-id="952ef-306">Jeśli zostanie znaleziony głosu przy użyciu określonej kultury, będzie on używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-306">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="952ef-307">Jeśli nie można odnaleźć głosu przy użyciu określonej kultury, głos domyślny będą używane.</span><span class="sxs-lookup"><span data-stu-id="952ef-307">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="952ef-308">Aby zatrzymać, korzystając z funkcji głosowych, określony przez <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, wywołaj <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-308">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span></span>  
  
 <span data-ttu-id="952ef-309">Poprawnie Wymowa słów w języku określonym przez `culture` parametru, aparat syntezy (zamiana tekstu na mowę lub TTS) mowy, który obsługuje język musi być zainstalowany.</span><span class="sxs-lookup"><span data-stu-id="952ef-309">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="952ef-310">Zainstalowane aparatu TTS nosi nazwę głosu.</span><span class="sxs-lookup"><span data-stu-id="952ef-310">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="952ef-311">Aby uzyskać informacje o tym, które są zainstalowane głosów dla określonej kultury, należy użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-311">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="952ef-312">Program Microsoft Windows i interfejsu API System.Speech Zaakceptuj wszystkie prawidłowe kody krajów języka jako wartości dla `culture`.</span><span class="sxs-lookup"><span data-stu-id="952ef-312">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="952ef-313">Aparaty TTS, które są dostarczane z programem Windows 7 obsługują następujące kody krajów języka:</span><span class="sxs-lookup"><span data-stu-id="952ef-313">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="952ef-314">en-US.</span><span class="sxs-lookup"><span data-stu-id="952ef-314">en-US.</span></span> <span data-ttu-id="952ef-315">Angielski (Stany Zjednoczone)</span><span class="sxs-lookup"><span data-stu-id="952ef-315">English (United States)</span></span>  
  
-   <span data-ttu-id="952ef-316">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="952ef-316">zh-CN.</span></span> <span data-ttu-id="952ef-317">Chiński (Chiny)</span><span class="sxs-lookup"><span data-stu-id="952ef-317">Chinese (China)</span></span>  
  
-   <span data-ttu-id="952ef-318">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="952ef-318">zh-TW.</span></span> <span data-ttu-id="952ef-319">Chiński (Tajwan)</span><span class="sxs-lookup"><span data-stu-id="952ef-319">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="952ef-320">Kody dwuliterowych języków, takich jak "en", również są dozwolone.</span><span class="sxs-lookup"><span data-stu-id="952ef-320">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartSentence">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="952ef-321">Określa początek zdanie w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiekt oraz opcjonalnie określa język.</span><span class="sxs-lookup"><span data-stu-id="952ef-321">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-322">Długie monity może być renderowany bardziej jak ludzkiej mowy, jeśli są one podzielone na zdania i akapitach.</span><span class="sxs-lookup"><span data-stu-id="952ef-322">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence();" />
      <MemberSignature Language="F#" Value="member this.StartSentence : unit -&gt; unit" Usage="promptBuilder.StartSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-323">Określa początek zdanie w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-323">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-324">Długie monity może być renderowany bardziej jak ludzkiej mowy, jeśli są one podzielone na zdania i akapitach.</span><span class="sxs-lookup"><span data-stu-id="952ef-324">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-325">Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> obiektu, dołącza zawartość i organizuje zawartości w akapitów i zdania.</span><span class="sxs-lookup"><span data-stu-id="952ef-325">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartSentence : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartSentence culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="952ef-326">Zawiera informacje dotyczące określonej kultury, takie jak język, nazwa kultury, system pisma, kalendarz używany i sposób formatowania dat i sortowania ciągów.</span><span class="sxs-lookup"><span data-stu-id="952ef-326">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="952ef-327">Określa początek zdania w określonej kultury w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-327">Specifies the start of a sentence in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-328">Długie monity może być renderowany bardziej jak ludzkiej mowy, jeśli są one podzielone na zdania i akapitach.</span><span class="sxs-lookup"><span data-stu-id="952ef-328">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="952ef-329">`culture` Parametr zdanie, może być inna niż `culture` parametr akapit, który zawiera zdania lub <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwość <xref:System.Speech.Synthesis.PromptBuilder> obiektu, który je zawiera.</span><span class="sxs-lookup"><span data-stu-id="952ef-329">The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them.</span></span>  
  
 <span data-ttu-id="952ef-330">W efekcie otrzymało wartość `culture` spowoduje zastąpienie parametru <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwości i `culture` parametr akapit, który zawiera zdanie.</span><span class="sxs-lookup"><span data-stu-id="952ef-330">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence.</span></span> <span data-ttu-id="952ef-331"><xref:System.Speech.Synthesis.SpeechSynthesizer> Podejmie próbę Wybierz zainstalowany głos, obsługujący język określony przez `culture` parametru, aby porozmawiać zdanie.</span><span class="sxs-lookup"><span data-stu-id="952ef-331">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence.</span></span> <span data-ttu-id="952ef-332">Jeśli zostanie znaleziony głosu przy użyciu określonej kultury, będzie on używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-332">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="952ef-333">Jeśli nie można odnaleźć głosu przy użyciu określonej kultury, głos domyślny będą używane.</span><span class="sxs-lookup"><span data-stu-id="952ef-333">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="952ef-334">Aby zatrzymać, korzystając z funkcji głosowych, określony przez <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, wywołaj <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-334">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span></span>  
  
 <span data-ttu-id="952ef-335">Poprawnie Wymowa słów w języku określonym przez `culture` parametru, aparat syntezy (zamiana tekstu na mowę lub TTS) mowy, który obsługuje język musi być zainstalowany.</span><span class="sxs-lookup"><span data-stu-id="952ef-335">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="952ef-336">Zainstalowane aparatu TTS nosi nazwę głosu.</span><span class="sxs-lookup"><span data-stu-id="952ef-336">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="952ef-337">Aby uzyskać informacje o tym, które są zainstalowane głosów dla określonej kultury, należy użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-337">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="952ef-338">Program Microsoft Windows i interfejsu API System.Speech Zaakceptuj wszystkie prawidłowe kody krajów języka jako wartości dla `culture`.</span><span class="sxs-lookup"><span data-stu-id="952ef-338">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="952ef-339">Aparaty TTS, które są dostarczane z programem Windows 7 obsługują następujące kody krajów języka:</span><span class="sxs-lookup"><span data-stu-id="952ef-339">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="952ef-340">en-US.</span><span class="sxs-lookup"><span data-stu-id="952ef-340">en-US.</span></span> <span data-ttu-id="952ef-341">Angielski (Stany Zjednoczone)</span><span class="sxs-lookup"><span data-stu-id="952ef-341">English (United States)</span></span>  
  
-   <span data-ttu-id="952ef-342">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="952ef-342">zh-CN.</span></span> <span data-ttu-id="952ef-343">Chiński (Chiny)</span><span class="sxs-lookup"><span data-stu-id="952ef-343">Chinese (China)</span></span>  
  
-   <span data-ttu-id="952ef-344">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="952ef-344">zh-TW.</span></span> <span data-ttu-id="952ef-345">Chiński (Tajwan)</span><span class="sxs-lookup"><span data-stu-id="952ef-345">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="952ef-346">Kody dwuliterowych języków, takich jak "en", również są dozwolone.</span><span class="sxs-lookup"><span data-stu-id="952ef-346">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartStyle">
      <MemberSignature Language="C#" Value="public void StartStyle (System.Speech.Synthesis.PromptStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartStyle(class System.Speech.Synthesis.PromptStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartStyle (style As PromptStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartStyle(System::Speech::Synthesis::PromptStyle ^ style);" />
      <MemberSignature Language="F#" Value="member this.StartStyle : System.Speech.Synthesis.PromptStyle -&gt; unit" Usage="promptBuilder.StartStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Speech.Synthesis.PromptStyle" />
      </Parameters>
      <Docs>
        <param name="style"><span data-ttu-id="952ef-347">Styl do uruchomienia.</span><span class="sxs-lookup"><span data-stu-id="952ef-347">The style to start.</span></span></param>
        <summary><span data-ttu-id="952ef-348">Określa początek stylu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-348">Specifies the start of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-349"><xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> Metoda przyjmuje <xref:System.Speech.Synthesis.PromptStyle> obiekt jako argumentu.</span><span class="sxs-lookup"><span data-stu-id="952ef-349">The <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument.</span></span> <span data-ttu-id="952ef-350">Można użyć właściwości <xref:System.Speech.Synthesis.PromptStyle> obiektu w celu ustawienia szczególnym wypowiedzi szybkości i woluminów (parametrów akustycznych) do zastosowania do rozpoznawania mowy, dane wyjściowe stylu w czasie działania.</span><span class="sxs-lookup"><span data-stu-id="952ef-350">You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect.</span></span> <span data-ttu-id="952ef-351">Aby zatrzymać, przy użyciu bieżącego stylu, należy wywołać <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-351">To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method.</span></span>  
  
> [!NOTE]
> -   <span data-ttu-id="952ef-352">Aparaty synteza mowy w Windows obsługuje parametru nacisk w tej chwili.</span><span class="sxs-lookup"><span data-stu-id="952ef-352">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="952ef-353">Ustawianie wartości dla parametru wyróżnienia dadzą bez dźwiękowych zmian w danych wyjściowych syntezatora mowy.</span><span class="sxs-lookup"><span data-stu-id="952ef-353">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
> -   <span data-ttu-id="952ef-354"><xref:System.Speech.Synthesis.PromptVolume.Default> Ustawienie <xref:System.Speech.Synthesis.PromptVolume> jest pełnym woluminie, która jest taka sama jak <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span><span class="sxs-lookup"><span data-stu-id="952ef-354">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="952ef-355">Inne ustawienia zmniejszenie ilości mowie względem całego woluminu.</span><span class="sxs-lookup"><span data-stu-id="952ef-355">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-356">Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> obiektu i dołącza ciągów tekstowych.</span><span class="sxs-lookup"><span data-stu-id="952ef-356">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="952ef-357">W przykładzie użyto <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> metodę, aby określić powolne wypowiedzi szybkości dla ciągu dodawane, które wylicza zawartości zamówienia.</span><span class="sxs-lookup"><span data-stu-id="952ef-357">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartVoice">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="952ef-358">Powoduje, że Syntezator, aby zmienić głosu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-358">Instructs the synthesizer to change the voice in a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-359">Głosu reprezentuje aparat TTS zainstalowane.</span><span class="sxs-lookup"><span data-stu-id="952ef-359">A voice represents an installed TTS engine.</span></span> <span data-ttu-id="952ef-360">Użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metod i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazwy i atrybuty zainstalowane głosów zamiany tekstu na mowę (TTS), które można wybrać.</span><span class="sxs-lookup"><span data-stu-id="952ef-360">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="952ef-361">Kiedy aplikacja wywołuje <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, ta metoda sprawdza, czy każdy głosów znajdzie się w rejestrze spełnia niektóre minimalne kryteria.</span><span class="sxs-lookup"><span data-stu-id="952ef-361">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="952ef-362">Niepowodzenia weryfikacji, na dowolnym głos <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> ustawia jego <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwość `False`.</span><span class="sxs-lookup"><span data-stu-id="952ef-362">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="952ef-363">Aplikacja nie może wywoływać dowolną z <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> metod głosu którego <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwość `False`.</span><span class="sxs-lookup"><span data-stu-id="952ef-363">An application cannot call any of the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods on a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="952ef-364">Zazwyczaj aplikacje nie ustawi głosu <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="952ef-364">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartVoice culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="952ef-365">Zawiera informacje dotyczące określonej kultury, takie jak język, nazwa kultury, system pisma, kalendarz używany i sposób formatowania dat i sortowania ciągów.</span><span class="sxs-lookup"><span data-stu-id="952ef-365">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="952ef-366">Powoduje, że Syntezator, aby zmienić głosu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa kulturę głosu do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-366">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the culture of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-367">`culture` Parametr <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> może być inna niż <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwość <xref:System.Speech.Synthesis.PromptBuilder> obiekt, który go zawiera.</span><span class="sxs-lookup"><span data-stu-id="952ef-367">The `culture` parameter for <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span>  <span data-ttu-id="952ef-368">W efekcie otrzymało wartość `culture` spowoduje zastąpienie parametru <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="952ef-368">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="952ef-369"><xref:System.Speech.Synthesis.SpeechSynthesizer> Podejmie próbę Wybierz zainstalowany głos, obsługujący język określony przez `culture` parametru, aby porozmawiać zawartości umieszczonej w <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> i <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-369">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span> <span data-ttu-id="952ef-370">Jeśli zostanie znaleziony głosu przy użyciu określonej kultury, będzie on używany.</span><span class="sxs-lookup"><span data-stu-id="952ef-370">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="952ef-371">Jeśli nie można odnaleźć głosu przy użyciu określonej kultury, głos domyślny będą używane.</span><span class="sxs-lookup"><span data-stu-id="952ef-371">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="952ef-372">Aby zatrzymać, korzystając z funkcji głosowych, określony przez <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, wywołaj <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-372">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 <span data-ttu-id="952ef-373">Poprawnie Wymowa słów w języku określonym przez `culture` parametru, aparat syntezy (zamiana tekstu na mowę lub TTS) mowy, który obsługuje język musi być zainstalowany.</span><span class="sxs-lookup"><span data-stu-id="952ef-373">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="952ef-374">Zainstalowane aparatu TTS nosi nazwę głosu.</span><span class="sxs-lookup"><span data-stu-id="952ef-374">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="952ef-375">Aby uzyskać informacje o tym, które są zainstalowane głosów dla określonej kultury, należy użyć <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-375">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="952ef-376">Program Microsoft Windows i interfejsu API System.Speech Zaakceptuj wszystkie prawidłowe kody krajów języka jako wartości dla `culture`.</span><span class="sxs-lookup"><span data-stu-id="952ef-376">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="952ef-377">Aparaty TTS, które są dostarczane z programem Windows 7 obsługują następujące kody krajów języka:</span><span class="sxs-lookup"><span data-stu-id="952ef-377">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="952ef-378">en-US.</span><span class="sxs-lookup"><span data-stu-id="952ef-378">en-US.</span></span> <span data-ttu-id="952ef-379">Angielski (Stany Zjednoczone)</span><span class="sxs-lookup"><span data-stu-id="952ef-379">English (United States)</span></span>  
  
-   <span data-ttu-id="952ef-380">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="952ef-380">zh-CN.</span></span> <span data-ttu-id="952ef-381">Chiński (Chiny)</span><span class="sxs-lookup"><span data-stu-id="952ef-381">Chinese (China)</span></span>  
  
-   <span data-ttu-id="952ef-382">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="952ef-382">zh-TW.</span></span> <span data-ttu-id="952ef-383">Chiński (Tajwan)</span><span class="sxs-lookup"><span data-stu-id="952ef-383">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="952ef-384">Kody dwuliterowych języków, takich jak "en", również są dozwolone.</span><span class="sxs-lookup"><span data-stu-id="952ef-384">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="promptBuilder.StartVoice gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="952ef-385">Płeć głosu do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-385">The gender of the voice to use.</span></span></param>
        <summary><span data-ttu-id="952ef-386">Powoduje, że Syntezator, aby zmienić głosu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa płeć głosu do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-386">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-387">Użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metod i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazwy i atrybuty zainstalowane głosów zamiany tekstu na mowę (TTS), które można wybrać.</span><span class="sxs-lookup"><span data-stu-id="952ef-387">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="952ef-388">Aby zatrzymać, korzystając z funkcji głosowych, określony przez <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> wywołania <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-388">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Speech.Synthesis.VoiceInfo voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (voice As VoiceInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceInfo ^ voice);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceInfo -&gt; unit" Usage="promptBuilder.StartVoice voice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voice" Type="System.Speech.Synthesis.VoiceInfo" />
      </Parameters>
      <Docs>
        <param name="voice"><span data-ttu-id="952ef-389">Kryteria głosu do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-389">The criteria for the voice to use.</span></span></param>
        <summary><span data-ttu-id="952ef-390">Powoduje, że Syntezator, aby zmienić głosu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa kryteria nowy głos.</span><span class="sxs-lookup"><span data-stu-id="952ef-390">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies criteria for the new voice.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-391">Użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metod i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazwy i atrybuty zainstalowane głosów zamiany tekstu na mowę (TTS), które można wybrać.</span><span class="sxs-lookup"><span data-stu-id="952ef-391">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="952ef-392">Aby zatrzymać, korzystając z funkcji głosowych, określony przez <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> wywołania <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-392">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : string -&gt; unit" Usage="promptBuilder.StartVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="952ef-393">Nazwa głosu do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-393">The name of the voice to use.</span></span></param>
        <summary><span data-ttu-id="952ef-394">Powoduje, że Syntezator, aby zmienić głosu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa nazwę głosu do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-394">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the name of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-395">Aby uzyskać informacje o tym, które są zainstalowane głosów, użyj jednej z <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="952ef-395">To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.</span></span>  
  
 <span data-ttu-id="952ef-396">Aby zatrzymać, korzystając z funkcji głosowych, określony przez <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> wywołania <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-396">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="promptBuilder.StartVoice (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="952ef-397">Płeć nowy głos do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-397">The gender of the new voice to use.</span></span></param>
        <param name="age"><span data-ttu-id="952ef-398">Wiek głosu do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-398">The age of the voice to use.</span></span></param>
        <summary><span data-ttu-id="952ef-399">Powoduje, że Syntezator, aby zmienić głosu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu i określa, płeć i wieku nowy głos.</span><span class="sxs-lookup"><span data-stu-id="952ef-399">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender and the age of the new voice.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-400">Użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metod i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazwy i atrybuty zainstalowane głosów zamiany tekstu na mowę (TTS), które można wybrać.</span><span class="sxs-lookup"><span data-stu-id="952ef-400">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="952ef-401">Aby zatrzymać, korzystając z funkcji głosowych, określony przez <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> wywołania <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-401">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="promptBuilder.StartVoice (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="952ef-402">Płeć głosu do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-402">The gender of the voice to use.</span></span></param>
        <param name="age"><span data-ttu-id="952ef-403">Wiek głosu do użycia.</span><span class="sxs-lookup"><span data-stu-id="952ef-403">The age of the voice to use.</span></span></param>
        <param name="voiceAlternate"><span data-ttu-id="952ef-404">Liczba całkowita, która określa preferowany głosowych, gdy jest zgodna z więcej niż jeden głos <paramref name="gender" /> i <paramref name="age" /> parametrów.</span><span class="sxs-lookup"><span data-stu-id="952ef-404">An integer that specifies a preferred voice when more than one voice matches the <paramref name="gender" /> and <paramref name="age" /> parameters.</span></span></param>
        <summary><span data-ttu-id="952ef-405">Powoduje, że Syntezator, aby zmienić głosu w <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu oraz określa jego płeć, wiek i preferowaną głosowej, odpowiadający określonej płci i wieku.</span><span class="sxs-lookup"><span data-stu-id="952ef-405">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its gender, age, and a preferred voice that matches the specified gender and age.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-406">Aparat synteza mowy liczby dopasowań znajdzie dla określonych parametrów i zwraca głosu w przypadku, gdy liczba jest równa `voiceAlternate` parametru.</span><span class="sxs-lookup"><span data-stu-id="952ef-406">A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="952ef-407">Użyj <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> metod i <xref:System.Speech.Synthesis.VoiceInfo> klasy w celu uzyskania nazwy i atrybuty zainstalowane głosów zamiany tekstu na mowę (TTS), które można wybrać.</span><span class="sxs-lookup"><span data-stu-id="952ef-407">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="952ef-408">Aby zatrzymać, korzystając z funkcji głosowych, określony przez <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> wywołania <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="952ef-408">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public string ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXml();" />
      <MemberSignature Language="F#" Value="member this.ToXml : unit -&gt; string" Usage="promptBuilder.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="952ef-409">Zwraca SSML wygenerowany na podstawie <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="952ef-409">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="952ef-410">Zwraca SSML wygenerowany na podstawie <see cref="T:System.Speech.Synthesis.PromptBuilder" /> obiektu jako jeden wiersz.</span><span class="sxs-lookup"><span data-stu-id="952ef-410">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object as a single line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="952ef-411"><xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> Metody sprawia, że próba formatowanie zwróconego SSML w dowolny sposób.</span><span class="sxs-lookup"><span data-stu-id="952ef-411">The <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> method makes no attempt to format the returned SSML in any way.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="952ef-412">Poniższy przykład tworzy <xref:System.Speech.Synthesis.PromptBuilder> obiektu, który dołącza tekstu, a następnie zapisuje odpowiednik SSML w wierszu polecenia programu do konsoli, przed wypowiedzi zawartość wiersza.</span><span class="sxs-lookup"><span data-stu-id="952ef-412">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Write the contents of the PromptBuilder object to the console as  
        // an SSML-compatible XML file.  
        string myXml = style.ToXml();  
        Console.WriteLine("This is the SSML equivalent of the PromptBuilder: \n\n" + myXml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>