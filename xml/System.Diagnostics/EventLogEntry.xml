<Type Name="EventLogEntry" FullName="System.Diagnostics.EventLogEntry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7e853eba92ac12a35bdff18e6aa0fe055816241" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36674952" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EventLogEntry : System.ComponentModel.Component, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EventLogEntry extends System.ComponentModel.Component implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogEntry" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventLogEntry&#xA;Inherits Component&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogEntry sealed : System::ComponentModel::Component, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type EventLogEntry = class&#xA;    inherit Component&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Hermetyzuje pojedynczego rekordu w dzienniku zdarzeń. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj nie można utworzyć wystąpienia <xref:System.Diagnostics.EventLogEntry> bezpośrednio podczas pracy z <xref:System.Diagnostics.EventLog> klasy. <xref:System.Diagnostics.EventLog.Entries%2A> Członkiem <xref:System.Diagnostics.EventLog> klasy zawiera kolekcję <xref:System.Diagnostics.EventLogEntry> wystąpienia, które możesz iteracja podczas odczytu za pomocą <xref:System.Diagnostics.EventLogEntryCollection.Item%2A?displayProperty=nameWithType> elementu członkowskiego klasy indeksu.  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejsu. Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego. Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> metody w `try` / `catch` bloku. Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu tematu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Diagnostics.EventLogEntry> klasy. W tym przykładzie `switch` instrukcja używa danych wejściowych konsoli do wyszukiwania wpisy dziennika zdarzeń dla zdarzenia określonego typu.  Jeśli dopasowanie zostanie znaleziony, informacje o źródle wpis dziennika zostanie wyświetlony w konsoli.  
  
 [!code-cpp[EventLogEntry_Source#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry_Source#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry_Source#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogEntryCollection" />
    <altmember cref="T:System.Diagnostics.EventInstance" />
  </Docs>
  <Members>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public string Category { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Category" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Category" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Category As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Category { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Category : string" Usage="System.Diagnostics.EventLogEntry.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The category of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tekst skojarzony z <see cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" /> właściwości dla tego wpisu.</summary>
        <value>Tekst kategorii specyficzne dla aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdej aplikacji (źródło zdarzenia) można definiować własne kategorie numerowane i ciągów tekstowych, które są mapowane. Podgląd zdarzeń, można użyć kategorii, aby filtrować zdarzenia w dzienniku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Nie można przydzielić miejsce dla jednego z ciągów wstawiania skojarzony z kategorią.</exception>
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
      </Docs>
    </Member>
    <Member MemberName="CategoryNumber">
      <MemberSignature Language="C#" Value="public short CategoryNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 CategoryNumber" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CategoryNumber As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short CategoryNumber { short get(); };" />
      <MemberSignature Language="F#" Value="member this.CategoryNumber : int16" Usage="System.Diagnostics.EventLogEntry.CategoryNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An ID for the category of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę kategorii wpis dziennika zdarzeń.</summary>
        <value>Liczba kategorii specyficzne dla aplikacji dla tego wpisu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdej aplikacji (źródło zdarzenia) można definiować własne kategorie numerowane i ciągów tekstowych, które są mapowane. Podgląd zdarzeń, można użyć kategorii, aby filtrować zdarzenia w dzienniku. Kategorie musi być numerowane kolejno początku o numerze 1. Numer kategorii jest określona przez <xref:System.Diagnostics.EventInstance.CategoryId%2A?displayProperty=nameWithType> właściwości. Podgląd zdarzeń można wyświetlić kategorii jako wartość liczbowa lub można użyć kategorii jako identyfikator zasobu do wyświetlenia ciąg zlokalizowanej kategorii. Aby uzyskać więcej informacji, zobacz <xref:System.Diagnostics.EventInstance>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.Category" />
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public byte[] Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Data { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : byte[]" Usage="System.Diagnostics.EventLogEntry.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Binary data associated with this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dane binarne skojarzone z danym wpisem.</summary>
        <value>Tablica bajtów przechowujący dane binarne skojarzone z danym wpisem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pobieranie tej właściwości tworzy tablicę, która przechowuje kopię zapisu specyficzne dla zdarzenia dane binarne podglądu zdarzeń wyświetlane w scalonej formacie szesnastkowym i tekst. Dane dotyczące zdarzeń jest czasami używana do przechowywania informacji, która aplikacja będzie przetwarzać niezależnie od podglądu zdarzeń, na przykład, aby utworzyć raporty z pliku dziennika.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Diagnostics.EventLogEntryType" Usage="System.Diagnostics.EventLogEntry.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The type of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ zdarzenia tego wpisu.</summary>
        <value>Typ zdarzenia, który jest skojarzony z danym wpisem w dzienniku zdarzeń.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie typy zdarzeń mają dobrze zdefiniowanego wspólne dane i opcjonalnie dane specyficzne dla zdarzenia. Każde wydarzenie jest jednego typu, który aplikacja wskazuje, kiedy zgłasza zdarzenie. Podgląd zdarzeń używa typu zdarzenia do określania, jaka ikona do wyświetlenia w widoku listy w dzienniku zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Diagnostics.EventLogEntry.EntryType%2A> właściwości. W tym przykładzie `switch` instrukcja używa danych wejściowych konsoli do wyszukiwania wpisy dziennika zdarzeń dla określonego <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.  Jeśli dopasowanie zostanie znaleziony, informacje o źródle wpis dziennika zostanie wyświetlony w konsoli.  
  
 [!code-cpp[EventLogEntry_Source#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry_Source#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry_Source#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventInstance.EntryType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Diagnostics.EventLogEntry otherEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(class System.Diagnostics.EventLogEntry otherEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (otherEntry As EventLogEntry) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Diagnostics::EventLogEntry ^ otherEntry);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Diagnostics.EventLogEntry -&gt; bool" Usage="eventLogEntry.Equals otherEntry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherEntry" Type="System.Diagnostics.EventLogEntry" />
      </Parameters>
      <Docs>
        <param name="otherEntry">
          <see cref="T:System.Diagnostics.EventLogEntry" /> Do porównania.</param>
        <summary>Przeprowadza porównanie dwóch wpisów dziennika zdarzeń.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Diagnostics.EventLogEntry" /> obiektów są identyczne, a w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wykonuje porównanie po bicie między tymi dwoma obiektami. Nie określa czy dwa <xref:System.Diagnostics.EventLogEntry> wystąpień odwoływać się do tego samego obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventID">
      <MemberSignature Language="C#" Value="public int EventID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EventID" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.EventID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int EventID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.EventID : int" Usage="System.Diagnostics.EventLogEntry.EventID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An ID number for this event entry.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use InstanceId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator zdarzenia specyficzne dla aplikacji dla bieżącego wpisu zdarzeń.</summary>
        <value>Identyfikator aplikacji komunikaty o zdarzeniach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wartość przedstawia identyfikator zdarzenia wpisu w przypadku dziennika z najwyższym dwa bity maskowane. <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> Właściwość wpis dziennika zdarzeń reprezentuje identyfikator zasobu pełni 32-bitowy dla zdarzenia w pliku zasobów komunikatów dla źródła zdarzenia. Dwa wpisy w dzienniku zdarzeń z tego samego źródła może mieć pasujące <xref:System.Diagnostics.EventLogEntry.EventID%2A> wartości, ale ma inny <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> wartości z powodu różnic w górnym dwa bity identyfikatora zdarzenia.  
  
 Jeśli aplikacja zapisano wpis zdarzeń przy użyciu jednej z <xref:System.Diagnostics.EventLog.WriteEntry%2A> metod, <xref:System.Diagnostics.EventLogEntry.EventID%2A> właściwość odpowiada opcjonalny `eventId` parametru. Jeśli aplikacja napisane przy użyciu zdarzeń <xref:System.Diagnostics.EventLog.WriteEvent%2A> lub interfejsu API Win32 `ReportEvent`, <xref:System.Diagnostics.EventLogEntry.EventID%2A> właściwości jest zgodny z identyfikatorem zasobu dla zdarzeń, z górnym dwa bity maskowane poza.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Diagnostics.EventLogEntry.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Sequence numer of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera indeks tego wpisu w dzienniku zdarzeń.</summary>
        <value>Indeks ten wpis w dzienniku zdarzeń.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta liczba nie jest zawsze liczony od zera.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : int64" Usage="System.Diagnostics.EventLogEntry.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The instance ID for this event entry.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator zasobu, który określa tekst komunikatu wpisu zdarzeń.</summary>
        <value>Identyfikator zasobu, który odpowiada identyfikatorowi definicję ciągu w pliku zasobów komunikatów źródła zdarzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> Właściwość unikatowo identyfikuje wpis dotyczący zdarzenia dla źródła skonfigurowanego zdarzenia. <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> Dziennika zdarzeń wpis reprezentuje identyfikator zasobu pełni 32-bitowy dla zdarzenia w pliku zasobów komunikatów dla źródła zdarzenia. <xref:System.Diagnostics.EventLogEntry.EventID%2A> Równa właściwości <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> z najwyższym dwa bity maskowane poza. Dwa wpisy w dzienniku zdarzeń z tego samego źródła może mieć pasujące <xref:System.Diagnostics.EventLogEntry.EventID%2A> wartości, ale ma inny <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> wartości z powodu różnic w górnym dwa bity identyfikator zasobu.  
  
 Jeśli aplikacja zapisano wpis zdarzeń przy użyciu jednej z <xref:System.Diagnostics.EventLog.WriteEntry%2A> metod, <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> właściwość odpowiada opcjonalny `eventId` parametru. Jeśli aplikacja napisane przy użyciu zdarzeń <xref:System.Diagnostics.EventLog.WriteEvent%2A>, <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> właściwości jest zgodny z identyfikatorem zasobu określonego w <xref:System.Diagnostics.EventInstance.InstanceId%2A> z `instance` parametru. Jeśli aplikacja zapisano zdarzenia przy użyciu interfejsu API Win32 `ReportEvent`, <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> właściwości jest zgodny z identyfikatorem zasobu określonego w `dwEventID` parametru.  
  
 Szczegółowe informacje o zdefiniowanie komunikaty o zdarzeniach i tworzenie plików zasobów dziennika zdarzeń, można znaleźć w temacie "Komunikat kompilatora" w dokumentacji zestawu SDK platformy w [ http://msdn.microsoft.com ](http://msdn.microsoft.com/). Aby uzyskać więcej informacji o identyfikatorach dziennika zdarzeń Zobacz temat "Identyfikatory zdarzeń" w zestawie SDK platformy.  
  
   
  
## Examples  
 Poniższy przykład kodu wyszukuje dziennika zdarzeń dla wpisów z identyfikatorem zasobu. Przykładowy kod wyświetla komunikaty o zdarzeniach dla każdego wpisu zgodnych, a liczba całkowita liczba pasujących wpisów w dzienniku. Tekst komunikatu dla każdego wpisu mogą lub nie mogą być takie same; poszczególnymi komunikatami zdarzeń zależy od tego, plik wiadomości źródła zdarzeń, ciągi wstawiania i parametry używane, gdy plik został zapisany.  
  
 [!code-cpp[EventLog_WriteEvent#10](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#10)]
 [!code-csharp[EventLog_WriteEvent#10](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#10)]
 [!code-vb[EventLog_WriteEvent#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Diagnostics.EventLogEntry.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The Computer on which this event entry occured.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę komputera, na którym został wygenerowany ten wpis.</summary>
        <value>Nazwa komputera, który zawiera dziennik zdarzeń.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Diagnostics.EventLogEntry.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The message of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera komunikat zlokalizowanych skojarzonego z tym wpisem zdarzeń.</summary>
        <value>Tekst sformatowany, zlokalizowaną dla wiadomości. W tym ciągów zamiennych skojarzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pobieranie tej właściwości zostanie otwarty rejestru, aby określić nazwę pliku plik .dll, który zawiera zlokalizowanego tekstu. Jeśli zostanie wyświetlony błąd rejestru podczas testowania kodu źródłowego, sprawdź, czy plik dll istnieje na komputerze. Jeśli ciągi wstawiania są zawarte w wiadomości, catch błędów w ich alokacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Nie można przydzielić miejsce dla jednego z ciągów wstawiania skojarzone z wiadomością.</exception>
        <altmember cref="T:System.Diagnostics.EventInstance" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementStrings">
      <MemberSignature Language="C#" Value="public string[] ReplacementStrings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ReplacementStrings" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.ReplacementStrings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementStrings As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ReplacementStrings { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementStrings : string[]" Usage="System.Diagnostics.EventLogEntry.ReplacementStrings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Application strings for this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera ciągów zamiennych skojarzone z wpisu dziennika zdarzeń.</summary>
        <value>Tablica, która przechowuje ciągi zamienne zdarzeń przechowywane wpisu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość pobiera tylko ciągi zamienne wpisu. Aby pobrać cały komunikat, przeczytaj <xref:System.Diagnostics.EventLogEntry.Message%2A> właściwości.  
  
 <xref:System.Diagnostics.EventLogEntry.ReplacementStrings%2A> Właściwość zawiera zlokalizowane wersje ciągów zamiennych, które są używane w wpis dziennika zdarzeń. Jeśli podasz pliki zasobów, które zawierają ciągi w każdym języka docelowego dla aplikacji można wysyłać komunikaty dziennika zdarzeń w języku, który jest używany na tym komputerze. W tym celu Utwórz wystąpienie <xref:System.Resources.ResourceManager> klasy dla zestawu zasobów, który zawiera Twoje ciągów zamiennych. Pierwszy parametr <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> Konstruktor identyfikuje zestaw zasobów do użycia. Użyj <xref:System.Resources.ResourceManager.GetString%2A> metoda to wystąpienie do dostarczania zlokalizowanych komunikatów dziennika zdarzeń. Poniższy kod automatycznie ustawia komunikat na język dla bieżącej kultury.  
  
```  
ResourceManager LocRM = new ResourceManager("ReplacementStrings.TestStrings",   
      typeof(Program).Assembly);  
EventLog e1 = new EventLog("LocTest", "MyMachine", "LocTest");  
// Get the string associated with the current culture.  
e1.WriteEntry(LocRM.GetString("strMessage"),  
   EventLogEntryType.Information);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.Message" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Source" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Source : string" Usage="System.Diagnostics.EventLogEntry.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The source application of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę aplikacji, który wygenerował zdarzenie.</summary>
        <value>Nazwa dziennika zdarzeń zarejestrowany jako źródło tego zdarzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Źródło zdarzenia wskazuje co rejestrowane zdarzenia. Często jest nazwa aplikacji lub nazwy podskładnika aplikacji, gdy aplikacja jest duża. Aplikacje i usługi zazwyczaj zapisu (i w związku z tym są źródła dla) w dzienniku aplikacji lub dziennik niestandardowy. Sterowniki urządzeń zwykle zapisywane w dzienniku systemu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Diagnostics.EventLogEntry.Source%2A> właściwości. W tym przykładzie `switch` instrukcja używa danych wejściowych konsoli do wyszukiwania wpisy dziennika zdarzeń dla określonego <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.  W przypadku odnalezienia pasującego <xref:System.Diagnostics.EventLogEntry.Source%2A> właściwości informacje są wyświetlane w konsoli.  
  
 [!code-cpp[EventLogEntry_Source#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry_Source#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry_Source#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Needs serialization support")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Do wypełniania danych.</param>
        <param name="context">Miejsce docelowe (zobacz <see cref="T:System.Runtime.Serialization.StreamingContext" />) tej serializacji.</param>
        <summary>Wypełnia <see cref="T:System.Runtime.Serialization.SerializationInfo" /> z dane potrzebne do zserializowania obiektu docelowego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeGenerated">
      <MemberSignature Language="C#" Value="public DateTime TimeGenerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeGenerated" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.TimeGenerated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeGenerated As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime TimeGenerated { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeGenerated : DateTime" Usage="System.Diagnostics.EventLogEntry.TimeGenerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Generation time of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czas lokalny, w którym został wygenerowany tego zdarzenia.</summary>
        <value>Czas lokalny, w którym został wygenerowany tego zdarzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski ma czas, który został wygenerowany przez zdarzenie. To może nie być taki sam jak czas, kiedy informacji o zdarzeniu został zapisany w dzienniku zdarzeń. W przypadku drugiego nagłówka, przeczytaj <xref:System.Diagnostics.EventLogEntry.TimeWritten%2A> właściwości.  
  
 Zazwyczaj jest zwłokę między czas, który jest generowane zdarzenie i całkowity czas jest rejestrowany. Jest więcej musisz znać po zdarzeniu został wygenerowany, chyba że chcesz sprawdzić, czy jest znaczne opóźnienie rejestrowania. Który może się zdarzyć, jeśli pliki dzienników znajdują się na innym serwerze, występują wąskiego gardła.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.TimeWritten" />
      </Docs>
    </Member>
    <Member MemberName="TimeWritten">
      <MemberSignature Language="C#" Value="public DateTime TimeWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeWritten" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.TimeWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeWritten As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime TimeWritten { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeWritten : DateTime" Usage="System.Diagnostics.EventLogEntry.TimeWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The time at which this event entry was written to the logfile.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera czas lokalny, w którym to zdarzenie zostało zapisane w dzienniku.</summary>
        <value>Czas lokalny, w którym to zdarzenie zostało zapisane w dzienniku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski przechowuje informacje dotyczące zdarzenia są zapisywane w dzienniku zdarzeń czas. Może być tym samym czasie jako wygenerowania zdarzenia. W przypadku drugiego nagłówka, przeczytaj <xref:System.Diagnostics.EventLogEntry.TimeGenerated%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.TimeGenerated" />
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public string UserName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.UserName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserName : string" Usage="System.Diagnostics.EventLogEntry.UserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of a user associated with this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę użytkownika, który jest odpowiedzialny za to zdarzenie.</summary>
        <value>Identyfikator zabezpieczeń (SID), który unikatowo identyfikuje użytkownika lub grupy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest często puste w przypadku zdarzeń w dziennikach innego niż dziennika zabezpieczeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Nie można uzyskać informacji o koncie dla identyfikatora SID użytkownika.</exception>
        <altmember cref="P:System.Diagnostics.EventLogEntry.Source" />
      </Docs>
    </Member>
  </Members>
</Type>