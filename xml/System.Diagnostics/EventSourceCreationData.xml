<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc5fb64c08e7407b6912a57b42da416cf47201c6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30449442" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje ustawienia konfiguracji używane do tworzenia źródło dziennika zdarzeń na komputerze lokalnym lub zdalnym.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData> klasa do konfigurowania nowego źródła dla zapisywania zlokalizowanych wpisów dziennika zdarzeń. Nie jest konieczne używanie tej klasy można odczytać z dziennika zdarzeń.  
  
 Ta klasa definiuje ustawienia konfiguracji dla nowe źródło zdarzeń i jego skojarzony dziennika zdarzeń. Skojarzony dziennik zdarzeń może być na komputerze lokalnym lub zdalnym. Aby utworzyć nowe źródło dla nowego lub istniejącego dziennika zdarzeń na komputerze lokalnym, ustaw <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> i <xref:System.Diagnostics.EventSourceCreationData.Source%2A> właściwości <xref:System.Diagnostics.EventSourceCreationData> i Wywołaj <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> metody. Ta metoda tworzy źródło zdarzenia w <xref:System.Diagnostics.EventSourceCreationData.Source%2A> właściwości i rejestruje w dzienniku zdarzeń określone w <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>. To zachowanie jest podobne do użycia <xref:System.Diagnostics.EventLogInstaller> klasy można zarejestrować źródła zdarzeń do dziennika zdarzeń.  
  
 Użyj <xref:System.Diagnostics.EventLog.WriteEvent%2A> i <xref:System.Diagnostics.EventLog.WriteEntry%2A> metody się zapisać zdarzeń do dziennika zdarzeń. Należy określić źródło zdarzenia się zapisać zdarzeń; należy utworzyć i skonfigurować źródło zdarzeń przed zapisaniem pierwszej pozycji ze źródłem.  
  
 Utwórz nowe źródło zdarzeń podczas instalacji aplikacji. Dzięki temu czas dla systemu operacyjnego odświeżyć jej lista źródeł zdarzeń zarejestrowanych i ich konfiguracji. Jeśli system operacyjny nie odświeżył jego lista źródeł zdarzeń, a następnie spróbuj zapisać zdarzenie z nowego źródła operacja zapisu zakończy się niepowodzeniem. Można skonfigurować, używając nowego źródła <xref:System.Diagnostics.EventLogInstaller>, lub za pomocą <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metody. Musi mieć uprawnienia administracyjne na komputerze, aby utworzyć nowe źródło zdarzeń.  
  
 Można utworzyć źródła zdarzeń dla istniejącego dziennika zdarzeń lub utworzenie nowego dziennika zdarzeń. Podczas tworzenia nowego źródła dla nowego dziennika zdarzeń systemu rejestruje źródła dla tego dziennika, ale dziennik jest tworzone dopiero po pierwszej pozycji są zapisywane do niego.  
  
 Każde źródło tylko może zapisywać do dziennika zdarzeń co jednocześnie. Jednak aplikacja może używać wielu źródeł do zapisu do wielu dzienników zdarzeń. Na przykład aplikacja może być konieczne wielu źródeł skonfigurowane dla różnych dzienników zdarzeń lub innego zasobu plików.  
  
 Aby zmienić szczegóły konfiguracji istniejącego źródła, możesz usunąć źródło, a następnie utwórz ją przy użyciu nowej konfiguracji. Użycie innych aplikacji lub składników istniejącego źródła, Utwórz nowe źródło o zaktualizowanej konfiguracji od usunięcie istniejącego źródła.  
  
 Źródło zdarzenia można zarejestrować z zlokalizowanych zasobów dla zdarzeń ciągów Kategoria i komunikatu. Aplikację można napisać przy użyciu identyfikatorów zasobów, a nie rzeczywiste ciąg określający wpisy w dzienniku zdarzeń. Podgląd zdarzeń używa identyfikatora zasobu można znaleźć i wyświetlić odpowiedni ciąg z pliku zasobów zlokalizowanych oparte na bieżących ustawieniach języka. Możesz zarejestrować osobny plik dla kategorii zdarzeń, wiadomości i ciągi wstawiania parametru lub można zarejestrować tego samego pliku zasobów dla wszystkich trzech typów ciągów. Użyj <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, i <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> właściwości, aby skonfigurować źródła na zapisywanie wpisów zlokalizowanego w dzienniku zdarzeń. Jeśli aplikacja zapisuje wartości ciągu bezpośrednio do dziennika zdarzeń, ustaw te właściwości nie jest konieczne.  
  
 Źródło musi być skonfigurowany zapisywania wpisów zlokalizowanych lub zapisywanie ciągów bezpośredniego. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Metoda zapisuje dany ciąg znaków bezpośrednio do dziennika zdarzeń; nie używa pliku zasobów komunikatów lokalizowalny. Użyj <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody można zapisać zdarzenia przy użyciu pliku zasobów zlokalizowanych wiadomości.  
  
 Jeśli aplikacja zapisuje wpisów przy użyciu zarówno identyfikatorów zasobów, jak i wartości ciągu, należy zarejestrować dwa oddzielne źródła. Na przykład skonfigurować jedno źródło z plikami zasobów, a następnie użyć tego źródła w <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody na zapisywanie wpisów przy użyciu identyfikatorów zasobów w dzienniku zdarzeń. Następnie utwórz innego źródła bez plików zasobów i użyj tego źródła w <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodę, aby zapisać parametry bezpośrednio do dziennika zdarzeń przy użyciu tego źródła.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia na podstawie argumentów wiersza polecenia. Argumenty wejściowe Określ nazwę źródła zdarzenia, nazwa dziennika zdarzeń, nazwę komputera i pliku zasobów komunikatów zdarzeń. Przykładowy kod sprawdza, czy źródło nie powoduje konfliktu z istniejącym źródle zdarzeń, a następnie tworzy nowe źródło zdarzenia określonego dziennika zdarzeń.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">Każdy członek wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> przy pełnym zaufaniu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Nazwę można zarejestrować się w dzienniku zdarzeń jako źródło wpisów.</param>
        <param name="logName">Nazwa dziennika, do której są zapisywane wpisy ze źródła.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSourceCreationData" /> klasy o nazwie źródła i dziennik zdarzeń określone zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby tworzyć wpisy dziennika zdarzeń, należy najpierw utworzyć źródło zdarzenia w dzienniku zdarzeń. Aby zarejestrować nowe źródło, zainicjować <xref:System.Diagnostics.EventSourceCreationData> wystąpienia, skonfiguruj właściwości wystąpienia dla aplikacji, a wywołania <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> — metoda. Po zarejestrowaniu źródła można napisać wpisów z źródła przy użyciu <xref:System.Diagnostics.EventLog.WriteEvent%2A> lub <xref:System.Diagnostics.EventLog.WriteEntry%2A> metody.  
  
 Źródło zdarzenia można zarejestrować z zlokalizowanych zasobów dla zdarzeń ciągów Kategoria i komunikatu. Aplikację można napisać przy użyciu identyfikatorów zasobów, a nie rzeczywiste ciąg określający wpisy w dzienniku zdarzeń. Podgląd zdarzeń używa identyfikatora zasobu można znaleźć i wyświetlić odpowiedni ciąg z pliku zasobów zlokalizowanych oparte na bieżących ustawieniach języka. Możesz zarejestrować osobny plik dla kategorii zdarzeń, wiadomości i ciągi wstawiania parametru lub można zarejestrować tego samego pliku zasobów dla wszystkich trzech typów ciągów. Użyj <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, i <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> właściwości, aby skonfigurować źródła na zapisywanie wpisów zlokalizowanego w dzienniku zdarzeń. Jeśli aplikacja zapisuje wartości ciągu bezpośrednio do dziennika zdarzeń, ustaw te właściwości nie jest konieczne.  
  
 Źródło musi być skonfigurowany zapisywania wpisów zlokalizowanych lub zapisywanie ciągów bezpośredniego. Jeśli aplikacja zapisuje wpisów przy użyciu zarówno identyfikatorów zasobów, jak i wartości ciągu, należy zarejestrować dwa oddzielne źródła. Na przykład skonfigurować jedno źródło z plikami zasobów, a następnie użyć tego źródła w <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody na zapisywanie wpisów przy użyciu identyfikatorów zasobów w dzienniku zdarzeń. Następnie utwórz innego źródła bez plików zasobów i użyj tego źródła w <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodę, aby zapisać parametry bezpośrednio w dzienniku zdarzeń.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla <xref:System.Diagnostics.EventSourceCreationData>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|`source` Parametru.|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|`logName` Parametru.|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|Komputer lokalny (".").|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|Zero|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` (`Nothing` w języku Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` (`Nothing` w języku Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` (`Nothing` w języku Visual Basic).|  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzenia o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, w przykładzie ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykładowy kod ustawia nazwę wyświetlaną zlokalizowanego w dzienniku zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobu w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykładowy kod używa następującego pliku tekst wiadomości wbudowanych w bibliotece EventLogMsgs.dll zasobów. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatorów zasobów i tekst dla kategorii, komunikatu o zdarzeniu i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Każdy członek wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> przy pełnym zaufaniu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę kategorii w pliku zasobów kategorii.</summary>
        <value>Liczba kategorii w pliku zasobów kategorii. Wartość domyślna wynosi zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> i <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości, aby zapisać zdarzeń z zlokalizowane ciągi kategorii. Podgląd zdarzeń wyświetla kategorię dla wpisu zdarzenia, jeśli znasz kategorię podczas zapisywania zdarzenia. Dziennik zdarzeń kategorie są zdefiniowane przez aplikację ciągów, które są pomoc filtrować zdarzenia lub dostarczyć więcej informacji o zdarzeniu. Na przykład aplikacji można określić osobne kategorie dla różnych składników lub innej operacji.  
  
 Kategorie zdarzeń jest opcjonalna. Jeśli aplikacja nie korzysta z kategorii, nie należy ustawiać <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> i <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości.  
  
 Aby szczegółowe informacje o zdefiniowanie komunikaty o zdarzeniach i tworzenie plików zasobów dla zdarzeń, zobacz temat "Komunikat kompilatora" w dokumentacji zestawu SDK platformy w [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzenia o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, w przykładzie ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykładowy kod ustawia nazwę wyświetlaną zlokalizowanego w dzienniku zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobu w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykładowy kod używa następującego pliku tekst wiadomości wbudowanych w bibliotece EventLogMsgs.dll zasobów. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatorów zasobów i tekst dla kategorii, komunikatu o zdarzeniu i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Właściwość jest ustawiona wartość ujemną lub wartość większą niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Każdy członek wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> przy pełnym zaufaniu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę pliku zasobu, który zawiera ciągi kategorię dla tego źródła.</summary>
        <value>Ścieżka pliku zasobów kategorii. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> i <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości, aby zapisać zdarzeń z zlokalizowane ciągi kategorii. Podgląd zdarzeń wyświetla kategorię dla wpisu zdarzenia, jeśli znasz kategorię podczas zapisywania zdarzenia. Dziennik zdarzeń kategorie są zdefiniowane przez aplikację ciągów, które są pomoc filtrować zdarzenia lub dostarczyć więcej informacji o zdarzeniu. Na przykład aplikacji można określić osobne kategorie dla różnych składników lub innej operacji.  
  
 Kategorie zdarzeń jest opcjonalna. Jeśli aplikacja nie korzysta z kategorii, nie należy ustawiać <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> i <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości.  
  
 Aby szczegółowe informacje o zdefiniowanie komunikaty o zdarzeniach i tworzenie plików zasobów dla zdarzeń, zobacz temat "Komunikat kompilatora" w dokumentacji zestawu SDK platformy w [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzenia o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, w przykładzie ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykładowy kod ustawia nazwę wyświetlaną zlokalizowanego w dzienniku zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobu w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykładowy kod używa następującego pliku tekst wiadomości wbudowanych w bibliotece EventLogMsgs.dll zasobów. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatorów zasobów i tekst dla kategorii, komunikatu o zdarzeniu i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Każdy członek wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> przy pełnym zaufaniu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę dziennika zdarzeń, do którego źródło zapisuje wpisów.</summary>
        <value>Nazwa dziennika zdarzeń. Może to być aplikacji, System lub niestandardowej nazwy dziennika. Wartość domyślna to "Aplikacji".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwość do identyfikacji dziennika zdarzeń, że aplikacja zapisuje wpisy przy użyciu nowego źródła. Dziennik zdarzeń może być dziennika nowego lub istniejącego dziennika. Aplikacje i usługi, należy zapisać dziennik aplikacji lub dziennik niestandardowy. Sterowniki urządzeń, należy zapisać w dzienniku systemu. Jeśli nie zostanie jawnie ustawiona <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwości, domyślnie dziennik zdarzeń w dzienniku aplikacji.  
  
> [!NOTE]
>  Dziennika zabezpieczeń jest tylko do odczytu.  
  
 Aby skierować je do istniejącego dziennika dla nowego źródła, ustaw <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwości do istniejącej nazwy dziennika zdarzeń. Aby utworzyć nowy dziennik zdarzeń dla źródła, należy ustawić <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwości. Nazwy dzienników zdarzeń muszą składać się ze znaków drukowalnych i nie może zawierać znaków ' * ','?', lub "\\". Pierwsze 8 znaków nazwy dziennika zdarzeń musi być inna niż pierwsze 8 znaków nazwy istniejących dzienników zdarzeń na określonym komputerze.  
  
 System operacyjny zapisuje dzienniki zdarzeń jako plików. Jeśli używasz <xref:System.Diagnostics.EventLogInstaller> lub <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodę w celu utworzenia nowego dziennika zdarzeń, skojarzony plik jest przechowywany w katalogu %SystemRoot%\System32\Config na określonym komputerze. Nazwa pliku jest ustawiona przez dodanie pierwsze 8 znaków <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwości z rozszerzeniem nazwy pliku ".evt".  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia na podstawie argumentów wiersza polecenia. Argumenty wejściowe Określ nazwę źródła zdarzenia, nazwa dziennika zdarzeń, nazwę komputera i pliku zasobów komunikatów zdarzeń. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Każdy członek wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> przy pełnym zaufaniu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę komputera, na którym można zarejestrować źródła zdarzenia.</summary>
        <value>Nazwa systemu, w którym można zarejestrować źródła zdarzenia. Wartość domyślna to komputer lokalny (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> Wartość nie może być pustym ciągiem. Jeśli nazwa komputera nie jest jawnie ustawiona, domyślnie na komputerze lokalnym (".").  
  
 Podczas rejestrowania źródła na komputerze zdalnym, musi mieć uprawnienia administracyjne na tym komputerze można zapisać wartości rejestru z wystarczającymi uprawnieniami.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia na podstawie argumentów wiersza polecenia. Argumenty wejściowe Określ nazwę źródła zdarzenia, nazwa dziennika zdarzeń, nazwę komputera i pliku zasobów komunikatów zdarzeń. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa komputera jest nieprawidłowa.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Każdy członek wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> przy pełnym zaufaniu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę pliku zasobów komunikatów, który zawiera komunikat formatowanie ciągów dla źródła.</summary>
        <value>Ścieżka pliku zasobów komunikatów. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwości, aby skonfigurować źródło dziennika zdarzeń mają być zapisywane zdarzenia zlokalizowane. Komunikaty o zdarzeniach są zdefiniowane przez aplikację ciągów zawierających opis zdarzenia do użytkownika.  
  
 Aplikację można napisać wpisów dziennika zdarzeń przy użyciu identyfikatorów zasobów. Identyfikator zasobu indeksuje wiadomość znajduje się w <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>. Podgląd zdarzeń używa identyfikatora zasobu można znaleźć i wyświetlić odpowiedni ciąg z pliku zasobów komunikatów zlokalizowanych oparte na bieżących ustawieniach języka.  
  
 Źródło zdarzenia musi być skonfigurowany zapisywania wpisów zlokalizowanych lub zapisywanie ciągów bezpośredniego. Użyj <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody na zapisywanie wpisów zlokalizowane dla źródła konfigurowane przy użyciu pliku zasobów komunikatów.  
  
 Jeśli aplikacja zapisuje ciągi komunikatów zdarzeń bezpośrednio, zamiast używania identyfikator zasobu w pliku zlokalizowanych zasobów nie należy ustawiać <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwości.  
  
 Aby szczegółowe informacje o zdefiniowanie komunikaty o zdarzeniach i tworzenie plików zasobów dla zdarzeń, zobacz temat "Komunikat kompilatora" w dokumentacji zestawu SDK platformy w [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzenia o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, w przykładzie ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykładowy kod ustawia nazwę wyświetlaną zlokalizowanego w dzienniku zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobu w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykładowy kod używa następującego pliku tekst wiadomości wbudowanych w bibliotece EventLogMsgs.dll zasobów. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatorów zasobów i tekst dla kategorii, komunikatu o zdarzeniu i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Każdy członek wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> przy pełnym zaufaniu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę pliku zasobu, który zawiera komunikat ciągów parametrów dla źródła.</summary>
        <value>Ścieżka pliku zasobu parametrów. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> właściwości, aby skonfigurować źródło dziennika zdarzeń mają być zapisywane zdarzenia zlokalizowanych z wstawiony parametr ciągów. Każdy komunikat zlokalizowanych zdarzeń określony w <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwość może zawierać symbole zastępcze dla ciągów wstawiania. Te symbole są używane do określenia pozycji i identyfikator zasobu ciągu niezależny od języka w komunikacie zdarzenia. Podgląd zdarzeń wypełnia symbole zastępcze przy użyciu odpowiednich parametrów z <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> i formatuje komunikat dziennika zdarzeń dla wpisu zlokalizowanych zdarzeń.  
  
 Na przykład sekcji poniżej plik tekstowy komunikat definiuje ciąg, symbol zastępczy parametrów:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 W pliku zasobów parametr ciągu wstawiania musi być zdefiniowana z identyfikatorem zasobu, umożliwiająca symbolu zastępczego, jak pokazano poniżej:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 Źródło zdarzenia musi być skonfigurowany zapisywania wpisów zlokalizowanych lub zapisywanie ciągów bezpośredniego. Użyj <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody na zapisywanie wpisów zlokalizowane dla źródła konfigurowane przy użyciu pliku zasobów komunikatów.  
  
 Jeśli aplikacja zapisuje ciągi komunikatów zdarzeń bezpośrednio do dziennika zdarzeń lub z <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwości nie zawiera komunikatów z symbole zastępcze wstawiania parametru, nie należy ustawiać <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> właściwości.  
  
 Aby szczegółowe informacje o zdefiniowanie komunikaty o zdarzeniach i tworzenie plików zasobów dla zdarzeń, zobacz temat "Komunikat kompilatora" w dokumentacji zestawu SDK platformy w [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzenia o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, w przykładzie ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykładowy kod ustawia nazwę wyświetlaną zlokalizowanego w dzienniku zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobu w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykładowy kod używa następującego pliku tekst wiadomości wbudowanych w bibliotece EventLogMsgs.dll zasobów. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatorów zasobów i tekst dla kategorii, komunikatu o zdarzeniu i ciągi wstawiania parametru. W szczególności wiadomości zdefiniowane dla zasobu o identyfikatorze 1004 używa symbolu zastępczego dla parametru zdefiniowany dla identyfikatora zasobu 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Każdy członek wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> przy pełnym zaufaniu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę zarejestrować się w dzienniku zdarzeń jako źródła zdarzenia.</summary>
        <value>Nazwę można zarejestrować się w dzienniku zdarzeń jako źródło wpisów. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa źródła jest często nazwa aplikacji lub nazwy składnika w dużych aplikacji. <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> Używa metody <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, i <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> właściwości w celu utworzenia wartości rejestru na komputerze docelowym nowe źródło i jego skojarzony dziennika zdarzeń. Nowa nazwa źródła nie może dopasować istniejącej nazwy źródła lub istniejącej nazwy dziennika zdarzeń na komputerze docelowym.  
  
 Po utworzeniu wartości rejestru dla źródła, aplikacja może używać źródła na zapisywanie wpisów w dzienniku zdarzeń skonfigurowany.  
  
 Każde źródło tylko może zapisywać do dziennika zdarzeń co jednocześnie. Jednak aplikacja może używać wielu źródeł do zapisu do wielu dzienników zdarzeń. Na przykład aplikacja może wymagać wielu źródeł skonfigurowane dla różnych dzienników zdarzeń lub innego zasobu plików.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia na podstawie argumentów wiersza polecenia. Argumenty wejściowe Określ nazwę źródła zdarzenia, nazwa dziennika zdarzeń, nazwę komputera i pliku zasobów komunikatów zdarzeń. Ten przykład jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Każdy członek wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> przy pełnym zaufaniu. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>