<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c40013fc396f54e9d0337d11e759ad8030d3f940" /><Meta Name="ms.sourcegitcommit" Value="08fc3691deb7adaf0dfd751b9d9d0b23a3d3a7b8" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/09/2019" /><Meta Name="ms.locfileid" Value="68896263" /></Metadata><TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje ustawienia konfiguracji służące do tworzenia źródła dziennika zdarzeń na komputerze lokalnym lub komputerze zdalnym.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj klasy <xref:System.Diagnostics.EventSourceCreationData> , aby skonfigurować nowe źródło do zapisywania zlokalizowanych wpisów w dzienniku zdarzeń. Nie jest konieczne używanie tej klasy do odczytu z dziennika zdarzeń.  
  
 Ta klasa definiuje ustawienia konfiguracji dla nowego źródła zdarzeń i skojarzonego z nim dziennika zdarzeń. Skojarzony dziennik zdarzeń może znajdować się na komputerze lokalnym lub komputerze zdalnym. Aby utworzyć nowe źródło dla nowego lub istniejącego dziennika zdarzeń na komputerze lokalnym, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> należy ustawić właściwości <xref:System.Diagnostics.EventSourceCreationData> i <xref:System.Diagnostics.EventSourceCreationData.Source%2A> wywołać <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> metodę. Ta metoda tworzy Źródło zdarzenia określone we <xref:System.Diagnostics.EventSourceCreationData.Source%2A> właściwości i rejestruje je dla dziennika zdarzeń określonego w. <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> To zachowanie jest podobne do użycia <xref:System.Diagnostics.EventLogInstaller> klasy w celu zarejestrowania źródła zdarzeń w dzienniku zdarzeń.  
  
 Za pomocą metod <xref:System.Diagnostics.EventLog.WriteEntry%2A>iZapisz zdarzenia w dzienniku zdarzeń. <xref:System.Diagnostics.EventLog.WriteEvent%2A> Należy określić źródło zdarzenia do zapisywania zdarzeń; przed zapisaniem pierwszego wpisu ze źródłem należy utworzyć i skonfigurować źródło zdarzenia.  
  
 Utwórz nowe źródło zdarzenia podczas instalacji aplikacji. Pozwala to czas na odświeżenie listy zarejestrowanych źródeł zdarzeń i ich konfiguracji przez system operacyjny. Jeśli system operacyjny nie odświeżył swojej listy źródeł zdarzeń i podjęto próbę zapisania zdarzenia z nowym źródłem, operacja zapisu zakończy się niepowodzeniem. Nowe źródło można skonfigurować przy użyciu <xref:System.Diagnostics.EventLogInstaller>lub <xref:System.Diagnostics.EventLog.CreateEventSource%2A> przy użyciu metody. Aby utworzyć nowe źródło zdarzeń, musisz mieć uprawnienia administracyjne na komputerze.  
  
 Można utworzyć źródło zdarzenia dla istniejącego dziennika zdarzeń lub nowego dziennika zdarzeń. Gdy tworzysz nowe źródło dla nowego dziennika zdarzeń, system rejestruje źródło tego dziennika, ale dziennik nie zostanie utworzony, dopóki nie zostanie do niego zapisany pierwszy wpis.  
  
 Każde źródło może zapisywać w danym momencie tylko w jednym dzienniku zdarzeń; Jednak aplikacja może zapisywać w wielu dziennikach zdarzeń przy użyciu wielu źródeł. Na przykład aplikacja może potrzebować wielu źródeł skonfigurowanych dla różnych dzienników zdarzeń lub różnych plików zasobów.  
  
 Aby zmienić szczegóły konfiguracji istniejącego źródła, należy usunąć źródło, a następnie utworzyć je przy użyciu nowej konfiguracji. Jeśli inne aplikacje lub składniki używają istniejącego źródła, należy utworzyć nowe źródło ze zaktualizowaną konfiguracją, a nie usunąć istniejące źródło.  
  
 Źródło zdarzeń można zarejestrować przy użyciu zlokalizowanych zasobów dla kategorii zdarzeń i ciągów komunikatów. Aplikacja może zapisywać wpisy dziennika zdarzeń przy użyciu identyfikatorów zasobów zamiast określać rzeczywisty ciąg. Podgląd zdarzeń używa identyfikatora zasobu do znajdowania i wyświetlania odpowiedniego ciągu z zlokalizowanego pliku zasobów na podstawie bieżących ustawień języka. Można zarejestrować osobny plik dla kategorii zdarzeń, komunikatów i ciągów wstawiania parametrów lub można zarejestrować ten sam plik zasobu dla wszystkich trzech typów ciągów. Użyj właściwości <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> ,,<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> i<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> , aby skonfigurować źródło do zapisywania zlokalizowanych wpisów w dzienniku zdarzeń. <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Jeśli aplikacja zapisuje wartości ciągów bezpośrednio do dziennika zdarzeń, nie trzeba ustawiać tych właściwości.  
  
 Źródło musi być skonfigurowane do zapisywania zlokalizowanych wpisów lub do pisania ciągów bezpośrednich. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Metoda zapisuje dany ciąg bezpośrednio w dzienniku zdarzeń; nie używa lokalizowalnego pliku zasobów komunikatów. <xref:System.Diagnostics.EventLog.WriteEvent%2A> Użyj metody do zapisywania zdarzeń przy użyciu zlokalizowanego pliku zasobów komunikatów.  
  
 Jeśli aplikacja zapisuje wpisy przy użyciu zarówno identyfikatorów zasobów, jak i wartości ciągów, należy zarejestrować dwa oddzielne źródła. Na przykład Skonfiguruj jedno źródło z plikami zasobów, a następnie użyj tego źródła w <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodzie do zapisu wpisów przy użyciu identyfikatorów zasobów do dziennika zdarzeń. Następnie utwórz inne źródło bez plików zasobów i Użyj tego źródła w <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodzie, aby pisać ciągi bezpośrednio do dziennika zdarzeń przy użyciu tego źródła.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia z argumentów wiersza polecenia. Argumenty wejściowe określają nazwę źródła zdarzenia, nazwę dziennika zdarzeń, nazwę komputera i plik zasobów komunikatów o zdarzeniach. Przykładowy kod sprawdza, czy źródło nie powoduje konfliktu z istniejącym źródłem zdarzenia, a następnie tworzy nowe źródło zdarzenia dla określonego dziennika zdarzeń.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">do wywoływania dowolnego elementu członkowskiego <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Nazwa, która ma zostać zarejestrowana w dzienniku zdarzeń jako źródło wpisów.</param>
        <param name="logName">Nazwa dziennika, w którym są zapisywane wpisy ze źródła.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventSourceCreationData" /> klasy z określonym źródłem zdarzenia i nazwą dziennika zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zapisać wpisy w dzienniku zdarzeń, należy najpierw utworzyć źródło zdarzenia dla dziennika zdarzeń. Aby zarejestrować nowe źródło, zainicjuj <xref:System.Diagnostics.EventSourceCreationData> wystąpienie, skonfiguruj właściwości wystąpienia aplikacji i <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> Wywołaj metodę. Po zarejestrowaniu źródła można napisać wpisy ze źródła przy użyciu <xref:System.Diagnostics.EventLog.WriteEvent%2A> metod lub. <xref:System.Diagnostics.EventLog.WriteEntry%2A>  
  
 Źródło zdarzeń można zarejestrować przy użyciu zlokalizowanych zasobów dla kategorii zdarzeń i ciągów komunikatów. Aplikacja może zapisywać wpisy dziennika zdarzeń przy użyciu identyfikatorów zasobów zamiast określać rzeczywisty ciąg. Podgląd zdarzeń używa identyfikatora zasobu do znajdowania i wyświetlania odpowiedniego ciągu z zlokalizowanego pliku zasobów na podstawie bieżących ustawień języka. Można zarejestrować osobny plik dla kategorii zdarzeń, komunikatów i ciągów wstawiania parametrów lub można zarejestrować ten sam plik zasobu dla wszystkich trzech typów ciągów. Użyj właściwości <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> ,,<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> i<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> , aby skonfigurować źródło do zapisywania zlokalizowanych wpisów w dzienniku zdarzeń. <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Jeśli aplikacja zapisuje wartości ciągów bezpośrednio do dziennika zdarzeń, nie trzeba ustawiać tych właściwości.  
  
 Źródło musi być skonfigurowane do zapisywania zlokalizowanych wpisów lub do pisania ciągów bezpośrednich. Jeśli aplikacja zapisuje wpisy przy użyciu zarówno identyfikatorów zasobów, jak i wartości ciągów, należy zarejestrować dwa oddzielne źródła. Na przykład Skonfiguruj jedno źródło z plikami zasobów, a następnie użyj tego źródła w <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodzie do zapisu wpisów przy użyciu identyfikatorów zasobów do dziennika zdarzeń. Następnie utwórz inne źródło bez plików zasobów i Użyj tego źródła w <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodzie, aby pisać ciągi bezpośrednio do dziennika zdarzeń.  
  
 W poniższej tabeli przedstawiono początkowe wartości <xref:System.Diagnostics.EventSourceCreationData>właściwości.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|`source` Parametr.|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|`logName` Parametr.|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|Komputer lokalny (".").|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|Zero|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null`(`Nothing` w Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null`(`Nothing` w Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null`(`Nothing` w Visual Basic).|  
  
   
  
## Examples  
 Poniższy przykład kodu określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowane na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, przykład ustawia plik zasobów wiadomości dla źródła i tworzy nowe źródło zdarzenia. Na koniec kod przykład ustawia zlokalizowaną nazwę wyświetlaną dziennika zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżki pliku zasobu w. `messageFile`  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do wywoływania dowolnego elementu członkowskiego <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę kategorii w pliku zasobów kategorii.</summary>
        <value>Liczba kategorii w pliku zasobów kategorii. Wartość domyślna to zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> i, aby pisać zdarzenia ze zlokalizowanymi ciągami kategorii. <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Podgląd zdarzeń wyświetla kategorię wpisu zdarzenia w przypadku podania kategorii podczas pisania zdarzenia. Kategorie dzienników zdarzeń są ciągami zdefiniowanymi w aplikacji, które pomagają filtrować zdarzenia, lub podawać dalsze informacje dotyczące zdarzenia. Na przykład aplikacja może definiować oddzielne kategorie dla różnych składników lub różnych operacji.  
  
 Kategorie zdarzeń są opcjonalne; Jeśli aplikacja nie korzysta z <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> kategorii, nie ustawiaj właściwości i. <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>  
  
 Aby uzyskać szczegółowe informacje o definiowaniu komunikatów o zdarzeniach i tworzeniu plików zasobów zdarzeń, zobacz temat "kompilator komunikatów" w dokumentacji [http://msdn.microsoft.com](https://msdn.microsoft.com/)zestawu SDK platformy pod adresem.  
  
   
  
## Examples  
 Poniższy przykład kodu określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowane na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, przykład ustawia plik zasobów wiadomości dla źródła i tworzy nowe źródło zdarzenia. Na koniec kod przykład ustawia zlokalizowaną nazwę wyświetlaną dziennika zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżki pliku zasobu w. `messageFile`  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Właściwość jest ustawiona na wartość ujemną lub do wartości większej niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do wywoływania dowolnego elementu członkowskiego <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę pliku zasobów, który zawiera ciągi kategorii dla źródła.</summary>
        <value>Ścieżka pliku zasobów kategorii. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> i, aby pisać zdarzenia ze zlokalizowanymi ciągami kategorii. <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Podgląd zdarzeń wyświetla kategorię wpisu zdarzenia w przypadku podania kategorii podczas pisania zdarzenia. Kategorie dzienników zdarzeń są ciągami zdefiniowanymi w aplikacji, które pomagają filtrować zdarzenia, lub podawać dalsze informacje dotyczące zdarzenia. Na przykład aplikacja może definiować oddzielne kategorie dla różnych składników lub różnych operacji.  
  
 Kategorie zdarzeń są opcjonalne; Jeśli aplikacja nie korzysta z <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> kategorii, nie ustawiaj właściwości i. <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>  
  
 Aby uzyskać szczegółowe informacje o definiowaniu komunikatów o zdarzeniach i tworzeniu plików zasobów zdarzeń, zobacz temat "kompilator komunikatów" w dokumentacji [http://msdn.microsoft.com](https://msdn.microsoft.com/)zestawu SDK platformy pod adresem.  
  
   
  
## Examples  
 Poniższy przykład kodu określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowane na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, przykład ustawia plik zasobów wiadomości dla źródła i tworzy nowe źródło zdarzenia. Na koniec kod przykład ustawia zlokalizowaną nazwę wyświetlaną dziennika zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżki pliku zasobu w. `messageFile`  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do wywoływania dowolnego elementu członkowskiego <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę dziennika zdarzeń, do którego źródła zapisują wpisy.</summary>
        <value>Nazwa dziennika zdarzeń. Może to być aplikacja, system lub nazwa dziennika niestandardowego. Wartość domyślna to "aplikacja".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> Użyj właściwości, aby zidentyfikować dziennik zdarzeń, w ramach którego aplikacja zapisuje wpisy przy użyciu nowego źródła. Dziennik zdarzeń może być nowym dziennikiem lub istniejącym dziennikiem. Aplikacje i usługi powinny zapisywać w dzienniku aplikacji lub dzienniku niestandardowym. Sterowniki urządzeń powinny zapisywać dane w dzienniku systemu. Jeśli nie ustawisz jawnie <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwości, dziennik zdarzeń zostanie domyślnie ustawiony na dziennik aplikacji.  
  
> [!NOTE]
>  Dziennik zabezpieczeń jest tylko do odczytu.  
  
 Aby wskazać istniejący dziennik dla nowego źródła, należy ustawić <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwość na istniejącą nazwę dziennika zdarzeń. Aby utworzyć nowy dziennik zdarzeń dla źródła, należy ustawić <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwość. Nazwy dzienników zdarzeń muszą zawierać znaki drukowalne i nie mogą zawierać znaków "*", "?" ani "\\". Pierwsze 8 znaków nazwy dziennika zdarzeń musi różnić się od pierwszych 8 znaków istniejących nazw dzienników zdarzeń na określonym komputerze.  
  
 System operacyjny przechowuje dzienniki zdarzeń jako pliki. Jeśli używasz <xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventLog.CreateEventSource%2A> lub metoda tworzenia nowego dziennika zdarzeń, skojarzony plik jest przechowywany w katalogu%SystemRoot%\System32\Config na określonym komputerze. Nazwa pliku jest ustawiana przez dołączenie pierwszych 8 znaków <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwości z rozszerzeniem nazwy pliku ". evt".  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia z argumentów wiersza polecenia. Argumenty wejściowe określają nazwę źródła zdarzenia, nazwę dziennika zdarzeń, nazwę komputera i plik zasobów komunikatów o zdarzeniach. Ten przykład jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do wywoływania dowolnego elementu członkowskiego <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę komputera, na którym ma zostać zarejestrowane źródło zdarzeń.</summary>
        <value>Nazwa systemu, w którym ma zostać zarejestrowane źródło zdarzenia. Wartość domyślna to komputer lokalny (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> Wartość nie może być pustym ciągiem. Jeśli nazwa komputera nie jest jawnie ustawiona, domyślnie jest to komputer lokalny (".").  
  
 Podczas rejestrowania źródła na komputerze zdalnym należy mieć uprawnienia administracyjne na tym komputerze, aby zapisać wartości rejestru z odpowiednimi uprawnieniami.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia z argumentów wiersza polecenia. Argumenty wejściowe określają nazwę źródła zdarzenia, nazwę dziennika zdarzeń, nazwę komputera i plik zasobów komunikatów o zdarzeniach. Ten przykład jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa komputera jest nieprawidłowa.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do wywoływania dowolnego elementu członkowskiego <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę pliku zasobów wiadomości, który zawiera ciągi formatowania komunikatów dla źródła.</summary>
        <value>Ścieżka pliku zasobów wiadomości. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> , aby skonfigurować źródło dziennika zdarzeń w celu zapisywania zlokalizowanych komunikatów zdarzeń. Komunikaty zdarzeń to ciągi zdefiniowane przez aplikację, które opisują zdarzenie dla użytkownika.  
  
 Aplikacja może zapisywać wpisy dziennika zdarzeń przy użyciu identyfikatorów zasobów. Identyfikator zasobu indeksuje komunikat znajdujący się w <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>. Podgląd zdarzeń używa identyfikatora zasobu do znajdowania i wyświetlania odpowiedniego ciągu z zlokalizowanego pliku zasobów komunikatów na podstawie bieżących ustawień języka.  
  
 Źródło zdarzenia musi być skonfigurowane do zapisywania zlokalizowanych wpisów lub do pisania ciągów bezpośrednich. Użyj metody <xref:System.Diagnostics.EventLog.WriteEvent%2A> , aby zapisać zlokalizowane wpisy dla źródła skonfigurowanego przy użyciu pliku zasobów wiadomości.  
  
 Jeśli aplikacja zapisuje ciągi komunikatów zdarzeń bezpośrednio, zamiast używać identyfikatora zasobu w zlokalizowanym pliku zasobów, nie ustawiaj <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwości.  
  
 Aby uzyskać szczegółowe informacje o definiowaniu komunikatów o zdarzeniach i tworzeniu plików zasobów zdarzeń, zobacz temat "kompilator komunikatów" w dokumentacji [http://msdn.microsoft.com](https://msdn.microsoft.com/)zestawu SDK platformy pod adresem.  
  
   
  
## Examples  
 Poniższy przykład kodu określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowane na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, przykład ustawia plik zasobów wiadomości dla źródła i tworzy nowe źródło zdarzenia. Na koniec kod przykład ustawia zlokalizowaną nazwę wyświetlaną dziennika zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżki pliku zasobu w. `messageFile`  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do wywoływania dowolnego elementu członkowskiego <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę pliku zasobów, który zawiera ciągi parametrów komunikatów dla źródła.</summary>
        <value>Ścieżka pliku zasobów parametru. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> , aby skonfigurować źródło dziennika zdarzeń w celu zapisywania zlokalizowanych komunikatów zdarzeń z wstawionymi ciągami parametrów. Każdy zlokalizowany komunikat zdarzenia określony we <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwości może zawierać symbole zastępcze dla ciągów wstawiania. Symbole zastępcze służą do określania pozycji i identyfikatora zasobu dla ciągu niezależnego od języka w komunikacie zdarzenia. Podgląd zdarzeń wypełnia symbole zastępcze przy użyciu odpowiednich ciągów z <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> i formatuje komunikat dziennika zdarzeń dla zlokalizowanego wpisu zdarzenia.  
  
 Na przykład następująca sekcja pliku tekstowego komunikatu definiuje ciąg z symbolem zastępczym parametru:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 W pliku zasobu parametru ciąg wstawiania musi być zdefiniowany przy użyciu identyfikatora zasobu odpowiadającego symbolowi zastępczemu, jak pokazano poniżej:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 Źródło zdarzenia musi być skonfigurowane do zapisywania zlokalizowanych wpisów lub do pisania ciągów bezpośrednich. Użyj metody <xref:System.Diagnostics.EventLog.WriteEvent%2A> , aby zapisać zlokalizowane wpisy dla źródła skonfigurowanego przy użyciu pliku zasobów wiadomości.  
  
 Jeśli aplikacja zapisuje ciągi komunikatów o zdarzeniach bezpośrednio do dziennika zdarzeń lub jeśli <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwość nie zawiera komunikatów z symbolami zastępczymi wstawiania parametrów, nie <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> ustawiaj właściwości.  
  
 Aby uzyskać szczegółowe informacje o definiowaniu komunikatów o zdarzeniach i tworzeniu plików zasobów zdarzeń, zobacz temat "kompilator komunikatów" w dokumentacji [http://msdn.microsoft.com](https://msdn.microsoft.com/)zestawu SDK platformy pod adresem.  
  
   
  
## Examples  
 Poniższy przykład kodu określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowane na komputerze lokalnym. Jeśli źródło zdarzenia nie istnieje, przykład ustawia plik zasobów wiadomości dla źródła i tworzy nowe źródło zdarzenia. Na koniec kod przykład ustawia zlokalizowaną nazwę wyświetlaną dziennika zdarzeń przy użyciu wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżki pliku zasobu w. `messageFile`  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów. W przypadku komunikatu zdefiniowanego dla identyfikatora zasobu 1004 jest stosowany symbol zastępczy dla ciągu parametru zdefiniowanego dla identyfikatora zasobu 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do wywoływania dowolnego elementu członkowskiego <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę do zarejestrowania w dzienniku zdarzeń jako źródło zdarzenia.</summary>
        <value>Nazwa, która ma zostać zarejestrowana w dzienniku zdarzeń jako źródło wpisów. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa źródła jest często nazwą aplikacji lub nazwą składnika w ramach dużej aplikacji. Metoda używa właściwości<xref:System.Diagnostics.EventSourceCreationData.LogName%2A> ,i<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> do tworzenia wartości rejestru na komputerze docelowym dla nowego źródła i skojarzonego z nim dziennika zdarzeń. <xref:System.Diagnostics.EventSourceCreationData.Source%2A> <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> Nowa nazwa źródła nie może być taka sama jak istniejąca nazwa źródła lub istniejąca nazwa dziennika zdarzeń na komputerze docelowym.  
  
 Po utworzeniu wartości rejestru dla źródła aplikacja może użyć źródła do zapisu wpisów w skonfigurowanym dzienniku zdarzeń.  
  
 Każde źródło może zapisywać w danym momencie tylko w jednym dzienniku zdarzeń; Jednak aplikacja może zapisywać w wielu dziennikach zdarzeń przy użyciu wielu źródeł. Na przykład aplikacja może wymagać wielu źródeł skonfigurowanych dla różnych dzienników zdarzeń lub różnych plików zasobów.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia z argumentów wiersza polecenia. Argumenty wejściowe określają nazwę źródła zdarzenia, nazwę dziennika zdarzeń, nazwę komputera i plik zasobów komunikatów o zdarzeniach. Ten przykład jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do wywoływania dowolnego elementu członkowskiego <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>