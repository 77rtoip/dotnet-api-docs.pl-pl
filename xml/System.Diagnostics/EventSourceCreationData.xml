<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eff2b277f96e7292c08fb68ca474ab719ff71131" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39776828" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje ustawienia konfiguracji użyte do utworzenia źródło dziennika zdarzeń na komputerze lokalnym lub zdalnym.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData> klasy, aby skonfigurować nowe źródło do zapisywania zlokalizowanego wpisów dziennika zdarzeń. Nie jest konieczne użycie tej klasy można odczytać z dziennika zdarzeń.  
  
 Ta klasa definiuje ustawienia konfiguracji dla nowego źródła zdarzeń i jego skojarzone dziennika zdarzeń. Skojarzone dziennik zdarzeń może być na komputerze lokalnym lub komputerze zdalnym. Aby utworzyć nowe źródło dla nowego lub istniejącego dziennika zdarzeń na komputerze lokalnym, ustaw <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> i <xref:System.Diagnostics.EventSourceCreationData.Source%2A> właściwości <xref:System.Diagnostics.EventSourceCreationData> i wywołać <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> metody. Ta metoda tworzy źródła zdarzeń, określ w <xref:System.Diagnostics.EventSourceCreationData.Source%2A> właściwość i rejestruje je w dzienniku zdarzeń określony w <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>. To zachowanie jest podobne do <xref:System.Diagnostics.EventLogInstaller> klasy w celu zarejestrowania źródła zdarzeń do dziennika zdarzeń.  
  
 Użyj <xref:System.Diagnostics.EventLog.WriteEvent%2A> i <xref:System.Diagnostics.EventLog.WriteEntry%2A> metody, aby zapisać zdarzeń do dziennika zdarzeń. Należy określić źródło zdarzenia można zapisać zdarzenia; należy utworzyć i skonfigurować źródła zdarzeń przed zapisaniem pierwszy wpis ze źródłem.  
  
 Utwórz nowe źródło zdarzeń podczas instalacji aplikacji. Dzięki temu czas na odświeżenie listy źródeł zarejestrowanych zdarzeń i ich konfiguracji systemu operacyjnego. Jeśli system operacyjny nie odświeżył swoją listę źródeł zdarzeń, a użytkownik podejmie próbę zapisu zdarzenia o nowe źródło operacja zapisu zakończy się niepowodzeniem. Można skonfigurować nowe źródła, używając <xref:System.Diagnostics.EventLogInstaller>, lub za pomocą <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metody. Musi mieć uprawnienia administracyjne na komputerze, aby utworzyć nowe źródło zdarzeń.  
  
 Można utworzyć źródła zdarzeń dla istniejącego dziennika zdarzeń lub utworzenie nowego dziennika zdarzeń. Podczas tworzenia nowego źródła dla nowego dziennika zdarzeń systemu rejestruje źródła dla tego dziennika, ale dziennika nie jest tworzony, dopóki pierwszy wpis jest zapisywany do niego.  
  
 Każde źródło mogą zapisywać wyłącznie do jednego dziennika zdarzeń jednocześnie. Jednak aplikacja może używać wielu źródeł do zapisu do wielu dzienników. Na przykład aplikacja może być konieczne wielu źródeł, skonfigurowanych dla różnych dziennikach zdarzeń lub plików innego zasobu.  
  
 Aby zmienić szczegóły konfiguracji istniejącego źródła, możesz usunąć źródło, a następnie utwórz ją przy użyciu nowej konfiguracji. Jeśli używasz istniejącego źródła, inne aplikacje lub składniki, Utwórz nowe źródło przy użyciu zaktualizowanej konfiguracji, a nie usunięcie istniejącego źródła.  
  
 Za zarejestrowanie źródła zdarzeń i zlokalizowane zasoby dla ciągów kategorii i komunikat zdarzenia. Aplikację można napisać wpisy dziennika zdarzeń przy użyciu identyfikatorów zasobów zamiast określania rzeczywistego ciągu. Podgląd zdarzeń używa identyfikatora zasobu, aby znaleźć i wyświetlić odpowiedni ciąg z pliku zlokalizowanych zasobów, w oparciu o bieżące ustawienia języka. Możesz zarejestrować osobny plik dla kategorii zdarzeń, komunikatów i ciągi wstawiania parametru lub można zarejestrować tego samego pliku zasobów dla wszystkich trzech typów ciągów znaków. Użyj <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, i <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> właściwości, aby skonfigurować źródła na zapisywanie wpisów zlokalizowanych w dzienniku zdarzeń. Jeśli aplikacja zapisuje wartości ciągu bezpośrednio do dziennika zdarzeń, nie musisz ustawić te właściwości.  
  
 Źródło musi być skonfigurowany dla zapisywania zlokalizowanego wpisy lub zapisywanie bezpośrednie ciągów. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Metoda zapisuje podany ciąg bezpośrednio do dziennika zdarzeń; nie używa pliku zasobów Lokalizowalny wiadomości. Użyj <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodę, aby zapisać zdarzenia przy użyciu pliku zasobów komunikatów zlokalizowanego.  
  
 Jeśli aplikacja zapisuje wpisów za pomocą identyfikatorów zasobów i wartości ciągu, należy zarejestrować dwóch oddzielnych źródeł. Na przykład skonfigurować jedno źródło z plikami zasobów, a następnie użyj tego źródła w <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody na zapisywanie wpisów przy użyciu identyfikatorów zasobów w dzienniku zdarzeń. Utwórz inne źródło bez plików zasobów i użyć tego źródła w <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodę, aby zapisać ciągi bezpośrednio do dziennika zdarzeń przy użyciu tego źródła.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia na podstawie argumentów wiersza polecenia. Argumenty wejściowe określ nazwy źródła zdarzeń, nazwa dziennika zdarzeń, nazwy komputera i pliku zasobów komunikatów zdarzeń. Przykład kodu sprawdza, czy źródło nie powoduje konfliktu z istniejącym źródłem zdarzeń, a następnie tworzy nowe źródło zdarzeń dla określonego dziennika zdarzeń.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">dowolny element członkowski wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Nazwa do rejestrowania w dzienniku zdarzeń jako źródła wpisów.</param>
        <param name="logName">Nazwa dziennika, do której są zapisywane wpisy ze źródła.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSourceCreationData" /> klasy o nazwie źródłowy i dziennik zdarzeń określonego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby tworzyć wpisy w dzienniku zdarzeń, należy najpierw utworzyć źródła zdarzeń do dziennika zdarzeń. Aby zarejestrować nowe źródło, zainicjować <xref:System.Diagnostics.EventSourceCreationData> wystąpienia, skonfiguruj właściwości wystąpienia dla aplikacji, a wywołanie <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> metody. Po zarejestrowaniu źródła można tworzyć wpisy ze źródła przy użyciu <xref:System.Diagnostics.EventLog.WriteEvent%2A> lub <xref:System.Diagnostics.EventLog.WriteEntry%2A> metody.  
  
 Za zarejestrowanie źródła zdarzeń i zlokalizowane zasoby dla ciągów kategorii i komunikat zdarzenia. Aplikację można napisać wpisy dziennika zdarzeń przy użyciu identyfikatorów zasobów zamiast określania rzeczywistego ciągu. Podgląd zdarzeń używa identyfikatora zasobu, aby znaleźć i wyświetlić odpowiedni ciąg z pliku zlokalizowanych zasobów, w oparciu o bieżące ustawienia języka. Możesz zarejestrować osobny plik dla kategorii zdarzeń, komunikatów i ciągi wstawiania parametru lub można zarejestrować tego samego pliku zasobów dla wszystkich trzech typów ciągów znaków. Użyj <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, i <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> właściwości, aby skonfigurować źródła na zapisywanie wpisów zlokalizowanych w dzienniku zdarzeń. Jeśli aplikacja zapisuje wartości ciągu bezpośrednio do dziennika zdarzeń, nie musisz ustawić te właściwości.  
  
 Źródło musi być skonfigurowany dla zapisywania zlokalizowanego wpisy lub zapisywanie bezpośrednie ciągów. Jeśli aplikacja zapisuje wpisów za pomocą identyfikatorów zasobów i wartości ciągu, należy zarejestrować dwóch oddzielnych źródeł. Na przykład skonfigurować jedno źródło z plikami zasobów, a następnie użyj tego źródła w <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody na zapisywanie wpisów przy użyciu identyfikatorów zasobów w dzienniku zdarzeń. Utwórz inne źródło bez plików zasobów i użyć tego źródła w <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodę, aby zapisać ciągi bezpośrednio do dziennika zdarzeń.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości <xref:System.Diagnostics.EventSourceCreationData>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|`source` Parametru.|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|`logName` Parametru.|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|Komputer lokalny (".").|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|Zero|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` (`Nothing` w języku Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` (`Nothing` w języku Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` (`Nothing` w języku Visual Basic).|  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli nie ma źródła zdarzeń, przykład ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykład kodu ustawia zlokalizowana nazwa wyświetlana dla dziennika zdarzeń, używając wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobów w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dowolny element członkowski wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę kategorii w pliku zasobów kategorii.</summary>
        <value>Liczba kategorii w pliku zasobów kategorii. Wartość domyślna wynosi zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> i <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości, aby zapisać zdarzeń z zlokalizowanych ciągów kategorii. Podgląd zdarzeń wyświetla kategorię dla wpisu zdarzenia, jeśli podasz kategorię podczas zapisywania zdarzenia. Kategorie dziennika zdarzeń są zdefiniowane przez aplikację ciągi znaków, które pomagają filtrowanie zdarzeń lub dostarczyć więcej informacji o zdarzeniu. Na przykład aplikację, można zdefiniować osobne kategorie dla różnych składników lub różnych operacji.  
  
 Kategorie zdarzeń są opcjonalne; Jeśli aplikacja nie korzysta z kategorii, nie należy ustawiać <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> i <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości.  
  
 Aby szczegółowe informacje dotyczące definiowania komunikaty o zdarzeniach i tworzenie plików zasobów dla zdarzeń, zobacz temat "Komunikatów kompilatora" w dokumentacji zestawu SDK platformy, na [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli nie ma źródła zdarzeń, przykład ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykład kodu ustawia zlokalizowana nazwa wyświetlana dla dziennika zdarzeń, używając wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobów w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Właściwość ma wartość ujemną wartość lub wartości większe niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dowolny element członkowski wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę pliku zasobów zawiera ciągi kategorii dla źródła.</summary>
        <value>Ścieżka do pliku zasobów kategorii. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> i <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości, aby zapisać zdarzeń z zlokalizowanych ciągów kategorii. Podgląd zdarzeń wyświetla kategorię dla wpisu zdarzenia, jeśli podasz kategorię podczas zapisywania zdarzenia. Kategorie dziennika zdarzeń są zdefiniowane przez aplikację ciągi znaków, które pomagają filtrowanie zdarzeń lub dostarczyć więcej informacji o zdarzeniu. Na przykład aplikację, można zdefiniować osobne kategorie dla różnych składników lub różnych operacji.  
  
 Kategorie zdarzeń są opcjonalne; Jeśli aplikacja nie korzysta z kategorii, nie należy ustawiać <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> i <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości.  
  
 Aby szczegółowe informacje dotyczące definiowania komunikaty o zdarzeniach i tworzenie plików zasobów dla zdarzeń, zobacz temat "Komunikatów kompilatora" w dokumentacji zestawu SDK platformy, na [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli nie ma źródła zdarzeń, przykład ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykład kodu ustawia zlokalizowana nazwa wyświetlana dla dziennika zdarzeń, używając wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobów w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dowolny element członkowski wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę dziennika zdarzeń, do którego źródło zapisuje wpisów.</summary>
        <value>Nazwa dziennika zdarzeń. Może to być aplikacji, systemu lub nazwa dziennika niestandardowego. Wartość domyślna to "Application".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwość do identyfikacji w dzienniku zdarzeń, że aplikacja zapisuje wpisy do korzystania z nowego źródła. W dzienniku zdarzeń może być dziennika nowego lub istniejącego dziennika. Aplikacje i usługi należy zapisać w dzienniku aplikacji lub dziennik niestandardowy. Sterowniki urządzeń należy zapisać w dzienniku systemu. Jeśli nie zostanie jawnie ustawiona <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwość, jest domyślnie ustawiona w dzienniku zdarzeń w dzienniku aplikacji.  
  
> [!NOTE]
>  Dziennik zabezpieczeń jest tylko do odczytu.  
  
 Aby skierować je do istniejącego dziennika dla nowego źródła, ustaw <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwości istniejącej nazwy dziennika zdarzeń. Aby utworzyć nowy dziennik zdarzeń dla źródła, należy ustawić <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwości. Nazwy dziennika zdarzeń musi składać się z drukowalnych znaków i nie może zawierać znaków ' * ','?', lub "\\". Pierwsze 8 znaków nazwa dziennika zdarzeń musi się różnić od pierwsze 8 znaków nazwy istniejących dzienników zdarzeń na określonym komputerze.  
  
 Dzienniki zdarzeń systemu operacyjnego są przechowywane jako pliki. Kiedy używasz <xref:System.Diagnostics.EventLogInstaller> lub <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodę w celu utworzenia nowego dziennika zdarzeń, skojarzony plik jest przechowywany w katalogu %SystemRoot%\System32\Config na określonym komputerze. Nazwa pliku jest ustawiona, dodając pierwsze 8 znaków <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> właściwości z rozszerzeniem nazwy pliku ".evt".  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia na podstawie argumentów wiersza polecenia. Argumenty wejściowe określ nazwy źródła zdarzeń, nazwa dziennika zdarzeń, nazwy komputera i pliku zasobów komunikatów zdarzeń. W tym przykładzie jest częścią większego przykładu przewidzianego dla <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dowolny element członkowski wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę komputera, na którym chcesz zarejestrować źródła zdarzenia.</summary>
        <value>Nazwa systemu, na którym chcesz zarejestrować źródła zdarzenia. Wartość domyślna to komputer lokalny (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> Wartość nie może być ciągiem pustym. Jeśli nazwa komputera nie jest jawnie ustawiona, wartość domyślna to komputer lokalny (".").  
  
 Podczas rejestrowania źródła na komputerze zdalnym, musi mieć uprawnienia administracyjne na tym komputerze można zapisać wartości rejestru z wystarczającymi uprawnieniami.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia na podstawie argumentów wiersza polecenia. Argumenty wejściowe określ nazwy źródła zdarzeń, nazwa dziennika zdarzeń, nazwy komputera i pliku zasobów komunikatów zdarzeń. W tym przykładzie jest częścią większego przykładu przewidzianego dla <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nazwa komputera jest nieprawidłowa.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dowolny element członkowski wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę pliku zasobów komunikatów, który zawiera komunikat formatowanie ciągów dla źródła.</summary>
        <value>Ścieżka pliku zasobów komunikatów. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwości, aby skonfigurować źródło dziennika zdarzeń do zapisywania komunikatów o zdarzeniach zlokalizowane. Komunikaty o zdarzeniach są zdefiniowanych przez aplikację ciągi znaków, które opisują zdarzenia do użytkownika.  
  
 Aplikację można napisać wpisy dziennika zdarzeń przy użyciu identyfikatorów zasobów. Identyfikator zasobu indeksuje wiadomość na terenie <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>. Podgląd zdarzeń używa identyfikator zasobu, aby znaleźć i wyświetlić odpowiedni ciąg z pliku zasobów zlokalizowanych komunikatów, które są oparte na bieżących ustawień języka.  
  
 Źródło zdarzenia muszą być skonfigurowane dla zapisywania zlokalizowanego wpisy lub zapisywanie bezpośrednie ciągów. Użyj <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody na zapisywanie wpisów zlokalizowane dla źródła skonfigurowany z pliku zasobów komunikatów.  
  
 Jeśli aplikacja zapisuje ciągi komunikatów zdarzeń bezpośrednio, zamiast używania identyfikator zasobu w zlokalizowanego pliku zasobu, nie należy ustawiać <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwości.  
  
 Aby szczegółowe informacje dotyczące definiowania komunikaty o zdarzeniach i tworzenie plików zasobów dla zdarzeń, zobacz temat "Komunikatów kompilatora" w dokumentacji zestawu SDK platformy, na [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli nie ma źródła zdarzeń, przykład ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykład kodu ustawia zlokalizowana nazwa wyświetlana dla dziennika zdarzeń, używając wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobów w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dowolny element członkowski wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ścieżkę pliku zasobu, który zawiera ciągi parametr komunikatów dla źródła.</summary>
        <value>Ścieżka pliku zasobów parametrów. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> właściwości, aby skonfigurować źródło dziennika zdarzeń można zapisać zdarzenia zlokalizowanych komunikatów z wstawiony parametr ciągów. Każdy komunikat zlokalizowane zdarzeń określony w <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwość może zawierać symbole zastępcze ciągi wstawiania. Te symbole zastępcze są używane do określania położenia i identyfikator zasobu ciągu niezależny od języka, w komunikacie zdarzenia. Podgląd zdarzeń wypełnia symbole zastępcze korzystania z odpowiednich ciągów z <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> i formatowania komunikatu dziennika zdarzeń dla wpisu zlokalizowane zdarzeń.  
  
 Na przykład poniższa sekcja pliku tekstowego komunikat definiuje ciąg z symbolem zastępczym parametru:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 W ramach parametru pliku zasobów należy zdefiniować ciągu wstawiania o identyfikatorze zasobu, który odnosi się do symbolu zastępczego, jak pokazano poniżej:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 Źródło zdarzenia muszą być skonfigurowane dla zapisywania zlokalizowanego wpisy lub zapisywanie bezpośrednie ciągów. Użyj <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody na zapisywanie wpisów zlokalizowane dla źródła skonfigurowany z pliku zasobów komunikatów.  
  
 Jeśli aplikacja zapisuje ciągi komunikatów zdarzeń bezpośrednio do dziennika zdarzeń lub z <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> vlastnost Neobsahuje wiadomości z symbolami zastępczymi wstawiania parametru, nie należy ustawiać <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> właściwości.  
  
 Aby szczegółowe informacje dotyczące definiowania komunikaty o zdarzeniach i tworzenie plików zasobów dla zdarzeń, zobacz temat "Komunikatów kompilatora" w dokumentacji zestawu SDK platformy, na [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy źródło zdarzeń o nazwie `SampleApplicationSource` jest zarejestrowana na komputerze lokalnym. Jeśli nie ma źródła zdarzeń, przykład ustawia pliku zasobów komunikatów dla źródła i tworzy nowe źródło zdarzeń. Na koniec przykład kodu ustawia zlokalizowana nazwa wyświetlana dla dziennika zdarzeń, używając wartości identyfikatora zasobu w `DisplayNameMsgId` i ścieżka pliku zasobów w `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru. W szczególności komunikat zdefiniowany dla identyfikatora zasobów organizacji 1004 używa symbol zastępczy dla parametru ciągu zdefiniowane dla identyfikatora zasobów organizacji 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dowolny element członkowski wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę aby zarejestrować się w dzienniku zdarzeń jako źródło zdarzenia.</summary>
        <value>Nazwa do rejestrowania w dzienniku zdarzeń jako źródła wpisów. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa źródła jest często nazwa aplikacji lub nazwą składnika w ramach dużych aplikacji. <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> Metoda używa <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, i <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> właściwości w celu utworzenia wartości rejestru na komputerze docelowym dla nowego źródła i jego skojarzone dziennika zdarzeń. Nowej nazwy źródła nie może dopasować istniejącej nazwy źródła lub istniejącą nazwę dziennika zdarzeń na komputerze docelowym.  
  
 Po utworzeniu wartości rejestru dla źródła, aplikacja może używać źródła na zapisywanie wpisów w dzienniku zdarzeń skonfigurowany.  
  
 Każde źródło mogą zapisywać wyłącznie do jednego dziennika zdarzeń jednocześnie. Jednak aplikacja może używać wielu źródeł do zapisu do wielu dzienników. Na przykład aplikacja może wymagać wielu źródeł, skonfigurowanych dla różnych dziennikach zdarzeń lub plików innego zasobu.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia właściwości konfiguracji dla źródła zdarzenia na podstawie argumentów wiersza polecenia. Argumenty wejściowe określ nazwy źródła zdarzeń, nazwa dziennika zdarzeń, nazwy komputera i pliku zasobów komunikatów zdarzeń. W tym przykładzie jest częścią większego przykładu przewidzianego dla <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dowolny element członkowski wywoływania <see cref="T:System.Diagnostics.EventSourceCreationData" /> z pełnym zaufaniem. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>