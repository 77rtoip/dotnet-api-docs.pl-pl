<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aec193d2b0b192d148a96593d5203aef2cf07f3" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37664385" /></Metadata><TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DataReceivedEventHandler(sender As Object, e As DataReceivedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DataReceivedEventHandler(System::Object ^ sender, DataReceivedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type DataReceivedEventHandler = delegate of obj * DataReceivedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Źródło zdarzenia.</param>
    <param name="e">Element <see cref="T:System.Diagnostics.DataReceivedEventArgs" /> zawierający dane zdarzenia.</param>
    <summary>Reprezentuje metodę, która będzie obsługiwać <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> zdarzeń lub <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> zdarzenia <see cref="T:System.Diagnostics.Process" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu <xref:System.Diagnostics.DataReceivedEventHandler> delegata, możesz zidentyfikować metody, która będzie obsługiwać zdarzenia. Aby skojarzyć zdarzenia z programu obsługi zdarzeń, należy dodać wystąpienie delegata zdarzenia. Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata. Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 Asynchronicznie zbierać przekierowanego <xref:System.Diagnostics.Process.StandardOutput%2A> lub <xref:System.Diagnostics.Process.StandardError%2A> strumienia wyjściowego procesu, należy dodać procedury obsługi zdarzenia do <xref:System.Diagnostics.Process.OutputDataReceived> lub <xref:System.Diagnostics.Process.ErrorDataReceived> zdarzeń. Te zdarzenia są wywoływane w każdym razem, gdy proces zapisuje wiersz do odpowiedniego strumienia przekierowane. Gdy przekierowanego strumień zostanie zamknięty, wiersz o wartości null są wysyłane do programu obsługi zdarzeń. Upewnij się, że procedury obsługi zdarzenia sprawdza ten dodatkowy warunek przed uzyskaniem dostępu do <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> właściwości. Na przykład, można użyć `static` metoda <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> do sprawdzania poprawności <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> właściwość obsługi zdarzenia.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób wykonywania asynchronicznych operacji odczytu na przekierowanym <xref:System.Diagnostics.Process.StandardOutput%2A> strumień **sortowania** polecenia. **Sortowania** polecenie jest aplikacja konsolowa która odczytuje i sortuje wprowadzanie tekstu.  
  
 W przykładzie jest tworzony <xref:System.Diagnostics.DataReceivedEventHandler> delegata dla wszystkich `SortOutputHandler` programu obsługi zdarzeń i skojarzenie delegata z <xref:System.Diagnostics.Process.OutputDataReceived> zdarzeń. Program obsługi zdarzeń odbierze wiersze tekstu z przekierowanego <xref:System.Diagnostics.Process.StandardOutput%2A> strumienia, formatuje tekst i zapisuje tekst na ekranie.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>