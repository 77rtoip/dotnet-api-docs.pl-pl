<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0891c160d3f86199bf8315369d15a3c93174afa7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36675058" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DataReceivedEventHandler(sender As Object, e As DataReceivedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DataReceivedEventHandler(System::Object ^ sender, DataReceivedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type DataReceivedEventHandler = delegate of obj * DataReceivedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Źródło zdarzenia.</param>
    <param name="e">A <see cref="T:System.Diagnostics.DataReceivedEventArgs" /> zawierający dane zdarzenia.</param>
    <summary>Reprezentuje metodę, która będzie obsługiwać <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> zdarzenia lub <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> zdarzenie <see cref="T:System.Diagnostics.Process" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu <xref:System.Diagnostics.DataReceivedEventHandler> delegata, należy określić metodę, która obsłuży zdarzenie. Aby skojarzyć zdarzenie z obsługi zdarzenia, należy dodać wystąpienia delegata zdarzenia. Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata. Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 Asynchronicznie zbierać przekierowanego <xref:System.Diagnostics.Process.StandardOutput%2A> lub <xref:System.Diagnostics.Process.StandardError%2A> strumień wyjściowy procesu, należy dodać obsługi zdarzenia do <xref:System.Diagnostics.Process.OutputDataReceived> lub <xref:System.Diagnostics.Process.ErrorDataReceived> zdarzeń. Te zdarzenia są wywoływane zawsze, gdy proces zapisuje wiersz do odpowiedniego strumienia przekierowane. Gdy przekierowanego strumień jest zamknięty, pustym wierszu są wysyłane do programu obsługi zdarzeń. Upewnij się, obsługi zdarzenia sprawdza przed uzyskaniem dostępu do tego warunku <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> właściwości. Na przykład można użyć `static` metody <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> do sprawdzania poprawności <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> właściwości w obsługi zdarzenia.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono sposób wykonywania asynchronicznych operacji odczytu na przekierowanym <xref:System.Diagnostics.Process.StandardOutput%2A> strumień **sortowania** polecenia. **Sortowania** polecenie jest aplikacja konsolowa, która odczytuje i sortuje wprowadzania tekstu.  
  
 W przykładzie jest tworzony <xref:System.Diagnostics.DataReceivedEventHandler> delegować `SortOutputHandler` obsługi zdarzeń i kojarzy delegata z <xref:System.Diagnostics.Process.OutputDataReceived> zdarzeń. Program obsługi zdarzeń odbiera wierszy tekstu z przekierowanego <xref:System.Diagnostics.Process.StandardOutput%2A> strumienia, formatuje tekst i zapisuje tekst do ekranu.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>