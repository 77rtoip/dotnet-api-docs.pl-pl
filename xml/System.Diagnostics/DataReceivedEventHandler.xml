<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b7aa46fdc138eb94a4175a381ff6f85a4fbb0827" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69076938" /></Metadata><TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DataReceivedEventHandler(sender As Object, e As DataReceivedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DataReceivedEventHandler(System::Object ^ sender, DataReceivedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type DataReceivedEventHandler = delegate of obj * DataReceivedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Źródło zdarzenia.</param>
    <param name="e">A <see cref="T:System.Diagnostics.DataReceivedEventArgs" /> , który zawiera dane zdarzenia.</param>
    <summary>Reprezentuje metodę, która będzie obsługiwać <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> zdarzenie lub <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> zdarzenie <see cref="T:System.Diagnostics.Process" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia <xref:System.Diagnostics.DataReceivedEventHandler> delegata należy określić metodę, która będzie obsługiwać zdarzenie. Aby skojarzyć zdarzenie z programem obsługi zdarzeń, Dodaj wystąpienie delegata do zdarzenia. Program obsługi zdarzeń jest wywoływany przy każdym wystąpieniu zdarzenia, o ile nie usunięto delegata. Aby uzyskać więcej informacji na temat delegatów obsługi zdarzeń, zobacz temat [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 Aby asynchronicznie zbierać dane <xref:System.Diagnostics.Process.StandardOutput%2A> wyjściowe <xref:System.Diagnostics.Process.StandardError%2A> przekierowane lub przesłane przez proces, Dodaj obsługę zdarzeń do <xref:System.Diagnostics.Process.OutputDataReceived> zdarzenia lub <xref:System.Diagnostics.Process.ErrorDataReceived> . Te zdarzenia są wywoływane za każdym razem, gdy proces zapisuje wiersz do odpowiedniego przekierowanego strumienia. Gdy strumień przekierowany zostanie zamknięty, do procedury obsługi zdarzeń jest wysyłany wiersz o wartości null. Upewnij się, że program obsługi zdarzeń sprawdza ten warunek przed uzyskaniem dostępu <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> do właściwości. Można na przykład użyć `static` metody <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> do walidacji <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> właściwości w programie obsługi zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób wykonywania asynchronicznych operacji odczytu w przekierowanym <xref:System.Diagnostics.Process.StandardOutput%2A> strumieniu polecenia **sort** . Polecenie **sort** jest aplikacją konsolową, która odczytuje i sortuje dane wejściowe tekstu.  
  
 Przykład tworzy <xref:System.Diagnostics.DataReceivedEventHandler> delegata `SortOutputHandler` dla programu obsługi zdarzeń i <xref:System.Diagnostics.Process.OutputDataReceived> kojarzy delegata ze zdarzeniem. Program obsługi zdarzeń odbiera wiersze tekstowe z przekierowanego <xref:System.Diagnostics.Process.StandardOutput%2A> strumienia, formatuje tekst i zapisuje tekst na ekranie.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>
