<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ca3ac66cc8f9855372aa92b45a2715f31c5e689c" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63887472" /></Metadata><TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia zestaw metod i właściwości, które służy do dokładnego pomiar czasu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.Stopwatch> wystąpienia można zmierzyć czas jeden interwał lub łączny czas trwania między wieloma odstępach czasu. W typowej <xref:System.Diagnostics.Stopwatch> scenariuszu wywołać <xref:System.Diagnostics.Stopwatch.Start%2A> metody po pewnym czasie wywołania <xref:System.Diagnostics.Stopwatch.Stop%2A> metody, a następnie sprawdź przy użyciu czas <xref:System.Diagnostics.Stopwatch.Elapsed%2A> właściwości.  
  
 A <xref:System.Diagnostics.Stopwatch> wystąpienie jest uruchomiona lub zatrzymana; użyj <xref:System.Diagnostics.Stopwatch.IsRunning%2A> do określenia stanu bieżącej <xref:System.Diagnostics.Stopwatch>. Użyj <xref:System.Diagnostics.Stopwatch.Start%2A> umożliwiającą pomiaru czas, który upłynął; użyj <xref:System.Diagnostics.Stopwatch.Stop%2A> przestanie pomiaru czas, który upłynął. Wartość czasu, przez ustawienie właściwości zapytania <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, lub <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. Właściwości czasu można tworzyć zapytania, gdy wystąpienie jest uruchomiona lub zatrzymana. Właściwości intensywność zwiększyć czas, który upłynął podczas <xref:System.Diagnostics.Stopwatch> jest uruchomiony; pozostają stałe po zatrzymaniu wystąpienia.  
  
 Domyślnie wartość czasu <xref:System.Diagnostics.Stopwatch> wystąpienia jest równa sumie wszystkich przedziałów czasu mierzone. Każde wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> rozpoczyna zliczanie skumulowany czas, jaki upłynął; każde wywołanie <xref:System.Diagnostics.Stopwatch.Stop%2A> kończy bieżącej miary interwału i zawiesza się wartość skumulowany czas, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> metodę, aby wyczyścić skumulowany czas, który upłynął w istniejącym <xref:System.Diagnostics.Stopwatch> wystąpienia.  
  
 <xref:System.Diagnostics.Stopwatch> Mierzy czas, który upłynął od policzenia taktami w podstawowego mechanizmu czasomierza. Jeśli zainstalowany sprzęt i system operacyjny obsługuje licznika wydajności o wysokiej rozdzielczości, a następnie <xref:System.Diagnostics.Stopwatch> klasa używa tego licznika, aby zmierzyć czas, który upłynął. W przeciwnym razie <xref:System.Diagnostics.Stopwatch> klasy używa czasomierza systemu, aby zmierzyć czas, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Frequency> i <xref:System.Diagnostics.Stopwatch.IsHighResolution> pól w celu określenia dokładności i rozpoznawanie <xref:System.Diagnostics.Stopwatch> czasu wykonania.  
  
 <xref:System.Diagnostics.Stopwatch> Klasy pomaga manipulowania liczników wydajności związane z czasu w kodzie zarządzanym. W szczególności <xref:System.Diagnostics.Stopwatch.Frequency> pola i <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> metoda może być używana zamiast niezarządzanych interfejsów API Windows `QueryPerformanceFrequency` i `QueryPerformanceCounter`.  
  
> [!NOTE]
>  Na komputerach wieloprocesorowych nie ma znaczenia, którym procesorze uruchamiane wątku. Jednak z powodu błędów w systemie BIOS lub warstwy abstrakcji sprzętu (HAL), uzyskasz chronometraż różne wyniki na różnych procesorach. Aby określić koligacji procesora dla wątku, należy użyć <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Diagnostics.Stopwatch> klasę, aby określić czas wykonywania dla aplikacji.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 W poniższym przykładzie pokazano użycie <xref:System.Diagnostics.Stopwatch> klasy w celu obliczania danych wydajności.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.Stopwatch" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwrócony <xref:System.Diagnostics.Stopwatch> wystąpienia zostanie zatrzymana, a właściwość czas wystąpienia wynosi zero.  
  
 Użyj <xref:System.Diagnostics.Stopwatch.Start%2A> metodę, aby rozpocząć pomiar czasu przy użyciu nowego <xref:System.Diagnostics.Stopwatch> wystąpienia. Użyj <xref:System.Diagnostics.Stopwatch.StartNew%2A> metodę, aby zainicjować nowe <xref:System.Diagnostics.Stopwatch> wystąpienia i natychmiast ją uruchomić.  
  
   
  
## Examples  
 Poniższy przykład inicjuje <xref:System.Diagnostics.Stopwatch> wystąpienia przy użyciu konstruktora klasy proste.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera całkowity upływ czasu mierzony przez bieżące wystąpienie.</summary>
        <value>Tylko do odczytu <see cref="T:System.TimeSpan" /> reprezentujący całkowity upływ czasu mierzony przez bieżące wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W typowej <xref:System.Diagnostics.Stopwatch> scenariuszu wywołać <xref:System.Diagnostics.Stopwatch.Start%2A> metody po pewnym czasie wywołania <xref:System.Diagnostics.Stopwatch.Stop%2A> metody, a następnie sprawdź przy użyciu czas <xref:System.Diagnostics.Stopwatch.Elapsed%2A> właściwości.  
  
 Użyj <xref:System.Diagnostics.Stopwatch.Elapsed%2A> właściwość służąca do pobierania czasu wartość, przy użyciu <xref:System.TimeSpan> metody i właściwości. Na przykład można sformatować zwracanego <xref:System.TimeSpan> wystąpienia na reprezentację tekstową lub przekazać je do innej klasy, która wymaga <xref:System.TimeSpan> parametru.  
  
 Możesz zbadać właściwości <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, i <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> podczas <xref:System.Diagnostics.Stopwatch> wystąpienie jest uruchomiona lub zatrzymana. Właściwości intensywność zwiększyć czas, który upłynął podczas <xref:System.Diagnostics.Stopwatch> jest uruchomiony; pozostają stałe po zatrzymaniu wystąpienia.  
  
 Domyślnie wartość czasu <xref:System.Diagnostics.Stopwatch> wystąpienia jest równa sumie wszystkich przedziałów czasu mierzone. Każde wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> rozpoczyna zliczanie skumulowany czas, jaki upłynął; każde wywołanie <xref:System.Diagnostics.Stopwatch.Stop%2A> kończy bieżącej miary interwału i zawiesza się wartość skumulowany czas, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> metodę, aby wyczyścić skumulowany czas, który upłynął w istniejącym <xref:System.Diagnostics.Stopwatch> wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Diagnostics.Stopwatch.Elapsed%2A> własność, aby określić czas wykonywania dla aplikacji.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera całkowity upływ czasu mierzony przez bieżące wystąpienie, w milisekundach.</summary>
        <value>Tylko do odczytu liczba całkowita typu long reprezentujący całkowitą liczbę milisekund, mierzone przez bieżące wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość reprezentuje zaokrąglone w dół do najbliższej wartości milisekund cały czas, który upłynął. W przypadku wyższych dokładności pomiarów, użyj <xref:System.Diagnostics.Stopwatch.Elapsed%2A> lub <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> właściwości.  
  
 Możesz zbadać właściwości <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, i <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> podczas <xref:System.Diagnostics.Stopwatch> wystąpienie jest uruchomiona lub zatrzymana. Właściwości intensywność zwiększyć czas, który upłynął podczas <xref:System.Diagnostics.Stopwatch> jest uruchomiony; pozostają stałe po zatrzymaniu wystąpienia.  
  
 Domyślnie wartość czasu <xref:System.Diagnostics.Stopwatch> wystąpienia jest równa sumie wszystkich przedziałów czasu mierzone. Każde wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> rozpoczyna zliczanie skumulowany czas, jaki upłynął; każde wywołanie <xref:System.Diagnostics.Stopwatch.Stop%2A> kończy bieżącej miary interwału i zawiesza się wartość skumulowany czas, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> metodę, aby wyczyścić skumulowany czas, który upłynął w istniejącym <xref:System.Diagnostics.Stopwatch> wystąpienia.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Diagnostics.Stopwatch> klasy do pomiaru wydajności cztery różne implementacje do analizowania liczbą całkowitą z ciągu. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera całkowity upływ czasu mierzony przez bieżące wystąpienie taktami.</summary>
        <value>Tylko do odczytu długa liczba całkowita reprezentująca łączną liczbę taktów czasomierza, mierzone przez bieżące wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość reprezentuje liczbę znaczników upłynęło w podstawowego mechanizmu czasomierza. Znacznik jest najmniejsza jednostka czasu, <xref:System.Diagnostics.Stopwatch> mierzyć czasomierza. Użyj <xref:System.Diagnostics.Stopwatch.Frequency> pola, aby przekonwertować <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> wartości na liczbę sekund.  
  
 Możesz zbadać właściwości <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, i <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> podczas <xref:System.Diagnostics.Stopwatch> wystąpienie jest uruchomiona lub zatrzymana. Właściwości intensywność zwiększyć czas, który upłynął podczas <xref:System.Diagnostics.Stopwatch> jest uruchomiony; pozostają stałe po zatrzymaniu wystąpienia.  
  
 Domyślnie wartość czasu <xref:System.Diagnostics.Stopwatch> wystąpienia jest równa sumie wszystkich przedziałów czasu mierzone. Każde wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> rozpoczyna zliczanie skumulowany czas, jaki upłynął; każde wywołanie <xref:System.Diagnostics.Stopwatch.Stop%2A> kończy bieżącej miary interwału i zawiesza się wartość skumulowany czas, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> metodę, aby wyczyścić skumulowany czas, który upłynął w istniejącym <xref:System.Diagnostics.Stopwatch> wystąpienia.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch> znaczniki różnią się od <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>. Każdy takt w <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> wartość reprezentuje jeden przedział 100-nanosekundowych. Każdy takt w <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> wartość reprezentuje przedział czasu równy 1 sekundę podzielona przez <xref:System.Diagnostics.Stopwatch.Frequency>.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Diagnostics.Stopwatch> klasy do pomiaru wydajności cztery różne implementacje do analizowania liczbą całkowitą z ciągu. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera częstotliwość czasomierza jako liczba impulsów na sekundę. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Częstotliwość czasomierza wskazuje czasomierza dokładności i rozwiązanie. Na przykład czasomierz częstotliwości równej 2 miliony znaczniki na drugim jest równa rozdzielczości czasomierza 500 nanosekundach na jednostkę skali. Innymi słowy ponieważ jedna sekunda jest równa 1 miliard nanosekundach, czasomierz częstotliwości równej 2 miliony impulsów na sekundę jest odpowiednikiem impulsów 2 miliony na 1 miliard nanosekundach, które może być dodatkowo uproszczona 1 znaczników na 500 nanosekundach.  
  
 <xref:System.Diagnostics.Stopwatch.Frequency> Wartość zależy od rozdzielczości podstawowego mechanizmu chronometrażu. Jeśli zainstalowany sprzęt i system operacyjny obsługuje licznika wydajności o wysokiej rozdzielczości, a następnie <xref:System.Diagnostics.Stopwatch.Frequency> wartość odzwierciedla częstotliwość tego licznika. W przeciwnym razie <xref:System.Diagnostics.Stopwatch.Frequency> wartość zależy od częstotliwości czasomierza systemu.  
  
 Ponieważ <xref:System.Diagnostics.Stopwatch> częstotliwość zależy od zainstalowanego sprzętu i systemu operacyjnego, <xref:System.Diagnostics.Stopwatch.Frequency> wartość pozostaje stała, gdy system jest uruchomiony.  
  
   
  
## Examples  
 Poniższy przykład przedstawia częstotliwość i rozpoznawanie <xref:System.Diagnostics.Stopwatch> czasomierza. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera bieżącą liczbę taktów w mechanizmie czasomierza.</summary>
        <returns>Liczba całkowita typu long reprezentujący wartość licznika znaczników podstawowego mechanizmu czasomierza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Diagnostics.Stopwatch> klasa używa licznika wydajności o wysokiej rozdzielczości, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> zwraca bieżącą wartość tego licznika. Jeśli <xref:System.Diagnostics.Stopwatch> klasa używa czasomierz systemowy <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> zwraca bieżącą <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> właściwość <xref:System.DateTime.Now%2A?displayProperty=nameWithType> wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> metodę, aby zaktualizować licznika wydajności.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy czasomierz opiera się na licznik wydajności o wysokiej rozdzielczości. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasomierz posługują się <xref:System.Diagnostics.Stopwatch> klasy jest zależna od sprzętu i systemu operacyjnego. <xref:System.Diagnostics.Stopwatch.IsHighResolution> jest `true` Jeśli <xref:System.Diagnostics.Stopwatch> czasomierza opiera się na licznik wydajności o wysokiej rozdzielczości. W przeciwnym razie <xref:System.Diagnostics.Stopwatch.IsHighResolution> jest `false`, który wskazuje, że <xref:System.Diagnostics.Stopwatch> czasomierza jest oparty na zegarze systemowym.  
  
   
  
## Examples  
 Poniższy przykład przedstawia częstotliwość i rozpoznawanie <xref:System.Diagnostics.Stopwatch> czasomierza. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Diagnostics.Stopwatch" /> czasomierza jest uruchomiona.</summary>
        <value><see langword="true" /> Jeśli <see cref="T:System.Diagnostics.Stopwatch" /> wystąpienie jest obecnie uruchomiony i pomiaru czas trwania dla interwału; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.Stopwatch> wystąpienia zaczyna się z wywołaniem <xref:System.Diagnostics.Stopwatch.Start%2A> lub <xref:System.Diagnostics.Stopwatch.StartNew%2A>. Zatrzymuje wystąpienie z wywołania <xref:System.Diagnostics.Stopwatch.Stop%2A> lub <xref:System.Diagnostics.Stopwatch.Reset%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatrzymuje pomiaru interwału czasu i resetuje czas, jaki upłynął od zera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.Stopwatch> wystąpienia oblicza i przechowuje skumulowany czas, który upłynął między wieloma odstępach czasu, dopóki nie zostanie zresetowane wystąpienia. Użyj <xref:System.Diagnostics.Stopwatch.Stop%2A> zatrzymać bieżącej miary interwału i zachować wartość skumulowany czas, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> Aby zatrzymać wszystkie miary interwału w toku i wyczyszczenie tej wartości czasu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatrzymuje pomiaru interwał czasu, resetuje czas, jaki upłynął od zera. i rozpoczyna się pomiar czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.Stopwatch> wystąpienia oblicza i przechowuje skumulowany czas, który upłynął między wieloma odstępach czasu, aż resetowania lub ponownym uruchomieniu wystąpienia. Użyj <xref:System.Diagnostics.Stopwatch.Stop%2A> zatrzymać bieżącej miary interwału i zachować wartość skumulowany czas, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> Aby zatrzymać wszystkie miary interwału w toku i wyczyszczenie tej wartości czasu. Użyj <xref:System.Diagnostics.Stopwatch.Restart%2A> można uruchamiać i zatrzymywać bieżącej miary interwału nowej miary interwału.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna się lub wznawia, pomiaru czas trwania dla interwału.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W typowej <xref:System.Diagnostics.Stopwatch> scenariuszu wywołać <xref:System.Diagnostics.Stopwatch.Start%2A> metody po pewnym czasie wywołania <xref:System.Diagnostics.Stopwatch.Stop%2A> metody, a następnie sprawdź przy użyciu czas <xref:System.Diagnostics.Stopwatch.Elapsed%2A> właściwości.  
  
 Po uruchomieniu <xref:System.Diagnostics.Stopwatch> czasomierza mierzy bieżący interwał, w upłynęło taktami, do momentu wystąpienia jest zatrzymana lub przywrócenia. Uruchamianie <xref:System.Diagnostics.Stopwatch> oznacza to już uruchomione nie zmieniają stan czasomierza lub zresetować właściwości czas, który upłynął.  
  
 Gdy <xref:System.Diagnostics.Stopwatch> wystąpienia mierzy więcej niż jeden interwał <xref:System.Diagnostics.Stopwatch.Start%2A> metoda wznawia pomiaru czasu niż bieżąca wartość czasu. A <xref:System.Diagnostics.Stopwatch> wystąpienia oblicza i przechowuje skumulowany czas, który upłynął między wieloma odstępach czasu, dopóki nie zostanie zresetowane wystąpienia. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> metoda przed wywołaniem <xref:System.Diagnostics.Stopwatch.Start%2A> wyczyść skumulowany czas, który upłynął w <xref:System.Diagnostics.Stopwatch> wystąpienia. Użyj <xref:System.Diagnostics.Stopwatch.Restart%2A> metody <xref:System.Diagnostics.Stopwatch.Reset%2A> i <xref:System.Diagnostics.Stopwatch.Start%2A> <xref:System.Diagnostics.Stopwatch> za pomocą jednego polecenia.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Diagnostics.Stopwatch.Start%2A> metodę, aby uruchomić czasomierza, który mierzy czasy wykonania aplikacji.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.Stopwatch" /> wystąpienia, ustawia właściwość czas, który upłynął od zera i rozpoczyna się pomiaru czas, który upłynął.</summary>
        <returns>A <see cref="T:System.Diagnostics.Stopwatch" /> , po prostu rozpoczął pomiaru czas, który upłynął.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest równoważne z wywoływaniem <xref:System.Diagnostics.Stopwatch> konstruktora, a następnie wywołując <xref:System.Diagnostics.Stopwatch.Start%2A> w nowym wystąpieniu.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Diagnostics.Stopwatch> klasy do pomiaru wydajności cztery różne implementacje do analizowania liczbą całkowitą z ciągu. Ten przykład kodu jest częścią większego przykładu przewidzianego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatrzymuje pomiaru czas trwania dla interwału.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W typowej <xref:System.Diagnostics.Stopwatch> scenariuszu wywołać <xref:System.Diagnostics.Stopwatch.Start%2A> metody po pewnym czasie wywołania <xref:System.Diagnostics.Stopwatch.Stop%2A> metody, a następnie sprawdź przy użyciu czas <xref:System.Diagnostics.Stopwatch.Elapsed%2A> właściwości.  
  
 <xref:System.Diagnostics.Stopwatch.Stop%2A> Metoda kończy się bieżący pomiar interwał czasu. Zatrzymywanie <xref:System.Diagnostics.Stopwatch> czyli nieuruchomiona nie zmieniają stan czasomierza lub zresetować właściwości czas, który upłynął.  
  
 Gdy <xref:System.Diagnostics.Stopwatch> wystąpienia mierzy więcej niż jeden interwał <xref:System.Diagnostics.Stopwatch.Stop%2A> metoda jest równoważna wstrzymywanie pomiaru czas, który upłynął. Kolejne wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> wznawia pomiaru czasu niż bieżąca wartość czasu. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> metodę, aby wyczyścić skumulowany czas, który upłynął w <xref:System.Diagnostics.Stopwatch> wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Diagnostics.Stopwatch.Stop%2A> metodę, aby zatrzymać czasomierz, który mierzy czasy wykonania aplikacji.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>