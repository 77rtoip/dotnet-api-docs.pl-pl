<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56c730333d780971f7e47e4ba34ae4aaf2551d23" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69252716" /></Metadata><TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <TypeSignature Language="F#" Value="type Stopwatch = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera zestaw metod i właściwości, których można użyć do dokładnego mierzenia czasu, który upłynął.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Stopwatch> Wystąpienie może mierzyć czas trwania jednego interwału lub łączny czas, który upłynął w wielu interwałach. W typowym <xref:System.Diagnostics.Stopwatch> scenariuszu należy <xref:System.Diagnostics.Stopwatch.Start%2A> wywołać metodę <xref:System.Diagnostics.Stopwatch.Stop%2A> , a następnie wywołać metodę, a <xref:System.Diagnostics.Stopwatch.Elapsed%2A> następnie sprawdzić czas, który upłynął, przy użyciu właściwości.  
  
 Wystąpienie jest uruchomione lub zatrzymane; Użyj <xref:System.Diagnostics.Stopwatch.IsRunning%2A> , aby określić bieżący stan <xref:System.Diagnostics.Stopwatch>. <xref:System.Diagnostics.Stopwatch> Użyj <xref:System.Diagnostics.Stopwatch.Start%2A> , aby rozpocząć pomiar czasu, który upłynął <xref:System.Diagnostics.Stopwatch.Stop%2A> ; Użyj, aby zatrzymać pomiar czasu, który upłynął. Zbadaj wartość czasu, który upłynął, za <xref:System.Diagnostics.Stopwatch.Elapsed%2A>pomocą <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>właściwości, <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>lub. Można badać właściwości czasu, który upłynął, gdy wystąpienie jest uruchomione lub zatrzymane. Właściwości czasu, który upłynął, są stale zwiększane <xref:System.Diagnostics.Stopwatch> , gdy jest uruchomiona; pozostają stałe, gdy wystąpienie zostanie zatrzymane.  
  
 Domyślnie wartość <xref:System.Diagnostics.Stopwatch> czasu wystąpienia jest równa sumie wszystkich mierzonych interwałów czasu. Każde wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> rozpoczyna zliczanie w łącznym czasie, który upłynął; każde wywołanie <xref:System.Diagnostics.Stopwatch.Stop%2A> powoduje zakończenie bieżącego pomiaru interwału i zawieszanie łącznej wartości czasu, który upłynął. Użyj metody, aby wyczyścić łączny czas, który upłynął w istniejącym <xref:System.Diagnostics.Stopwatch> wystąpieniu. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
 <xref:System.Diagnostics.Stopwatch> Miary czasu, który upłynął, zlicza Takty czasomierza w podstawowym mechanizmie czasomierza. Jeśli zainstalowany sprzęt i system operacyjny obsługują licznik wydajności o wysokiej rozdzielczości, <xref:System.Diagnostics.Stopwatch> Klasa używa tego licznika do mierzenia czasu, który upłynął. W przeciwnym razie Klasa używa czasomierza systemowego do mierzenia czasu, który upłynął. <xref:System.Diagnostics.Stopwatch> Użyj pól <xref:System.Diagnostics.Stopwatch.IsHighResolution> <xref:System.Diagnostics.Stopwatch> i, aby określić precyzję i rozdzielczość implementacji chronometrażu. <xref:System.Diagnostics.Stopwatch.Frequency>  
  
 <xref:System.Diagnostics.Stopwatch> Klasa wspiera manipulowanie licznikami wydajności związanymi z chronometrażem w kodzie zarządzanym. W tym <xref:System.Diagnostics.Stopwatch.Frequency> celu można użyć <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> pola i metody zamiast niezarządzanych interfejsów API `QueryPerformanceFrequency` systemu Windows i `QueryPerformanceCounter`.  
  
> [!NOTE]
>  Na komputerze wieloprocesorowym nie ma znaczenia, na którym procesorze działa wątek. Jednak ze względu na błędy w systemie BIOS lub warstwę abstrakcji sprzętu (HAL) można uzyskać różne wyniki chronometrażu na różnych procesorach. Aby określić koligację procesora dla wątku, użyj <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Diagnostics.Stopwatch> klasy w celu określenia czasu wykonywania aplikacji.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 Poniższy przykład ilustruje użycie <xref:System.Diagnostics.Stopwatch> klasy do obliczania danych wydajności.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.Stopwatch" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwrócone <xref:System.Diagnostics.Stopwatch> wystąpienie zostało zatrzymane, a właściwość czas, który upłynął, ma wartość zero.  
  
 Użyj metody <xref:System.Diagnostics.Stopwatch.Start%2A> , aby rozpocząć pomiar czasu, który upłynął, z <xref:System.Diagnostics.Stopwatch> nowym wystąpieniem. Użyj metody, aby zainicjować nowe <xref:System.Diagnostics.Stopwatch> wystąpienie i od razu je uruchomić. <xref:System.Diagnostics.Stopwatch.StartNew%2A>  
  
   
  
## Examples  
 Poniższy przykład inicjuje <xref:System.Diagnostics.Stopwatch> wystąpienie przy użyciu prostego konstruktora klasy.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Elapsed : TimeSpan" Usage="System.Diagnostics.Stopwatch.Elapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera łączny czas, który upłynął, mierzony przez bieżące wystąpienie.</summary>
        <value>Tylko <see cref="T:System.TimeSpan" /> do odczytu reprezentujący łączny czas, który upłynął, mierzony przez bieżące wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W typowym <xref:System.Diagnostics.Stopwatch> scenariuszu należy <xref:System.Diagnostics.Stopwatch.Start%2A> wywołać metodę <xref:System.Diagnostics.Stopwatch.Stop%2A> , a następnie wywołać metodę, a <xref:System.Diagnostics.Stopwatch.Elapsed%2A> następnie sprawdzić czas, który upłynął, przy użyciu właściwości.  
  
 Użyj właściwości, aby pobrać wartość czasu, który upłynął przy <xref:System.TimeSpan> użyciu metod i właściwości. <xref:System.Diagnostics.Stopwatch.Elapsed%2A> Na przykład, można sformatować zwrócone <xref:System.TimeSpan> wystąpienie jako reprezentację tekstową lub przekazać je do innej klasy, która <xref:System.TimeSpan> wymaga parametru.  
  
 Można wykonywać zapytania dotyczące właściwości <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, a <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> gdy <xref:System.Diagnostics.Stopwatch> wystąpienie jest uruchomione lub zatrzymane. Właściwości czasu, który upłynął, są stale zwiększane <xref:System.Diagnostics.Stopwatch> , gdy jest uruchomiona; pozostają stałe, gdy wystąpienie zostanie zatrzymane.  
  
 Domyślnie wartość <xref:System.Diagnostics.Stopwatch> czasu wystąpienia jest równa sumie wszystkich mierzonych interwałów czasu. Każde wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> rozpoczyna zliczanie w łącznym czasie, który upłynął; każde wywołanie <xref:System.Diagnostics.Stopwatch.Stop%2A> powoduje zakończenie bieżącego pomiaru interwału i zawieszanie łącznej wartości czasu, który upłynął. Użyj metody, aby wyczyścić łączny czas, który upłynął w istniejącym <xref:System.Diagnostics.Stopwatch> wystąpieniu. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Diagnostics.Stopwatch.Elapsed%2A> właściwości, aby określić czas wykonywania aplikacji.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedMilliseconds : int64" Usage="System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera łączny czas, który upłynął, mierzony przez bieżące wystąpienie (w milisekundach).</summary>
        <value>Długa liczba całkowita tylko do odczytu reprezentująca łączną liczbę milisekund mierzoną przez bieżące wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość reprezentuje czas, który upłynął w dół do najbliższej wartości całkowitej milisekundy. Aby uzyskać więcej pomiarów dokładności, użyj <xref:System.Diagnostics.Stopwatch.Elapsed%2A> właściwości <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> lub.  
  
 Można wykonywać zapytania dotyczące właściwości <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, a <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> gdy <xref:System.Diagnostics.Stopwatch> wystąpienie jest uruchomione lub zatrzymane. Właściwości czasu, który upłynął, są stale zwiększane <xref:System.Diagnostics.Stopwatch> , gdy jest uruchomiona; pozostają stałe, gdy wystąpienie zostanie zatrzymane.  
  
 Domyślnie wartość <xref:System.Diagnostics.Stopwatch> czasu wystąpienia jest równa sumie wszystkich mierzonych interwałów czasu. Każde wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> rozpoczyna zliczanie w łącznym czasie, który upłynął; każde wywołanie <xref:System.Diagnostics.Stopwatch.Stop%2A> powoduje zakończenie bieżącego pomiaru interwału i zawieszanie łącznej wartości czasu, który upłynął. Użyj metody, aby wyczyścić łączny czas, który upłynął w istniejącym <xref:System.Diagnostics.Stopwatch> wystąpieniu. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Diagnostics.Stopwatch> klasy do mierzenia wydajności czterech różnych implementacji do analizowania liczby całkowitej z ciągu. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ElapsedTicks : int64" Usage="System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera łączny czas, który upłynął, mierzony przez bieżące wystąpienie w taktach czasomierza.</summary>
        <value>Długa liczba całkowita tylko do odczytu reprezentująca łączną liczbę taktów czasomierza mierzonych przez bieżące wystąpienie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość reprezentuje liczbę cykli, które upłynęły w podstawowym mechanizmie czasomierza. Cykl jest najmniejszą jednostką czasu, jaką <xref:System.Diagnostics.Stopwatch> może mierzyć czasomierz. Użyj pola <xref:System.Diagnostics.Stopwatch.Frequency> , aby <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> przekonwertować wartość na liczbę sekund.  
  
 Można wykonywać zapytania dotyczące właściwości <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, a <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> gdy <xref:System.Diagnostics.Stopwatch> wystąpienie jest uruchomione lub zatrzymane. Właściwości czasu, który upłynął, są stale zwiększane <xref:System.Diagnostics.Stopwatch> , gdy jest uruchomiona; pozostają stałe, gdy wystąpienie zostanie zatrzymane.  
  
 Domyślnie wartość <xref:System.Diagnostics.Stopwatch> czasu wystąpienia jest równa sumie wszystkich mierzonych interwałów czasu. Każde wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> rozpoczyna zliczanie w łącznym czasie, który upłynął; każde wywołanie <xref:System.Diagnostics.Stopwatch.Stop%2A> powoduje zakończenie bieżącego pomiaru interwału i zawieszanie łącznej wartości czasu, który upłynął. Użyj metody, aby wyczyścić łączny czas, który upłynął w istniejącym <xref:System.Diagnostics.Stopwatch> wystąpieniu. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch>Takty różnią się <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>od. Każdy takt <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> wartości reprezentuje interwał 1 100-nanosekund. Każdy znacznik w <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> wartości reprezentuje przedział czasu równy 1 sekundy podzielony <xref:System.Diagnostics.Stopwatch.Frequency>przez.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Diagnostics.Stopwatch> klasy do mierzenia wydajności czterech różnych implementacji do analizowania liczby całkowitej z ciągu. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberSignature Language="F#" Value=" staticval mutable Frequency : int64" Usage="System.Diagnostics.Stopwatch.Frequency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera częstotliwość czasomierza jako liczbę taktów na sekundę. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Częstotliwość czasomierza wskazuje precyzję i rozdzielczość czasomierza. Na przykład częstotliwość czasomierza 2 000 000 taktów na sekundę jest równa rozdzielczości czasomierza 500 nanosekund na Tick. Innymi słowy, ponieważ jedna sekunda jest równa 1 000 000 000 nanosekund, częstotliwość czasomierza 2 000 000 Takty na sekundę jest równoważna z 2 000 000 taktów na 1 000 000 000 nanosekund, co może być bardziej uproszczone w 1 taktie 500 na liczbę nanosekund.  
  
 <xref:System.Diagnostics.Stopwatch.Frequency> Wartość zależy od rozdzielczości podstawowego mechanizmu chronometrażu. Jeśli zainstalowany sprzęt i system operacyjny obsługują licznik wydajności o wysokiej rozdzielczości, <xref:System.Diagnostics.Stopwatch.Frequency> wartość ta będzie odzwierciedlać częstotliwość tego licznika. W przeciwnym razie wartość jest określana na podstawie częstotliwości czasomierza systemu. <xref:System.Diagnostics.Stopwatch.Frequency>  
  
 Ponieważ częstotliwość zależy od zainstalowanego sprzętu i systemu operacyjnego <xref:System.Diagnostics.Stopwatch.Frequency> , wartość pozostaje stała, gdy system jest uruchomiony. <xref:System.Diagnostics.Stopwatch>  
  
   
  
## Examples  
 Poniższy przykład przedstawia częstotliwość i rozdzielczość <xref:System.Diagnostics.Stopwatch> czasomierza. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberSignature Language="F#" Value="static member GetTimestamp : unit -&gt; int64" Usage="System.Diagnostics.Stopwatch.GetTimestamp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera bieżącą liczbę znaczników w mechanizmie czasomierza.</summary>
        <returns>Długa liczba całkowita reprezentująca wartość licznika podstawowego mechanizmu czasomierza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli Klasa używa licznika wydajności o wysokiej rozdzielczości, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> zwraca bieżącą wartość tego licznika. <xref:System.Diagnostics.Stopwatch> Jeśli Klasa używa czasomierza systemowego, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> zwraca bieżącą <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> Właściwość <xref:System.DateTime.Now%2A?displayProperty=nameWithType> wystąpienia. <xref:System.Diagnostics.Stopwatch>  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> metody do aktualizowania licznika wydajności.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHighResolution : bool" Usage="System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy czasomierz jest oparty na liczniku wydajności o wysokiej rozdzielczości. To pole jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasomierz używany przez <xref:System.Diagnostics.Stopwatch> klasę zależy od sprzętu systemowego i systemu operacyjnego. <xref:System.Diagnostics.Stopwatch.IsHighResolution>`true` czyczasomierzjestopartynaliczniku<xref:System.Diagnostics.Stopwatch> wydajności o wysokiej rozdzielczości. W przeciwnym razie `false` <xref:System.Diagnostics.Stopwatch.IsHighResolution> jest<xref:System.Diagnostics.Stopwatch> , co oznacza, że czasomierz jest oparty na czasomierzu systemowym.  
  
   
  
## Examples  
 Poniższy przykład przedstawia częstotliwość i rozdzielczość <xref:System.Diagnostics.Stopwatch> czasomierza. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Diagnostics.Stopwatch.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, <see cref="T:System.Diagnostics.Stopwatch" /> czy czasomierz jest uruchomiony.</summary>
        <value><see langword="true" />Jeśli wystąpienie jest aktualnie uruchomione i mierzy czas, który upłynął dla interwału; w przeciwnym razie, <see langword="false" />. <see cref="T:System.Diagnostics.Stopwatch" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie zaczyna działać z <xref:System.Diagnostics.Stopwatch.Start%2A> wywołaniem lub <xref:System.Diagnostics.Stopwatch.StartNew%2A>. <xref:System.Diagnostics.Stopwatch> Wystąpienie przestaje działać z wywołaniem <xref:System.Diagnostics.Stopwatch.Stop%2A> lub. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stopwatch.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wyłącza pomiar interwału czasu i resetuje czas, który upłynął, do zera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Stopwatch> Wystąpienie oblicza i zachowuje łączny czas, który upłynął w wielu przedziałach czasu, aż do momentu zresetowania wystąpienia. Użyj <xref:System.Diagnostics.Stopwatch.Stop%2A> , aby zatrzymać bieżącą miarę interwału i zachować łączny czas, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> , aby zatrzymać pomiar interwału w toku i wyczyścić wartość czasu, który upłynął.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberSignature Language="F#" Value="member this.Restart : unit -&gt; unit" Usage="stopwatch.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje zatrzymanie pomiaru interwału czasu, resetowanie czasu, który upłynął, i rozpoczęcie pomiaru czasu, który upłynął.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Stopwatch> Wystąpienie oblicza i zachowuje łączny czas, który upłynął w wielu przedziałach czasu, dopóki wystąpienie nie zostanie zresetowane lub uruchomione ponownie. Użyj <xref:System.Diagnostics.Stopwatch.Stop%2A> , aby zatrzymać bieżącą miarę interwału i zachować łączny czas, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Reset%2A> , aby zatrzymać pomiar interwału w toku i wyczyścić wartość czasu, który upłynął. Użyj <xref:System.Diagnostics.Stopwatch.Restart%2A> , aby zatrzymać bieżącą miarę interwału i rozpocząć nową miarę interwału.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="stopwatch.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia lub wznawia pomiar czasu, który upłynął dla interwału.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W typowym <xref:System.Diagnostics.Stopwatch> scenariuszu należy <xref:System.Diagnostics.Stopwatch.Start%2A> wywołać metodę <xref:System.Diagnostics.Stopwatch.Stop%2A> , a następnie wywołać metodę, a <xref:System.Diagnostics.Stopwatch.Elapsed%2A> następnie sprawdzić czas, który upłynął, przy użyciu właściwości.  
  
 Po uruchomieniu <xref:System.Diagnostics.Stopwatch> czasomierz mierzy bieżący interwał w taktach czasomierza, dopóki wystąpienie nie zostanie zatrzymane lub zresetowane. <xref:System.Diagnostics.Stopwatch> Uruchomienie, które jest już uruchomione, nie powoduje zmiany stanu czasomierza ani zresetowania właściwości czasu, który upłynął.  
  
 Gdy wystąpienie mierzy więcej niż jeden interwał <xref:System.Diagnostics.Stopwatch.Start%2A> , Metoda wznawia pomiar czasu z bieżącej wartości czasu, który upłynął. <xref:System.Diagnostics.Stopwatch> <xref:System.Diagnostics.Stopwatch> Wystąpienie oblicza i zachowuje łączny czas, który upłynął w wielu przedziałach czasu, aż do momentu zresetowania wystąpienia. Użyj metody przed wywołaniem <xref:System.Diagnostics.Stopwatch.Start%2A> , aby wyczyścić łączny czas, <xref:System.Diagnostics.Stopwatch> który upłynął w wystąpieniu. <xref:System.Diagnostics.Stopwatch.Reset%2A> <xref:System.Diagnostics.Stopwatch.Restart%2A> Użyj metodyz<xref:System.Diagnostics.Stopwatch.Start%2A> i z<xref:System.Diagnostics.Stopwatch> pojedynczym poleceniem. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Diagnostics.Stopwatch.Start%2A> metody do uruchomienia czasomierza, który mierzy czas wykonywania aplikacji.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberSignature Language="F#" Value="static member StartNew : unit -&gt; System.Diagnostics.Stopwatch" Usage="System.Diagnostics.Stopwatch.StartNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe <see cref="T:System.Diagnostics.Stopwatch" /> wystąpienie, ustawia właściwość czas, który upłynął, i rozpoczyna pomiar czasu, który upłynął.</summary>
        <returns><see cref="T:System.Diagnostics.Stopwatch" /> , Który właśnie rozpoczął pomiar czasu, który upłynął.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest równoważna wywołaniu <xref:System.Diagnostics.Stopwatch> konstruktora, a następnie wywołując <xref:System.Diagnostics.Stopwatch.Start%2A> na nowym wystąpieniu.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Diagnostics.Stopwatch> klasy do mierzenia wydajności czterech różnych implementacji do analizowania liczby całkowitej z ciągu. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.Stopwatch> klasy.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="stopwatch.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wyłącza pomiar czasu, który upłynął dla interwału.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W typowym <xref:System.Diagnostics.Stopwatch> scenariuszu należy <xref:System.Diagnostics.Stopwatch.Start%2A> wywołać metodę <xref:System.Diagnostics.Stopwatch.Stop%2A> , a następnie wywołać metodę, a <xref:System.Diagnostics.Stopwatch.Elapsed%2A> następnie sprawdzić czas, który upłynął, przy użyciu właściwości.  
  
 <xref:System.Diagnostics.Stopwatch.Stop%2A> Metoda Zatrzymuje bieżący pomiar interwału czasu. <xref:System.Diagnostics.Stopwatch> Zatrzymanie, która nie jest uruchomiona, nie powoduje zmiany stanu czasomierza ani zresetowania właściwości czasu, który upłynął.  
  
 Gdy wystąpienie mierzy więcej niż jeden interwał <xref:System.Diagnostics.Stopwatch.Stop%2A> , metoda jest równoważna wstrzymaniu pomiaru czasu, który upłynął. <xref:System.Diagnostics.Stopwatch> Kolejne wywołanie <xref:System.Diagnostics.Stopwatch.Start%2A> wznawia pomiar czasu z bieżącej wartości czasu, który upłynął. Użyj metody, aby wyczyścić łączny czas, który upłynął <xref:System.Diagnostics.Stopwatch> w wystąpieniu. <xref:System.Diagnostics.Stopwatch.Reset%2A>  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia <xref:System.Diagnostics.Stopwatch.Stop%2A> metody do zatrzymania czasomierza, który mierzy czas wykonywania aplikacji.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>
