<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4f93dfb53d27c243869ea739d2f5826b932f8fe" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69076962" /></Metadata><TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Kieruje śledzenie lub debugowanie danych wyjściowych do standardowego wyjścia lub standardowego strumienia błędów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.ConsoleTraceListener> Użyj klasy do zapisywania komunikatów śledzenia i debugowania w konsoli programu. Można zainicjować <xref:System.Diagnostics.ConsoleTraceListener> obiekt, aby pisać komunikaty śledzenia <xref:System.Console.Out%2A?displayProperty=nameWithType> do strumienia lub <xref:System.Console.Error%2A?displayProperty=nameWithType> strumienia.  
  
> [!IMPORTANT]
>  <xref:System.IDisposable>interfejsu. Po zakończeniu korzystania z typu należy usunąć jego wartość bezpośrednio lub pośrednio. Aby usunąć typ bezpośrednio <xref:System.IDisposable.Dispose%2A> , wywołaj jego metodę`try` / `catch` w bloku. Aby usunąć go pośrednio, użyj konstrukcji języka, takiej jak `using` (in C#) lub `Using` (w Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego <xref:System.IDisposable> interfejs IDisposable" w temacie dotyczącym interfejsu.  
  
 Gdy dane wyjściowe śledzenia i debugowania są włączone, <xref:System.Diagnostics.ConsoleTraceListener> komunikaty są zapisywane do określonego <xref:System.Console?displayProperty=nameWithType> strumienia, co jest podobne do sposobu pisania <xref:System.Console.Write%2A?displayProperty=nameWithType> komunikatów przy użyciu metod lub <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> . W aplikacji <xref:System.Console?displayProperty=nameWithType> konsoli dane wyjściowe i błędy zapisują komunikaty w istniejącym oknie konsoli lub można przekierować strumienie w celu zapisu <xref:System.IO.TextWriter?displayProperty=nameWithType> do wystąpienia.  
  
> [!NOTE]
>  Jeśli konsola programu nie istnieje, tak jak w aplikacji opartej na systemie Windows, komunikaty zapisane w konsoli nie są wyświetlane.  
  
 <xref:System.Diagnostics.Trace.Listeners%2A> <xref:System.Diagnostics.Trace> <xref:System.Diagnostics.TraceSource>Dodaj obiekt do odpowiedniej kolekcji, jeśli chcesz, aby komunikaty zapisywane przez, lub <xref:System.Diagnostics.Debug> zapisywana w konsoli programu. <xref:System.Diagnostics.ConsoleTraceListener> Ponadto można pisać wiadomości bezpośrednio do konsoli przy użyciu <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> metod lub. <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType>  
  
> [!NOTE]
>  <xref:System.Diagnostics.TraceListenerCollection> `Listeners` Klasy <xref:System.Diagnostics.Debug> i<xref:System.Diagnostics.Trace> korzystają z tej samej kolekcji, do których dostęp odbywa się przy użyciu odpowiednich właściwości. W przypadku dodania <xref:System.Diagnostics.ConsoleTraceListener> obiektu do kolekcji przy użyciu jednej z tych klas inna Klasa automatycznie używa tego samego odbiornika.  
  
 Większość kompilatorów umożliwia śledzenie i debugowanie danych wyjściowych za poorednictwem flag kompilacji warunkowej. Jeśli śledzenie lub debugowanie nie zostanie włączone, komunikaty wpisywane za pomocą <xref:System.Diagnostics.Debug?displayProperty=nameWithType> i <xref:System.Diagnostics.Trace?displayProperty=nameWithType> są skutecznie ignorowane. Składnia służąca do włączania śledzenia i debugowania danych wyjściowych jest specyficzna dla kompilatora; Jeśli używasz kompilatorów innych niż C# lub Visual Basic, zapoznaj się z dokumentacją kompilatora.  
  
-   Aby włączyć debugowanie w C#, należy dodać flagę **/d: Debug**do wiersza polecenia kompilatora podczas kompilowania kodu lub dodać **#define debugowanie** na początku pliku. W Visual Basic Dodaj flagę **/d: debug = true** do wiersza polecenia kompilatora.  
  
-   Aby włączyć śledzenie C#, Dodaj flagę **/d: Trace** do wiersza polecenia kompilatora podczas kompilowania kodu lub Dodaj **#define śledzenie** na początku pliku. W Visual Basic Dodaj flagę **/d: Trace = true** do wiersza polecenia kompilatora.  
  
 Można dodać <xref:System.Diagnostics.ConsoleTraceListener> obiekt <xref:System.Diagnostics.Trace.Listeners%2A> do kolekcji w kodzie <xref:System.Diagnostics.ConsoleTraceListener> lub <xref:System.Diagnostics.Trace.Listeners%2A> dodać obiekt do kolekcji za pomocą pliku konfiguracji aplikacji. <xref:System.Diagnostics.ConsoleTraceListener> Dodaj obiekt w kodzie, aby pisać komunikaty dla konkretnej sekcji kodu lub ścieżki wykonywania. <xref:System.Diagnostics.ConsoleTraceListener> Dodaj obiekt w pliku konfiguracji aplikacji, aby skierować wszystkie komunikaty śledzenia i debugowania do konsoli programu podczas wykonywania aplikacji.  
  
 Aby zapisać komunikaty śledzenia i debugowania do konsoli dla określonej sekcji kodu, zainicjuj <xref:System.Diagnostics.ConsoleTraceListener> obiekt i dodaj go <xref:System.Diagnostics.Trace.Listeners%2A> do kolekcji. Instrumentacja sekcji kodu zawierającej komunikaty przy użyciu <xref:System.Diagnostics.Trace> klas lub. <xref:System.Diagnostics.Debug> Na końcu sekcji kodu <xref:System.Diagnostics.ConsoleTraceListener> Usuń obiekt <xref:System.Diagnostics.Trace.Listeners%2A> z <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> kolekcji i <xref:System.Diagnostics.ConsoleTraceListener>Wywołaj metodę w.  
  
 Aby skierować wszystkie komunikaty śledzenia i debugowania do konsoli podczas wykonywania aplikacji, Dodaj <xref:System.Diagnostics.ConsoleTraceListener> obiekt do pliku konfiguracji aplikacji. Edytuj plik konfiguracji, który odnosi się do nazwy aplikacji lub pliku App. config w [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] projekcie. W tym pliku Wstaw element dla <xref:System.Diagnostics.ConsoleTraceListener>elementu.  
  
 Poniższy przykład dodaje <xref:System.Diagnostics.ConsoleTraceListener> obiekt o nazwie `configConsoleListener` do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 Aby uzyskać szczegółowe informacje na temat dodawania detektorów śledzenia w pliku konfiguracyjnym aplikacji, zobacz [ &lt;&gt;odbiorniki](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md).  
  
   
  
## Examples  
 Poniższy przykład kodu implementuje aplikację konsolową składającą się z klasy z dwiema metodami publicznymi.  
  
 `Main` Metoda sprawdza argumenty wiersza polecenia i określa, czy wynik śledzenia powinien być kierowany do standardowego strumienia błędów lub standardowego strumienia wyjściowego. `Main`tworzy i inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiekt dla określonego <xref:System.Console> strumienia wyjściowego i dodaje ten obiekt do kolekcji odbiorników śledzenia. Następnie wywołuje `WriteEnvironmentInfoToTrace` metodę, która zapisuje szczegółowe informacje o wykonywanym środowisku i konfigurację odbiornika śledzenia do danych wyjściowych śledzenia.  
  
 Po uruchomieniu przykładowej aplikacji szczegóły konfiguracji środowiska i śledzenia są zapisywane w określonym strumieniu wyjściowym konsoli za pomocą <xref:System.Diagnostics.ConsoleTraceListener> obiektu.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.ConsoleTraceListener" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.ConsoleTraceListener" /> klasy z danymi wyjściowymi śledzenia zapisanymi w standardowym strumieniu wyjściowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiekt do zapisu komunikatów <xref:System.Console.Out%2A?displayProperty=nameWithType> w strumieniu. Jej <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest inicjowana do pustego ciągu ("").  
  
   
  
## Examples  
 Poniższy przykład kodu inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiekt dla określonego <xref:System.Console> strumienia wyjściowego i dodaje go do kolekcji detektorów śledzenia. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.ConsoleTraceListener> klasy.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream"><see langword="true" />Aby napisać śledzenie i debugowanie danych wyjściowych do strumienia błędów standardowych; <see langword="false" /> aby pisać śledzenie i debugowanie danych wyjściowych do standardowego strumienia wyjściowego.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.ConsoleTraceListener" /> klasy z opcją zapisu śledzenia danych wyjściowych do standardowego strumienia wyjściowego lub standardowego strumienia błędów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiekt do zapisu komunikatów do <xref:System.Console.Out%2A?displayProperty=nameWithType> lub <xref:System.Console.Error%2A?displayProperty=nameWithType> do strumienia. Jej <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest inicjowana do pustego ciągu ("").  
  
   
  
## Examples  
 Poniższy przykład kodu inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiekt dla określonego <xref:System.Console> strumienia wyjściowego i dodaje go do kolekcji detektorów śledzenia. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.ConsoleTraceListener> klasy.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka dane wyjściowe do strumienia określonego dla tego odbiornika śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strumień określony dla tego <xref:System.Diagnostics.ConsoleTraceListener> wystąpienia ( <xref:System.Console.Out%2A?displayProperty=nameWithType> strumień lub <xref:System.Console.Error%2A?displayProperty=nameWithType> strumień) jest zamknięty.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
