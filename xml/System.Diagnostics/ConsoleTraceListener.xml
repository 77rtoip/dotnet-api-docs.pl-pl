<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d972b73279362d66526d9748a3d452a994965d63" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36342854" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Określa, że śledzenia i debugowania dane wyjściowe do standardowego wyjścia lub Standardowy strumień błędów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.ConsoleTraceListener> klasa umożliwiająca zapisanie śledzenia i debugowania wiadomości do konsoli. Można zainicjować <xref:System.Diagnostics.ConsoleTraceListener> obiektu do zapisania komunikatów śledzenia do <xref:System.Console.Out%2A?displayProperty=nameWithType> strumienia lub <xref:System.Console.Error%2A?displayProperty=nameWithType> strumienia.  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> interfejs. Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego. Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> metody w`try` / `catch` bloku. Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu tematu.  
  
 Podczas śledzenia i dane wyjściowe debugowania jest włączony, <xref:System.Diagnostics.ConsoleTraceListener> komunikaty są zapisywane do określonego <xref:System.Console?displayProperty=nameWithType> strumienia, który jest podobny do sposobu komunikaty są zapisywane z użyciem <xref:System.Console.Write%2A?displayProperty=nameWithType> lub <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metody. W aplikacji konsoli <xref:System.Console?displayProperty=nameWithType> wyjściowego i strumienia błędów zapisu wiadomości do istniejącego okna konsoli lub można przekierowywać strumienie do zapisu <xref:System.IO.TextWriter?displayProperty=nameWithType> wystąpienia.  
  
> [!NOTE]
>  Jeśli konsola nie istnieje, tak jak aplikacji systemu Windows, nie są wyświetlane komunikatów zapisywanych w konsoli.  
  
 Dodaj <xref:System.Diagnostics.ConsoleTraceListener> obiektu do odpowiedniego <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, jeśli mają być zapisywane za pośrednictwem wiadomości <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, lub <xref:System.Diagnostics.Debug> do zapisania do konsoli. Ponadto możesz zapisywać komunikaty bezpośrednio do przy użyciu konsoli <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> lub <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> metody.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug> i <xref:System.Diagnostics.Trace> klasy udostępnianie takie same <xref:System.Diagnostics.TraceListenerCollection> kolekcji, uzyskać dostęp za pomocą odpowiednich `Listeners` właściwości. Jeśli dodasz <xref:System.Diagnostics.ConsoleTraceListener> obiektu do kolekcji przy użyciu jednej z tych klas, inne klasy automatycznie używa tego samego odbiornika.  
  
 Większość kompilatory Włączanie śledzenia i debugowania za pomocą flagi kompilacji warunkowej. Jeśli nie włączysz śledzenia i debugowania, wiadomości zapisanych przez <xref:System.Diagnostics.Debug?displayProperty=nameWithType> i <xref:System.Diagnostics.Trace?displayProperty=nameWithType> klasy skutecznie są ignorowane. Składnia służąca do włączenia śledzenia i debugowania jest kompilatora określonych; Jeśli używasz kompilatory innego niż C# lub Visual Basic, zapoznaj się z dokumentacją, dla Twojej kompilatora.  
  
-   Aby włączyć debugowanie w języku C#, Dodaj **/d:DEBUG**flagi do wiersza polecenia kompilatora podczas kompilowania kodu lub można dodać **#define debugowania** na początku pliku. W języku Visual Basic, Dodaj **/d:DEBUG = True** flagi kompilatora wiersza polecenia.  
  
-   Aby włączyć śledzenie w języku C#, Dodaj **/d:TRACE** flagi do wiersza polecenia kompilatora podczas kompilacji kodu, lub Dodaj **#define śledzenia** na początku pliku. W języku Visual Basic, Dodaj **/d:TRACE = True** flagi kompilatora wiersza polecenia.  
  
 Możesz dodać <xref:System.Diagnostics.ConsoleTraceListener> do obiektu <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji w kodzie, lub można dodać <xref:System.Diagnostics.ConsoleTraceListener> do obiektu <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji za pomocą pliku konfiguracji aplikacji. Dodaj <xref:System.Diagnostics.ConsoleTraceListener> obiektu w kodzie do zapisywania komunikatów dla określonego kodu ścieżki sekcji lub wykonywania. Dodaj <xref:System.Diagnostics.ConsoleTraceListener> obiektów w pliku konfiguracji aplikacji, aby przekierować wszystkie śledzenia i debugowania komunikatów w konsoli podczas wykonuje aplikacji.  
  
 Zapis śledzenia i debugowania wiadomości do konsoli dla określonej sekcji kodu, należy zainicjować <xref:System.Diagnostics.ConsoleTraceListener> obiektu i dodać go do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji. Instrumentacja części kodu, który zawiera komunikaty przy użyciu <xref:System.Diagnostics.Trace> lub <xref:System.Diagnostics.Debug> klasy. Na końcu sekcji kodu, Usuń <xref:System.Diagnostics.ConsoleTraceListener> obiekt z <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji i wywołanie <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> metoda <xref:System.Diagnostics.ConsoleTraceListener>.  
  
 Aby przekierować wszystkie śledzenia i komunikaty do konsoli debugowania, gdy aplikacja wykonuje, Dodaj <xref:System.Diagnostics.ConsoleTraceListener> obiektów do pliku konfiguracji aplikacji. Edytowanie pliku konfiguracji, który odpowiada nazwie aplikacji lub w pliku app.config [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] projektu. Wstaw element dla tego pliku, <xref:System.Diagnostics.ConsoleTraceListener>.  
  
 W poniższym przykładzie dodano <xref:System.Diagnostics.ConsoleTraceListener> obiektu o nazwie `configConsoleListener` do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 Aby uzyskać więcej informacji o dodawaniu obiektów nasłuchujących śledzenia w pliku konfiguracyjnym aplikacji, zobacz [ &lt;odbiorników&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md).  
  
   
  
## Examples  
 Poniższy przykład kodu implementuje składające się z klasy z dwóch metod publicznych aplikacji konsoli.  
  
 `Main` Metoda sprawdza, czy argumenty wiersza polecenia i określa, czy dane wyjściowe śledzenia powinny być kierowane do Standardowy strumień błędów lub w standardowym strumieniu wyjściowym. `Main` Tworzy i inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiektu dla określonego <xref:System.Console> strumienia wyjściowego i dodaje tego obiektu do kolekcji odbiornika śledzenia. Następnie wywołuje `WriteEnvironmentInfoToTrace` metodę, która zapisuje szczegółowe informacje o środowisku wykonywania i konfiguracji odbiornika śledzenia do danych wyjściowych śledzenia.  
  
 Po uruchomieniu aplikacji przykład szczegóły konfiguracji środowiska i śledzenia są zapisywane do strumienia wyjściowego konsoli określony za pomocą <xref:System.Diagnostics.ConsoleTraceListener> obiektu.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.ConsoleTraceListener" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.ConsoleTraceListener" /> klasy z danych wyjściowych śledzenia zapisywane do standardowego strumienia wyjściowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiektu do zapisania komunikatów <xref:System.Console.Out%2A?displayProperty=nameWithType> strumienia. Jego <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest inicjowana na ciąg pusty ("").  
  
   
  
## Examples  
 Poniższy kod przykładowy inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiektu dla określonego <xref:System.Console> strumienia wyjściowego i dodaje go do kolekcji odbiornika śledzenia. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.ConsoleTraceListener> klasy.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">
          <see langword="true" /> można zapisać danych wyjściowych do Standardowy strumień błędów; debugowania i śledzenia <see langword="false" /> zapisu śledzenie i debugowanie dane wyjściowe do standardowego strumienia wyjściowego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.ConsoleTraceListener" /> klasy z opcją, aby zapisać wyniki śledzenia do standardowego strumienia wyjściowego lub Standardowy strumień błędów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiektu do zapisania komunikatów w jednej <xref:System.Console.Out%2A?displayProperty=nameWithType> lub <xref:System.Console.Error%2A?displayProperty=nameWithType> strumienia. Jego <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest inicjowana na ciąg pusty ("").  
  
   
  
## Examples  
 Poniższy kod przykładowy inicjuje <xref:System.Diagnostics.ConsoleTraceListener> obiektu dla określonego <xref:System.Console> strumienia wyjściowego i dodaje go do kolekcji odbiornika śledzenia. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.ConsoleTraceListener> klasy.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka dane wyjściowe do strumienia określony dla tego odbiornika śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strumień określone dla tej <xref:System.Diagnostics.ConsoleTraceListener> wystąpienia (albo <xref:System.Console.Out%2A?displayProperty=nameWithType> strumienia lub <xref:System.Console.Error%2A?displayProperty=nameWithType> strumienia) jest zamknięty.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>