<Type Name="Trace" FullName="System.Diagnostics.Trace">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ce349e938cbbfe615cd631111cb2663fbd39683" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061497" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Trace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Trace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Trace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Trace" />
  <TypeSignature Language="C++ CLI" Value="public ref class Trace sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia zestaw metod i właściwości, które ułatwiają śledzenia realizacji kodu. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć właściwości i metody w <xref:System.Diagnostics.Trace> kompilacje klasy do wersji dokumentu. Instrumentacja służy do monitorowania kondycji aplikacji uruchomionej w ustawieniach rzeczywistych. Śledzenie pomaga wyizolować problemy i popraw je bez zakłócania uruchomionym systemie.  
  
 Ta klasa dostarcza metody do wyświetlenia <xref:System.Diagnostics.Trace.Assert%2A> okno dialogowe i do wysyłania potwierdzenia, że zawsze <xref:System.Diagnostics.Trace.Fail%2A>. Ta klasa dostarcza metody zapisu w następujących zmian: <xref:System.Diagnostics.Trace.Write%2A>, <xref:System.Diagnostics.Trace.WriteLine%2A>, <xref:System.Diagnostics.Trace.WriteIf%2A>, i <xref:System.Diagnostics.Trace.WriteLineIf%2A>.  
  
 <xref:System.Diagnostics.BooleanSwitch> i <xref:System.Diagnostics.TraceSwitch> klasy zapewniają sposób dynamicznie kontroli danych wyjściowych śledzenia. Można zmodyfikować wartości tych przełączników, bez konieczności ponownego kompilowania aplikacji. Uzyskać informacji dotyczących używania pliku konfiguracji do ustawiona przełącznik, zobacz <xref:System.Diagnostics.Switch> klasy i [porady: tworzenie, inicjowanie i konfigurowanie przełączników śledzenia](~/docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md) tematu.  
  
 Dane wyjściowe śledzenia docelowych można dostosować, dodając <xref:System.Diagnostics.TraceListener> wystąpień do lub usuwanie wystąpienia z <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji. <xref:System.Diagnostics.Trace.Listeners%2A> Kolekcji jest udostępniany przez oba <xref:System.Diagnostics.Debug> i <xref:System.Diagnostics.Trace> klasy; Dodawanie odbiornik śledzenia do każdej klasy dodaje odbiornika do obu. Domyślnie dane wyjściowe śledzenia jest emitowany przy użyciu <xref:System.Diagnostics.DefaultTraceListener> klasy.  
  
> [!NOTE]
>  Dodawanie odbiornik śledzenia do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji może spowodować wyjątek zostanie wygenerowany podczas śledzenia, jeśli zasób stosowany przez odbiornik śledzenia nie jest dostępna. Warunki i zgłoszono wyjątek zależą od obiektu nasłuchującego śledzenia i nie można wyliczyć w tym temacie. Może być przydatne do wywołania <xref:System.Diagnostics.Trace> metod w `try` / `catch` bloków do wykrywania i obsługi wyjątków z obiektów nasłuchujących śledzenia.  
  
> [!NOTE]
>  Po dodaniu obiektów nasłuchujących śledzenia do częściowo zaufany kod otrzymasz <xref:System.Security.SecurityException> wyjątku, ponieważ dodanie obiekty nasłuchujące śledzenia wymaga <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> uprawnienia. Aby śledzić częściowo zaufany kod, który jest uruchomiony w piaskownicy w programie Visual Studio, nie należy dodawać obiekty nasłuchujące śledzenia. Zamiast tego należy wyświetlić <xref:System.Diagnostics.Trace> i <xref:System.Diagnostics.Debug> w wiadomości **dane wyjściowe** okna.  
  
 <xref:System.Diagnostics.Trace> Klasa dostarcza właściwości, które można pobrać lub ustawić poziom <xref:System.Diagnostics.Trace.Indent%2A>, <xref:System.Diagnostics.Trace.IndentSize%2A>oraz czy <xref:System.Diagnostics.Trace.AutoFlush%2A> po wykonaniu każdego zapisu.  
  
 Aby ustawić <xref:System.Diagnostics.Trace.AutoFlush%2A> i <xref:System.Diagnostics.Trace.IndentSize%2A> dla <xref:System.Diagnostics.Trace>, można edytować plik konfiguracji, który odpowiada nazwie aplikacji. Plik konfiguracji powinien być sformatowany jak w następującym przykładzie:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <xref:System.Diagnostics.ConditionalAttribute> Atrybut jest stosowany do metod <xref:System.Diagnostics.Trace>. Kompilatory, które obsługują <xref:System.Diagnostics.ConditionalAttribute> Ignoruj wywołania tych metod, chyba że "TRACE" jest zdefiniowany jako symbole kompilacji warunkowej. Zapoznaj się z dokumentacją kompilatora, aby określić, czy <xref:System.Diagnostics.ConditionalAttribute> jest obsługiwana i składnia do definiowania symbol kompilacji warunkowej.  
  
> [!NOTE]
>  W projektach Visual Studio, domyślnie symbol kompilacji warunkowej na "Debugowanie" jest zdefiniowany w przypadku kompilacji debugowania i symbol "TRACE" jest zdefiniowany zarówno debug i release kompiluje. Aby dowiedzieć się, jak wyłączyć to zachowanie, zobacz dokumentację programu Visual Studio.  
  
 Aby w języku C#, zdefiniuj symbol kompilacji warunkowej "TRACE", Dodaj `/d:TRACE` opcje wiersza polecenia kompilatora podczas kompilowania kodu przy użyciu wiersza polecenia lub Dodaj `#define TRACE` na początku pliku. W języku Visual Basic, Dodaj `/d:TRACE=True` — opcja kompilatora w wierszu polecenia lub Dodaj `#Const TRACE=True` do pliku.  
  
 <xref:System.Diagnostics.ConditionalAttribute> nie jest obsługiwana przez kompilator języka C++. Aby zapewnić podobne funkcje, należy ująć wywołania metody <xref:System.Diagnostics.Trace> w `#if defined(TRACE) ... #endif` zablokować, a także dodać `/DTRACE` — opcja kompilatora w wierszu polecenia lub Dodaj `#define TRACE` do pliku.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Diagnostics.Trace> aby wskazać początku i końcu wykonywania programu. Funkcja <xref:System.Diagnostics.Trace.Indent%2A?displayProperty=nameWithType> i <xref:System.Diagnostics.Trace.Unindent%2A?displayProperty=nameWithType> metody, aby odróżnić dane wyjściowe śledzenia. Bardziej szczegółowy przykład stosowania <xref:System.Diagnostics.Trace>, zobacz [porady: Dodawanie instrukcji śledzenia do kodu aplikacji](~/docs/framework/debug-trace-profile/how-to-add-trace-statements-to-application-code.md).  
  
 [!code-cpp[Classic Trace Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace Example/CS/source.cs#1)]
 [!code-vb[Classic Trace Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">do pracy z kodem niezarządzanym. Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sprawdza, czy warunek; Jeśli warunek nie jest <see langword="false" />, wysyła komunikaty i wyświetla komunikat, który pokazuje stosu wywołań.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, komunikat o błędzie nie są wysyłane i nie zostanie wyświetlone okno komunikatu.</param>
        <summary>Sprawdza, czy warunek; Jeśli warunek nie jest <see langword="false" />, wyświetla komunikat, który pokazuje stosu wywołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> metodę, jeśli chcesz wykonać potwierdzeń w wersji kompilacji. <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> Metoda działa tylko w przypadku kompilacji do debugowania. Aby uzyskać więcej informacji, zobacz [potwierdzenia w kod zarządzany](/visualstudio/debugger/assertions-in-managed-code).  
  
 Zazwyczaj <xref:System.Diagnostics.Trace.Assert%28System.Boolean%29> metoda służy do identyfikowania logiki błędy podczas tworzenia programu. <xref:System.Diagnostics.Trace.Assert%28System.Boolean%29> oblicza warunku. Jeśli wynik wynosi `false`, wysyła komunikat o błędzie do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji. To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> , lub usunąć jedno z <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji.  
  
 Po uruchomieniu aplikacji w trybie interfejsu użytkownika, wyświetla komunikat, który pokazuje stos wywołań z liczby plików i wierszy. Komunikat zawiera trzy przyciski: **przerwać**, **ponów**, i **Ignoruj**. Kliknięcie przycisku **przerwać** przycisk zakończenie aplikacji. Kliknięcie przycisku **ponów** wysyła do kodu w debugerze, jeśli aplikacja jest uruchomiona w debugerze lub oferuje otworzyć debugera, jeśli nie jest. Kliknięcie przycisku **Ignoruj** kontynuuje następną instrukcję w kodzie.  
  
> [!NOTE]
>  Wyświetlanie pola komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, w oknie komunikatu nie jest wyświetlany. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie metody <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metoda <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Można zmienić zachowanie <xref:System.Diagnostics.DefaultTraceListener> w pliku konfiguracji, który odpowiada nazwie aplikacji. W tym pliku, można włączyć i wyłączyć w oknie komunikatu potwierdzenia lub ustawić <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> właściwości. Plik konfiguracji powinien być sformatowany w następujący sposób:  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="4"/>  
    </switches>  
    <trace autoflush="false" indentsize="4"/>  
    <assert assertuienabled="true" logfilename=".\TraceLog.txt"/>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 Poniższy przykład tworzy indeks tablicy. Następnie niektóre akcje, jest wykonywane, która ustawia wartości indeksu. Następnie kod wywołuje <xref:System.Diagnostics.Trace.Assert%2A> Aby sprawdzić indeks wartość jest prawidłowa. Jeśli nie jest prawidłowy, <xref:System.Diagnostics.Trace.Assert%2A> generuje stosu wywołań.  
  
 [!code-cpp[Classic Trace.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, określony komunikat nie są wysyłane i nie zostanie wyświetlone okno komunikatu.</param>
        <param name="message">Komunikat do wysłania do <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</param>
        <summary>Sprawdza, czy warunek; Jeśli warunek nie jest <see langword="false" />, generuje określony komunikat i wyświetla komunikat, który pokazuje stosu wywołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> metodę, jeśli chcesz wykonać potwierdzeń w wersji kompilacji. <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> Metoda działa tylko w przypadku kompilacji do debugowania. Aby uzyskać więcej informacji, zobacz [potwierdzenia w kod zarządzany](/visualstudio/debugger/assertions-in-managed-code).  
  
 Zazwyczaj <xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%29> metoda służy do identyfikowania logiki błędy podczas tworzenia programu. <xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%29> oblicza warunku. Jeśli wynik wynosi `false`, wysyła określoną wiadomość diagnostycznych do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji. To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> , lub usunąć jedno z <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji.  
  
 Po uruchomieniu aplikacji w trybie interfejsu użytkownika, wyświetla komunikat, który pokazuje stos wywołań z liczby plików i wierszy. Komunikat zawiera trzy przyciski: **przerwać**, **ponów**, i **Ignoruj**. Kliknięcie przycisku **przerwać** przycisk zakończenie aplikacji. Kliknięcie przycisku **ponów** wysyła do kodu w debugerze, jeśli aplikacja jest uruchomiona w debugerze lub oferuje otworzyć debugera, jeśli nie jest. Kliknięcie przycisku **Ignoruj** kontynuuje następną instrukcję w kodzie.  
  
> [!NOTE]
>  Wyświetlanie pola komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, w oknie komunikatu nie jest wyświetlany. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie metody <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metoda <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Można zmienić zachowanie <xref:System.Diagnostics.DefaultTraceListener> w pliku konfiguracji, który odpowiada nazwie aplikacji. W tym pliku, można włączyć i wyłączyć w oknie komunikatu potwierdzenia lub ustawić <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> właściwości. Plik konfiguracji powinien być sformatowany w następujący sposób:  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="4"/>  
    </switches>  
    <trace autoflush="false" indentsize="4"/>  
    <assert assertuienabled="true" logfilename=".\TraceLog.txt"/>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 Poniższy przykład sprawdza, czy `type` parametr jest prawidłowy. Jeśli `type` przekazano jest `null`, <xref:System.Diagnostics.Trace.Assert%2A> generuje komunikat.  
  
 [!code-cpp[Classic Trace.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, nie są wysyłane wiadomości określona i nie zostanie wyświetlone okno komunikatu.</param>
        <param name="message">Komunikat do wysłania do <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</param>
        <param name="detailMessage">Szczegółowy komunikat do wysłania do <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</param>
        <summary>Sprawdza, czy warunek; Jeśli warunek nie jest <see langword="false" />, generuje dwa komunikaty określonego i wyświetla komunikat, który pokazuje stosu wywołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> metodę, jeśli chcesz wykonać potwierdzeń w wersji kompilacji. <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> Metoda działa tylko w przypadku kompilacji do debugowania. Aby uzyskać więcej informacji, zobacz [potwierdzenia w kod zarządzany](/visualstudio/debugger/assertions-in-managed-code).  
  
 Zazwyczaj <xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> metoda służy do identyfikowania logiki błędy podczas tworzenia programu. <xref:System.Diagnostics.Trace.Assert%2A> oblicza warunku. Jeśli wynik wynosi `false`, wysyła określoną wiadomość diagnostycznych i komunikat szczegółowy <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji. To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> , lub usunąć jedno z <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji.  
  
 Po uruchomieniu aplikacji w trybie interfejsu użytkownika, wyświetla komunikat, który pokazuje stos wywołań z liczby plików i wierszy. Komunikat zawiera trzy przyciski: **przerwać**, **ponów**, i **Ignoruj**. Kliknięcie przycisku **przerwać** przycisk zakończenie aplikacji. Kliknięcie przycisku **ponów** wysyła do kodu w debugerze, jeśli aplikacja jest uruchomiona w debugerze lub oferuje otworzyć debugera, jeśli nie jest. Kliknięcie przycisku **Ignoruj** kontynuuje następną instrukcję w kodzie.  
  
> [!NOTE]
>  Wyświetlanie pola komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, w oknie komunikatu nie jest wyświetlany. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie metody <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metoda <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Można zmienić zachowanie <xref:System.Diagnostics.DefaultTraceListener> w pliku konfiguracji, który odpowiada nazwie aplikacji. W tym pliku, można włączyć i wyłączyć w oknie komunikatu potwierdzenia lub ustawić <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> właściwości. Plik konfiguracji powinien być sformatowany w następujący sposób:  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="4"/>  
    </switches>  
    <trace autoflush="false" indentsize="4"/>  
    <assert assertuienabled="true" logfilename=".\TraceLog.txt"/>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 Poniższy przykład sprawdza, czy `type` parametr jest prawidłowy. Jeśli `type` przekazano jest `null`, <xref:System.Diagnostics.Trace.Assert%2A> generuje komunikat.  
  
 [!code-cpp[Classic Trace.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia czy <see cref="M:System.Diagnostics.Trace.Flush" /> powinna być wywoływana na <see cref="P:System.Diagnostics.Trace.Listeners" /> po każdego zapisu.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="M:System.Diagnostics.Trace.Flush" /> jest wywoływana na <see cref="P:System.Diagnostics.Trace.Listeners" /> po każdym zapisu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna to `false`.  
  
 Opróżnianie strumienia nie opróżnić jego podstawowym kodera, chyba że jawnie wywołać <xref:System.Diagnostics.Trace.Flush%2A> lub <xref:System.Diagnostics.Trace.Close%2A>. Ustawienie <xref:System.Diagnostics.Trace.AutoFlush%2A> do `true` oznacza, że dane zostaną opróżnione z buforu w strumieniu, ale nie zostaną opróżnione kodera stanu. Dzięki temu koder ma zachowywać stan (częściowe znaki), aby ją poprawnie kodowania kolejny blok znaków. Ten scenariusz dotyczy UTF8 i UTF7, w której niektóre znaki mogą być kodowane tylko po otrzymaniu koder sąsiedniego znaku ani znaków.  
  
 Aby ustawić <xref:System.Diagnostics.Trace.AutoFlush%2A> i <xref:System.Diagnostics.Trace.IndentSize%2A> dla <xref:System.Diagnostics.Trace>, można również edytować plik konfiguracji, który odpowiada nazwie aplikacji. Plik konfiguracji powinien być sformatowany jak w następującym przykładzie:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do pracy z kodem niezarządzanym. Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opróżnia bufor wyjściowy, a następnie zamyka <see cref="P:System.Diagnostics.Trace.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody, gdy dane wyjściowe ma w pliku, takich jak <xref:System.Diagnostics.TextWriterTraceListener>.  
  
 Opróżnianie strumienia nie opróżnić jego podstawowym kodera, chyba że jawnie wywołać <xref:System.Diagnostics.Trace.Flush%2A> lub <xref:System.Diagnostics.Trace.Close%2A>. Ustawienie <xref:System.Diagnostics.Trace.AutoFlush%2A> do `true` oznacza, że dane zostaną opróżnione z buforu w strumieniu, ale nie zostaną opróżnione kodera stanu. Dzięki temu koder ma zachowywać stan (częściowe znaki), aby ją poprawnie kodowania kolejny blok znaków. Ten scenariusz dotyczy UTF8 i UTF7, w której niektóre znaki mogą być kodowane tylko po otrzymaniu koder sąsiedniego znaku ani znaków.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TextWriterTraceListener> o nazwie `myTextListener`. `myTextListener` używa <xref:System.IO.StreamWriter> o nazwie `myOutputWriter` można zapisać do pliku o nazwie `TestFile.txt`. Przykład tworzy składnik zapisywania plików, strumienia i tekst, zapisuje jednego wiersza tekstu do pliku i następnie opróżnia i zamyka dane wyjściowe.  
  
 [!code-cpp[Classic Trace.Flush Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Flush Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Flush Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Flush Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do pracy z kodem niezarządzanym. Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CorrelationManager">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.CorrelationManager CorrelationManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.CorrelationManager CorrelationManager" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.CorrelationManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrelationManager As CorrelationManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::CorrelationManager ^ CorrelationManager { System::Diagnostics::CorrelationManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.CorrelationManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera Menedżera korelacji dla wątku dla tego śledzenia.</summary>
        <value>
          <see cref="T:System.Diagnostics.CorrelationManager" /> Obiekt skojarzony z wątku dla tego śledzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Jest to właściwość zaawansowaną większość aplikacji nie ma okazji do użycia.  
  
 <xref:System.Diagnostics.CorrelationManager> Klasa udostępnia metody używane do przechowywania tożsamości operacji logicznej w kontekście wątku wiązaniem i automatycznie dodają tagi każdego zdarzenia śledzenia generowane przez wątek o przechowywane tożsamości.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do pracy z kodem niezarządzanym. Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Diagnostics.CorrelationManager" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Emituje komunikat o błędzie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat emisji.</param>
        <summary>Emituje określony komunikat o błędzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślne zachowanie dla obiektu nasłuchującego śledzenia domyślne to dane wyjściowe `message` parametr okno komunikatu po uruchomieniu aplikacji w trybie interfejsu użytkownika, a w <xref:System.Diagnostics.TraceListener> wystąpień w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji.  
  
> [!NOTE]
>  Wyświetlanie pola komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, w oknie komunikatu nie jest wyświetlany. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie metody <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metoda <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> do lub z, usuwając <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Diagnostics.Trace.Fail%2A> metody wydrukowanie wiadomości podczas obsługi wyjątków.  
  
 [!code-cpp[Classic Trace.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail Example/VB/source.vb#1)]  
  
 Można również użyć <xref:System.Diagnostics.Trace.Fail%2A> metody w instrukcji switch.  
  
 [!code-cpp[Classic Trace.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Trace.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Trace.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat emisji.</param>
        <param name="detailMessage">Szczegółowy komunikat do wysyłania.</param>
        <summary>Emituje komunikat o błędzie i szczegółowy komunikat o błędzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnym zachowaniem jest dla odbiornika śledzenia domyślnego do wyjściowego `message` parametru i `detailedMessage` parametr okno komunikatu po uruchomieniu aplikacji w trybie interfejsu użytkownika, a w <xref:System.Diagnostics.TraceListener> wystąpień w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji .  
  
> [!NOTE]
>  Wyświetlanie pola komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, w oknie komunikatu nie jest wyświetlany. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie metody <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metoda <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> do lub z, usuwając <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Diagnostics.Trace.Fail%2A> metody wydrukowanie wiadomości podczas obsługi wyjątków.  
  
 [!code-cpp[Classic Trace.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/VB/source.vb#1)]  
  
 Można również użyć <xref:System.Diagnostics.Trace.Fail%2A> metody w instrukcji switch.  
  
 [!code-cpp[Classic Trace.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Trace.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Trace.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opróżnia bufor wyjściowy i powoduje, że buforowane dane są zapisywane w <see cref="P:System.Diagnostics.Trace.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Opróżnianie strumienia nie opróżnić jego podstawowym kodera, chyba że jawnie wywołać <xref:System.Diagnostics.Trace.Flush%2A> lub <xref:System.Diagnostics.Trace.Close%2A>. Ustawienie <xref:System.Diagnostics.Trace.AutoFlush%2A> do `true` oznacza, że dane zostaną opróżnione z buforu w strumieniu, ale nie zostaną opróżnione kodera stanu. Dzięki temu koder ma zachowywać stan (częściowe znaki), aby ją poprawnie kodowania kolejny blok znaków. Ten scenariusz dotyczy UTF8 i UTF7, w której niektóre znaki mogą być kodowane tylko po otrzymaniu koder sąsiedniego znaku ani znaków.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TextWriterTraceListener> o nazwie `myTextListener`. `myTextListener` używa <xref:System.IO.StreamWriter> o nazwie `myOutputWriter` można zapisać do pliku o nazwie `TestFile.txt`. Przykład tworzy składnik zapisywania plików, strumienia i tekst, zapisuje jednego wiersza tekstu do pliku i następnie opróżnia i zamyka dane wyjściowe.  
  
 [!code-cpp[Classic Trace.Flush Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Flush Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Flush Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Flush Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwiększa bieżącego <see cref="P:System.Diagnostics.Trace.IndentLevel" /> o jeden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Następujący przykład zwiększa i zmniejsza poziomu wcięcia i emituje śledzenia wiadomości.  
  
 [!code-cpp[Classic Trace.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/VB/source.vb#1)]  
  
 Ten przykład generuje następujące wyniki:  
  
```  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Trace.Unindent" />
        <altmember cref="P:System.Diagnostics.Trace.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Trace.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia poziom wcięcia.</summary>
        <value>Poziom wcięcia. Wartością domyślną jest zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.IndentLevel%2A> Właściwość reprezentuje liczbę wcięcie rozmiar <xref:System.Diagnostics.Trace.IndentSize%2A> została zastosowana. Ta właściwość jest przechowywane na podstawie wątku/na — żądań.  
  
   
  
## Examples  
 Następujący przykład zwiększa i zmniejsza poziomu wcięcia i emituje śledzenia wiadomości.  
  
 [!code-cpp[Classic Trace.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/VB/source.vb#1)]  
  
 Ten przykład generuje następujące wyniki:  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Trace.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę spacji w wcięcia.</summary>
        <value>Liczba spacji w wcięcia. Wartość domyślna to 4.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.TextWriterTraceListener> interpretuje tego numeru jako spacje. <xref:System.Diagnostics.EventLogTraceListener> Ignoruje tę wartość.  
  
 Ta właściwość jest przechowywane na podstawie wątku/na — żądań.  
  
 Aby ustawić <xref:System.Diagnostics.Trace.AutoFlush%2A> i <xref:System.Diagnostics.Trace.IndentSize%2A> dla <xref:System.Diagnostics.Trace>, można również edytować plik konfiguracji, który odpowiada nazwie aplikacji. Plik konfiguracji powinien być sformatowany jak w następującym przykładzie:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Trace.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję obiektów nasłuchujących monitorowaną danych wyjściowych śledzenia.</summary>
        <value>A <see cref="T:System.Diagnostics.TraceListenerCollection" /> reprezentujący kolekcję typu <see cref="T:System.Diagnostics.TraceListener" /> monitorowania danych wyjściowych śledzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Odbiorniki utworzyć sformatowane dane wyjściowe z danych wyjściowych śledzenia. Domyślnie kolekcja zawiera wystąpienie <xref:System.Diagnostics.DefaultTraceListener> klasy. Jeśli chcesz usunąć odbiornik domyślne, należy wywołać <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> metody i przekaż go wystąpienie <xref:System.Diagnostics.DefaultTraceListener>. Przekierowywanie danych wyjściowych do okna konsoli, należy dodać wystąpienia <xref:System.Diagnostics.ConsoleTraceListener> klasy.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Trace.Listeners%2A> Kolekcji jest udostępniany przez oba <xref:System.Diagnostics.Debug> i <xref:System.Diagnostics.Trace> klasy; Dodawanie odbiornik śledzenia do każdej klasy dodaje odbiornika do obu.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.ConsoleTraceListener> wyjściowe ekranu konsoli. Kod następnie dodaje nowe odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A>.  
  
 [!code-cpp[Classic Trace.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do pracy z kodem niezarządzanym. Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public static void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odświeża dane konfiguracji śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dane konfiguracji śledzenia są przechwytywane, gdy aplikacja jest uruchomiona. Jeśli dane konfiguracji zostaną zmienione po uruchomieniu aplikacji, wywołaj <xref:System.Diagnostics.Trace.Refresh%2A> metodę, aby zaktualizować dane konfiguracji śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceError">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o błędzie odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceError">
      <MemberSignature Language="C#" Value="public static void TraceError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceError(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceError(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceError (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceError(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat informacyjny do zapisania.</param>
        <summary>Zapisuje komunikat o błędzie odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji przy użyciu określonego komunikatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceError%2A> wywołania `TraceEvent` metodę dla każdego nasłuchującego śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType.Error>, przekazując komunikat informacyjny jako ciąg z komunikatem.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="TraceError">
      <MemberSignature Language="C#" Value="public static void TraceError (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceError(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceError(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceError (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceError(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w <c>argumentów</c> tablicy.</param>
        <param name="args">
          <see langword="object" /> Tablicę zawierającą zero lub więcej obiektów do formatowania.</param>
        <summary>Zapisuje komunikat o błędzie odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji przy użyciu określonej tablicy obiektów i informacje dotyczące formatowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceError%2A> wywołania `TraceEvent` metod obiektów nasłuchujących śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType.Error>, przekazanie zawartość komunikatu jako tablica obiektów z formatowaniem informacji. Zobacz <xref:System.String.Format%2A> metody, aby uzyskać więcej informacji na temat `format` i `args` parametrów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceInformation">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje komunikat informacyjny odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public static void TraceInformation (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceInformation(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceInformation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceInformation (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceInformation(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat informacyjny do zapisania.</param>
        <summary>Zapisuje komunikat informacyjny odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji przy użyciu określonego komunikatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceInformation%2A> wywołania `TraceEvent` metodę dla każdego nasłuchującego śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType.Information>, przekazując komunikat informacyjny jako ciąg z komunikatem.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public static void TraceInformation (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceInformation(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceInformation (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceInformation(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w <c>argumentów</c> tablicy.</param>
        <param name="args">
          <see langword="object" /> Tablicę zawierającą zero lub więcej obiektów do formatowania.</param>
        <summary>Zapisuje komunikat informacyjny odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji przy użyciu określonej tablicy obiektów i informacje dotyczące formatowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceInformation%2A> wywołania `TraceEvent` metod obiektów nasłuchujących śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType.Information>, przekazanie zawartość komunikatu jako tablica obiektów z formatowaniem informacji. Zobacz <xref:System.String.Format%2A> metody, aby uzyskać więcej informacji na temat `format` i `args` parametrów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceWarning">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje ostrzeżenie odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceWarning">
      <MemberSignature Language="C#" Value="public static void TraceWarning (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceWarning(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceWarning(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceWarning (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceWarning(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat informacyjny do zapisania.</param>
        <summary>Zapisuje komunikat ostrzegawczy odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji przy użyciu określonego komunikatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceWarning%2A> wywołania `TraceEvent` metody dla każdego odbiornika śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType.Warning>, przekazując komunikat informacyjny jako ciąg z komunikatem.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="TraceWarning">
      <MemberSignature Language="C#" Value="public static void TraceWarning (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceWarning(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceWarning (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceWarning(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w <c>argumentów</c> tablicy.</param>
        <param name="args">
          <see langword="object" /> Tablicę zawierającą zero lub więcej obiektów do formatowania.</param>
        <summary>Zapisuje komunikat ostrzegawczy odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji przy użyciu określonej tablicy obiektów i informacje dotyczące formatowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Trace.TraceWarning%2A> wywołania `TraceEvent` metod obiektów nasłuchujących śledzenia z typem zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType.Warning>, przekazanie zawartość komunikatu jako tablica obiektów z formatowaniem informacji. Zobacz <xref:System.String.Format%2A> metody, aby uzyskać więcej informacji na temat `format` i `args` parametrów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zmniejsza bieżącego <see cref="P:System.Diagnostics.Trace.IndentLevel" /> o jeden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Następujący przykład zwiększa i zmniejsza poziomu wcięcia i emituje śledzenia wiadomości.  
  
 [!code-cpp[Classic Trace.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/VB/source.vb#1)]  
  
 Ten przykład generuje następujące wyniki:  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Trace.Indent" />
        <altmember cref="P:System.Diagnostics.Trace.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Trace.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="UseGlobalLock">
      <MemberSignature Language="C#" Value="public static bool UseGlobalLock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseGlobalLock" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.UseGlobalLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property UseGlobalLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool UseGlobalLock { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy globalne blokady powinien być używany.</summary>
        <value>
          <see langword="true" /> Jeśli globalne blokady ma być używana; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Globalne blokady jest zawsze używana, jeśli odbiornik śledzenia nie jest wielowątkowość, niezależnie od wartości <xref:System.Diagnostics.Trace.UseGlobalLock%2A>. <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> Właściwość jest używana do określenia, czy odbiornik jest bezpieczne dla wątków. Globalne blokady nie jest używany tylko wtedy, gdy wartość <xref:System.Diagnostics.Trace.UseGlobalLock%2A> jest `false` i wartość <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> jest `true`. Domyślnym zachowaniem jest używać globalne blokady.  
  
 Aby ustawić <xref:System.Diagnostics.Trace.UseGlobalLock%2A> dla <xref:System.Diagnostics.Trace>, można również edytować plik konfiguracji, który odpowiada nazwie aplikacji. Plik konfiguracji powinien być sformatowany jak w następującym przykładzie:  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace useGlobalLock="false" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do pracy z kodem niezarządzanym. Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Wyliczenie skojarzone:  <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o śledzeniu odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> o nazwie są wysyłane do <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <summary>Zapisuje wartość obiektu <see cref="M:System.Object.ToString" /> metodę odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metody obiektu nasłuchującego śledzenia.  
  
> [!NOTE]
>  Program ASP.NET udostępnia funkcja śledzenia dostosowanych stron sieci Web. Aby zapisać komunikaty śledzenia stron ASP.NET, należy użyć <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> właściwości.  
  
 Domyślnie w kodzie skojarzony ze stroną sieci Web ASP.NET, instrukcja `Trace.Write("...")` jest to wywołanie <xref:System.Web.TraceContext.Write%2A> metody <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> właściwości. Aby użyć <xref:System.Diagnostics.Trace?displayProperty=nameWithType> klasy na stronach sieci Web musi zawierać przestrzeni nazw, na przykład `System.Diagnostics.Trace.Write("...")`.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych imię `value` parametr <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych komunikatów na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.Write1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje komunikat odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metody obiektu nasłuchującego śledzenia.  
  
> [!NOTE]
>  Program ASP.NET udostępnia funkcja śledzenia dostosowanych stron sieci Web. Aby zapisać komunikaty śledzenia stron ASP.NET, należy użyć <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> właściwości.  
  
 Domyślnie w kodzie skojarzony ze stroną sieci Web ASP.NET, instrukcja `Trace.Write("...")` jest to wywołanie <xref:System.Web.TraceContext.Write%2A> metody <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> właściwości. Aby użyć <xref:System.Diagnostics.Trace?displayProperty=nameWithType> klasy na stronach sieci Web musi zawierać przestrzeni nazw, na przykład `System.Diagnostics.Trace.Write("...")`.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Terminator wiersza wynika to drugi komunikat.  
  
 [!code-cpp[Classic Trace.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> Name jest wysyłane do <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Nazwa kategorii i wartość obiektu <see cref="M:System.Object.ToString" /> metodę odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametr może służyć do grupowania komunikaty wyjściowe.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metody obiektu nasłuchującego śledzenia.  
  
> [!NOTE]
>  Program ASP.NET udostępnia funkcja śledzenia dostosowanych stron sieci Web. Aby zapisać komunikaty śledzenia stron ASP.NET, należy użyć <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> właściwości.  
  
 Domyślnie w kodzie skojarzony ze stroną sieci Web ASP.NET, instrukcja `Trace.Write("...")` jest to wywołanie <xref:System.Web.TraceContext.Write%2A> metody <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> właściwości. Aby użyć <xref:System.Diagnostics.Trace?displayProperty=nameWithType> klasy na stronach sieci Web musi zawierać przestrzeni nazw, na przykład `System.Diagnostics.Trace.Write("...")`.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Verbose`, przykładzie danych wyjściowych nazwę `myObject` i `category` do <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Error` lub wyższym, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.Write3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Zapisuje nazwę kategorii i komunikat odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametr może służyć do grupowania komunikaty wyjściowe.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metody obiektu nasłuchującego śledzenia.  
  
> [!NOTE]
>  Program ASP.NET udostępnia funkcja śledzenia dostosowanych stron sieci Web. Aby zapisać komunikaty śledzenia stron ASP.NET, należy użyć <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> właściwości.  
  
 Domyślnie w kodzie skojarzony ze stroną sieci Web ASP.NET, instrukcja `Trace.Write("...")` jest to wywołanie <xref:System.Web.TraceContext.Write%2A> metody <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> właściwości. Aby użyć <xref:System.Diagnostics.Trace?displayProperty=nameWithType> klasy na stronach sieci Web musi zawierać przestrzeni nazw, na przykład `System.Diagnostics.Trace.Write("...")`.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Verbose`, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Error` lub wyższym, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.Write2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o śledzeniu odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> Aby spowodować, że komunikat do zapisania; w przeciwnym razie <see langword="false" />.</param>
        <param name="value">
          <see cref="T:System.Object" /> o nazwie są wysyłane do <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <summary>Zapisuje wartość obiektu <see cref="M:System.Object.ToString" /> metodę odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych imię wartość parametru <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych komunikatów na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności z Instrumentacji aplikacji przy użyciu <see langword="If...Then" /> instrukcje zamiast <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> instrukcje. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Jednak pierwszym przykładzie przebiega szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" /> Nie wywołuj <see cref="M:System.Diagnostics.Trace.Write(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i jest generowany żadnych danych wyjściowych śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  
  
 **Pierwszym przykładzie**  
  
```  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 **Drugi przykład**  
  
```  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> Aby spowodować, że komunikat do zapisania; w przeciwnym razie <see langword="false" />.</param>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje komunikat odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności z Instrumentacji aplikacji przy użyciu <see langword="If...Then" /> instrukcje zamiast <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> instrukcje. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Jednak pierwszym przykładzie przebiega szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" /> Nie wywołuj <see cref="M:System.Diagnostics.Trace.Write(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i jest generowany żadnych danych wyjściowych śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  
  
 **Pierwszym przykładzie**  
  
```  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 **Drugi przykład**  
  
```  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> Aby spowodować, że komunikat do zapisania; w przeciwnym razie <see langword="false" />.</param>
        <param name="value">
          <see cref="T:System.Object" /> o nazwie są wysyłane do <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Nazwa kategorii i wartość obiektu <see cref="M:System.Object.ToString" /> metodę odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametr może służyć do grupowania komunikaty wyjściowe.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Verbose`, przykładzie danych wyjściowych nazwę `myObject` i `category` do <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Error` lub wyższym, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności z Instrumentacji aplikacji przy użyciu <see langword="If...Then" /> instrukcje zamiast <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> instrukcje. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Jednak pierwszym przykładzie przebiega szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" /> Nie wywołuj <see cref="M:System.Diagnostics.Trace.Write(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i jest generowany żadnych danych wyjściowych śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  
  
 **Pierwszym przykładzie**  
  
```  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 **Drugi przykład**  
  
```  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> Aby spowodować, że komunikat do zapisania; w przeciwnym razie <see langword="false" />.</param>
        <param name="message">Komunikat do zapisu.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Zapisuje nazwę kategorii i komunikat odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametr może służyć do grupowania komunikaty wyjściowe.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Verbose`, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Error` lub wyższym, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności z Instrumentacji aplikacji przy użyciu <see langword="If...Then" /> instrukcje zamiast <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> instrukcje. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Jednak pierwszym przykładzie przebiega szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" /> Nie wywołuj <see cref="M:System.Diagnostics.Trace.Write(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i jest generowany żadnych danych wyjściowych śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  
  
 **Pierwszym przykładzie**  
  
```  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 **Drugi przykład**  
  
```  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o śledzeniu odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> o nazwie są wysyłane do <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <summary>Zapisuje wartość obiektu <see cref="M:System.Object.ToString" /> metodę odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych nazwę obiektu w tym samym wierszu jako pierwszego komunikatu. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje komunikat odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> o nazwie są wysyłane do <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Nazwa kategorii i wartość obiektu <see cref="M:System.Object.ToString" /> metodę odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametr może służyć do grupowania komunikaty wyjściowe.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Zapisuje nazwę kategorii i komunikat odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametr może służyć do grupowania komunikaty wyjściowe.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykładzie danych wyjściowych drugi komunikat o błędzie i `category` na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o śledzeniu odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> Aby spowodować, że komunikat do zapisania; w przeciwnym razie <see langword="false" />.</param>
        <param name="value">
          <see cref="T:System.Object" /> o nazwie są wysyłane do <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <summary>Zapisuje wartość obiektu <see cref="M:System.Object.ToString" /> metodę odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych nazwę obiektu w tym samym wierszu jako pierwszego komunikatu. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności z Instrumentacji aplikacji przy użyciu <see langword="If...Then" /> instrukcje zamiast <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> instrukcje. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Jednak pierwszym przykładzie przebiega szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" /> Nie wywołuj <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i jest generowany żadnych danych wyjściowych śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  
  
 **Pierwszym przykładzie**  
  
```  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 **Drugi przykład**  
  
```  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> Aby spowodować, że komunikat do zapisania; w przeciwnym razie <see langword="false" />.</param>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje komunikat odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności z Instrumentacji aplikacji przy użyciu <see langword="If...Then" /> instrukcje zamiast <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> instrukcje. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Jednak pierwszym przykładzie przebiega szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" /> Nie wywołuj <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i jest generowany żadnych danych wyjściowych śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  
  
 **Pierwszym przykładzie**  
  
```  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 **Drugi przykład**  
  
```  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> Aby spowodować, że komunikat do zapisania; w przeciwnym razie <see langword="false" />.</param>
        <param name="value">
          <see cref="T:System.Object" /> o nazwie są wysyłane do <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Nazwa kategorii i wartość obiektu <see cref="M:System.Object.ToString" /> metodę odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametr może służyć do grupowania komunikaty wyjściowe.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ma ustawioną wartość `Verbose`, przykładzie danych wyjściowych drugi komunikat o błędzie na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności z Instrumentacji aplikacji przy użyciu <see langword="If...Then" /> instrukcje zamiast <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> instrukcje. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Jednak pierwszym przykładzie przebiega szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" /> Nie wywołuj <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i jest generowany żadnych danych wyjściowych śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  
  
 **Pierwszym przykładzie**  
  
```  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 **Drugi przykład**  
  
```  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("TRACE")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> Aby spowodować, że komunikat do zapisania; w przeciwnym razie <see langword="false" />.</param>
        <param name="message">Komunikat do zapisu.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Zapisuje nazwę kategorii i komunikat odbiorniki śledzenia w <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji, jeśli wynikiem warunku jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie dane wyjściowe są zapisywane na wystąpienie <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametr może służyć do grupowania komunikaty wyjściowe.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metody obiektu nasłuchującego śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ta opcja jest ustawiona poza przykładowy kod.  
  
 Jeśli przełącznik ma ustawioną wartość <xref:System.Diagnostics.TraceLevel> `Error` lub nowszym, przykładzie danych wyjściowych pierwszy komunikat o błędzie <xref:System.Diagnostics.Trace.Listeners%2A>. Informacje na temat dodawania odbiornika do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykładzie danych wyjściowych drugi komunikat o błędzie i `category` na tym samym wierszu co pierwszy komunikat o błędzie. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Trace.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności z Instrumentacji aplikacji przy użyciu <see langword="If...Then" /> instrukcje zamiast <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> instrukcje. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Jednak pierwszym przykładzie przebiega szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" /> Nie wywołuj <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i jest generowany żadnych danych wyjściowych śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  
  
 **Pierwszym przykładzie**  
  
```  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 **Drugi przykład**  
  
```  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>