<Type Name="Debug" FullName="System.Diagnostics.Debug">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="70fd4f1097cac9c50c7716f7fb4e32c961510b48" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39871312" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Debug" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Debug extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Debug" />
  <TypeSignature Language="VB.NET" Value="Public Class Debug" />
  <TypeSignature Language="C++ CLI" Value="public ref class Debug abstract sealed" />
  <TypeSignature Language="F#" Value="type Debug = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Debug</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia zestaw metod i właściwości pomagających w debugowaniu kodu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli używasz metody <xref:System.Diagnostics.Debug> klasy do drukowania informacji o debugowaniu i sprawdź swoją logikę z potwierdzeniami, użytkownik może uczynić kod działał on bardziej niezawodnie bez wywierania wpływu na wydajność i kod rozmiar produktu wysyłki.  
  
 Ta klasa dostarcza metody, aby wyświetlić <xref:System.Diagnostics.Debug.Assert%2A> okno dialogowe i aby emitować potwierdzenie, że zawsze zakończą się niepowodzeniem. Ta klasa dostarcza metody zapisu w następujących zmian: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> i <xref:System.Diagnostics.Debug.WriteLineIf%2A>.  
  
 <xref:System.Diagnostics.BooleanSwitch> i <xref:System.Diagnostics.TraceSwitch> klasy zapewnia sposób dynamicznie kontrolować dane wyjściowe śledzenia. Można zmodyfikować wartości tych przełączników, bez konieczności ponownego kompilowania aplikacji. Instrukcje dotyczące przy użyciu pliku konfiguracji, aby ustawić przełącznik, zobacz <xref:System.Diagnostics.Switch> klasy i [przełączniki śledzenia](~/docs/framework/debug-trace-profile/trace-switches.md) tematu.  
  
 Dane wyjściowe śledzenia docelowych można dostosować, dodając <xref:System.Diagnostics.TraceListener> wystąpień do lub usuwanie wystąpień z <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji. <xref:System.Diagnostics.Debug.Listeners%2A> Kolekcji jest współużytkowany przez oba <xref:System.Diagnostics.Debug> i <xref:System.Diagnostics.Trace> klasy; Dodawanie odbiornika śledzenia, albo klasą dodaje odbiornika na wartość oba. Domyślnie <xref:System.Diagnostics.DefaultTraceListener> klasy emituje danych wyjściowych śledzenia.  
  
> [!NOTE]
>  Dodawanie odbiornika śledzenia, aby <xref:System.Diagnostics.Debug.Listeners%2A> bezużytecznych może powodować zgłoszenie wyjątku podczas śledzenia, jeśli zasób stosowany przez odbiornik śledzenia nie jest dostępna. Warunki wyjątku są zależne od odbiornika śledzenia i nie można wyliczyć w tym temacie. Może być przydatne do wywołania <xref:System.Diagnostics.Debug> metody `try` / `catch` bloki wykrywania i obsługi wszystkich wyjątków z detektorów śledzenia.  
  
 Możesz zmodyfikować poziom wcięcia przy użyciu <xref:System.Diagnostics.Debug.Indent%2A> metody lub <xref:System.Diagnostics.Debug.IndentLevel%2A> właściwości. Aby zmodyfikować wielkość wcięcia, użyj <xref:System.Diagnostics.Debug.IndentSize%2A> właściwości. Można określić, czy ma być automatycznie opróżniania buforu wyjściowego po każdym zapisie, ustawiając <xref:System.Diagnostics.Debug.AutoFlush%2A> właściwość `true`.  
  
 Aby ustawić <xref:System.Diagnostics.Debug.AutoFlush%2A> i <xref:System.Diagnostics.Debug.IndentSize%2A> dla <xref:System.Diagnostics.Debug>, można edytować plik konfiguracji, odpowiadający nazwę aplikacji. Plik konfiguracyjny powinny być sformatowane, jak pokazano w poniższym przykładzie.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <xref:System.Diagnostics.ConditionalAttribute> Atrybut jest stosowany do metod <xref:System.Diagnostics.Debug>. Kompilatory, które obsługują <xref:System.Diagnostics.ConditionalAttribute> ignorować wywołania tych metod, chyba że "DEBUG" jest zdefiniowany jako symbole kompilacji warunkowej. Można znaleźć w dokumentacji kompilatora, aby określić, czy <xref:System.Diagnostics.ConditionalAttribute> jest obsługiwana i Składnia służąca do definiowania symbolu kompilacji warunkowej.  
  
> [!NOTE]
> W projektach programu Visual Studio C# i Visual Basic, domyślnie symbol kompilacji warunkowej "Debugowanie" jest zdefiniowany dla kompilacji debugowania, a symbol "Śledzenia" zdefiniowano zarówno debug i release kompiluje. Aby uzyskać informacje o sposobie wyłączyć to zachowanie, zobacz dokumentację programu Visual Studio. Aby dowiedzieć się, jak warunkowe debugowania w programie Visual C++, zobacz [klasy Debug (C + +/ interfejsu wiersza polecenia)](/cpp/dotnet/debug-class-cpp-cli).
  
 Aby zdefiniować symbol kompilacji warunkowej "Debugowanie" w języku C#, należy dodać `/d:DEBUG` opcję wiersza polecenia kompilatora podczas kompilowania kodu przy użyciu wiersza polecenia lub dodać `#define DEBUG` na początku pliku. W języku Visual Basic należy dodać `/d:DEBUG=True` opcję kompilatora w wierszu polecenia lub dodać `#Const DEBUG=True` do pliku.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Diagnostics.Debug> do wskazania rozpoczęcie i zakończenie wykonywania programu. W przykładzie użyto również <xref:System.Diagnostics.Debug.Indent%2A> i <xref:System.Diagnostics.Debug.Unindent%2A> odróżnić dane wyjściowe śledzenia.  
  
 [!code-cpp[Classic Debug Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug Example/CS/source.cs#1)]
 [!code-vb[Classic Debug Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sprawdza, czy warunek; Jeśli warunek nie jest <see langword="false" />, wysyła wiadomości i wyświetla okno komunikatu, który pokazuje stosu wywołań.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberSignature Language="F#" Value="static member Assert : bool -&gt; unit" Usage="System.Diagnostics.Debug.Assert condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, komunikat o błędzie nie są wysyłane i nie jest wyświetlana w oknie komunikatu.</param>
        <summary>Sprawdza, czy warunek; Jeśli warunek nie jest <see langword="false" />, wyświetla okno komunikatu, który pokazuje stosu wywołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> metoda działa tylko w kompilacjach do debugowania. Użyj <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> metody, jeśli chcesz zrobić potwierdzenia w wersji kompilacji. Aby uzyskać więcej informacji, zobacz [potwierdzenia w kodzie zarządzany](/visualstudio/debugger/assertions-in-managed-code).  
  
> [!IMPORTANT]
>  `Assert` Metod nie są dostępne dla [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] aplikacji.  
  
 Zazwyczaj <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> metoda służy do identyfikowania błędów logicznych, podczas tworzenia programu. <xref:System.Diagnostics.Debug.Assert%2A> oblicza warunku. Jeśli wynik jest `false`, wysyła komunikat o błędzie do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji. To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> , lub usunąć jedno z <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji.  
  
 Gdy aplikacja zostanie uruchomiona w trybie interfejsu użytkownika, wyświetla okno komunikatu, który pokazuje stos wywołań z pliku i numery wierszy. W oknie komunikatu zawiera trzy przyciski: **przerwać**, **ponów**, i **Ignoruj**. Klikając **przerwać** przycisk kończy działanie aplikacji. Klikając **ponów** wysyła do kodu w debugerze, jeśli aplikacja jest uruchomiona w debugerze lub oferuje Otwórz debugera, jeśli nie jest. Klikając **Ignoruj** będzie kontynuowane z użyciem następnej instrukcji w kodzie.  
  
> [!NOTE]
>  [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplikacje nie obsługują modalnych okien dialogowych, dzięki czemu zachowują się podobnie w trybie interfejsu niezwiązanych z użytkownikiem i tryb interfejsu użytkownika. Wiadomości są zapisywane do detektorów śledzenia active w trybie debugowania lub żaden komunikat nie są zapisywane w trybie wydania.  
  
> [!NOTE]
>  Wyświetlanie okna komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, okno komunikatu nie jest wyświetlana. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metody <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Można zmienić zachowanie <xref:System.Diagnostics.DefaultTraceListener> w pliku konfiguracji, który odpowiada nazwie aplikacji. W tym pliku, możesz włączyć i wyłączyć w oknie komunikatu potwierdzenia lub <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> właściwości. Plik konfiguracji powinien być sformatowany w następujący sposób:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 Poniższy przykład tworzy indeks tablicy, wykonuje niektóre akcje, aby ustawić wartość indeksu, a następnie wywołuje <xref:System.Diagnostics.Debug.Assert%2A> aby upewnić się, że wartość indeksu jest nieprawidłowy. Jeśli nie jest prawidłowy, <xref:System.Diagnostics.Debug.Assert%2A> przesyła stos wywołań.  
  
 [!code-cpp[Classic Debug.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string -&gt; unit" Usage="System.Diagnostics.Debug.Assert (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />określony komunikat nie są wysyłane i nie jest wyświetlana w oknie komunikatu.</param>
        <param name="message">Komunikat do wysłania do <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</param>
        <summary>Sprawdza, czy warunek; Jeśli warunek nie jest <see langword="false" />, generuje określony komunikat i wyświetla okno komunikatu, który pokazuje stosu wywołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> metoda działa tylko w kompilacjach do debugowania. Użyj <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> metody, jeśli chcesz zrobić potwierdzenia w wersji kompilacji. Aby uzyskać więcej informacji, zobacz [potwierdzenia w kodzie zarządzany](/visualstudio/debugger/assertions-in-managed-code).  
  
 Zazwyczaj <xref:System.Diagnostics.Debug.Assert%2A> metoda służy do identyfikowania błędów logicznych, podczas tworzenia programu. <xref:System.Diagnostics.Debug.Assert%2A> oblicza warunku. Jeśli wynik jest `false`, wysyła określony komunikat diagnostyczny do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji. To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> , lub usunąć jedno z <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji.  
  
 Gdy aplikacja zostanie uruchomiona w trybie interfejsu użytkownika, wyświetla okno komunikatu, który pokazuje stos wywołań z pliku i numery wierszy. W oknie komunikatu zawiera trzy przyciski: **przerwać**, **ponów**, i **Ignoruj**. Klikając **przerwać** przycisk kończy działanie aplikacji. Klikając **ponów** wysyła do kodu w debugerze, jeśli aplikacja jest uruchomiona w debugerze lub oferuje Otwórz debugera, jeśli nie jest. Klikając **Ignoruj** będzie kontynuowane z użyciem następnej instrukcji w kodzie.  
  
> [!NOTE]
>  Wyświetlanie okna komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, okno komunikatu nie jest wyświetlana. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metody <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Można zmienić zachowanie <xref:System.Diagnostics.DefaultTraceListener> w pliku konfiguracji, który odpowiada nazwie aplikacji. W tym pliku, możesz włączyć i wyłączyć w oknie komunikatu potwierdzenia lub <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> właściwości. Plik konfiguracji powinien być sformatowany w następujący sposób:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 Następujące testy przykład czy `type` parametr jest prawidłowy. Jeśli `type` jest `null`, <xref:System.Diagnostics.Trace.Assert%2A> generuje komunikat.  
  
 [!code-cpp[Classic Debug.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string * string -&gt; unit" Usage="System.Diagnostics.Debug.Assert (condition, message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, nie są wysyłane wiadomości określony i nie jest wyświetlana w oknie komunikatu.</param>
        <param name="message">Komunikat do wysłania do <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</param>
        <param name="detailMessage">Szczegółowy komunikat do wysłania do <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</param>
        <summary>Sprawdza, czy warunek; Jeśli warunek nie jest <see langword="false" />, generuje dwa komunikaty określonego i wyświetla okno komunikatu, który pokazuje stosu wywołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> metoda działa tylko w kompilacjach do debugowania. Użyj <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> metody, jeśli chcesz zrobić potwierdzenia w wersji kompilacji. Aby uzyskać więcej informacji, zobacz [potwierdzenia w kodzie zarządzany](/visualstudio/debugger/assertions-in-managed-code).  
  
 Zazwyczaj <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> metoda służy do identyfikowania błędów logicznych, podczas tworzenia programu. <xref:System.Diagnostics.Debug.Assert%2A> oblicza warunku. Jeśli wynik jest `false`, wysyła określony komunikat diagnostyczny i szczegółowy komunikat do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji. To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> , lub usunąć jedno z <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji.  
  
 Gdy aplikacja zostanie uruchomiona w trybie interfejsu użytkownika, wyświetla okno komunikatu, który pokazuje stos wywołań z pliku i numery wierszy. W oknie komunikatu zawiera trzy przyciski: **przerwać**, **ponów**, i **Ignoruj**. Klikając **przerwać** przycisk kończy działanie aplikacji. Klikając **ponów** wysyła do kodu w debugerze, jeśli aplikacja jest uruchomiona w debugerze lub oferuje Otwórz debugera, jeśli nie jest. Klikając **Ignoruj** będzie kontynuowane z użyciem następnej instrukcji w kodzie.  
  
> [!NOTE]
>  Wyświetlanie okna komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, okno komunikatu nie jest wyświetlana. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metody <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Można zmienić zachowanie <xref:System.Diagnostics.DefaultTraceListener> w pliku konfiguracji, który odpowiada nazwie aplikacji. W tym pliku, możesz włączyć i wyłączyć w oknie komunikatu potwierdzenia lub <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> właściwości. Plik konfiguracji powinien być sformatowany w następujący sposób:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 Następujące testy przykład czy `type` parametr jest prawidłowy. Jeśli `type` jest `null`, <xref:System.Diagnostics.Trace.Assert%2A> generuje dwa komunikaty.  
  
 [!code-cpp[Classic Debug.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessageFormat, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessageFormat, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessageFormat As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessageFormat, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string * string * obj[] -&gt; unit" Usage="System.Diagnostics.Debug.Assert (condition, message, detailMessageFormat, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessageFormat" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, nie są wysyłane wiadomości określony i nie jest wyświetlana w oknie komunikatu.</param>
        <param name="message">Komunikat do wysłania do <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji.</param>
        <param name="detailMessageFormat">Ciąg formatu złożonego, aby wysłać do <see cref="P:System.Diagnostics.Trace.Listeners" /> kolekcji. Ten komunikat zawiera tekst zmieszać z zero lub więcej elementów formatu, które odnoszą się do obiektów w <c>args</c> tablicy.</param>
        <param name="args">Tablica obiektów zawiera zero lub więcej obiektów do sformatowania.</param>
        <summary>Sprawdza, czy warunek; Jeśli warunek nie jest <see langword="false" />, generuje dwa komunikaty (proste i sformatowany) i wyświetla okno komunikatu, który pokazuje stosu wywołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa programu .NET Framework, aby dokonać konwersji wartości obiektu na jego reprezentację tekstową i osadza tę reprezentację w ciągu. Wynikowy ciąg jest wysyłana do <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji.  
  
 Domyślnie <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> metoda działa tylko w kompilacjach do debugowania. Użyj <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> metody, jeśli chcesz zrobić potwierdzenia w wersji kompilacji. Aby uzyskać więcej informacji, zobacz [potwierdzenia w kodzie zarządzany](/visualstudio/debugger/assertions-in-managed-code).  
  
 Zazwyczaj <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> metoda służy do identyfikowania błędów logicznych, podczas tworzenia programu. <xref:System.Diagnostics.Debug.Assert%2A> oblicza warunku. Jeśli wynik jest `false`, <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metoda jest wywoływana i `detailMessageFormat` ciągu i `args` tablicy są przekazywane w jako parametry. <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> następnie wysyła komunikat określony tekst i tekst sformatowany komunikat <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji. To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> , lub usunąć jedno z <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji.  
  
 Gdy aplikacja zostanie uruchomiona w trybie interfejsu użytkownika, wyświetla okno komunikatu, który pokazuje stos wywołań z pliku i numery wierszy. W oknie komunikatu zawiera trzy przyciski: **przerwać**, **ponów**, i **Ignoruj**. Klikając **przerwać** przycisk kończy działanie aplikacji. Klikając **ponów** wysyła do kodu w debugerze, jeśli aplikacja jest uruchomiona w debugerze lub oferuje Otwórz debugera, jeśli nie jest. Klikając **Ignoruj** będzie kontynuowane z użyciem następnej instrukcji w kodzie.  
  
> [!NOTE]
>  Wyświetlanie okna komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, okno komunikatu nie jest wyświetlana. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metody <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Można zmienić zachowanie <xref:System.Diagnostics.DefaultTraceListener> w pliku konfiguracji, który odpowiada nazwie aplikacji. W tym pliku, możesz włączyć i wyłączyć w oknie komunikatu potwierdzenia lub <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> właściwości. Plik konfiguracji powinien być sformatowany w następujący sposób:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="System.Diagnostics.Debug.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="M:System.Diagnostics.Debug.Flush" /> powinna być wywoływana na <see cref="P:System.Diagnostics.Debug.Listeners" /> po każdym zapisie.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="M:System.Diagnostics.Debug.Flush" /> jest wywoływana w <see cref="P:System.Diagnostics.Debug.Listeners" /> po każdym zapisie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna to `false`.  
  
 Opróżnianie strumienia nie opróżnić jego podstawowej kodera, chyba że jawnie wywołać <xref:System.Diagnostics.Debug.Flush%2A> lub <xref:System.Diagnostics.Debug.Close%2A>. Ustawienie <xref:System.Diagnostics.Debug.AutoFlush%2A> do `true` oznacza, że dane zostaną opróżnione z buforu do strumienia, ale nie zostaną opróżnione stanu kodera. Dzięki temu kodera zapewnienie jego stan (częściowa znaków), aby ją poprawnie kodowanie kolejny blok znaków. Ten scenariusz dotyczy UTF8 i UTF7, w których niektóre znaki mogą być zakodowane tylko po kodera odbiera sąsiadujących znak lub znaki.  
  
 Aby ustawić <xref:System.Diagnostics.Debug.AutoFlush%2A> i <xref:System.Diagnostics.Debug.IndentSize%2A> dla <xref:System.Diagnostics.Debug>, można również edytować plik konfiguracji, odpowiadający nazwę aplikacji. Plik konfiguracyjny powinny być sformatowane, jak pokazano w poniższym przykładzie.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">za działanie z kodem niezarządzanym. Zapotrzebowanie wartość <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberSignature Language="F#" Value="static member Close : unit -&gt; unit" Usage="System.Diagnostics.Debug.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opróżnia bufor wyjściowy, a następnie wywołuje <see langword="Close" /> metody na każdym <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda danych wyjściowych trafia do pliku, takie jak do <xref:System.Diagnostics.TextWriterTraceListener>.  
  
 Opróżnianie strumienia nie opróżnić jego podstawowej kodera, chyba że jawnie wywołać <xref:System.Diagnostics.Debug.Flush%2A> lub <xref:System.Diagnostics.Debug.Close%2A>. Ustawienie <xref:System.Diagnostics.Debug.AutoFlush%2A> do `true` oznacza, że dane zostaną opróżnione z buforu do strumienia, ale nie zostaną opróżnione stanu kodera. Dzięki temu kodera zapewnienie jego stan (częściowa znaków), aby ją poprawnie kodowanie kolejny blok znaków. Ten scenariusz dotyczy UTF8 i UTF7, w których niektóre znaki mogą być zakodowane tylko po kodera odbiera sąsiadujących znak lub znaki.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TextWriterTraceListener> o nazwie `myTextListener`. `myTextListener` używa <xref:System.IO.StreamWriter> o nazwie `myOutputWriter` do zapisu w pliku o nazwie `TestFile.txt`. Przykład tworzy składnik zapisywania plików, stream i tekst, zapisuje jeden wiersz tekstu do pliku i następnie opróżnia i zamyka dane wyjściowe.  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">za działanie z kodem niezarządzanym. Zapotrzebowanie wartość <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Emituje komunikat o błędzie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Fail : string -&gt; unit" Usage="System.Diagnostics.Debug.Fail message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do emitowania.</param>
        <summary>Generuje określony komunikat o błędzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie jest to, że <xref:System.Diagnostics.DefaultTraceListener> wysyła wiadomości do okna komunikatu, gdy aplikacja jest uruchomiona w trybie interfejsu użytkownika oraz do <xref:System.Diagnostics.TraceListener> wystąpienia w <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji.  
  
> [!NOTE]
>  Wyświetlanie okna komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, okno komunikatu nie jest wyświetlana. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metody <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> , lub usunąć jedno z <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Diagnostics.Debug.Fail%2A> metodę, aby wydrukować komunikat podczas obsługi wyjątku.  
  
 [!code-cpp[Classic Debug.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#1)]  
  
 Można również użyć <xref:System.Diagnostics.Debug.Fail%2A> metody w instrukcji switch.  
  
 [!code-cpp[Classic Debug.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="static member Fail : string * string -&gt; unit" Usage="System.Diagnostics.Debug.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do emitowania.</param>
        <param name="detailMessage">Szczegółowy komunikat do emitowania.</param>
        <summary>Emituje komunikat o błędzie i szczegółowy komunikat o błędzie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie jest to, że <xref:System.Diagnostics.DefaultTraceListener> wysyła wiadomości do okna komunikatu, gdy aplikacja jest uruchomiona w trybie interfejsu użytkownika oraz do <xref:System.Diagnostics.TraceListener> wystąpienia w <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji.  
  
> [!NOTE]
>  Wyświetlanie okna komunikatu zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, okno komunikatu nie jest wyświetlana. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ &lt;wyczyść&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;Usuń&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metody <xref:System.Diagnostics.Trace.Listeners%2A> właściwości (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 To zachowanie można dostosować, dodając <xref:System.Diagnostics.TraceListener> , lub usunąć jedno z <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Diagnostics.Debug.Fail%2A> metodę, aby wydrukować komunikat podczas obsługi wyjątku.  
  
 [!code-cpp[Classic Debug.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#1)]  
  
 Można również użyć <xref:System.Diagnostics.Debug.Fail%2A> metody w instrukcji switch.  
  
 [!code-cpp[Classic Debug.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Diagnostics.Debug.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opróżnia bufor danych wyjściowych i powoduje, że buforowane dane do zapisania <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Opróżnianie strumienia nie opróżnić jego podstawowej kodera, chyba że jawnie wywołać <xref:System.Diagnostics.Debug.Flush%2A> lub <xref:System.Diagnostics.Debug.Close%2A>. Ustawienie <xref:System.Diagnostics.Debug.AutoFlush%2A> do `true` oznacza, że dane zostaną opróżnione z buforu do strumienia, ale nie zostaną opróżnione stanu kodera. Dzięki temu kodera zapewnienie jego stan (częściowa znaków), aby ją poprawnie kodowanie kolejny blok znaków. Ten scenariusz dotyczy UTF8 i UTF7, w których niektóre znaki mogą być zakodowane tylko po kodera odbiera sąsiadujących znak lub znaki.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TextWriterTraceListener> o nazwie `myTextListener`. `myTextListener` używa <xref:System.IO.FileStream> o nazwie `myFileStream` do zapisu w pliku o nazwie `TestFile.txt`. Przykład tworzy strumień, otwiera plik, jeśli istnieje lub tworzy nowy, zapisuje jeden wiersz tekstu do pliku, a następnie opróżnia i zamyka dane wyjściowe.  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberSignature Language="F#" Value="static member Indent : unit -&gt; unit" Usage="System.Diagnostics.Debug.Indent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwiększa bieżącego <see cref="P:System.Diagnostics.Debug.IndentLevel" /> o jeden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ustawia poziom wcięcia i emituje komunikaty debugowania.  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 Ten przykład generuje następujące wyniki:  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Unindent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IndentLevel : int with get, set" Usage="System.Diagnostics.Debug.IndentLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia poziom wcięcia.</summary>
        <value>Poziom wcięcia. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Debug.IndentLevel%2A> Właściwość reprezentuje liczbę wcięcie o rozmiarze <xref:System.Diagnostics.Debug.IndentSize%2A> jest stosowany.  
  
   
  
## Examples  
 Poniższy przykład ustawia poziom wcięcia i emituje komunikaty debugowania.  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 Ten przykład generuje następujące wyniki:  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IndentSize : int with get, set" Usage="System.Diagnostics.Debug.IndentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę spacji w wcięcia.</summary>
        <value>Liczba miejsc do magazynowania w wcięcia. Wartość domyślna to cztery.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Diagnostics.TextWriterTraceListener> interpretuje ten numer jako miejsca do magazynowania. <xref:System.Diagnostics.EventLogTraceListener> Ignoruje tę wartość.  
  
 Aby ustawić <xref:System.Diagnostics.Debug.AutoFlush%2A> i <xref:System.Diagnostics.Debug.IndentSize%2A> dla <xref:System.Diagnostics.Debug>, można również edytować plik konfiguracji, odpowiadający nazwę aplikacji. Plik konfiguracyjny powinny być sformatowane, jak pokazano w poniższym przykładzie.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Listeners : System.Diagnostics.TraceListenerCollection" Usage="System.Diagnostics.Debug.Listeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję obiektów nasłuchujących monitorującym danych wyjściowych debugowania.</summary>
        <value>A <see cref="T:System.Diagnostics.TraceListenerCollection" /> reprezentuje kolekcję typu <see cref="T:System.Diagnostics.TraceListener" /> monitorująca danych wyjściowych debugowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Odbiorniki tworzyć sformatowane dane wyjściowe z danych wyjściowych debugowania. Domyślnie kolekcja zawiera wystąpienie <xref:System.Diagnostics.DefaultTraceListener> klasy. Aby usunąć odbiornik domyślne, wywołaj <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> metody i przekazać go wystąpienie <xref:System.Diagnostics.DefaultTraceListener>. Aby przekierować dane wyjściowe w oknie konsoli, należy dodać wystąpienia <xref:System.Diagnostics.ConsoleTraceListener>. Aby przekierować dane wyjściowe do pliku lub strumienia, dodaje wystąpienie <xref:System.Diagnostics.TextWriterTraceListener>.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug.Listeners%2A> Kolekcji jest współużytkowany przez oba <xref:System.Diagnostics.Debug> i <xref:System.Diagnostics.Trace> klasy; Dodawanie odbiornika śledzenia, albo klasą dodaje odbiornika na wartość oba.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TextWriterTraceListener> wyjściowe ekranu konsoli. Ten kod dodaje nowy odbiornik do <xref:System.Diagnostics.Debug.Listeners%2A>.  
  
 [!code-cpp[Classic Debug.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">za działanie z kodem niezarządzanym. Zapotrzebowanie wartość <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Print">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje komunikat, a następnie terminator wiersza do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Print : string -&gt; unit" Usage="System.Diagnostics.Debug.Print message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat, a następnie terminator wiersza do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Terminator wiersza domyślną jest znak powrotu karetki i wysuwu wiersza. Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Print : string * obj[] -&gt; unit" Usage="System.Diagnostics.Debug.Print (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu złożonego, który zawiera tekst zmieszać z zero lub więcej elementów formatu, które odnoszą się do obiektów w <c>args</c> tablicy.</param>
        <param name="args">Tablica obiektów zawierających zero lub więcej obiektów do sformatowania.</param>
        <summary>Zapisuje sformatowany ciąg, a następnie terminator wiersza do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa programu .NET Framework, aby dokonać konwersji wartości obiektu na jego reprezentację tekstową i osadza tę reprezentację w ciągu. Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> jest nieprawidłowy.  - lub - liczba, która określa argument do formatowania jest mniejsza od zera, lub większa niż lub równe liczbie określonych obiektów do sformatowania.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberSignature Language="F#" Value="static member Unindent : unit -&gt; unit" Usage="System.Diagnostics.Debug.Unindent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zmniejsza bieżące <see cref="P:System.Diagnostics.Debug.IndentLevel" /> o jeden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ustawia poziom wcięcia i emituje komunikaty debugowania.  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 Ten przykład generuje następujące wyniki:  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Indent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje na temat debugowania do detektorów śledzenia w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : obj -&gt; unit" Usage="System.Diagnostics.Debug.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, którego nazwa jest wysyłany do <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <summary>Zapisuje wartość obiektu <see cref="M:System.Object.ToString" /> metody do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Write : string -&gt; unit" Usage="System.Diagnostics.Debug.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje komunikat do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member Write : obj * string -&gt; unit" Usage="System.Diagnostics.Debug.Write (value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, którego nazwa jest wysyłany do <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Nazwa kategorii i wartość obiektu <see cref="M:System.Object.ToString" /> metody do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Użyj `category` parametru do grupy danych wyjściowych komunikatów.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member Write : string * string -&gt; unit" Usage="System.Diagnostics.Debug.Write (message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Zapisuje nazwa kategorii i komunikat do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Użyj `category` parametru do grupy danych wyjściowych komunikatów.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje na temat debugowania do detektorów śledzenia w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * obj -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, wartości są zapisywane do śledzenia słuchaczy w kolekcji.</param>
        <param name="value">Obiekt, którego nazwa jest wysyłany do <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <summary>Zapisuje wartość obiektu <see cref="M:System.Object.ToString" /> metody do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższym, przykład generuje imię wartość parametru <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje komunikat w tym samym wierszu jako pierwszy komunikat. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności instrumentacji aplikacji za pomocą <see langword="If...Then" /> instrukcji zamiast <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> instrukcji. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Pierwszy przykład jest jednak szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" />, nie należy wywoływać metody <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i są generowane żadne dane wyjściowe śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  Pierwszy przykład: ```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
``` drugi przykład:  ```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, zostanie napisany komunikat do śledzenia słuchaczy w kolekcji.</param>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje komunikat do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Informacje o dodawaniu odbiornik do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności instrumentacji aplikacji za pomocą <see langword="If...Then" /> instrukcji zamiast <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> instrukcji. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Pierwszy przykład jest jednak szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" />, nie należy wywoływać metody <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i są generowane żadne dane wyjściowe śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  Pierwszy przykład: ```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
``` drugi przykład:  ```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * obj * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, nazwa kategorii i wartości, które są zapisywane do śledzenia słuchaczy w kolekcji.</param>
        <param name="value">Obiekt, którego nazwa jest wysyłany do <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Nazwa kategorii i wartość obiektu <see cref="M:System.Object.ToString" /> metody do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametru może służyć do grupowania wyjściowych komunikatów.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Verbose`, przykład generuje nazwę `myObject` i `category` do <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Error` lub wyższym, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności instrumentacji aplikacji za pomocą <see langword="If...Then" /> instrukcji zamiast <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> instrukcji. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Pierwszy przykład jest jednak szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" />, nie należy wywoływać metody <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i są generowane żadne dane wyjściowe śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  Pierwszy przykład: ```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
``` drugi przykład:  ```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * string * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, nazwa kategorii i wiadomości są zapisywane do śledzenia słuchaczy w kolekcji.</param>
        <param name="message">Komunikat do zapisu.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Zapisuje nazwa kategorii i komunikat do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametru może służyć do grupowania wyjściowych komunikatów.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Verbose`, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Error` lub wyższym, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności instrumentacji aplikacji za pomocą <see langword="If...Then" /> instrukcji zamiast <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> instrukcji. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Pierwszy przykład jest jednak szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" />, nie należy wywoływać metody <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i są generowane żadne dane wyjściowe śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  Pierwszy przykład: ```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
``` drugi przykład:  ```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje na temat debugowania do detektorów śledzenia w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, którego nazwa jest wysyłany do <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <summary>Zapisuje wartość obiektu <see cref="M:System.Object.ToString" /> metody do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje nazwę obiektu, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje komunikat, a następnie terminator wiersza do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteLine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine (value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, którego nazwa jest wysyłany do <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Nazwa kategorii i wartość obiektu <see cref="M:System.Object.ToString" /> metody do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametru może służyć do grupowania wyjściowych komunikatów.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Drugi komunikat następuje terminator wiersza.  
  
 [!code-cpp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj[] -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Ciąg formatu złożonego, który zawiera tekst zmieszać z zero lub więcej elementów formatu, które odnoszą się do obiektów w <c>args</c> tablicy.</param>
        <param name="args">Tablica obiektów zawiera zero lub więcej obiektów do sformatowania.</param>
        <summary>Zapisuje sformatowany komunikat, a następnie terminator wiersza do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda używa programu .NET Framework, aby dokonać konwersji wartości obiektu na jego reprezentację tekstową i osadza tę reprezentację w ciągu.  
  
 Słowo kluczowe w składni dla tej metody oznacza, że tablica obiektów może być pojedynczą wartość. Wyjątkiem jest <xref:System.String> obiektu. Jawne przeciążenia pierwszeństwo, dlatego `arg` domyślnie zostanie wartość pojedynczy ciąg <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> przeciążenia.  
  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> metoda odbiornik śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine (message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do zapisu.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Zapisuje nazwa kategorii i komunikat do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametru może służyć do grupowania wyjściowych komunikatów.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> jest ustawiona na `Verbose`, przykład generuje drugi komunikat o błędzie i `category` w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje na temat debugowania do detektorów śledzenia w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * obj -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, wartości są zapisywane do śledzenia słuchaczy w kolekcji.</param>
        <param name="value">Obiekt, którego nazwa jest wysyłany do <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <summary>Zapisuje wartość obiektu <see cref="M:System.Object.ToString" /> metody do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje nazwę obiektu, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności instrumentacji aplikacji za pomocą <see langword="If...Then" /> instrukcji zamiast <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> instrukcji. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Pierwszy przykład jest jednak szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" />, nie należy wywoływać metody <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i są generowane żadne dane wyjściowe śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  Pierwszy przykład: ```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
``` drugi przykład:  ```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, zostanie napisany komunikat do śledzenia słuchaczy w kolekcji.</param>
        <param name="message">Komunikat do zapisu.</param>
        <summary>Zapisuje komunikat do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Informacje o dodawaniu odbiornik do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności instrumentacji aplikacji za pomocą <see langword="If...Then" /> instrukcji zamiast <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> instrukcji. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Pierwszy przykład jest jednak szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" />, nie należy wywoływać metody <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i są generowane żadne dane wyjściowe śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  Pierwszy przykład: ```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
``` drugi przykład:  ```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * obj * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Wyrażenie warunkowe do oceny. Jeśli warunek nie jest <see langword="true" />, nazwa kategorii i wartości, które są zapisywane do śledzenia słuchaczy w kolekcji.</param>
        <param name="value">Obiekt, którego nazwa jest wysyłany do <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Nazwa kategorii i wartość obiektu <see cref="M:System.Object.ToString" /> metody do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametru może służyć do grupowania wyjściowych komunikatów.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> ustawiono `Verbose`, przykład generuje drugi komunikat o błędzie, w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności instrumentacji aplikacji za pomocą <see langword="If...Then" /> instrukcji zamiast <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> instrukcji. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Pierwszy przykład jest jednak szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" />, nie należy wywoływać metody <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i są generowane żadne dane wyjściowe śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  Pierwszy przykład: ```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
``` drugi przykład:  ```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * string * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <see langword="true" /> Aby spowodować, że komunikat do zapisania; w przeciwnym razie <see langword="false" />.</param>
        <param name="message">Komunikat do zapisu.</param>
        <param name="category">Nazwa kategorii, używana do organizowania danych wyjściowych.</param>
        <summary>Zapisuje nazwa kategorii i komunikat do śledzenia słuchaczy w <see cref="P:System.Diagnostics.Debug.Listeners" /> kolekcji, jeśli warunek jest <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie plik wyjściowy zostanie zapisany do wystąpienia <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Parametru może służyć do grupowania wyjściowych komunikatów.  
  
 Ta metoda wywołuje <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> metoda odbiornik śledzenia.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Diagnostics.TraceSwitch> o nazwie `generalSwitch`. Ten przełącznik ma wartość poza przykładowy kod.  
  
 Jeśli przełącznik jest równa <xref:System.Diagnostics.TraceLevel> `Error` lub wyższa, przykład generuje pierwszy komunikat o błędzie <xref:System.Diagnostics.Debug.Listeners%2A>. Instrukcje dotyczące dodanie detektora do <xref:System.Diagnostics.Debug.Listeners%2A> kolekcji, zobacz <xref:System.Diagnostics.TraceListenerCollection> klasy.  
  
 Następnie, jeśli <xref:System.Diagnostics.TraceLevel> jest ustawiona na `Verbose`, przykład generuje drugi komunikat o błędzie i `category` w tym samym wierszu jako pierwszego komunikatu. Terminator wiersza następuje drugi komunikat.  
  
 [!code-cpp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Można zminimalizować spadek wydajności instrumentacji aplikacji za pomocą <see langword="If...Then" /> instrukcji zamiast <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> instrukcji. Poniższe dwa przykłady kodu wysyłają ten sam komunikat debugowania. Pierwszy przykład jest jednak szybciej, gdy śledzenie jest wyłączone, ponieważ jeśli <c>mySwitch.TraceError</c> daje w wyniku <see langword="false" />, nie należy wywoływać metody <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. Drugi przykład zawsze wywołuje <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />nawet wtedy, gdy <c>mySwitch.TraceError</c> jest <see langword="false" /> i są generowane żadne dane wyjściowe śledzenia. Może to spowodować niepotrzebne wykonanie dowolnie złożonego kodu.  Pierwszy przykład: ```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
``` drugi przykład:  ```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>