<Type Name="EventInstance" FullName="System.Diagnostics.EventInstance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fff264b79bf01048e94fc0dd621172b404fbb231" /><Meta Name="ms.sourcegitcommit" Value="37f75368be2e569ad59341f3fc6261b76b89db9d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/07/2019" /><Meta Name="ms.locfileid" Value="56790448" /></Metadata><TypeSignature Language="C#" Value="public class EventInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventInstance" />
  <TypeSignature Language="VB.NET" Value="Public Class EventInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInstance" />
  <TypeSignature Language="F#" Value="type EventInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Przedstawia informacje neutralne od języka dla wpisu dziennika zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventInstance> , aby zapisać wpis dziennika zdarzeń z identyfikatorem zasobu, a nie wartością ciągu. Aby zapisać wpis dziennika zdarzeń, zainicjuj <xref:System.Diagnostics.EventInstance.InstanceId%2A> Właściwość i przekaż wystąpienie <xref:System.Diagnostics.EventLog.WriteEvent%2A> do metody. Podgląd zdarzeń używa identyfikatora wystąpienia, aby znaleźć i wyświetlić odpowiedni ciąg z zlokalizowanego pliku zasobów na podstawie bieżących ustawień języka. Przed zapisaniem zdarzeń przy użyciu identyfikatorów zasobów należy zarejestrować źródło zdarzeń z odpowiednim plikiem zasobów.  
  
 Podczas pisania zdarzeń można ustawić <xref:System.Diagnostics.EventInstance.EntryType%2A> właściwość, aby określić ikonę, która Podgląd zdarzeń wyświetlana dla wpisu. Możesz również określić <xref:System.Diagnostics.EventInstance.CategoryId%2A> właściwość, aby określić kategorię wyświetlaną dla wpisu w Podgląd zdarzeń.  
  
 Podgląd zdarzeń używa kategorii do filtrowania zdarzeń utworzonych przez Źródło zdarzenia. Podgląd zdarzeń może wyświetlić kategorię jako wartość liczbową lub użyć kategorii jako identyfikatora zasobu, aby wyświetlić zlokalizowany ciąg kategorii.  
  
 Aby wyświetlić zlokalizowane ciągi kategorii w Podgląd zdarzeń, należy użyć źródła zdarzenia skonfigurowanego z plikiem zasobów kategorii i ustawić <xref:System.Diagnostics.EventInstance.CategoryId%2A> wartość na identyfikator zasobu w kategorii plik zasobów. Jeśli źródło zdarzenia nie ma skonfigurowanego pliku zasobów kategorii lub określony <xref:System.Diagnostics.EventInstance.CategoryId%2A> obiekt nie indeksuje ciąg w pliku zasobów kategorii, a następnie Podgląd zdarzeń wyświetla wartość liczbową kategorii dla tego wpisu. Skonfiguruj plik zasobów kategorii wraz z liczbą ciągów kategorii w pliku zasobu, używając <xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventSourceCreationData> lub klasy.  
  
 Przed rozpoczęciem <xref:System.Diagnostics.EventInstance> pisania zdarzenia <xref:System.Diagnostics.EventLog.WriteEvent%2A> za pomocą metody należy zarejestrować Źródło dziennika zdarzeń. Źródło musi być skonfigurowane do zapisywania zlokalizowanych wpisów w dzienniku, a źródło musi definiować co najmniej plik zasobów komunikatów.  
  
 Utwórz nowe źródło zdarzenia podczas instalacji aplikacji. Pozwala to czas na odświeżenie listy zarejestrowanych źródeł zdarzeń i ich konfiguracji przez system operacyjny. Jeśli system operacyjny nie odświeżył swojej listy źródeł zdarzeń i podjęto próbę zapisania zdarzenia z nowym źródłem, operacja zapisu zakończy się niepowodzeniem. Nowe źródło można skonfigurować przy użyciu <xref:System.Diagnostics.EventLogInstaller>lub <xref:System.Diagnostics.EventLog.CreateEventSource%2A> przy użyciu metody. Aby utworzyć nowe źródło zdarzeń, musisz mieć uprawnienia administracyjne na komputerze.  
  
 Aby uzyskać szczegółowe informacje na temat definiowania komunikatów o zdarzeniach i tworzenia plików zasobów dziennika zdarzeń, zobacz temat "kompilator komunikatów" w dokumentacji [http://msdn.microsoft.com](https://msdn.microsoft.com)zestawu SDK platformy pod adresem.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenia informacyjnego, a następnie ponownie używa programu <xref:System.Diagnostics.EventInstance> w celu zapisania wpisu dla zdarzenia ostrzegawczego w istniejącym dzienniku zdarzeń. Tekst komunikatu o zdarzeniu jest określany przy użyciu identyfikatora zasobu w pliku zasobów wiadomości. W przykładzie kodu założono, że odpowiedni plik zasobów wiadomości został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventInstance" /> klasy za pomocą informacji neutralnych dla języka w celu zdefiniowania wpisu dziennika zdarzeń.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instanceId">Identyfikator zasobu, który odnosi się do ciągu zdefiniowanego w pliku zasobów komunikatu źródła zdarzenia.</param>
        <param name="categoryId">Identyfikator zasobu, który odnosi się do ciągu zdefiniowanego w pliku zasobów kategorii źródła zdarzenia lub zero, aby określić brak kategorii dla zdarzenia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventInstance" /> klasy przy użyciu określonych identyfikatorów zasobów dla zlokalizowanego komunikatu i tekstu kategorii wpisu zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby napisać wpis informacyjny do dziennika zdarzeń, zainicjuj <xref:System.Diagnostics.EventInstance> i przekaż go <xref:System.Diagnostics.EventLog.WriteEvent%2A> do metody. Ustaw wartość <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> na identyfikator zasobu komunikatu o zdarzeniu w odpowiedniej właściwości źródłowej. `instanceId` Ustaw wartość <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> `categoryId` do kategorii liczbowej lub identyfikator zasobu kategorii zdarzenia we właściwości źródło; Ustaw zero dla kategorii zdarzenia. `categoryId` Właściwość nowego wystąpienia jest domyślnie ustawiona na <xref:System.Diagnostics.EventLogEntryType.Information> wartość. <xref:System.Diagnostics.EventInstance.EntryType%2A>  
  
 Podgląd zdarzeń używa identyfikatorów zasobów do wyświetlania odpowiednich ciągów z zlokalizowanych plików zasobów dla źródła. Aby można było pisać zdarzenia przy użyciu identyfikatorów zasobów, należy zarejestrować źródło z odpowiednimi plikami zasobów.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenia informacyjnego, a następnie ponownie używa programu <xref:System.Diagnostics.EventInstance> w celu zapisania wpisu dla zdarzenia ostrzegawczego w istniejącym dzienniku zdarzeń. Tekst komunikatu o zdarzeniu jest określany przy użyciu identyfikatora zasobu w pliku zasobów wiadomości. W przykładzie kodu założono, że odpowiedni plik zasobów wiadomości został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr jest wartością ujemną lub wartością większą niż <see cref="F:System.UInt32.MaxValue" />. <paramref name="instanceId" />  
  
—lub— 
Parametr jest wartością ujemną lub wartością większą niż <see cref="F:System.UInt16.MaxValue" />. <paramref name="categoryId" /></exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId, valuetype System.Diagnostics.EventLogEntryType entryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer, entryType As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId, System::Diagnostics::EventLogEntryType entryType);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int * System.Diagnostics.EventLogEntryType -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId, entryType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
        <Parameter Name="entryType" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="instanceId">Identyfikator zasobu, który odnosi się do ciągu zdefiniowanego w pliku zasobów komunikatu źródła zdarzenia.</param>
        <param name="categoryId">Identyfikator zasobu, który odnosi się do ciągu zdefiniowanego w pliku zasobów kategorii źródła zdarzenia lub zero, aby określić brak kategorii dla zdarzenia.</param>
        <param name="entryType"><see cref="T:System.Diagnostics.EventLogEntryType" /> Wartość, która wskazuje typ zdarzenia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventInstance" /> klasy przy użyciu określonych identyfikatorów zasobów dla zlokalizowanego komunikatu i tekstu kategorii wpisu zdarzenia i określonego typu wpisu dziennika zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby napisać wpis do dziennika zdarzeń, zainicjuj <xref:System.Diagnostics.EventInstance> i przekaż go <xref:System.Diagnostics.EventLog.WriteEvent%2A> do metody. Ustaw wartość <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> na identyfikator zasobu komunikatu o zdarzeniu w odpowiedniej właściwości źródłowej. `instanceId` Ustaw wartość <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> `categoryId` do kategorii liczbowej lub identyfikator zasobu kategorii zdarzenia we właściwości źródło; Ustaw zero dla kategorii zdarzenia. `categoryId`  
  
 Podgląd zdarzeń używa identyfikatorów zasobów do wyświetlania odpowiednich ciągów z zlokalizowanych plików zasobów dla źródła. Aby można było pisać zdarzenia przy użyciu identyfikatorów zasobów, należy zarejestrować źródło z odpowiednimi plikami zasobów.  
  
 Ustaw wartość `entryType` na jeden ze wstępnie zdefiniowanych typów wpisów. Podgląd zdarzeń używa typu zdarzenia, aby określić, która ikona ma być wyświetlana w widoku listy dziennika zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje dwa wpisy zdarzeń inspekcji w dzienniku `myNewLog`zdarzeń. Przykładowy kod tworzy nowe źródło zdarzeń i nowy dziennik zdarzeń, jeśli nie istnieją na komputerze lokalnym. Tekst komunikatu o zdarzeniu jest określany przy użyciu identyfikatora zasobu w pliku zasobów.  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="entryType" />nie jest prawidłową <see cref="T:System.Diagnostics.EventLogEntryType" /> wartością.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="instanceId" />jest wartością ujemną lub większą niż <see cref="F:System.UInt32.MaxValue" />.  
  
—lub— 
 <paramref name="categoryId" />jest wartością ujemną lub większą niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName="CategoryId">
      <MemberSignature Language="C#" Value="public int CategoryId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.CategoryId" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryId : int with get, set" Usage="System.Diagnostics.EventInstance.CategoryId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia identyfikator zasobu określający kategorię wpisu zdarzenia zdefiniowanego przez aplikację.</summary>
        <value>Liczbowa wartość kategorii lub identyfikator zasobu, który odpowiada ciągowi zdefiniowanemu w pliku zasobów kategorii źródła zdarzenia. Wartością domyślną jest zero, co oznacza, że dla wpisu zdarzenia nie zostanie wyświetlona żadna Kategoria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kategorie dzienników zdarzeń to wartości zdefiniowane przez aplikację, które pomagają filtrować zdarzenia, lub zawierają dodatkowe informacje o zdarzeniu. Na przykład aplikacja może definiować oddzielne kategorie dla różnych składników lub różnych operacji.  
  
 <xref:System.Diagnostics.EventInstance.CategoryId%2A> Ustaw właściwość, aby określić kategorię wyświetlaną dla wpisu w Podgląd zdarzeń. W Podgląd zdarzeń można wyświetlić kategorię jako wartość liczbową lub użyć <xref:System.Diagnostics.EventInstance.CategoryId%2A> identyfikatora zasobu, aby wyświetlić zlokalizowany ciąg kategorii na podstawie bieżących ustawień języka.  
  
 Aby wyświetlić zlokalizowane ciągi kategorii w Podgląd zdarzeń, należy użyć źródła zdarzenia skonfigurowanego z plikiem zasobów kategorii i ustawić <xref:System.Diagnostics.EventInstance.CategoryId%2A> wartość na identyfikator zasobu w kategorii plik zasobów. Jeśli źródło zdarzenia nie ma skonfigurowanego pliku zasobów kategorii lub określony <xref:System.Diagnostics.EventInstance.CategoryId%2A> obiekt nie indeksuje ciąg w pliku zasobów kategorii, a następnie Podgląd zdarzeń wyświetla wartość liczbową kategorii dla tego wpisu.  
  
 Przed zapisaniem kategorii zdarzeń przy użyciu identyfikatorów zasobów należy zarejestrować źródło z odpowiednim plikiem zasobów. Skonfiguruj plik zasobów kategorii wraz z liczbą ciągów kategorii w pliku zasobu, używając <xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventSourceCreationData> lub klasy. Podczas definiowania ciągów kategorii w pliku zasobów, identyfikatory zasobów kategorii muszą być numerowane kolejno od 1 do skonfigurowanej <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> wartości właściwości.  
  
 Kategorie zdarzeń są opcjonalne. Jeśli aplikacja nie korzysta z kategorii, nie ustawiaj <xref:System.Diagnostics.EventInstance.CategoryId%2A> dla wpisu dziennika zdarzeń.  
  
 Aby uzyskać szczegółowe informacje o definiowaniu komunikatów o zdarzeniach i tworzeniu plików zasobów zdarzeń, zobacz temat "kompilator komunikatów" w dokumentacji [http://msdn.microsoft.com](https://msdn.microsoft.com/)zestawu SDK platformy pod adresem. Aby uzyskać szczegółowe informacje na temat definiowania kategorii zdarzeń w plikach zasobów, zobacz temat "Kategorie zdarzeń" w zestawie SDK platformy  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenia informacyjnego, a następnie ponownie używa programu <xref:System.Diagnostics.EventInstance> w celu zapisania wpisu dla zdarzenia ostrzegawczego w istniejącym dzienniku zdarzeń. Tekst komunikatu o zdarzeniu jest określany przy użyciu identyfikatora zasobu w pliku zasobów wiadomości. W przykładzie kodu założono, że odpowiedni plik zasobów wiadomości został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Właściwość jest ustawiona na wartość ujemną lub do wartości większej niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); void set(System::Diagnostics::EventLogEntryType value); };" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Diagnostics.EventLogEntryType with get, set" Usage="System.Diagnostics.EventInstance.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ zdarzenia wpisu dziennika zdarzeń.</summary>
        <value><see cref="T:System.Diagnostics.EventLogEntryType" /> Wartość wskazująca typ wpisu zdarzenia. Wartość domyślna to <see cref="F:System.Diagnostics.EventLogEntryType.Information" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde zdarzenie jest typu pojedynczego, którego aplikacja wskazuje, gdy raport o zdarzeniu. Podgląd zdarzeń używa typu zdarzenia, aby określić, która ikona ma być wyświetlana w widoku listy dziennika zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenia informacyjnego, a następnie ponownie używa programu <xref:System.Diagnostics.EventInstance> w celu zapisania wpisu dla zdarzenia ostrzegawczego w istniejącym dzienniku zdarzeń. Tekst komunikatu o zdarzeniu jest określany przy użyciu identyfikatora zasobu w pliku zasobów wiadomości. W przykładzie kodu założono, że odpowiedni plik zasobów wiadomości został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Właściwość nie ma ustawionej prawidłowej <see cref="T:System.Diagnostics.EventLogEntryType" /> wartości.</exception>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : int64 with get, set" Usage="System.Diagnostics.EventInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia identyfikator zasobu, który wyznacza tekst komunikatu wpisu zdarzenia.</summary>
        <value>Identyfikator zasobu, który odnosi się do ciągu zdefiniowanego w pliku zasobów komunikatu źródła zdarzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventInstance.InstanceId%2A> Właściwość jednoznacznie identyfikuje wpis zdarzenia dla skonfigurowanego źródła zdarzenia. Dla zdarzeń zdefiniowanych w plikach zasobów komunikatów, <xref:System.Diagnostics.EventInstance.InstanceId%2A> odpowiada identyfikatorowi zasobu skompilowanemu z pól definicji komunikatu w pliku tekstowym komunikatu. Aplikacja może zapisywać zlokalizowane wpisy dziennika zdarzeń, ustawiając wartość <xref:System.Diagnostics.EventInstance.InstanceId%2A> na identyfikator zasobu. Podgląd zdarzeń używa <xref:System.Diagnostics.EventInstance.InstanceId%2A> identyfikatora zasobu do znajdowania i wyświetlania odpowiedniego ciągu z zlokalizowanego pliku zasobów na podstawie bieżących ustawień języka. Przed zapisaniem zdarzeń przy użyciu identyfikatorów zasobów należy zarejestrować źródło z odpowiednim plikiem zasobów.  
  
 Aby uzyskać szczegółowe informacje na temat definiowania komunikatów o zdarzeniach i tworzenia plików zasobów dziennika zdarzeń, zobacz temat "kompilator komunikatów" w dokumentacji [http://msdn.microsoft.com](https://msdn.microsoft.com/)zestawu SDK platformy pod adresem. Aby uzyskać szczegółowe informacje na temat identyfikatorów dzienników zdarzeń, zobacz temat "identyfikatory zdarzeń" w zestawie SDK platformy.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenia informacyjnego, a następnie ponownie używa programu <xref:System.Diagnostics.EventInstance> w celu zapisania wpisu dla zdarzenia ostrzegawczego w istniejącym dzienniku zdarzeń. Tekst komunikatu o zdarzeniu jest określany przy użyciu identyfikatora zasobu w pliku zasobów wiadomości. W przykładzie kodu założono, że odpowiedni plik zasobów wiadomości został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 W przykładzie kodu jest użyty następujący plik tekstowy komunikatu, wbudowany w bibliotekę zasobów EventLogMsgs. dll. Plik tekstowy komunikatu jest źródłem, z którego tworzony jest plik zasobów wiadomości. Plik tekstowy komunikatu określa identyfikatory zasobów i tekst dla kategorii, komunikat zdarzenia i ciągi wstawiania parametrów.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Właściwość jest ustawiona na wartość ujemną lub do wartości większej niż <see cref="F:System.UInt32.MaxValue" />.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
  </Members>
</Type>