<Type Name="EventInstance" FullName="System.Diagnostics.EventInstance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fff264b79bf01048e94fc0dd621172b404fbb231" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56790448" /></Metadata><TypeSignature Language="C#" Value="public class EventInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventInstance" />
  <TypeSignature Language="VB.NET" Value="Public Class EventInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInstance" />
  <TypeSignature Language="F#" Value="type EventInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje informacje niezależny od języka dla wpis dziennika zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.EventInstance> Aby zapisać wpis dziennika zdarzeń z identyfikatorem zasobu, a nie wartość ciągu. Aby zapisać wpis dziennika zdarzeń, należy zainicjować <xref:System.Diagnostics.EventInstance.InstanceId%2A> właściwości i przekaż wystąpienie <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody. Podgląd zdarzeń używa identyfikatora wystąpienia, aby znaleźć i wyświetlić odpowiedni ciąg z pliku zlokalizowanych zasobów, w oparciu o bieżące ustawienia języka. Źródła zdarzeń należy zarejestrować przy użyciu odpowiedniego pliku zasobów, przed przystąpieniem do napisania zdarzenia przy użyciu identyfikatorów zasobów.  
  
 Podczas zapisywania zdarzenia, można ustawić <xref:System.Diagnostics.EventInstance.EntryType%2A> właściwości w celu określenia ikonę, która podglądu zdarzeń wyświetlane wpisu. Można również określić <xref:System.Diagnostics.EventInstance.CategoryId%2A> właściwości w celu określenia kategorii, która podglądu zdarzeń wyświetlane wpisu.  
  
 Podgląd zdarzeń używa kategorii, aby filtrować zdarzenia zapisywane przez źródła zdarzenia. Podgląd zdarzeń, można wyświetlić kategorii jako wartość liczbową lub kategorii go używać jako identyfikator zasobu, do wyświetlenia ciągu zlokalizowanej kategorii.  
  
 Aby wyświetlić kategorii zlokalizowanych ciągów w Podglądzie zdarzeń, należy użyć źródła zdarzeń skonfigurowany z pliku zasobów kategorii, a następnie ustaw <xref:System.Diagnostics.EventInstance.CategoryId%2A> identyfikator zasobu w pliku zasobów kategorii. Jeśli źródło zdarzeń nie jest plikiem zasobów skonfigurowanych kategorii lub określone <xref:System.Diagnostics.EventInstance.CategoryId%2A> indeksu ciągu w pliku zasobów kategorii, a następnie w Podglądzie zdarzeń jest wyświetlana jest wartość liczbową kategorii dla tego wpisu. Konfigurowanie pliku zasobów kategorii, wraz z liczbą parametrów kategorii w pliku zasobów za pomocą <xref:System.Diagnostics.EventLogInstaller> lub <xref:System.Diagnostics.EventSourceCreationData> klasy.  
  
 Przed użyciem należy zarejestrować źródło dziennika zdarzeń <xref:System.Diagnostics.EventInstance> można zapisać zdarzenia o <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody. Źródło musi być skonfigurowany do zapisywania zlokalizowanego wpisy w dzienniku i źródła należy zdefiniować co najmniej jeden plik zasobów wiadomości.  
  
 Utwórz nowe źródło zdarzeń podczas instalacji aplikacji. Dzięki temu czas na odświeżenie listy źródeł zarejestrowanych zdarzeń i ich konfiguracji systemu operacyjnego. Jeśli system operacyjny nie odświeżył swoją listę źródeł zdarzeń, a użytkownik podejmie próbę zapisu zdarzenia o nowe źródło operacja zapisu zakończy się niepowodzeniem. Można skonfigurować nowe źródła, używając <xref:System.Diagnostics.EventLogInstaller>, lub za pomocą <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metody. Musi mieć uprawnienia administracyjne na komputerze, aby utworzyć nowe źródło zdarzeń.  
  
 Aby szczegółowe informacje dotyczące definiowania komunikaty o zdarzeniach i tworzenie plików zasobów dziennika zdarzeń, zobacz temat "Komunikatów kompilatora" w dokumentacji zestawu SDK platformy, na [ http://msdn.microsoft.com ](https://msdn.microsoft.com).  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenie informacyjne, a następnie ponownie używa <xref:System.Diagnostics.EventInstance> zapisu zdarzenie ostrzeżenia do istniejącego dziennika zdarzeń. Tekst komunikatu o zdarzeniu jest określony, przy użyciu identyfikatora zasobu w pliku zasobów komunikatów. Przykład kodu zakłada, że odpowiedni plik zasobów komunikat został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventInstance" /> klasy przy użyciu informacji o niezależny od języka, aby zdefiniować wpis dziennika zdarzeń.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instanceId">Identyfikator zasobu, który odpowiada ciągowi zdefiniowane w pliku zasobów komunikatów źródła zdarzeń.</param>
        <param name="categoryId">Identyfikator zasobu, który odpowiada ciągowi zdefiniowane w pliku zasobów kategorii źródła zdarzeń lub zero, aby określić Brak kategorii zdarzenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventInstance" /> zlokalizowanego tekstu wiadomości i kategorii wpisu zdarzeń przy użyciu identyfikatorów określonego zasobu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zapisu informacyjny w dzienniku zdarzeń, należy zainicjować <xref:System.Diagnostics.EventInstance> i przekazać ją do <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody. Ustaw `instanceId` identyfikator zasobu komunikatów o zdarzeniach w odpowiednich <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwości dla źródła. Ustaw `categoryId` wartości liczbowych kategorii lub identyfikator zasobu dla kategorii zdarzeń w <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości źródła; ustaw `categoryId` zero dla żadnej kategorii zdarzenia. <xref:System.Diagnostics.EventInstance.EntryType%2A> Nowego wystąpienia zostaje ustalona <xref:System.Diagnostics.EventLogEntryType.Information> domyślnie.  
  
 Podgląd zdarzeń używa identyfikatory zasobów, aby wyświetlić odpowiednie ciągi z zlokalizowane pliki zasobów dla źródła. Należy zarejestrować źródła odpowiadające im pliki zasobów przed przystąpieniem do napisania zdarzenia przy użyciu identyfikatorów zasobów.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenie informacyjne, a następnie ponownie używa <xref:System.Diagnostics.EventInstance> zapisu zdarzenie ostrzeżenia do istniejącego dziennika zdarzeń. Tekst komunikatu o zdarzeniu jest określony, przy użyciu identyfikatora zasobu w pliku zasobów komunikatów. Przykład kodu zakłada, że odpowiedni plik zasobów komunikat został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="instanceId" /> Parametr ma wartość ujemną lub wartość większą niż <see cref="F:System.UInt32.MaxValue" />.  
  
—lub— 
<paramref name="categoryId" /> Parametr ma wartość ujemną lub wartość większą niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId, valuetype System.Diagnostics.EventLogEntryType entryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer, entryType As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId, System::Diagnostics::EventLogEntryType entryType);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int * System.Diagnostics.EventLogEntryType -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId, entryType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
        <Parameter Name="entryType" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="instanceId">Identyfikator zasobu, który odpowiada ciągowi zdefiniowane w pliku zasobów komunikatów źródła zdarzeń.</param>
        <param name="categoryId">Identyfikator zasobu, który odpowiada ciągowi zdefiniowane w pliku zasobów kategorii źródła zdarzeń lub zero, aby określić Brak kategorii zdarzenia.</param>
        <param name="entryType"><see cref="T:System.Diagnostics.EventLogEntryType" /> Wartość, która wskazuje typ zdarzenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventInstance" /> klasy przy użyciu identyfikatorów określony zasób zlokalizowanego tekstu wiadomości i kategorii wpis zdarzeń i typ wpisu określony dziennik zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zapisać wpis w dzienniku zdarzeń, należy zainicjować <xref:System.Diagnostics.EventInstance> i przekazać ją do <xref:System.Diagnostics.EventLog.WriteEvent%2A> metody. Ustaw `instanceId` identyfikator zasobu komunikatów o zdarzeniach w odpowiednich <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> właściwości dla źródła. Ustaw `categoryId` wartości liczbowych kategorii lub identyfikator zasobu dla kategorii zdarzeń w <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> właściwości źródła; ustaw `categoryId` zero dla żadnej kategorii zdarzenia.  
  
 Podgląd zdarzeń używa identyfikatory zasobów, aby wyświetlić odpowiednie ciągi z zlokalizowane pliki zasobów dla źródła. Należy zarejestrować źródła odpowiadające im pliki zasobów przed przystąpieniem do napisania zdarzenia przy użyciu identyfikatorów zasobów.  
  
 Ustaw `entryType` do jednego z typów wstępnie zdefiniowanych wpisu. Podgląd zdarzeń używa typ zdarzenia, aby określić, jaką ikonę wyświetlić w widoku listy dziennika zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje dwa wpisy zdarzeń w dzienniku zdarzeń inspekcji `myNewLog`. Przykład kodu tworzy nowe źródło zdarzeń i utworzenie nowego dziennika zdarzeń, jeśli nie istnieją na komputerze lokalnym. Tekst komunikatu o zdarzeniu jest określony, przy użyciu identyfikatora zasobu w pliku zasobów.  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="entryType" /> nie jest prawidłowym <see cref="T:System.Diagnostics.EventLogEntryType" /> wartość.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="instanceId" /> jest większa niż wartość ujemną lub wartość <see cref="F:System.UInt32.MaxValue" />.  
  
—lub— 
 <paramref name="categoryId" /> jest większa niż wartość ujemną lub wartość <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName="CategoryId">
      <MemberSignature Language="C#" Value="public int CategoryId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.CategoryId" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryId : int with get, set" Usage="System.Diagnostics.EventInstance.CategoryId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia identyfikator zasobu, który określa kategorię wpis zdarzeń zdefiniowanych przez aplikację.</summary>
        <value>Kategoria liczbowe wartości lub identyfikator zasobu odpowiadający ciągowi zdefiniowane w pliku zasobów kategorii źródła zdarzeń. Wartością domyślną jest zero, co oznacza, że brak kategorii będą wyświetlane dla wpisu zdarzeń.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kategorie dziennika zdarzeń są zdefiniowane przez aplikację wartościami pomocy filtrowanie zdarzeń lub dostarczyć więcej informacji o zdarzeniu. Na przykład aplikację, można zdefiniować osobne kategorie dla różnych składników lub różnych operacji.  
  
 Ustaw <xref:System.Diagnostics.EventInstance.CategoryId%2A> właściwości w celu określenia kategorii, która podglądu zdarzeń wyświetlane wpisu. Podgląd zdarzeń, można wyświetlić kategorii jako wartość liczbową lub może on używać <xref:System.Diagnostics.EventInstance.CategoryId%2A> jako zasób identyfikator do wyświetlenia ciągu zlokalizowanej kategorii na podstawie bieżących ustawień języka.  
  
 Aby wyświetlić kategorii zlokalizowanych ciągów w Podglądzie zdarzeń, należy użyć źródła zdarzeń skonfigurowany z pliku zasobów kategorii, a następnie ustaw <xref:System.Diagnostics.EventInstance.CategoryId%2A> identyfikator zasobu w pliku zasobów kategorii. Jeśli źródło zdarzeń nie jest plikiem zasobów skonfigurowanych kategorii lub określone <xref:System.Diagnostics.EventInstance.CategoryId%2A> indeksu ciągu w pliku zasobów kategorii, a następnie w Podglądzie zdarzeń jest wyświetlana jest wartość liczbową kategorii dla tego wpisu.  
  
 Przed przystąpieniem do napisania kategorie zdarzeń przy użyciu identyfikatorów zasobów, należy zarejestrować źródła przy użyciu odpowiedniego pliku zasobów. Konfigurowanie pliku zasobów kategorii, wraz z liczbą parametrów kategorii w pliku zasobów za pomocą <xref:System.Diagnostics.EventLogInstaller> lub <xref:System.Diagnostics.EventSourceCreationData> klasy. Podczas definiowania kategorii ciągów w pliku zasobów, identyfikatory zasobów kategorii musi numerowane kolejno począwszy od 1 do skonfigurowanych <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> wartości właściwości.  
  
 Kategorie zdarzeń są opcjonalne. Jeśli aplikacja nie korzysta z kategorii, nie należy ustawiać <xref:System.Diagnostics.EventInstance.CategoryId%2A> wpisu dziennika zdarzeń.  
  
 Aby szczegółowe informacje dotyczące definiowania komunikaty o zdarzeniach i tworzenie plików zasobów dla zdarzeń, zobacz temat "Komunikatów kompilatora" w dokumentacji zestawu SDK platformy, na [ http://msdn.microsoft.com ](https://msdn.microsoft.com/). Aby uzyskać szczegółowe informacje na temat definiowania kategorii zdarzenia w plikach zasobów zobacz temat "Kategorie zdarzeń" w zestawie SDK platformy  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenie informacyjne, a następnie ponownie używa <xref:System.Diagnostics.EventInstance> zapisu zdarzenie ostrzeżenia do istniejącego dziennika zdarzeń. Tekst komunikatu o zdarzeniu jest określony, przy użyciu identyfikatora zasobu w pliku zasobów komunikatów. Przykład kodu zakłada, że odpowiedni plik zasobów komunikat został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Właściwość ma wartość ujemną wartość lub wartości większe niż <see cref="F:System.UInt16.MaxValue" />.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); void set(System::Diagnostics::EventLogEntryType value); };" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Diagnostics.EventLogEntryType with get, set" Usage="System.Diagnostics.EventInstance.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ zdarzenia wpis dziennika zdarzeń.</summary>
        <value><see cref="T:System.Diagnostics.EventLogEntryType" /> Wartość, która wskazuje typ wpisu zdarzeń. Wartość domyślna to <see cref="F:System.Diagnostics.EventLogEntryType.Information" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każde wydarzenie jest jednego typu, który aplikacja wskazuje, kiedy zgłasza zdarzenie. Podgląd zdarzeń używa typ zdarzenia, aby określić, jaką ikonę wyświetlić w widoku listy dziennika zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenie informacyjne, a następnie ponownie używa <xref:System.Diagnostics.EventInstance> zapisu zdarzenie ostrzeżenia do istniejącego dziennika zdarzeń. Tekst komunikatu o zdarzeniu jest określony, przy użyciu identyfikatora zasobu w pliku zasobów komunikatów. Przykład kodu zakłada, że odpowiedni plik zasobów komunikat został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Nie ustawiono właściwości do prawidłowego <see cref="T:System.Diagnostics.EventLogEntryType" /> wartość.</exception>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : int64 with get, set" Usage="System.Diagnostics.EventInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia identyfikator zasobu, opisująca tekst komunikatu wpisu zdarzeń.</summary>
        <value>Identyfikator zasobu, który odpowiada ciągowi zdefiniowane w pliku zasobów komunikatów źródła zdarzeń.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventInstance.InstanceId%2A> Właściwość unikatowo identyfikuje wpis zdarzeń dla źródłowej skonfigurowanego zdarzenia. Dla zdarzeń zdefiniowanych w plikach zasobów wiadomości <xref:System.Diagnostics.EventInstance.InstanceId%2A> odnosi się do identyfikatora zasobu skompilowane z pola definicja wiadomości w pliku tekstowym wiadomości. Aplikację można napisać wpisy w dzienniku zdarzeń zlokalizowane, ustawiając <xref:System.Diagnostics.EventInstance.InstanceId%2A> do identyfikatora zasobu. Podgląd zdarzeń używa <xref:System.Diagnostics.EventInstance.InstanceId%2A> identyfikator zasobu, aby znaleźć i wyświetlić odpowiedni ciąg ze zlokalizowanego pliku zasobu oparciu o bieżące ustawienia języka. Przed przystąpieniem do napisania zdarzenia przy użyciu identyfikatorów zasobów, należy zarejestrować źródła przy użyciu odpowiedniego pliku zasobów.  
  
 Aby szczegółowe informacje dotyczące definiowania komunikaty o zdarzeniach i tworzenie plików zasobów dziennika zdarzeń, zobacz temat "Komunikatów kompilatora" w dokumentacji zestawu SDK platformy, na [ http://msdn.microsoft.com ](https://msdn.microsoft.com/). Aby uzyskać szczegółowe informacje o identyfikatorach dziennika zdarzeń Zobacz temat "Identyfikatory zdarzeń" w zestawie SDK platformy.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje wpis zdarzenie informacyjne, a następnie ponownie używa <xref:System.Diagnostics.EventInstance> zapisu zdarzenie ostrzeżenia do istniejącego dziennika zdarzeń. Tekst komunikatu o zdarzeniu jest określony, przy użyciu identyfikatora zasobu w pliku zasobów komunikatów. Przykład kodu zakłada, że odpowiedni plik zasobów komunikat został zarejestrowany dla źródła.  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 Przykład kodu używa następującego pliku tekst komunikatu wbudowana w bibliotekę zasobu EventLogMsgs.dll. Plik tekstowy komunikat jest źródło, z którego jest tworzony pliku zasobów komunikatów. Plik tekstowy komunikat definiuje identyfikatory zasobów i tekst dla kategorii, komunikatów o zdarzeniach i ciągi wstawiania parametru.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Właściwość ma wartość ujemną wartość lub wartości większe niż <see cref="F:System.UInt32.MaxValue" />.</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
  </Members>
</Type>