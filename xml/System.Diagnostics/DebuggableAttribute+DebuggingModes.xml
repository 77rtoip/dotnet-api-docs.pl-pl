<Type Name="DebuggableAttribute+DebuggingModes" FullName="System.Diagnostics.DebuggableAttribute+DebuggingModes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1c526fdb77d40293e0248a61d9618e8372eab15c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30448908" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum DebuggableAttribute.DebuggingModes" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed DebuggableAttribute/DebuggingModes extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" />
  <TypeSignature Language="VB.NET" Value="Public Enum DebuggableAttribute.DebuggingModes" />
  <TypeSignature Language="C++ CLI" Value="public: enum class DebuggableAttribute::DebuggingModes" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa tryb debugowania dla kompilatora just-in-time (JIT).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes> Wyliczenie Określa, jak środowiska uruchomieniowego do śledzenia informacji istotnych dla debugera podczas generowania kodu. Informacje te pomagają debugera, zapewniają bogate środowisko debugowania. W przeciwieństwie do programu .NET Framework w wersji 1.1 w wersji 2.0 lub nowszej nie pozwalają wyłączyć śledzenie za pomocą kompilatora just-in-time (JIT). Śledzenia JIT jest zawsze włączona możliwością debugowania plików.  W wersji 2.0 lub nowszej wartości wyliczenia mają następujące znaczenie.  
  
|Tryb debugowania|Wynik|  
|--------------------|------------|  
|Brak|Śledzenie na włączone optymalizacje JIT|  
|Domyślny|Śledzenie na włączone optymalizacje JIT|  
|DisableOptimizations|Śledzenie na włączone optymalizacje JIT|  
|Domyślna &#124; DisableOptimizations|Śledzenie na wyłączone optymalizacje JIT|  
  
 Punkty sekwencji są wskazująca lokalizacji w kodzie języka pośredniego (MSIL) firmy Microsoft, który użytkownik debuger będzie spodziewać się, aby można było odwoływać się do unikatowego, taki jak w przypadku ustawienia punktu przerwania. Kompilator JIT gwarantuje, że nie można go skompilować MSIL w dwóch sekwencji różnych punktach w pojedynczej instrukcji macierzystego. Domyślnie przy użyciu kompilatora JIT sprawdza magazyn symbolu w pliku bazy danych (PDB) program listę punktów dodatkowe sekwencji. Jednak podczas ładowania pliku PDB plików wymaga, aby plik dostępna i ma wpływ na wydajność jest ujemny. Począwszy od wersji 2.0, kompilatory może emitować "punkty sekwencji niejawna" w strumieniu kodu MSIL przy użyciu MSIL "`nop"` instrukcje. Takie kompilatory należy ustawić flagę IgnoreSymbolStoreSequencePoints powiadomiono środowisko uruchomieniowe języka wspólnego nie załadować pliku PDB.  
  
> [!NOTE]
>  To wyliczenie jest używany głównie przez deweloperów języka. Zazwyczaj nie służy do rozwoju aplikacji. Użyj środowisk deweloperskich <xref:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints> na podstawie kompilatora parametrów takich jak **/debug** i **/ optimize**.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes Default = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />
      <MemberSignature Language="VB.NET" Value="Default" />
      <MemberSignature Language="C++ CLI" Value="Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DebuggableAttribute+DebuggingModes</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Instruuje kompilator just in time (JIT), aby użyć jego zachowania domyślnego i obejmuje włączenie optymalizacje wyłączenie Edytuj i Kontynuuj pomocy technicznej i za pomocą sekwencji magazynu symboli punktów, jeśli jest obecny. W programie .NET Framework w wersji 2.0, informacje, śledzenia JIT język pośredni firmy Microsoft (MSIL) przesunięcie do kodu macierzystego przesunięcie w metodzie, zawsze jest generowany.</summary>
      </Docs>
    </Member>
    <Member MemberName="DisableOptimizations">
      <MemberSignature Language="C#" Value="DisableOptimizations" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes DisableOptimizations = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations" />
      <MemberSignature Language="VB.NET" Value="DisableOptimizations" />
      <MemberSignature Language="C++ CLI" Value="DisableOptimizations" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DebuggableAttribute+DebuggingModes</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>Wyłącz optymalizacje wykonywane przez kompilator, aby plik wyjściowy był mniejszy, szybszy i bardziej wydajne. Optymalizacje powoduje modyfikacji kodu w pliku wyjściowego, który może utrudnić debugowania. Zwykle optymalizacji powinny być wyłączone podczas debugowania. W wersji 2.0 lub nowszej, należy połączyć tę wartość z domyślnego (domyślna | DisableOptimizations) umożliwiające śledzenie i Wyłącz optymalizacje JIT.</summary>
      </Docs>
    </Member>
    <Member MemberName="EnableEditAndContinue">
      <MemberSignature Language="C#" Value="EnableEditAndContinue" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes EnableEditAndContinue = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue" />
      <MemberSignature Language="VB.NET" Value="EnableEditAndContinue" />
      <MemberSignature Language="C++ CLI" Value="EnableEditAndContinue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DebuggableAttribute+DebuggingModes</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Włącz Edytuj i Kontynuuj. Edytuj i Kontynuuj pozwala wprowadzać zmiany do kodu źródłowego, gdy program jest w trybie przerwania. Edytuj i Kontynuuj jest kompilatora zależnych.</summary>
      </Docs>
    </Member>
    <Member MemberName="IgnoreSymbolStoreSequencePoints">
      <MemberSignature Language="C#" Value="IgnoreSymbolStoreSequencePoints" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes IgnoreSymbolStoreSequencePoints = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints" />
      <MemberSignature Language="VB.NET" Value="IgnoreSymbolStoreSequencePoints" />
      <MemberSignature Language="C++ CLI" Value="IgnoreSymbolStoreSequencePoints" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DebuggableAttribute+DebuggingModes</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Użyj niejawne punktów sekwencji MSIL, nie punkty sekwencji programu (PDB) bazy danych. Informacje symboliczne zwykle zawiera co najmniej jeden przesunięcie język pośredni (MSIL) firmy Microsoft dla każdego wiersza źródłowego. Kompilatora just-in-time (JIT) jest skompilować metody, prosi o usługach dla profilowania listę przesunięć MSIL, które mają zostać zachowane. Przesunięcia MSIL są nazywane punkty sekwencji.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DebuggableAttribute+DebuggingModes</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Zawsze generowany w programie .NET Framework w wersji 2.0, informacje śledzenia JIT, a ta flaga ma ten sam efekt co <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />, z wyjątkiem tego, że ustawia <see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> właściwości <see langword="false" />. Ponieważ śledzenia JIT jest zawsze włączone, wartość właściwości jest ignorowane w wersji 2.0 lub nowszej.  
  
 Należy zauważyć, że w przeciwieństwie do <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations" /> flagę <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None" /> nie można użyć flagi, aby wyłączyć optymalizacje JIT.</summary>
      </Docs>
    </Member>
  </Members>
</Type>