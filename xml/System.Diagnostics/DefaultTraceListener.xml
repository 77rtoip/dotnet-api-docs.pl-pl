<Type Name="DefaultTraceListener" FullName="System.Diagnostics.DefaultTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e56d4a2b2a863166dbb4a19c7d4e45e65e5f6d76" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36343195" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi DefaultTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DefaultTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type DefaultTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia domyślne dane wyjściowe metody i zachowanie śledzenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie tej klasy jest automatycznie dodawany do <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> i <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji. Jawnie dodanie drugiej <xref:System.Diagnostics.DefaultTraceListener> przyczyny zduplikowane wiadomości w oknie danych wyjściowych debugera i pól w zduplikowanych komunikatów dla potwierdzeń.  
  
 Domyślnie <xref:System.Diagnostics.DefaultTraceListener.Write%2A> i <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> metody Emituj komunikat do środowiska Win32 `OutputDebugString` funkcji i <xref:System.Diagnostics.Debugger.Log%2A?displayProperty=nameWithType> metody. Aby uzyskać informacje o `OutputDebugString` funkcji, zobacz zestawu SDK platformy MSDN.  
  
 <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> Metoda, domyślnie wyświetla okno komunikatu, gdy aplikacja działa w trybie interfejsu użytkownika; również emituje komunikat przy użyciu <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A>.  
  
> [!NOTE]
>  Wyświetlanie pola komunikatu <xref:System.Diagnostics.Debug.Assert%2A> i <xref:System.Diagnostics.Debug.Fail%2A> wywołania metody zależy od obecności <xref:System.Diagnostics.DefaultTraceListener>. Jeśli <xref:System.Diagnostics.DefaultTraceListener> nie znajduje się w <xref:System.Diagnostics.Trace.Listeners%2A> kolekcji, w oknie komunikatu nie jest wyświetlany. <xref:System.Diagnostics.DefaultTraceListener> Może zostać usunięty przez [ \<Wyczyść > element](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), przez [ \<Usuń > element](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), lub przez wywołanie metody <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metoda <xref:System.Diagnostics.Trace.Listeners%2A> Właściwość (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Należy włączyć śledzenie i debugowanie, aby użyć nasłuchującego śledzenia. Następująca składnia jest określonych kompilatora. Jeśli używasz kompilatory innego niż C# lub Visual Basic, zapoznaj się z dokumentacją, dla Twojej kompilatora.  
  
-   Aby włączyć debugowanie w języku C#, Dodaj `/d:DEBUG` flagi do wiersza polecenia kompilatora podczas kompilacji kodu, lub Dodaj `#define DEBUG` na początku pliku. W języku Visual Basic, Dodaj `/d:DEBUG=True` flagi kompilatora wiersza polecenia.  
  
-   Aby włączyć śledzenie w języku C#, Dodaj `/d:TRACE` flagi do wiersza polecenia kompilatora podczas kompilacji kodu, lub Dodaj `#define TRACE` na początku pliku. W języku Visual Basic, Dodaj `/d:TRACE=True` flagi kompilatora wiersza polecenia.  
  
 Aby dodać obiektu nasłuchującego śledzenia, należy edytować pliku konfiguracji, który odpowiada nazwie aplikacji. W ramach tego pliku można dodać odbiornik, ustaw jej typ i ustawienie jego parametrów, Usuń odbiornik lub wyczyść wszystkie odbiorniki wcześniej ustawiane przez aplikację. Plik konfiguracji powinien być sformatowany podobny do poniższego przykładu:  
  
```xml  
<configuration>  
<system.diagnostics>  
  <trace autoflush="false" indentsize="4">  
    <listeners>  
      <remove name="Default" />  
      <add name="myListener"  type="System.Diagnostics.TextWriterTraceListener"    initializeData="c:\myListener.log" />  
    </listeners>  
  </trace>  
</system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 Poniższy przykład kodu oblicza dwumianu współczynników, będące wartości używana podczas prawdopodobieństwa i statystyki. W tym przykładzie użyto <xref:System.Diagnostics.DefaultTraceListener> do śledzenia wyników i rejestrowania błędów. Tworzy nowy <xref:System.Diagnostics.DefaultTraceListener>, dodaje go do <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji i zestawy <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> właściwość w pliku dziennika określonego w argumentach wiersza polecenia.  
  
 Jeśli zostanie wykryty błąd podczas przetwarzania parametru wejściowego lub `CalcBinomial` funkcja zwraca wyjątek, <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> metoda rejestruje i wyświetla komunikat o błędzie. Jeśli <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> właściwość jest `false`, komunikat o błędzie jest również wyświetlony w konsoli. Podczas obliczania wyniku pomyślnie, <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> i <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> metody zapisać wyniki w pliku dziennika.  
  
 <xref:System.Diagnostics.DefaultTraceListener.Fail%2A>, <xref:System.Diagnostics.DefaultTraceListener.Write%2A>, I <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> metody powodują informacje śledzenia do zapisania tylko z <xref:System.Diagnostics.DefaultTraceListener>. Można zapisać informacji o śledzeniu do wszystkich obiektów nasłuchujących w <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji, użyj <xref:System.Diagnostics.Trace.Fail%2A>, <xref:System.Diagnostics.Trace.Write%2A>, i <xref:System.Diagnostics.Trace.WriteLine%2A> metody <xref:System.Diagnostics.Trace> klasy.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#11)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#11)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ta klasa jest bezpieczne dla wątków.</threadsafe>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.DefaultTraceListener" /> klasy z "Domyślne" jego <see cref="P:System.Diagnostics.TraceListener.Name" /> wartości właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod usuwa przykład <xref:System.Diagnostics.DefaultTraceListener> udostępniany przez aplikację z <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji, a następnie tworzy nowy <xref:System.Diagnostics.DefaultTraceListener> i dodaje go do <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#3)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="AssertUiEnabled">
      <MemberSignature Language="C#" Value="public bool AssertUiEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AssertUiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AssertUiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AssertUiEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AssertUiEnabled : bool with get, set" Usage="System.Diagnostics.DefaultTraceListener.AssertUiEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("AssertUiEnabled defaults to False; should follow Environment.UserInteractive.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy aplikacja działa w trybie interfejsu użytkownika.</summary>
        <value>
          <see langword="true" /> Jeśli włączony jest tryb interfejsu użytkownika; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod wywołuje funkcję, która wywołuje <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> metodę, aby rejestrować komunikat o błędzie, jeśli funkcja zwraca wyjątek. Jeśli <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> właściwość jest `false`, metoda również zapisuje komunikat o błędzie do konsoli.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#8)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Emituje lub wyświetla komunikat i śledzenia stosu dla potwierdzenia, że zawsze kończy się niepowodzeniem.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Fail : string -&gt; unit" Usage="defaultTraceListener.Fail message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do emisji lub wyświetlić.</param>
        <summary>Emituje lub wyświetla komunikat i śledzenia stosu dla potwierdzenia, że zawsze kończy się niepowodzeniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ta metoda wysyła `message` parametr i ślad stosu do okna komunikatu (Jeśli aplikacja zostanie uruchomiona w trybie interfejsu użytkownika) oraz na <xref:System.Diagnostics.DefaultTraceListener> wystąpienia.  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje komunikat o błędzie do <xref:System.Diagnostics.DefaultTraceListener> przy użyciu <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%29> metody. Metoda również zapisuje komunikat w konsoli, jeśli interfejs użytkownika nie jest dostępny.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#6)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="defaultTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat do emisji lub wyświetlić.</param>
        <param name="detailMessage">Szczegółowy komunikat do emisji lub wyświetlania.</param>
        <summary>Emituje lub wyświetla szczegółowe komunikaty i śledzenia stosu dla potwierdzenia, że zawsze kończy się niepowodzeniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie ta metoda wysyła `message` parametru `detailMessage` parametr i ślad stosu do okna komunikatu (Jeśli aplikacja zostanie uruchomiona w trybie interfejsu użytkownika) oraz na <xref:System.Diagnostics.DefaultTraceListener> wystąpienia.  
  
   
  
## Examples  
 Poniższy przykładowy kod wywołuje funkcję, która wywołuje <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> metody logowania szczegółowy komunikat o błędzie, jeśli funkcja zwraca wyjątek. Metoda zapisuje komunikat w konsoli, jeśli interfejs użytkownika nie jest dostępny.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#8)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="LogFileName">
      <MemberSignature Language="C#" Value="public string LogFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogFileName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DefaultTraceListener.LogFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileName : string with get, set" Usage="System.Diagnostics.DefaultTraceListener.LogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę pliku dziennika do zapisania śledzenia lub komunikaty do debugowania.</summary>
        <value>Nazwa pliku dziennika do zapisania śledzenia lub komunikaty do debugowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod tworzy nową <xref:System.Diagnostics.DefaultTraceListener>, dodaje go do <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji i zestawy <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> właściwość w pliku dziennika określonego w argumentach wiersza polecenia.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="defaultTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat, aby zapisać <see langword="OutputDebugString" /> i <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</param>
        <summary>Zapisuje dane wyjściowe do <see langword="OutputDebugString" /> funkcji i <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> metody.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje o Win32 `OutputDebugString` debugowanie funkcji, zobacz "OutputDebugString" w witrynie MSDN lub zestawu SDK platformy.  
  
   
  
## Examples  
 Poniższy przykład kodu formatuje wyniki funkcji i używa <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> metody do zapisania pierwszej części wiadomości <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/CS/defaulttracelistener.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/VB/defaulttracelistener.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="defaultTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat, aby zapisać <see langword="OutputDebugString" /> i <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</param>
        <summary>Zapisuje dane wyjściowe do <see langword="OutputDebugString" /> funkcji i <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> metody następuje znak powrotu karetki i wysuwu (\r\n) wiersza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Terminator wiersza domyślny jest znak powrotu karetki następuje wysuwu wiersza (\r\n).  
  
 Aby uzyskać informacje o Win32 `OutputDebugString` debugowanie funkcji, zobacz zestawu SDK platformy MSDN.  
  
 Ta metoda ustawia <xref:System.Diagnostics.TraceListener.NeedIndent%2A> właściwości `true`.  
  
   
  
## Examples  
 Poniższy przykład kodu formatuje wyniki funkcji i używa <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> metodę, aby zapisać ostatniej części wiadomości <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/CS/defaulttracelistener.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/VB/defaulttracelistener.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
  </Members>
</Type>