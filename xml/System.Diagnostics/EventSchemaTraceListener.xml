<Type Name="EventSchemaTraceListener" FullName="System.Diagnostics.EventSchemaTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a4a01cf09671430b8f85930f61d5340bd45bee8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69076153" /></Metadata><TypeSignature Language="C#" Value="public class EventSchemaTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSchemaTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSchemaTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSchemaTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSchemaTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type EventSchemaTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Kieruje śledzenie lub debugowanie danych wyjściowych z kompleksowych zdarzeń do pliku dziennika zgodnego ze schematem XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener> Klasa zawiera śledzenie kompleksowych zdarzeń zgodnych ze schematem. Można użyć kompleksowego śledzenia dla systemu, który ma heterogeniczne składniki, które zawierają współzależności między wątkami <xref:System.AppDomain>, procesami i komputerami. Zdefiniowano standardowy schemat zdarzeń (zobacz [reprezentacja zdarzeń dla odbiorców zdarzeń](https://go.microsoft.com/fwlink/?LinkId=78955)), aby umożliwić śledzenie w ramach tych granic. Schemat włącza Dodawanie niestandardowych elementów zgodnych ze schematem. Aby wyświetlić dane zdarzenia, można użyć [narzędzia Podgląd śledzenia usług (SvcTraceViewer. exe)](https://go.microsoft.com/fwlink/p/?LinkId=240129) .  
  
 <xref:System.Diagnostics.EventSchemaTraceListener>jest dostrojony do rejestrowania wydajności z niejawną obsługą śledzenia bez blokady.  
  
 <xref:System.Diagnostics.EventSchemaTraceListener> Klasa konwertuje informacje o śledzeniu i debugowaniu na strumień tekstowy zakodowany w formacie XML. Opis danych wyjściowych XML znajduje się w tabeli w dalszej części tej sekcji.  
  
 Możesz włączyć lub wyłączyć <xref:System.Diagnostics.EventSchemaTraceListener> obiekt za pomocą pliku konfiguracji aplikacji, a następnie użyć skonfigurowanego <xref:System.Diagnostics.EventSchemaTraceListener> obiektu w aplikacji. Alternatywnie można utworzyć <xref:System.Diagnostics.EventSchemaTraceListener> obiekt w kodzie. Zalecamy włączenie odbiorników śledzenia za pomocą pliku konfiguracji aplikacji. Aby uzyskać informacje o używaniu plików konfiguracji do śledzenia i debugowania, zobacz [Schemat ustawień śledzenia i debugowania](~/docs/framework/configure-apps/file-schema/trace-debug/index.md).  
  
 Aby skonfigurować <xref:System.Diagnostics.EventSchemaTraceListener> obiekt, należy zmodyfikować plik konfiguracji, który odnosi się do nazwy aplikacji. W tym pliku można dodawać, usuwać lub ustawiać właściwości odbiornika. Plik konfiguracji powinien być sformatowany w następujący sposób:  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sources>  
            <source name="TestSource" >  
                <listeners>  
                    <!--Remove the default trace listener for better performance.-->  
                    <remove name="Default"/>  
                    <!--Note: Removing the default trace listener prevents the dialog box   
                    from being displayed for Debug.Fail or Debug.Assert commands that are   
                    executed in user mode.-->  
                    <add name="eventListener"   
                      type="System.Diagnostics.EventSchemaTraceListener,  system.core"  
                      initializeData="TraceOutput.xml"   
                      traceOutputOptions="ProcessId, DateTime, Timestamp"   
                      bufferSize="65536"  
                      maximumFileSize="20480000"  
                      logRetentionOption="LimitedCircularFiles"  
                      maximumNumberOfFiles="2"/>  
                </listeners>  
            </source>  
        </sources>  
    </system.diagnostics>  
```  
  
 Klasa dziedziczy właściwość z klasy <xref:System.Diagnostics.TraceListener>bazowej. <xref:System.Diagnostics.TraceListener.Filter%2A> <xref:System.Diagnostics.EventSchemaTraceListener> <xref:System.Diagnostics.TraceListener.Filter%2A> Właściwość pozwala na dodatkowy poziom filtrowania danych wyjściowych śledzenia na odbiorniku. Jeśli filtr jest obecny, `Trace` metody odbiornika śledzenia <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> wywołują metodę filtru, aby określić, czy ma być emitowane śledzenie.  
  
 Jeśli podjęta zostanie próba zapisu do pliku, który jest używany lub jest niedostępny, sufiks identyfikatora GUID jest automatycznie dodawany do nazwy pliku.  
  
> [!NOTE]
>  Metody odbiornika mają być wywoływane przy użyciu metod <xref:System.Diagnostics.Debug>klasy, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> . Nie wywołuj metod odbiornika bezpośrednio z kodu aplikacji. Odbiornik jest przeznaczony głównie do użytku <xref:System.Diagnostics.TraceSource> przez klasę. <xref:System.Diagnostics.EventSchemaTraceListener>  
  
 W poniższej tabeli opisano elementy i atrybuty danych wyjściowych XML.  
  
|Element|Atrybuty|Dane wyjściowe|Uwagi|  
|-------------|----------------|------------|-----------|  
|`CallStack`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.Callstack> flagi <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości.|Znaki specjalne, takie jak > lub <, są zastępowane sekwencjami ucieczki. Zobacz tabelę translacji znaków ucieczki w następnej tabeli.|  
|`Computer`|Brak|Zawsze obecne.|Ten element reprezentuje wartość <xref:System.Environment.MachineName%2A> właściwości.|  
|`Correlation`|`ActivityID`|Zawsze obecne.|Jeśli `ActivityID` nie jest określony, wartość domyślna to pusty identyfikator GUID.|  
||`RelatedActivityID`|Zależy od obecności `relatedActivityId` parametru `Trace` w wywołaniu metody.|Ten `RelatedActivityID` atrybut odnosi `relatedActivityId` się do parametru <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> metody.|  
|`Data`|Brak|Zawsze obecne.|Ten element reprezentuje parametr wejściowy`data`(). Jeden element jest udostępniany dla każdego obiektu danych. W przypadku dzienników zdarzeń `Data` element zawiera dane XML o zmienionym znaczeniu. W przypadku dzienników `Data` danych element zawiera niezmienione dane. Dane wyjściowe dziennika danych korzystają `ToString` z metody przekazywania obiektów danych.|  
|`Event`|Brak|Zawsze obecne.|Ten element zawiera zdarzenie śledzenia.|  
|`EventData`|Brak|Występuje w przypadku dzienników zdarzeń.|Ten element reprezentuje dane wejściowe parametru`message`( `args`,). Zawiera `Data` elementy z danymi XML, które są tworzone przez <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> wywołanie metody.|  
|`EventID`|Brak|Zawsze obecne.|Ten element reprezentuje parametr wejściowy`id`().|  
|`Execution`|`ProcessID`|Zależy od obecności <xref:System.Diagnostics.TraceOptions.ProcessId> flagi <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości.|Ten `ProcessID` atrybut jest określony <xref:System.Diagnostics.TraceEventCache>w. W systemach operacyjnych Microsoft Windows 98 i Windows Millennium Edition, jeśli `ProcessID` jest większy niż 2 147 483 647, jest dodatnią reprezentacją liczby ujemnej i należy ją przekonwertować w celu uzyskania poprawnego identyfikatora procesu.|  
||`ThreadID`|Obecny, `ProcessID` gdy jest obecny.|Ten `ThreadID` atrybut jest określony <xref:System.Diagnostics.TraceEventCache>w.|  
|`Level`|Brak|Zawsze obecne.|Ten element reprezentuje dane wejściowe parametru (wartość `eventType`liczbowa). Wartości parametrów, które są większe niż 255 są wyprowadzane jako poziom 8, który <xref:System.Diagnostics.TraceEventType.Information?displayProperty=nameWithType>reprezentuje. Typy <xref:System.Diagnostics.TraceEventType.Critical>zdarzeń śledzenia <xref:System.Diagnostics.TraceEventType.Error> ,<xref:System.Diagnostics.TraceEventType.Information>,, i<xref:System.Diagnostics.TraceEventType.Verbose> są wyprowadzane jako poziomy 1, 2, 4, 8 i 10. <xref:System.Diagnostics.TraceEventType.Warning>|  
|`LogicalOperationStack`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flagi <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości.|Może istnieć tylko jedna operacja logiczna. W związku z tym wartości są zapisywane `LogicalOperation` jako węzły `LogicalOperationStack` w elemencie.|  
|`OpCode`|Brak|Występuje, `Level` gdy jest większy niż 255.|Ten element reprezentuje typy zdarzeń śledzenia, które mają wartości liczbowe większe niż 255. <xref:System.Diagnostics.TraceEventType.Start>, <xref:System.Diagnostics.TraceEventType.Stop> ,<xref:System.Diagnostics.TraceEventType.Suspend>, lub<xref:System.Diagnostics.TraceEventType.Transfer> są wyprowadzane odpowiednio na poziomie 1, 2, 4, 8 i 10. <xref:System.Diagnostics.TraceEventType.Resume>|  
|`Provider`|`GUID`|Zawsze obecne.|Zawsze puste.|  
|`RenderingInfo`|`Culture`|Zawsze obecne.|Ten atrybut reprezentuje ciąg zasobu dla typu zdarzenia. Jest zawsze "en-EN\\".|  
|`System`|`Name`|Zawsze obecne.||  
|`TimeCreated`|`SystemTime`|Zależy od obecności <xref:System.Diagnostics.TraceOptions.DateTime> flagi <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości.|Czas jest wartością <xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=nameWithType> właściwości. Ta właściwość jest wyrażona jako uniwersalny czas koordynowany|  
|`TimeStamp`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.Timestamp> flagi <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości.|Ten element jest określony w <xref:System.Diagnostics.TraceEventCache>.|  
|`UserData`|Brak|Obecne w przypadku dzienników danych.|Ten element zawiera `Data` elementy z niezmienionymi danymi dostarczonymi <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> przez użytkownika z metody.|  
  
 W poniższej tabeli przedstawiono znaki, które są wyprowadzane w danych wyjściowych XML. Ucieczki występuje we wszystkich elementach i atrybutach z wyjątkiem `UserData` elementu, który zawiera dane dostarczone przez użytkownika, niewyprowadzane. Element jest wynikiem wywołania <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> metody. `UserData`  
  
|Znak poprzedzony znakiem ucieczki|Wartość|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Diagnostics.EventSchemaTraceListener> jak używać klasy.  
  
 [!code-cpp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/CPP/eventschematracelistener.cpp#1)]
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy, używając określonego pliku jako odbiorcy debugowania i śledzenia danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie jest rejestrowany jeden plik o nieograniczonym rozmiarze.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy o określonej nazwie, używając określonego pliku jako odbiorcy debugowania i śledzenia danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <param name="bufferSize">Rozmiar buforu wyjściowego w bajtach.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy z określoną nazwą i określonym rozmiarem buforu, używając określonego pliku jako odbiorcy debugowania i śledzenia danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku zagadnień dotyczących `bufferSize` wydajności powinna być wielokrotnością 1024 bajtów.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#3)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int * System.Diagnostics.TraceLogRetentionOption -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize, logRetentionOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <param name="bufferSize">Rozmiar buforu wyjściowego w bajtach.</param>
        <param name="logRetentionOption">Jedna z <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> wartości.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy z określoną nazwą i określonym rozmiarem buforu przy użyciu określonego pliku z określonymi zasadami przechowywania dziennika jako odbiorcą debugowania i śledzenia danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku zagadnień dotyczących `bufferSize` wydajności powinna być wielokrotnością 1024 bajtów.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption, maximumFileSize As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption, long maximumFileSize);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int * System.Diagnostics.TraceLogRetentionOption * int64 -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize, logRetentionOption, maximumFileSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <param name="bufferSize">Rozmiar buforu wyjściowego w bajtach.</param>
        <param name="logRetentionOption">Jedna z <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> wartości.</param>
        <param name="maximumFileSize">Maksymalny rozmiar pliku w bajtach.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy z określoną nazwą i określonym rozmiarem buforu, używając określonego pliku z określonymi zasadami przechowywania dziennika i maksymalnym rozmiarem jako odbiorcy debugowania i śledzenia danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku problemów z `bufferSize` wydajnością `maximumFileSize` i powinna być wielokrotnością 1024 bajtów. `maximumFileSize`nie jest wartością bezwzględną, jest progiem, który można przekroczyć do rozmiaru ostatniego komunikatu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%2CSystem.Int64%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumFileSize" />jest liczbą ujemną lub mniejszą niż <paramref name="bufferSize" />.

—lub—

<paramref name="bufferSize" />jest liczbą ujemną.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize, int32 maximumNumberOfFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption, maximumFileSize As Long, maximumNumberOfFiles As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int * System.Diagnostics.TraceLogRetentionOption * int64 * int -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize, logRetentionOption, maximumFileSize, maximumNumberOfFiles)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <param name="bufferSize">Rozmiar buforu wyjściowego w bajtach.</param>
        <param name="logRetentionOption">Jedna z <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> wartości.</param>
        <param name="maximumFileSize">Maksymalny rozmiar pliku w bajtach.</param>
        <param name="maximumNumberOfFiles">Maksymalna liczba wyjściowych plików dziennika.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy z określoną nazwą i określonym rozmiarem buforu, przy użyciu określonego pliku z określonymi zasadami przechowywania dziennika, rozmiarem maksymalnym i liczbą plików jako odbiorcy debugowania i śledzenia danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku problemów z `bufferSize` wydajnością `maximumFileSize` i powinna być wielokrotnością 1024 bajtów. `maximumFileSize`nie jest wartością bezwzględną; jest to próg, który można przekroczyć do rozmiaru ostatniej wiadomości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%2A> konstruktora. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumFileSize" />jest liczbą ujemną lub mniejszą niż <paramref name="bufferSize" />.

—lub—

<paramref name="maximumNumberOfFiles" />jest mniejsza niż 1, a <paramref name="logRetentionOption" /> jest <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles" />.

—lub—

<paramref name="maximumNumberOfFiles" />jest mniejsza niż 2 i <paramref name="logRetentionOption" /> ma. <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />

—lub—

<paramref name="bufferSize" />jest liczbą ujemną.</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public int BufferSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.BufferSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BufferSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BufferSize : int" Usage="System.Diagnostics.EventSchemaTraceListener.BufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozmiar buforu wyjściowego.</summary>
        <value>Rozmiar buforu wyjściowego w bajtach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest ustawiana przez `bufferSize` parametr w konstruktorze. Ze względu na wydajność rozmiar buforu powinien być ustawiony na wielokrotność 1024 bajtów. Zalecamy użycie domyślnego rozmiaru 32 * 1024 bajtów lub 64\*1024 bajtów w celu uzyskania najlepszej wydajności.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób wyświetlania wartości <xref:System.Diagnostics.EventSchemaTraceListener.BufferSize%2A> właściwości. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="eventSchemaTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka plik dziennika dla tego odbiornika, dzięki czemu nie otrzymuje już śledzenia lub debugowania danych wyjściowych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="eventSchemaTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Podstawowy komunikat o błędzie do zapisu.</param>
        <param name="detailMessage">Szczegółowy komunikat o błędzie do dołączenia do podstawowego komunikatu o błędzie.</param>
        <summary>Zapisuje informacje o błędzie, w tym podstawowy komunikat o błędzie i szczegółowy komunikat o błędzie, do pliku dziennika.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="eventSchemaTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że buforowane dane są zapisywane w dzienniku dla tego odbiornika.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="override this.GetSupportedAttributes : unit -&gt; string[]" Usage="eventSchemaTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera niestandardowe atrybuty konfiguracji XML, które obsługuje odbiornik śledzenia.</summary>
        <returns><see cref="T:System.String" /> Tablica zawierająca atrybuty konfiguracji XML rozpoznawane przez ten odbiornik.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Atrybuty niestandardowe, które są zwracane przez tę metodę, mogą być używane w pliku konfiguracyjnym XML do sterowania zachowaniem wystąpienia <xref:System.Diagnostics.EventSchemaTraceListener> klasy. Użycie dowolnego innego atrybutu powoduje wyjątek konfiguracji. <xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A> Metoda<xref:System.Diagnostics.EventSchemaTraceListener> zwraca następujące wartości tablicy ciągów: "bufferSize", "logRetentionOption", "maximumFileSize" i "maximumNumberOfFiles".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThreadSafe">
      <MemberSignature Language="C#" Value="public override bool IsThreadSafe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadSafe" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsThreadSafe As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsThreadSafe { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadSafe : bool" Usage="System.Diagnostics.EventSchemaTraceListener.IsThreadSafe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy odbiornik śledzenia jest bezpieczny wątkowo.</summary>
        <value>Zawsze zwraca <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób wyświetlania wartości <xref:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe%2A> właściwości. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumFileSize">
      <MemberSignature Language="C#" Value="public long MaximumFileSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumFileSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumFileSize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumFileSize : int64" Usage="System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera maksymalny rozmiar pliku dziennika.</summary>
        <value>Maksymalny rozmiar pliku w bajtach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest ustawiana przez `maximumFileSize` parametr w konstruktorze `maximumFileSize` lub atrybut w pliku konfiguracji. Ze względu na wydajność należy ustawić wartość maksymalnego rozmiaru pliku na wielokrotność 1024 bajtów. Wartość <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> właściwości nie jest bezwzględna; jest to próg, który można przekroczyć do rozmiaru ostatniego komunikatu.  
  
 W poniższej tabeli przedstawiono możliwe i domyślne wartości rozmiaru pliku, które są skojarzone z każdą opcją przechowywania dziennika śledzenia. Wartości oznaczone jako N/A wskazują, że <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> właściwość nie jest sprawdzana dla tej <xref:System.Diagnostics.TraceLogRetentionOption> wartości.  
  
|TraceLogRetentionOption|Maksymalny rozmiar pliku|Domyślny rozmiar pliku|  
|-----------------------------|-----------------------|-----------------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|Brak|-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>0|4 KB|  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób wyświetlania wartości <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> właściwości. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#6)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumNumberOfFiles">
      <MemberSignature Language="C#" Value="public int MaximumNumberOfFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumNumberOfFiles" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumNumberOfFiles As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumNumberOfFiles { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumNumberOfFiles : int" Usage="System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera maksymalną liczbę plików dziennika.</summary>
        <value>Maksymalna liczba plików dziennika określona przez wartość <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> właściwości pliku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest ustawiana przez `maximumNumberOfFiles` parametr w konstruktorze `maximumNumberOfFiles` lub atrybut w pliku konfiguracji.  
  
 W poniższej tabeli przedstawiono możliwe i domyślne wartości rozmiaru pliku i liczby plików, które są skojarzone z każdą opcją przechowywania dziennika śledzenia. Wartości oznaczone jako N/A wskazują, że <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> właściwość nie jest sprawdzana dla tej <xref:System.Diagnostics.TraceLogRetentionOption> wartości.  
  
|TraceLogRetentionOption|Maksymalna liczba plików|Domyślna liczba plików|  
|-----------------------------|-----------------------------|-----------------------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|Brak|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|Brak|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|Brak|-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>1|2|  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób wyświetlania wartości <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> właściwości. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#7)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane śledzenia do pliku dziennika.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="eventSchemaTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="data">Obiekt danych do emisji.</param>
        <summary>Zapisuje informacje o śledzeniu, pojedynczy obiekt danych i informacje o zdarzeniu w pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `eventCache`, `source`, `eventType`i sąużywanewnagłówkuistopceśledzenia.`id` `id` Parametr jest konwertowany na liczbę całkowitą bez znaku przed jego zapisaniem. W związku z tym `id` wartość ujemna jest zapisywana jako duża dodatnia liczba całkowita. Parametr jest zapisywana `Data` jako węzeł w `UserData` elemencie. `data` `ToString` Metoda obiektu danych służy do konwertowania obiektu na ciąg.  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji. Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="eventSchemaTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="data">Tablica obiektów danych do emisji.</param>
        <summary>Zapisuje informacje o śledzeniu, wiele obiektów danych i informacje o zdarzeniach w pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `eventCache`, `source`, `eventType`i sąużywanewnagłówkuistopceśledzenia.`id` `id` Parametr jest konwertowany na liczbę całkowitą bez znaku przed jego zapisaniem. W związku z tym `id` wartość ujemna jest zapisywana jako duża dodatnia liczba całkowita. Obiekty w `data` tablicy parametrów są zapisywane jako `Data` węzły w `UserData` elemencie. `ToString` Metoda każdego obiektu danych służy do konwertowania obiektu na ciąg.  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji. Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o śledzeniu zdarzeń do pliku dziennika.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="eventSchemaTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje informacje o śledzeniu, komunikat i informacje o zdarzeniu w pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `eventCache`, `source`, `eventType`i sąużywanewnagłówkuistopceśledzenia.`id` `id` Parametr jest konwertowany na liczbę całkowitą bez znaku przed jego zapisaniem. W związku z tym `id` wartość ujemna jest zapisywana jako duża dodatnia liczba całkowita. Parametr jest zapisywana `Data` jako węzeł w `EventData` elemencie. `message`  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji. Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="eventSchemaTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odpowiadają obiektom <paramref name="args" /> w tablicy.</param>
        <param name="args">Tablica obiektów zawiera zero lub więcej obiektów do sformatowania.</param>
        <summary>Zapisuje informacje o śledzeniu, sformatowaną wiadomość i informacje o zdarzeniu w pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `eventCache`, `source`, `eventType`i sąużywanewnagłówkuistopceśledzenia.`id` `id` Parametr jest konwertowany na liczbę całkowitą bez znaku przed jego zapisaniem. W związku z tym `id` wartość ujemna jest zapisywana jako duża dodatnia liczba całkowita. Metoda jest wywoływana `format` i ciąg i `args` tablica są przenoszone jako parametry. <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Ta metoda formatuje `args` tablicę obiektów i zapisuje sformatowaną tablicę `Data` jako węzeł w `EventData` elemencie.  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji. Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceLogRetentionOption">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceLogRetentionOption As TraceLogRetentionOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceLogRetentionOption TraceLogRetentionOption { System::Diagnostics::TraceLogRetentionOption get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceLogRetentionOption : System.Diagnostics.TraceLogRetentionOption" Usage="System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceLogRetentionOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera opcję przechowywania dziennika śledzenia dla pliku.</summary>
        <value>Jedna z <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> wartości. Wartość domyślna to <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób wyświetlania wartości <xref:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption%2A> właściwości. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#9)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="eventSchemaTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="message">Komunikat śledzenia do zapisu.</param>
        <param name="relatedActivityId"><see cref="T:System.Guid" /> Struktura, która identyfikuje powiązane działanie.</param>
        <summary>Zapisuje informacje o śledzeniu, w tym tożsamość powiązanego działania, komunikat i informacje o zdarzeniu, do pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> Metoda jest używana do skorelowania powiązanych śladów. Parametry `eventCache`, `source`, `id`i sąużywanewnagłówkuistopceśledzenia.`relatedActivityId` `id` Parametr jest konwertowany na liczbę całkowitą bez znaku przed jego zapisaniem. W związku z tym `id` wartość ujemna jest zapisywana jako duża dodatnia liczba całkowita. Parametr jest zapisywana `Data` jako element. `message` Metoda jest wywoływana w celu `relatedActivityId` przekonwertowania wartości na ciąg sformatowany "B", który pojawia się w nagłówku. <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> Element w stopce identyfikuje typ zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType.Transfer>jako. `Opcode`  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> Metoda nie powinna być wywoływana przez kod aplikacji. Jest ona przeznaczona do użycia przez <xref:System.Diagnostics.TraceSource> obiekt do emitowania informacji śledzenia dla jej <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="eventSchemaTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat w pliku dziennika bez udostępniania dodatkowych informacji kontekstowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest wywoływana w celu zarejestrowania komunikatu <xref:System.Diagnostics.TraceEventType.Information> jako zdarzenia. <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A>  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji. Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="eventSchemaTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat, a następnie bieżący terminator wiersza do pliku dziennika bez udostępniania dodatkowych informacji kontekstowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest wywoływana w celu zarejestrowania komunikatu <xref:System.Diagnostics.TraceEventType.Information> jako zdarzenia. <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A>  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji. Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Writer">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter Writer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Writer" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.Writer" />
      <MemberSignature Language="VB.NET" Value="Public Property Writer As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ Writer { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Writer : System.IO.TextWriter with get, set" Usage="System.Diagnostics.EventSchemaTraceListener.Writer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia źródłowy składnik zapisywania tekstu, który zapisuje w pliku dziennika.</summary>
        <value>Element <see cref="T:System.IO.TextWriter" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Próba użycia metody dostępu set dla <xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A> właściwości podnosi wartość. <xref:System.NotSupportedException>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Podjęto próbę przypisania wartości do <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" /> właściwości.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
