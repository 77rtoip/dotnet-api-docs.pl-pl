<Type Name="EventSchemaTraceListener" FullName="System.Diagnostics.EventSchemaTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ebc2f93999298ef50555146af155a8da345f35ff" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36343208" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventSchemaTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSchemaTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSchemaTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSchemaTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSchemaTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type EventSchemaTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Określa, że śledzenia i debugowania dane wyjściowe zdarzenia end-to-end kodowany w formacie XML, zgodne schematu pliku dziennika.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener> Klasa udostępnia śledzenie zdarzeń zgodnych schematu end-to-end. Śledzenia end-to-end można użyć dla systemu, który zawiera składniki heterogenicznych, przekraczających wątku, <xref:System.AppDomain>, procesów i granice komputera. Schemat standardowych zdarzeń (zobacz [reprezentacja zdarzeń dla odbiorców zdarzeń](http://go.microsoft.com/fwlink/?LinkId=78955)) znajduje się w celu włączenia śledzenia w tych granicach. Schemat umożliwia dodawanie niestandardowych, schemat zgodnych elementów. Można użyć [narzędzia podglądu śledzenia usług (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129) do wyświetlania danych zdarzenia.  
  
 <xref:System.Diagnostics.EventSchemaTraceListener> dostosowana pod kątem wydajności rejestrowania niejawne obsługę śledzenia zwolnić blokady.  
  
 <xref:System.Diagnostics.EventSchemaTraceListener> Klasy konwertuje śledzenie i debugowanie informacji do strumienia tekstu kodowany w formacie XML. Opis dane wyjściowe XML znajduje się w tabelach w dalszej części tej sekcji.  
  
 Można włączyć lub wyłączyć <xref:System.Diagnostics.EventSchemaTraceListener> obiektu za pomocą pliku konfiguracji aplikacji, a następnie użyj skonfigurowanego <xref:System.Diagnostics.EventSchemaTraceListener> obiektów w aplikacji. Alternatywnie możesz utworzyć <xref:System.Diagnostics.EventSchemaTraceListener> obiektu w kodzie. Zaleca się włączenie obiektów nasłuchujących śledzenia przy użyciu pliku konfiguracji aplikacji. Aby uzyskać informacje dotyczące korzystania z plików konfiguracyjnych do śledzenia i debugowania, zobacz [schemat ustawień debugowania i śledzenia](http://msdn.microsoft.com/library/277ca5f6-e1c4-41b6-a47f-3a67ce5b94ac).  
  
 Aby skonfigurować <xref:System.Diagnostics.EventSchemaTraceListener> obiektów, zmodyfikuj plik konfiguracji, który odpowiada nazwie aplikacji. W tym pliku można dodać, usunąć lub ustawić właściwości odbiornik. Plik konfiguracji powinien być sformatowany w następujący sposób:  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sources>  
            <source name="TestSource" >  
                <listeners>  
                    <!--Remove the default trace listener for better performance.-->  
                    <remove name="Default"/>  
                    <!--Note: Removing the default trace listener prevents the dialog box   
                    from being displayed for Debug.Fail or Debug.Assert commands that are   
                    executed in user mode.-->  
                    <add name="eventListener"   
                      type="System.Diagnostics.EventSchemaTraceListener,  system.core"  
                      initializeData="TraceOutput.xml"   
                      traceOutputOptions="ProcessId, DateTime, Timestamp"   
                      bufferSize="65536"  
                      maximumFileSize="20480000"  
                      logRetentionOption="LimitedCircularFiles"  
                      maximumNumberOfFiles="2"/>  
                </listeners>  
            </source>  
        </sources>  
    </system.diagnostics>  
```  
  
 <xref:System.Diagnostics.EventSchemaTraceListener> Klasa dziedziczy <xref:System.Diagnostics.TraceListener.Filter%2A> właściwość z klasy podstawowej <xref:System.Diagnostics.TraceListener>. <xref:System.Diagnostics.TraceListener.Filter%2A> Właściwości umożliwia dodatkowy poziom filtrowania na odbiornika danych wyjściowych śledzenia. Jeśli filtr jest obecny, `Trace` metod wywołania odbiornika śledzenia <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> metody filtr, aby określić, czy emitować śledzenia.  
  
 Jeśli podjęto próbę zapisu do pliku, który jest używany lub jest niedostępny, sufiks identyfikatora GUID jest automatycznie dodawany do nazwy pliku.  
  
> [!NOTE]
>  Odbiornik metody są przeznaczone do wywołania przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy. Nie wywołuj metody odbiornika bezpośrednio z kodu aplikacji. <xref:System.Diagnostics.EventSchemaTraceListener> Odbiornika jest przeznaczony głównie do użytku przez <xref:System.Diagnostics.TraceSource> klasy.  
  
 W poniższej tabeli opisano elementy i atrybuty XML danych wyjściowych.  
  
|Element|Atrybuty|Dane wyjściowe|Uwagi|  
|-------------|----------------|------------|-----------|  
|`CallStack`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.Callstack> oflagowane w <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Znaki specjalne, takie jak > lub < są zastępowane sekwencje specjalne. Zobacz tabelę translacji zmienionym znaków w następnej tabeli.|  
|`Computer`|Brak|Zawsze widoczne.|Ten element reprezentuje wartość <xref:System.Environment.MachineName%2A> właściwości.|  
|`Correlation`|`ActivityID`|Zawsze widoczne.|Jeśli `ActivityID` nie zostanie określony, wartością domyślną jest pusty identyfikator GUID.|  
||`RelatedActivityID`|Zależy od obecności `relatedActivityId` parametru w `Trace` wywołania metody.|`RelatedActivityID` Atrybut odpowiada `relatedActivityId` parametr <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> metody.|  
|`Data`|Brak|Zawsze widoczne.|Ten element reprezentuje dane wejściowe parametr (`data`). Jeden element jest dostępna dla każdego obiektu danych. W przypadku dzienników zdarzeń `Data` element zawiera zmienionym danych XML. W przypadku dzienników danych `Data` element zawiera dane niezmienionym znaczeniu. Dane dziennika wyjścia używa `ToString` metody obiekty przekazany w danych.|  
|`Event`|Brak|Zawsze widoczne.|Ten element zawiera zdarzenia śledzenia.|  
|`EventData`|Brak|Brak dzienników zdarzeń.|Ten element reprezentuje parametr wejściowy (`message`, `args`). Zawiera on `Data` elementy o zmienionym znaczeniu danych XML, które zostaje utworzona przez wywołanie <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> metody.|  
|`EventID`|Brak|Zawsze widoczne.|Ten element reprezentuje dane wejściowe parametr (`id`).|  
|`Execution`|`ProcessID`|Zależy od obecności <xref:System.Diagnostics.TraceOptions.ProcessId> oflagowane w <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|`ProcessID` Atrybut został określony w <xref:System.Diagnostics.TraceEventCache>. Microsoft Windows 98 i Windows Millennium Edition w systemie operacyjnym, jeśli `ProcessID` jest większy niż 2 147 483 647, jest reprezentację dodatnią liczbą ujemną i powinny być konwertowane do uzyskania identyfikatora korygowania procesu.|  
||`ThreadID`|Gdy istnieje `ProcessID` jest obecny.|`ThreadID` Atrybut został określony w <xref:System.Diagnostics.TraceEventCache>.|  
|`Level`|Brak|Zawsze widoczne.|Ten element reprezentuje parametr wejściowy (wartość liczbową `eventType`). Wartości parametrów, które są większe niż 255 są dane wyjściowe jako poziom 8, który reprezentuje <xref:System.Diagnostics.TraceEventType.Information?displayProperty=nameWithType>. Typy zdarzeń śledzenia <xref:System.Diagnostics.TraceEventType.Critical>, <xref:System.Diagnostics.TraceEventType.Error>, <xref:System.Diagnostics.TraceEventType.Warning>, <xref:System.Diagnostics.TraceEventType.Information>, i <xref:System.Diagnostics.TraceEventType.Verbose> odpowiednio są dane wyjściowe jako poziomy 1, 2, 4, 8 do 10.|  
|`LogicalOperationStack`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> oflagowane w <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Może istnieć tylko jedna operacja logiczna. W związku z tym wartości są zapisywane jako `LogicalOperation` węzłów w `LogicalOperationStack` elementu.|  
|`OpCode`|Brak|Gdy istnieje `Level` jest większa niż 255.|Ten element reprezentuje typów zdarzeń śledzenia, które mają większy niż 255 wartości liczbowych. <xref:System.Diagnostics.TraceEventType.Start>, <xref:System.Diagnostics.TraceEventType.Stop>, <xref:System.Diagnostics.TraceEventType.Suspend>, <xref:System.Diagnostics.TraceEventType.Resume>, lub <xref:System.Diagnostics.TraceEventType.Transfer> odpowiednio są dane wyjściowe jako poziomy 1, 2, 4, 8 do 10.|  
|`Provider`|`GUID`|Zawsze widoczne.|Zawsze pusta.|  
|`RenderingInfo`|`Culture`|Zawsze widoczne.|Ten atrybut reprezentuje ciąg zasobu typu zdarzenia. Zawsze "pl pl\\".|  
|`System`|`Name`|Zawsze widoczne.||  
|`TimeCreated`|`SystemTime`|Zależy od obecności <xref:System.Diagnostics.TraceOptions.DateTime> oflagowane w <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Czas jest wartością <xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=nameWithType> właściwości. Ta właściwość jest wyrażona jako uniwersalny czas koordynowany|  
|`TimeStamp`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.Timestamp> oflagowane w <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Ten element jest określona w <xref:System.Diagnostics.TraceEventCache>.|  
|`UserData`|Brak|Zawierają dzienniki danych.|Ten element zawiera `Data` elementy niezmienionym znaczeniu, dostarczane przez użytkownika danymi z <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> metody.|  
  
 W poniższej tabeli przedstawiono znaki, które są anulowane w danych wyjściowych XML. Anulowanie występuje w wszystkie elementy i atrybuty z wyjątkiem `UserData` element, który zawiera dostarczane przez użytkownika, niezmienionym znaczeniu danych. `UserData` Element jest wynikiem wywołania <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> metody.  
  
|Znak poprzedzony znakiem ucieczki|Wartość|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-cpp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/CPP/eventschematracelistener.cpp#1)]
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> przy użyciu określonego pliku jako adresat debugowanie i śledzenie danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie jest rejestrowane, jeden plik nieograniczonego rozmiaru.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy o określonej nazwie przy użyciu określonego pliku jako adresat debugowanie i śledzenie danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <param name="bufferSize">Rozmiar buforu wyjściowego, w bajtach.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> z określoną nazwą i określony rozmiar buforu, przy użyciu określonego pliku jako adresat debugowanie i śledzenie danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zagadnienia związane z wydajnością `bufferSize` powinna być wielokrotnością 1024 bajty.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#3)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int * System.Diagnostics.TraceLogRetentionOption -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize, logRetentionOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <param name="bufferSize">Rozmiar buforu wyjściowego, w bajtach.</param>
        <param name="logRetentionOption">Jeden z <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> wartości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> z określoną nazwą i określony rozmiar buforu, przy użyciu określonego pliku przy użyciu zasad przechowywania określony dziennik jako adresat debugowanie i śledzenie danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zagadnienia związane z wydajnością `bufferSize` powinna być wielokrotnością 1024 bajty.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption, maximumFileSize As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption, long maximumFileSize);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int * System.Diagnostics.TraceLogRetentionOption * int64 -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize, logRetentionOption, maximumFileSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <param name="bufferSize">Rozmiar buforu wyjściowego, w bajtach.</param>
        <param name="logRetentionOption">Jeden z <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> wartości.</param>
        <param name="maximumFileSize">Maksymalny rozmiar pliku, w bajtach.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> z określoną nazwą i określony rozmiar buforu, przy użyciu określonego pliku z określony dziennik przechowywania zasad i maksymalny rozmiar jako odbiorca debugowanie i śledzenie danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zagadnienia związane z wydajnością `bufferSize` i `maximumFileSize` powinna być wielokrotnością liczby 1024 bajty. `maximumFileSize` nie jest wartość bezwzględna jest próg, który może zostać przekroczona zgodnie z rozmiarem ostatniego komunikatu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%2CSystem.Int64%29?displayProperty=nameWithType> konstruktora.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumFileSize" /> jest to liczba ujemna.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize, int32 maximumNumberOfFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption, maximumFileSize As Long, maximumNumberOfFiles As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSchemaTraceListener : string * string * int * System.Diagnostics.TraceLogRetentionOption * int64 * int -&gt; System.Diagnostics.EventSchemaTraceListener" Usage="new System.Diagnostics.EventSchemaTraceListener (fileName, name, bufferSize, logRetentionOption, maximumFileSize, maximumNumberOfFiles)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">Ścieżka do pliku dziennika.</param>
        <param name="name">Nazwa odbiornika.</param>
        <param name="bufferSize">Rozmiar buforu wyjściowego, w bajtach.</param>
        <param name="logRetentionOption">Jeden z <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> wartości.</param>
        <param name="maximumFileSize">Maksymalny rozmiar pliku, w bajtach.</param>
        <param name="maximumNumberOfFiles">Maksymalna liczba plików dziennika w danych wyjściowych.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> klasy z określoną nazwą i określony rozmiar buforu, przy użyciu określonego pliku przy użyciu zasad przechowywania dziennika określony maksymalny rozmiar i plików liczby jako adresat debugowanie i śledzenie danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zagadnienia związane z wydajnością `bufferSize` i `maximumFileSize` powinna być wielokrotnością liczby 1024 bajty. `maximumFileSize` nie jest wartość bezwzględna; jest próg przekraczająca zgodnie z rozmiarem ostatniego komunikatu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%2A> konstruktora. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumNumberOfFiles" /> jest mniejsza niż 2 i <paramref name="logRetentionOption" /> jest <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public int BufferSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.BufferSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BufferSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BufferSize : int" Usage="System.Diagnostics.EventSchemaTraceListener.BufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozmiar buforu wyjściowego.</summary>
        <value>Rozmiar buforu wyjściowego, w bajtach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest ustawiana `bufferSize` parametru w konstruktorze. Ze względu na wydajność rozmiar buforu powinien mieć ustawioną wielokrotnością 1024 bajty. Firma Microsoft zaleca domyślny rozmiar 32 * 1024 bajtów albo 64\*1024 bajty w celu uzyskania najlepszej wydajności.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób wyświetlenia wartości <xref:System.Diagnostics.EventSchemaTraceListener.BufferSize%2A> właściwości. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="eventSchemaTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka plik dziennika dla tego odbiornika, dzięki czemu nie będzie już otrzymywać dane wyjściowe śledzenia i debugowania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="abstract member Fail : string * string -&gt; unit&#xA;override this.Fail : string * string -&gt; unit" Usage="eventSchemaTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Podstawowe komunikat o błędzie zapisu.</param>
        <param name="detailMessage">Szczegółowy komunikat o błędzie do dołączenia do podstawowego komunikat.</param>
        <summary>Zapisuje informacje o błędzie, w tym komunikat o błędzie podstawowe i szczegółowy komunikat o błędzie, w pliku dziennika.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="eventSchemaTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przyczyny buforowane dane są zapisywane w dzienniku dla tego odbiornika.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedAttributes : unit -&gt; string[]&#xA;override this.GetSupportedAttributes : unit -&gt; string[]" Usage="eventSchemaTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera atrybuty niestandardowe konfiguracji XML, obsługiwanych przez usługę obiektu nasłuchującego śledzenia.</summary>
        <returns>A <see cref="T:System.String" /> tablica, która zawiera atrybuty konfiguracji XML rozpoznaje tego odbiornika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Atrybuty niestandardowe, które są zwracane przez tę metodę można w pliku konfiguracji XML do sterowania zachowaniem wystąpienia <xref:System.Diagnostics.EventSchemaTraceListener> klasy. Przy użyciu innych atrybutu powoduje, że wyjątek konfiguracji. <xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A> Metodę <xref:System.Diagnostics.EventSchemaTraceListener> zwraca następujący ciąg tablicy wartości: "bufferSize", "logRetentionOption", "maximumFileSize" i "maximumNumberOfFiles".  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThreadSafe">
      <MemberSignature Language="C#" Value="public override bool IsThreadSafe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadSafe" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsThreadSafe As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsThreadSafe { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadSafe : bool" Usage="System.Diagnostics.EventSchemaTraceListener.IsThreadSafe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy odbiornik śledzenia jest wątku bezpieczne.</summary>
        <value>Zawsze zwraca <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób wyświetlenia wartości <xref:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe%2A> właściwości. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumFileSize">
      <MemberSignature Language="C#" Value="public long MaximumFileSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumFileSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumFileSize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumFileSize : int64" Usage="System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera maksymalny rozmiar pliku dziennika.</summary>
        <value>Maksymalny rozmiar pliku, w bajtach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest ustawiana `maximumFileSize` parametru w konstruktorze lub `maximumFileSize` atrybutu w pliku konfiguracji. Ze względu na wydajność należy ustawić maksymalny rozmiar pliku do wielu 1024 bajty. <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> Wartość właściwości nie jest bezwzględną; jest próg przekraczająca zgodnie z rozmiarem ostatniego komunikatu.  
  
 W poniższej tabeli przedstawiono możliwości i domyślne wartości dla rozmiaru pliku, które są skojarzone z każdą opcją przechowywania dziennika śledzenia. Wartości oznaczone jako n/d wskazują, że <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> właściwość nie jest sprawdzany pod kątem którego <xref:System.Diagnostics.TraceLogRetentionOption> wartość.  
  
|TraceLogRetentionOption|Maksymalny rozmiar pliku|Domyślny rozmiar pliku|  
|-----------------------------|-----------------------|-----------------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|Brak|-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>0|4 KB|  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób wyświetlenia wartości <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> właściwości. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#6)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumNumberOfFiles">
      <MemberSignature Language="C#" Value="public int MaximumNumberOfFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumNumberOfFiles" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumNumberOfFiles As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumNumberOfFiles { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumNumberOfFiles : int" Usage="System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera maksymalną liczbę plików dziennika.</summary>
        <value>Maksymalna liczba plików dziennika, określony przez wartość <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> właściwości pliku.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość właściwości jest ustawiana `maximumNumberOfFiles` parametru w konstruktorze lub `maximumNumberOfFiles` atrybutu w pliku konfiguracji.  
  
 W poniższej tabeli przedstawiono możliwe i domyślne wartości rozmiaru pliku i liczba plików skojarzonych z każdą opcją przechowywania dziennika śledzenia. Wartości oznaczone jako n/d wskazują, że <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> właściwość nie jest sprawdzany pod kątem którego <xref:System.Diagnostics.TraceLogRetentionOption> wartość.  
  
|TraceLogRetentionOption|Maksymalna liczba plików|Domyślna liczba plików|  
|-----------------------------|-----------------------------|-----------------------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|Brak|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|Brak|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|Brak|-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>1|2|  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób wyświetlenia wartości <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> właściwości. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#7)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane śledzenia w pliku dziennika.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="eventSchemaTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> zawierający bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jeden z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator numeryczny dla zdarzenia.</param>
        <param name="data">Obiekt danych do wysyłania.</param>
        <summary>Zapisuje informacje o śledzeniu, obiektu danych i informacji o zdarzeniu do pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`, `source`, `eventType`, I `id` w nagłówku i stopce śledzenia są używane parametry. `id` Parametr jest konwertowany na liczbę całkowitą bez znaku, zanim zostaną zapisane. W związku z tym ujemny `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. `data` Parametru są zapisywane jako `Data` w węźle `UserData` elementu. `ToString` Metody obiektu danych służy do konwertowania obiektu na ciąg.  
  
> [!IMPORTANT]
>  Ta metoda nie ma być wywoływany bezpośrednio przez kod aplikacji. Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy do zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="eventSchemaTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> zawierający bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jeden z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator numeryczny dla zdarzenia.</param>
        <param name="data">Tablica obiektów danych do wysyłania.</param>
        <summary>Informacje, wielu obiektów danych i informacji o zdarzeniu do pliku dziennika śledzenia zapisów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`, `source`, `eventType`, I `id` w nagłówku i stopce śledzenia są używane parametry. `id` Parametr jest konwertowany na liczbę całkowitą bez znaku, zanim zostaną zapisane. W związku z tym ujemny `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. Obiekty w `data` tablicy parametrów są zapisywane jako `Data` węzłów w `UserData` elementu. `ToString` Metoda poszczególnych obiektów danych jest używana do obiektu jest skonwertowana do ciągu.  
  
> [!IMPORTANT]
>  Ta metoda nie ma być wywoływany bezpośrednio przez kod aplikacji. Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy do zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje śledzenia zdarzeń w pliku dziennika.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="eventSchemaTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> zawierający bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jeden z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator numeryczny dla zdarzenia.</param>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje śledzenia informacji, wiadomości i informacje o zdarzeniach w pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`, `source`, `eventType`, I `id` w nagłówku i stopce śledzenia są używane parametry. `id` Parametr jest konwertowany na liczbę całkowitą bez znaku, zanim zostaną zapisane. W związku z tym ujemny `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. `message` Parametru są zapisywane jako `Data` w węźle `EventData` elementu.  
  
> [!IMPORTANT]
>  Ta metoda nie ma być wywoływany bezpośrednio przez kod aplikacji. Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy do zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="eventSchemaTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> zawierający bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jeden z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator numeryczny dla zdarzenia.</param>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odpowiadają obiektów w <c>argumentów</c> tablicy.</param>
        <param name="args">Tablica obiektów zawiera zero lub więcej obiektów do sformatowania.</param>
        <summary>Zapisuje informacje o śledzeniu, sformatowany komunikat i informacje o zdarzeniach w pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`, `source`, `eventType`, I `id` w nagłówku i stopce śledzenia są używane parametry. `id` Parametr jest konwertowany na liczbę całkowitą bez znaku, zanim zostaną zapisane. W związku z tym ujemny `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Metoda jest wywoływana i `format` ciągu i `args` tablicy są przekazane jako parametry. Formatuje tej metody `args` tablicę obiektów i zapisuje tablicy sformatowane jako `Data` w węźle `EventData` elementu.  
  
> [!IMPORTANT]
>  Ta metoda nie ma być wywoływany bezpośrednio przez kod aplikacji. Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy do zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceLogRetentionOption">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceLogRetentionOption As TraceLogRetentionOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceLogRetentionOption TraceLogRetentionOption { System::Diagnostics::TraceLogRetentionOption get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceLogRetentionOption : System.Diagnostics.TraceLogRetentionOption" Usage="System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceLogRetentionOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera opcję przechowywania dziennika śledzenia pliku.</summary>
        <value>Jeden z <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> wartości. Wartość domyślna to <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób wyświetlenia wartości <xref:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption%2A> właściwości. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Diagnostics.EventSchemaTraceListener> klasy.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#9)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="abstract member TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit&#xA;override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="eventSchemaTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> zawierający bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu na stosie.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="id">Identyfikator numeryczny dla zdarzenia.</param>
        <param name="message">Komunikat śledzenia do zapisania.</param>
        <param name="relatedActivityId">A <see cref="T:System.Guid" /> struktura, która identyfikuje powiązane działania.</param>
        <summary>Zapisuje śledzenia informacji, w tym tożsamość powiązane działania, wiadomości i zdarzenia informacje w pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> Metoda służy do skorelowania powiązane dane śledzenia. `eventCache`, `source`, `id`, I `relatedActivityId` w nagłówku i stopce śledzenia są używane parametry. `id` Parametr jest konwertowany na liczbę całkowitą bez znaku, zanim zostaną zapisane. W związku z tym ujemny `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. `message` Parametru są zapisywane jako `Data` elementu. <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> Metoda jest wywoływana, aby przekonwertować `relatedActivityId` wartość "B" sformatowany ciąg, który jest wyświetlany w nagłówku. `Opcode` Elementu w stopce identyfikuje typ zdarzenia śladu jako <xref:System.Diagnostics.TraceEventType.Transfer>.  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> — Metoda nie powinna być wywoływana przez kod aplikacji. Jest przeznaczony do użycia przez <xref:System.Diagnostics.TraceSource> obiekt do wysyłania informacji o śledzeniu dla jego <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="eventSchemaTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat w pliku dziennika bez podawania żadnych informacji dodatkowy kontekst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> Wywoływana jest metoda zalogować komunikatu jako <xref:System.Diagnostics.TraceEventType.Information> zdarzeń.  
  
> [!IMPORTANT]
>  Ta metoda nie ma być wywoływany bezpośrednio przez kod aplikacji. Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy do zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="eventSchemaTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat następuje bez podawania żadnych informacji dodatkowy kontekst bieżącego terminator wiersza do pliku dziennika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> Wywoływana jest metoda zalogować komunikatu jako <xref:System.Diagnostics.TraceEventType.Information> zdarzeń.  
  
> [!IMPORTANT]
>  Ta metoda nie ma być wywoływany bezpośrednio przez kod aplikacji. Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy do zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Writer">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter Writer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Writer" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.Writer" />
      <MemberSignature Language="VB.NET" Value="Public Property Writer As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ Writer { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Writer : System.IO.TextWriter with get, set" Usage="System.Diagnostics.EventSchemaTraceListener.Writer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia podstawowy edytor tekstu, który zapisuje w pliku dziennika.</summary>
        <value>A <see cref="T:System.IO.TextWriter" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Próba użycia metody dostępu set dla <xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A> zgłasza właściwości <xref:System.NotSupportedException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Nastąpiła próba można przypisać wartości do <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" /> właściwości.</exception>
      </Docs>
    </Member>
  </Members>
</Type>