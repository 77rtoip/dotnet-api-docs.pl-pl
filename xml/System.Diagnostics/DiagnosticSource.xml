<Type Name="DiagnosticSource" FullName="System.Diagnostics.DiagnosticSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7c25e47e6d8703bd6ae6526b806dc841b20080e" /><Meta Name="ms.sourcegitcommit" Value="43c8e74d92c78325492baf27e41b400443f0dfbf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/08/2019" /><Meta Name="ms.locfileid" Value="68859012" /></Metadata><TypeSignature Language="C#" Value="public abstract class DiagnosticSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DiagnosticSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DiagnosticSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DiagnosticSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class DiagnosticSource abstract" />
  <TypeSignature Language="F#" Value="type DiagnosticSource = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.1</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Klasa abstrakcyjna, która pozwala na instrumentację kodu na potrzeby rejestrowania w czasie produkcyjnym bogatych ładunków danych do użycia w ramach procesu, który został objęty Instrumentacją.</summary>
    <remarks>Aby uzyskać więcej informacji, zobacz [Podręcznik użytkownika DiagnosticSource](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md).</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DiagnosticSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DiagnosticSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje wystąpienie <see cref="T:System.Diagnostics.DiagnosticSource" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsEnabled (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsEnabled (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsEnabled(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string -&gt; bool" Usage="diagnosticSource.IsEnabled name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa zapisywanego zdarzenia.</param>
        <summary>Sprawdza, czy zdarzenie powiadomienia jest włączone.</summary>
        <returns><see langword="true" />Jeśli zdarzenie powiadomienia jest włączone, <see langword="false" /> w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

W przypadku kosztownej konfiguracji powiadomienia można wywołać IsEnabled przed wykonaniem tej konfiguracji. Konsumenci nie powinni założyć, że otrzymują tylko powiadomienia, dla których IsEnabled ma wartość true. Niemniej jednak jest opcjonalne dla producentów wywołujących ten interfejs API. Nazwa powinna być taka sama, jak ta, która <see cref="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />została przeniesiona do.

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsEnabled (string name, object arg1, object arg2 = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(string name, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnabled (name As String, arg1 As Object, Optional arg2 As Object = null) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : string * obj * obj -&gt; bool&#xA;override this.IsEnabled : string * obj * obj -&gt; bool" Usage="diagnosticSource.IsEnabled (name, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa zapisywanego zdarzenia.</param>
        <param name="arg1">Obiekt, który reprezentuje dodatkowy kontekst dla IsEnabled. Odbiorcy powinni oczekiwać <see langword="null" /> , że może to wskazywać, że producent wezwał czysty IsEnabled (ciąg), aby sprawdzić, czy konsument chce otrzymywać powiadomienia dla takich zdarzeń. W zależności od tego producent może ponownie wywołać IsEnabled (ciąg, obiekt, obiekt) z<see langword="null" /> niekontekstem.</param>
        <param name="arg2">Opcjonalny. Obiekt, który reprezentuje dodatkowy kontekst dla IsEnabled. <see langword="null" />Domyślnie. Odbiorcy powinni oczekiwać <see langword="null" /> , że może to wskazywać, że producent o nazwie czysty IsEnabled (ciąg) lub producent przeszedł <paramref name="arg1" />wszystkie niezbędne kontekstu w.</param>
        <summary>Weryfikuje, czy zdarzenie powiadomienia jest włączone.</summary>
        <returns><see langword="true" />Jeśli zdarzenie powiadomienia jest włączone, <see langword="false" /> w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
W przypadku kosztownej konfiguracji powiadomienia można wywołać tę metodę i podać kontekst przed przeprowadzeniem instalacji.
          
           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityExport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityExport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityExport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityExport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityExport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityExport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">Działanie, na które ma wpływ zdarzenie zewnętrzne.</param>
        <param name="payload">Obiekt, który reprezentuje żądanie wychodzące.</param>
        <summary>Przenosi stan z działania do pewnego zdarzenia lub operacji, takich jak wychodzące żądanie HTTP, które nastąpi poza procesem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Jeśli lokacja Instrumentacji znajduje się w lokalizacji, w której działania opuszczają proces (na przykład wychodzące żądania HTTP), ta lokacja będzie chciała przenieść stan z działania do żądania wychodzącego.

W miarę możliwości należy to zrobić przez lokację instrumentacji, ponieważ istnieje umowa między <xref:System.Diagnostics.Activity> logiką żądania ougoing a lokacją Instrumentacji.   Jednak lokacja instrumentacji nie może obsłużyć zasad (na przykład, czy informacje o działaniu powinny być wyłączone czy zapisywane w starszym formacie ze względu na zgodność).
W tym celu lokacja Instrumentacji musi wywoływać się z powrotem do systemu rejestrowania i poprosiła o rozwiązaniu zasad. Jest to cel `OnActivityExport` metody.

`OnActivityExport` Metoda ma<xref:System.Diagnostics.Activity> również obiekt ładunku, który reprezentuje żądanie wychodzące. <xref:System.Diagnostics.DiagnosticSource> Subskrybent ma możliwość aktualizowania żądania wychodzącego przed jego wysłaniem.
 
Należy pamiętać, że ta metoda jest rzadko używana w lokacjach Instrumentacji (tylko te lokacje, które znajdują się na granicy wychodzącej procesu).   Ponadto zazwyczaj zasady domyślne wykonywane przez lokację Instrumentacji (na przykład w celu przetransferowania wszystkich stanów aktywności w ramach określonej konwencji wychodzącej) mogą być odpowiednie. Ta metoda jest tylko w przypadku, gdy jest to problem. Dlatego ta metoda powinna być używana bardzo rzadko i jest w większości w tym miejscu do `OnActivityImport` symetry z i w przyszłości.

Należy pamiętać `payload` , że jest to <xref:System.Object> tutaj wpisane, ale każda konkretna lokacja i subskrybent powinien znać typ ładunku, a tym samym rzutować i zdekodować je w razie potrzeby.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityImport">
      <MemberSignature Language="C#" Value="public virtual void OnActivityImport (System.Diagnostics.Activity activity, object payload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnActivityImport(class System.Diagnostics.Activity activity, object payload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.OnActivityImport(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnActivityImport(System::Diagnostics::Activity ^ activity, System::Object ^ payload);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit&#xA;override this.OnActivityImport : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.OnActivityImport (activity, payload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="payload" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">Działanie, na które ma wpływ zdarzenie zewnętrzne.</param>
        <param name="payload">Ładunek reprezentujący żądanie przychodzące.</param>
        <summary>Przenosi stan do działania z pewnego zdarzenia lub operacji, takich jak żądanie przychodzące, które wystąpiło poza procesem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Jeśli lokacja Instrumentacji tworzy nowe działanie w odpowiedzi na zdarzenie poza procesem, takie jak przesyłane żądanie `OnActivityImport` http, Metoda pozwala tej lokacji utworzyć nowe działanie i przetransferować stan z przychodzącego żądania do interakcyjn. 

W miarę możliwości należy to zrobić przez lokację instrumentacji, ponieważ między <xref:System.Diagnostics.Activity> usługą i logiką żądania komunikacji w lokacji Instrumentacji istnieje kontrakt.   Jednak lokacja instrumentacji nie może obsłużyć zasad. (Na przykład jeśli jest wykonywane próbkowanie, dokładnie te, które żądania powinny być próbkowane?) W takich przypadkach lokacja Instrumentacji musi wywoływać z powrotem do systemu rejestrowania i poprosiła o rozpoznanie zasad (na przykład w celu podjęcia decyzji o tym, czy ma być ustawiona bit "próbkowanie" działania. Jest to cel `OnActivityImport` metody. Ma ona charakter działania, a także obiekt ładunku, który reprezentuje żądanie komunikacji. Subskrybenci z tym, <xref:System.Diagnostics.DiagnosticSource> którzy mają możliwość aktualizowania tego działania zgodnie z potrzebami. 

Ta metoda jest rzadko używana w lokacjach Instrumentacji (tylko te lokacje, które znajdują się na granicy procesu), a lokacja instrumetation implementuje niektóre zasady domyślne (ustawia działanie w *jakiś* sposób) i dlatego nie jest konieczne przesłonięcie tej metody, jeśli Ta zasada domyślna jest dobra. Innymi słowy, ta metoda powinna być zastąpiona bardzo rzadkimi (ale często ważnymi) przypadkami.

Należy pamiętać `payload` , że wpisano <xref:System.Object> ją w tym miejscu, ale każda konkretna lokacja i abonent będą znać typ ładunku, a tym samym je rzutować i zdekodować w razie potrzeby.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartActivity">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Activity StartActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Activity StartActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StartActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::Activity ^ StartActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StartActivity : System.Diagnostics.Activity * obj -&gt; System.Diagnostics.Activity" Usage="diagnosticSource.StartActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity"><see cref="T:System.Diagnostics.Activity" /> Do uruchomienia.</param>
        <param name="args">Obiekt reprezentujący wartość, która jest przesyłana jako ładunek dla zdarzenia.</param>
        <summary><see cref="T:System.Diagnostics.Activity" /> Uruchamia i zapisuje zdarzenie uruchomienia.</summary>
        <returns>Uruchomione działanie dla wygodnego łańcucha.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
           
Opisuje operację logiczną, jej kontekst i relację nadrzędną; bieżące <xref:System.Diagnostics.Activity> przepływy przez przetwarzanie operacji. <xref:System.Diagnostics.Activity>

Ta metoda <xref:System.Diagnostics.Activity>rozpoczyna daną, utrzymuje globalną <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> aktywność i <xref:System.Diagnostics.Activity.Parent?displayProperty=nameWithType> dla danego <xref:System.Diagnostics.Activity>użytkownika, a następnie powiadamia odbiorców o tym, że <xref:System.Diagnostics.Activity> Nowa została uruchomiona. Konsumenci mogą uzyskać <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> dostęp do dodawania danych telemetrycznych kontekstu i/lub rozszerzania.

Producenci mogą przekazać dodatkowe informacje do konsumenta w ładunku.

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopActivity">
      <MemberSignature Language="C#" Value="public void StopActivity (System.Diagnostics.Activity activity, object args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopActivity(class System.Diagnostics.Activity activity, object args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.StopActivity(System.Diagnostics.Activity,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopActivity(System::Diagnostics::Activity ^ activity, System::Object ^ args);" />
      <MemberSignature Language="F#" Value="member this.StopActivity : System.Diagnostics.Activity * obj -&gt; unit" Usage="diagnosticSource.StopActivity (activity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="args" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="activity">Działanie, które ma zostać zatrzymane.</param>
        <param name="args">Obiekt, który reprezentuje wartość przekazaną jako ładunek dla zdarzenia.</param>
        <summary>Zatrzymuje daną <see cref="T:System.Diagnostics.Activity" />, utrzymuje działanie globalne <see cref="P:System.Diagnostics.Activity.Current" /> i <see cref="T:System.Diagnostics.Activity" /> powiadamia klientów, że został zatrzymany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Producenci mogą przekazać dodatkowe informacje do konsumenta w ładunku.

Konsumenci mogą uzyskać <xref:System.Diagnostics.Activity.Current?displayProperty=nameWithType> dostęp do dodawania danych telemetrycznych kontekstu i/lub rozszerzania.


         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit" Usage="diagnosticSource.Write (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.1</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa zapisywanego zdarzenia.</param>
        <param name="value">Obiekt, który reprezentuje wartość, która jest przesyłana jako ładunek dla zdarzenia. Jest to często anonimowy typ, który zawiera kilka wartości podrzędnych.</param>
        <summary>Zapewnia ogólny sposób rejestrowania złożonych ładunków.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Każde powiadomienie otrzymuje nazwę, która go identyfikuje, a także obiekt (zazwyczaj typu anonimowego), który zawiera dowolne informacje do przekazania do powiadomienia.  

`name`powinien być krótki. Nie należy używać w pełni kwalifikowanej nazwy, chyba że trzeba uniknąć niejednoznaczności, `name` ponieważ musi być globalnie unikatowa. Zazwyczaj wartość *ComponentName. EventName*, gdzie *ComponentName* i *EventName* są ciągami krótszymi niż 10 znaków, jest dobrym kompromisem.

Nazwy powiadomień nie powinny znajdować `.` się w nich, ponieważ nazwy składników mają kropki, a dla nich oba muszą mieć kropki do niejednoznaczności. Zalecamy użycie `_` zamiast tego.

Załóżmy, że odbiorniki będą używać prefiksu ciągu do filtrowania grup. W związku z tym, posiadanie hierarchii nazw składników jest dobrym sposobem.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>