<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="947a1f9fa7d052610f5006e95373c72b4f3aae6c" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52231203" /></Metadata><TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Określa, że śledzenie lub dane wyjściowe debugowania jako dane zakodowane w formacie XML do <see cref="T:System.IO.TextWriter" /> lub <see cref="T:System.IO.Stream" />, takich jak <see cref="T:System.IO.FileStream" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ma niezarządzany kod uprawnień do utworzenia wystąpienia <xref:System.Diagnostics.XmlWriterTraceListener> klasy.  
  
 <xref:System.Diagnostics.XmlWriterTraceListener> Klasy konwertuje śledzenie i debugowanie informacji do strumienia tekstu zakodowane w formacie XML. Opis danych wyjściowych XML znajduje się w tabelach, które należy wykonać. Możesz użyć [narzędzie śledzenia usług (SvcTraceViewer.exe)](https://go.microsoft.com/fwlink/p/?LinkId=240129) do wyświetlenia pliku XML danych wyjściowych.  
  
 Można włączać lub wyłączać <xref:System.Diagnostics.XmlWriterTraceListener> za pomocą pliku konfiguracji aplikacji i następnie użycie skonfigurowanego <xref:System.Diagnostics.XmlWriterTraceListener> w aplikacji. Alternatywnie można utworzyć <xref:System.Diagnostics.XmlWriterTraceListener> w kodzie.  
  
 Aby skonfigurować <xref:System.Diagnostics.XmlWriterTraceListener>, Edytuj plik konfiguracyjny, który odpowiada nazwie aplikacji. W tym pliku możesz dodać lub usunąć odbiornik, ustawić właściwości dla odbiornika lub usunąć odbiorników. Plik konfiguracyjny powinny być sformatowane tak jak w poniższym przykładzie.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 <xref:System.Diagnostics.XmlWriterTraceListener> Klasa dziedziczy <xref:System.Diagnostics.TraceListener.Filter%2A> właściwości z klasy bazowej <xref:System.Diagnostics.TraceListener>.  <xref:System.Diagnostics.TraceListener.Filter%2A> Właściwość umożliwia dodatkowy poziom filtrowania w odbiornika danych wyjściowych śledzenia.  Jeśli jest obecny, filtr `Trace` metody wywołania odbiornik śledzenia <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> metoda filtr, aby określić, czy emitować śledzenia.  
  
> [!NOTE]
>  Jeśli zostanie podjęta próba zapis do pliku, który jest używany lub niedostępny, nazwa pliku jest automatycznie poprzedzone przez identyfikator GUID.  
  
> [!NOTE]
>  Odbiornik metody są przeznaczone do można wywoływać za pomocą metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy.  Metody odbiornik nie mają być wywoływane bezpośrednio z kodu aplikacji. <xref:System.Diagnostics.XmlWriterTraceListener> Odbiornika jest przeznaczona głównie do użytku przez <xref:System.Diagnostics.TraceSource> klasy. <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A> i <xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A> metody mogą być wywoływane przez <xref:System.Diagnostics.Trace> i <xref:System.Diagnostics.Debug> klasy i wartości domyślne są dostarczane dla elementów XML, który <xref:System.Diagnostics.Trace> i <xref:System.Diagnostics.Debug> nie podano wartości dla.  
  
 W poniższej tabeli opisano elementy i atrybuty danych wyjściowych XML.  
  
|Element|Atrybuty|Dane wyjściowe|Uwagi|  
|-------------|----------------|------------|-----------|  
|`CallStack`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.Callstack> znacznik w <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Znaki specjalne, takie jak > lub < są zastępowane sekwencje ucieczki. Zobacz tabeli translacji znaków ucieczki znajdującej się poniżej.|  
|`Computer`|Brak|Zawsze widoczne.|Wartość <xref:System.Environment.MachineName%2A> właściwości.|  
|`Correlation`|`ActivityID`|Zawsze widoczne|Jeśli nie zostanie określony, wartość domyślna to pustym identyfikatorem GUID.|  
||`RelatedActivityID`|Zależy od obecności `relatedActivityId` parametr w wywołaniu metody śledzenia.|`relatedActivityId` Parametru <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> metody.|  
|`DataItem`|Brak|Zależy od `data` parametru <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> metody.|Ten element może zawierać tablicę elementów lub jeden element, więc wartości są zapisywane jako zbiór `DataItem` węzłów w ramach `TraceData` elementu.<br /><br /> Dane wyjściowe używa `ToString` metoda obiekty przekazana w danych.|  
|`EventID`|Brak|Zawsze widoczne.|Wprowadzanie parametrów (`id`).|  
|`Execution`|`ProcessName`|Zawsze widoczne.|Z <xref:System.Diagnostics.TraceEventCache>.|  
||`ProcessID`|Zawsze widoczne.|Z <xref:System.Diagnostics.TraceEventCache>. W systemach Windows 98 i Windows Me w systemie operacyjnym, jeśli `ProcessID` jest większa niż 2 147 483 647 jest reprezentacją dodatnią liczbą ujemną i powinny być konwertowane do uzyskania identyfikatora korygowania procesu.|  
||`ThreadID`|Zawsze widoczne.|Z <xref:System.Diagnostics.TraceEventCache>.|  
|`Level`|Brak|Zawsze widoczne.|Wprowadzanie parametrów (wartość liczbową `eventType`). Wartości parametru większej niż 255 są dane wyjściowe jako 255.|  
|`LogicalOperationStack`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> znacznik w <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Może istnieć więcej niż jedną operację logiczną, dzięki czemu wartości są zapisywane w postaci `LogicalOperation` węzłów w ramach `LogicalOperationStack` elementu.|  
|`Message`|Brak|Zależy od obecności wiadomości w wywołaniu metody śledzenia.|Ten element jest sformatowany komunikat, jeśli są podane argumenty formatowania.|  
|`Source`|`Name`|Zawsze widoczne.|Parametr wejściowy.|  
|`SubType`|`Name`|Zawsze widoczne.|Parametr wejściowy.|  
|`TimeCreated`|`SystemTime`|Zawsze widoczne.|Jeśli nie występuje w <xref:System.Diagnostics.TraceEventCache>, wartością domyślną jest bieżący czas.|  
|`TimeStamp`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.Timestamp> znacznik w <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości.|Z <xref:System.Diagnostics.TraceEventCache>.|  
|`Type`|Brak|Zawsze widoczne.|Zawsze wartość 3.|  
  
 W poniższej tabeli przedstawiono znaki, które będą miały zmienione znaczenie w danych wyjściowych XML. Anulowanie odbywa się w wszystkie elementy i atrybuty z wyjątkiem `DataItem` element, który nie zawiera wyjścia, jeśli przekazany obiekt `data` parametru <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> metoda jest <xref:System.Xml.XPath.XPathNavigator> obiektu. Jeśli <xref:System.Xml.XPath.XPathNavigator> jest używany dla obiektu danych <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> metoda jest wywoływana i węzeł główny całego śledzona jest jako dane o niezmienionym znaczeniu.  
  
|Znak poprzedzony znakiem ucieczki|Wartość|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Diagnostics.XmlWriterTraceListener> klasę umożliwiającą zapisanie danych o zmienionym znaczeniu i ucieczki do plików dzienników.  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> reprezentujący strumienia, zapisuje odbiornik śledzenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy jako adresata, debugowanie i dane wyjściowe śledzenia przy użyciu określonego strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A> Właściwość jest inicjowana na ciąg pusty ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> odbierająca dane wyjściowe z odbiornika śledzenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy przy użyciu określonego składnika zapisywania jako odbiorcy funkcji debugowania i dane wyjściowe śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A> Właściwość jest inicjowana na ciąg pusty ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nazwa pliku do zapisu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy jako adresata, debugowanie i dane wyjściowe śledzenia przy użyciu określonego pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje nowe wystąpienie klasy <xref:System.IO.StreamWriter> klasy dla określonego pliku w określonej ścieżce za pomocą <xref:System.Text.Encoding.UTF8%2A> kodowania. Jeśli plik istnieje, jest ona dołączana do. Jeśli plik nie istnieje, tworzony jest nowy plik.  
  
> [!NOTE]
>  Aby zmniejszyć prawdopodobieństwo wyjątek, dowolny znak, który może unieważnić danych wyjściowych jest zastępowany odciskiem "?" znaków.  
  
 <xref:System.Diagnostics.TraceListener.Name%2A> Właściwość jest inicjowana na ciąg pusty ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> reprezentujący strumienia, zapisuje odbiornik śledzenia.</param>
        <param name="name">Nazwa nowego wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy z określoną nazwą, używając określonego strumienia jako odbiorcy funkcji debugowania i dane wyjściowe śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Diagnostics.TraceListener.Name%2A> właściwości `name` wartość parametru lub ciąg pusty ("") jeżeli `name` parametr `null`. Nazwa może być używana jako indeks <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji do programowego modyfikowania właściwości dla odbiornika. Na przykład, poniższy kod ustawia <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości dla wystąpienia <xref:System.Diagnostics.XmlWriterTraceListener> którego <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> odbierająca dane wyjściowe z odbiornika śledzenia.</param>
        <param name="name">Nazwa nowego wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy z określoną nazwą, używając określonego składnika zapisywania jako odbiorcy funkcji debugowania i dane wyjściowe śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Diagnostics.TraceListener.Name%2A> właściwości `name` wartość parametru lub ciąg pusty ("") jeżeli `name` parametr `null`. Nazwa może być używana jako indeks <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji do programowego modyfikowania właściwości dla odbiornika. Na przykład, poniższy kod ustawia <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości dla wystąpienia <xref:System.Diagnostics.XmlWriterTraceListener> którego <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nazwa pliku do zapisu.</param>
        <param name="name">Nazwa nowego wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy z określoną nazwą, używając określonego pliku jako odbiorcy funkcji debugowania i dane wyjściowe śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje nowe wystąpienie klasy <xref:System.IO.StreamWriter> klasy dla określonego pliku w określonej ścieżce za pomocą <xref:System.Text.Encoding.UTF8%2A> kodowania. Jeśli plik istnieje, jest ona dołączana do. Jeśli plik nie istnieje, tworzony jest nowy plik.  
  
> [!NOTE]
>  Aby zmniejszyć prawdopodobieństwo wyjątek, dowolny znak, który może unieważnić danych wyjściowych jest zastępowany odciskiem "?" znaków.  
  
 <xref:System.Diagnostics.TraceListener.Name%2A> Właściwość jest ustawiona na `name` wartość parametru lub ciąg pusty ("") jeżeli `name` parametr `null`. Nazwa może być używana jako indeks <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji do programowego modyfikowania właściwości dla odbiornika. Na przykład, poniższy kod ustawia <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwości dla wystąpienia <xref:System.Diagnostics.XmlWriterTraceListener> którego <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> dla tego odbiornika, tak że nie będzie już otrzymywać śledzenia i debugowania danych wyjściowych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat o błędzie do zapisania.</param>
        <param name="detailMessage">Komunikat szczegółowy komunikat o błędzie, który można dołączyć do komunikatu o błędzie.</param>
        <summary>Zapisuje informacje o śledzeniu komunikat o błędzie i komunikat szczegółowy komunikat o błędzie do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnym zachowaniem jest wyświetlany komunikat i szczegółowy komunikat w oknie komunikatu, gdy aplikacja jest uruchomiona w trybie interfejsu użytkownika, a w <xref:System.Diagnostics.TraceListener> wystąpienia w <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji. Domyślnie kolekcja zawiera wystąpienie <xref:System.Diagnostics.DefaultTraceListener>. To zachowanie można dostosować, dodając lub usuwając <xref:System.Diagnostics.TraceListener> z kolekcji.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane śledzenia do wyjściowego pliku lub strumienia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">Element <see cref="T:System.Diagnostics.TraceEventCache" /> zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="data">Obiekt danych do emitowania.</param>
        <summary>Zapisuje informacje śledzenia, obiekt danych i informacji o zdarzeniu do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`, `source`, `eventType`, I `id` parametry są używane w nagłówku i stopce śledzenia. `id` Parametru jest konwertowana na liczbę całkowitą bez znaku, zanim, więc ujemnych `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. `data` Parametru jest zapisywany jako `DataItem` w węźle `TraceData` elementu. `ToString` Metoda obiektu danych służy do przekonwertować obiekt na ciąg.  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji.  Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy w celu zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Element <see cref="T:System.Diagnostics.TraceEventCache" /> zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="data">Tablica obiektów danych w celu emitowania.</param>
        <summary>Zapisuje informacje śledzenia, obiekty danych i informacji o zdarzeniu do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`, `source`, `eventType`, I `id` parametry są używane w nagłówku i stopce śledzenia. `id` Parametru jest konwertowana na liczbę całkowitą bez znaku, zanim, więc ujemnych `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. Obiekty w `data` tablicy parametrów są zapisywane w postaci `DataItem` węzłów w `TraceData` elementu. `ToString` Metoda każdego obiektu danych służy do przekonwertować obiekt na ciąg.  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji.  Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy w celu zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje śledzenia zdarzeń do wyjściowego pliku lub strumienia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">Element <see cref="T:System.Diagnostics.TraceEventCache" /> zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje śledzenia informacji, wiadomości i informacje o zdarzeniach do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`, `source`, `eventType`, I `id` parametry są używane w nagłówku i stopce śledzenia. `id` Parametru jest konwertowana na liczbę całkowitą bez znaku, zanim, więc ujemnych `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. `message` Parametru jest zapisywany jako `Message` elementu.  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji.  Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy w celu zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Element <see cref="T:System.Diagnostics.TraceEventCache" /> zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedną z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odnoszą się do obiektów w <paramref name="args" /> tablicy.</param>
        <param name="args">Tablica obiektów zawierających zero lub więcej obiektów do sformatowania.</param>
        <summary>Zapisuje informacje śledzenia, sformatowany komunikat i informacje o zdarzeniach do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`, `source`, `eventType`, I `id` parametry są używane w nagłówku i stopce śledzenia. `id` Parametru jest konwertowana na liczbę całkowitą bez znaku, zanim, więc ujemnych `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Metoda jest wywoływana, przekazując `format` ciągu i `args` tablic jako parametrów, aby sformatować `args` tablicę obiektów jako `Message` elementu.  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji.  Jest ona wywoływana przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> klasy w celu zapisania danych śledzenia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">Element <see cref="T:System.Diagnostics.TraceEventCache" /> zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śladzie stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="id">Numeryczny identyfikator zdarzenia.</param>
        <param name="message">Komunikat śledzenia do zapisania.</param>
        <param name="relatedActivityId">A <see cref="T:System.Guid" /> struktura, która identyfikuje powiązane działania.</param>
        <summary>Zapisuje śledzenia informacji w tym tożsamości powiązane informacje działania, wiadomości i zdarzeń do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> Metoda jest używana dla korelacji powiązane dane śledzenia. `eventCache`, `source`, `id`, I `relatedActivityId` parametry są używane w nagłówku i stopce śledzenia. `id` Parametru jest konwertowana na liczbę całkowitą bez znaku, zanim, więc ujemnych `id` wartości są zapisywane jako dużych dodatnią liczbą całkowitą. `message` Parametru jest zapisywany jako `Message` elementu. <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> Metoda jest wywoływana w celu przekonwertowania `relatedActivityId`wartość "B" sformatowany ciąg, który jest wyświetlany w nagłówku. `SubTypeName` Elementu w stopce identyfikuje typ zdarzenia śladu jako <xref:System.Diagnostics.TraceEventType.Transfer>.  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> Metoda nie jest przeznaczony do wywołania przez kod aplikacji.  Jest przeznaczona do wywoływania przez <xref:System.Diagnostics.TraceSource> obiektu emitowanie informacji o śledzeniu dla jego <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> metody.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat verbatim bez żadnych informacji dodatkowy kontekst do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> metodę, aby uwzględnić informacje o kontekście w danych wyjściowych dziennika.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat verbatim bez żadnych informacji dodatkowy kontekst, następuje bieżącego terminator wiersza do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> metodę, aby uwzględnić informacje o kontekście w danych wyjściowych dziennika.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wyliczenie: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>