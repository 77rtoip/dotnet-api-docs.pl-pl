<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1445a59b4b5ffacc035b30dd392f9a19190d4885" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69252446" /></Metadata><TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Kieruje śledzenie lub debugowanie danych wyjściowych jako dane zakodowane w <see cref="T:System.IO.TextWriter" /> formacie XML do <see cref="T:System.IO.Stream" />lub do, takich <see cref="T:System.IO.FileStream" />jak.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Aby utworzyć wystąpienie <xref:System.Diagnostics.XmlWriterTraceListener> klasy, musisz mieć uprawnienia do kodu niezarządzanego.  
  
 <xref:System.Diagnostics.XmlWriterTraceListener> Klasa konwertuje informacje o śledzeniu i debugowaniu na strumień tekstowy zakodowany w formacie XML. W poniższej tabeli przedstawiono opis danych wyjściowych XML. Aby wyświetlić dane wyjściowe XML, można użyć [narzędzia Podgląd śledzenia usług (SvcTraceViewer. exe)](https://go.microsoft.com/fwlink/p/?LinkId=240129) .  
  
 Możesz włączyć lub wyłączyć <xref:System.Diagnostics.XmlWriterTraceListener> za pomocą pliku konfiguracji aplikacji, a następnie użyć skonfigurowanej <xref:System.Diagnostics.XmlWriterTraceListener> w aplikacji. Alternatywnie możesz utworzyć <xref:System.Diagnostics.XmlWriterTraceListener> w kodzie.  
  
 Aby skonfigurować <xref:System.Diagnostics.XmlWriterTraceListener>, należy edytować plik konfiguracji, który odnosi się do nazwy aplikacji. W tym pliku można dodać lub usunąć odbiornik, ustawić właściwości odbiornika lub usunąć detektory. Plik konfiguracji powinien być sformatowany jak w poniższym przykładzie.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 Klasa dziedziczy właściwość z klasy <xref:System.Diagnostics.TraceListener>bazowej. <xref:System.Diagnostics.TraceListener.Filter%2A> <xref:System.Diagnostics.XmlWriterTraceListener>  <xref:System.Diagnostics.TraceListener.Filter%2A> Właściwość umożliwia dodatkowy poziom filtrowania danych wyjściowych śledzenia na odbiorniku.  Jeśli istnieje filtr, `Trace` metody odbiornika śledzenia <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> wywołują metodę filtru, aby określić, czy ma być emitowane śledzenie.  
  
> [!NOTE]
>  Jeśli podjęto próbę zapisu w pliku, który jest w użyciu lub jest niedostępny, nazwa pliku jest automatycznie poprzedzona identyfikatorem GUID.  
  
> [!NOTE]
>  Metody odbiornika mają być wywoływane przy użyciu metod <xref:System.Diagnostics.Debug>klasy, <xref:System.Diagnostics.Trace>, i <xref:System.Diagnostics.TraceSource> .  Metody odbiornika nie są przeznaczone do wywoływania bezpośrednio w kodzie aplikacji. Odbiornik jest przeznaczony głównie do użytku <xref:System.Diagnostics.TraceSource> przez klasę. <xref:System.Diagnostics.XmlWriterTraceListener> <xref:System.Diagnostics.Debug> <xref:System.Diagnostics.Trace> Metody <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A> i <xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A>mogąbyć wywoływane przez klasy i,<xref:System.Diagnostics.Debug> a wartości domyślne są udostępniane dla elementów XML, które nie dostarczają wartości dla. <xref:System.Diagnostics.Trace>  
  
 W poniższej tabeli opisano elementy i atrybuty danych wyjściowych XML.  
  
|Element|Atrybuty|Dane wyjściowe|Uwagi|  
|-------------|----------------|------------|-----------|  
|`CallStack`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.Callstack> flagi <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości.|Znaki specjalne, takie jak > lub <, są zastępowane sekwencjami ucieczki. Zobacz tabelę translacji znaków ucieczki, która następuje poniżej.|  
|`Computer`|Brak|Zawsze obecne.|Wartość <xref:System.Environment.MachineName%2A> właściwości.|  
|`Correlation`|`ActivityID`|Zawsze obecne|Jeśli nie zostanie określony, wartością domyślną jest pusty identyfikator GUID.|  
||`RelatedActivityID`|Zależy od obecności `relatedActivityId` parametru w wywołaniu metody śledzenia.|`relatedActivityId` Parametr<xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> metody.|  
|`DataItem`|Brak|Zależy od <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>parametrumetody. `data`|Ten element może zawierać tablicę elementów lub jeden element, dlatego wartości są zapisywane jako zestaw `DataItem` węzłów `TraceData` w ramach elementu.<br /><br /> W danych wyjściowych jest `ToString` stosowana Metoda przekazywania obiektów danych.|  
|`EventID`|Brak|Zawsze obecne.|Dane wejściowe parametru`id`().|  
|`Execution`|`ProcessName`|Zawsze obecne.|Z programu <xref:System.Diagnostics.TraceEventCache>.|  
||`ProcessID`|Zawsze obecne.|Z programu <xref:System.Diagnostics.TraceEventCache>. W systemach operacyjnych Windows 98 i Windows Me, jeśli `ProcessID` jest większa niż 2 147 483 647, jest dodatnią reprezentacją liczby ujemnej i należy ją przekonwertować w celu uzyskania poprawnego identyfikatora procesu.|  
||`ThreadID`|Zawsze obecne.|Z programu <xref:System.Diagnostics.TraceEventCache>.|  
|`Level`|Brak|Zawsze obecne.|Dane wejściowe parametru (wartość `eventType`liczbowa). Wartości parametrów większe niż 255 są wyprowadzane jako 255.|  
|`LogicalOperationStack`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flagi <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości.|Może istnieć więcej niż jedna operacja logiczna, dlatego wartości są zapisywane jako `LogicalOperation` węzły `LogicalOperationStack` w elemencie.|  
|`Message`|Brak|Zależy od obecności komunikatu w wywołaniu metody śledzenia.|Ten element jest sformatowanym komunikatem, jeśli podano argumenty formatowania.|  
|`Source`|`Name`|Zawsze obecne.|Wprowadzanie parametrów.|  
|`SubType`|`Name`|Zawsze obecne.|Wprowadzanie parametrów.|  
|`TimeCreated`|`SystemTime`|Zawsze obecne.|Jeśli nie występuje w <xref:System.Diagnostics.TraceEventCache>, wartością domyślną jest czas bieżący.|  
|`TimeStamp`|Brak|Zależy od obecności <xref:System.Diagnostics.TraceOptions.Timestamp> flagi <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> we właściwości.|Z programu <xref:System.Diagnostics.TraceEventCache>.|  
|`Type`|Brak|Zawsze obecne.|Zawsze wartość 3.|  
  
 W poniższej tabeli przedstawiono znaki, które są wyprowadzane w danych wyjściowych XML. Ucieczka występuje we `DataItem` wszystkich elementach i atrybutach z wyjątkiem elementu, który nie jest wyprowadzany, jeśli obiekt przeszedł `data` do parametru <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> metody jest <xref:System.Xml.XPath.XPathNavigator> obiektem. Jeśli jest używany dla obiektu danych <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> , metoda jest wywoływana i cały węzeł główny jest śledzony jako dane niezmienione. <xref:System.Xml.XPath.XPathNavigator>  
  
|Znak poprzedzony znakiem ucieczki|Wartość|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Diagnostics.XmlWriterTraceListener> klasy do zapisywania danych wyjściowych i niezmienionych w dziennikach plików.  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" /> Reprezentuje strumień, do którego zostanie zapisywany odbiornik śledzenia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy, używając określonego strumienia jako odbiorcy debugowania i danych wyjściowych śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A> Właściwość jest inicjowana do pustego ciągu ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> , który odbiera dane wyjściowe z odbiornika śledzenia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy przy użyciu określonego składnika zapisywania jako odbiorcy debugowania i danych wyjściowych śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A> Właściwość jest inicjowana do pustego ciągu ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nazwa pliku do zapisu.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy, używając określonego pliku jako odbiorcy debugowania i danych wyjściowych śledzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje nowe wystąpienie <xref:System.IO.StreamWriter> klasy dla określonego pliku w określonej ścieżce przy użyciu <xref:System.Text.Encoding.UTF8%2A> kodowania. Jeśli plik istnieje, jest dołączany do. Jeśli plik nie istnieje, zostanie utworzony nowy plik.  
  
> [!NOTE]
>  Aby zmniejszyć prawdopodobieństwo wystąpienia wyjątku, dowolny znak, który może unieważnić dane wyjściowe, jest zastępowany znakiem "?".  
  
 <xref:System.Diagnostics.TraceListener.Name%2A> Właściwość jest inicjowana do pustego ciągu ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" />jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" /> Reprezentuje strumień, do którego zostanie zapisywany odbiornik śledzenia.</param>
        <param name="name">Nazwa nowego wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy o określonej nazwie, używając określonego strumienia jako odbiorcy debugowania i śledzenia danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Diagnostics.TraceListener.Name%2A> Właściwość `name` do wartości parametru lub do pustego ciągu (""), `name` Jeśli parametr jest `null`. Nazwa może być używana jako indeks w <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji, aby programowo zmienić właściwości odbiornika. Na przykład poniższy kod ustawia <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwość dla wystąpienia, <xref:System.Diagnostics.XmlWriterTraceListener> którego <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.IO.TextWriter" /> , który odbiera dane wyjściowe z odbiornika śledzenia.</param>
        <param name="name">Nazwa nowego wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy o określonej nazwie, używając określonego składnika zapisywania jako odbiorcy debugowania i śledzenia danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje <xref:System.Diagnostics.TraceListener.Name%2A> Właściwość `name` do wartości parametru lub do pustego ciągu (""), `name` Jeśli parametr jest `null`. Nazwa może być używana jako indeks w <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji, aby programowo zmienić właściwości odbiornika. Na przykład poniższy kod ustawia <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwość dla wystąpienia, <xref:System.Diagnostics.XmlWriterTraceListener> którego <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nazwa pliku do zapisu.</param>
        <param name="name">Nazwa nowego wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> klasy o określonej nazwie, używając określonego pliku jako odbiorcy debugowania i śledzenia danych wyjściowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje nowe wystąpienie <xref:System.IO.StreamWriter> klasy dla określonego pliku w określonej ścieżce przy użyciu <xref:System.Text.Encoding.UTF8%2A> kodowania. Jeśli plik istnieje, jest dołączany do. Jeśli plik nie istnieje, zostanie utworzony nowy plik.  
  
> [!NOTE]
>  Aby zmniejszyć prawdopodobieństwo wystąpienia wyjątku, dowolny znak, który może unieważnić dane wyjściowe, jest zastępowany znakiem "?".  
  
 Właściwość jest ustawiona `name` na wartość parametru lub do pustego ciągu (""), `name` Jeśli parametr jest `null`. <xref:System.Diagnostics.TraceListener.Name%2A> Nazwa może być używana jako indeks w <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> kolekcji, aby programowo zmienić właściwości odbiornika. Na przykład poniższy kod ustawia <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> właściwość dla wystąpienia, <xref:System.Diagnostics.XmlWriterTraceListener> którego <xref:System.Diagnostics.TraceListener.Name%2A> właściwość jest "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> Zamyka dla tego odbiornika, dzięki czemu nie otrzymuje już śledzenia lub debugowania danych wyjściowych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat o błędzie do zapisu.</param>
        <param name="detailMessage">Szczegółowy komunikat o błędzie do dołączenia do komunikatu o błędzie.</param>
        <summary>Zapisuje informacje o śledzeniu, w tym komunikat o błędzie i szczegółowy komunikat o błędzie do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnym zachowaniem jest wyświetlenie komunikatu i szczegółowego komunikatu w oknie komunikatu, gdy aplikacja jest uruchomiona w trybie interfejsu użytkownika i do <xref:System.Diagnostics.TraceListener> wystąpień <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> w kolekcji. Domyślnie kolekcja zawiera wystąpienie <xref:System.Diagnostics.DefaultTraceListener>. Takie zachowanie można dostosować, dodając lub usuwając element <xref:System.Diagnostics.TraceListener> z kolekcji.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje dane śledzenia do pliku wyjściowego lub strumienia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="data">Obiekt danych do emisji.</param>
        <summary>Zapisuje informacje o śledzeniu, obiekt danych i informacje o zdarzeniu do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `eventCache`, `source`, `eventType`i sąużywanewnagłówkuistopceśledzenia.`id` Parametr jest konwertowany na liczbę całkowitą bez znaku przed zapisem, więc wartość `id` ujemna jest zapisywana jako duża dodatnia liczba całkowita. `id` Parametr jest zapisywana `DataItem` jako węzeł w `TraceData` elemencie. `data` `ToString` Metoda obiektu danych służy do konwertowania obiektu na ciąg.  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji.  Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="data">Tablica obiektów danych do emisji.</param>
        <summary>Zapisuje informacje o śledzeniu, obiekty danych i informacje o zdarzeniach do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `eventCache`, `source`, `eventType`i sąużywanewnagłówkuistopceśledzenia.`id` Parametr jest konwertowany na liczbę całkowitą bez znaku przed zapisem, więc wartość `id` ujemna jest zapisywana jako duża dodatnia liczba całkowita. `id` Obiekty w `data` tablicy parametrów są zapisywane jako `DataItem` węzły w `TraceData` elemencie. `ToString` Metoda każdego obiektu danych służy do konwertowania obiektu na ciąg.  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji.  Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zapisuje informacje o śledzeniu zdarzeń do pliku wyjściowego lub strumienia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje informacje o śledzeniu, komunikat i informacje o zdarzeniu do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `eventCache`, `source`, `eventType`i sąużywanewnagłówkuistopceśledzenia.`id` Parametr jest konwertowany na liczbę całkowitą bez znaku przed zapisem, więc wartość `id` ujemna jest zapisywana jako duża dodatnia liczba całkowita. `id` Parametr jest zapisywana `Message` jako element. `message`  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji.  Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="eventType">Jedna z <see cref="T:System.Diagnostics.TraceEventType" /> wartości.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="format">Ciąg formatu, który zawiera zero lub więcej elementów formatu, które odpowiadają obiektom <paramref name="args" /> w tablicy.</param>
        <param name="args">Tablica obiektów zawierających zero lub więcej obiektów do sformatowania.</param>
        <summary>Zapisuje informacje o śledzeniu, sformatowaną wiadomość i informacje o zdarzeniu do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry `eventCache`, `source`, `eventType`i sąużywanewnagłówkuistopceśledzenia.`id` Parametr jest konwertowany na liczbę całkowitą bez znaku przed zapisem, więc wartość `id` ujemna jest zapisywana jako duża dodatnia liczba całkowita. `id` `args` `args` `Message` Metoda jest wywoływana, przekazując `format` ciąg i tablicę jako parametry, aby sformatować tablicę obiektów jako element. <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>  
  
> [!IMPORTANT]
>  Ta metoda nie jest przeznaczona do wywoływania bezpośrednio przez kod aplikacji.  Jest on wywoływany przez metody <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>i <xref:System.Diagnostics.TraceSource> klasy do zapisywania danych śledzenia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> , który zawiera bieżący identyfikator procesu, identyfikator wątku i informacje o śledzeniu stosu.</param>
        <param name="source">Nazwa źródła.</param>
        <param name="id">Identyfikator liczbowy zdarzenia.</param>
        <param name="message">Komunikat śledzenia do zapisu.</param>
        <param name="relatedActivityId"><see cref="T:System.Guid" /> Struktura, która identyfikuje powiązane działanie.</param>
        <summary>Zapisuje informacje o śledzeniu, w tym tożsamość powiązanego działania, komunikat i informacje o zdarzeniu do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> Metoda jest używana dla korelacji powiązanych śladów. Parametry `eventCache`, `source`, `id`i sąużywanewnagłówkuistopceśledzenia.`relatedActivityId` Parametr jest konwertowany na liczbę całkowitą bez znaku przed zapisem, więc wartość `id` ujemna jest zapisywana jako duża dodatnia liczba całkowita. `id` Parametr jest zapisywana `Message` jako element. `message` Metoda jest wywoływana w celu `relatedActivityId`przekonwertowania wartości na ciąg sformatowany "B", który pojawia się w nagłówku. <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> Element w stopce identyfikuje typ zdarzenia śledzenia <xref:System.Diagnostics.TraceEventType.Transfer>jako. `SubTypeName`  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> Metoda nie jest przeznaczona do wywołania przez kod aplikacji.  Jest on przeznaczony do wywołania przez <xref:System.Diagnostics.TraceSource> obiekt, aby emitować informacje o śledzeniu dla jego <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> metody.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat verbatim bez dodatkowych informacji kontekstowych do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> , aby uwzględnić informacje kontekstu w danych wyjściowych dziennika.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Wiadomość do zapisu.</param>
        <summary>Zapisuje komunikat verbatim bez dodatkowych informacji kontekstowych, po których następuje bieżący terminator wiersza do pliku lub strumienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> , aby uwzględnić informacje kontekstu w danych wyjściowych dziennika.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Aby uzyskać możliwość wywoływania niezarządzanego kodu. Powiązane wartość typu wyliczeniowego: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>
