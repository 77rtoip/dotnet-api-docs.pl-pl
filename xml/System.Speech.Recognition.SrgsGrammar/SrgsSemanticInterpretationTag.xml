<Type Name="SrgsSemanticInterpretationTag" FullName="System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1bfda52d4f8eb6009b0cdf249e074b8d6cc09918" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51890765" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsSemanticInterpretationTag : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsSemanticInterpretationTag extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsSemanticInterpretationTag&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsSemanticInterpretationTag : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <TypeSignature Language="F#" Value="type SrgsSemanticInterpretationTag = class&#xA;    inherit SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje tag, który zawiera <see href="https://www.ecma-international.org/publications/standards/Ecma-327.htm">ECMAScript</see> uruchamiane po dopasowaniu reguły.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślny format semantycznego System.Speech odpowiada W3C [interpretacja semantyczna dla rozpoznawania mowy (SISR) w wersji 1.0](https://go.microsoft.com/fwlink/?LinkId=201765), gdzie format `tag` elementy, które zawiera skrypt jest `semantics/1.0`. Należy określić skrypt <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> obiekty, używając następującego formatu. W składni `semantics/1.0`:  
  
-   Reguły zmienną zawierającą element reguły jest identyfikowany przez "out".  
  
-   Nazwa obiektu, który ma dostęp do zmiennych reguły, reguły elementów poza zawierającego element reguły jest identyfikowany przez "zasady".  
  
-   Wynik najnowsze reguły z odwołaniami zgodną wypowiedź może być reprezentowany przez "rules.latest()".  
  
 Semantyczne wartości można skojarzyć z frazą w gramatyce, bez użycia skryptu, używając <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag> obiektu.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki dotyczące wybierania miast w locie. W przykładzie użyto <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> pozwalającą przypisać do każdego miasta, czyli kod lotniska to miasto semantycznego wartość. W przykładzie użyto również <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> można przypisać oddzielny klucz semantycznego dla każdego z dwóch odniesienia w <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> obiektu o nazwie `cityRef` do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiektu o nazwie `cities`. Semantyczne klucze zidentyfikować mieście rozpoznany jako Miasto wyjścia lub Miasto przybyciu locie. Obsługa <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzeń używa kluczy do pobrania semantykę z wynik rozpoznawania.  
  
 W przykładzie kodu "out" odnosi się do zmiennej reguły zawierającego <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>. Wyrażenie "limit czasu. LeavingFrom"odnosi się do właściwości o nazwie `LeavingFrom` o zmiennej reguły dla reguły o nazwie `bookFlight`.  
  
 Wyrażenie "rules.flightCities" odnosi się do zmiennej reguły w regule którego <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A> jest `flightCities`, i który jest elementem docelowym odwołania reguły. W tym przykładzie wyrażenie "limit czasu. LeavingFrom=rules.flightCities;"przypisuje wartość z reguły którego <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A> jest `flightCities` właściwości o nazwie `LeavingFrom` o zmiennej reguły dla reguły o nazwie `bookFlight`. Zobacz [semantycznego wyniki zawartości](https://msdn.microsoft.com/library/622291af-615c-4a15-9014-2933aa3f89fe), [odwołanie do nazwy reguły gramatyki](https://msdn.microsoft.com/library/0777e975-8665-4cc3-957b-752743cb1bb9), i [odwołania reguły gramatyki odwołujące się do](https://msdn.microsoft.com/library/dec3a809-9aa2-4139-893f-3a549ca1e03e) Aby uzyskać więcej informacji.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a SpeechRecognitionEngine object.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a rule for the cities, assign a semantic value to each city.  
        SrgsRule cities = new SrgsRule("flightCities");  
        SrgsItem chi = new SrgsItem("Chicago");  
        chi.Add(new SrgsSemanticInterpretationTag("out = \"ORD\";"));  
        SrgsItem bos = new SrgsItem("Boston");  
        bos.Add(new SrgsSemanticInterpretationTag("out = \"BOS\";"));  
        SrgsItem mia = new SrgsItem("Miami");  
        mia.Add(new SrgsSemanticInterpretationTag("out = \"MIA\";"));  
        SrgsItem dal = new SrgsItem("Dallas");  
        dal.Add(new SrgsSemanticInterpretationTag("out = \"DFW\";"));  
  
        SrgsOneOf airports = new SrgsOneOf(chi, bos, mia, dal);  
        cities.Add(airports);  
        cities.Scope = SrgsRuleScope.Private;  
  
        // Create a rule reference to the rule for cities.  
        SrgsRuleRef cityRef = new SrgsRuleRef(cities);  
  
        // Create the root rule for the grammar.  
        SrgsRule bookFlight = new SrgsRule("flightBooker");  
        bookFlight.Add(new SrgsItem("I want to fly from"));  
        bookFlight.Add(cityRef);  
        bookFlight.Add(new SrgsSemanticInterpretationTag("out.LeavingFrom=rules.flightCities;"));  
        bookFlight.Add(new SrgsItem("to"));  
        bookFlight.Add(cityRef);  
        bookFlight.Add(new SrgsSemanticInterpretationTag("out.GoingTo=rules.flightCities;"));  
        bookFlight.Scope = SrgsRuleScope.Public;  
  
        // Initialize the SrgsDocument, set the root rule, add rules to the collection.  
        SrgsDocument itinerary = new SrgsDocument(bookFlight);  
        itinerary.Rules.Add(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(itinerary);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Configure recognizer input.                  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Write to the console the text and the semantics from the recognition result.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The departure city is: " + e.Result.Semantics["LeavingFrom"].Value);  
      Console.WriteLine("  The arrival city is: " + e.Result.Semantics["GoingTo"].Value);  
    }  
  }  
}  
  
```  
  
 Poniżej przedstawiono gramatyki wygenerowane przez kod w przykładzie powyżej, w formacie XML.  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<grammar xml:lang="en-US" root="flightBooker" tag-format="semantics/1.0"   
version="1.0" xmlns="http://www.w3.org/2001/06/grammar">  
  
  <rule id="flightBooker" scope="public">  
    <item> I want to fly from </item>  
    <ruleref uri="#flightCities" />   
    <tag> out.LeavingFrom=rules.flightCities; </tag>  
    <item> to </item>  
    <ruleref uri="#flightCities" />   
    <tag> out.GoingTo=rules.flightCities; </tag>  
  </rule>  
  
  <rule id="flightCities" scope="private">  
    <one-of>  
      <item> Chicago <tag> out="ORD"; </tag></item>  
      <item> Boston <tag> out="BOS"; </tag></item>  
      <item> Miami <tag> out="MIA"; </tag></item>  
      <item> Dallas <tag> out="DFW"; </tag></item>  
    </one-of>  
  </rule>  
  
</grammar>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsSemanticInterpretationTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsSemanticInterpretationTag();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Tworzy wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor tworzy semantycznego interpretacji tag, którego <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script%2A> właściwość zawiera pusty ciąg.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsSemanticInterpretationTag (string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsSemanticInterpretationTag(System::String ^ script);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag script" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="script">Ciąg, który zawiera [ECMAScript](https://www.ecma-international.org/publications/standards/Ecma-327.htm) dla tagu.</param>
        <summary>Tworzy wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" /> klasy, określając zawartość skryptu znaczników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor tworzy semantycznego interpretacji tag, którego <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script%2A> właściwość jest ustawiona na wartość w `script`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="script" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Script : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see href="https://www.ecma-international.org/publications/standards/Ecma-327.htm">ECMAScript</see> dla tagu.</summary>
        <value>Ciąg, który zawiera skrypt interpretacja semantyczna dla tagu.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Aby ustawić zostanie podjęta próba **skryptu** do <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>