<Type Name="SrgsToken" FullName="System.Speech.Recognition.SrgsGrammar.SrgsToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="60d36595c7920c386e5d877b465a0712d46f94a2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36608863" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsToken : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsToken extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsToken&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsToken : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <TypeSignature Language="F#" Value="type SrgsToken = class&#xA;    inherit SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wyraz lub frazę krótkie, który może zostać rozpoznany.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy użyciu elementów członkowskich <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> klasy, można określić trzy rodzaje wyraz: <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> formularza, <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> formularza i niestandardowej <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> wyrazu.  
  
 Jeśli wiele słów są przechowywane w pojedynczym <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> obiekt każdego jest traktowany jako inny token wewnętrznie i w wyniku.  
  
 Ta klasa reprezentuje `token` elementu zdefiniowanego w sieci World Wide Web konsorcjum W3C [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0.](http://go.microsoft.com/fwlink/?LinkId=201761). Aby uzyskać informacje o SRGS `token` element i szczegółowe informacje o jego obsługa przez System.Speech, zobacz [token elementu](http://msdn.microsoft.com/library/3a9e8d64-7bd4-4188-a6f4-dbf28ea71632).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsToken (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsToken(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsToken : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsToken" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsToken text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst nowego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> wystąpienie klasy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> , określa tekst, który ma być rozpoznawane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> którego <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> właściwości ustawiono początkowo wartość `text` parametru.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="text" /> jest pusty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public string Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Display" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Display { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Display : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wyświetlaną formę tekst, który ma być używany.</summary>
        <value>Reprezentacja tokenu, w jakiej powinny być wyświetlane.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż zazwyczaj reprezentują tę samą wartość <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> formularza może być inna niż <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> tworzą dla wyraz lub frazę w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Na przykład, Wyświetl formularz może być skrótem, takie jak "USA", podczas tekst, który będzie używany i do którego <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> ma zastosowanie, jest "Stanów Zjednoczonych".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" /> do <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Pusty ciąg, aby przypisać podejmowana jest próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ciąg, który definiuje wymowy dla tokenu.</summary>
        <value>Zwraca ciąg zawierający telefony z alfabet fonetyczny określone w <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Telefony są litery i symbole, które opisują dźwięki mowy. System.Speech obsługuje trzy alfabetach fonetyczny służący do określania niestandardowej wymowy: Universal Phone Ustaw (UPS), zestaw Phone mowy interfejsu API (SAPI) i międzynarodowy alfabet fonetyczny (IPA). Telefony określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> musi odpowiadać alfabet fonetyczny określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>. Zobacz [leksykonów i małych liter fonetyczny](http://msdn.microsoft.com/library/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) Aby uzyskać więcej informacji.  
  
 Telefony określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> wskazują sposób zawartość <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> powinny występować w przypadku uznania powiodło się.  Aparat rozpoznawania mowy używa wymowy określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> mowy i zwraca ciąg zawarty w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> w wyniku rozpoznawania.  
  
 Jeśli telefony nie są rozdzielonych spacjami lub podany ciąg zawiera nierozpoznany telefonu, aparat rozpoznawania nie rozpoznaje określonego wymowy jako prawidłowy wymowy Word zawarty w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>.  
  
 Określony w wymowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> pierwszeństwo wymowy określone w leksykonów skojarzonych z gramatyki lub aparatu rozpoznawania. Ponadto wymowy w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> właściwość ma zastosowanie tylko do pojedynczego wystąpienia wyraz lub frazę zawarty w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>.  
  
   
  
## Examples  
 Gramatyka w poniższym przykładzie zawiera wyrazy, żargon i ma również nietypowe słowa: "whatchamacallit". Dodawanie niestandardowych, Wymowa wbudowany, przy użyciu <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> właściwość <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> klasa można poprawić dokładność rozpoznawania dla słowa "whatchamacallit" oraz jak w przypadku całą frazę zawierającego go. W przykładzie użyto telefony z Microsoft uniwersalnych Phone Ustaw (UPS) do definiowania niestandardowych wymowy.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an instance of the in-process recognizer.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build the SrgsOneOf objects with alternative choices for the slang phrase.  
        SrgsOneOf gimme = new SrgsOneOf(  
          new string[] { "give me", "gimme", "hand me", "ha'me" });  
        SrgsOneOf the = new SrgsOneOf(new string[] { "the", "duh" });  
  
        // Build the one-of element that contains the pronunciation.  
        SrgsItem thing = new SrgsItem("thingamajig");  
        SrgsItem whatcha = new SrgsItem();  
        SrgsToken callit = new SrgsToken("whatchamacallit");  
        callit.Pronunciation = "W AE T CH AE M AE K AA L IH T";  
        whatcha.Add(callit);  
        SrgsOneOf what = new SrgsOneOf(new SrgsItem[] {thing, whatcha});  
  
        // Create the rule from the SrgsOneOf objects.  
        SrgsRule slangRule = new SrgsRule("slang", gimme, the, what);  
  
        // Build an SrgsDocument object from the rule and set the phonetic alphabet.  
        SrgsDocument tokenPron = new SrgsDocument(slangRule);  
        tokenPron.PhoneticAlphabet = SrgsPhoneticAlphabet.Ups;  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar g_Slang = new Grammar(tokenPron);  
        g_Slang.Name = ("Slang Pronunciation");  
        recognizer.LoadGrammarAsync(g_Slang);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized phrase: " + e.Result.Text);  
      Console.WriteLine("Confidence: " + e.Result.Confidence);  
      Console.WriteLine("  Word summary: ");  
      foreach (RecognizedWordUnit word in e.Result.Words)  
      {  
        Console.WriteLine(  
          "    Lexical form ({1})" +  
          " Pronunciation ({0})" +  
          " Confidence ({2})",  
          word.Pronunciation, word.LexicalForm, word.Confidence);  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" /> do <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Pusty ciąg, aby przypisać podejmowana jest próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia formie pisemnej programu word, który powinien być używany.</summary>
        <value>Tekst zawarty w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> wystąpienie klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż zazwyczaj reprezentują tę samą wartość <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> formularza może być inna niż <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> tworzą dla wyraz lub frazę w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Na przykład <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> formularza może być skrótem, takie jak "USA", podczas tekst, który będzie używany i do którego <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> ma zastosowanie, jest "Stanów Zjednoczonych".  
  
 Wartość domyślna dla <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> właściwości to ciąg pusty — "".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> do <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Pusty ciąg, aby przypisać podejmowana jest próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />.</exception>
        <exception cref="T:System.ArgumentException">Można przypisać ciąg, który zawiera znak cudzysłowu (") do podejmowana jest próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>