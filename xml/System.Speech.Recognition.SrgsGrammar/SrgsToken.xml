<Type Name="SrgsToken" FullName="System.Speech.Recognition.SrgsGrammar.SrgsToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4945f97f2a17466627b2661501ab004397d3953" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69146138" /></Metadata><TypeSignature Language="C#" Value="public class SrgsToken : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsToken extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsToken&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsToken : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <TypeSignature Language="F#" Value="type SrgsToken = class&#xA;    inherit SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wyraz lub krótką frazę, którą można rozpoznać.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Korzystając z elementów <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> członkowskich klasy, można określić trzy formy wyrazu <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> : formularz, <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> formularz i niestandardowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> dla słowa.  
  
 Jeśli wiele wyrazów jest przechowywanych w pojedynczym <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> obiekcie, każdy z nich jest traktowany jako inny token wewnętrznie i w wyniku.  
  
 Ta klasa reprezentuje `token` element zdefiniowany przez organizacja World Wide Web Consortium (W3C) [rozpoznawanie mowy (SRGS) w wersji 1,0.](https://go.microsoft.com/fwlink/?LinkId=201761). Aby uzyskać informacje na temat `token` elementu SRGS i szczegółowych informacji o jego obsłudze przez system. Speech, zobacz [element token](https://msdn.microsoft.com/library/3a9e8d64-7bd4-4188-a6f4-dbf28ea71632).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsToken (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsToken(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsToken : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsToken" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsToken text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst nowego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> wystąpienia klasy.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> klasy i określa tekst, który ma zostać rozpoznany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzy obiekt <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> , którego <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> właściwość jest początkowo ustawiona `text` na wartość parametru.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="text" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="text" />jest puste.</exception>
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public string Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Display" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Display { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Display : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia formę wyświetlania tekstu, który ma być mówiony.</summary>
        <value>Reprezentacja tokenu w postaci, w jakiej powinna być wyświetlana.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż zazwyczaj reprezentują tę samą wartość, <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> formularz może być inny <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> niż formularz <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>słowa lub frazy w. Na przykład formularz wyświetlania może być akronimem, na przykład "USA", podczas gdy tekst, który będzie mówiony, i do którego <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> ma zastosowanie, to "Stany Zjednoczone Ameryki".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />. <see langword="null" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Podjęto próbę przypisania pustego ciągu do <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ciąg określający wymowę dla tokenu.</summary>
        <value>Zwraca ciąg zawierający telefony z alfabetu fonetycznego określonego w <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Telefony to litery lub symbole opisujące dźwięki mowy. System. Speech obsługuje trzy alfabety fonetyczne w celu określenia niestandardowych wymowy: zestawu uniwersalnego telefonu (UPS), zestawu telefonów Speech API (SAPI) i międzynarodowego alfabetu fonetycznego (IPA). Telefony określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> parametrze muszą być zgodne z alfabetem <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>fonetycznym określonym w elemencie. Aby uzyskać więcej informacji [, zobacz leksykony i alfabety fonetyczne](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) .  
  
 Telefony określone w polu <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> wskazują, w jaki sposób <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> zawartość powinna być wymawiana w celu pomyślnego rozpoznania.  Aparat rozpoznawania mowy używa wymowy określonej w programie <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> , aby dopasować dane wejściowe mowy i zwraca ciąg zawarty <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> przez w wyniku rozpoznawania.  
  
 Jeśli telefony nie są rozdzielane spacjami lub określony ciąg zawiera nierozpoznany numer telefonu, aparat rozpoznawania nie rozpoznaje wskazanej wymowy jako prawidłowej wymowy wyrazu zawartego w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>.  
  
 Wymowy określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> elemencie mają pierwszeństwo przed wymowiemi określonymi w leksykonach skojarzonych z gramatyką lub aparatem rozpoznawania. Ponadto wymowa we <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> właściwości dotyczy tylko pojedynczego wystąpienia wyrazu lub frazy <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>zawartej w.  
  
   
  
## Examples  
 Gramatyka w poniższym przykładzie zawiera słowa żargonu i zawiera nietypowe słowo: "whatchamacallit". Dodanie niestandardowej, wbudowanej wymowy przy <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> użyciu właściwości <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> klasy może poprawić dokładność rozpoznawania wyrazu "whatchamacallit", jak również dla całej frazy, która ją zawiera. W przykładzie są wykorzystywane telefony z uniwersalnego zestawu telefonów firmy Microsoft (UPS) do definiowania niestandardowych wymowy.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an instance of the in-process recognizer.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build the SrgsOneOf objects with alternative choices for the slang phrase.  
        SrgsOneOf gimme = new SrgsOneOf(  
          new string[] { "give me", "gimme", "hand me", "ha'me" });  
        SrgsOneOf the = new SrgsOneOf(new string[] { "the", "duh" });  
  
        // Build the one-of element that contains the pronunciation.  
        SrgsItem thing = new SrgsItem("thingamajig");  
        SrgsItem whatcha = new SrgsItem();  
        SrgsToken callit = new SrgsToken("whatchamacallit");  
        callit.Pronunciation = "W AE T CH AE M AE K AA L IH T";  
        whatcha.Add(callit);  
        SrgsOneOf what = new SrgsOneOf(new SrgsItem[] {thing, whatcha});  
  
        // Create the rule from the SrgsOneOf objects.  
        SrgsRule slangRule = new SrgsRule("slang", gimme, the, what);  
  
        // Build an SrgsDocument object from the rule and set the phonetic alphabet.  
        SrgsDocument tokenPron = new SrgsDocument(slangRule);  
        tokenPron.PhoneticAlphabet = SrgsPhoneticAlphabet.Ups;  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar g_Slang = new Grammar(tokenPron);  
        g_Slang.Name = ("Slang Pronunciation");  
        recognizer.LoadGrammarAsync(g_Slang);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized phrase: " + e.Result.Text);  
      Console.WriteLine("Confidence: " + e.Result.Confidence);  
      Console.WriteLine("  Word summary: ");  
      foreach (RecognizedWordUnit word in e.Result.Words)  
      {  
        Console.WriteLine(  
          "    Lexical form ({1})" +  
          " Pronunciation ({0})" +  
          " Confidence ({2})",  
          word.Pronunciation, word.LexicalForm, word.Confidence);  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />. <see langword="null" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Podjęto próbę przypisania pustego ciągu do <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)">Leksykony i alfabety fonetyczne</related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zapisaną formę wyrazu, który powinien być mówiony.</summary>
        <value>Tekst zawarty w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> wystąpieniu klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż zazwyczaj reprezentują tę samą wartość, <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> formularz może być inny <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> niż formularz <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>słowa lub frazy w. Na przykład <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> formularz może być akronimem, na przykład "USA", podczas gdy tekst, który będzie używany, i do <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> którego ma zastosowanie, to "Stany Zjednoczonea z Ameryki".  
  
 Wartość <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> domyślna właściwości jest pustym ciągiem-"".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />. <see langword="null" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Podjęto próbę przypisania pustego ciągu do <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />.</exception>
        <exception cref="T:System.ArgumentException">Podjęto próbę przypisania ciągu, który zawiera znak cudzysłowu (") do <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
