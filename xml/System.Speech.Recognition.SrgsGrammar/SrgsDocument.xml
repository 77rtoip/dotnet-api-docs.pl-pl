<Type Name="SrgsDocument" FullName="System.Speech.Recognition.SrgsGrammar.SrgsDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88552cf1d889d4c92ddd1242cd0aa6bbd9d383f0" /><Meta Name="ms.sourcegitcommit" Value="75eca440f8f4d595506405f48961f38649e160d7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/01/2019" /><Meta Name="ms.locfileid" Value="66457837" /></Metadata><TypeSignature Language="C#" Value="public class SrgsDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsDocument" />
  <TypeSignature Language="F#" Value="type SrgsDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje obiekt czasu projektowania, który jest używany do tworzenia gramatyki silnie typizowane środowiska uruchomieniowego, które są zgodne z <see href="https://www.w3.org/TR/speech-grammar/">mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0</see>.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz utworzyć pustą <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia i tworzyć gramatyki, dodając wystąpień klas, które reprezentują SRGS elementów, takich jak <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>,<xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>, i <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Można także skonstruować <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienie z istniejącego pliku gramatyki CLS SRGS XML, z wystąpienia <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, lub z wystąpienia <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Po <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt jest tworzony, może być załadowany do <xref:System.Speech.Recognition.Grammar> obiektu lub opracowane przez <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>, dzięki czemu może zostać odczytany przez <xref:System.Speech.Recognition.Grammar> obiektu.  
  
 Zobacz [tworzenie SrgsGrammar przy użyciu Gramatyk](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)) w [System mowy przewodnik programowania w programie .NET Framework](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361625(v%3doffice.14)) uzyskać więcej informacji i przykładów.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)">Tworzenie przy użyciu SrgsGrammar gramatyki</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używanie konstruktorów do <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> klasy, można utworzyć wystąpienia <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, lub <xref:System.Xml.XmlReader> obiektu z ciąg, który zawiera ścieżkę do gramatykę w formacie XML, lub możesz zainicjować wystąpienia puste z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor tworzy pustą <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia. Tworzenie gramatyki w ciągu pustego <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia, należy dodać wystąpienia klas, które reprezentują SRGS elementów, takich jak <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>, i <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu, a następnie tworzy reguły publicznego o nazwie `winnerRule`. Następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> składający się z ciągu "kraj, który wygrała świata w piłce nożnej to:" i dodaje ten element, aby <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> właściwości reguły. Przykład tworzy następnie dwie reguły więcej (`ruleEurope` i `ruleSAmerica`), każdy jest <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt, który zawiera trzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> obiektów. Po utworzeniu tego innego <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> tworzony jest obiekt, który zawiera <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> obiekty, które odwołują się do `ruleEurope` i `ruleSAmerica`. Nowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiektu jest dodawane do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> właściwość `winnerRule`. Dzięki temu wszystkie trzy reguły (`winnerRule`, `ruleEurope`, i `ruleSAmerica`) są dodawane do <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> właściwość <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Na koniec trzy reguły są kompilowane do binarna reprezentacja gramatyki.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  String fileName = Path.GetTempFileName();  
  using (FileStream stream = new FileStream(fileName, FileMode.Create))   
  {   
  
    // Compile the grammar to a binary format.  
    SrgsGrammarCompiler.Compile(document, stream);   
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder"><see cref="T:System.Speech.Recognition.GrammarBuilder" /> Użyty do utworzenia obiektu <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy z <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy gramatykę <xref:System.Speech.Recognition.GrammarBuilder> przy użyciu <xref:System.Speech.Recognition.Choices> obiektów. Następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z <xref:System.Speech.Recognition.GrammarBuilder> obiektu.  
  
```csharp  
GrammarBuilder builder = null;  
  
// Create new Choices objects and add countries, and create GrammarBuilder objects.  
Choices choicesEurope = new Choices(new string[] { "England", "France", "Germany", "Italy" });  
GrammarBuilder europe = new GrammarBuilder(choicesEurope);  
  
Choices choicesSAmerica = new Choices(new string[] { "Argentina", "Brazil", "Uruguay" });  
GrammarBuilder sAmerica = new GrammarBuilder(choicesSAmerica);  
  
Choices worldCupWinnerChoices = new Choices(new GrammarBuilder[] {choicesEurope, choicesSAmerica});  
  
// Create new GrammarBuilder from a Choices object.  
builder = new GrammarBuilder(worldCupWinnerChoices);  
  
// Create an SrgsDocument object from a GrammarBuilder object.  
SrgsDocument document = new SrgsDocument(builder);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="builder" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (grammarRootRule As SrgsRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ grammarRootRule);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.SrgsGrammar.SrgsRule -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument grammarRootRule" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="grammarRootRule" Type="System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Parameters>
      <Docs>
        <param name="grammarRootRule"><see langword="root rule" /> w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy i określa <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" /> obiektu reguły głównego gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor dodaje określoną regułą do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu, a następnie ustawia go jako <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> reguły dla gramatyki.  
  
   
  
## Examples  
 Poniższy przykład tworzy dwie reguły (`chooseCities` i `destCities`) dotyczące wybierania początkowe i docelowe miast w locie. Przykład inicjuje <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> przy użyciu `chooseCities` reguły jako argument. W przykładzie polecenie zapisuje zawartość kolekcji reguł oraz nazwa reguły głównego do konsoli.  
  
```csharp  
// Create a rule that contains a list of destination cities.  
SrgsRule destCities = new SrgsRule("Destination");  
SrgsOneOf toCities = new SrgsOneOf(new string[] { "New York", "Seattle", "Denver" });  
destCities.Add(toCities);  
  
// Create a list of origin cities and supporting phrases.  
SrgsOneOf fromCities = new SrgsOneOf(new SrgsItem[] {   
  new SrgsItem("Dallas"), new SrgsItem("Miami"), new SrgsItem("Chicago") });  
SrgsItem intro = new SrgsItem("I want to fly from");  
SrgsItem to = new SrgsItem("to");  
  
// Create the root rule of the grammar, and assemble the components.  
SrgsRule chooseCities = new SrgsRule("Trip");  
chooseCities.Add(intro);  
chooseCities.Add(fromCities);  
chooseCities.Add(to);  
chooseCities.Add(new SrgsRuleRef(destCities));  
  
// Create the SrgsDocument and specify the root rule to add.  
SrgsDocument bookFlight = new SrgsDocument(chooseCities);  
  
// Add the rule for the destination cities to the document's rule collection.  
bookFlight.Rules.Add(new SrgsRule[] { destCities });  
  
// Display the contents of the Rules collection and the name of the root rule.  
foreach (SrgsRule rule in bookFlight.Rules)  
{  
  Console.WriteLine("Rule " + rule.Id + " is in the rules collection");  
}  
Console.WriteLine("Root Rule " + bookFlight.Root.Id);  
  
// Create a Grammar object and load it to the recognizer.  
Grammar g = new Grammar(bookFlight);  
g.Name = ("City Chooser");  
recognizer.LoadGrammarAsync(g);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="grammarRootRule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Lokalizacja pliku SRGS XML.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy, określając lokalizację pliku XML dokumentu, który jest używany do wypełnienia <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z pliku o nazwie "srgsDocumentFile.xml".  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
   document = new SrgsDocument(srgsDocumentFile);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> jest ciągiem pustym.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Xml.XmlReader srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsGrammar As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Xml::XmlReader ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Xml.XmlReader -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsGrammar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar"><see cref="T:System.Xml.XmlReader" /> Obiekt, który został utworzony za pomocą <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienie kodu XML.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy z wystąpienia <see cref="T:System.Xml.XmlReader" /> odwołuje się plik gramatyki XML format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy nowe wystąpienie klasy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z wystąpienia <xref:System.Xml.XmlReader> odwołuje się plik "srgsDocumentFile.xml".  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
{  
  XmlReader reader = XmlReader.Create(srgsDocumentFile);  
  document = new SrgsDocument(reader);  
  reader.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyReferences">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; AssemblyReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; AssemblyReferences" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyReferences As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ AssemblyReferences { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyReferences : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera zestaw informacje referencyjne dotyczące <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" /> Właściwość zwraca kolekcję ciąg zawierający listę odwołań do zestawów.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBehind">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; CodeBehind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; CodeBehind" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeBehind As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ CodeBehind { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBehind : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje związane z kodem dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" /> Właściwość zwraca kolekcję ciągu, która zawiera listę dokumentów związanym z kodem.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje dotyczące kultury dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value>A <see cref="T:System.Globalization.CultureInfo" /> obiekt, który zawiera informacje o bieżącej kultury dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Program Microsoft Windows i interfejsu API System.Speech Zaakceptuj wszystkie prawidłowe kody krajów języka. Aby wykonać rozpoznawanie mowy, przy użyciu języka określonego w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture%2A> właściwość, aparatu rozpoznawania mowy, który obsługuje kod kraju języka musi być zainstalowany. Aparatów rozpoznawania mowy, które są dostarczane z programem Microsoft Windows 7 współpracować z poniższych kodów kraju języka.  
  
-   en-GB. Angielski (Zjednoczone Królestwo)  
  
-   en-US. Angielski (Stany Zjednoczone)  
  
-   de-DE. Niemiecki (Niemcy)  
  
-   es-ES. Hiszpański (Hiszpania)  
  
-   fr-FR. Francuski (Francja)  
  
-   ja-JP. Japoński (Japonia)  
  
-   zh-CN. Chiński (Chiny)  
  
-   zh-TW. Chiński (Tajwan)  
  
 Kody dwuliterowych języka, takich jak "en", "fr" lub "es" są również dozwolone.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość jest przypisana do <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Wartość jest przypisana do <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> jest <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="public bool Debug { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Debug" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberSignature Language="VB.NET" Value="Public Property Debug As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Debug { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Debug : bool with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informację, czy numery wierszy powinna być dodana do wbudowanych skryptach.</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" /> Właściwość zwraca <see langword="true" /> Jeśli numery wierszy powinna być dodana do debugowania; w przeciwnym razie właściwość ta zwraca <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportNamespaces">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; ImportNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; ImportNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImportNamespaces As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ ImportNamespaces { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImportNamespaces : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pokrewne obszary nazw dla bieżącej <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" /> Właściwość zwraca kolekcję parametrów, która znajduje się lista pokrewnych przestrzeniach <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia język programowania używany dla kodu wbudowanego w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" /> Właściwość zwraca język programowania, do którego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> jest aktualnie ustawiona.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As SrgsGrammarMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode Mode { System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Tryb rozpoznawania <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode%2A> Właściwość zwraca element członkowski <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode> określający typ danych wejściowych, <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> oczekuje. Dwa możliwe wartości to `Voice` na dane wejściowe funkcji rozpoznawania mowy, oraz `Dtmf` wejścia dźwięki sygnału podwójnego wielu częstotliwość (DTMF), które są zwykle skojarzone z telefonu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obszar nazw <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" /> Właściwość zwraca przestrzeń nazw dla bieżącej <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticAlphabet">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberSignature Language="VB.NET" Value="Public Property PhoneticAlphabet As SrgsPhoneticAlphabet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet PhoneticAlphabet { System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet value); };" />
      <MemberSignature Language="F#" Value="member this.PhoneticAlphabet : System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia alfabecie fonetyczny <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Zwraca alfabet fonetyczny, używanej do określania niestandardowej wymowy w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fonetyczny alfabety składają się z telefonów, które składają się z liter, cyfr lub znaków, czasami w połączeniu. Każdy Telefon w tym artykule opisano unikatowy dźwięk mowy. Jest to w przeciwieństwie do alfabetu łacińskiego, dla których wszystkie litery może reprezentować wielu mówionego dźwięku. Należy wziąć pod uwagę różne wymowy literę "c" słowa "jajek" i "zaprzestanie" lub inną wymowy kombinacji literę "th" w wyrazy "rzecz" oraz "".  
  
 W System.Speech można użyć dowolnego z trzech alfabety fonetyczny do określania niestandardowej wymowy: International Phone alfabetu (IPA), uniwersalnym ustawić telefonu (UPS) lub nieokreślone telefonu zestawu. Określony alfabet fonetyczny Określa, który zestaw phone będzie służyć do definiowania wymowy wbudowane <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> obiektów. Telefony określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> musi odpowiadać alfabet fonetyczny określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>.  
  
 Zobacz [Lexicons i alfabetów fonetyczny](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) Aby uzyskać więcej informacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRule Root { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRule Root" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public Property Root As SrgsRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRule ^ Root { System::Speech::Recognition::SrgsGrammar::SrgsRule ^ get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Speech.Recognition.SrgsGrammar.SrgsRule with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia reguły głównego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Zwraca regułę, która została wyznaczona jako główny reguły <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> Obiekt musi już być w dokumencie <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> przed można ustawić na **reguły głównego**.  
  
 Można również ustawić regułę głównego dla <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu za pomocą <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiekt jako argument <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy regułę o nazwie `winnerRule`, a następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu o nazwie `document`. Przykład następnie wywołuje <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> metodę, aby dodać reguły do dokumentu. Wreszcie w przykładzie dokumentu <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> właściwości `winnerRule`, a tym samym co `root rule` dla gramatyki definicją <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu.  
  
```csharp  
SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
winnerRule.Scope = SrgsRuleScope.Public;  
  
SrgsDocument document = new SrgsDocument();  
  
document.Rules.Add(winnerRule);  
document.Root = winnerRule;   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rules As SrgsRulesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ Rules { System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Rules : System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję reguł, które obecnie są zdefiniowane dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Zwraca reguły zdefiniowane dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz dodać <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiekty do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> przy użyciu <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> metody <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> właściwości. Jeśli należy zainicjować <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt i określić <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiekt jako argument, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> jest automatycznie dodawany do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> dla <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki, który rozpoznaje frazę "kraj, który wygrała świata w piłce nożnej" następuje nazwa kraju, która została wybrana świata w piłce nożnej. W przykładzie jest tworzony <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu, a następnie tworzy reguły publicznego o nazwie `winnerRule`. Po dodaniu ciąg do reguły `winnerRule`, przykład tworzy dwie reguły więcej (`ruleEurope` i `ruleSAmerica`), każdy z nich zawierający listę krajów. Za pomocą <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> metody, na przykład dodaje wszystkie trzy reguły (`winnerRule`, `ruleEurope`, i `ruleSAmerica`) do <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> właściwość <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Script : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia język skryptowy .NET dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value><see langword="Script" /> Właściwość zwraca bieżący język skryptowy .NET dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta właściwość jest przestarzała. Jego użycie nie jest już zalecany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Aby ustawić zostanie podjęta próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> właściwości na wartość null.</exception>
        <exception cref="T:System.ArgumentException">Aby ustawić zostanie podjęta próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> właściwości na pusty ciąg.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSrgs">
      <MemberSignature Language="C#" Value="public void WriteSrgs (System.Xml.XmlWriter srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSrgs(class System.Xml.XmlWriter srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSrgs (srgsGrammar As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSrgs(System::Xml::XmlWriter ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="member this.WriteSrgs : System.Xml.XmlWriter -&gt; unit" Usage="srgsDocument.WriteSrgs srgsGrammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar"><see cref="T:System.Xml.XmlWriter" /> Używany do zapisywania <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</param>
        <summary>Zapisuje zawartość <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu do pliku gramatyki formatu XML, który jest zgodny z [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](https://go.microsoft.com/fwlink/?LinkId=201761).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu, a następnie tworzy reguły publicznego o nazwie `winnerRule`. Następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> składający się z ciągu "kraj, który wygrała świata w piłce nożnej to:" i dodaje ten element, aby <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> właściwości reguły. Przykład tworzy następnie dwie reguły więcej (`ruleEurope` i `ruleSAmerica`), każdy jest <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt, który zawiera trzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> obiektów. Po utworzeniu tego innego <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> tworzony jest obiekt, który zawiera <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> obiekty, które odwołują się do `ruleEurope` i `ruleSAmerica`. Nowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiektu jest dodawane do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> właściwość `winnerRule`. Dzięki temu wszystkie trzy reguły (`winnerRule`, `ruleEurope`, i `ruleSAmerica`) są dodawane do <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> właściwość <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Ponadto w przykładzie jest tworzony pusty plik XML i wystąpienie <xref:System.Xml.XmlWriter>.  <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs%2A> Metoda używa <xref:System.Xml.XmlWriter> wystąpienie do zapisywania zawartości <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> do pliku XML.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  // Create a string object with the path to the file to use.  
  string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
  
  // Create an XmlWriter object and pass the file path.  
  XmlWriter writer = XmlWriter.Create(srgsDocumentFile);  
  
  // Write the contents of the XmlWriter object to an SRGS-compatible XML file.  
  document.WriteSrgs(writer);  
  writer.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlBase">
      <MemberSignature Language="C#" Value="public Uri XmlBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri XmlBase" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlBase As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ XmlBase { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlBase : Uri with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia podstawowy identyfikator URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Bieżący podstawowy identyfikator URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> Właściwość pobiera wartość, która jest używana do rozpoznawania względne identyfikatory URI w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu. Załóżmy, że wartość <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> jest "http://www.contoso.com/" i <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> zawiera odwołanie względne reguły do innego dokumentu, na przykład `SrgsRuleRef("ExternalGrammar.grxml")`. Spowoduje to utworzenie następującej ścieżki bezwzględnej do dokumentu zewnętrznego: `http://www.contoso.com/ExternalGrammar.grxml`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>