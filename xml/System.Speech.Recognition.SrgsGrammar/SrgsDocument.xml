<Type Name="SrgsDocument" FullName="System.Speech.Recognition.SrgsGrammar.SrgsDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba0219ca27b2ec5fe88496d7f6908bc20815c371" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69231677" /></Metadata><TypeSignature Language="C#" Value="public class SrgsDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsDocument" />
  <TypeSignature Language="F#" Value="type SrgsDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje obiekt czasu projektowania, który jest używany do kompilowania silnie określonego typu gramatyki środowiska uruchomieniowego, które są zgodne z <see href="https://www.w3.org/TR/speech-grammar/">specyfikacją gramatyki rozpoznawania mowy (SRGS) w wersji 1,0</see>.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Możesz utworzyć puste wystąpienie i utworzyć gramatykę, dodając wystąpienia klas, które reprezentują elementy SRGS, takie jak <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf><xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>,, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>, i. Można również skonstruować <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienie z istniejącego pliku gramatyki XML zgodnego z SRGS, z <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>wystąpienia <xref:System.Speech.Recognition.GrammarBuilder>lub z wystąpienia.  
  
 Po utworzeniu <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler> <xref:System.Speech.Recognition.Grammar> obiektu można go załadować do obiektu lub skompilować przez, co umożliwi jego odczytanie przez obiekt. <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>  
  
 Aby uzyskać więcej informacji i przykładów, zobacz [Tworzenie gramatyki przy użyciu SrgsGrammar](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)) w [przewodniku programowania mowy systemu dla .NET Framework](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361625(v%3doffice.14)) .  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)">Tworzenie gramatyki przy użyciu SrgsGrammar</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używając <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> konstruktorów klasy, można utworzyć <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienie z <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, lub <xref:System.Xml.XmlReader> , z ciągu, który zawiera ścieżkę do gramatyki w formacie XML lub można zainicjować puste wystąpienie z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>programu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor tworzy puste <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienie. Aby zbudować gramatykę w pustym <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpieniu, należy dodać wystąpienia klas, które reprezentują elementy SRGS, takie <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>jak <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>,, <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>i.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt, a następnie tworzy regułę publiczną o nazwie `winnerRule`. Następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> , która składa się z ciągu "kraj, który kupił światowy filiżankę:", i dodaje ten element <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> do właściwości reguły. Przykład tworzy dwie więcej reguł`ruleEurope` (i `ruleSAmerica`), z których <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> każdy jest obiektem, który zawiera trzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> obiekty. Następnie tworzony jest inny <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt, który zawiera <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> obiekty odwołujące się `ruleEurope` do `ruleSAmerica`i. Nowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt jest następnie dodawany <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> do właściwości `winnerRule`. Następnie wszystkie trzy reguły (`winnerRule`, `ruleEurope`i `ruleSAmerica`) zostaną dodane do <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> właściwości <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Na koniec trzy reguły są kompilowane w postaci binarnej reprezentacji gramatyki.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  String fileName = Path.GetTempFileName();  
  using (FileStream stream = new FileStream(fileName, FileMode.Create))   
  {   
  
    // Compile the grammar to a binary format.  
    SrgsGrammarCompiler.Compile(document, stream);   
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Obiekt używany do <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> tworzenia wystąpienia. <see cref="T:System.Speech.Recognition.GrammarBuilder" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy <see cref="T:System.Speech.Recognition.GrammarBuilder" /> z obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy gramatykę w <xref:System.Speech.Recognition.GrammarBuilder> wystąpieniu przy użyciu <xref:System.Speech.Recognition.Choices> obiektów. Następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> <xref:System.Speech.Recognition.GrammarBuilder> obiekt z obiektu.  
  
```csharp  
GrammarBuilder builder = null;  
  
// Create new Choices objects and add countries/regions, and create GrammarBuilder objects.  
Choices choicesEurope = new Choices(new string[] { "England", "France", "Germany", "Italy" });  
GrammarBuilder europe = new GrammarBuilder(choicesEurope);  
  
Choices choicesSAmerica = new Choices(new string[] { "Argentina", "Brazil", "Uruguay" });  
GrammarBuilder sAmerica = new GrammarBuilder(choicesSAmerica);  
  
Choices worldCupWinnerChoices = new Choices(new GrammarBuilder[] {choicesEurope, choicesSAmerica});  
  
// Create new GrammarBuilder from a Choices object.  
builder = new GrammarBuilder(worldCupWinnerChoices);  
  
// Create an SrgsDocument object from a GrammarBuilder object.  
SrgsDocument document = new SrgsDocument(builder);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="builder" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (grammarRootRule As SrgsRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ grammarRootRule);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.SrgsGrammar.SrgsRule -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument grammarRootRule" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="grammarRootRule" Type="System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Parameters>
      <Docs>
        <param name="grammarRootRule"><see langword="root rule" /> W<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiekcie.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy i <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" /> określa obiekt jako główną regułę gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor dodaje określoną regułę do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> i ustawia ją jako regułę dla gramatyki.  
  
   
  
## Examples  
 Poniższy przykład tworzy dwie reguły (`chooseCities` i `destCities`) do wybierania pochodzenia i miejsc docelowych dla lotu. Przykład inicjuje <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienie `chooseCities` przy użyciu reguły jako argumentu. Przykład zapisuje zawartość kolekcji reguł i nazwę głównej reguły w konsoli programu.  
  
```csharp  
// Create a rule that contains a list of destination cities.  
SrgsRule destCities = new SrgsRule("Destination");  
SrgsOneOf toCities = new SrgsOneOf(new string[] { "New York", "Seattle", "Denver" });  
destCities.Add(toCities);  
  
// Create a list of origin cities and supporting phrases.  
SrgsOneOf fromCities = new SrgsOneOf(new SrgsItem[] {   
  new SrgsItem("Dallas"), new SrgsItem("Miami"), new SrgsItem("Chicago") });  
SrgsItem intro = new SrgsItem("I want to fly from");  
SrgsItem to = new SrgsItem("to");  
  
// Create the root rule of the grammar, and assemble the components.  
SrgsRule chooseCities = new SrgsRule("Trip");  
chooseCities.Add(intro);  
chooseCities.Add(fromCities);  
chooseCities.Add(to);  
chooseCities.Add(new SrgsRuleRef(destCities));  
  
// Create the SrgsDocument and specify the root rule to add.  
SrgsDocument bookFlight = new SrgsDocument(chooseCities);  
  
// Add the rule for the destination cities to the document's rule collection.  
bookFlight.Rules.Add(new SrgsRule[] { destCities });  
  
// Display the contents of the Rules collection and the name of the root rule.  
foreach (SrgsRule rule in bookFlight.Rules)  
{  
  Console.WriteLine("Rule " + rule.Id + " is in the rules collection");  
}  
Console.WriteLine("Root Rule " + bookFlight.Root.Id);  
  
// Create a Grammar object and load it to the recognizer.  
Grammar g = new Grammar(bookFlight);  
g.Name = ("City Chooser");  
recognizer.LoadGrammarAsync(g);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="grammarRootRule" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Lokalizacja pliku XML SRGS.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy, określając lokalizację dokumentu XML, który jest używany do wypełniania <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> plik z pliku o nazwie "srgsDocumentFile. xml".  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
   document = new SrgsDocument(srgsDocumentFile);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" />jest pustym ciągiem.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Xml.XmlReader srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsGrammar As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Xml::XmlReader ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Xml.XmlReader -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsGrammar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">Obiekt, który został utworzony <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> za pomocą wystąpienia XML. <see cref="T:System.Xml.XmlReader" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy z <see cref="T:System.Xml.XmlReader" /> wystąpienia, które odwołuje się do pliku gramatyki w formacie XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy nowe wystąpienie <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z <xref:System.Xml.XmlReader> wystąpienia, które odwołuje się do pliku "srgsDocumentFile. xml".  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
{  
  XmlReader reader = XmlReader.Create(srgsDocumentFile);  
  document = new SrgsDocument(reader);  
  reader.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyReferences">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; AssemblyReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; AssemblyReferences" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyReferences As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ AssemblyReferences { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyReferences : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o odwołaniu do zestawu <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> dla tego wystąpienia.</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" /> Właściwość zwraca kolekcję ciągów zawierającą listę odwołań do zestawu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBehind">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; CodeBehind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; CodeBehind" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeBehind As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ CodeBehind { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBehind : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje związane z kodem dla tego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" /> Właściwość zwraca kolekcję ciągów, która zawiera listę dokumentów związanych z kodem.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje o <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> kulturze wystąpienia.</summary>
        <value>Obiekt, który zawiera bieżące informacje o kulturze <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />dla. <see cref="T:System.Globalization.CultureInfo" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft Windows i system. Speech API akceptują wszystkie prawidłowe kody krajów językowych. Aby przeprowadzić rozpoznawanie mowy przy użyciu języka określonego we <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture%2A> właściwości, należy zainstalować aparat rozpoznawania mowy obsługujący ten kod w języku kraju. Aparaty rozpoznawania mowy dostarczane z systemem Microsoft Windows 7 współpracują z poniższymi kodami kraju języka.  
  
-   pl GB. Angielski (Zjednoczone Królestwo)  
  
-   en-US. Angielski (Stany Zjednoczone)  
  
-   de-DE. Niemiecki (Niemcy)  
  
-   es-ES. Hiszpański (Hiszpania)  
  
-   fr-FR. Francuski (Francja)  
  
-   ja-JP. Japoński (Japonia)  
  
-   zh-CN. Chiński (Chiny)  
  
-   zh-TW. Chiński (Tajwan)  
  
 Dozwolone są również dwuliterowe kody języka, takie jak "en", "fr" lub "es".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Przypisywana <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> wartość to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Przypisywana <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> wartość to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="public bool Debug { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Debug" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberSignature Language="VB.NET" Value="Public Property Debug As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Debug { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Debug : bool with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia, czy do wbudowanych skryptów mają być dodawane numery wierszy.</summary>
        <value>Ta <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" /> Właściwość zwraca <see langword="true" /> wartość, jeśli do celów debugowania należy dodać numery wierszy. w przeciwnym razie <see langword="false" />Właściwość zwraca.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportNamespaces">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; ImportNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; ImportNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImportNamespaces As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ ImportNamespaces { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImportNamespaces : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera powiązane przestrzenie nazw dla bieżącego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value>Właściwość zwraca kolekcję ciągów, która zawiera listę powiązanych przestrzeni nazw <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> w wystąpieniu. <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia język programowania używany dla kodu śródwierszowego w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasie.</summary>
        <value>Właściwość zwraca język programowania, do którego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> jest obecnie ustawiony. <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As SrgsGrammarMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode Mode { System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Tryb <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />rozpoznawania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość zwraca element członkowski <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode> , który określa <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> typ danych wejściowych oczekiwanych przez. <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode%2A> Dwie możliwe wartości to `Voice` dane wejściowe mowy, a `Dtmf` w przypadku sygnałów o podwójnej częstotliwości próbkowania (DTMF), które są często skojarzone z telefonem.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia przestrzeń nazw <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Właściwość zwraca przestrzeń nazw dla bieżącego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />. <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticAlphabet">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberSignature Language="VB.NET" Value="Public Property PhoneticAlphabet As SrgsPhoneticAlphabet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet PhoneticAlphabet { System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet value); };" />
      <MemberSignature Language="F#" Value="member this.PhoneticAlphabet : System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia alfabet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> fonetyczny klasy.</summary>
        <value>Zwraca alfabet fonetyczny, który musi zostać użyty do określenia niestandardowych wymowy w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> obiekcie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alfabety fonetyczne składają się z telefonów, które składają się z liter, cyfr lub znaków, czasami w połączeniu. Każdy telefon opisuje unikatowy dźwięk mowy. Jest to w przeciwieństwie do alfabetu łacińskiego, dla którego każda litera może reprezentować wiele dźwięków wypowiadanych. Rozważ różne wymowy literę "c" w słowach "Candy" i "zaprzestanie" albo różne wymowy kombinacji liter "TH" w słowach "rzecz" i "te".  
  
 W System. Speech można użyć dowolnego z trzech alfabetów fonetycznych, aby określić niestandardowe wymowy: Międzynarodowy numer telefonu (IPA), uniwersalny zestaw telefonu (UPS) lub zestaw telefonu SAPI. Określony alfabet fonetyczny określa, który zestaw telefonu będzie używany do definiowania wbudowanych wymowy dla <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> obiektów. Telefony określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> parametrze muszą być zgodne z alfabetem <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>fonetycznym określonym w elemencie.  
  
 Aby uzyskać więcej informacji [, zobacz leksykony i alfabety fonetyczne](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRule Root { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRule Root" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public Property Root As SrgsRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRule ^ Root { System::Speech::Recognition::SrgsGrammar::SrgsRule ^ get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Speech.Recognition.SrgsGrammar.SrgsRule with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia główną regułę <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Zwraca regułę wydaną jako główną regułę <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt musi już znajdować się w <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> dokumencie, aby można było ustawić **regułę główną**. <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>  
  
 Można również ustawić regułę główną dla <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu za <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> pomocą obiektu <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> jako argumentu konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy regułę o nazwie `winnerRule`, a następnie <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> tworzy obiekt o nazwie `document`. Przykład następnie wywołuje metodę, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> aby dodać regułę do dokumentu. <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> Na koniec przykład ustawia właściwość dokumentu na `winnerRule`, co sprawia, że `root rule` dla gramatyki zdefiniowanej przez <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt.  
  
```csharp  
SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
winnerRule.Scope = SrgsRuleScope.Public;  
  
SrgsDocument document = new SrgsDocument();  
  
document.Rules.Add(winnerRule);  
document.Root = winnerRule;   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rules As SrgsRulesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ Rules { System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Rules : System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję reguł, które są obecnie zdefiniowane dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Zwraca reguły zdefiniowane dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można dodać <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiekty <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> do obiektu <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> za<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> pomocą metody właściwości. Jeśli zainicjujesz <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt i <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> określisz obiekt <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> jako argument, zostanie automatycznie dodany do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> elementu dla <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono tworzenie gramatyki, która rozpoznaje frazę "kraj, która wygrał świat filiżanki", po której następuje nazwa kraju/regionu, w którym znajduje się filiżanka. Przykład tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt, a następnie tworzy regułę publiczną o nazwie `winnerRule`. Po dodaniu ciągu do reguły `winnerRule`, przykład tworzy dwie więcej reguł (`ruleEurope` i `ruleSAmerica`), z których każda zawiera listę krajów/regionów. <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> `winnerRule` <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> `ruleSAmerica` `ruleEurope`Przy użyciu metody,przykładdodajewszystkietrzyreguły(,i)dowłaściwości.<xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A>  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Script : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia język skryptów .NET dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Właściwość zwraca bieżący język skryptów .NET <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> dla klasy. <see langword="Script" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta właściwość jest przestarzała. Jego użycie nie jest już zalecane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> właściwości na wartość null.</exception>
        <exception cref="T:System.ArgumentException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> pustego ciągu.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSrgs">
      <MemberSignature Language="C#" Value="public void WriteSrgs (System.Xml.XmlWriter srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSrgs(class System.Xml.XmlWriter srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSrgs (srgsGrammar As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSrgs(System::Xml::XmlWriter ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="member this.WriteSrgs : System.Xml.XmlWriter -&gt; unit" Usage="srgsDocument.WriteSrgs srgsGrammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar"><see cref="T:System.Xml.XmlWriter" /> Służy do<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> zapisywania wystąpienia.</param>
        <summary>Zapisuje zawartość <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu do pliku gramatyki w formacie XML, który jest zgodny ze specyfikacją gramatyki [rozpoznawania mowy (SRGS) w wersji 1,0](https://go.microsoft.com/fwlink/?LinkId=201761).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt, a następnie tworzy regułę publiczną o nazwie `winnerRule`. Następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> , która składa się z ciągu "kraj, który kupił światowy filiżankę:", i dodaje ten element <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> do właściwości reguły. Przykład tworzy dwie więcej reguł`ruleEurope` (i `ruleSAmerica`), z których <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> każdy jest obiektem, który zawiera trzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> obiekty. Następnie tworzony jest inny <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt, który zawiera <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> obiekty odwołujące się `ruleEurope` do `ruleSAmerica`i. Nowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt jest następnie dodawany <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> do właściwości `winnerRule`. Następnie wszystkie trzy reguły (`winnerRule`, `ruleEurope`i `ruleSAmerica` )zostaną<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> dodane do właściwości. <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Na koniec przykład tworzy pusty plik XML i wystąpienie <xref:System.Xml.XmlWriter>.  Metoda używa wystąpienia do<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> zapisania zawartości w pliku XML. <xref:System.Xml.XmlWriter> <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs%2A>  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  // Create a string object with the path to the file to use.  
  string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
  
  // Create an XmlWriter object and pass the file path.  
  XmlWriter writer = XmlWriter.Create(srgsDocumentFile);  
  
  // Write the contents of the XmlWriter object to an SRGS-compatible XML file.  
  document.WriteSrgs(writer);  
  writer.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlBase">
      <MemberSignature Language="C#" Value="public Uri XmlBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri XmlBase" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlBase As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ XmlBase { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlBase : Uri with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia podstawowy identyfikator URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Bieżący podstawowy identyfikator URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A>Właściwość pobiera wartość, która jest używana do rozpoznawania względnych identyfikatorów URI <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> w obiekcie. Załóżmy, że <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> wartość jest `http://www.contoso.com/` i <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> zawiera odwołanie do reguły względnej do innego dokumentu, na przykład `SrgsRuleRef("ExternalGrammar.grxml")`. Spowoduje to utworzenie następującej ścieżki bezwzględnej do dokumentu zewnętrznego `http://www.contoso.com/ExternalGrammar.grxml`:.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
