<Type Name="SrgsDocument" FullName="System.Speech.Recognition.SrgsGrammar.SrgsDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="987cbadb67fbf8075dd763670ba50c3d74c09006" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30580264" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsDocument" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiuje obiekt czasu projektowania, który jest używany do tworzenia gramatyki jednoznacznie środowiska uruchomieniowego, które są zgodne z [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://www.w3.org/TR/speech-grammar/).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz utworzyć pustą <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia i kompilacji gramatyki przez dodanie wystąpienia klas, które reprezentują SRGS elementów, takich jak <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>,<xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>, i <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Można również utworzyć <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia z istniejącego pliku gramatyki XML zgodnego ze SRGS, z wystąpienia <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, lub z wystąpienia <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Po <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt jest tworzony, mogą zostać załadowane do <xref:System.Speech.Recognition.Grammar> obiekt lub opracowane przez <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>, jej odczytanie przez włączenie <xref:System.Speech.Recognition.Grammar> obiektu.  
  
 Zobacz [utworzyć SrgsGrammar przy użyciu gramatyki](http://msdn.microsoft.com/library/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906) w [systemu mowy Programming Guide dla programu .NET Framework 4.0](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043) dodatkowe informacje i przykłady.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używanie konstruktorów dla <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> klasy, można utworzyć wystąpienia <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, lub <xref:System.Xml.XmlReader> obiekt z ciągu zawiera ścieżkę do gramatyki XML format lub mogą inicjować puste wystąpienie z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor tworzy pustą <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia. Do tworzenia gramatyki w pustą <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia, należy dodać wystąpienia klas, które reprezentują SRGS elementów, takich jak <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>, i <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt, a następnie tworzy regułę publicznej o nazwie `winnerRule`. Następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> składający się z ciągu "jest kraj, który ma won pojemnik world:" i dodaje ten element, aby <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> właściwości reguły. Następnie tworzony dwie reguły więcej (`ruleEurope` i `ruleSAmerica`), każdy jest <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt, który zawiera trzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> obiektów. Po wykonaniu tej innego <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt jest tworzony, który zawiera <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> obiekty, które odwołują się do `ruleEurope` i `ruleSAmerica`. Nowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> następnie dodać obiektu do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> właściwość `winnerRule`. Dzięki temu wszystkie trzy reguły (`winnerRule`, `ruleEurope`, i `ruleSAmerica`) są dodawane do <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> właściwość <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Na koniec trzy reguły są skompilowane w to binarna reprezentacja gramatyki.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the world cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  String fileName = Path.GetTempFileName();  
  using (FileStream stream = new FileStream(fileName, FileMode.Create))   
  {   
  
    // Compile the grammar to a binary format.  
    SrgsGrammarCompiler.Compile(document, stream);   
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">
          <see cref="T:System.Speech.Recognition.GrammarBuilder" /> Obiekt używany do tworzenia <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasę z <see cref="T:System.Speech.Recognition.GrammarBuilder" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy gramatyki <xref:System.Speech.Recognition.GrammarBuilder> wystąpienia przy użyciu <xref:System.Speech.Recognition.Choices> obiektów. Następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z <xref:System.Speech.Recognition.GrammarBuilder> obiektu.  
  
```csharp  
GrammarBuilder builder = null;  
  
// Create new Choices objects and add countries, and create GrammarBuilder objects.  
Choices choicesEurope = new Choices(new string[] { "England", "France", "Germany", "Italy" });  
GrammarBuilder europe = new GrammarBuilder(choicesEurope);  
  
Choices choicesSAmerica = new Choices(new string[] { "Argentina", "Brazil", "Uruguay" });  
GrammarBuilder sAmerica = new GrammarBuilder(choicesSAmerica);  
  
Choices worldCupWinnerChoices = new Choices(new GrammarBuilder[] {choicesEurope, choicesSAmerica});  
  
// Create new GrammarBuilder from a Choices object.  
builder = new GrammarBuilder(worldCupWinnerChoices);  
  
// Create an SrgsDocument object from a GrammarBuilder object.  
SrgsDocument document = new SrgsDocument(builder);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (grammarRootRule As SrgsRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ grammarRootRule);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="grammarRootRule" Type="System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Parameters>
      <Docs>
        <param name="grammarRootRule">
          <see langword="root rule" /> w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> , określa <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" /> była reguły głównego gramatyki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor dodaje określonej reguły <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> z <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu i ustawia go jako <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> reguła gramatyki.  
  
   
  
## Examples  
 Poniższy przykład tworzy dwie reguły (`chooseCities` i `destCities`) dotyczące wybierania miast źródło i miejsce docelowe w locie. W przykładzie są inicjowane <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> wystąpienia przy użyciu `chooseCities` reguły jako argument. Przykład zapisuje zawartość kolekcji reguł i nazwa główna reguła do konsoli.  
  
```csharp  
// Create a rule that contains a list of destination cities.  
SrgsRule destCities = new SrgsRule("Destination");  
SrgsOneOf toCities = new SrgsOneOf(new string[] { "New York", "Seattle", "Denver" });  
destCities.Add(toCities);  
  
// Create a list of origin cities and supporting phrases.  
SrgsOneOf fromCities = new SrgsOneOf(new SrgsItem[] {   
  new SrgsItem("Dallas"), new SrgsItem("Miami"), new SrgsItem("Chicago") });  
SrgsItem intro = new SrgsItem("I want to fly from");  
SrgsItem to = new SrgsItem("to");  
  
// Create the root rule of the grammar, and assemble the components.  
SrgsRule chooseCities = new SrgsRule("Trip");  
chooseCities.Add(intro);  
chooseCities.Add(fromCities);  
chooseCities.Add(to);  
chooseCities.Add(new SrgsRuleRef(destCities));  
  
// Create the SrgsDocument and specify the root rule to add.  
SrgsDocument bookFlight = new SrgsDocument(chooseCities);  
  
// Add the rule for the destination cities to the document's rule collection.  
bookFlight.Rules.Add(new SrgsRule[] { destCities });  
  
// Display the contents of the Rules collection and the name of the root rule.  
foreach (SrgsRule rule in bookFlight.Rules)  
{  
  Console.WriteLine("Rule " + rule.Id + " is in the rules collection");  
}  
Console.WriteLine("Root Rule " + bookFlight.Root.Id);  
  
// Create a Grammar object and load it to the recognizer.  
Grammar g = new Grammar(bookFlight);  
g.Name = ("City Chooser");  
recognizer.LoadGrammarAsync(g);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="grammarRootRule" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Lokalizacja pliku SRGS XML.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy określający lokalizację pliku XML dokumentu, który jest używany do wypełnienia <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy nową <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z pliku o nazwie "srgsDocumentFile.xml".  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
   document = new SrgsDocument(srgsDocumentFile);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> jest pustym ciągiem.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Xml.XmlReader srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsGrammar As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Xml::XmlReader ^ srgsGrammar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">
          <see cref="T:System.Xml.XmlReader" /> Obiektu, który został utworzony z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienie XML.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy z wystąpienia <see cref="T:System.Xml.XmlReader" /> który odwołuje się do pliku gramatyki XML format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy nowe wystąpienie klasy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> z wystąpienia <xref:System.Xml.XmlReader> który odwołuje się do pliku "srgsDocumentFile.xml".  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
{  
  XmlReader reader = XmlReader.Create(srgsDocumentFile);  
  document = new SrgsDocument(reader);  
  reader.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsGrammar" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyReferences">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; AssemblyReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; AssemblyReferences" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyReferences As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ AssemblyReferences { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera zestaw informacje o <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value>
          <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" /> Właściwość zwraca kolekcję ciąg zawierający listę odwołań do zestawów.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBehind">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; CodeBehind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; CodeBehind" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeBehind As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ CodeBehind { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje związane z kodem o <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value>
          <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" /> Właściwość zwraca kolekcję ciąg zawierający listę dokumentów związane z kodem.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje o ustawieniach kulturowych dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value>A <see cref="T:System.Globalization.CultureInfo" /> obiekt zawierający informacje o bieżącej kultury dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft Windows i interfejsu API System.Speech zaakceptować wszystkie prawidłowe kody języka kraju. Aby przeprowadzić rozpoznawanie mowy przy użyciu języka określonego w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture%2A> właściwości, który obsługuje kod kraju język musi być zainstalowany aparatu rozpoznawania mowy. Aparatów rozpoznawania mowy dostarczonych z programem Microsoft Windows 7 skontaktować się z następujących kodów kraju języka.  
  
-   en-GB. Angielski (brytyjski)  
  
-   en-US. Angielski (Stany Zjednoczone)  
  
-   de-DE. Niemiecki (Niemcy)  
  
-   es-ES. Hiszpański (Hiszpania)  
  
-   fr-FR. Francuski (Francja)  
  
-   ja-JP. Japoński (Japonia)  
  
-   zh-CN. Chiński (Chiny)  
  
-   zh-TW. Chiński (Tajwan)  
  
 Język dwuliterowych kodów przykład "en", "fr" lub "es" również są dozwolone.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość jest przypisywany do <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Wartość jest przypisywany do <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> jest <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="public bool Debug { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Debug" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberSignature Language="VB.NET" Value="Public Property Debug As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Debug { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia, czy numery wierszy powinny zostać dodane do wbudowanych skryptach.</summary>
        <value>
          <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" /> Zwraca <see langword="true" /> Jeśli numery wierszy powinny zostać dodane do debugowania; w przeciwnym razie wartość właściwości zwraca <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportNamespaces">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; ImportNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; ImportNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImportNamespaces As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ ImportNamespaces { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera powiązane przestrzeni nazw dla bieżącej <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</summary>
        <value>
          <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" /> Właściwość zwraca kolekcję ciąg zawierający listę powiązanych przestrzeni nazw w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia język programowania używany do kodu wbudowanego w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>
          <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" /> Właściwość zwraca język programowania, do którego <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> nie jest aktualnie ustawione.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As SrgsGrammarMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode Mode { System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Tryb rozpoznawania <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode%2A> Właściwość zwraca element członkowski <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode> określający typ danych wejściowych, które <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> oczekuje. Dwa możliwe wartości to `Voice` reakcję mowy i `Dtmf` reakcję dźwięków sygnału podwójnego wielu częstotliwość (DTMF), które są zwykle skojarzone z telefonu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obszar nazw <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>
          <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" /> Właściwość zwraca obszar nazw dla bieżącej <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticAlphabet">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberSignature Language="VB.NET" Value="Public Property PhoneticAlphabet As SrgsPhoneticAlphabet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet PhoneticAlphabet { System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia alfabet fonetyczny z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Zwraca alfabet fonetyczny, który musi być używany do określenia wymowy niestandardowych w <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alfabetach fonetyczny składają się z telefonów, które składają się z liter, cyfr lub znaków czasami w połączeniu. Każdy telefon opisuje unikatowy dźwięk mowy. Dzięki temu nie trzeba alfabetu łacińskiego, dla którego dowolnej litery może reprezentować wiele dźwięków rozmowy. Należy wziąć pod uwagę różne wymowy litery "c" w wyrazy "candy" i "zaprzestanie" lub inną wymowy kombinacji litery "th" w wyrazy "ID" i "te".  
  
 W System.Speech, można użyć dowolnej z trzech alfabetach fonetyczny do określenia wymowy niestandardowe: alfabetu Phone międzynarodowych (IPA), uniwersalnych ustawić telefonu (UPS) lub SAPI phone zestawu. Określony alfabet fonetyczny Określa, który zestaw telefonu będą używane do definiowania wymowy wbudowanego <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> obiektów. Telefony określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> musi odpowiadać alfabet fonetyczny określone w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>.  
  
 Zobacz [leksykonów i małych liter fonetyczny](http://msdn.microsoft.com/library/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) Aby uzyskać więcej informacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRule Root { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRule Root" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public Property Root As SrgsRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRule ^ Root { System::Speech::Recognition::SrgsGrammar::SrgsRule ^ get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia główna reguła z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Zwraca regułę, która jest oznaczony jako główna reguła z <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> Obiekt już musi należeć do dokumentu <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> przed może mieć wartości **główna reguła**.  
  
 Można również ustawić główna reguła dla <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu za pomocą <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiektu jako argument <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład tworzy reguły o nazwie `winnerRule`, a następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu o nazwie `document`. Przykład wywołuje <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> metodę, aby dodać regułę do dokumentu. Ponadto w przykładzie dokumentu <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> właściwości `winnerRule`, a tym samym co `root rule` dla gramatyki zdefiniowane przez <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu.  
  
```csharp  
SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
winnerRule.Scope = SrgsRuleScope.Public;  
  
SrgsDocument document = new SrgsDocument();  
  
document.Rules.Add(winnerRule);  
document.Root = winnerRule;   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rules As SrgsRulesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ Rules { System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję reguł, które są obecnie zdefiniowane dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Zwraca reguły zdefiniowane dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz dodać <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiekty do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> za pomocą <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> metoda <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> właściwości. Jeśli musisz zainicjować <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu i określić <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiektu jako argument, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> jest automatycznie dodawany do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> dla <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki, która rozpoznaje frazę "kraj, który ma won pojemnik World" następuje nazwa kraju, która została wybrana pojemnik World. W przykładzie jest tworzony <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt, a następnie tworzy regułę publicznej o nazwie `winnerRule`. Po dodaniu ciąg do reguły `winnerRule`, przykładzie tworzy dwie reguły więcej (`ruleEurope` i `ruleSAmerica`), każda z nich zawiera listę krajów. Przy użyciu <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> metody, na przykład dodaje wszystkie trzy reguły (`winnerRule`, `ruleEurope`, i `ruleSAmerica`) do <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> właściwość <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the world cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia język skryptów .NET dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>
          <see langword="Script" /> Właściwość zwraca bieżący język skryptów .NET dla <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta właściwość jest przestarzała. Nie zaleca się jego użycie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> właściwości na wartość null.</exception>
        <exception cref="T:System.ArgumentException">Podjęto próbę ustawienia <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> właściwości na pusty ciąg.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSrgs">
      <MemberSignature Language="C#" Value="public void WriteSrgs (System.Xml.XmlWriter srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSrgs(class System.Xml.XmlWriter srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSrgs (srgsGrammar As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSrgs(System::Xml::XmlWriter ^ srgsGrammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">
          <see cref="T:System.Xml.XmlWriter" /> Używany do zapisywania <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> wystąpienia.</param>
        <summary>Zapisuje zawartość <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> obiekt do pliku gramatyki formatu XML, który odpowiada [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0](http://go.microsoft.com/fwlink/?LinkId=201761).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiekt, a następnie tworzy regułę publicznej o nazwie `winnerRule`. Następnie tworzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> składający się z ciągu "jest kraj, który ma won pojemnik world:" i dodaje ten element, aby <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> właściwości reguły. Następnie tworzony dwie reguły więcej (`ruleEurope` i `ruleSAmerica`), każdy jest <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt, który zawiera trzy <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> obiektów. Po wykonaniu tej innego <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> obiekt jest tworzony, który zawiera <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> obiekty, które odwołują się do `ruleEurope` i `ruleSAmerica`. Nowy <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> następnie dodać obiektu do <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> właściwość `winnerRule`. Dzięki temu wszystkie trzy reguły (`winnerRule`, `ruleEurope`, i `ruleSAmerica`) są dodawane do <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> właściwość <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Ponadto w przykładzie jest tworzony pusty plik XML i wystąpienie <xref:System.Xml.XmlWriter>.  <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs%2A> Używa metody <xref:System.Xml.XmlWriter> wystąpienia można zapisać zawartości <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> do pliku XML.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the world cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  // Create a string object with the path to the file to use.  
  string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
  
  // Create an XmlWriter object and pass the file path.  
  XmlWriter writer = XmlWriter.Create(srgsDocumentFile);  
  
  // Write the contents of the XmlWriter object to an SRGS-compatible XML file.  
  document.WriteSrgs(writer);  
  writer.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsGrammar" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlBase">
      <MemberSignature Language="C#" Value="public Uri XmlBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri XmlBase" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlBase As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ XmlBase { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia podstawowy identyfikator URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> klasy.</summary>
        <value>Bieżący podstawowy identyfikator URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> Właściwość pobiera wartość, która jest używana do rozpoznawania względne identyfikatory URI w <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> obiektu. Załóżmy, że wartość <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> jest "http://www.contoso.com/" i <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> zawiera względne reguła odwołanie do innego dokumentu, na przykład `SrgsRuleRef("ExternalGrammar.grxml")`. Spowoduje to utworzenie następującej ścieżki bezwzględnej do zewnętrznego dokumentu: `http://www.contoso.com/ExternalGrammar.grxml`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>