<Type Name="SrgsNameValueTag" FullName="System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4850267236e12f7d5de3294f2919c98879c1f68e" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39988559" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsNameValueTag : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsNameValueTag extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsNameValueTag&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsNameValueTag : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <TypeSignature Language="F#" Value="type SrgsNameValueTag = class&#xA;    inherit SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje element kojarzenia semantycznego wartość z frazę w gramatyce.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten obiekt jest podobne do `tag` elementu zdefiniowanego w sieci World Wide Web Consortium (W3C) [mowy rozpoznawania gramatyki specyfikacji (SRGS) w wersji 1.0.](http://go.microsoft.com/fwlink/?LinkId=201761). Jednak <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value%2A> właściwości tego obiektu nie może być skrypt. Zawartość <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value%2A> może być typu <xref:System.Boolean>, <xref:System.Double>, <xref:System.Int32>, lub <xref:System.String>. Wartości parametrów muszą być ujęte w cudzysłów.  
  
 Aby dodać semantyki jako skrypt, należy użyć <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>.  
  
   
  
## Examples  
 Poniższy przykład tworzy gramatyki dotyczące wybierania miast w locie. W przykładzie użyto <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.%23ctor%2A> pozwalającą przypisać do każdego miasta, czyli kod lotniska to miasto semantycznego wartość.  
  
 Przykład tworzy dwie <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> wystąpienia, z których każdy określa klucz semantycznego. Obie reguły, odwołania do docelowych takie same <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiektu o nazwie `cities`, lecz tag wynik rozpoznawania odwołania reguły przy użyciu innego klucza semantycznego. Semantyczne klucz identyfikuje mieście rozpoznany jako Miasto wyjścia lub Miasto przybyciu locie. Obsługa <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzeń używa kluczy do pobierania wartości semantyki utworzone za pomocą <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.%23ctor%2A> z wyniku rozpoznawania.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a SpeechRecognitionEngine object.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build a rule with a list of cities, assign a semantic value to each city.  
        SrgsItem chi = new SrgsItem("Chicago");  
        chi.Add(new SrgsNameValueTag("ORD"));  
        SrgsItem bos = new SrgsItem("Boston");  
        bos.Add(new SrgsNameValueTag("BOS"));  
        SrgsItem mia = new SrgsItem("Miami");  
        mia.Add(new SrgsNameValueTag("MIA"));  
        SrgsItem dal = new SrgsItem("Dallas");  
        dal.Add(new SrgsNameValueTag("DFW"));  
  
        SrgsOneOf cities = new SrgsOneOf(new SrgsItem[] { chi, bos, mia, dal });  
        SrgsRule citiesRule = new SrgsRule("flightCities");  
        citiesRule.Add(cities);  
  
        // Build the root rule, add rule references to the cities rule.  
        SrgsRule flightBooker = new SrgsRule("bookFlight");  
        flightBooker.Add(new SrgsItem("I want to fly from"));  
        flightBooker.Add(new SrgsRuleRef(citiesRule, "departureCity"));  
        flightBooker.Add(new SrgsItem("to"));  
        flightBooker.Add(new SrgsRuleRef(citiesRule, "arrivalCity"));  
  
        // Build an SrgsDocument object from the flightBooker rule and add the cities rule.  
        SrgsDocument cityChooser = new SrgsDocument(flightBooker);  
        cityChooser.Rules.Add(citiesRule);  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar departArrive = new Grammar(cityChooser);  
        departArrive.Name = ("Cities Grammar");  
        recognizer.LoadGrammarAsync(departArrive);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The departure city is: " + e.Result.Semantics["departureCity"].Value);  
      Console.WriteLine("  The destination city is: " + e.Result.Semantics["arrivalCity"].Value);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsNameValueTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsNameValueTag();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsNameValueTag (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsNameValueTag(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag : obj -&gt; System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Wartość używana do ustawiania <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" /> właściwości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> klasy, określając wartość dla tego wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład tworzy gramatyki dotyczące wybierania miast w locie. W przykładzie użyto <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.%23ctor%2A> pozwalającą przypisać do każdego miasta, czyli kod lotniska to miasto semantycznego wartość.  
  
 Przykład tworzy dwie <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> wystąpienia, z których każdy określa klucz semantycznego. Obie reguły, odwołania do docelowych takie same <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> obiektu o nazwie `cities`, lecz tag wynik rozpoznawania odwołania reguły przy użyciu innego klucza semantycznego. Semantyczne klucz identyfikuje mieście rozpoznany jako Miasto wyjścia lub Miasto przybyciu locie. Obsługa <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> zdarzeń używa kluczy do pobierania wartości semantyki utworzone za pomocą <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.%23ctor%2A> z wyniku rozpoznawania.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a SpeechRecognitionEngine object.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build a rule with a list of cities, assign a semantic value to each city.  
        SrgsItem chi = new SrgsItem("Chicago");  
        chi.Add(new SrgsNameValueTag("ORD"));  
        SrgsItem bos = new SrgsItem("Boston");  
        bos.Add(new SrgsNameValueTag("BOS"));  
        SrgsItem mia = new SrgsItem("Miami");  
        mia.Add(new SrgsNameValueTag("MIA"));  
        SrgsItem dal = new SrgsItem("Dallas");  
        dal.Add(new SrgsNameValueTag("DFW"));  
  
        SrgsOneOf cities = new SrgsOneOf(new SrgsItem[] { chi, bos, mia, dal });  
        SrgsRule citiesRule = new SrgsRule("flightCities");  
        citiesRule.Add(cities);  
  
        // Build the root rule, add rule references to the cities rule.  
        SrgsRule flightBooker = new SrgsRule("bookFlight");  
        flightBooker.Add(new SrgsItem("I want to fly from"));  
        flightBooker.Add(new SrgsRuleRef(citiesRule, "departureCity"));  
        flightBooker.Add(new SrgsItem("to"));  
        flightBooker.Add(new SrgsRuleRef(citiesRule, "arrivalCity"));  
  
        // Build an SrgsDocument object from the flightBooker rule and add the cities rule.  
        SrgsDocument cityChooser = new SrgsDocument(flightBooker);  
        cityChooser.Rules.Add(citiesRule);  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar departArrive = new Grammar(cityChooser);  
        departArrive.Name = ("Cities Grammar");  
        recognizer.LoadGrammarAsync(departArrive);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The departure city is: " + e.Result.Semantics["departureCity"].Value);  
      Console.WriteLine("  The destination city is: " + e.Result.Semantics["arrivalCity"].Value);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsNameValueTag (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsNameValueTag(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag : string * obj -&gt; System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag (name, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Ciąg używany do ustawiania <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" /> właściwość <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> obiektu.</param>
        <param name="value">Obiekt używany do ustawiania <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" /> właściwość <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> klasy, określając nazwę i wartość dla tego wystąpienia.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> jest <see langword="null" />.  
  
 <paramref name="name" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> jest ciągiem pustym.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> wystąpienia.</summary>
        <value>Ciąg zawierający nazwę <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> wystąpienia.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Aby ustawić zostanie podjęta próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" /> do <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Aby ustawić zostanie podjęta próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" /> na pusty ciąg.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość znajdująca się na <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> wystąpienia.</summary>
        <value>Wartość znajdująca się na <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" /> wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prawidłowe typy <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value%2A> właściwości są:  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Double>  
  
-   <xref:System.Int32>  
  
-   <xref:System.String>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Aby ustawić zostanie podjęta próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" /> do <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Aby ustawić zostanie podjęta próba <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" /> do nieprawidłowego typu.</exception>
      </Docs>
    </Member>
  </Members>
</Type>