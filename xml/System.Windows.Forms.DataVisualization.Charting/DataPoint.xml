<Type Name="DataPoint" FullName="System.Windows.Forms.DataVisualization.Charting.DataPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b3277e2edd8bc2c8be81ca02383504e6e10e86da" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69205847" /></Metadata><TypeSignature Language="C#" Value="public class DataPoint : System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataPoint extends System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class DataPoint&#xA;Inherits DataPointCustomProperties" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataPoint : System::Windows::Forms::DataVisualization::Charting::DataPointCustomProperties" />
  <TypeSignature Language="F#" Value="type DataPoint = class&#xA;    inherit DataPointCustomProperties" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("YValues")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Forms.Design.DataVisualization.Charting.DataPointConverter, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje punkt danych, który jest przechowywany w <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCollection" /> klasie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> Klasa przechowuje właściwości skojarzone z danymi oraz wartości punktów danych. Na przykład punkt danych ma wartość, ale ma również Właściwość Color, właściwość obrazu tła, właściwość gradientu tła i tak dalej. Aby uzyskać więcej informacji o właściwościach punktu danych, <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties> Zobacz temat Omówienie klas.  
  
 Każdy punkt danych składa się z wartości X i jednej lub więcej wartości Y. Wartość X może być równa zero lub można ją ustawić jawnie.  
  
 Tylko jedna wartość Y na punkt jest wymagana dla wszystkich typów wykresów oprócz wykresów bąbelkowych, świecowych i giełdowych. Te typy wykresów wymagają więcej niż jednej wartości Y, ponieważ jeden punkt danych składa się z wielu wartości. Na przykład w celu wykreślenia jednej kolumny wykresu giełdowego wymagane są cztery wartości: wysoka, niska, otwarta i ZAMKNIĘTA.  
  
 Dane można dodawać zarówno w czasie projektowania, jak i w czasie wykonywania. można również użyć powiązań danych w czasie wykonywania.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor może służyć do tworzenia i inicjowania nowego wystąpienia <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> klasy.  
  
 Jednak zdecydowanie zaleca się dodanie punktów danych w czasie wykonywania przy użyciu <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> właściwości kolekcja.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint (System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint(System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DataVisualization.Charting.DataPoint : System.Windows.Forms.DataVisualization.Charting.Series -&gt; System.Windows.Forms.DataVisualization.Charting.DataPoint" Usage="new System.Windows.Forms.DataVisualization.Charting.DataPoint series" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="series"><see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> Obiekt, do którego należy punkt danych.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> klasy i <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> ustawia, do której należy punkt danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor może służyć do tworzenia i inicjowania nowego wystąpienia <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> klasy.  
  
 Jednak zdecydowanie zaleca się dodanie punktów danych w czasie wykonywania przy użyciu <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> właściwości kolekcja.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint (double xValue, double yValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 xValue, float64 yValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xValue As Double, yValue As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint(double xValue, double yValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DataVisualization.Charting.DataPoint : double * double -&gt; System.Windows.Forms.DataVisualization.Charting.DataPoint" Usage="new System.Windows.Forms.DataVisualization.Charting.DataPoint (xValue, yValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xValue" Type="System.Double" />
        <Parameter Name="yValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="xValue">Wartość X punktu danych.</param>
        <param name="yValue">Wartość Y punktu danych.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> klasy z określoną wartością X i Y.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor może służyć do tworzenia i inicjowania nowego wystąpienia <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> klasy.  
  
 Jednak zdecydowanie zaleca się dodanie punktów danych w czasie wykonywania przy użyciu <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> właściwości kolekcja.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint (double xValue, double[] yValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 xValue, float64[] yValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xValue As Double, yValues As Double())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint(double xValue, cli::array &lt;double&gt; ^ yValues);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DataVisualization.Charting.DataPoint : double * double[] -&gt; System.Windows.Forms.DataVisualization.Charting.DataPoint" Usage="new System.Windows.Forms.DataVisualization.Charting.DataPoint (xValue, yValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xValue" Type="System.Double" />
        <Parameter Name="yValues" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="xValue">Wartość X punktu danych.</param>
        <param name="yValues">Tablica wartości Y punktu danych.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> klasy z określoną wartością X i tablicą wartości Y.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor może służyć do tworzenia i inicjowania nowego wystąpienia <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> klasy.  
  
 Jednak zdecydowanie zaleca się dodanie punktów danych w czasie wykonywania przy użyciu <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> właściwości kolekcja.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint (double xValue, string yValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 xValue, string yValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xValue As Double, yValues As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint(double xValue, System::String ^ yValues);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DataVisualization.Charting.DataPoint : double * string -&gt; System.Windows.Forms.DataVisualization.Charting.DataPoint" Usage="new System.Windows.Forms.DataVisualization.Charting.DataPoint (xValue, yValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="xValue" Type="System.Double" />
        <Parameter Name="yValues" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xValue">Wartość X punktu danych.</param>
        <param name="yValues">Rozdzielana <see langword="string" /> przecinkami wartość Y punktu danych.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> klasy z określonymi wartościami X-Value i Y.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor może służyć do tworzenia i inicjowania nowego wystąpienia <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> klasy.  
  
 Jednak zdecydowanie zaleca się dodanie punktów danych w czasie wykonywania przy użyciu <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> właściwości kolekcja.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DataPoint Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.DataVisualization.Charting.DataPoint Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As DataPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DataVisualization::Charting::DataPoint ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Forms.DataVisualization.Charting.DataPoint" Usage="dataPoint.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DataPoint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca nowe wystąpienie, które jest dokładną kopią punktu danych.</summary>
        <returns>Sklonowany <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> obiekt, który jest dokładną kopią punktu danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone%2A> , aby uzyskać dokładną kopię punktu danych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueByName">
      <MemberSignature Language="C#" Value="public double GetValueByName (string valueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetValueByName(string valueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueByName (valueName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetValueByName(System::String ^ valueName);" />
      <MemberSignature Language="F#" Value="member this.GetValueByName : string -&gt; double" Usage="dataPoint.GetValueByName valueName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="valueName">Nazwy wartości punktów. X, Y, Y2...</param>
        <summary>Zwraca punkt danych, który jest określony przez jego nazwę. Jest to funkcja pomocnika.</summary>
        <returns><see langword="string" /> Wartość, która reprezentuje punkt danych.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia flagę wskazującą, czy punkt danych jest oznaczony jako pusty.</summary>
        <value><see langword="true" />Jeśli punkt jest oznaczony jako pusty punkt; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw tę właściwość, `true` aby oznaczyć punkt danych jako pusty punkt.  
  
 Alternatywnie można użyć jednej `InsertEmptyPoints` z metod w <xref:System.Windows.Forms.DataVisualization.Charting.DataManipulator> klasie, aby oznaczyć brakujące dane jako puste punkty.  
  
 Właściwość <xref:System.Windows.Forms.DataVisualization.Charting.Series.EmptyPointStyle%2A> określa, jak są wyświetlane puste punkty.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.DataPoint.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę punktu danych.</summary>
        <value><see langword="string" /> Wartość, która reprezentuje nazwę tekstu punktu danych.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueXY">
      <MemberSignature Language="C#" Value="public void SetValueXY (object xValue, params object[] yValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValueXY(object xValue, object[] yValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValueXY (xValue As Object, ParamArray yValue As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValueXY(System::Object ^ xValue, ... cli::array &lt;System::Object ^&gt; ^ yValue);" />
      <MemberSignature Language="F#" Value="member this.SetValueXY : obj * obj[] -&gt; unit" Usage="dataPoint.SetValueXY (xValue, yValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xValue" Type="System.Object" />
        <Parameter Name="yValue" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="xValue">Wartość X punktu danych.</param>
        <param name="yValue">Lista wartości Y punktu danych.</param>
        <summary>Ustawia wartość X i jedną lub więcej wartości Y punktu danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY%2A> Użyj metody, aby ustawić wartości punktów danych w czasie wykonywania.  
  
 Należy pamiętać, że w przypadku ustawienia wartości X dla wartości innej niż zero (0) zostanie wygenerowany wykres punktowy. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue%2A> uwagi właściwości.  
  
 Zapoznaj się z poniższą tabelą, aby uzyskać pełną listę prawidłowych typów .NET Framework, których można użyć jako parametru typu obiektu.  
  
||||  
|-|-|-|  
|String|DataGodzina|Double|  
|Wartość dziesiętna|Single|Int32|  
|UInt32|Int64|UInt64|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueY">
      <MemberSignature Language="C#" Value="public void SetValueY (params object[] yValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValueY(object[] yValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValueY (ParamArray yValue As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValueY(... cli::array &lt;System::Object ^&gt; ^ yValue);" />
      <MemberSignature Language="F#" Value="member this.SetValueY : obj[] -&gt; unit" Usage="dataPoint.SetValueY yValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="yValue" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="yValue">Wartości <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> Y obiektu znajdującego się w kolekcji. Sformatowane jako co najmniej jedna wartość oddzielona przecinkami.</param>
        <summary>Ustawia wartości Y jednego punktu danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY%2A> Właściwość służy do ustawiania wartości Y punktu danych w czasie wykonywania.  
  
 Tylko jedna wartość Y na punkt jest wymagana dla wszystkich typów wykresów, z wyjątkiem wykresów bąbelkowych, świecowych i giełdowych. Te typy wykresów wymagają więcej niż jednej wartości Y, ponieważ jeden punkt danych składa się z wielu wartości. Na przykład w celu wykreślenia jednej kolumny wykresu giełdowego wymagane są cztery wartości: wysoka, niska, otwarta i ZAMKNIĘTA.  
  
 Ta właściwość zwraca tablicę `double` wartości, gdy jest używana do pobierania wielu wartości Y.  
  
> [!IMPORTANT]
>  Właściwość określa maksymalną liczbę wartości Y, które <xref:System.Windows.Forms.DataVisualization.Charting.Series> mogą mieć wszystkie punkty danych w. <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> Jeśli określisz więcej niż dozwoloną liczbę wartości Y, zostanie zgłoszony wyjątek.  
>   
>  Zapoznaj się z poniższą tabelą, aby uzyskać pełną listę prawidłowych typów .NET Framework, których można użyć jako parametru typu obiektu:  
  
||||  
|-|-|-|  
|String|DataGodzina|Double|  
|Wartość dziesiętna|Single|Int32|  
|UInt32|Int64|UInt64|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XValue">
      <MemberSignature Language="C#" Value="public double XValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 XValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue" />
      <MemberSignature Language="VB.NET" Value="Public Property XValue As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double XValue { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.XValue : double with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Double), "0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DataPointValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość X punktu danych.</summary>
        <value><see langword="double" /> Reprezentujący wartość X punktu danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie typy wykresów mogą być wyświetlane jako wykresy punktowe lub jako wykresy niepunktowe, ponieważ można ustawić zarówno wartości X, jak i Y. Ustawienie wartości X spowoduje powstanie wykresu punktowego, podczas gdy nie zostanie ustawiona ta właściwość, która jest równoznaczna z ustawieniem dla niego wartości zero — spowoduje to wykreślenie poza punktami. Na przykład, aby narysować typ wykresu punktowego, Dodaj punkty danych, które mają wartości X równe zero. Aby wyświetlić tradycyjny wykres punktowy, Dodaj punkty danych, które mają wartości X inne niż zero.  
  
 Wartości X punktów danych nie muszą być ustawione. Jeśli nie są ustawione, punkty danych są kreślone sekwencyjnie, przy użyciu ich wartości indeksu z <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="YValues">
      <MemberSignature Language="C#" Value="public double[] YValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64[] YValues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues" />
      <MemberSignature Language="VB.NET" Value="Public Property YValues As Double()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;double&gt; ^ YValues { cli::array &lt;double&gt; ^ get(); void set(cli::array &lt;double&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.YValues : double[] with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Drawing.Design.UITypeEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DoubleArrayConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartości Y punktu danych.</summary>
        <value>Tablica <see langword="double" /> wartości, która reprezentuje wartości Y punktu danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues%2A> Właściwość służy do ustawiania wartości Y punktów danych.  
  
 Tylko jedna wartość Y na punkt jest wymagana dla wszystkich typów wykresów oprócz wykresów bąbelkowych, świecowych i giełdowych. Te typy wykresów wymagają więcej niż jednej wartości Y, ponieważ jeden punkt danych składa się z wielu wartości. Na przykład w celu wykreślenia jednej kolumny wykresu giełdowego wymagane są cztery wartości: wysoka, niska, otwarta i ZAMKNIĘTA.  
  
 Właściwość zwraca tablicę wartości, gdy jest używana do pobierania wartości Y. `double` <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues%2A>  
  
 > [!IMPORTANT] 
 > Właściwość określa maksymalną liczbę wartości Y, które <xref:System.Windows.Forms.DataVisualization.Charting.Series> mogą mieć wszystkie punkty danych w. <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> Jeśli określisz więcej niż dozwoloną liczbę wartości Y, zostanie zgłoszony wyjątek.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
