<Type Name="IDynamicPropertyTypeProvider" FullName="System.Workflow.ComponentModel.IDynamicPropertyTypeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e25ea78e604af7ce305a45e206010e9c7121f3cf" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37735827" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDynamicPropertyTypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDynamicPropertyTypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDynamicPropertyTypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDynamicPropertyTypeProvider" />
  <TypeSignature Language="F#" Value="type IDynamicPropertyTypeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera typ właściwości w infrastrukturze powiązania. Jest stosowana przez działania, które zawierają właściwość typu zmiennej, gdzie typ może się różnić w zależności od innych ustawień działania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Ten interfejs umożliwia działanie nadrzędne do kojarzenia dwie właściwości i wskazać infrastruktury powiązania typu, który ma być używane podczas weryfikowania powiązania. Na przykład, Niewykluczone, że działania o dwie właściwości `TypeProperty` i `ValueProperty`, gdzie `TypeProperty` określa prawidłowy typ wartości `ValueProperty`. W takim przypadku implementuje działania nadrzędnego <xref:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider> interfejsu.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetAccessType">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Compiler.AccessTypes GetAccessType (IServiceProvider serviceProvider, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Workflow.ComponentModel.Compiler.AccessTypes GetAccessType(class System.IServiceProvider serviceProvider, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(System.IServiceProvider,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessType (serviceProvider As IServiceProvider, propertyName As String) As AccessTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::ComponentModel::Compiler::AccessTypes GetAccessType(IServiceProvider ^ serviceProvider, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessType : IServiceProvider * string -&gt; System.Workflow.ComponentModel.Compiler.AccessTypes" Usage="iDynamicPropertyTypeProvider.GetAccessType (serviceProvider, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Compiler.AccessTypes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Obiekt, który implementuje <see cref="T:System.IServiceProvider" /> zapewniać dostęp do usługi czasu projektowania, jeśli są one potrzebne.</param>
        <param name="propertyName">Nazwa właściwości.</param>
        <summary>Zwraca typ dostępu dla określonej właściwości.</summary>
        <returns>
          <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> Wartości wyliczenia, która oznacza poziom dostępu właściwości.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używane w czasie kompilacji, aby sprawdzić, czy właściwości są prawidłowo powiązane ze sobą. Bez tego interfejsu informacja ta wynika bezpośrednio z metody pobierającej/metod ustawiających właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyType">
      <MemberSignature Language="C#" Value="public Type GetPropertyType (IServiceProvider serviceProvider, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetPropertyType(class System.IServiceProvider serviceProvider, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(System.IServiceProvider,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyType (serviceProvider As IServiceProvider, propertyName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetPropertyType(IServiceProvider ^ serviceProvider, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyType : IServiceProvider * string -&gt; Type" Usage="iDynamicPropertyTypeProvider.GetPropertyType (serviceProvider, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Obiekt, który implementuje <see cref="T:System.IServiceProvider" /> zapewniać dostęp do usługi w czasie projektowania, jeśli są one potrzebne.</param>
        <param name="propertyName">Nazwa właściwości.</param>
        <summary>Zwraca <see cref="T:System.Type" /> określonej właściwości.</summary>
        <returns>
          <see cref="T:System.Type" /> Dla właściwości, których nazwa jest przekazywany jako <paramref name="propertyName" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używane w czasie kompilacji, aby sprawdzić, czy właściwości są prawidłowo powiązane ze sobą.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>