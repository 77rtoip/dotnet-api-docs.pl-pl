<Type Name="WorkflowInstance" FullName="System.Workflow.Runtime.WorkflowInstance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="637fd297a240ef6844493929bfdec6a41e588c83" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69416891" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowInstance" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInstance sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wystąpienie przepływu pracy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.WorkflowInstance> Klasa uwidacznia metody i właściwości, których można użyć do kontrolowania wykonywania wystąpienia przepływu pracy. zasadniczo jest to serwer proxy do rzeczywistego wystąpienia przepływu pracy używanego przez aparat środowiska uruchomieniowego przepływu pracy. Host lub usługa może nakazać aparatowi uruchomieniowemu przepływu pracy wykonywanie akcji w wystąpieniu przepływu pracy przez wywołanie odpowiednich metod, które są zawarte w <xref:System.Workflow.Runtime.WorkflowInstance> klasie.  Jeśli żądana akcja jest nieprawidłowa, na przykład jeśli Host wywołuje <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> wystąpienie przepływu pracy, który już się zakończył, aparat środowiska uruchomieniowego przepływu pracy zgłosi odpowiedni wyjątek.  
  
> [!NOTE]
>  Jeśli wystąpienie przepływu pracy przestaje odpowiadać, ponieważ wywołanie aplikacji hosta nie zwraca, jedynym sposobem na odzyskanie wystąpienia jest ponowne uruchomienie środowiska uruchomieniowego. Jeśli jednak wystąpienie zostało wymuszenie zwolnione, przerwane lub zawieszone, może być kontynuowane przez wywołanie <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak można utworzyć i uruchomić na <xref:System.Workflow.Runtime.WorkflowInstance> hoście przepływu pracy. Kod tworzy wystąpienie <xref:System.Workflow.Runtime.WorkflowRuntime>, dodaje usługi do środowiska uruchomieniowego, a następnie pokazuje zalecany sposób <xref:System.Workflow.Runtime.WorkflowInstance> tworzenia obiektu. Kod jest inicjowany <xref:System.Workflow.Runtime.WorkflowInstance> przez <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> wywołanie metody i przekazanie wcześniej utworzonego typu do niego. Rozpoczyna się od wywołania metody. <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> <xref:System.Workflow.Runtime.WorkflowInstance>  
  
 Ten przykład kodu jest częścią anulowania zestawu SDK przepływu pracy z pliku Program.cs. Aby uzyskać więcej informacji, zobacz [Anulowanie przepływu pracy](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">Anulowanie przepływu pracy</related>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="workflowInstance.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przerywa wystąpienie przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy zostało przerwane w sposób synchroniczny; oznacza to, że metoda zwraca po przerwaniu wystąpienia przepływu pracy. Aparat środowiska uruchomieniowego przepływu pracy unieważnia wystąpienie przepływu pracy w pamięci i wyczyści <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. Jeśli usługa trwałości była używana przez wystąpienie przepływu pracy, wszystkie działania wykonane od ostatniego punktu trwałości są zgłaszane. Po przerwaniu wystąpienia przepływu pracy aparat środowiska uruchomieniowego przepływu pracy wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> zdarzenie. Można wywołać <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> , aby ponownie załadować wystąpienie przepływu pracy i zacząć od ostatniego punktu trwałości.  
  
 `Abort`różni się od <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> w programie `Abort` , który po prostu czyści wystąpienie przepływu pracy w pamięci i można je ponownie uruchomić od ostatniego punktu trwałości, zakończyć czyści wystąpienie przepływu pracy w pamięci i informuje usługę trwałości, że wystąpienie zostało wyczyszczone z pamięci. Oznacza to <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, że wszystkie informacje o stanie dla tego wystąpienia przepływu pracy są usuwane z bazy danych po zakończeniu. Nie będzie można ponownie załadować wystąpienia przepływu pracy z wcześniej przechowywanego punktu trwałości.  
  
   
  
## Examples  
 Poniższy przykład ilustruje wywoływanie przerwania dla wystąpienia przepływu pracy typu Workflow1.  
  
 [!code-csharp[WF_Samples#13](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#13)]
 [!code-vb[WF_Samples#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyWorkflowChanges">
      <MemberSignature Language="C#" Value="public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyWorkflowChanges(class System.Workflow.ComponentModel.WorkflowChanges workflowChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyWorkflowChanges(System::Workflow::ComponentModel::WorkflowChanges ^ workflowChanges);" />
      <MemberSignature Language="F#" Value="member this.ApplyWorkflowChanges : System.Workflow.ComponentModel.WorkflowChanges -&gt; unit" Usage="workflowInstance.ApplyWorkflowChanges workflowChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowChanges" Type="System.Workflow.ComponentModel.WorkflowChanges" />
      </Parameters>
      <Docs>
        <param name="workflowChanges"><see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> Określanie aktualizacji dynamicznych dla wystąpienia przepływu pracy.</param>
        <summary>Stosuje zmiany w wystąpieniu przepływu pracy określonym przez <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> obiekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wystąpienie przepływu pracy nie jest już wstrzymane, aparat środowiska uruchomieniowego przepływu pracy tymczasowo zawiesza wystąpienie przed zastosowaniem zmian.  
  
   
  
## Examples  
 Poniższy przykład ilustruje wywoływanie ApplyWorkflowChanges do <xref:System.Workflow.Runtime.WorkflowInstance> obiektu.  Ten przykład pochodzi z przykładu zestawu SDK automatu Stanów z pliku Mainform.cs.  Aby uzyskać więcej informacji, zobacz [przykład porządkowania stan komputera](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).  
  
 [!code-csharp[WF_Samples#89](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#89)]
 [!code-vb[WF_Samples#89](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.</exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItem">
      <MemberSignature Language="C#" Value="public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItem(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItem (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItem(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberSignature Language="F#" Value="member this.EnqueueItem : IComparable * obj * System.Workflow.Runtime.IPendingWork * obj -&gt; unit" Usage="workflowInstance.EnqueueItem (queueName, item, pendingWork, workItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName">Nazwa <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
        <param name="item">Obiekt do przedodawania do kolejki.</param>
        <param name="pendingWork">Pozwala nadawcy otrzymywać powiadomienia <paramref name="item" /> o dostarczeniu. <see cref="T:System.Workflow.Runtime.IPendingWork" /></param>
        <param name="workItem">Obiekt, który ma zostać przesłany <see cref="T:System.Workflow.Runtime.IPendingWork" /> do metod.</param>
        <summary>Przesyła komunikat synchronicznie do określonej kolejki przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wysyła do określonego <xref:System.Workflow.Runtime.WorkflowQueue>. `item` Jeśli chcesz otrzymywać powiadomienia <xref:System.Workflow.Runtime.IPendingWork> o dostarczeniu wiadomości, możesz zaimplementować ją w usłudze i `workItem` przekazać <xref:System.Workflow.Runtime.IPendingWork> obiekt do <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. Jeśli nie chcesz tego powiadomienia, możesz przekazać odwołanie o wartości null (`Nothing` w Visual Basic) dla `pendingWork` i `workItem`.  
  
 W przypadku korzystania z tej metody z przepływem pracy automatu Stanów może zostać wyświetlony wyjątek z komunikatem{0}"Kolejka" nie jest włączona. " Dzieje się tak, gdy bieżący stan komputera stanu nie wie, jak obsłużyć konkretne zdarzenie. Na przykład, gdy jakiś stan inny niż bieżący stan zawiera <xref:System.Workflow.Activities.EventDrivenActivity> , który <xref:System.Workflow.Activities.HandleExternalEventActivity> zawiera element, który jest reprezentowany przez kolejkę "{0}".  
  
> [!NOTE]
>  Nie ma gwarancji, że komunikaty są odbierane przez wystąpienie przepływu pracy w kolejności, w jakiej zostały wysłane. Na przykład jeśli odebranie komunikatu w istniejącej kolejce (queue A) powoduje, że przepływ pracy może utworzyć kolejną kolejkę (queue B), która następnie nasłuchuje innej wiadomości wysyłanej po pierwszej wiadomości, jest możliwe, że drugi komunikat zostanie odtworzony i nie zostanie odebrany nie utworzono jeszcze żadnej kolejki. Aby uniknąć tego problemu, drugi komunikat nie powinien być wysyłany do momentu zweryfikowania obecności drugiej kolejki (przy użyciu <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. Gdy wystąpi `OnWorkflowIdled` zdarzenie, metoda zdefiniowana w tym przykładzie jest wywoływana. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> Określa, który przepływ pracy jest bezczynny <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> przy użyciu właściwości, a następnie pobiera kolekcję elementów umieszczonych w kolejce dla wystąpienia przepływu <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> pracy, wywołując metodę. Kod wykonuje iterację w kolekcji, aby określić, które działanie oczekuje na zdarzenie, które przekroczy przepływ pracy. Następnie wysyła wyjątek do kolejki przepływu pracy przy użyciu <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> metody wraz z nazwą elementu kolejki zdarzeń.  
  
 Ten przykład kodu jest częścią anulowania zestawu SDK przepływu pracy z pliku Program.cs. Aby uzyskać więcej informacji, zobacz [Anulowanie przepływu pracy](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="queueName" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.  
  
—lub— 
<see cref="T:System.Workflow.Runtime.WorkflowQueue" /> Określone przez<paramref name="queueName" /> nie istnieje.  
  
—lub— 
<see cref="T:System.Workflow.Runtime.WorkflowQueue" /> Określony przez<paramref name="queueName" /> nie jest włączony.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">Anulowanie przepływu pracy</related>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItemOnIdle">
      <MemberSignature Language="C#" Value="public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItemOnIdle(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItemOnIdle (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItemOnIdle(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberSignature Language="F#" Value="member this.EnqueueItemOnIdle : IComparable * obj * System.Workflow.Runtime.IPendingWork * obj -&gt; unit" Usage="workflowInstance.EnqueueItemOnIdle (queueName, item, pendingWork, workItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName">Nazwa <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
        <param name="item">Obiekt do przedodawania do kolejki.</param>
        <param name="pendingWork">Pozwala nadawcy otrzymywać powiadomienia <paramref name="item" /> o dostarczeniu. <see cref="T:System.Workflow.Runtime.IPendingWork" /></param>
        <param name="workItem">Obiekt, który ma zostać przesłany <see cref="T:System.Workflow.Runtime.IPendingWork" /> do metod.</param>
        <summary>Wysyła komunikat do określonej kolejki przepływu pracy, gdy przepływ pracy jest bezczynny. <see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />czeka, aż przepływ pracy osiągnie punkt bezczynności i enqueues po sprawdzeniu, że harmonogram przepływu pracy jest bezczynny (to nie jest wykonywana żadna aktywna operacja).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czeka, aż wystąpienie przepływu pracy stanie się bezczynne, `item` a następnie wyśle do określonego. <xref:System.Workflow.Runtime.WorkflowQueue> W przypadku <xref:System.InvalidOperationException>gdy wystąpienie przepływu pracy zostanie zawieszone, aparat środowiska uruchomieniowego przepływu pracy zgłosi. <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> Jeśli chcesz otrzymywać powiadomienia <xref:System.Workflow.Runtime.IPendingWork> o dostarczeniu wiadomości, możesz zaimplementować ją w usłudze i `workItem` przekazać <xref:System.Workflow.Runtime.IPendingWork> obiekt do <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. Jeśli nie chcesz tego powiadomienia, możesz przekazać odwołanie o wartości null (`Nothing` w Visual Basic) dla `pendingWork` i `workItem`.  
  
 W przypadku korzystania z tej metody z przepływem pracy automatu Stanów może zostać wyświetlony wyjątek zawierający komunikat "Kolejka"{0}nie jest włączona. " Dzieje się tak, gdy bieżący stan komputera stanu nie wie, jak obsłużyć konkretne zdarzenie. Na przykład, gdy jakiś stan inny niż bieżący stan zawiera <xref:System.Workflow.Activities.EventDrivenActivity> , który <xref:System.Workflow.Activities.HandleExternalEventActivity> zawiera element, który jest reprezentowany przez kolejkę "{0}".  
  
   
  
## Examples  
 Poniższy przykład ilustruje wysyłanie informacji do wystąpienia przepływu pracy przy użyciu `EnqueueItemOnIdle` metody. Najpierw obiekt WorkflowInstance jest tworzony i uruchamiany; następnie tworzony jest obiekt, który implementuje <xref:System.Workflow.Runtime.IPendingWork> interfejs. `EnqueueItemOnIdle`jest następnie wywoływana, przekazanie wartości ciągu dla nazwy kolejki, elementu w kolejce i elementu pracy do przekazania do metod obiektu pendingWork.  
  
 [!code-csharp[WF_Samples#12](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#12)]
 [!code-vb[WF_Samples#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="queueName" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.  
  
—lub— 
Wystąpienie przepływu pracy jest zawieszone.  
  
—lub— 
<see cref="T:System.Workflow.Runtime.WorkflowQueue" /> Określone przez<paramref name="queueName" /> nie istnieje.  
  
—lub— 
<see cref="T:System.Workflow.Runtime.WorkflowQueue" /> Określony przez<paramref name="queueName" /> nie jest włączony.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="workflowInstance.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania.</param>
        <summary>Zwraca wartość wskazującą, czy określony obiekt jest równy <see cref="T:System.Workflow.Runtime.WorkflowInstance" />elementowi.</summary>
        <returns><see langword="true" />Jeśli określony obiekt jest równy <see cref="T:System.Workflow.Runtime.WorkflowInstance" />. w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt musi być wystąpieniem <xref:System.Workflow.Runtime.WorkflowInstance> klasy i mieć takie same <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> <xref:System.Workflow.Runtime.WorkflowInstance>wartości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="workflowInstance.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia przepływu pracy.</summary>
        <returns>Kod skrótu dla tego <see cref="T:System.Workflow.Runtime.WorkflowInstance" />elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A>zwraca kod skrótu na podstawie wartości <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowDefinition">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.ComponentModel.Activity GetWorkflowDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowDefinition () As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::ComponentModel::Activity ^ GetWorkflowDefinition();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowDefinition : unit -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowInstance.GetWorkflowDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera działanie główne dla tego wystąpienia przepływu pracy.</summary>
        <returns><see cref="T:System.Workflow.ComponentModel.Activity" /> Obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć działania głównego, aby nawigować po hierarchii działań przepływu pracy.  
  
 Ta metoda nie jest bezpieczna wątkowo, dlatego host powinien synchronizować jego wywołania z tą metodą.  
  
   
  
## Examples  
 Poniższy przykład ilustruje pobieranie definicji przepływu pracy z wystąpienia przepływu pracy.  Ten przykład pochodzi z przykładu zestawu SDK automatu Stanów z pliku Mainform.cs.  Aby uzyskać więcej informacji, zobacz [przykład porządkowania stan komputera](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).  
  
 [!code-csharp[WF_Samples#86](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#86)]
 [!code-vb[WF_Samples#86](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#86)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowNextTimerExpiration">
      <MemberSignature Language="C#" Value="public DateTime GetWorkflowNextTimerExpiration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetWorkflowNextTimerExpiration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowNextTimerExpiration () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetWorkflowNextTimerExpiration();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowNextTimerExpiration : unit -&gt; DateTime" Usage="workflowInstance.GetWorkflowNextTimerExpiration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca następny punkt w czasie, w którym <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> zaplanowano dostarczenie komunikatu czasomierza.</summary>
        <returns>Wartość daty i godziny, która reprezentuje <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> następnym <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> razem, zostanie dostarczona komunikat czasomierza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład ilustruje użycie metody, <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> aby określić, czy więcej komunikatów czasomierza przepływu pracy jest dodawanych do kolejki. Ten przykład pochodzi z przykładu zestawu SDK WorkflowThreading z pliku Program.cs. Aby uzyskać więcej informacji, zobacz [przykładowe wątki przepływu pracy](https://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).  
  
 [!code-csharp[WF_Samples#284](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#284)]
 [!code-vb[WF_Samples#284](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#284)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Workflow.Runtime.TimerEventSubscription" />
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowQueueData">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowQueueData () As ReadOnlyCollection(Of WorkflowQueueInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowQueueInfo ^&gt; ^ GetWorkflowQueueData();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowQueueData : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;" Usage="workflowInstance.GetWorkflowQueueData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> obiektów, które zawierają elementy oczekujące i działania subskrybowane dla kolejek przepływu pracy skojarzonych z tym wystąpieniem przepływu pracy.</summary>
        <returns><see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> Obiektu .<see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>Zwraca kolekcję <xref:System.Workflow.Runtime.WorkflowQueueInfo> obiektów, z których każdy zawiera informacje o stanie jednej z kolejek przepływu pracy skojarzonych z tym wystąpieniem przepływu pracy. <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType>zawiera elementy oczekujące dla <xref:System.Workflow.Runtime.WorkflowQueue> a i <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> zawiera listę działań subskrybowanych w <xref:System.Workflow.Runtime.WorkflowQueue>celu dostarczenia elementu w.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> jak można użyć metody, aby uzyskać informacje o stanie wszystkich kolejek przepływu pracy skojarzonych <xref:System.Workflow.Runtime.WorkflowInstance> z obiektem. Gdy wystąpi `OnWorkflowIdled` zdarzenie, metoda zdefiniowana w tym przykładzie jest wywoływana. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> Określa, który przepływ pracy jest bezczynny <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> przy użyciu właściwości, a następnie pobiera kolekcję elementów umieszczonych w kolejce dla wystąpienia przepływu <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> pracy, wywołując metodę. Kod wykonuje iterację w kolekcji, aby określić, które działanie oczekuje na zdarzenie, które przekroczy przepływ pracy. Następnie wysyła wyjątek do kolejki przepływu pracy przy użyciu <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> metody wraz z nazwą elementu kolejki zdarzeń.  
  
 Ten przykład kodu jest częścią anulowania zestawu SDK przepływu pracy z pliku Program.cs. Aby uzyskać więcej informacji, zobacz [Anulowanie przepływu pracy](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">Anulowanie przepływu pracy</related>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public Guid InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid InstanceId { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : Guid" Usage="System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera unikatowy identyfikator wystąpienia przepływu pracy.</summary>
        <value><see cref="T:System.Guid" /> Wystąpienia przepływu pracy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> , aby odwołać się do wystąpienia przepływu pracy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> jak można użyć właściwości, aby uzyskać informacje <xref:System.Workflow.Runtime.WorkflowInstance> o obiekcie. Pierwszy fragment kodu tworzy <xref:System.Workflow.Runtime.WorkflowInstance> zmienną o nazwie. `instanceId`  
  
 [!code-csharp[WF_Samples#210](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#210)]
 [!code-vb[WF_Samples#210](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#210)]  
  
 Drugi fragment kodu używa <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> właściwości jako pierwszego obiektu `OrderEventArgs` w wywołaniu konstruktora, gdy `CallBackForApproval` wywoływana jest metoda.  
  
 Ten przykład kodu jest częścią przykładu zestawu SDK nasłuchu z pliku OrderServiceImple.cs. Aby uzyskać więcej informacji, zobacz temat [Nasłuchuj przykładu](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741698(v=vs.90)).  
  
 [!code-csharp[WF_Samples#211](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#211)]
 [!code-vb[WF_Samples#211](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#211)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741698(v=vs.90)">Przykład nasłuchiwania</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load();" />
      <MemberSignature Language="F#" Value="member this.Load : unit -&gt; unit" Usage="workflowInstance.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ładuje poprzednio zwolnione wystąpienie przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>jest synchroniczna; Jeśli wystąpienie przepływu pracy może zostać załadowane <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> , zwróci się po załadowaniu wystąpienia przepływu pracy do pamięci i zaplanowaniu przez aparat czasu wykonywania przepływu pracy. Środowisko uruchomieniowe podnosi <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> zdarzenie, gdy usługa trwałości przywróciła wystąpienie przepływu pracy w pamięci, ale przed zaplanowaniem wystąpienia przez aparat czasu wykonywania przepływu pracy.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób ładowania wcześniej zwolnionego <xref:System.Workflow.Runtime.WorkflowInstance> obiektu.  
  
 [!code-csharp[WF_Samples#10](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#10)]
 [!code-vb[WF_Samples#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReloadTrackingProfiles">
      <MemberSignature Language="C#" Value="public void ReloadTrackingProfiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadTrackingProfiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReloadTrackingProfiles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReloadTrackingProfiles();" />
      <MemberSignature Language="F#" Value="member this.ReloadTrackingProfiles : unit -&gt; unit" Usage="workflowInstance.ReloadTrackingProfiles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Załaduj ponownie profile śledzenia dla tego wystąpienia przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Infrastruktura śledzenia środowiska uruchomieniowego spowoduje załadowanie każdego <xref:System.Workflow.Runtime.Tracking.TrackingProfile> z tych wystąpień przepływu pracy skojarzonych ze swoimi kanałami śledzenia. Jeśli usługa nie jest jeszcze w stanie wstrzymania, przepływ pracy jest tymczasowo wstrzymywany przez infrastrukturę śledzenia środowiska uruchomieniowego podczas ponownego ładowania profilów śledzenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.</exception>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="workflowInstance.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wznawia wykonywanie poprzednio zawieszonego wystąpienia przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Host może wywołać <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> , aby wznowić wykonywanie wystąpienia przepływu pracy, które zostało wcześniej zawieszone. Jeśli wystąpienie przepływu pracy nie jest w stanie wstrzymania, nie zostanie podjęta żadna akcja. Środowisko uruchomieniowe wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> zdarzenie tuż przed wznowieniem wykonywania wystąpienia przepływu pracy.  
  
   
  
## Examples  
 Poniższy przykład ilustruje wywoływanie metody Resume dla wcześniej zawieszonego wystąpienia przepływu pracy.  Ten przykład pochodzi z przykładu zawieszania i kończenia zestawu SDK.  Aby uzyskać więcej informacji, zobacz [przykład zawieszenia i zakończenia](https://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).  
  
 [!code-csharp[WF_Samples#172](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#172)]
 [!code-vb[WF_Samples#172](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#172)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="workflowInstance.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia wykonywanie wystąpienia przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A>wywołuje <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> działanie elementu głównego tego wystąpienia przepływu pracy. Jeśli <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> napotka wyjątek, kończy wystąpienie przepływu pracy przez wywołanie <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> z <xref:System.Exception.Message%2A> właściwością wyjątku przesłanego jako powód zakończenia.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak można użyć <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> metody do <xref:System.Workflow.Runtime.WorkflowInstance> uruchomienia na hoście przepływu pracy. Kod tworzy wystąpienie <xref:System.Workflow.Runtime.WorkflowRuntime>, dodaje usługi do środowiska uruchomieniowego, a następnie pokazuje zalecany sposób <xref:System.Workflow.Runtime.WorkflowInstance> tworzenia obiektu. Tworzy <xref:System.Type> obiekt i rzutuje go na jeden z obiektów przepływu pracy, z którym jest skojarzony host. Kod, który następnie <xref:System.Workflow.Runtime.WorkflowInstance> jest inicjowany <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> przez wywołanie metody i przekazanie wcześniej utworzonego typu do niego. Rozpoczyna się od wywołania metody. <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> <xref:System.Workflow.Runtime.WorkflowInstance>  
  
 Ten przykład kodu jest częścią anulowania zestawu SDK przepływu pracy z pliku Program.cs. Aby uzyskać więcej informacji, zobacz [Anulowanie przepływu pracy](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.  
  
 —lub—  
  
 Wystąpienie przepływu pracy zostało już uruchomione.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">Anulowanie przepływu pracy</related>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend(System::String ^ error);" />
      <MemberSignature Language="F#" Value="member this.Suspend : string -&gt; unit" Usage="workflowInstance.Suspend error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error">Opis przyczyny zawieszenia wystąpienia przepływu pracy.</param>
        <summary>Wstrzymuje wystąpienie przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy jest zawieszone w sposób synchroniczny. Jeśli wystąpienie przepływu pracy jest już wstrzymane, nie są podejmowane żadne akcje; w przeciwnym razie aparat środowiska uruchomieniowego przepływu pracy zawiesza wystąpienie przepływu pracy, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> zgłasza zdarzenie `reason` i <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>kończy działanie.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A>nie zwalnia wystąpienia przepływu pracy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje wywoływanie zawieszenia dla <xref:System.Workflow.Runtime.WorkflowInstance> obiektu.  
  
 [!code-csharp[WF_Samples#9](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#9)]
 [!code-vb[WF_Samples#9](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.</exception>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Terminate (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Terminate(System::String ^ error);" />
      <MemberSignature Language="F#" Value="member this.Terminate : string -&gt; unit" Usage="workflowInstance.Terminate error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error">Opis przyczyny zakończenia wystąpienia przepływu pracy.</param>
        <summary>Przerywa wystąpienie przepływu pracy w sposób synchroniczny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy zostało zakończone synchronicznie. Host wywołuje <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> , aby zakończyć wystąpienie przepływu pracy. Aparat środowiska uruchomieniowego przepływu pracy czyści wystąpienie przepływu pracy w pamięci i informuje usługę trwałości o wyczyszczeniu wystąpienia z pamięci. Oznacza to <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, że wszystkie informacje o stanie dla tego wystąpienia przepływu pracy są usuwane z bazy danych po zakończeniu. Nie będzie można ponownie załadować wystąpienia przepływu pracy z wcześniej przechowywanego punktu trwałości.  
  
 Po wyczyszczeniu wystąpienia przepływu pracy w pamięci i uzyskaniu informacji o `Terminate` zakończeniu usługi trwałości Metoda <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> wywołuje <xref:System.Exception.Message%2A> zdarzenie i przekazuje `reason` Właściwość <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> zawarte w <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.  
  
 `Terminate`różni się od <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> tego, że podczas kończenia czyści wystąpienie przepływu pracy w pamięci i informuje usługę trwałości zakończenia, `Abort` po prostu czyści wystąpienie przepływu pracy w pamięci, które następnie można ponownie uruchomić od ostatniego punkt trwałości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje wywołanie przerwania dla <xref:System.Workflow.Runtime.WorkflowInstance> obiektu.  
  
 [!code-csharp[WF_Samples#8](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#8)]
 [!code-vb[WF_Samples#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska uruchomieniowego przepływu pracy nie jest uruchomiony.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryUnload">
      <MemberSignature Language="C#" Value="public bool TryUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.TryUnload" />
      <MemberSignature Language="VB.NET" Value="Public Function TryUnload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryUnload();" />
      <MemberSignature Language="F#" Value="member this.TryUnload : unit -&gt; bool" Usage="workflowInstance.TryUnload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wystąpienie przepływu pracy z pamięci do magazynu trwałości, gdy wystąpienie jest wstrzymane lub bezczynne.</summary>
        <returns><see langword="true" />Jeśli wystąpienie przepływu pracy zostało zwolnione; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wystąpienie przepływu pracy jest bezczynne lub <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> zawieszone, program używa usługi trwałości, aby usunąć wystąpienie przepływu pracy z pamięci i zachować je w magazynie danych. Jeśli usługa trwałości nie jest zarejestrowana <xref:System.Workflow.Runtime.WorkflowRuntime>w usłudze, program <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> wygeneruje <xref:System.InvalidOperationException>. Jeśli wystąpienie przepływu pracy zostanie utrwalone pomyślnie, środowisko uruchomieniowe <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> wywołuje zdarzenie i zwraca `true`wartość. <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>zwraca `false` Jeśli wystąpienie przepływu pracy zostało już zwolnione, zostało przerwane, zostało przerwane lub zostało już ukończone.  
  
 Host może służyć <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> do odzyskiwania zasobów systemowych z bezczynnego przepływu pracy.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie metody TryUnload w celu zwolnienia przepływu pracy po <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> wypadek zdarzenia. Ten przykład pochodzi z przykładu using SDK usług trwałości z pliku Program.cs. Aby uzyskać więcej informacji, zobacz [Korzystanie z usługi trwałości](https://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6).  
  
 [!code-csharp[WF_Samples#280](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#280)]
 [!code-vb[WF_Samples#280](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#280)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">W aparacie środowiska uruchomieniowego przepływu pracy nie zarejestrowano usługi trwałości.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unload ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Unload();" />
      <MemberSignature Language="F#" Value="member this.Unload : unit -&gt; unit" Usage="workflowInstance.Unload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wystąpienie przepływu pracy z pamięci do magazynu trwałości. To wywołanie jest blokowane do momentu zakończenia aktualnie zaplanowanej pracy lub końca zakresu transakcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>jest synchroniczna; oznacza to, że zwraca po wykonaniu wszystkich działań, które wykonuje. Jeśli wystąpienie przepływu pracy nie jest bezczynne, środowisko uruchomieniowe czeka do momentu przerwania wystąpienia. Wystąpienie może zostać przerwane tylko po zakończeniu aktualnie zaplanowanych elementów roboczych; zazwyczaj jest to wykonywane, gdy aktualnie działające działanie zwraca <xref:System.Workflow.ComponentModel.Activity.Execute%2A> z metody. Jeśli jednak wystąpienie jest wykonywane a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, zakres transakcji musi zakończyć wykonywanie, aby można było przerwać wystąpienie. Zwolnij następnie używa usługi trwałości, aby usunąć wystąpienie przepływu pracy z pamięci i zachować je w magazynie danych. Jeśli usługa trwałości nie jest zarejestrowana <xref:System.Workflow.Runtime.WorkflowRuntime>w usłudze, program <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> wygeneruje <xref:System.InvalidOperationException>. Jeśli wystąpienie przepływu pracy zostanie utrwalone pomyślnie, środowisko uruchomieniowe <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> wywołuje zdarzenie.  
  
 Host może służyć <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> do odzyskiwania zasobów systemowych z bezczynnego przepływu pracy.  
  
   
  
## Examples  
 Poniższy przykład ilustruje wywoływanie <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> <xref:System.Workflow.Runtime.WorkflowInstance> obiektu.  
  
 [!code-csharp[WF_Samples#11](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#11)]
 [!code-vb[WF_Samples#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">W aparacie środowiska uruchomieniowego przepływu pracy nie zarejestrowano usługi trwałości.</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowRuntime">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkflowRuntime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ WorkflowRuntime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkflowRuntime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Pobiera dla tego wystąpienia przepływu pracy.</summary>
        <value><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Reprezentuje środowisko wykonawcze, w którym jest uruchomione to wystąpienie przepływu pracy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład demonstruje dostęp do wykonywania <xref:System.Workflow.Runtime.WorkflowRuntime> <xref:System.Workflow.Runtime.WorkflowInstance> obiektu.  
  
 [!code-csharp[WF_Samples#7](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#7)]
 [!code-vb[WF_Samples#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
