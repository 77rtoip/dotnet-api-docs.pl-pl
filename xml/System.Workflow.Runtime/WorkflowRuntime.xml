<Type Name="WorkflowRuntime" FullName="System.Workflow.Runtime.WorkflowRuntime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6064344df4be1fbb1948318ae6e5b87ef21192be" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36445635" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WorkflowRuntime extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowRuntime" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowRuntime&#xA;Implements IDisposable, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="F#" Value="type WorkflowRuntime = class&#xA;    interface IServiceProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje środowiska wykonawczego można skonfigurować dostarczone przez aparat środowiska wykonawczego przepływów pracy dla przepływów pracy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime> udostępnia funkcje wymagane przez aplikację hosta i usług, konfigurowanie i sterowanie aparat środowiska wykonawczego przepływów pracy i aby otrzymywać powiadomienia o zmianach zarówno aparat czasu wykonywania przepływu pracy, jak i wszystkie jego wystąpienia przepływu pracy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Przykłady użycia <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> Konstruktor i <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>, i <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> metody. Kod przedstawia również zalecany sposób tworzenia <xref:System.Workflow.Runtime.WorkflowInstance> obiektu w przypadku hosta przepływu pracy za pomocą <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> metody. Przedstawiono również sposób ustawiania obsługi zdarzeń <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled>, i <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> zdarzenia.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime> Jest inicjowany z domyślnych wartości właściwości i zawiera podstawowe usługi domyślne. Można również skonfigurować aparatu czasu wykonywania przepływu pracy, można dodawać i usuwać usług za pomocą <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> i <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>, a użytkownik może ustawić <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>. Po <xref:System.Workflow.Runtime.WorkflowRuntime> jest skonfigurowany, wywołaj <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> można uruchomić aparatu czasu wykonywania przepływu pracy i jej usługi.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Workflow.Runtime.WorkflowRuntime> klasy.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>|"WorkflowRuntime"|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>|`false`|  
  
 Podstawowe usługi domyślne są <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> i <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, jak używasz <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Stanowi przykład sposobu użycia <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> konstruktora w celu utworzenia wystąpienia <xref:System.Workflow.Runtime.WorkflowRuntime> i uzyskiwać dostęp do metod i zdarzeń.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (string configSectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configSectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configSectionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::String ^ configSectionName);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : string -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime configSectionName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configSectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configSectionName">Nazwa prawidłowego <see langword="workflowSettings" /> sekcji w pliku konfiguracyjnym aplikacji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> przy użyciu określonej sekcji pliku konfiguracji aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime> Zainicjowano zgodnie z ustawieniami w sekcji określony przez `configSectionName` w pliku konfiguracyjnym aplikacji. `configSectionName` muszą odpowiadać prawidłowym `workflowSettings` sekcji pliku konfiguracji.  
  
 Po skonfigurowaniu aparat czasu wykonywania przepływu pracy przy użyciu pliku konfiguracji aplikacji ładuje i tworzy wystąpienie klasy na liście typów `Services` sekcji pliku konfiguracji. Jeśli aparat środowiska wykonawczego przepływów pracy tworzy tych klas szuka konstruktorów klas z następującego podpisów w następującej kolejności:  
  
1.  Usługi (parametry NameValueCollection i WorkflowRuntime środowiska wykonawczego)  
  
2.  Usługi (WorkflowRuntime środowiska wykonawczego)  
  
3.  Usługi (NameValueCollection parametry)  
  
4.  Service()  
  
 Wszystkie klasy usługi, które są ładowane z pliku konfiguracji musi implementować co najmniej jednej z tych konstruktora.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="configSectionName" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Prawidłowy <see langword="workflowSettings" /> nie można odnaleźć sekcji w pliku konfiguracyjnym aplikacji.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> już istnieje dla tej domeny aplikacji.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As WorkflowRuntimeSection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::Workflow::Runtime::Configuration::WorkflowRuntimeSection ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : System.Workflow.Runtime.Configuration.WorkflowRuntimeSection -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime settings" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
      </Parameters>
      <Docs>
        <param name="settings">A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy przy użyciu ustawień w określonym <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor zapewnia mechanizm konfigurowania czasu wykonywania aparatu przepływu pracy przy użyciu wywołania metody pojedynczego dla hostów, które nie korzystają z pliku konfiguracji aplikacji. Istnieje wiele przyczyn na nie przy użyciu pliku konfiguracji aplikacji. Hosta można uruchomić w środowisku, które nie zezwala na używanie plików konfiguracji; na przykład w środowiskach zaufanych nie umożliwiające odczyt z pliku konfiguracji aplikacji ze względów bezpieczeństwa. Ponadto hosta można użyć zastrzeżonych konfiguracji mechanizmu; na przykład host mogą przechowywać ustawienia konfiguracji czasu wykonywania aparatu przepływu pracy z bazy danych SQL.  
  
 Aparat środowiska wykonawczego przepływów pracy ładuje i tworzy wystąpienie klasy typach zawartych w <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services%2A?displayProperty=nameWithType>. Jeśli aparat środowiska wykonawczego przepływów pracy tworzy tych klas szuka konstruktorów klas z następującego podpisów w następującej kolejności:  
  
1.  Usługi (parametry NameValueCollection i WorkflowRuntime środowiska wykonawczego)  
  
2.  Usługi (WorkflowRuntime środowiska wykonawczego)  
  
3.  Usługi (NameValueCollection parametry)  
  
4.  Service()  
  
 Wszystkie klasy usługi, które są określone w `settings` musi implementować co najmniej jednej z tych konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settings" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> już istnieje dla tej domeny aplikacji.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.AddService : obj -&gt; unit" Usage="workflowRuntime.AddService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Obiekt, który reprezentuje usługi do dodania.</param>
        <summary>Dodaje określoną usługę do aparatu czasu wykonywania przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy można skonfigurować przez dodanie podstawowe usługi. Podstawowe usługi są tymi, które pochodzi od dowolnej spośród następujących klas podstawowych usługi: <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy i <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  Podstawowe usługi mogą być dodawane tylko, gdy aparat czasu wykonywania przepływu pracy nie jest uruchomiony; oznacza to, gdy <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jest `false`. <xref:System.Workflow.Runtime.WorkflowRuntime> Mogą służyć jako kontenera magazynu dla innych usług, które mogą być używane przez inne przepływy pracy lub aplikacji uruchomionych na hoście. Po dodaniu usługi-core, która pochodzi z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy po rozpoczęciu aparat środowiska wykonawczego przepływów pracy <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> wywołania <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> Metoda implementowana przez tę usługę.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> wymusza ograniczenia który nie dwie usługi o tej samej <xref:System.Type> mogą być dodawane do <xref:System.Workflow.Runtime.WorkflowRuntime>. Można jednak dodać wielu usług, które pochodzą z tej samej klasy podstawowej.  Może istnieć tylko jedna usługa pochodzące z każdej z następujących klas podstawowych usług w <xref:System.Workflow.Runtime.WorkflowRuntime>: <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy i <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy.  Jeśli dodasz wielu usług pochodzących z jednego z tych klas, na przykład dwie usługi utrwalania, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> zgłasza <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Zapewnia przykład sposobu użycia <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> metody w celu dodania <xref:System.Workflow.Activities.ExternalDataExchangeService> i <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> do aparatu czasu wykonywania przepływu pracy.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkId=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Został usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="service" /> jest już zarejestrowany z aparatem czasu wykonywania przepływu pracy.  - lub - <paramref name="service" /> jest usługi podstawowej i aparatu czasu wykonywania przepływu pracy jest już uruchomione (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> jest <see langword="true" />).</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateWorkflow">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie został uruchomiony aparat środowiska wykonawczego przepływów pracy, <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> wywołania metody <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Zobacz <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> listę możliwych wyjątków. Po utworzeniu wystąpienia przepływu pracy Wywołaj <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A?displayProperty=nameWithType> na <xref:System.Workflow.Runtime.WorkflowInstance> obiektu zwróconego przez <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> metody, aby rozpocząć jego wykonywania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="workflowType">
          <see cref="T:System.Type" /> Przepływu pracy do utworzenia.</param>
        <summary>Tworzy nowe wystąpienie przepływu pracy przy użyciu określonego przepływu pracy <see cref="T:System.Type" />.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią jakieś błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> jest generowany. To działa dobrze w przypadku scenariuszy prostego, ale w środowisku serwera ponownego sprawdzania poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączania weryfikacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zalecany sposób tworzenia <xref:System.Workflow.Runtime.WorkflowInstance> obiektu w przypadku hosta przepływu pracy za pomocą <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> metody.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowDefinitionReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">
          <see cref="T:System.Xml.XmlReader" /> Zawierający definicję przepływu pracy.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonego <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy jest tworzona na podstawie pliku definicji przepływu pracy XAML odwołuje się <xref:System.Xml.XmlReader>.  
  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią jakieś błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> jest generowany. To działa dobrze w przypadku scenariuszy prostego, ale w środowisku serwera ponownego sprawdzania poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączania weryfikacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia przepływu pracy podanej definicji opartych na języku XAML przepływu pracy.  
  
```  
static void Main(string[] args)  
{  
    using (WorkflowRuntime workflowRuntime = new WorkflowRuntime())  
    {  
        AutoResetEvent waitHandle = new AutoResetEvent(false);  
        workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e)  
        {  
            waitHandle.Set();  
        };  
        workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e)  
        {  
            Console.WriteLine(e.Exception.Message);  
            waitHandle.Set();  
        };  
  
        TypeProvider typeProvider = new TypeProvider(null);  
        // Add referenced assemblies, if needed  
        // typeProvider.AddAssembly(...);  
        workflowRuntime.AddService(typeProvider);  
  
        using (XmlReader reader = XmlReader.Create("Workflow1.xoml"))  
        {  
            WorkflowInstance instance = workflowRuntime.CreateWorkflow(reader);  
            instance.Start();  
        }  
  
        waitHandle.WaitOne();  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowType">
          <see cref="T:System.Type" /> Przepływu pracy do utworzenia.</param>
        <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> obiektów, wyznaczaną przez ciąg reprezentujący argumenty do przepływu pracy.</param>
        <summary>Tworzy wystąpienia przepływu pracy przy użyciu określonego przepływu pracy <see cref="T:System.Type" /> i argumenty w przepływie pracy zawartych w określonym <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią jakieś błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> jest generowany. To działa dobrze w przypadku scenariuszy prostego, ale w środowisku serwera ponownego sprawdzania poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączania weryfikacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przekazywanie parametrów, na przykład `CreateWorkflow`, zobacz [przepływu pracy próbką parametrami](http://go.microsoft.com/fwlink/?LinkId=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowType">
          <see cref="T:System.Type" /> Przepływu pracy do utworzenia.</param>
        <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> obiektów, wyznaczaną przez ciąg reprezentujący argumenty do przepływu pracy.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> Konkretnych <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> do utworzenia.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych parametrów.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią jakieś błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> jest generowany. To działa dobrze w przypadku scenariuszy prostego, ale w środowisku serwera ponownego sprawdzania poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączania weryfikacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przepływ pracy `instanceId` dla każdego uruchamiania przepływów pracy załadowanych przez <xref:System.Workflow.Runtime.WorkflowRuntime> muszą być unikatowe. W przypadku przekazania `instanceId` do tworzenia przepływu pracy i uruchomiony przepływ pracy używa już który `instanceId`, <xref:System.InvalidOperationException> jest generowany.  
  
 Przekazywanie parametrów, na przykład `CreateWorkflow`, zobacz [przepływu pracy próbką parametrami](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">
          <see cref="T:System.Xml.XmlReader" /> Zawierający definicję przepływu pracy.</param>
        <param name="rulesReader">
          <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> obiektów, wyznaczaną przez ciąg reprezentujący argumenty do przepływu pracy.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonego <see cref="T:System.Xml.XmlReader" /> obiektów i argumenty zawartych w określonym <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy jest tworzona na podstawie definicji przepływu pracy odwołuje się <xref:System.Xml.XmlReader> i argumenty dostarczonych przez `namedArgumentValues`.  
  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią jakieś błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> jest generowany. To działa dobrze w przypadku scenariuszy prostego, ale w środowisku serwera ponownego sprawdzania poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączania weryfikacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przekazywanie parametrów, na przykład `CreateWorkflow`, zobacz [przepływu pracy próbką parametrami](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Na przykład za pomocą reguł zdefiniowanych w pliku XML, zobacz [Jeślilub z przykładowej reguły](http://go.microsoft.com/fwlink/?LinkId=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">
          <see cref="T:System.Xml.XmlReader" /> Zawierający definicję przepływu pracy.</param>
        <param name="rulesReader">
          <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> obiektów, wyznaczaną przez ciąg reprezentujący argumenty do przepływu pracy.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> Konkretnych <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> do utworzenia.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych parametrów.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią jakieś błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> jest generowany. To działa dobrze w przypadku scenariuszy prostego, ale w środowisku serwera ponownego sprawdzania poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączania weryfikacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przepływ pracy `instanceId` dla każdego uruchamiania przepływów pracy załadowanych przez <xref:System.Workflow.Runtime.WorkflowRuntime> muszą być unikatowe. W przypadku przekazania `instanceId` do tworzenia przepływu pracy i uruchomiony przepływ pracy używa już który `instanceId`, <xref:System.InvalidOperationException> jest generowany.  
  
 Przekazywanie parametrów, na przykład `CreateWorkflow`, zobacz [przepływu pracy próbką parametrami](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Na przykład za pomocą reguł zdefiniowanych w pliku XML, zobacz [Jeślilub z przykładowej reguły](http://go.microsoft.com/fwlink/?LinkID=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="workflowRuntime.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby wyłączyć <xref:System.Workflow.Runtime.WorkflowRuntime> poprawnie, możesz powinny wywoływać tylko <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> po wywołaniu <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. Jest to spowodowane wywołaniem <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> pozostawia metody tylko <xref:System.Workflow.Runtime.WorkflowRuntime> w stanie uniemożliwiającym jego używanie. <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> zwalnia zasoby używane przez środowisko uruchomieniowe przez zamknięcia otworzyć dojścia do plików, połączenia z bazą danych i tak dalej, ale nie zwolnić wystąpienia przepływu pracy, Zatrzymaj usługi lub wykonaj jedną z innych działań, które <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> jest.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> powinna być wywoływana tylko wtedy, gdy aplikacja hosta należy zwolnić zasoby używane przez <xref:System.Workflow.Runtime.WorkflowRuntime> przed ich automatycznie są zwalniane przez moduł garbage collector. Aby uzyskać ogólne informacje o <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób wywoływania <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> na <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu. W tym przykładzie <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> metoda jest wywoływana z FormClosing obsługi zdarzeń dla tego formularza aplikacji; daje to pewność, że obiekty utworzone przez środowisko uruchomieniowe są poprawnie wyczyścić podczas zamykania aplikacji. Ten przykład jest z [przykładowej aplikacji mowy](http://go.microsoft.com/fwlink/?LinkId=157405).  
  
 [!code-csharp[WF_Samples#108](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#108)]
 [!code-vb[WF_Samples#108](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;object&gt; GetAllServices (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;object&gt; GetAllServices(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices (serviceType As Type) As ReadOnlyCollection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Object ^&gt; ^ GetAllServices(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : Type -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;obj&gt;" Usage="workflowRuntime.GetAllServices serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <see cref="T:System.Type" /> Czy usługi musi implementować ma zostać zwrócona.</param>
        <summary>Pobiera wszystkie usługi, które są dodawane do czasu wykonywania przepływu pracy aparat, które implementują lub pochodzi z określonego <see cref="T:System.Type" />.</summary>
        <returns>Usługi, które implementować lub pochodzić z określonego <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> wskazuje, że żadne usługi który implementować lub pochodzić z określonego <xref:System.Type> zostały dodane do silnika czasu wykonywania przepływu pracy.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób pobierania wszystkich usług danego typu z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu.  
  
 [!code-csharp[WF_Samples#19](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#19)]
 [!code-vb[WF_Samples#19](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetAllServices&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetAllServices&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices(Of T) () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ GetAllServices();" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="workflowRuntime.GetAllServices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ usługi.</typeparam>
        <summary>Pobiera wszystkich usług, które są dodawane do aparatu czasu wykonywania przepływu pracy implementować lub pochodzić od określonego typu ogólnego.</summary>
        <returns>Usługi, które implementować lub pochodzić od określonego typu ogólnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> wskazuje, czy usługi nie zostały dodane do aparat środowiska wykonawczego przepływów pracy, który implementować lub pochodzić od określonego typu ogólnego.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób pobierania wszystkich usług danego typu z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu.  
  
 [!code-csharp[WF_Samples#6](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#6)]
 [!code-vb[WF_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedWorkflows">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedWorkflows () As ReadOnlyCollection(Of WorkflowInstance)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowInstance ^&gt; ^ GetLoadedWorkflows();" />
      <MemberSignature Language="F#" Value="member this.GetLoadedWorkflows : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;" Usage="workflowRuntime.GetLoadedWorkflows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję, która zawiera wszystkie wystąpienia przepływu pracy załadowanych obecnie do pamięci.</summary>
        <returns>A <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> obiekt dla każdego wystąpienia przepływu pracy załadowanych obecnie do pamięci.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zauważyć, że w przeciwieństwie do <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>, ta metoda nie zgłasza <xref:System.InvalidOperationException> Jeśli środowisko uruchomieniowe nie jest uruchomiona.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób pobierania kolekcję załadowanych przepływów pracy z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu.  
  
 [!code-csharp[WF_Samples#18](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#18)]
 [!code-vb[WF_Samples#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="workflowRuntime.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <see cref="T:System.Type" /> Usługi do pobrania.</param>
        <summary>Pobiera usługę o określonym <see cref="T:System.Type" /> z aparatu czasu wykonywania przepływu pracy.</summary>
        <returns>Usługi o określonym <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> zgłasza wyjątek <xref:System.InvalidOperationException> Jeśli istnieje więcej niż jedna usługa dla określonego <xref:System.Type>. W związku z tym należy używać jednej z metod przeciążone <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> Jeśli jest to możliwe, że wiele usług określonego typu znajdują się w <xref:System.Workflow.Runtime.WorkflowRuntime>. Na przykład aparatu czasu wykonywania przepływu pracy może mieć wielu usług śledzenia. Jeśli żądanie usługi śledzenia, określając <xref:System.Workflow.Runtime.Tracking.TrackingService> klasa podstawowa jest możliwe, że będzie zgłaszany wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostało już usunięte z.</exception>
        <exception cref="T:System.InvalidOperationException">Więcej niż jedna usługa typu <paramref name="serviceType" /> został znaleziony.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetService&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetService&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'T" Usage="workflowRuntime.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ usługi.</typeparam>
        <summary>Pobiera usługę o określonym typie ogólnym z aparatu czasu wykonywania przepływu pracy.</summary>
        <returns>Pojedynczą usługę o określonym typie ogólnym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> zgłasza wyjątek <xref:System.InvalidOperationException> Jeśli istnieje więcej niż jedna usługa dla określonego typu ogólnego. W związku z tym należy używać jednej z metod przeciążone <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> Jeśli jest to możliwe, że wiele usług typu ogólnego znajdują się w <xref:System.Workflow.Runtime.WorkflowRuntime>. Na przykład aparatu czasu wykonywania przepływu pracy może mieć wielu usług śledzenia. Jeśli żądanie usługi śledzenia, określając <xref:System.Workflow.Runtime.Tracking.TrackingService> klasa podstawowa jest możliwe, że będzie zgłaszany wyjątek.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak pobrać pojedynczą usługę z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu; w tym przypadku usługa typu <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>. W tym przykładzie pochodzi z [próbki wątkowość przepływu pracy](http://go.microsoft.com/fwlink/?LinkId=157350).  
  
 [!code-csharp[WF_Samples#28](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#28)]
 [!code-vb[WF_Samples#28](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Już został zlikwidowany.</exception>
        <exception cref="T:System.InvalidOperationException">Znaleziono więcej niż jedna usługa typu ogólnego.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance GetWorkflow (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance GetWorkflow(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflow (instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ GetWorkflow(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.GetWorkflow : Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.GetWorkflow instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">
          <see cref="T:System.Guid" /> Wystąpienia przepływu pracy.</param>
        <summary>Pobiera wystąpienie przepływu pracy, który ma określony <see cref="T:System.Guid" />.</summary>
        <returns>
          <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> Ma określony <see cref="T:System.Guid" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `instanceId` określa wystąpienie przepływu pracy, który nie jest aktualnie w pamięci, wystąpienie przepływu pracy jest ładowany do pamięci i zaplanowane do uruchomienia. Na przykład po wystąpienia przepływu pracy zostało przerwane, można wywołać <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> na załadowanie wystąpienia przepływu pracy do pamięci. W takim przypadku ostatniego utrwalonego stanu wystąpienia przepływu pracy jest ładowany do pamięci przez usługę trwałości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje `ReloadWorkflow` — metoda, która wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> metody. `ReloadWorkflow` Metody jest częścią większej klasy, która ma `Runtime` właściwość, aby uzyskać dostęp do wszystkich metod, właściwości i zdarzenia <xref:System.Workflow.Runtime.WorkflowRuntime> klasy.  
  
 Ten przykładowy kod jest częścią [przykład usługi trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkId=157351) próbki.  
  
> [!NOTE]
>  W tym przykładzie, wywołanie <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> jest nadmiarowy ponieważ zarówno <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> i <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> metody używać tej samej metody pomocnika wewnętrznego na załadowanie wystąpienia przepływu pracy do pamięci.  
  
 [!code-csharp[WF_Samples#265](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#265)]
 [!code-vb[WF_Samples#265](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#265)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Środowiska uruchomieniowego przepływu pracy nie jest uruchomiona.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStarted : bool" Usage="System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy aparat czasu wykonywania przepływu pracy zostało rozpoczęte.</summary>
        <value>
          <see langword="true" /> Jeśli aparat czasu wykonywania przepływu pracy została uruchomiona; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> Wskazuje, czy są uruchomione usługi czasu wykonywania aparatu przepływu pracy. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jest `false` do wywołania hosta <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Pozostaje `true` do wywołania hosta <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
> [!NOTE]
>  Nie można dodać podstawowe usługi czasu wykonywania aparatu przepływu pracy jest uruchomiona. Podstawowe usługi są usług, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy, <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy i <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób uzyskiwania dostępu do <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> właściwość <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu. W tym przykładzie Jeśli środowisko uruchomieniowe jest uruchomiona, komunikat drukowania na konsoli.  
  
 [!code-csharp[WF_Samples#21](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#21)]
 [!code-vb[WF_Samples#21](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę skojarzoną z <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <value>Nazwa skojarzona z tym <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można ustawić <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> podczas przepływu pracy jest uruchomiony aparat środowiska wykonawczego (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jest `true`).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób uzyskiwania dostępu do <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> właściwość <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu. W tym przykładzie nazwa środowiska uruchomieniowego jest równa "Main Runtime".  
  
 [!code-csharp[WF_Samples#20](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#20)]
 [!code-vb[WF_Samples#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Podjęto próbę ustawienia <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> na <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> zostanie usunięty, która występuje.</exception>
        <exception cref="T:System.InvalidOperationException">Podjęto próbę ustawienia <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> podczas przepływu pracy jest uruchomiony Aparat wykonawczy występuje.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.RemoveService : obj -&gt; unit" Usage="workflowRuntime.RemoveService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Obiekt, który reprezentuje usługi do usunięcia.</param>
        <summary>Usuwa określoną usługę z aparatu czasu wykonywania przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można usunąć podstawowej usługi czasu wykonywania aparatu przepływu pracy jest uruchomiona (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jest `true`). Podstawowe usługi są usług, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy lub <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  Jeśli `service` pochodną <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> wywołania <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> Metoda implementowana przez `service`.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> jest dodawane i usuwane z <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#16](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#16)]
 [!code-vb[WF_Samples#16](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostało już usunięte z.</exception>
        <exception cref="T:System.InvalidOperationException">Aparat środowiska wykonawczego przepływów pracy została uruchomiona (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> jest <see langword="true" />) i <paramref name="service" /> jest usługi podstawowej.  \- lub - <paramref name="service" /> aparatu czasu wykonywania przepływu pracy nie jest zarejestrowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesExceptionNotHandled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />
      <MemberSignature Language="VB.NET" Value="Public Event ServicesExceptionNotHandled As EventHandler(Of ServicesExceptionNotHandledEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::ServicesExceptionNotHandledEventArgs ^&gt; ^ ServicesExceptionNotHandled;" />
      <MemberSignature Language="F#" Value="member this.ServicesExceptionNotHandled : EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " Usage="member this.ServicesExceptionNotHandled : System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy usługa, która jest pochodną <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> klasy wywołania <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usługa, która jest pochodną <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy można wywołać <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> metodę, aby poinformować subskrybentów <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> zdarzenie, które nie może obsłużyć wyjątek wystąpił podczas jej wykonywania. To zdarzenie, aby zaimplementować mechanizm odzyskiwania mogą subskrybować.  
  
 To zdarzenie jest wywoływane, gdy nie utworzono jeszcze wystąpienia przepływu pracy przez aparat środowiska wykonawczego przepływów pracy i wystąpienia wyjątku. W tym scenariuszu Zgłoś to zdarzenie jest jedynym sposobem, aby poinformować aplikacji hosta, który wystąpił wyjątek. Jednak aparat środowiska wykonawczego przepływów pracy nie mogą wywoływać to bezpośrednio. Zamiast tego aparatu czasu wykonywania przepływu pracy dostarcza wyjątek do wystąpienia przepływu pracy albo, jeśli żadne wystąpienie zgłasza wyjątek, wróć do wywołującego, w tym przypadku jest rzeczywiście usługę, która generuje to zdarzenie. W przypadku utworzenia własnych trwałości lub usługi harmonogramu, musisz zaimplementować to zdarzenie samodzielnie za pomocą podstawowym <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> metody.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> zdarzenie, nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Guid> wystąpienia przepływu pracy, który został przy użyciu usługi i <xref:System.Exception> który nie jest obsługiwane.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> z obsługi zdarzeń metodę o nazwie `OnExceptionNotHandled`.  
  
 Ten przykładowy kod jest częścią [przykład usługi trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Started" />
      <MemberSignature Language="VB.NET" Value="Public Event Started As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Started;" />
      <MemberSignature Language="F#" Value="member this.Started : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Started : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy aparat czasu wykonywania przepływu pracy została uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> Metoda zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.Started> wywołał zdarzenie po został zweryfikowany podstawowej konfiguracji usługi czasu wykonywania aparatu przepływu pracy, <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> metody implementowane przez każdego z jego usług, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy i ustawił <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> do `true`. Nie ma żadnej gwarancji o kolejność usług, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy są uruchamiane przez aparat środowiska wykonawczego przepływów pracy, a niektóre z tych usług czasu wykonywania aparatu przepływu pracy może zależeć od działania z tych usług zadania uruchamiania. Usługi czasu wykonywania aparatu przepływu pracy można zastąpić <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=nameWithType> metody do wykonywania wszystkich zadań końcowego uruchomienia, które wymagają obsługi innych aparatu czasu wykonywania przepływu pracy usług, kiedy <xref:System.Workflow.Runtime.WorkflowRuntime.Started> zdarzenia.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 W poniższym przykładzie program obsługi zdarzeń jest dodawany do <xref:System.Workflow.Runtime.WorkflowRuntime.Started> zdarzenie <xref:System.Workflow.Runtime.WorkflowRuntime>. W tym przykładzie program obsługi jest anonimową metodą Wyświetla prosty komunikat do konsoli.  
  
 [!code-csharp[WF_Samples#15](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#15)]
 [!code-vb[WF_Samples#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartRuntime">
      <MemberSignature Language="C#" Value="public void StartRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartRuntime();" />
      <MemberSignature Language="F#" Value="member this.StartRuntime : unit -&gt; unit" Usage="workflowRuntime.StartRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia aparat środowiska wykonawczego przepływów pracy i usługi czasu wykonywania aparatu przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda sprawdza, czy istnieje prawidłowy zestaw podstawowe usługi, a następnie uruchamia żadnych usług, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy.  Musi istnieć jeden i tylko jeden z następujących usług podstawowych: przepływ pracy `CommitWorkBatch` usługi pochodzące z <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy podstawowej i usługa Harmonogram pochodzące z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy podstawowej.  Jeśli brakuje jednego lub obu tych usług podstawowych, aparat środowiska wykonawczego przepływów pracy dostarcza odpowiednią domyślna usługa: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> przepływu pracy `CommitWorkBatch` usługi i <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> dla usługi Harmonogram. Usługa trwałości jest opcjonalna, ale mogą być obecne co najwyżej tylko jedna usługa trwałości. Po został zweryfikowany konfiguracji usługi <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> wywołania <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> na wszystkich usług, które są pochodnymi <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy.  Na koniec ustawia aparat środowiska wykonawczego przepływów pracy <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> i zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.Started> zdarzeń.  
  
 Nie można dodaniu lub usunięciu podstawowe usługi, po rozpoczęciu aparatu czasu wykonywania przepływu pracy. Podstawowe usługi są usług, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy lub <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  Jeśli należy wywołać <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> aparatu czasu wykonywania przepływu pracy jest uruchomiona, jest nie wykonano żadnej akcji.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> po <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> tworzy <xref:System.Workflow.Runtime.WorkflowRuntime> wystąpienia i po wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> nad dodaniem usług do środowiska wykonawczego. Wywołuje również <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> przed innymi przetwarzania.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkId=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Został usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Istnieje więcej niż jednej usługi przepływu pracy <see langword="CommitWorkBatch" /> Usługa zarejestrowana z tym <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  istnieje więcej niż jedna usługa Harmonogram zarejestrowane z tym - lub - <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  istnieje więcej niż jedna usługa trwałości zarejestrowane z tym - lub - <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />
      <MemberSignature Language="VB.NET" Value="Public Event Stopped As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Stopped;" />
      <MemberSignature Language="F#" Value="member this.Stopped : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Stopped : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy aparat czasu wykonywania przepływu pracy jest zatrzymana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> Metoda zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> zdarzenia po jego wywołał <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> metody implementowane przez każdego z jego usług, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy.  Nie ma żadnej gwarancji o kolejności, w którym zatrzymuje te usługi czasu wykonywania aparatu przepływu pracy, a niektóre z tych usług należy zachować niektóre funkcje, które jest zależał od przez inne usługi, dopóki za zostały zatrzymane. Takie usługi można zastąpić <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A?displayProperty=nameWithType> metodę w celu wszelka logika zamknięcie pozostałych po <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> zdarzenia.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 W poniższym przykładzie program obsługi zdarzeń jest dodawany do <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> zdarzenie <xref:System.Workflow.Runtime.WorkflowRuntime>. W tym przykładzie program obsługi jest anonimową metodą Wyświetla prosty komunikat do konsoli.  
  
 [!code-csharp[WF_Samples#14](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#14)]
 [!code-vb[WF_Samples#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRuntime">
      <MemberSignature Language="C#" Value="public void StopRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopRuntime();" />
      <MemberSignature Language="F#" Value="member this.StopRuntime : unit -&gt; unit" Usage="workflowRuntime.StopRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatrzymuje aparat środowiska wykonawczego przepływów pracy i usługi czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powoduje, że aparat czasu wykonywania przepływu pracy do zwolnienia każdego z jego wystąpienia przepływu pracy, Zatrzymaj wszystkie jej usług, które pochodzą od <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy, ustaw <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> do `false`i zgłosi <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> zdarzeń.  
  
 Aby wyłączyć <xref:System.Workflow.Runtime.WorkflowRuntime> bezpiecznie, wywołaj <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> przed wywołaniem <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> jest wywoływana po zakończeniu wszystkich innych przetwarzania skojarzony ze środowiskiem uruchomieniowym hosta.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkId=157346) próbki.  
  
 [!code-csharp[WF_Samples#259](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#259)]
 [!code-vb[WF_Samples#259](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#259)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostało już usunięte z.</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowAborted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowAborted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowAborted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowAborted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowAborted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostało przerwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> występuje po wszystkich oczekuje na wykonanie zadania przepływu pracy jest wyczyszczone wystąpienie, ale przed przepływu pracy wystąpienia jest unieważnionych w pamięci. Możesz przerwać wystąpienia przepływu pracy, wywołując <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A?displayProperty=nameWithType>.  
  
 Dla tego zdarzenia zawiera nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> z obsługi zdarzeń metodę o nazwie `OnWorkflowAborted`.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#141](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#141)]
 [!code-vb[WF_Samples#141](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#141)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCompleted As EventHandler(Of WorkflowCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowCompletedEventArgs ^&gt; ^ WorkflowCompleted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCompleted : EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " Usage="member this.WorkflowCompleted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostało zakończone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> jest wywoływane po zakończeniu wystąpienia przepływu pracy, ale przed wystąpienie jest unieważnionych w pamięci.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> zdarzenie, nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowCompletedEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> i jego parametrów wyjściowych.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> z obsługi zdarzeń metodę o nazwie `OnWorkflowCompleted`.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkId=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCreated As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowCreated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCreated : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowCreated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy jest tworzone wystąpienie przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> zdarzeń po wystąpienia przepływu pracy jest całkowicie utworzony, ale przed działania są przetwarzane. Dla tego zdarzenia zawiera nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> z obsługi zdarzeń metodę o nazwie `OnWorkflowCreated`.  
  
 Ten przykładowy kod jest częścią [przykład usługi trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowIdled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowIdled As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowIdled;" />
      <MemberSignature Language="F#" Value="member this.WorkflowIdled : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowIdled : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy wchodzi w stan bezczynności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> zdarzenie, gdy wystąpienie przepływu pracy przejdzie w stan bezczynności; na przykład, gdy przepływ pracy oczekuje na <xref:System.Workflow.Activities.DelayActivity> na zakończenie działania.  
  
 Dla tego zdarzenia zawiera nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](https://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67(v=vs.100)).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> z obsługi zdarzeń metodę o nazwie `OnWorkflowIdled`.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowLoaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowLoaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowLoaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowLoaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy jest ładowany do pamięci.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> występuje, gdy usługa trwałości przywróciła wystąpienia przepływu pracy, ale aparat środowiska wykonawczego rozpoczyna się przed przepływu pracy można wykonać żadnych działań.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> zdarzenie, nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> z obsługi zdarzeń metodę o nazwie `OnWorkflowLoad`.  
  
 Ten przykładowy kod jest częścią [usługi utrwalania niestandardowe](http://go.microsoft.com/fwlink/?LinkID=157351) próbki.  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowPersisted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowPersisted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowPersisted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowPersisted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowPersisted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy stan wystąpienia przepływu pracy jest trwały.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy można trwale wielu powodów. Na przykład można wywołać hosta <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> wystąpienia przepływu pracy lub przepływ pracy aparat środowiska wykonawczego można utrwalić wystąpienia przepływu pracy, ponieważ wystąpienie jest w stanie bezczynności lub zakres atomic zostało ukończone. Jeśli usługi utrwalania znajduje się w <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> jest wywoływane przez środowisko uruchomieniowe, po stanu wystąpienia przepływu pracy są zapisywane w pamięci. Jeśli nie ma usługi utrwalania, nadal zdarzenia, ale nie został zapisany stan wystąpienia. Jeśli <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> zdarzenie występuje, ponieważ Trwa zwalnianie wystąpienia przepływu pracy, jest następuje <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zdarzeń.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> zdarzenie, nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, jak używasz <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> z obsługi zdarzeń metodę o nazwie `OnWorkflowPersisted`.  
  
 Ten przykładowy kod jest częścią [przykład usługi trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#279](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#279)]
 [!code-vb[WF_Samples#279](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#279)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowResumed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowResumed As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowResumed;" />
      <MemberSignature Language="F#" Value="member this.WorkflowResumed : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowResumed : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po wznowieniu wykonywania wystąpienia przepływu pracy od zawieszenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> zdarzeń tuż przed zaplanowano wystąpienia przepływu pracy. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> Zdarzenie jest zgłaszane, zazwyczaj z powodu jawnym wywołaniem <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType>. Aparat środowiska wykonawczego przepływów pracy można jednak tymczasowo wstrzymać wystąpienia można wykonać operacji, na przykład, aby zastosować zmianę przepływu pracy. W takim przypadku <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> zdarzenie jest zgłaszane, gdy środowisko uruchomieniowe wznawia wykonywania wystąpienia przepływu pracy po operacji.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> zdarzenie, nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano, jak używasz <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> z obsługi zdarzeń metodę o nazwie `OnWorkflowResume`.  
  
 Ten przykładowy kod jest częścią [zawieszenia i zakończyć przykładowa](http://go.microsoft.com/fwlink/?LinkId=157402).  
  
 [!code-csharp[WF_Samples#171](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#171)]
 [!code-vb[WF_Samples#171](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#171)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowStarted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowStarted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowStarted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowStarted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy została uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> zdarzeń po rozpoczęciu w planowaniu działanie główne wykonywania wystąpienia przepływu pracy. Dla tego zdarzenia zawiera nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> z obsługi zdarzeń metodę o nazwie `OnWorkflowStarted`.  
  
 Ten przykładowy kod jest częścią [przykład komunikacji hosta](http://go.microsoft.com/fwlink/?LinkId=157406).  
  
 [!code-csharp[WF_Samples#297](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets38.cs#297)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowSuspended">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowSuspended As EventHandler(Of WorkflowSuspendedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowSuspendedEventArgs ^&gt; ^ WorkflowSuspended;" />
      <MemberSignature Language="F#" Value="member this.WorkflowSuspended : EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " Usage="member this.WorkflowSuspended : System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy jest wstrzymana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy może zostać zawieszone przez hosta za pośrednictwem wywołania <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> — metoda, przez <xref:System.Workflow.ComponentModel.SuspendActivity> działania, lub niejawnie przez aparat środowiska wykonawczego przepływów pracy. Na przykład aparatu czasu wykonywania przepływu pracy tymczasowo wstrzymuje wystąpienia, jeśli ma zastosowanie dynamicznej zmiany do wystąpienia.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> zdarzenie, nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> i ciąg opisujący przyczynę wystąpienia została zawieszona.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> z obsługi zdarzeń metodę o nazwie `OnWorkflowSuspended`.  
  
 Ten przykładowy kod jest częścią [zawieszenia i zakończyć przykładowa](http://go.microsoft.com/fwlink/?LinkID=157402).  
  
 [!code-csharp[WF_Samples#170](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#170)]
 [!code-vb[WF_Samples#170](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowTerminated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowTerminated As EventHandler(Of WorkflowTerminatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowTerminatedEventArgs ^&gt; ^ WorkflowTerminated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowTerminated : EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " Usage="member this.WorkflowTerminated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostało zakończone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można przerywać działanie przepływu pracy przez hosta za pośrednictwem wywołania <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> — metoda, przez <xref:System.Workflow.ComponentModel.TerminateActivity> działania, lub przez aparat środowiska wykonawczego przepływów pracy po wystąpieniu nieobsługiwanego wyjątku. Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> zdarzeń po wystąpienia przepływu pracy zostało zakończone, ale przed umieszczeniem w pamięci.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> zdarzenie, nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> i informacje o przyczynie wystąpienie zostało zakończone w <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception%2A?displayProperty=nameWithType> właściwości.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> z obsługi zdarzeń metodę o nazwie `OnWorkflowCompleted`.  
  
 Ten przykładowy kod jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowUnloaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowUnloaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowUnloaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowUnloaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowUnloaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy jest usuwane z pamięci.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy mogą być usuwane z pamięci przez jawnym wywołaniem <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>, lub niejawnie przez aparat czasu wykonywania przepływu pracy zgodnie z jego własnej semantyki. Na przykład aparatu czasu wykonywania przepływu pracy zwalnia wystąpienia przepływu pracy, jeśli wystąpienie staje się bezczynności i środowiska uruchomieniowego <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> dodane, dla którego <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle%2A> jest `true`.  
  
 Zgłasza aparatu czasu wykonywania przepływu pracy  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zdarzenia po poprawnie utrwalona stanu wystąpienia przepływu pracy, ale przed wystąpienie jest unieważnionych w pamięci. W związku z tym <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> poprzedza zdarzeń <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zdarzeń.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zdarzenie, nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [wykorzystywanie zdarzenia](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> z obsługi zdarzeń metodę o nazwie `OnWorkflowUnload`.  
  
 Ten przykładowy kod jest częścią [przykład usługi trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>