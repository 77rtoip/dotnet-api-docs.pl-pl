<Type Name="WorkflowRuntime" FullName="System.Workflow.Runtime.WorkflowRuntime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53f0790eebeb1af07e9cfe1a269fdcf7309c5726" /><Meta Name="ms.sourcegitcommit" Value="913829d6e739689126fe74be43a8513d4181fd22" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/20/2019" /><Meta Name="ms.locfileid" Value="69629061" /></Metadata><TypeSignature Language="C#" Value="public class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WorkflowRuntime extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowRuntime" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowRuntime&#xA;Implements IDisposable, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="F#" Value="type WorkflowRuntime = class&#xA;    interface IServiceProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje środowisko wykonywania konfigurowalne dostarczone przez aparat czasu wykonywania przepływu pracy dla przepływów pracy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime>udostępnia funkcje wymagane przez aplikację hosta i usługi do konfigurowania i kontrolowania aparatu czasu wykonywania przepływu pracy oraz powiadamiania o zmianach w aparacie czasu wykonywania przepływu pracy i dowolnym wystąpieniu przepływu pracy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Zawiera przykłady użycia <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> konstruktora <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>oraz metod, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>i <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> . Kod ten pokazuje również zalecany sposób tworzenia <xref:System.Workflow.Runtime.WorkflowInstance> obiektu na hoście przepływu pracy <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> przy użyciu metody. Przedstawiono w nim również sposób ustawiania obsługi zdarzeń dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>zdarzeń, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled>i <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> .  
  
 Ten przykład kodu jest częścią anulowania przykładowego [przepływu pracy](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime> Zostanie zainicjowany z domyślnymi wartościami właściwości i zawiera domyślne usługi podstawowe. Aby dodatkowo skonfigurować aparat czasu wykonywania przepływu pracy, można dodawać i usuwać usługi za pomocą <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> i <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>i można ustawić <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>. Po skonfigurowaniu programu <xref:System.Workflow.Runtime.WorkflowRuntime> Wywołaj <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> polecenie Uruchom aparat czasu wykonywania przepływu pracy i jego usługi.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Workflow.Runtime.WorkflowRuntime> klasy.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>|Element|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>|`false`|  
  
 Domyślne usługi podstawowe to <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> i. <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak można użyć <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Zawiera przykład sposobu użycia <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> konstruktora do utworzenia wystąpienia <xref:System.Workflow.Runtime.WorkflowRuntime> a i uzyskiwania dostępu do jego metod i zdarzeń.  
  
 Ten przykład kodu jest częścią anulowania przykładowego [przepływu pracy](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (string configSectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configSectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configSectionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::String ^ configSectionName);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : string -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime configSectionName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configSectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configSectionName">Nazwa prawidłowej <see langword="workflowSettings" /> sekcji w pliku konfiguracyjnym aplikacji.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy za pomocą określonej sekcji w pliku konfiguracji aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zostanie zainicjowany zgodnie z ustawieniami w sekcji określonej przez `configSectionName` w pliku konfiguracyjnym aplikacji. <xref:System.Workflow.Runtime.WorkflowRuntime> `configSectionName`musi odpowiadać prawidłowej `workflowSettings` sekcji pliku konfiguracji.  
  
 Gdy aparat czasu wykonywania przepływu pracy jest skonfigurowany przy użyciu pliku konfiguracyjnego aplikacji, ładuje i tworzy wystąpienia klas typów wymienionych w `Services` sekcji pliku konfiguracji. Gdy aparat czasu wykonywania przepływu pracy konstruuje te klasy, szuka konstruktorów klas o następujących sygnaturach w następującej kolejności:  
  
1.  Usługa (środowisko uruchomieniowe WorkflowRuntime, parametry NameValueCollection)  
  
2.  Usługa (środowisko uruchomieniowe WorkflowRuntime)  
  
3.  Usługa (parametry NameValueCollection)  
  
4.  Usługa ()  
  
 Wszystkie klasy usług, które są ładowane z pliku konfiguracji, muszą implementować co najmniej jeden z tych sygnatur konstruktorów.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="configSectionName" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Nie można <see langword="workflowSettings" /> znaleźć prawidłowej sekcji w pliku konfiguracyjnym aplikacji.</exception>
        <exception cref="T:System.InvalidOperationException">Istnieje <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> już dla tej domeny aplikacji.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As WorkflowRuntimeSection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::Workflow::Runtime::Configuration::WorkflowRuntimeSection ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : System.Workflow.Runtime.Configuration.WorkflowRuntimeSection -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime settings" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
      </Parameters>
      <Docs>
        <param name="settings">A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy za pomocą ustawień określonych w określonym <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor udostępnia mechanizm konfigurowania aparatu czasu wykonywania przepływu pracy przy użyciu jednego wywołania metody dla hostów, które nie używają pliku konfiguracji aplikacji. Istnieje wiele powodów, dla których nie należy używać pliku konfiguracji aplikacji. Host można uruchomić w środowisku, które nie zezwala na używanie plików konfiguracji; na przykład w zaufanych środowiskach, które nie zezwalają na odczytywanie z pliku konfiguracyjnego aplikacji ze względów bezpieczeństwa. Ponadto host może korzystać z własnościowego mechanizmu konfiguracji; na przykład host może przechowywać ustawienia konfiguracji aparatu czasu wykonywania przepływu pracy w bazie danych SQL.  
  
 Aparat czasu wykonywania przepływu pracy ładuje i tworzy wystąpienia klas typów zawartych w <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services%2A?displayProperty=nameWithType>. Gdy aparat czasu wykonywania przepływu pracy konstruuje te klasy, szuka konstruktorów klas o następujących sygnaturach w następującej kolejności:  
  
1.  Usługa (środowisko uruchomieniowe WorkflowRuntime, parametry NameValueCollection)  
  
2.  Usługa (środowisko uruchomieniowe WorkflowRuntime)  
  
3.  Usługa (parametry NameValueCollection)  
  
4.  Usługa ()  
  
 Wszystkie klasy usług, które są określone `settings` w, muszą implementować co najmniej jeden z tych sygnatur konstruktorów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="settings" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Istnieje <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> już dla tej domeny aplikacji.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.AddService : obj -&gt; unit" Usage="workflowRuntime.AddService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Obiekt, który reprezentuje usługę do dodania.</param>
        <summary>Dodaje określoną usługę do aparatu czasu wykonywania przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat czasu wykonywania przepływu pracy można skonfigurować przez dodanie usług podstawowych. Podstawowe usługi to te, które pochodzą z jednej z następujących klas podstawowych usługi <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> : klasy <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> , klasy, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy i <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  Usługi podstawowe można dodawać tylko wtedy, gdy aparat czasu wykonywania przepływu pracy nie jest uruchomiony. to oznacza, gdy <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jest `false`. <xref:System.Workflow.Runtime.WorkflowRuntime> Można również użyć jako kontenera magazynu dla innych usług, które mogą być używane przez inne przepływy pracy lub przez aplikacje działające na hoście. Jeśli dodasz nierdzeniową usługę, która pochodzi od <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy po uruchomieniu aparatu czasu wykonywania przepływu pracy, program <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> wywoła <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> metodę zaimplementowaną przez tę usługę.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>wymusza ograniczenie, że nie można dodać <xref:System.Type> <xref:System.Workflow.Runtime.WorkflowRuntime>do. żadnych dwóch usług tego samego. Można jednak dodać wiele usług, które pochodzą z tej samej klasy bazowej.  Może istnieć tylko jedna usługa pochodna dla każdej z następujących klas podstawowych usług w <xref:System.Workflow.Runtime.WorkflowRuntime> <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> : Klasa, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> Klasa i <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> Klasa.  Jeśli dodasz wiele usług pochodnych z jednej z tych klas, na przykład dwa usługi trwałości, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> program <xref:System.InvalidOperationException>wygeneruje.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. W tym przykładzie przedstawiono sposób użycia <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> metody w celu <xref:System.Workflow.Activities.ExternalDataExchangeService> dodania i <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> do aparatu czasu wykonywania przepływu pracy.  
  
 Ten przykład kodu jest częścią anulowania przykładu [przepływu pracy](https://go.microsoft.com/fwlink/?LinkId=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="service" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="service" />Program jest już zarejestrowany w aparacie czasu wykonywania przepływu pracy.  
  
—lub— 
 <paramref name="service" />jest usługą podstawową i aparat czasu wykonywania przepływu pracy jest już uruchomiony (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> is <see langword="true" />).</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateWorkflow">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli aparat czasu wykonywania przepływu pracy nie został uruchomiony, metody są <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> wywoływane. <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> Listę <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> możliwych wyjątków można znaleźć w temacie. Po utworzeniu wystąpienia przepływu pracy należy wywołać <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A?displayProperty=nameWithType> <xref:System.Workflow.Runtime.WorkflowInstance> obiekt zwrócony przez <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> metodę, aby rozpocząć jego wykonywanie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="workflowType"><see cref="T:System.Type" /> Przepływ pracy, który ma zostać utworzony.</param>
        <summary>Tworzy nowe wystąpienie przepływu pracy przy użyciu określonego przepływu pracy <see cref="T:System.Type" />.</summary>
        <returns>Utworzone wystąpienie przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed utworzeniem <xref:System.Workflow.Runtime.WorkflowInstance> zostanie wykonane sprawdzanie poprawności. Jeśli wystąpią błędy walidacji, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zostanie zgłoszony. Jest to dobre rozwiązanie w przypadku prostych scenariuszy, ale w środowisku serwera ponowne sprawdzanie poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne.  
  
 Aby uzyskać więcej informacji na temat wyłączania walidacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje zalecaną metodę tworzenia <xref:System.Workflow.Runtime.WorkflowInstance> obiektu na hoście przepływu pracy <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> przy użyciu metody.  
  
 Ten przykład kodu jest częścią anulowania przykładowego [przepływu pracy](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowType" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowDefinitionReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader"><see cref="T:System.Xml.XmlReader" /> Zawierający definicję przepływu pracy.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonego <see cref="T:System.Xml.XmlReader" />elementu.</summary>
        <returns>Utworzone wystąpienie przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy jest tworzone na podstawie pliku definicji przepływu pracy XAML, <xref:System.Xml.XmlReader>do którego odwołuje się.  
  
 Przed utworzeniem <xref:System.Workflow.Runtime.WorkflowInstance> zostanie wykonane sprawdzanie poprawności. Jeśli wystąpią błędy walidacji, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zostanie zgłoszony. Jest to dobre rozwiązanie w przypadku prostych scenariuszy, ale w środowisku serwera ponowne sprawdzanie poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne.  
  
 Aby uzyskać więcej informacji na temat wyłączania walidacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób tworzenia przepływu pracy przy użyciu definicji przepływu pracy opartej na języku XAML.  
  
```  
static void Main(string[] args)  
{  
    using (WorkflowRuntime workflowRuntime = new WorkflowRuntime())  
    {  
        AutoResetEvent waitHandle = new AutoResetEvent(false);  
        workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e)  
        {  
            waitHandle.Set();  
        };  
        workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e)  
        {  
            Console.WriteLine(e.Exception.Message);  
            waitHandle.Set();  
        };  
  
        TypeProvider typeProvider = new TypeProvider(null);  
        // Add referenced assemblies, if needed  
        // typeProvider.AddAssembly(...);  
        workflowRuntime.AddService(typeProvider);  
  
        using (XmlReader reader = XmlReader.Create("Workflow1.xoml"))  
        {  
            WorkflowInstance instance = workflowRuntime.CreateWorkflow(reader);  
            instance.Start();  
        }  
  
        waitHandle.WaitOne();  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowDefinitionReader" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowType"><see cref="T:System.Type" /> Przepływ pracy, który ma zostać utworzony.</param>
        <param name="namedArgumentValues">Obiekt <see cref="T:System.Collections.Generic.Dictionary`2" /> z kluczami, który reprezentuje argumenty dla przepływu pracy.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonego przepływu pracy <see cref="T:System.Type" /> i argumentów przepływu pracy zawartych w określonym. <see cref="T:System.Collections.Generic.Dictionary`2" /></summary>
        <returns>Utworzone wystąpienie przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed utworzeniem <xref:System.Workflow.Runtime.WorkflowInstance> zostanie wykonane sprawdzanie poprawności. Jeśli wystąpią błędy walidacji, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zostanie zgłoszony. Jest to dobre rozwiązanie w przypadku prostych scenariuszy, ale w środowisku serwera ponowne sprawdzanie poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne.  
  
 Aby uzyskać więcej informacji na temat wyłączania walidacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przykład przekazywania parametrów do `CreateWorkflow`programu można znaleźć w temacie [przepływ pracy z parametrami Samples](https://go.microsoft.com/fwlink/?LinkId=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowType" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowType"><see cref="T:System.Type" /> Przepływ pracy, który ma zostać utworzony.</param>
        <param name="namedArgumentValues">Obiekt <see cref="T:System.Collections.Generic.Dictionary`2" /> z kluczem, który reprezentuje argumenty dla przepływu pracy.</param>
        <param name="instanceId"><see cref="T:System.Guid" /> Do utworzenia<see cref="T:System.Workflow.Runtime.WorkflowInstance" /> .</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych parametrów.</summary>
        <returns>Utworzone wystąpienie przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed utworzeniem <xref:System.Workflow.Runtime.WorkflowInstance> zostanie wykonane sprawdzanie poprawności. Jeśli wystąpią błędy walidacji, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zostanie zgłoszony. Jest to dobre rozwiązanie w przypadku prostych scenariuszy, ale w środowisku serwera ponowne sprawdzanie poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne.  
  
 Aby uzyskać więcej informacji na temat wyłączania walidacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przepływ pracy `instanceId` dla wszystkich uruchomionych przepływów pracy <xref:System.Workflow.Runtime.WorkflowRuntime> załadowanych przez program musi być unikatowy. Jeśli zostanie przekazany `instanceId` do tworzenia przepływu pracy, a uruchomiony przepływ pracy już używa tego `instanceId`elementu <xref:System.InvalidOperationException> , jest zgłaszany.  
  
 Przykład przekazywania parametrów do `CreateWorkflow`programu można znaleźć w temacie [przepływ pracy z parametrami Samples](https://go.microsoft.com/fwlink/?LinkID=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowType" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader"><see cref="T:System.Xml.XmlReader" /> Zawierający definicję przepływu pracy.</param>
        <param name="rulesReader">A <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">Obiekt <see cref="T:System.Collections.Generic.Dictionary`2" /> z kluczem, który reprezentuje argumenty dla przepływu pracy.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych <see cref="T:System.Xml.XmlReader" /> obiektów i argumentów zawartych w określonym <see cref="T:System.Collections.Generic.Dictionary`2" />elemencie.</summary>
        <returns>Utworzone wystąpienie przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy jest tworzone na podstawie definicji przepływu pracy, do <xref:System.Xml.XmlReader> której odwołuje się i `namedArgumentValues`argumenty dostarczone przez.  
  
 Przed utworzeniem <xref:System.Workflow.Runtime.WorkflowInstance> zostanie wykonane sprawdzanie poprawności. Jeśli wystąpią błędy walidacji, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zostanie zgłoszony. Jest to dobre rozwiązanie w przypadku prostych scenariuszy, ale w środowisku serwera ponowne sprawdzanie poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne.  
  
 Aby uzyskać więcej informacji na temat wyłączania walidacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przykład przekazywania parametrów do `CreateWorkflow`programu można znaleźć w temacie [przepływ pracy z parametrami Samples](https://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Aby zapoznać się z przykładem używania reguł zdefiniowanych w kodzie XML, zobacz [jeślilub with Rules Sample](https://go.microsoft.com/fwlink/?LinkId=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowDefinitionReader" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader"><see cref="T:System.Xml.XmlReader" /> Zawierający definicję przepływu pracy.</param>
        <param name="rulesReader">A <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">Obiekt <see cref="T:System.Collections.Generic.Dictionary`2" /> z kluczem, który reprezentuje argumenty dla przepływu pracy.</param>
        <param name="instanceId"><see cref="T:System.Guid" /> Do utworzenia<see cref="T:System.Workflow.Runtime.WorkflowInstance" /> .</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych parametrów.</summary>
        <returns>Utworzone wystąpienie przepływu pracy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed utworzeniem <xref:System.Workflow.Runtime.WorkflowInstance> zostanie wykonane sprawdzanie poprawności. Jeśli wystąpią błędy walidacji, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zostanie zgłoszony. Jest to dobre rozwiązanie w przypadku prostych scenariuszy, ale w środowisku serwera ponowne sprawdzanie poprawności przepływu pracy dla każdej aktywacji może być niepotrzebne.  
  
 Aby uzyskać więcej informacji na temat wyłączania walidacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przepływ pracy `instanceId` dla wszystkich uruchomionych przepływów pracy <xref:System.Workflow.Runtime.WorkflowRuntime> załadowanych przez program musi być unikatowy. Jeśli zostanie przekazany `instanceId` do tworzenia przepływu pracy, a uruchomiony przepływ pracy już używa tego `instanceId`elementu <xref:System.InvalidOperationException> , jest zgłaszany.  
  
 Przykład przekazywania parametrów do `CreateWorkflow`programu można znaleźć w temacie [przepływ pracy z parametrami Samples](https://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Aby zapoznać się z przykładem używania reguł zdefiniowanych w kodzie XML, zobacz [jeślilub with Rules Sample](https://go.microsoft.com/fwlink/?LinkID=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowType" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="workflowRuntime.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby <xref:System.Workflow.Runtime.WorkflowRuntime> bezpiecznie wyłączyć, należy wywołać <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> tylko po wywołaniu <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. Wynika to z faktu <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> , że wywołanie metody <xref:System.Workflow.Runtime.WorkflowRuntime> powoduje, że jest ona niezdatna do użytku. <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>Zwalnia zasoby używane przez środowisko uruchomieniowe przez zamknięcie otwartych dojść do plików, połączeń z bazami danych itd., ale nie zwalnia wystąpień przepływów pracy, zatrzymuje usługi lub wykonuje dowolne inne działania <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> .  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>należy wywołać tylko wtedy, gdy aplikacja hosta musi zwolnić zasoby używane przez <xref:System.Workflow.Runtime.WorkflowRuntime> program przed ich automatycznym zwolnieniem przez moduł wyrzucania elementów bezużytecznych. Aby uzyskać ogólne informacje <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>na temat, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementowanie metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak wywołać <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> <xref:System.Workflow.Runtime.WorkflowRuntime> obiekt. W tym przykładzie <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> Metoda jest wywoływana z programu obsługi zdarzeń FormClosing dla głównej formy aplikacji. daje to gwarancję, że obiekty utworzone przez środowisko uruchomieniowe są prawidłowo czyszczone po zamknięciu aplikacji. Ten przykład pochodzi z [przykładu aplikacji Speech](https://go.microsoft.com/fwlink/?LinkId=157405).  
  
 [!code-csharp[WF_Samples#108](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#108)]
 [!code-vb[WF_Samples#108](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;object&gt; GetAllServices (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;object&gt; GetAllServices(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices (serviceType As Type) As ReadOnlyCollection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Object ^&gt; ^ GetAllServices(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : Type -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;obj&gt;" Usage="workflowRuntime.GetAllServices serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><see cref="T:System.Type" /> Te usługi muszą zostać zaimplementowane do zwrócenia.</param>
        <summary>Pobiera wszystkie usługi, które są dodawane do aparatu czasu wykonywania przepływu pracy, które implementują lub pochodzą od określonego <see cref="T:System.Type" />.</summary>
        <returns>Usługi, które implementują lub pochodzą od <see cref="T:System.Type" />określonego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość pusta <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> wskazuje, że żadne usługi implementujące lub pochodzące od określonych <xref:System.Type> nie zostały dodane do aparatu czasu wykonywania przepływu pracy.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak pobrać wszystkie usługi danego typu z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu.  
  
 [!code-csharp[WF_Samples#19](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#19)]
 [!code-vb[WF_Samples#19](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetAllServices&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetAllServices&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices(Of T) () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ GetAllServices();" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="workflowRuntime.GetAllServices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ usługi.</typeparam>
        <summary>Pobiera wszystkie usługi, które są dodawane do aparatu czasu wykonywania przepływu pracy, które implementują lub dziedziczą z określonego typu ogólnego.</summary>
        <returns>Usługi, które implementują lub dziedziczą z określonego typu ogólnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość pusta <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> wskazuje, że żadne usługi nie zostały dodane do aparatu czasu wykonywania przepływu pracy implementującego lub pochodnego określonego typu ogólnego.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak pobrać wszystkie usługi danego typu z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu.  
  
 [!code-csharp[WF_Samples#6](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#6)]
 [!code-vb[WF_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedWorkflows">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedWorkflows () As ReadOnlyCollection(Of WorkflowInstance)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowInstance ^&gt; ^ GetLoadedWorkflows();" />
      <MemberSignature Language="F#" Value="member this.GetLoadedWorkflows : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;" Usage="workflowRuntime.GetLoadedWorkflows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję zawierającą wszystkie wystąpienia przepływu pracy aktualnie załadowane w pamięci.</summary>
        <returns><see cref="T:System.Workflow.Runtime.WorkflowInstance" /> Obiekt dla każdego wystąpienia przepływu pracy aktualnie załadowany w pamięci.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że w <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>przeciwieństwie do metody, ta metoda <xref:System.InvalidOperationException> nie generuje, jeśli środowisko uruchomieniowe nie zostało uruchomione.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób pobierania kolekcji załadowanych przepływów pracy z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu.  
  
 [!code-csharp[WF_Samples#18](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#18)]
 [!code-vb[WF_Samples#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="workflowRuntime.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><see cref="T:System.Type" /> Usługa do pobrania.</param>
        <summary>Pobiera usługę określoną <see cref="T:System.Type" /> z aparatu czasu wykonywania przepływu pracy.</summary>
        <returns>Określona <see cref="T:System.Type" />usługa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A>zgłasza, że istnieje więcej niż jedna usługa dla danego elementu <xref:System.Type>. <xref:System.InvalidOperationException> W związku z tym należy użyć jednej z przeciążonych metod <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> , jeśli istnieje możliwość, że w .jestdostępnychwieleusługokreślonegotypu.<xref:System.Workflow.Runtime.WorkflowRuntime> Na przykład aparat czasu wykonywania przepływu pracy może mieć wiele usług śledzenia. Jeśli zażądasz usługi śledzenia przez określenie <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy bazowej, istnieje możliwość, że zostanie zgłoszony wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Jest już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Znaleziono więcej niż jedną usługę typu <paramref name="serviceType" /> .</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetService&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetService&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'T" Usage="workflowRuntime.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ usługi.</typeparam>
        <summary>Pobiera usługę określonego typu ogólnego z aparatu czasu wykonywania przepływu pracy.</summary>
        <returns>Pojedyncza usługa określonego typu ogólnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A>zgłasza, <xref:System.InvalidOperationException> że istnieje więcej niż jedna usługa dla określonego typu ogólnego. W związku z tym należy użyć jednej z przeciążonych metod <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> , jeśli istnieje możliwość, że w. <xref:System.Workflow.Runtime.WorkflowRuntime> Na przykład aparat czasu wykonywania przepływu pracy może mieć wiele usług śledzenia. Jeśli zażądasz usługi śledzenia przez określenie <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy bazowej, istnieje możliwość, że zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób pobierania pojedynczej usługi z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu; w tym przypadku usługa typu. <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService> Ten przykład pochodzi z przykładu [wątkowości przepływu pracy](https://go.microsoft.com/fwlink/?LinkId=157350).  
  
 [!code-csharp[WF_Samples#28](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#28)]
 [!code-vb[WF_Samples#28](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Znaleziono więcej niż jedną usługę typu ogólnego.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance GetWorkflow (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance GetWorkflow(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflow (instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ GetWorkflow(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.GetWorkflow : Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.GetWorkflow instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId"><see cref="T:System.Guid" /> Wystąpienia przepływu pracy.</param>
        <summary>Pobiera wystąpienie przepływu pracy, które ma określony <see cref="T:System.Guid" />.</summary>
        <returns><see cref="T:System.Workflow.Runtime.WorkflowInstance" /> Ma określony<see cref="T:System.Guid" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `instanceId` Określa wystąpienie przepływu pracy, które nie znajduje się obecnie w pamięci, wystąpienie przepływu pracy jest ładowane do pamięci i zaplanowane do wykonania. Na przykład po przerwaniu wystąpienia przepływu pracy można wywołać <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> , aby załadować wystąpienie przepływu pracy z powrotem do pamięci. W takim przypadku ostatni trwały stan wystąpienia przepływu pracy jest ładowany do pamięci przez usługę trwałości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje `ReloadWorkflow` metodę, która <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> wywołuje metodę. Metoda jest częścią większej klasy, która `Runtime` ma właściwość do uzyskiwania dostępu do wszystkich metod, właściwości i zdarzeń <xref:System.Workflow.Runtime.WorkflowRuntime> klasy. `ReloadWorkflow`  
  
 Ten przykład kodu jest częścią przykładu [niestandardowej usługi trwałości](https://go.microsoft.com/fwlink/?LinkId=157351) .  
  
> [!NOTE]
>  W przykładzie wywołanie <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> jest nadmiarowe, ponieważ <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> metody i <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> używają tej samej wewnętrznej metody pomocnika do ładowania wystąpienia przepływu pracy do pamięci.  
  
 [!code-csharp[WF_Samples#265](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#265)]
 [!code-vb[WF_Samples#265](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#265)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Środowisko uruchomieniowe przepływu pracy nie zostało uruchomione.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStarted : bool" Usage="System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy aparat czasu wykonywania przepływu pracy został uruchomiony.</summary>
        <value><see langword="true" />Jeśli aparat czasu wykonywania przepływu pracy został uruchomiony; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>wskazuje, że usługi aparatu czasu wykonywania przepływu pracy są uruchomione. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>jest `false` do momentu wywołania <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>hosta. Pozostanie `true` do momentu wywołania <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>hosta.  
  
> [!NOTE]
>  Nie można dodać usług podstawowych do aparatu czasu wykonywania przepływu pracy, gdy jest on uruchomiony. Podstawowe usługi to usługi, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> , klasy, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy i <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jak uzyskać dostęp do właściwości <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu. W tym przykładzie, jeśli środowisko uruchomieniowe zostało uruchomione, zostanie wydrukowany komunikat w konsoli programu.  
  
 [!code-csharp[WF_Samples#21](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#21)]
 [!code-vb[WF_Samples#21](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę skojarzoną z <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <value>Nazwa skojarzona z tym <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />elementem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można ustawić <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> , gdy aparat czasu wykonywania przepływu pracy jest uruchomiony (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> is `true`).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> jak uzyskać dostęp do właściwości <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu. W tym przykładzie nazwa środowiska uruchomieniowego jest ustawiona na "główne środowisko uruchomieniowe".  
  
 [!code-csharp[WF_Samples#20](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#20)]
 [!code-vb[WF_Samples#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Podjęto próbę <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> ustawienia dla <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> elementu, który został usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Próba ustawienia <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> , gdy działa aparat czasu wykonywania przepływu pracy.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.RemoveService : obj -&gt; unit" Usage="workflowRuntime.RemoveService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Obiekt, który reprezentuje usługę do usunięcia.</param>
        <summary>Usuwa określoną usługę z aparatu czasu wykonywania przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można usunąć usługi podstawowej, gdy działa aparat czasu wykonywania przepływu pracy (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> is `true`). Podstawowe usługi to usługi, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> , klasy, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy lub <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  Jeśli `service` <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> pochodzi `service`z klasy, wywołuje<xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> metodę implementowaną przez. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> zostanie dodany i usunięty <xref:System.Workflow.Runtime.WorkflowRuntime>z.  
  
 [!code-csharp[WF_Samples#16](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#16)]
 [!code-vb[WF_Samples#16](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="service" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Jest już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Uruchomiono aparat czasu wykonywania przepływu pracy (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> is <see langword="true" />) i <paramref name="service" /> jest to usługa podstawowa.  
  
—lub— 
 <paramref name="service" />nie jest zarejestrowany w aparacie czasu wykonywania przepływu pracy.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesExceptionNotHandled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />
      <MemberSignature Language="VB.NET" Value="Public Event ServicesExceptionNotHandled As EventHandler(Of ServicesExceptionNotHandledEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::ServicesExceptionNotHandledEventArgs ^&gt; ^ ServicesExceptionNotHandled;" />
      <MemberSignature Language="F#" Value="member this.ServicesExceptionNotHandled : EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " Usage="member this.ServicesExceptionNotHandled : System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy usługa, która pochodzi z <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> klasy wywołuje. <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usługa, która jest pochodną klasy <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> , może <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> wywołać metodę <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> w celu informowania subskrybentów o zdarzeniu, że wyjątek, którego nie może obsłużyć, wystąpił podczas jego wykonywania. Możesz subskrybować to zdarzenie, aby zaimplementować mechanizm odzyskiwania.  
  
 To zdarzenie jest zgłaszane, gdy wystąpienie przepływu pracy nie zostało jeszcze utworzone przez aparat czasu wykonywania przepływu pracy i wystąpił wyjątek. W tym scenariuszu jedynym sposobem na poinformowanie aplikacji hosta, że wystąpił wyjątek, jest podnoszenie tego zdarzenia. Jednak aparat czasu wykonywania przepływu pracy nie wywołuje tego bezpośrednio. W zamian aparat czasu wykonywania przepływu pracy dostarcza wyjątek do wystąpienia przepływu pracy lub, jeśli nie ma żadnego wystąpienia, zwraca z powrotem do obiektu wywołującego, co w tym przypadku jest w rzeczywistości usługą, która uruchamia to zdarzenie. W przypadku tworzenia własnej usługi trwałości lub harmonogramu należy samodzielnie zaimplementować to zdarzenie za pomocą metody podstawowej <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> .  
  
 <xref:System.Workflow.Runtime.WorkflowEventArgs> <xref:System.Guid> <xref:System.Exception> W przypadku <xref:System.Workflow.Runtime.WorkflowRuntime> zdarzenia nadawca zawiera i zawiera wystąpienie przepływu pracy, które korzysta z usługi i którego nie można było obsłużyć. <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled>  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> się z programem obsługi zdarzeń, metodą o `OnExceptionNotHandled`nazwie.  
  
 Ten przykład kodu jest częścią [niestandardowego przykładu usługi trwałości](https://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Started" />
      <MemberSignature Language="VB.NET" Value="Public Event Started As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Started;" />
      <MemberSignature Language="F#" Value="member this.Started : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Started : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po uruchomieniu aparatu czasu wykonywania przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zgłasza zdarzenie po zweryfikowaniu podstawowej konfiguracji usługi w <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> aparacie czasu wykonywania przepływu pracy, wywołana metoda zaimplementowana przez <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> każdą z jej usług, która pochodzi od klasy, <xref:System.Workflow.Runtime.WorkflowRuntime.Started> <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> i ma <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> ustawioną `true`wartość. Nie ma żadnej gwarancji dotyczącej kolejności, w której usługi pochodne od <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy są uruchamiane przez aparat czasu wykonywania przepływu pracy, a niektóre z tych usług aparatu czasu wykonywania przepływu pracy mogą zależeć od funkcjonalności dostarczonych przez inne usługi do Ukończ zadania uruchamiania. Usługi aparatu czasu wykonywania przepływu pracy mogą przesłonić <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=nameWithType> metodę, aby wykonać wszystkie końcowe zadania uruchamiania, które wymagają obsługi innych usług aparatu czasu wykonywania przepływu pracy w <xref:System.Workflow.Runtime.WorkflowRuntime.Started> przypadku zgłoszenia zdarzenia.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 W poniższym przykładzie dodano procedurę obsługi zdarzeń do <xref:System.Workflow.Runtime.WorkflowRuntime.Started> zdarzenia. <xref:System.Workflow.Runtime.WorkflowRuntime> W tym przykładzie procedura obsługi jest metodą anonimową, która drukuje prosty komunikat do konsoli.  
  
 [!code-csharp[WF_Samples#15](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#15)]
 [!code-vb[WF_Samples#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartRuntime">
      <MemberSignature Language="C#" Value="public void StartRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartRuntime();" />
      <MemberSignature Language="F#" Value="member this.StartRuntime : unit -&gt; unit" Usage="workflowRuntime.StartRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia aparat czasu wykonywania przepływu pracy i usługi aparatu czasu wykonywania przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda sprawdza, czy istnieje prawidłowy zestaw podstawowych usług, a następnie uruchamia wszystkie usługi pochodne od <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy.  Musi istnieć jeden i tylko jedna z następujących podstawowych usług: usługa przepływu pracy `CommitWorkBatch` pochodna <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> z klasy podstawowej i usługa <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> harmonogramu pochodząca od klasy podstawowej.  Jeśli brakuje jednej lub obu tych podstawowych usług, aparat czasu wykonywania przepływu pracy dostarcza odpowiednią usługę domyślną: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> dla usługi przepływu pracy `CommitWorkBatch` i <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> usługi Scheduler. Usługa trwałości jest opcjonalna, ale może istnieć co najwyżej jedna usługa trwałości. Po zweryfikowaniu konfiguracji usługi program <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> wywołuje <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> wszystkie usługi pochodzące z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy.  Na koniec aparat czasu wykonywania przepływu pracy ustawia <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> i <xref:System.Workflow.Runtime.WorkflowRuntime.Started> wywołuje zdarzenie.  
  
 Po uruchomieniu aparatu czasu wykonywania przepływu pracy nie można dodawać ani usuwać usług podstawowych. Podstawowe usługi to usługi, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> , klasy, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy lub <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  W przypadku wywołania <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> aparatu czasu wykonywania przepływu pracy nie jest wykonywana żadna akcja.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> po utworzeniu wystąpienia<xref:System.Workflow.Runtime.WorkflowRuntime> i po nim wywołuje, aby dodać usługi do środowiska uruchomieniowego. <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> Wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> także przed jakimkolwiek innym przetwarzaniem.  
  
 Ten przykład kodu jest częścią anulowania przykładowego [przepływu pracy](https://go.microsoft.com/fwlink/?LinkId=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">W tym <see langword="CommitWorkBatch" /> <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />jest zarejestrowana więcej niż jedna usługa przepływu pracy usługi.  
  
—lub— 
W tym <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />miejscu jest zarejestrowana więcej niż jedna usługa harmonogramu.  
  
—lub— 
W tym <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />miejscu jest zarejestrowana więcej niż jedna usługa trwałości.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />
      <MemberSignature Language="VB.NET" Value="Public Event Stopped As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Stopped;" />
      <MemberSignature Language="F#" Value="member this.Stopped : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Stopped : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy aparat czasu wykonywania przepływu pracy zostanie zatrzymany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołuje zdarzenie po wywołaniu metody zaimplementowane przez <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> każdą z jej usług, która pochodzi od klasy. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>  Nie ma żadnej gwarancji dotyczącej kolejności, w której usługi aparatu czasu wykonywania przepływu pracy są zatrzymane, a niektóre z tych usług mogą wymagać zachowania pewnych funkcji, które są używane przez inne usługi do momentu ich zatrzymania. Takie usługi mogą przesłonić <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A?displayProperty=nameWithType> metodę w celu wykonania wszelkich pozostałych logiki zamykania, <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> gdy zdarzenie zostanie zgłoszone.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 W poniższym przykładzie dodano procedurę obsługi zdarzeń do <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> zdarzenia. <xref:System.Workflow.Runtime.WorkflowRuntime> W tym przykładzie procedura obsługi jest metodą anonimową, która drukuje prosty komunikat do konsoli.  
  
 [!code-csharp[WF_Samples#14](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#14)]
 [!code-vb[WF_Samples#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRuntime">
      <MemberSignature Language="C#" Value="public void StopRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopRuntime();" />
      <MemberSignature Language="F#" Value="member this.StopRuntime : unit -&gt; unit" Usage="workflowRuntime.StopRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wyłącza aparat czasu wykonywania przepływu pracy i usługi czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powoduje, że aparat czasu wykonywania przepływu pracy zwalnia wszystkie wystąpienia przepływu pracy, zatrzymuje wszystkie usługi <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> , które pochodzą z klasy, ustawia <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> jako `false`i zgłasza zdarzenie.  
  
 Aby wyłączyć <xref:System.Workflow.Runtime.WorkflowRuntime> bezpieczne połączenie <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> przed wywołaniem <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> metodę.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>jest wywoływana po zakończeniu wszystkich innych operacji przetwarzania skojarzonych z środowiskiem uruchomieniowym przez hosta.  
  
 Ten przykład kodu jest częścią anulowania przykładowego [przepływu pracy](https://go.microsoft.com/fwlink/?LinkId=157346) .  
  
 [!code-csharp[WF_Samples#259](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#259)]
 [!code-vb[WF_Samples#259](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#259)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Jest już usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowAborted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowAborted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowAborted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowAborted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowAborted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostanie przerwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>występuje po wyczyszczeniu wszystkich oczekujących prac dla wystąpienia przepływu pracy, ale przed unieważnieniem wystąpienia przepływu pracy w pamięci. Możesz przerwać wystąpienie przepływu pracy, wywołując <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A?displayProperty=nameWithType>element.  
  
 Dla tego zdarzenia nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowAborted`.  
  
 Ten przykład kodu jest częścią anulowania przykładowego [przepływu pracy](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#141](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#141)]
 [!code-vb[WF_Samples#141](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#141)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCompleted As EventHandler(Of WorkflowCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowCompletedEventArgs ^&gt; ^ WorkflowCompleted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCompleted : EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " Usage="member this.WorkflowCompleted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zakończeniu wystąpienia przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>jest uruchamiany po zakończeniu wystąpienia przepływu pracy, ale zanim wystąpienie zostanie unieważnione w pamięci.  
  
 Dla zdarzenia nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> zawiera i <xref:System.Workflow.Runtime.WorkflowCompletedEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> parametry i. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowCompleted`.  
  
 Ten przykład kodu jest częścią anulowania przykładowego [przepływu pracy](https://go.microsoft.com/fwlink/?LinkId=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCreated As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowCreated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCreated : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowCreated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po utworzeniu wystąpienia przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat czasu wykonywania przepływu pracy wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> zdarzenie po całkowitym skonstruowaniu wystąpienia przepływu pracy, ale przed przetworzeniem działań. Dla tego zdarzenia nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowCreated`.  
  
 Ten przykład kodu jest częścią [niestandardowego przykładu usługi trwałości](https://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowIdled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowIdled As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowIdled;" />
      <MemberSignature Language="F#" Value="member this.WorkflowIdled : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowIdled : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy przejdzie do stanu bezczynności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat czasu wykonywania przepływu pracy wywołuje zdarzenie, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> gdy wystąpienie przepływu pracy przejdzie do stanu bezczynności, na przykład gdy przepływ pracy oczekuje <xref:System.Workflow.Activities.DelayActivity> na ukończenie działania.  
  
 Dla tego zdarzenia nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowIdled`.  
  
 Ten przykład kodu jest częścią anulowania przykładowego [przepływu pracy](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowLoaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowLoaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowLoaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowLoaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostanie załadowane do pamięci.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>występuje po przywróceniu wystąpienia przepływu pracy przez usługę trwałości, ale przed rozpoczęciem wykonywania jakichkolwiek działań przez aparat czasu wykonywania przepływu pracy.  
  
 Dla zdarzenia nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> zawiera i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowLoad`.  
  
 Ten przykład kodu jest częścią niestandardowego przykładu [usługi trwałości](https://go.microsoft.com/fwlink/?LinkID=157351) .  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowPersisted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowPersisted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowPersisted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowPersisted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowPersisted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy stan wystąpienia przepływu pracy jest trwały.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy można utrwalać z wielu powodów. Na przykład host może wywołać <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> wystąpienie przepływu pracy lub aparat czasu wykonywania przepływu pracy może utrwalać wystąpienie przepływu pracy, ponieważ wystąpienie jest w stanie bezczynności lub z powodu nieprawidłowego zakresu. Jeśli usługa trwałości jest obecna w programie <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> jest zgłaszana przez środowisko uruchomieniowe po zapisaniu stanu wystąpienia przepływu pracy w pamięci. Jeśli usługa trwałości nie istnieje, zdarzenie jest nadal zgłaszane, ale stan wystąpienia nie zostanie zapisany. Jeśli zdarzenie występuje, ponieważ trwa zwalnianie wystąpienia przepływu pracy, następuje <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zdarzenie. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>  
  
 Dla zdarzenia nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> zawiera i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak można użyć <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowPersisted`.  
  
 Ten przykład kodu jest częścią [niestandardowego przykładu usługi trwałości](https://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#279](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#279)]
 [!code-vb[WF_Samples#279](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#279)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowResumed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowResumed As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowResumed;" />
      <MemberSignature Language="F#" Value="member this.WorkflowResumed : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowResumed : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wykonywanie wystąpienia przepływu pracy zostanie wznowione po zawieszeniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat czasu wykonywania przepływu pracy wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> zdarzenie tuż przed zaplanowaniem wystąpienia przepływu pracy. Zdarzenie jest zwykle zgłaszane z powodu jawnego <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType>wywołania elementu. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> Jednak aparat czasu wykonywania przepływu pracy może tymczasowo zawiesić wystąpienie do wykonania operacji, na przykład w celu zastosowania zmiany przepływu pracy. W takim przypadku <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> zdarzenie jest zgłaszane, gdy środowisko uruchomieniowe wznawia wykonywanie wystąpienia przepływu pracy po operacji.  
  
 Dla zdarzenia nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> zawiera i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak można użyć <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowResume`.  
  
 Ten przykład kodu jest częścią przykładu [wstrzymania i zakończenia](https://go.microsoft.com/fwlink/?LinkId=157402).  
  
 [!code-csharp[WF_Samples#171](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#171)]
 [!code-vb[WF_Samples#171](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#171)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowStarted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowStarted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowStarted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowStarted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po rozpoczęciu wystąpienia przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat czasu wykonywania przepływu pracy wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> zdarzenie po rozpoczęciu wystąpienia przepływu pracy przez zaplanowanie działania głównego do wykonania. Dla tego zdarzenia nadawca zawiera <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowStarted`.  
  
 Ten przykład kodu jest częścią [przykładu komunikacji](https://go.microsoft.com/fwlink/?LinkId=157406)z hostem.  
  
 [!code-csharp[WF_Samples#297](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets38.cs#297)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowSuspended">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowSuspended As EventHandler(Of WorkflowSuspendedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowSuspendedEventArgs ^&gt; ^ WorkflowSuspended;" />
      <MemberSignature Language="F#" Value="member this.WorkflowSuspended : EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " Usage="member this.WorkflowSuspended : System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostanie zawieszone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy można wstrzymać przez wywołanie <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> metody, <xref:System.Workflow.ComponentModel.SuspendActivity> przez działanie lub niejawnie przez aparat czasu wykonywania przepływu pracy. Na przykład aparat czasu wykonywania przepływu pracy tymczasowo zawiesza wystąpienie, gdy stosuje dynamiczne zmiany do wystąpienia.  
  
 Dla zdarzenia nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> zawiera <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> i zawiera <xref:System.Workflow.Runtime.WorkflowInstance> ciąg i, który opisuje przyczynę wstrzymania wystąpienia. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowSuspended`.  
  
 Ten przykład kodu jest częścią przykładu [wstrzymania i zakończenia](https://go.microsoft.com/fwlink/?LinkID=157402).  
  
 [!code-csharp[WF_Samples#170](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#170)]
 [!code-vb[WF_Samples#170](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowTerminated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowTerminated As EventHandler(Of WorkflowTerminatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowTerminatedEventArgs ^&gt; ^ WorkflowTerminated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowTerminated : EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " Usage="member this.WorkflowTerminated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przerwaniu wystąpienia przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przepływ pracy może być zakończony przez wywołanie <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> metody, <xref:System.Workflow.ComponentModel.TerminateActivity> przez działanie lub przez aparat czasu wykonywania przepływu pracy w przypadku wystąpienia nieobsługiwanego wyjątku. Aparat czasu wykonywania przepływu pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> zdarzenie po zakończeniu wystąpienia przepływu pracy, ale zanim zostanie unieważnione w pamięci.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime> <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> <xref:System.Workflow.Runtime.WorkflowInstance> Dla zdarzenia nadawca zawiera i zawiera informacje o przyczynie zakończenia wystąpienia we <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception%2A?displayProperty=nameWithType> właściwości. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowCompleted`.  
  
 Ten przykład kodu jest częścią anulowania przykładowego [przepływu pracy](https://go.microsoft.com/fwlink/?LinkID=157346) .  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowUnloaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowUnloaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowUnloaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowUnloaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowUnloaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostanie zwolnione z pamięci.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Wystąpienie przepływu pracy można zwolnić z pamięci przez jawne wywołanie <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>lub niejawnie przez aparat czasu wykonywania przepływu pracy zgodnie z jego własną semantyką. Na przykład aparat czasu wykonywania przepływu pracy zwalnia wystąpienie przepływu pracy, jeśli wystąpienie stanie się bezczynne i <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> dodano <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle%2A> `true`do niego środowisko uruchomieniowe.  
  
Aparat czasu wykonywania przepływu pracy wywołuje `WorkflowUnloaded` zdarzenie po pomyślnym utrwaleniu stanu wystąpienia przepływu pracy, ale przed unieważnieniem wystąpienia w pamięci. W związku z tym zdarzenie poprzedza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zdarzenie. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>  
  
Dla zdarzenia nadawca <xref:System.Workflow.Runtime.WorkflowRuntime> zawiera i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzone ze zdarzeniem. `WorkflowUnloaded`  
  
Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
## Examples

Poniższy przykład kodu demonstruje, jak używać <xref:System.Workflow.Runtime.WorkflowRuntime> funkcji z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> z programem obsługi zdarzeń, metodą o nazwie `OnWorkflowUnload`.  
  
 Ten przykład kodu jest częścią [niestandardowego przykładu usługi trwałości](https://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
