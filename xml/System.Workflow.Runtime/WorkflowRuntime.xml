<Type Name="WorkflowRuntime" FullName="System.Workflow.Runtime.WorkflowRuntime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="268bae235884026d5832c6a363a2f1a115287728" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48663776" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WorkflowRuntime extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowRuntime" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowRuntime&#xA;Implements IDisposable, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="F#" Value="type WorkflowRuntime = class&#xA;    interface IServiceProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje środowisko wykonawcze można skonfigurować, dostarczone przez aparat środowiska wykonawczego przepływów pracy dla przepływów pracy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime> udostępnia funkcje wymagane przez aplikację hosta i usług, konfigurować i kontrolować aparatu środowiska wykonawczego przepływów pracy i aby otrzymywać powiadomienia o zmianach aparatu środowiska wykonawczego przepływów pracy i wszystkich jego wystąpienia przepływu pracy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Przykłady dotyczące używania <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> Konstruktor i <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>, i <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> metody. Kod przedstawia również zalecany sposób tworzenia <xref:System.Workflow.Runtime.WorkflowInstance> obiektu hosta przepływu pracy, przy użyciu <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> metody. Pokazano również, jak można ustawić programy obsługi zdarzeń dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled>, i <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> zdarzenia.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime> Jest inicjowany za pomocą domyślnych wartości właściwości i zawiera domyślne podstawowych usług. Aby dodatkowo skonfigurować aparatu środowiska wykonawczego przepływów pracy, można dodawać i usuwać usług przy użyciu <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> i <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>, a użytkownik może ustawić <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>. Po <xref:System.Workflow.Runtime.WorkflowRuntime> jest skonfigurowany, wywołaj <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> można uruchomić aparatu środowiska wykonawczego przepływów pracy i usług.  
  
 W poniższej tabeli przedstawiono początkowe wartości właściwości wystąpienia <xref:System.Workflow.Runtime.WorkflowRuntime> klasy.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>|"WorkflowRuntime"|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>|`false`|  
  
 Domyślne podstawowych usług są <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> i <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak można użyć <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Stanowi przykład sposobu użycia <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> konstruktora, aby utworzyć wystąpienie <xref:System.Workflow.Runtime.WorkflowRuntime> i uzyskiwać dostęp do jego metod i zdarzeń.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (string configSectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configSectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configSectionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::String ^ configSectionName);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : string -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime configSectionName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configSectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configSectionName">Nazwa prawidłowego <see langword="workflowSettings" /> sekcji w pliku konfiguracyjnym aplikacji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> przy użyciu określonej sekcji pliku konfiguracji aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime> Jest inicjowany zgodnie z ustawieniami w sekcji określony przez `configSectionName` w pliku konfiguracyjnym aplikacji. `configSectionName` musi odpowiadać ważnej `workflowSettings` sekcję pliku konfiguracji.  
  
 W przypadku skonfigurowania aparatu środowiska wykonawczego przepływów pracy za pomocą pliku konfiguracji aplikacji, ładuje i tworzy wystąpienie klasy typów wymienionych w `Services` sekcję pliku konfiguracji. Gdy aparat środowiska wykonawczego przepływów pracy tworzy te klasy wyszukuje Konstruktory klasy za pomocą następujących podpisów w następującej kolejności:  
  
1.  Usługi (środowiska wykonawczego przepływów pracy w czasie wykonywania, parametry elementu NameValueCollection)  
  
2.  Usługi (środowisko uruchomieniowe środowiska wykonawczego przepływów pracy)  
  
3.  Usługi (NameValueCollection — parametry)  
  
4.  Service()  
  
 Wszystkie klasy usługi, które zostały załadowane z pliku konfiguracji musi implementować co najmniej jeden z tych sygnatury konstruktora.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="configSectionName" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Nieprawidłowy <see langword="workflowSettings" /> nie można odnaleźć sekcji w pliku konfiguracyjnym aplikacji.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> już istnieje dla tej domeny aplikacji.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As WorkflowRuntimeSection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::Workflow::Runtime::Configuration::WorkflowRuntimeSection ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : System.Workflow.Runtime.Configuration.WorkflowRuntimeSection -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime settings" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
      </Parameters>
      <Docs>
        <param name="settings">A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> klasy przy użyciu ustawień w określonym <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor zapewnia mechanizm do skonfigurowania aparatu środowiska wykonawczego przepływów pracy za pomocą wystarczy jedno wywołanie metody dla hostów, które nie korzystają z pliku konfiguracji aplikacji. Istnieje wiele funkcji przemawiających za nie przy użyciu pliku konfiguracji aplikacji. Hosta można uruchomić w środowisku, które nie zezwala na korzystanie z plików konfiguracji; na przykład w środowiskach zaufanych, nie zezwalają na odczyt z pliku konfiguracji aplikacji ze względów bezpieczeństwa. Ponadto hosta można użyć mechanizmu własności konfiguracji; na przykład host może przechowywać ustawień konfiguracji czasu wykonywania aparatu przepływu pracy w usłudze SQL database.  
  
 Aparat środowiska wykonawczego przepływów pracy ładuje i tworzy wystąpienie klasy typów zawartych w <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services%2A?displayProperty=nameWithType>. Gdy aparat środowiska wykonawczego przepływów pracy tworzy te klasy wyszukuje Konstruktory klasy za pomocą następujących podpisów w następującej kolejności:  
  
1.  Usługi (środowiska wykonawczego przepływów pracy w czasie wykonywania, parametry elementu NameValueCollection)  
  
2.  Usługi (środowisko uruchomieniowe środowiska wykonawczego przepływów pracy)  
  
3.  Usługi (NameValueCollection — parametry)  
  
4.  Service()  
  
 Wszystkie klasy usługi, które są określone w `settings` musi implementować co najmniej jeden z tych sygnatury konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settings" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> już istnieje dla tej domeny aplikacji.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.AddService : obj -&gt; unit" Usage="workflowRuntime.AddService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Obiekt, który reprezentuje usługę do dodania.</param>
        <summary>Dodaje określoną usługę do aparatu przepływu pracy w czasie wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy można skonfigurować przez dodanie podstawowych usług. Podstawowych usług są te, które pochodzą z dowolnego z następujących klas bazowych usługi: <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy i <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  Podstawowych usług mogą być dodawane tylko, gdy aparat środowiska wykonawczego przepływów pracy nie jest uruchomiony; oznacza to, kiedy <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jest `false`. <xref:System.Workflow.Runtime.WorkflowRuntime> Może również służyć jako kontenera magazynu dla innych usług, które mogą być używane przez inne przepływy pracy lub przez aplikacje działające na hoście. Jeśli dodasz usługę-core, która pochodzi od klasy <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy po rozpoczęciu aparatu środowiska wykonawczego przepływów pracy <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> wywołania <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> metody implementowane przez tę usługę.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> wymusza ograniczenia, brak dwóch usług tego samego <xref:System.Type> mogą być dodawane do <xref:System.Workflow.Runtime.WorkflowRuntime>. Można jednak dodać wiele usług, które pochodzą z tej samej klasy bazowej.  Może istnieć tylko jedna usługa pochodzące z każdej z następujących klasy podstawowej usługi w <xref:System.Workflow.Runtime.WorkflowRuntime>: <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy, a <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy.  Jeśli dodasz wiele usług pochodzących z jednego z tych klas, na przykład dwie usługi trwałości, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> zgłasza <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Zawiera przykład sposobu użycia <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> metody w celu dodania <xref:System.Workflow.Activities.ExternalDataExchangeService> i <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> do aparatu przepływu pracy w czasie wykonywania.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkId=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="service" /> jest już zarejestrowany przy użyciu aparatu przepływu pracy w czasie wykonywania.  
  
—lub— 
 <paramref name="service" /> jest podstawowej usługi i aparatu przepływu pracy w czasie wykonywania jest już uruchomiona (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> jest <see langword="true" />).</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateWorkflow">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych parametrów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie został uruchomiony aparat środowiska wykonawczego przepływów pracy, <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> wywołanie metody <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Zobacz <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> listę możliwych wyjątków. Po utworzeniu wystąpienia przepływu pracy, należy wywołać <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A?displayProperty=nameWithType> na <xref:System.Workflow.Runtime.WorkflowInstance> obiektu zwróconego przez <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> metodę, aby rozpocząć wykonywanie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="workflowType">
          <see cref="T:System.Type" /> Przepływu pracy do utworzenia.</param>
        <summary>Tworzy nowe wystąpienie przepływu pracy za pomocą określonego przepływu pracy <see cref="T:System.Type" />.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zgłaszany. To działa dobrze w przypadku prostych scenariuszy, ale w środowisku serwera ponownego sprawdzania poprawności nazwy przepływu pracy dla każdego aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączenie sprawdzania poprawności, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zalecany sposób tworzenia <xref:System.Workflow.Runtime.WorkflowInstance> obiektu hosta przepływu pracy, przy użyciu <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> metody.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowDefinitionReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">
          <see cref="T:System.Xml.XmlReader" /> Zawierający definicję przepływu pracy.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonego <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy jest tworzony z pliku definicji przepływu pracy XAML odwołuje się <xref:System.Xml.XmlReader>.  
  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zgłaszany. To działa dobrze w przypadku prostych scenariuszy, ale w środowisku serwera ponownego sprawdzania poprawności nazwy przepływu pracy dla każdego aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączenie sprawdzania poprawności, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia przepływu pracy, biorąc pod uwagę definicję przepływu pracy opartego na XAML.  
  
```  
static void Main(string[] args)  
{  
    using (WorkflowRuntime workflowRuntime = new WorkflowRuntime())  
    {  
        AutoResetEvent waitHandle = new AutoResetEvent(false);  
        workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e)  
        {  
            waitHandle.Set();  
        };  
        workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e)  
        {  
            Console.WriteLine(e.Exception.Message);  
            waitHandle.Set();  
        };  
  
        TypeProvider typeProvider = new TypeProvider(null);  
        // Add referenced assemblies, if needed  
        // typeProvider.AddAssembly(...);  
        workflowRuntime.AddService(typeProvider);  
  
        using (XmlReader reader = XmlReader.Create("Workflow1.xoml"))  
        {  
            WorkflowInstance instance = workflowRuntime.CreateWorkflow(reader);  
            instance.Start();  
        }  
  
        waitHandle.WaitOne();  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowType">
          <see cref="T:System.Type" /> Przepływu pracy do utworzenia.</param>
        <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> obiektów opartych na kluczach ciąg reprezentujący argumenty do przepływu pracy.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonego przepływu pracy <see cref="T:System.Type" /> i argumenty do przepływu pracy znajdujących się w określonym <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zgłaszany. To działa dobrze w przypadku prostych scenariuszy, ale w środowisku serwera ponownego sprawdzania poprawności nazwy przepływu pracy dla każdego aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączenie sprawdzania poprawności, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Na przykład przekazywanie parametrów do `CreateWorkflow`, zobacz [przepływu pracy z przykładem parametry](http://go.microsoft.com/fwlink/?LinkId=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowType">
          <see cref="T:System.Type" /> Przepływu pracy do utworzenia.</param>
        <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> obiektów opartych na kluczach ciąg reprezentujący argumenty do przepływu pracy.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> Określonego <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> do utworzenia.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych parametrów.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zgłaszany. To działa dobrze w przypadku prostych scenariuszy, ale w środowisku serwera ponownego sprawdzania poprawności nazwy przepływu pracy dla każdego aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączenie sprawdzania poprawności, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przepływ pracy `instanceId` dla każdego uruchamiania przepływów pracy ładowane przez <xref:System.Workflow.Runtime.WorkflowRuntime> muszą być unikatowe. W przypadku przekazania `instanceId` do utworzenia przepływu pracy i uruchomiony przepływ pracy używa już który `instanceId`, <xref:System.InvalidOperationException> zgłaszany.  
  
 Na przykład przekazywanie parametrów do `CreateWorkflow`, zobacz [przepływu pracy z przykładem parametry](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">
          <see cref="T:System.Xml.XmlReader" /> Zawierający definicję przepływu pracy.</param>
        <param name="rulesReader">
          <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> obiektów opartych na kluczach ciąg reprezentujący argumenty do przepływu pracy.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonego <see cref="T:System.Xml.XmlReader" /> obiektów i argumenty znajdujących się w określonym <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy jest tworzony z definicji przepływu pracy, odwołuje się <xref:System.Xml.XmlReader> i argumenty dostarczone przez `namedArgumentValues`.  
  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zgłaszany. To działa dobrze w przypadku prostych scenariuszy, ale w środowisku serwera ponownego sprawdzania poprawności nazwy przepływu pracy dla każdego aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączenie sprawdzania poprawności, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Na przykład przekazywanie parametrów do `CreateWorkflow`, zobacz [przepływu pracy z przykładem parametry](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Przykład za pomocą reguł zdefiniowanych w pliku XML, zobacz [działanie IfElse za pomocą przykładowych reguł](http://go.microsoft.com/fwlink/?LinkId=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">
          <see cref="T:System.Xml.XmlReader" /> Zawierający definicję przepływu pracy.</param>
        <param name="rulesReader">
          <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> obiektów opartych na kluczach ciąg reprezentujący argumenty do przepływu pracy.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> Określonego <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> do utworzenia.</param>
        <summary>Tworzy wystąpienie przepływu pracy przy użyciu określonych parametrów.</summary>
        <returns>Wystąpienie przepływu pracy utworzony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przed <xref:System.Workflow.Runtime.WorkflowInstance> jest utworzony, sprawdzanie poprawności jest wykonywane na nim. Jeśli wystąpią błędy sprawdzania poprawności, <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException> zgłaszany. To działa dobrze w przypadku prostych scenariuszy, ale w środowisku serwera ponownego sprawdzania poprawności nazwy przepływu pracy dla każdego aktywacji może być niepotrzebne koszty.  
  
 Aby uzyskać więcej informacji na temat wyłączenie sprawdzania poprawności, zobacz <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Przepływ pracy `instanceId` dla każdego uruchamiania przepływów pracy ładowane przez <xref:System.Workflow.Runtime.WorkflowRuntime> muszą być unikatowe. W przypadku przekazania `instanceId` do utworzenia przepływu pracy i uruchomiony przepływ pracy używa już który `instanceId`, <xref:System.InvalidOperationException> zgłaszany.  
  
 Na przykład przekazywanie parametrów do `CreateWorkflow`, zobacz [przepływu pracy z przykładem parametry](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Przykład za pomocą reguł zdefiniowanych w pliku XML, zobacz [działanie IfElse za pomocą przykładowych reguł](http://go.microsoft.com/fwlink/?LinkID=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="workflowRuntime.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby zamknąć <xref:System.Workflow.Runtime.WorkflowRuntime> poprawnie, należy wywołać tylko <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> po wywołaniu <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. Jest to spowodowane wywołaniem <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> pozostawia ograniczenia metody <xref:System.Workflow.Runtime.WorkflowRuntime> w stanie uniemożliwiającym jego używanie. <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> zwalnia zasoby używane przez środowisko uruchomieniowe przez zamknięcie otworzyć dojścia do plików, połączenia z bazą danych i tak dalej, ale nie zwolnienie wystąpienia przepływu pracy, zatrzymywać usługi lub wykonaj jedną z innych akcji, która <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> jest.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> powinna być wywoływana tylko wtedy, gdy aplikacja hosta należy zwolnić zasoby używane przez <xref:System.Workflow.Runtime.WorkflowRuntime> przed ich automatycznie są zwalniane przez moduł odśmiecania pamięci. Aby uzyskać ogólne informacje na temat <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób wywołania <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> na <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu. W tym przykładzie <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> metoda jest wywoływana z FormClosing obsługi zdarzeń dla tego formularza aplikacji; daje to pewność, że obiekty utworzone przez środowisko uruchomieniowe są prawidłowo czyszczone podczas zamykania aplikacji. W tym przykładzie pochodzi z [przykładowej aplikacji mowy](http://go.microsoft.com/fwlink/?LinkId=157405).  
  
 [!code-csharp[WF_Samples#108](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#108)]
 [!code-vb[WF_Samples#108](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;object&gt; GetAllServices (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;object&gt; GetAllServices(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices (serviceType As Type) As ReadOnlyCollection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Object ^&gt; ^ GetAllServices(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : Type -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;obj&gt;" Usage="workflowRuntime.GetAllServices serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <see cref="T:System.Type" /> Czy usługi musi implementować ma zostać zwrócona.</param>
        <summary>Pobiera wszystkie usługi, które są dodawane do środowiska wykonawczego przepływów pracy, aparat, które implementują lub pochodzi z określonego <see cref="T:System.Type" />.</summary>
        <returns>Usługi, które implementować lub pochodzić z określonego <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> oznacza, że żadne usługi, implementować lub pochodzić z określonego <xref:System.Type> zostały dodane do aparatu przepływu pracy w czasie wykonywania.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak pobrać wszystkie usługi danego typu z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu.  
  
 [!code-csharp[WF_Samples#19](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#19)]
 [!code-vb[WF_Samples#19](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetAllServices&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetAllServices&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices(Of T) () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ GetAllServices();" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="workflowRuntime.GetAllServices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ usługi.</typeparam>
        <summary>Pobiera wszystkie usługi, które są dodawane do aparatu przepływu pracy w czasie wykonywania, które implementować lub pochodzić od określonego typu ogólnego.</summary>
        <returns>Usługi, które implementować lub pochodzić od określonego typu ogólnego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pusta <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> wskazuje, że usługi nie zostały dodane do aparat środowiska wykonawczego przepływów pracy, który implementować lub pochodzić od określonego typu ogólnego.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak pobrać wszystkie usługi danego typu z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu.  
  
 [!code-csharp[WF_Samples#6](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#6)]
 [!code-vb[WF_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedWorkflows">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedWorkflows () As ReadOnlyCollection(Of WorkflowInstance)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowInstance ^&gt; ^ GetLoadedWorkflows();" />
      <MemberSignature Language="F#" Value="member this.GetLoadedWorkflows : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;" Usage="workflowRuntime.GetLoadedWorkflows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję zawierającą wszystkie wystąpienia przepływu pracy załadowanych obecnie do pamięci.</summary>
        <returns>A <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> obiekt dla każdego wystąpienia przepływu pracy załadowanych obecnie do pamięci.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zauważyć, że w przeciwieństwie do <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>, ta metoda nie zgłasza <xref:System.InvalidOperationException> Jeśli środowisko uruchomieniowe nie jest uruchomiona.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak pobrać kolekcję załadowanych przepływów pracy z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu.  
  
 [!code-csharp[WF_Samples#18](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#18)]
 [!code-vb[WF_Samples#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="workflowRuntime.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <see cref="T:System.Type" /> Usługi do pobrania.</param>
        <summary>Pobiera usługę o określonym parametrze <see cref="T:System.Type" /> z aparatu przepływu pracy w czasie wykonywania.</summary>
        <returns>Usługi o określonym parametrze <see cref="T:System.Type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> zgłasza <xref:System.InvalidOperationException> Jeśli więcej niż jedna usługa istnieje w określonym <xref:System.Type>. Dlatego należy używać jednej z przeciążonych metod <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> Jeśli jest to możliwe, że wiele usług o określonym typie są obecne w <xref:System.Workflow.Runtime.WorkflowRuntime>. Na przykład aparatu środowiska wykonawczego przepływów pracy mogą mieć wiele usług śledzenia. Jeśli żądanie usługi śledzenia, określając <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy bazowej, jest możliwe, zostanie zgłoszony wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Jest już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Więcej niż jedna usługa typu <paramref name="serviceType" /> został znaleziony.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetService&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetService&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'T" Usage="workflowRuntime.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ usługi.</typeparam>
        <summary>Pobiera usługę o określonym typie ogólny z aparatu przepływu pracy w czasie wykonywania.</summary>
        <returns>Pojedynczą usługę o określonym typie ogólnym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> zgłasza <xref:System.InvalidOperationException> istnienie więcej niż jedna usługa dla określonego typu ogólnego. Dlatego należy używać jednej z przeciążonych metod <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> Jeśli jest to możliwe, że wiele usług typu ogólnego są obecne w <xref:System.Workflow.Runtime.WorkflowRuntime>. Na przykład aparatu środowiska wykonawczego przepływów pracy mogą mieć wiele usług śledzenia. Jeśli żądanie usługi śledzenia, określając <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy bazowej, jest możliwe, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak pobrać pojedynczą usługę z <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu; w tym przypadku usługa typu <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>. W tym przykładzie pochodzi z [wątkowości przepływu pracy — przykład](http://go.microsoft.com/fwlink/?LinkId=157350).  
  
 [!code-csharp[WF_Samples#28](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#28)]
 [!code-vb[WF_Samples#28](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Został już usunięty z.</exception>
        <exception cref="T:System.InvalidOperationException">Znaleziono więcej niż jedna usługa typu ogólnego.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance GetWorkflow (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance GetWorkflow(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflow (instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ GetWorkflow(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.GetWorkflow : Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.GetWorkflow instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">
          <see cref="T:System.Guid" /> Wystąpienia przepływu pracy.</param>
        <summary>Pobiera wystąpienie przepływu pracy, który ma określony <see cref="T:System.Guid" />.</summary>
        <returns>
          <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> Ma określony <see cref="T:System.Guid" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `instanceId` określa wystąpienie przepływu pracy, która nie jest aktualnie w pamięci, wystąpienie przepływu pracy jest ładowany do pamięci i zaplanowane do wykonania. Na przykład po wystąpienia przepływu pracy zostało przerwane, można wywołać <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> można załadować wystąpienia przepływu pracy z powrotem do pamięci. W tym przypadku ostatniego utrwalonego stanu wystąpienia przepływu pracy jest ładowany do pamięci przez usługę trwałości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje `ReloadWorkflow` metodę, która wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> metody. `ReloadWorkflow` Metody jest częścią większej klasy, która ma `Runtime` właściwość, aby uzyskać dostęp do wszystkich metod, właściwości i zdarzenia <xref:System.Workflow.Runtime.WorkflowRuntime> klasy.  
  
 Ten przykład kodu jest częścią [przykładową usługę trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkId=157351) próbki.  
  
> [!NOTE]
>  W tym przykładzie wywołanie <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> jest nadmiarowa ponieważ zarówno <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> i <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> metody używać tej samej metody pomocnika wewnętrznego załadować wystąpienia przepływu pracy do pamięci.  
  
 [!code-csharp[WF_Samples#265](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#265)]
 [!code-vb[WF_Samples#265](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#265)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Środowisko wykonawcze przepływów pracy nie jest uruchomiona.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStarted : bool" Usage="System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy aparat środowiska wykonawczego przepływu pracy zostało rozpoczęte.</summary>
        <value>
          <see langword="true" /> Jeśli aparat środowiska wykonawczego przepływów pracy został uruchomiony; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> Wskazuje, że są uruchomione usługi czasu wykonywania aparatu przepływu pracy. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jest `false` do momentu wywołania hosta <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Pozostaje `true` do momentu wywołania hosta <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
> [!NOTE]
>  Nie można dodać podstawowych usług aparatu środowiska wykonawczego przepływów pracy, jest uruchomiona. Podstawowych usług to usługi, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy i <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak uzyskać dostęp do <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> właściwość <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu. W tym przykładzie Jeśli środowisko wykonawcze jest uruchomiona, komunikat jest drukowany w konsoli.  
  
 [!code-csharp[WF_Samples#21](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#21)]
 [!code-vb[WF_Samples#21](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę skojarzoną z <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <value>Nazwa skojarzona z tym <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można ustawić <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> podczas przepływu pracy jest uruchomiony Aparat wykonawczy (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jest `true`).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak uzyskać dostęp do <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> właściwość <xref:System.Workflow.Runtime.WorkflowRuntime> obiektu. W tym przykładzie nazwa środowiska uruchomieniowego jest równa "Main środowiska uruchomieniowego".  
  
 [!code-csharp[WF_Samples#20](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#20)]
 [!code-vb[WF_Samples#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Podjęto próbę ustawienia <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> na <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> zostanie usunięty, który wystąpi.</exception>
        <exception cref="T:System.InvalidOperationException">Podjęto próbę ustawienia <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> podczas przepływu pracy jest uruchomiony Aparat wykonawczy występuje.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.RemoveService : obj -&gt; unit" Usage="workflowRuntime.RemoveService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Obiekt, który reprezentuje usługi do usunięcia.</param>
        <summary>Usuwa określoną usługę z aparatu przepływu pracy w czasie wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można usunąć podstawowej usługi, gdy działa aparat środowiska wykonawczego przepływów pracy (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> jest `true`). Podstawowych usług to usługi, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy lub <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  Jeśli `service` pochodzi od klasy <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> wywołania <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> metody implementowane przez `service`.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> są dodawane i usuwane z <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#16](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#16)]
 [!code-vb[WF_Samples#16](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Jest już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Rozpoczęto aparatu przepływu pracy w czasie wykonywania (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> jest <see langword="true" />) i <paramref name="service" /> jest podstawowej usługi.  
  
\- lub — 
 <paramref name="service" /> nie jest zarejestrowana przy użyciu aparatu przepływu pracy w czasie wykonywania.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesExceptionNotHandled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />
      <MemberSignature Language="VB.NET" Value="Public Event ServicesExceptionNotHandled As EventHandler(Of ServicesExceptionNotHandledEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::ServicesExceptionNotHandledEventArgs ^&gt; ^ ServicesExceptionNotHandled;" />
      <MemberSignature Language="F#" Value="member this.ServicesExceptionNotHandled : EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " Usage="member this.ServicesExceptionNotHandled : System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy usługa, która jest pochodną <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> klasy wywołania <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To usługa, która jest pochodną <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> może wywołać klasy <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> metodę, aby poinformować subskrybentów <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> zdarzenie, dla którego wystąpił wyjątek, który nie może obsłużyć, podczas jego wykonywania. Możesz zasubskrybować tego zdarzenia, aby zaimplementować mechanizm odzyskiwania.  
  
 To zdarzenie jest wywoływane, gdy wystąpienie przepływu pracy nie utworzono jeszcze przez aparat środowiska wykonawczego przepływów pracy i wystąpienia wyjątku. W tym scenariuszu Zgłoś to zdarzenie jest jedynym sposobem, aby poinformować aplikacji hosta, który wystąpił wyjątek. Jednakże aparatu środowiska wykonawczego przepływów pracy nie wywołuje to bezpośrednio. Zamiast tego aparatu przepływu pracy w czasie wykonywania zapewnia wyjątek dla wystąpienia przepływu pracy albo, jeśli żadne wystąpienie ponownie zgłasza do obiektu wywołującego, w tym przypadku jest faktycznie usługi, która generuje to zdarzenie. Jeśli tworzysz własny trwałości lub usługi scheduler, należy zaimplementować to zdarzenie samodzielnie za pośrednictwem bazie <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> metody.  
  
 Aby uzyskać <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> zawiera nadawcy zdarzeń, <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Guid> wystąpienia przepływu pracy, który został przy użyciu usługi i <xref:System.Exception> , nie można obsłużyć.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnExceptionNotHandled`.  
  
 Ten przykład kodu jest częścią [przykładową usługę trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Started" />
      <MemberSignature Language="VB.NET" Value="Public Event Started As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Started;" />
      <MemberSignature Language="F#" Value="member this.Started : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Started : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy aparat środowiska wykonawczego przepływów pracy została uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> Wywołuje metodę <xref:System.Workflow.Runtime.WorkflowRuntime.Started> wywołał zdarzenie po został zweryfikowany, podstawowej konfiguracji usługi aparatu przepływu pracy w czasie wykonywania, <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> metody implementowane przez każdego z jego usług, które wynikają z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy i ustawił <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> do `true`. Nie ma żadnej gwarancji o kolejność, w której usług, które wynikają z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy są uruchamiane przez aparat środowiska wykonawczego przepływów pracy, a niektóre z tych usług czasu wykonywania aparatu przepływu pracy może zależeć od funkcji, dostarczanych przez innych użytkowników tych usług zadania uruchamiania. Usługi czasu wykonywania aparatu przepływu pracy można zastąpić <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=nameWithType> metody do wykonywania wszystkich zadań końcowego uruchamiania, które wymagają obsługi innych aparatu środowiska wykonawczego przepływów pracy usług, kiedy <xref:System.Workflow.Runtime.WorkflowRuntime.Started> zdarzenie jest wywoływane.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 W poniższym przykładzie program obsługi zdarzeń jest dodawany do <xref:System.Workflow.Runtime.WorkflowRuntime.Started> zdarzenia <xref:System.Workflow.Runtime.WorkflowRuntime>. W tym przykładzie program obsługi jest metody anonimowej, który drukuje wiadomość proste do konsoli.  
  
 [!code-csharp[WF_Samples#15](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#15)]
 [!code-vb[WF_Samples#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartRuntime">
      <MemberSignature Language="C#" Value="public void StartRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartRuntime();" />
      <MemberSignature Language="F#" Value="member this.StartRuntime : unit -&gt; unit" Usage="workflowRuntime.StartRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zostanie uruchomiony, aparatu środowiska wykonawczego przepływów pracy i usług czasu wykonywania aparatu przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda sprawdza, czy istnieje prawidłowy zestaw podstawowych usług i następnie uruchamia wszystkie usługi, które wynikają z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy.  Musi istnieć jeden i tylko jeden z następujących podstawowych usług: przepływ pracy `CommitWorkBatch` usługi pochodną <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy bazowej i usługi scheduler pochodzące z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy bazowej.  Jeśli brakuje jednego lub obu tych usług podstawowych, aparatu środowiska wykonawczego przepływów pracy dostarcza usługę odpowiednią wartość domyślną: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> przepływu pracy `CommitWorkBatch` usługi i <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> usługi scheduler. Usługa trwałości jest opcjonalna, ale może być co najwyżej tylko jedna usługa trwałości obecne. Po został zweryfikowany, konfiguracji usługi <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> wywołania <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> na wszystkie usługi, które są uzyskiwane z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy.  Na koniec ustawia aparat środowiska wykonawczego przepływów pracy <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> i zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.Started> zdarzeń.  
  
 Nie można dodać lub usunąć podstawowych usług, po uruchomieniu aparatu przepływu pracy w czasie wykonywania. Podstawowych usług to usługi, które pochodzą z <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> klasy <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> klasy lub <xref:System.Workflow.Runtime.Tracking.TrackingService> klasy.  Jeśli wywołasz <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> uruchomionej aparatu środowiska wykonawczego przepływów pracy jest wykonywana żadna akcja.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod wywołuje <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> po <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> tworzy <xref:System.Workflow.Runtime.WorkflowRuntime> wystąpienia i po wywoływanych przez nią <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> nad dodaniem usług do środowiska uruchomieniowego. Wzywa także <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> zanim wystąpi dowolne inne procesy przetwarzania.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkId=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Zostanie usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Istnieje więcej niż jeden przepływu pracy usługi <see langword="CommitWorkBatch" /> Usługa zarejestrowana z tym <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
—lub— 
Istnieje więcej niż jedna usługa scheduler zarejestrowana z tym <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
—lub— 
Istnieje więcej niż jedna usługa trwałości zarejestrowana z tym <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />
      <MemberSignature Language="VB.NET" Value="Public Event Stopped As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Stopped;" />
      <MemberSignature Language="F#" Value="member this.Stopped : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Stopped : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy aparat środowiska wykonawczego przepływów pracy został zatrzymany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> Wywołuje metodę <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> zdarzenie po jego zostało wywołane <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> metody implementowane przez każdego z jego usług, które wynikają z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy.  Nie ma żadnej gwarancji, dotyczące zamówienia, w której te usługi czasu wykonywania aparatu przepływu pracy zostaną zatrzymane, a niektóre z tych usług może być konieczne zachowanie części funkcji, która jest polegać przez inne usługi, dopóki zbyt pozostaną one zatrzymane. Te usługi można zastąpić <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A?displayProperty=nameWithType> metodę w celu wszelka logika zamknięcie końcowej podczas <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> zdarzenie jest wywoływane.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 W poniższym przykładzie program obsługi zdarzeń jest dodawany do <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> zdarzenia <xref:System.Workflow.Runtime.WorkflowRuntime>. W tym przykładzie program obsługi jest metody anonimowej, który drukuje wiadomość proste do konsoli.  
  
 [!code-csharp[WF_Samples#14](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#14)]
 [!code-vb[WF_Samples#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRuntime">
      <MemberSignature Language="C#" Value="public void StopRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopRuntime();" />
      <MemberSignature Language="F#" Value="member this.StopRuntime : unit -&gt; unit" Usage="workflowRuntime.StopRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatrzymuje, aparatu środowiska wykonawczego przepływów pracy i usług czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda powoduje aparatu środowiska wykonawczego przepływów pracy zwolnić każdego z jego wystąpienia przepływu pracy, zatrzymanie wszystkich swoich usług, które są uzyskiwane z <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> klasy, należy ustawić <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> do `false`i zgłosić <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> zdarzeń.  
  
 Aby zamknąć <xref:System.Workflow.Runtime.WorkflowRuntime> poprawnie, wywołania <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> przed wywołaniem <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> jest wywoływana po zakończeniu hosta ma inne przetwarzanie skojarzony ze środowiskiem uruchomieniowym.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkId=157346) próbki.  
  
 [!code-csharp[WF_Samples#259](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#259)]
 [!code-vb[WF_Samples#259](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#259)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> Jest już usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowAborted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowAborted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowAborted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowAborted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowAborted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostało przerwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> występuje, gdy wszystkie oczekuje na wykonanie zadania przepływu pracy wystąpienie jest wyczyszczone, ale przed przepływu pracy wystąpienia zostaje unieważniony w pamięci. Wystąpienie przepływu pracy może przerwać przez wywołanie metody <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A?displayProperty=nameWithType>.  
  
 Dla tego zdarzenia zawiera nadawcy <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzonego ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowAborted`.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#141](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#141)]
 [!code-vb[WF_Samples#141](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#141)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCompleted As EventHandler(Of WorkflowCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowCompletedEventArgs ^&gt; ^ WorkflowCompleted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCompleted : EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " Usage="member this.WorkflowCompleted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostało zakończone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> jest wywoływane po ukończeniu wystąpienie przepływu pracy, ale przed wystąpienia zostaje unieważniony w pamięci.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> zawiera nadawcy zdarzeń, <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowCompletedEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> i jego parametrów wyjściowych.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowCompleted`.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkId=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCreated As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowCreated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCreated : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowCreated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy tworzone jest wystąpienie przepływu pracy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> zdarzeń po wystąpienia przepływu pracy jest całkowicie skonstruowany, ale przed działania są przetwarzane. Dla tego zdarzenia zawiera nadawcy <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzonego ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowCreated`.  
  
 Ten przykład kodu jest częścią [przykładową usługę trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowIdled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowIdled As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowIdled;" />
      <MemberSignature Language="F#" Value="member this.WorkflowIdled : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowIdled : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy przejdzie w stan bezczynności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> zdarzenie, gdy wystąpienie przepływu pracy przejdzie w stan bezczynności; na przykład, gdy przepływ pracy oczekuje na <xref:System.Workflow.Activities.DelayActivity> zakończenie działania.  
  
 Dla tego zdarzenia zawiera nadawcy <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzonego ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](https://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67(v=vs.100)).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowIdled`.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowLoaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowLoaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowLoaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowLoaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy jest ładowany do pamięci.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> występuje po usługi trwałości został przywrócony wystąpienia przepływu pracy, ale aparat środowiska wykonawczego rozpoczyna się przed przepływu pracy można wykonać żadnych działań.  
  
 Aby uzyskać <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> zawiera nadawcy zdarzeń, <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzonego ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowLoad`.  
  
 Ten przykład kodu jest częścią [Custom trwałości Service](http://go.microsoft.com/fwlink/?LinkID=157351) próbki.  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowPersisted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowPersisted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowPersisted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowPersisted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowPersisted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy stan wystąpienia przepływu pracy jest trwały.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy mogą zostać utrwalone wielu powodów. Na przykład host może wywołać <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> na wystąpienie przepływu pracy lub przepływu pracy aparat środowiska wykonawczego można utrwalić wystąpienia przepływu pracy, ponieważ wystąpienie jest w stanie bezczynności lub atomic zakresu zostało zakończone. Jeśli usługa stanu trwałego znajduje się w <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> jest wywoływane przez środowisko uruchomieniowe, po stanu wystąpienia przepływu pracy są zapisywane w pamięci. Jeśli nie ma usługi trwałości, zdarzenie jest zgłaszane w dalszym ciągu, ale nie jest zapisywana, wystąpienie przechodzi w stan. Jeśli <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> zdarzenie występuje, ponieważ wystąpienie przepływu pracy jest zwalniany, następuje <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zdarzeń.  
  
 Aby uzyskać <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> zawiera nadawcy zdarzeń, <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzonego ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak można użyć <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowPersisted`.  
  
 Ten przykład kodu jest częścią [przykładową usługę trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#279](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#279)]
 [!code-vb[WF_Samples#279](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#279)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowResumed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowResumed As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowResumed;" />
      <MemberSignature Language="F#" Value="member this.WorkflowResumed : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowResumed : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wykonywania wystąpienia przepływu pracy zostanie wznowione po zawieszeniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> zdarzeń bezpośrednio przed zaplanowanym wystąpienia przepływu pracy. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> Zdarzenie jest wywoływane, zwykle z powodu jawnym wywołaniem <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType>. Jednak aparatu środowiska wykonawczego przepływów pracy można czasowo zawiesić wystąpienia można wykonać operacji, na przykład, aby zastosować zmianę przepływu pracy. W tym przypadku <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> zdarzenie jest zgłaszane w przypadku środowiska uruchomieniowego wznawia działanie wystąpienia przepływu pracy po operacji.  
  
 Aby uzyskać <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> zawiera nadawcy zdarzeń, <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzonego ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak można użyć <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowResume`.  
  
 Ten przykład kodu jest częścią [wstrzymywanie i zakończyć przykładowe](http://go.microsoft.com/fwlink/?LinkId=157402).  
  
 [!code-csharp[WF_Samples#171](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#171)]
 [!code-vb[WF_Samples#171](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#171)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowStarted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowStarted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowStarted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowStarted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy została uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> zdarzenie po uruchomieniu wystąpienia przepływu pracy w planowaniu działania głównego do wykonania. Dla tego zdarzenia zawiera nadawcy <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzonego ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowStarted`.  
  
 Ten przykład kodu jest częścią [przykład komunikacji hosta](http://go.microsoft.com/fwlink/?LinkId=157406).  
  
 [!code-csharp[WF_Samples#297](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets38.cs#297)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowSuspended">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowSuspended As EventHandler(Of WorkflowSuspendedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowSuspendedEventArgs ^&gt; ^ WorkflowSuspended;" />
      <MemberSignature Language="F#" Value="member this.WorkflowSuspended : EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " Usage="member this.WorkflowSuspended : System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy jest zawieszone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy może zostać zawieszone przez hosta za pomocą wywołania <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> metoda dzięki <xref:System.Workflow.ComponentModel.SuspendActivity> działania lub niejawnie przez aparat środowiska wykonawczego przepływów pracy. Na przykład aparatu środowiska wykonawczego przepływów pracy tymczasowo wstrzymuje wystąpienie, gdy stosuje się dynamiczne zmiany do wystąpienia.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> zawiera nadawcy zdarzeń, <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> i ciąg opisujący przyczynę wystąpienie zostało wstrzymane.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowSuspended`.  
  
 Ten przykład kodu jest częścią [wstrzymywanie i zakończyć przykładowe](http://go.microsoft.com/fwlink/?LinkID=157402).  
  
 [!code-csharp[WF_Samples#170](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#170)]
 [!code-vb[WF_Samples#170](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowTerminated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowTerminated As EventHandler(Of WorkflowTerminatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowTerminatedEventArgs ^&gt; ^ WorkflowTerminated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowTerminated : EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " Usage="member this.WorkflowTerminated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy zostanie zakończony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przepływ pracy może zostać zakończone przez hosta za pomocą wywołania <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> metoda dzięki <xref:System.Workflow.ComponentModel.TerminateActivity> działania, lub przez aparat środowiska wykonawczego przepływów pracy po wystąpieniu nieobsługiwanego wyjątku. Aparat środowiska wykonawczego przepływów pracy zgłasza <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> zdarzeń po wystąpienia przepływu pracy zostanie zakończony, ale przed umieszczeniem w pamięci.  
  
 Dla <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> zawiera nadawcy zdarzeń, <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> i informacje o przyczynie wystąpienie zostało przerwane w <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception%2A?displayProperty=nameWithType> właściwości.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowCompleted`.  
  
 Ten przykład kodu jest częścią [anulowanie przepływu pracy](http://go.microsoft.com/fwlink/?LinkID=157346) próbki.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowUnloaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowUnloaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowUnloaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowUnloaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowUnloaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wystąpienie przepływu pracy jest usuwane z pamięci.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wystąpienie przepływu pracy może być zwolniony z pamięci przez jawne wywołanie <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>, lub niejawnie przez aparat środowiska wykonawczego przepływów pracy zgodnie z własną semantyki. Na przykład, aparatu środowiska wykonawczego przepływów pracy zwalnia wystąpienie przepływu pracy, jeśli wystąpienie staje się bezczynności i środowisko uruchomieniowe ma <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> dodane, dla którego <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle%2A> jest `true`.  
  
 Generuje aparatu środowiska wykonawczego przepływów pracy  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zdarzenie po pomyślnie trwały stan wystąpienia przepływu pracy, ale przed wystąpienia zostaje unieważniony w pamięci. W związku z tym <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> poprzedza zdarzeń <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zdarzeń.  
  
 Aby uzyskać <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> zawiera nadawcy zdarzeń, <xref:System.Workflow.Runtime.WorkflowRuntime> i <xref:System.Workflow.Runtime.WorkflowEventArgs> zawiera <xref:System.Workflow.Runtime.WorkflowInstance> skojarzonego ze zdarzeniem.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Consuming Events](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Workflow.Runtime.WorkflowRuntime> funkcje z hosta przepływu pracy. Kod kojarzy <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> za pomocą programu obsługi zdarzeń, metodę o nazwie `OnWorkflowUnload`.  
  
 Ten przykład kodu jest częścią [przykładową usługę trwałości niestandardowe](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>