<Type Name="TimerEventSubscriptionCollection" FullName="System.Workflow.Runtime.TimerEventSubscriptionCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="20a84a0916bca8fe7ce408d79d2dd461ef2a29c6" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69416937" /></Metadata><TypeSignature Language="C#" Value="public class TimerEventSubscriptionCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TimerEventSubscriptionCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class TimerEventSubscriptionCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimerEventSubscriptionCollection : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type TimerEventSubscriptionCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje uporządkowaną listę <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> obiektów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection> Reprezentuje kolejkęobiektówskojarzonychzwystąpieniemprzepływupracyiudostępniametody<xref:System.Workflow.Runtime.TimerEventSubscription> zarządzania tą kolejką. Subskrypcje są uporządkowane w kolejce na podstawie ich <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A> wartości; te z mniejszymi <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A> wartościami są umieszczane przed tymi <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A> z większymi wartościami. Możesz użyć metod dostarczonych przez tę klasę do zarządzania kolekcją aktywnych subskrypcji zdarzeń czasomierza ujawnionych przez <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.TimerCollectionProperty> dla każdego wystąpienia przepływu pracy. Możesz użyć <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Add%2A> lub <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove%2A> , aby dodać lub usunąć subskrypcje z kolejki czasomierza. Za każdym razem, gdy pierwszy element w kolejce czasomierza <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> zmienia się, jest wywoływana w celu anulowania zdarzenia czasomierza, które było wcześniej na początku kolejki, i Zaplanuj nowe zdarzenie czasomierza.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Workflow.Runtime.TimerEventSubscription item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Workflow.Runtime.TimerEventSubscription item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Add(System.Workflow.Runtime.TimerEventSubscription)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As TimerEventSubscription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Workflow::Runtime::TimerEventSubscription ^ item);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Workflow.Runtime.TimerEventSubscription -&gt; unit" Usage="timerEventSubscriptionCollection.Add item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Workflow.Runtime.TimerEventSubscription" />
      </Parameters>
      <Docs>
        <param name="item">, <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> Aby dodać do kolejki czasomierza.</param>
        <summary><see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> Dodaje do kolejki czasomierza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.TimerEventSubscription> Dodaje do kolejki czasomierza. Subskrypcje w kolejce są pozycjonowane na podstawie ich <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A?displayProperty=nameWithType> wartości; te o mniejszych wartościach są umieszczane przed nimi z większymi wartościami. Jeśli nowa subskrypcja zostanie dodana na początku kolejki, <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel%2A?displayProperty=nameWithType> jest wywoływana w celu anulowania zdarzenia czasomierza, które było wcześniej na początku kolejki i <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule%28System.Threading.WaitCallback%2CSystem.Guid%2CSystem.DateTime%2CSystem.Guid%29?displayProperty=nameWithType> jest wywoływana w celu zaplanowania nowego zdarzenia czasomierza. <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Add%2A>blokuje przed <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection> dodaniem nowej subskrypcji, w związku z czym wątek jest bezpieczny.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="item" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="timerEventSubscriptionCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Jednowymiarowy <see cref="T:System.Array" /> , który jest miejscem docelowym elementów skopiowanych <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />z. <see cref="T:System.Array" /> Musi mieć indeksowanie oparte na zero.</param>
        <param name="index">Indeks (liczony od zera) <paramref name="array" /> , w którym rozpoczyna się kopiowanie.</param>
        <summary>Kopiuje elementy do istniejących jednowymiarowych <see cref="T:System.Array" />, rozpoczynając od określonego indeksu tablicy. <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.CopyTo%2A>jest bezpieczny wątkowo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.TimerEventSubscriptionCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Workflow.Runtime.TimerEventSubscriptionCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> obiektów w kolejce czasomierza.</summary>
        <value>Liczba <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> obiektów w kolejce.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="timerEventSubscriptionCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który wykonuje iterację przez <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> Dla .<see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostęp do programu <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection> jest zsynchronizowany; jednak Wyliczanie za pomocą kolekcji nie jest wewnętrznie procedurą bezpiecznego wątku. Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli w kolekcji zostaną wprowadzone zmiany, takie jak dodanie, zmodyfikowanie czy usunięcie elementów, moduł wyliczający jest nieodwracalnie unieważniany, a jego zachowanie staje się niezdefiniowane. Moduł wyliczający nie ma wyłącznego dostępu do kolekcji; w związku z tym Wyliczanie za pomocą kolekcji nie jest w sposób bezpieczny dla wątków. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection> całe Wyliczenie przy użyciu. <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.TimerEventSubscriptionCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Workflow.Runtime.TimerEventSubscriptionCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy dostęp do <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /> elementu jest synchronizowany (bezpieczny wątkowo).</summary>
        <value>Zawsze zwraca <see langword="true" /> informację o tym, <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /> że dostęp do programu jest synchronizowany (bezpieczny wątkowo).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dostęp do programu <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection> jest zsynchronizowany; jednak Wyliczanie za pomocą kolekcji nie jest wewnętrznie procedurą bezpiecznego wątku. Nawet gdy kolekcja jest synchronizowana, inne wątki nadal mogą ją modyfikować. Powoduje to zgłaszanie wyjątku przez moduł wyliczający. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania albo rejestrować wyjątki wynikłe ze zmian wprowadzanych przez inne wątków. <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot%2A>zwraca obiekt, który może służyć do synchronizowania dostępu do <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection>elementu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.TimerEventSubscription Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.TimerEventSubscription Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As TimerEventSubscription" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::TimerEventSubscription ^ Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; System.Workflow.Runtime.TimerEventSubscription" Usage="timerEventSubscriptionCollection.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.TimerEventSubscription</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> Zwraca na początku kolejki czasomierza bez usuwania.</summary>
        <returns>Na początku kolejki czasomierza lub odwołania o wartości null (<see langword="Nothing" /> w Visual Basic), jeśli kolejka czasomierza jest pusta. <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Peek%2A>jest bezpieczny wątkowo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Usuwa określony <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> z kolejki czasomierza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (Guid timerSubscriptionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(valuetype System.Guid timerSubscriptionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (timerSubscriptionId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(Guid timerSubscriptionId);" />
      <MemberSignature Language="F#" Value="member this.Remove : Guid -&gt; unit" Usage="timerEventSubscriptionCollection.Remove timerSubscriptionId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timerSubscriptionId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="timerSubscriptionId"><see cref="T:System.Guid" /> Z<see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> elementu do usunięcia.</param>
        <summary><see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> Usuwa, który ma określony identyfikator subskrypcji z kolejki czasomierza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.TimerEventSubscription> Usuwa z kolejki czasomierza z określonym identyfikatorem subskrypcji. Subskrypcje w kolejce są pozycjonowane na podstawie ich <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A?displayProperty=nameWithType> wartości; te o mniejszych wartościach są umieszczane przed nimi z większymi wartościami. Jeśli subskrypcja została usunięta na początku kolejki, <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel%2A?displayProperty=nameWithType> jest wywoływana w celu anulowania zdarzenia czasomierza skojarzonego z tą subskrypcją i <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule%28System.Threading.WaitCallback%2CSystem.Guid%2CSystem.DateTime%2CSystem.Guid%29?displayProperty=nameWithType> jest wywoływana w celu zaplanowania zdarzenia czasomierza dla subskrypcji, która jest teraz w początek kolejki. <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove%28System.Guid%29>jest bezpieczny wątkowo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Workflow.Runtime.TimerEventSubscription item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Workflow.Runtime.TimerEventSubscription item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove(System.Workflow.Runtime.TimerEventSubscription)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (item As TimerEventSubscription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Workflow::Runtime::TimerEventSubscription ^ item);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Workflow.Runtime.TimerEventSubscription -&gt; unit" Usage="timerEventSubscriptionCollection.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Workflow.Runtime.TimerEventSubscription" />
      </Parameters>
      <Docs>
        <param name="item"><see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> Do usunięcia z kolejki czasomierza.</param>
        <summary><see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> Usuwa z kolejki czasomierza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.TimerEventSubscription> Usuwa z kolejki czasomierza. Subskrypcje w kolejce są pozycjonowane na podstawie ich <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt%2A?displayProperty=nameWithType> wartości; te o mniejszych wartościach są umieszczane przed nimi z większymi wartościami. Jeśli subskrypcja została usunięta na początku kolejki, <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel%2A?displayProperty=nameWithType> jest wywoływana w celu anulowania zdarzenia czasomierza skojarzonego z tą subskrypcją i <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule%28System.Threading.WaitCallback%2CSystem.Guid%2CSystem.DateTime%2CSystem.Guid%29?displayProperty=nameWithType> jest wywoływana w celu zaplanowania zdarzenia czasomierza dla subskrypcji, która jest teraz w początek kolejki. <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove%28System.Guid%29>jest bezpieczny wątkowo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="item" />jest odwołaniem o wartości<see langword="Nothing" /> null (w Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</summary>
        <value>Obiekt służący do synchronizowania dostępu do <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot%2A>zwraca obiekt, który może służyć do synchronizowania dostępu do <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection>elementu.  
  
 Dostęp do programu <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection> jest zsynchronizowany; jednak Wyliczanie za pomocą kolekcji nie jest wewnętrznie procedurą bezpiecznego wątku. Nawet gdy kolekcja jest synchronizowana, inne wątki nadal mogą ją modyfikować. Powoduje to zgłaszanie wyjątku przez moduł wyliczający. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection> całe Wyliczenie przy użyciu <xref:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot%2A> lub przechwytywać wyjątki pochodzące ze zmian wprowadzonych przez inne wątki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimerCollectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty TimerCollectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty TimerCollectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Runtime.TimerEventSubscriptionCollection.TimerCollectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TimerCollectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Workflow::ComponentModel::DependencyProperty ^ TimerCollectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TimerCollectionProperty : System.Workflow.ComponentModel.DependencyProperty" Usage="System.Workflow.Runtime.TimerEventSubscriptionCollection.TimerCollectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Kolejka czasomierza skojarzona z wystąpieniem przepływu pracy. Ta Kolejka zawiera obiekty <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> uporządkowane według czasu dla przepływu pracy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
