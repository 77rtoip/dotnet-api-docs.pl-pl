<Type Name="WorkflowQueue" FullName="System.Workflow.Runtime.WorkflowQueue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bf42065902a00030519f7093e3b4acb485264b92" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39821346" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WorkflowQueue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WorkflowQueue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowQueue" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowQueue" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowQueue" />
  <TypeSignature Language="F#" Value="type WorkflowQueue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje kolejkę z przepływu pracy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Kolejki przepływu pracy są używane do przekazywania wiadomości między hostem lub usługi hosta i działania w przepływie pracy. Można tworzyć dowolne działanie <xref:System.Workflow.Runtime.WorkflowQueue> przez wywołanie metody <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A?displayProperty=nameWithType>, a hosta, usługi lub innego działania może wywołać <xref:System.Workflow.Runtime.WorkflowQueue.Enqueue%2A> próbę dodania elementu do tego <xref:System.Workflow.Runtime.WorkflowQueue>. Można subskrybować <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> zdarzenie, aby otrzymywać powiadomienia, gdy element dociera przy użyciu <xref:System.Workflow.Runtime.WorkflowQueue>. Możesz użyć <xref:System.Workflow.Runtime.WorkflowQueue.Peek%2A> do sprawdzenia elementu na początku <xref:System.Workflow.Runtime.WorkflowQueue> i <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> można usunąć elementu z <xref:System.Workflow.Runtime.WorkflowQueue>. Każdy <xref:System.Workflow.Runtime.WorkflowQueue> jest skojarzony z <xref:System.Workflow.Runtime.WorkflowQueuingService> służące do wykonywania innych operacji zarządzania na <xref:System.Workflow.Runtime.WorkflowQueue>, np. usunięcie kolejki. <xref:System.Workflow.Runtime.WorkflowQueue.QueuingService%2A> udostępnia <xref:System.Workflow.Runtime.WorkflowQueuingService> skojarzony z tym <xref:System.Workflow.Runtime.WorkflowQueue>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak utworzyć <xref:System.Workflow.Runtime.WorkflowQueue> przez wywołanie metody <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType> metody. Korzysta również <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> właściwości w celu określenia, czy istnieją komunikaty w kolejce bieżącego. Na koniec kod używa <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> metodę, aby usunąć i zwrócić pierwszy obiekt w kolejce.  
  
 Ten przykład kodu jest częścią próbki plików obserwatora działania zestawu SDK z pliku FileSystemEvent.cs. Aby uzyskać więcej informacji, zobacz [aktywności obserwatora systemu plików](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#227](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#227)]
 [!code-vb[WF_Samples#227](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#227)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowQueue.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Workflow.Runtime.WorkflowQueue.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę elementów zawartych w <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <value>Liczba elementów w kolejce przepływu pracy.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, jak utworzyć <xref:System.Workflow.Runtime.WorkflowQueue> przez wywołanie metody <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType> metody. Korzysta również <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> właściwości w celu określenia, czy istnieją komunikaty w kolejce bieżącego. Na koniec kod używa <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> metodę, aby usunąć i zwrócić pierwszy obiekt w kolejce.  
  
 Ten przykład kodu jest częścią próbki plików obserwatora działania zestawu SDK z pliku FileSystemEvent.cs. Aby uzyskać więcej informacji, zobacz [aktywności obserwatora systemu plików](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#227](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#227)]
 [!code-vb[WF_Samples#227](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#227)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public object Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Function Dequeue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Dequeue();" />
      <MemberSignature Language="F#" Value="member this.Dequeue : unit -&gt; obj" Usage="workflowQueue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa i zwraca obiekt na początku <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <returns>Obiekt, który zostanie usunięta z początku <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz sprawdzić <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> ustalenie, czy <xref:System.Workflow.Runtime.WorkflowQueue> jest pusta, przed wywołaniem <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A>, lub można przechwycić <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak utworzyć <xref:System.Workflow.Runtime.WorkflowQueue> przez wywołanie metody <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType> metody. Korzysta również <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> właściwości w celu określenia, czy istnieją komunikaty w kolejce bieżącego. Na koniec kod używa <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> metodę, aby usunąć i zwrócić pierwszy obiekt w kolejce.  
  
 Ten przykład kodu jest częścią próbki plików obserwatora działania zestawu SDK z pliku FileSystemEvent.cs. Aby uzyskać więcej informacji, zobacz [aktywności obserwatora systemu plików](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#227](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#227)]
 [!code-vb[WF_Samples#227](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#227)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> Jest pusty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowQueue.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Workflow.Runtime.WorkflowQueue.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> jest włączona.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> są włączone; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="member this.Enqueue : obj -&gt; unit" Usage="workflowQueue.Enqueue item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Obiekt do dodania do <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
        <summary>Dodaje obiekt na koniec <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> Nie jest włączona.</exception>
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public object Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; obj" Usage="workflowQueue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca obiekt na początku <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> bez usuwania go.</summary>
        <returns>Obiekt na początku <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest podobna do <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> metody, ale <xref:System.Workflow.Runtime.WorkflowQueue.Peek%2A> nie modyfikuje <xref:System.Workflow.Runtime.WorkflowQueue>. Możesz sprawdzić <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> ustalenie, czy <xref:System.Workflow.Runtime.WorkflowQueue> jest pusta, przed wywołaniem <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A>, lub można przechwycić <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> Jest pusty.</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueItemArrived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; QueueItemArrived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; QueueItemArrived" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueueItemArrived As EventHandler(Of QueueEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ QueueItemArrived;" />
      <MemberSignature Language="F#" Value="member this.QueueItemArrived : EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; " Usage="member this.QueueItemArrived : System.EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy element jest dostarczana w tym <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest używana tylko na potrzeby przetwarzania, która musi wystąpić synchronicznie przy użyciu dostarczanie zdarzeń do wystąpienia przepływu pracy. Program obsługi zdarzeń może być wykonywane w wątku niezwiązanej z przepływem pracy, dzięki czemu dostęp do wszystkich udostępnionych obiektu przepływu pracy, na przykład dowolny <xref:System.Workflow.ComponentModel.DependencyObject>, muszą być chronione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueItemAvailable">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; QueueItemAvailable;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; QueueItemAvailable" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueueItemAvailable As EventHandler(Of QueueEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ QueueItemAvailable;" />
      <MemberSignature Language="F#" Value="member this.QueueItemAvailable : EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; " Usage="member this.QueueItemAvailable : System.EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy element jest dostępny na tym <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> Zdarzenie jest zgłaszane w sposób asynchroniczny. Nadawcy dla <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> zdarzeń będzie <xref:System.Workflow.ComponentModel.ActivityExecutionContext> z subskrypcji <xref:System.Workflow.ComponentModel.Activity>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueName">
      <MemberSignature Language="C#" Value="public IComparable QueueName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IComparable QueueName" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowQueue.QueueName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueName As IComparable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IComparable ^ QueueName { IComparable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueName : IComparable" Usage="System.Workflow.Runtime.WorkflowQueue.QueueName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IComparable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę kolejki przepływu pracy.</summary>
        <value>Nazwa <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kolejki przepływu pracy jest ustawiony <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuingService">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowQueuingService QueuingService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowQueuingService QueuingService" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowQueue.QueuingService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueuingService As WorkflowQueuingService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::WorkflowQueuingService ^ QueuingService { System::Workflow::Runtime::WorkflowQueuingService ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QueuingService : System.Workflow.Runtime.WorkflowQueuingService" Usage="System.Workflow.Runtime.WorkflowQueue.QueuingService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowQueuingService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera usługę kolejkowania skojarzony z tym <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <value>A <see cref="T:System.Workflow.Runtime.WorkflowQueuingService" /> reprezentujący Usługa kolejkowania skojarzony z tym <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterForQueueItemArrived">
      <MemberSignature Language="C#" Value="public void RegisterForQueueItemArrived (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForQueueItemArrived(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForQueueItemArrived (eventListener As IActivityEventListener(Of QueueEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForQueueItemArrived(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener);" />
      <MemberSignature Language="F#" Value="member this.RegisterForQueueItemArrived : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; -&gt; unit" Usage="workflowQueue.RegisterForQueueItemArrived eventListener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="eventListener">Subskrybent dla serwera <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> implementującej <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interfejsu.</param>
        <summary>Rejestruje subskrybentom <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForQueueItemAvailable">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje subskrybentom <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć przeciążonej <xref:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable%2A> metody do rejestrowania subskrybenta dla <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> zdarzeń. <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> Zdarzeń jest używana w celu powiadamiania subskrybentów, którzy element został dostarczony (w sposób asynchroniczny) do tego <xref:System.Workflow.Runtime.WorkflowQueue>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForQueueItemAvailable">
      <MemberSignature Language="C#" Value="public void RegisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForQueueItemAvailable(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForQueueItemAvailable (eventListener As IActivityEventListener(Of QueueEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForQueueItemAvailable(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener);" />
      <MemberSignature Language="F#" Value="member this.RegisterForQueueItemAvailable : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; -&gt; unit" Usage="workflowQueue.RegisterForQueueItemAvailable eventListener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="eventListener">Subskrybent dla serwera <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> implementującej <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interfejsu.</param>
        <summary>Rejestruje subskrybentom <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, jak utworzyć <xref:System.Workflow.Runtime.WorkflowQueue> przez wywołanie metody <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType> metody. Korzysta również <xref:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable%2A> można zarejestrować określonego odbiornika.  
  
 Ten przykład kodu jest częścią próbki plików obserwatora działania zestawu SDK z pliku FileSystemEvent.cs. Aby uzyskać więcej informacji, zobacz [aktywności obserwatora systemu plików](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#225](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#225)]
 [!code-vb[WF_Samples#225](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#225)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventListener" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterForQueueItemAvailable">
      <MemberSignature Language="C#" Value="public void RegisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener, string subscriberQualifiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForQueueItemAvailable(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener, string subscriberQualifiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForQueueItemAvailable (eventListener As IActivityEventListener(Of QueueEventArgs), subscriberQualifiedName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForQueueItemAvailable(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener, System::String ^ subscriberQualifiedName);" />
      <MemberSignature Language="F#" Value="member this.RegisterForQueueItemAvailable : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; * string -&gt; unit" Usage="workflowQueue.RegisterForQueueItemAvailable (eventListener, subscriberQualifiedName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
        <Parameter Name="subscriberQualifiedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventListener">Subskrybent dla serwera <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> implementującej <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interfejsu.</param>
        <param name="subscriberQualifiedName">
          <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> Działanie, które subskrybuje <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> zdarzenia lub odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</param>
        <summary>Rejestruje subskrybentom <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli kwalifikowana nazwa subskrybującą działania jest dostarczana przez `subscriberQualifiedName`, jest zwracany w <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> z <xref:System.Workflow.Runtime.WorkflowQueueInfo> skojarzone z tą kolejką podczas <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A?displayProperty=nameWithType> jest wywoływana.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventListener" /> to odwołanie o wartości null (<see langword="Nothing" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="UnregisterForQueueItemArrived">
      <MemberSignature Language="C#" Value="public void UnregisterForQueueItemArrived (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterForQueueItemArrived(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterForQueueItemArrived (eventListener As IActivityEventListener(Of QueueEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterForQueueItemArrived(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener);" />
      <MemberSignature Language="F#" Value="member this.UnregisterForQueueItemArrived : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; -&gt; unit" Usage="workflowQueue.UnregisterForQueueItemArrived eventListener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="eventListener">Subskrybent dla serwera <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> implementującej <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interfejsu.</param>
        <summary>Wyrejestrowuje subskrybentom <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest zarezerwowana tylko do użytku wewnętrznego.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventListener" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="UnregisterForQueueItemAvailable">
      <MemberSignature Language="C#" Value="public void UnregisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterForQueueItemAvailable(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterForQueueItemAvailable (eventListener As IActivityEventListener(Of QueueEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterForQueueItemAvailable(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener);" />
      <MemberSignature Language="F#" Value="member this.UnregisterForQueueItemAvailable : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; -&gt; unit" Usage="workflowQueue.UnregisterForQueueItemAvailable eventListener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="eventListener">Subskrybent dla serwera <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> implementującej <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interfejsu.</param>
        <summary>Wyrejestrowuje subskrybentom <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje, jak utworzyć <xref:System.Workflow.Runtime.WorkflowQueue> przez wywołanie metody <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType> metody. Korzysta również <xref:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable%2A> wyrejestrować określony odbiornik.  
  
 Ten przykład kodu jest częścią próbki plików obserwatora działania zestawu SDK z pliku FileSystemEvent.cs. Aby uzyskać więcej informacji, zobacz [aktywności obserwatora systemu plików](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#226](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#226)]
 [!code-vb[WF_Samples#226](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#226)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventListener" /> to odwołanie o wartości null (<see langword="Nothing" /> w języku Visual Basic).</exception>
      </Docs>
    </Member>
  </Members>
</Type>