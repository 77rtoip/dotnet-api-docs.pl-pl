<Type Name="DbBinaryExpression" FullName="System.Data.Common.CommandTrees.DbBinaryExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc4a7181427f546aa8caf0f27a050e2daf37d852" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69377906" /></Metadata><TypeSignature Language="C#" Value="public abstract class DbBinaryExpression : System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbBinaryExpression extends System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.CommandTrees.DbBinaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbBinaryExpression&#xA;Inherits DbExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbBinaryExpression abstract : System::Data::Common::CommandTrees::DbExpression" />
  <TypeSignature Language="F#" Value="type DbBinaryExpression = class&#xA;    inherit DbExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.CommandTrees.DbExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Implementuje podstawowe funkcje wymagane przez wyrażenia akceptujące dwa operandy wyrażenia.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression Left" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbBinaryExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As DbExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::CommandTrees::DbExpression ^ Left { System::Data::Common::CommandTrees::DbExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Left : System.Data.Common.CommandTrees.DbExpression" Usage="System.Data.Common.CommandTrees.DbBinaryExpression.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> określającą lewy argument.</summary>
        <value><see cref="T:System.Data.Common.CommandTrees.DbExpression" /> Definiuje lewy argument.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy wyrażeń pochodnych mogą wykonywać bardziej rygorystyczne operacje sprawdzania typu <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Left%2A> , gdy właściwość jest ustawiona. Na przykład program <xref:System.Data.Common.CommandTrees.DbUnionAllExpression> wymaga, aby jego lewe wyrażenie miało typ wyniku kolekcji, <xref:System.Data.Common.CommandTrees.DbAndExpression> podczas gdy wymaga typu wyniku logicznego. Zazwyczaj typy wyrażeń pochodnych nie zezwalają <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Left%2A> na ustawienie na wyrażenie z typem wyniku, który nie jest równy lub promocyjny do typu wyniku bieżącej wartości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wyrażenie jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Wyrażenie nie jest skojarzone z drzewem <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />poleceń, 
lub jego typ wyniku nie jest równy ani nie jest awansowany do wymaganego typu dla lewego argumentu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression Right" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbBinaryExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As DbExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::CommandTrees::DbExpression ^ Right { System::Data::Common::CommandTrees::DbExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : System.Data.Common.CommandTrees.DbExpression" Usage="System.Data.Common.CommandTrees.DbBinaryExpression.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> , który definiuje prawy argument.</summary>
        <value><see cref="T:System.Data.Common.CommandTrees.DbExpression" /> Definiuje prawy argument.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typy wyrażeń pochodnych mogą wykonywać bardziej rygorystyczne operacje sprawdzania typu <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Right%2A> , gdy właściwość jest ustawiona. Na przykład <xref:System.Data.Common.CommandTrees.DbUnionAllExpression> wymaga, aby wyrażenie Right ma typ wyniku kolekcji, podczas gdy <xref:System.Data.Common.CommandTrees.DbAndExpression> wymaga typu wyniku Boolean. Zazwyczaj typy wyrażeń pochodnych nie zezwalają <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Right%2A> na ustawienie na wyrażenie z typem wyniku, który nie jest równy lub promocyjny do typu wyniku bieżącej wartości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wyrażenie jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Wyrażenie nie jest skojarzone z drzewem <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />poleceń, 
lub jego typ wyniku nie jest równy ani nie jest awansowany do wymaganego typu dla prawego argumentu.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
