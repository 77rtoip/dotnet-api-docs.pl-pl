<Type Name="SchemaImporterExtension" FullName="System.Xml.Serialization.Advanced.SchemaImporterExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="21c3d9e7b9db2de34ad51b9272396d2b292e67c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36440854" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SchemaImporterExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SchemaImporterExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SchemaImporterExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SchemaImporterExtension abstract" />
  <TypeSignature Language="F#" Value="type SchemaImporterExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Umożliwia dostosowanie kod wygenerowany z dokumentu Web Services Description Language (WSDL), korzystając z narzędzia zapytanie zautomatyzowane.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Import schematu występuje zawsze, gdy serwer proxy usługi sieci Web jest generowany przy użyciu narzędzia, takie jak okna dialogowego Dodaj odwołanie sieci Web w programie Visual Studio lub za pomocą pola [narzędzia języka opisu usługi sieci Web (Wsdl.exe)](http://msdn.microsoft.com/library/b9210348-8bc2-4367-8c91-d1a04b403e88). Import schematu występuje także, gdy za pomocą [narzędzie definicji schematu XML (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md) do generowania kodu z określonego dokumentu XSD.  
  
 <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> Klasy można zmodyfikować kod wygenerowany przy użyciu dowolnego z tych narzędzi. Na przykład masz istniejącej klasy czy porządkuje książki procesów w systemie i czy masz istniejącego dokumentu XSD, który dostarcza zamówienia. Przy użyciu <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> klasy, można włączyć jedno z narzędzi do generowania kodu, który używa klasy.  
  
 Aby kontrolować generowania kodu, należy użyć klasy w <xref:System.CodeDom> przestrzeni nazw. Aby uzyskać więcej informacji, zobacz [za pomocą modelu CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) i [CodeDOM krótkimi opisami](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
 Kroki umożliwiające włączenie narzędzie WSDL.exe (która z kolei jest używana przez innych narzędzi, takich jak okno dialogowe Dodaj odwołanie sieci Web) Aby użyć rozszerzenia są:  
  
1.  Utwórz implementacja <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> klasy.  
  
2.  Użyj <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%2A> metody do pisania kodu dla generatora kodu. Metoda zawiera parametry, które można zbadać przechwycone typu XSD i tworzyć CodeDOM obiektów, które są używane do generowania nowego kodu CLR.  
  
3.  Jeśli jest to wymagane, użyj <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement%2A> można obsłużyć \<xsd: wszystkie > elementy znalezione w dokumentacji XSD.  
  
4.  Jeśli jest to wymagane, użyj <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue%2A> metody do sprawdzenia wartości domyślne znalezione w dokumentacji XSD i zwrotu innej wartości domyślnej.  
  
5.  Kompiluj rozszerzenie do biblioteki.  
  
6.  Podpisz zestaw.  
  
7.  Instalowanie zestawu w globalnej pamięci podręcznej zestawów (GAC).  
  
8.  Modyfikowanie pliku machine.config, aby uwzględnić rozszerzenia.  
  
   
  
## Examples  
 Zobacz [Przykładowy element SchemaImporterExtension technologii](~/docs/standard/serialization/schemaimporterextension-technology-sample.md). Zwróć uwagę, że w tym przykładzie nie obejmuje podpisanych zestawów. Zamiast tego należy go przedstawiono sposób użycia <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> z okna poleceń.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SchemaImporterExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SchemaImporterExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAnyElement">
      <MemberSignature Language="C#" Value="public virtual string ImportAnyElement (System.Xml.Schema.XmlSchemaAny any, bool mixed, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportAnyElement(class System.Xml.Schema.XmlSchemaAny any, bool mixed, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement(System.Xml.Schema.XmlSchemaAny,System.Boolean,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportAnyElement (any As XmlSchemaAny, mixed As Boolean, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportAnyElement(System::Xml::Schema::XmlSchemaAny ^ any, bool mixed, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberSignature Language="F#" Value="abstract member ImportAnyElement : System.Xml.Schema.XmlSchemaAny * bool * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string&#xA;override this.ImportAnyElement : System.Xml.Schema.XmlSchemaAny * bool * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="schemaImporterExtension.ImportAnyElement (any, mixed, schemas, importer, compileUnit, mainNamespace, options, codeProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="any" Type="System.Xml.Schema.XmlSchemaAny" />
        <Parameter Name="mixed" Type="System.Boolean" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="any">
          <see cref="T:System.Xml.Schema.XmlSchemaAny" /> Reprezentujący <see langword="xsd:any" /> znaleziono element w dokumencie schematu XML (XSD).</param>
        <param name="mixed">A <see cref="T:System.Boolean" /> wskazujące, czy XSD <see langword="complex" /> atrybut został ustawiony na "mieszany". <see langword="true" />, jeśli atrybut została ustawiona do mieszanych, w przeciwnym razie <see langword="false" />.</param>
        <param name="schemas">
          <see cref="T:System.Xml.Serialization.XmlSchemas" /> Zawierający kolekcję schematów w XSD.</param>
        <param name="importer">
          <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> Czyli importera używane.</param>
        <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> do której można dodać struktury CodeDOM do generowania kodu alternatywnej dla schematu XSD.</param>
        <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> reprezentujący bieżącej przestrzeni nazw dla elementu.</param>
        <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> dla opcji ustawienia na kompilatora kodu.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> czyli dostawcy CodeDOM służący do generowania nowego kodu.</param>
        <summary>Obsługuje import &lt;xsd: wszystkie&gt; elementy w schemacie.</summary>
        <returns>Nazwa elementu mapowana na typie CLR.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby kontrolować generowania kodu, należy użyć klasy w <xref:System.CodeDom> przestrzeni nazw. Aby uzyskać więcej informacji, zobacz [za pomocą modelu CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) i [CodeDOM krótkimi opisami](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDefaultValue">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeExpression ImportDefaultValue (string value, string type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression ImportDefaultValue(string value, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportDefaultValue (value As String, type As String) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeExpression ^ ImportDefaultValue(System::String ^ value, System::String ^ type);" />
      <MemberSignature Language="F#" Value="abstract member ImportDefaultValue : string * string -&gt; System.CodeDom.CodeExpression&#xA;override this.ImportDefaultValue : string * string -&gt; System.CodeDom.CodeExpression" Usage="schemaImporterExtension.ImportDefaultValue (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Wartość w oryginalnym XSD.</param>
        <param name="type">Nazwa typu XSD.</param>
        <summary>Można określić wartość domyślna dla typu XSD zostały zaimportowane.</summary>
        <returns>A <see cref="T:System.CodeDom.CodeExpression" /> ustawienie nową wartością domyślną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby kontrolować generowania kodu, należy użyć klasy w <xref:System.CodeDom> przestrzeni nazw. Aby uzyskać więcej informacji, zobacz [za pomocą modelu CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) i [CodeDOM krótkimi opisami](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ImportSchemaType">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Służy do manipulowania kod wygenerowany przez badanie zaimportowanego schematu i określenie typu CLR mapowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano prosty implementacja <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> metody. Kod sprawdza przestrzeń nazw i nazwę. Po prawej wartości zostaną znalezione, dodaje nazwę niestandardowego zestawu ("Order.dll"), który musi odwoływać się w wygenerowanym kodzie. Dodaje nowy obszar nazw ("Microsoft.Samples"), który jest generowany w kodzie.  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (System.Xml.Schema.XmlSchemaType type, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(class System.Xml.Schema.XmlSchemaType type, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (type As XmlSchemaType, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::Xml::Schema::XmlSchemaType ^ type, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberSignature Language="F#" Value="abstract member ImportSchemaType : System.Xml.Schema.XmlSchemaType * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string&#xA;override this.ImportSchemaType : System.Xml.Schema.XmlSchemaType * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="schemaImporterExtension.ImportSchemaType (type, context, schemas, importer, compileUnit, mainNamespace, options, codeProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.Schema.XmlSchemaType" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Xml.Schema.XmlSchemaType" /> Reprezentujący typ XSD.</param>
        <param name="context">
          <see cref="T:System.Xml.Schema.XmlSchemaObject" /> Reprezentujący informacji o schemacie, takich jak numer wiersza elementu XML.</param>
        <param name="schemas">
          <see cref="T:System.Xml.Serialization.XmlSchemas" /> Zawierający kolekcję schematów w dokumencie.</param>
        <param name="importer">
          <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> Czyli importera używane.</param>
        <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> do której można dodać struktury CodeDOM do generowania kodu alternatywnej dla schematu XSD.</param>
        <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> reprezentujący bieżącej przestrzeni nazw dla elementu.</param>
        <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> dla opcji ustawienia na kompilatora kodu.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> używany do generowania nowego kodu.</param>
        <summary>Służy do manipulowania kod wygenerowany przez badanie zaimportowanego schematu i określenie typu CLR mapowania.</summary>
        <returns>Nazwa to mapowana na typie CLR.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie pokazano prosty implementacja <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> metody. Kod sprawdza przestrzeń nazw i nazwę. Po prawej wartości zostaną znalezione, dodaje nazwę niestandardowego zestawu ("Order.dll"), który musi odwoływać się w wygenerowanym kodzie. Dodaje nowy obszar nazw ("Microsoft.Samples"), który jest generowany w kodzie.  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (string name, string ns, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(string name, string ns, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (name As String, ns As String, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::String ^ name, System::String ^ ns, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberSignature Language="F#" Value="abstract member ImportSchemaType : string * string * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string&#xA;override this.ImportSchemaType : string * string * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="schemaImporterExtension.ImportSchemaType (name, ns, context, schemas, importer, compileUnit, mainNamespace, options, codeProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa elementu.</param>
        <param name="ns">Przestrzeń nazw elementu.</param>
        <param name="context">
          <see cref="T:System.Xml.Schema.XmlSchemaObject" /> Reprezentujący informacji o schemacie, takich jak numer wiersza elementu XML.</param>
        <param name="schemas">
          <see cref="T:System.Xml.Serialization.XmlSchemas" /> Zawierający kolekcję schematów w dokumencie.</param>
        <param name="importer">
          <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> Czyli importera używane.</param>
        <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> do której można dodać struktury CodeDOM do generowania kodu alternatywnej dla schematu XSD.</param>
        <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> reprezentujący bieżącej przestrzeni nazw dla elementu.</param>
        <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> dla opcji ustawienia na kompilatora kodu.</param>
        <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> używany do generowania nowego kodu.</param>
        <summary>Służy do manipulowania kod wygenerowany przez badanie zaimportowanego schematu i określenie typu CLR mapowania.</summary>
        <returns>Nazwa to mapowana na typie CLR.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby kontrolować generowania kodu, należy użyć klasy w <xref:System.CodeDom> przestrzeni nazw. Aby uzyskać więcej informacji, zobacz [za pomocą modelu CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) i [CodeDOM krótkimi opisami](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano prosty implementacja <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> metody. Kod sprawdza przestrzeń nazw i nazwę. Po prawej wartości zostaną znalezione, dodaje nazwę niestandardowego zestawu ("Order.dll"), który musi odwoływać się w wygenerowanym kodzie. Dodaje nowy obszar nazw ("Microsoft.Samples"), który jest generowany w kodzie.  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>