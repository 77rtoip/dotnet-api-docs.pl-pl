<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="913095c948a0f811fb289c8871bb8becef77bf72" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36441576" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera pamięci podręcznej schematu XML definition language (XSD) schematów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   Nie należy używać schematów z nieznaną lub niezaufaną źródeł lub lokalizacji. W ten sposób spowoduje naruszenie zabezpieczeń kodu.  
> -   Schematy XML (w tym wbudowane schematy) są z założenia podatne na ataki; nie akceptuje tych postanowień w scenariuszach niezaufanych.  
> -   Komunikaty o błędach weryfikacji schematu i wyjątków może narazić poufnych informacji o modelu zawartości lub identyfikator URI ścieżki do pliku schematu. Nie można więc ujawnić te informacje dotyczące obiektów wywołujących niezaufanych.  
> -   Zagadnienia dotyczące zabezpieczeń są przedstawione w sekcji "Zagadnienia dotyczące zabezpieczeń".  
  
 <xref:System.Xml.Schema.XmlSchemaSet> to pamięci podręcznej lub biblioteka przechowywania schematu XML definition language (XSD) schematów. <xref:System.Xml.Schema.XmlSchemaSet> zwiększa wydajność, buforując schematów w pamięci zamiast dostępu do nich z pliku lub adres URL. Każdego schematu jest identyfikowany przez identyfikator URI przestrzeni nazw i lokalizacji, która została określona, jeśli schemat został dodany do zestawu. Możesz użyć <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType> właściwość do przypisania <xref:System.Xml.Schema.XmlSchemaSet> obiektu na potrzeby sprawdzania poprawności danych należy używać modułu odczytującego XML.  
  
## <a name="security-considerations"></a>Zagadnienia dotyczące zabezpieczeń  
  
-   Nie należy używać schematów z nieznaną lub niezaufaną źródeł. W ten sposób spowoduje naruszenie zabezpieczeń kodu. Zewnętrzne przestrzeni nazw lub lokalizacji, do której odwołuje się uwzględnić, importowania i ponowne definiowanie elementów schematu są rozwiązywane względem podstawowy identyfikator URI schematu, która obejmuje lub importowane. Na przykład, jeśli podstawowy identyfikator URI, włączając lub importowanie schematu jest pusta lub `null`, lokalizacji zewnętrznych zostały rozwiązane względem bieżącego katalogu. <xref:System.Xml.XmlUrlResolver> Klasy jest używany do rozpoznawania schematów zewnętrznych domyślnie. Aby wyłączyć rozpoznawanie include, importu i ponownie zdefiniować elementów schematu, ustaw <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> właściwości `null`.  
  
-   <xref:System.Xml.Schema.XmlSchemaSet> Klasy używa <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> klasę do analizowania i dopasowanie wyrażeń regularnych w schematu XML. Sprawdzanie poprawności zestawów reguł wzorca za pomocą wyrażeń regularnych w schemacie XML mogą powodować zwiększone użycie procesora CPU i należy unikać w scenariuszach wysokiej dostępności.  
  
-   Wyjątki zgłoszone w wyniku użycia <xref:System.Xml.Schema.XmlSchemaSet> klas, takich jak <xref:System.Xml.Schema.XmlSchemaException> klasy mogą zawierać poufne informacje, które nie powinny zostać ujawnione w scenariuszach niezaufanych. Na przykład <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> właściwość <xref:System.Xml.Schema.XmlSchemaException> zwraca identyfikator URI ścieżkę do pliku schematu, który spowodował wyjątek. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Właściwości nie powinny zostać ujawnione w scenariuszach niezaufanych. Wyjątki powinny poprawnie obsługiwane tak, aby tymi informacjami poufnymi nie jest uwidaczniana w scenariuszach niezaufanych.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność pliku XML przy użyciu przechowywanych w schematach <xref:System.Xml.Schema.XmlSchemaSet>. Przestrzeń nazw w pliku XML `urn:bookstore-schema`, identyfikuje schematu, które w <xref:System.Xml.Schema.XmlSchemaSet> do użycia w celu weryfikacji.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>Dane wejściowe  
 W przykładzie użyto następujących dwóch plików wejściowych.  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **Books.xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
## <a name="output"></a>Dane wyjściowe  
 Błąd sprawdzania poprawności: Element "książki" w przestrzeni nazw "urn: księgarni-schematu ' ma nieprawidłowy element podrzędny"Autor"w przestrzeni nazw" urn: księgarni-schematu ". Oczekiwano "title" w przestrzeni nazw "urn: księgarni-schematu".  
  
 Błąd sprawdzania poprawności: Element "Autor" w przestrzeni nazw "urn: księgarni-schematu ' ma nieprawidłowy element podrzędny"name"w przestrzeni nazw" urn: księgarni-schematu ". Oczekiwano "-imię" w przestrzeni nazw "urn: księgarni-schematu".  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Schema.XmlSchemaSet" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Schema.XmlSchemaSet" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">
          <see cref="T:System.Xml.XmlNameTable" /> Obiekt ma być używany.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Schema.XmlSchemaSet" /> klasy z określonym <see cref="T:System.Xml.XmlNameTable" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.XmlNameTable" /> Przekazano obiekt jako parametr to <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje dany schemat języka (XSD) definicja schematu XML do <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiekt do dodania do <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Dodaje dany <see cref="T:System.Xml.Schema.XmlSchema" /> do <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiektu, jeśli schemat jest nieprawidłowy. Jeśli schemat nie jest prawidłowy oraz <see cref="T:System.Xml.Schema.ValidationEventHandler" /> zostanie określona, przyjmowana <see langword="null" /> jest zwracany i weryfikacji odpowiednie zdarzenie jest wywoływane. W przeciwnym razie <see cref="T:System.Xml.Schema.XmlSchemaException" /> jest generowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Xml.Schema.XmlSchema> obiekt już istnieje w <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> — metoda nie działa.  
  
 Funkcjonalność ta metoda jest identyczna ze <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Przekazano obiekt jako parametr to <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> Obiektu.</param>
        <summary>Dodaje wszystkie schematu XML definition language (XSD) schematów w danym <see cref="T:System.Xml.Schema.XmlSchemaSet" /> do <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było dodać schematu do <xref:System.Xml.Schema.XmlSchemaSet>, musi on pomyślnie zostanie wstępnie przetworzony. Przetwarzanie wstępne wykonuje następujące zadania podstawowe.  
  
1.  Schemat jest sprawdzany pod kątem strukturalnych ważności, zgodnie z regułami schematu W3C XML, ale schematu nie jest w pełni zweryfikowana.  
  
2.  Odwołania do składników schematu wewnętrznych i zewnętrznych zostały rozwiązane. Zaimportowanych lub dołączone schematów, które zostały pobrane pomyślnie, również są dodawane do <xref:System.Xml.Schema.XmlSchemaSet>. Importowane schematy są dodawane jako osobne <xref:System.Xml.Schema.XmlSchema> obiektów i schematów dołączone zostały wprowadzone części, w tym <xref:System.Xml.Schema.XmlSchema>.  
  
 Jeśli <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość <xref:System.Xml.Schema.XmlSchemaSet> do dodania jest `true`, wszystkich schematów w <xref:System.Xml.Schema.XmlSchemaSet> do dodania zostaną dodane do <xref:System.Xml.Schema.XmlSchemaSet>. Jeśli <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość <xref:System.Xml.Schema.XmlSchemaSet> do dodania jest `false`, wszystkich schematów dodane jest wstępnie przetworzony przed dodaniem go. Ewentualne schematów w nowo dodanym <xref:System.Xml.Schema.XmlSchemaSet> zakończy się niepowodzeniem, który zostanie wstępnie przetworzony, schematy nie są dodawane; zamiast tego <xref:System.Xml.Schema.XmlSchemaException> jest generowany. W związku z tym w poniższym przykładzie dwa kodu nie są równoważne.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 W poprzednich przykładach dwóch kodu nie są równoważne. W pierwszym przykładzie, jeśli istnieje nieprawidłowy schemat `schemaSet1` i jego <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość jest ustawiona na `false`, schematy nie są dodawane do `schemaSet`. W drugim przykładzie liczba schematów można dodać do `schemaSet` przed napotkano nieprawidłowy schemat i jest zgłaszany wyjątek.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono dodawanie schematy do <xref:System.Xml.Schema.XmlSchemaSet>, następnie dodając <xref:System.Xml.Schema.XmlSchemaSet> na nowy <xref:System.Xml.Schema.XmlSchemaSet> przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody.  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat w <see cref="T:System.Xml.Schema.XmlSchemaSet" /> jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> Przekazano obiekt jako parametr to <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Schemat <c>targetNamespace</c> właściwości, lub <see langword="null" /> do używania <c>targetNamespace</c> określonej w schemacie.</param>
        <param name="schemaUri">Adres URL, który określa schemat do załadowania.</param>
        <summary>Dodaje schematu (XSD) języka definicji schematu XML na adres URL, aby określić <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiektu, jeśli schemat jest nieprawidłowy. Jeśli schemat nie jest prawidłowy oraz <see cref="T:System.Xml.Schema.ValidationEventHandler" /> zostanie określona, przyjmowana <see langword="null" /> jest zwracany i weryfikacji odpowiednie zdarzenie jest wywoływane. W przeciwnym razie <see cref="T:System.Xml.Schema.XmlSchemaException" /> jest generowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było dodać schematu do <xref:System.Xml.Schema.XmlSchemaSet>, musi on pomyślnie zostanie wstępnie przetworzony. Przetwarzanie wstępne wykonuje następujące zadania podstawowe.  
  
1.  Schemat jest sprawdzany pod kątem strukturalnych ważności, zgodnie z regułami schematu W3C XML, ale schematu nie jest w pełni zweryfikowana.  
  
2.  Odwołania do składników schematu wewnętrznych i zewnętrznych zostały rozwiązane. Zaimportowanych lub dołączone schematów, które zostały pobrane pomyślnie, również są dodawane do <xref:System.Xml.Schema.XmlSchemaSet>. Importowane schematy są dodawane jako osobne <xref:System.Xml.Schema.XmlSchema> obiektów i schematów dołączone zostały wprowadzone części, w tym <xref:System.Xml.Schema.XmlSchema>.  
  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody.  
  
-   Dodawanie schematu <xref:System.Xml.Schema.XmlSchemaSet> o takim samym docelowych przestrzeni nazw i schemat adresu URL lokalizacji jako już zawartych w schemacie <xref:System.Xml.Schema.XmlSchemaSet> zwróci oryginalnego obiektu schematu.  
  
-   Gdy nowy schemat został pomyślnie dodany do <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość <xref:System.Xml.Schema.XmlSchemaSet> ma ustawioną wartość `false`.  
  
-   Include lub importowania elementów w schematu XML zostaną rozwiązane, kiedy <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metoda jest wywoływana. Rozpoznanie obejmują i zaimportować elementy powoduje ostrzeżenie walidacji schematu i jeśli nie <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> został określony dla <xref:System.Xml.Schema.XmlSchemaSet> obiektu, to ostrzeżenie nie będzie raportowana.  
  
-   Jeśli schemat o tej samej docelowy obszar nazw jako schematu, która już istnieje w <xref:System.Xml.Schema.XmlSchemaSet> jest dodawany do <xref:System.Xml.Schema.XmlSchemaSet>, są dodawane zarówno schematów.  
  
    > [!NOTE]
    >  To zachowanie różni się od przestarzałe <xref:System.Xml.Schema.XmlSchemaCollection> obiektu.  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Metody <xref:System.Xml.Schema.XmlSchemaSet> ma możliwość używania docelową przestrzeń nazw zdefiniowana w schemacie, bez konieczności docelowego obszaru nazw jest określony jako parametr podczas <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metoda jest wywoływana. Określanie `null` w `targetNamespace` parametr <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> powoduje, że metoda <xref:System.Xml.Schema.XmlSchemaSet> do użycia docelową przestrzeń nazw zdefiniowana w schemacie, jak pokazano w poniższym przykładzie kodu.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 W powyższym przykładzie kodu `null` jest określony jako `targetNamespace` parametr <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody. W związku z tym `targetNamespace` zdefiniowane w books.xml plik jest używany. W tym przypadku wyniku wywołania metody <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metoda może być taki sam Jeśli http://www.contoso.com/books miał został określony jako `targetNamespace` parametru.  
  
-   Schematu W3C XML umożliwia schematów bez docelowej przestrzeni nazw do uwzględnienia w schematach z docelową przestrzeń nazw zdefiniowana. W takim przypadku schemat bez docelową przestrzeń nazw zdefiniowana jest przekształcić na docelowy obszar nazw schematu uwzględniającego. Dołączonego schematu jest traktowana tak, jakby zawierał tego docelową przestrzeń nazw zdefiniowana. Podobnie, schematów bez docelowego obszaru nazw można dodać do <xref:System.Xml.Schema.XmlSchemaSet> i przekształcić na docelową przestrzeń nazw określona przez <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody, jak pokazano w poniższym przykładzie.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 Jeśli powyższego schematu jest dodawany do <xref:System.Xml.Schema.XmlSchemaSet> z docelowej przestrzeni nazw http://www.contoso.com/new/targetnamespace (jak pokazano w poniższym kodzie) jest traktowana tak, jakby była docelowej przestrzeni nazw, zadeklarowanej w schemacie `http://www.contoso.com/new/targetnamespace`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 Poniższy przykładowy kod dodaje http://www.contoso.com/books.xsd schematu o docelowym obszarze nazw o http://www.contoso.com/books do <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 W przykładzie użyto `books.xsd` pliku jako dane wejściowe.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">Adres URL przekazany jako parametr jest <see langword="null" /> lub <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Schemat <c>targetNamespace</c> właściwości, lub <see langword="null" /> do używania <c>targetNamespace</c> określonej w schemacie.</param>
        <param name="schemaDocument">
          <see cref="T:System.Xml.XmlReader" /> Obiektu.</param>
        <summary>Dodaje schematu języka (XSD) definicja schematu XML zawartych w <see cref="T:System.Xml.XmlReader" /> do <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiektu, jeśli schemat jest nieprawidłowy. Jeśli schemat nie jest prawidłowy oraz <see cref="T:System.Xml.Schema.ValidationEventHandler" /> zostanie określona, przyjmowana <see langword="null" /> jest zwracany i weryfikacji odpowiednie zdarzenie jest wywoływane. W przeciwnym razie <see cref="T:System.Xml.Schema.XmlSchemaException" /> jest generowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było dodać schematu do <xref:System.Xml.Schema.XmlSchemaSet>, musi on pomyślnie zostanie wstępnie przetworzony. Przetwarzanie wstępne wykonuje następujące zadania podstawowe.  
  
1.  Schemat jest sprawdzany pod kątem strukturalnych ważności, zgodnie z regułami schematu W3C XML, ale schematu nie jest w pełni zweryfikowana.  
  
2.  Odwołania do składników schematu wewnętrznych i zewnętrznych zostały rozwiązane. Zaimportowanych lub dołączone schematów, które zostały pobrane pomyślnie, również są dodawane do <xref:System.Xml.Schema.XmlSchemaSet>. Importowane schematy są dodawane jako osobne <xref:System.Xml.Schema.XmlSchema> obiektów i schematów dołączone zostały wprowadzone części, w tym <xref:System.Xml.Schema.XmlSchema>.  
  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody.  
  
-   Pomyślnie pobrano schematów, zaimportować lub uwzględnionych schematów zawartych w <xref:System.Xml.XmlReader> zostaną także dodane do <xref:System.Xml.Schema.XmlSchemaSet>.  
  
-   Jeśli <xref:System.Xml.XmlReader> nie znajduje się w elemencie głównym <xref:System.Xml.Schema.XmlSchemaException> jest generowany, jeśli bieżący element jest elementem. Jeśli bieżący element jest `xs:schema` elementu, przeczytaj dokument schematu do <xref:System.Xml.Schema.XmlSchemaSet>; w przeciwnym razie <xref:System.Xml.Schema.XmlSchemaException> jest generowany, gdy schemat jest nieprawidłowy.  
  
-   Jeśli <xref:System.Xml.XmlReader> znajduje się za pośrednictwem sekwencję węzłów XML, tylko pierwszy węzeł w sekwencji zostanie dodany.  
  
-   Jeśli schemat został utworzony na podstawie <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> wywołania metody, wartość <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> właściwość jest ignorowana, ponieważ wbudowanego schematu przetwarzania nie została zastosowana dla dokumentów schematu W3C XML.  
  
-   <xref:System.Xml.XmlResolver> Właściwość <xref:System.Xml.XmlReader> nie jest używany do rozpoznawania odwołania do przestrzeni nazw lub schematu lokalizacje w obejmują i importowanie elementów. Zamiast tego <xref:System.Xml.XmlResolver> właściwość <xref:System.Xml.Schema.XmlSchemaSet> jest używany.  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Metody <xref:System.Xml.Schema.XmlSchemaSet> ma możliwość używania docelową przestrzeń nazw zdefiniowana w schemacie, bez konieczności docelowego obszaru nazw jest określony jako parametr podczas <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metoda jest wywoływana. Określanie `null` lub <xref:System.String.Empty?displayProperty=nameWithType> do <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> powoduje, że metoda <xref:System.Xml.Schema.XmlSchemaSet> do użycia docelową przestrzeń nazw zdefiniowana w schemacie. Na przykład to zachowanie zobacz <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody.  
  
 Pozostałe funkcjonalność ta metoda jest identyczna ze <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody.  
  
   
  
## Examples  
 Poniższy przykładowy kod dodaje zawartych w schemacie books.xsd <xref:System.Xml.XmlTextReader> z docelowej przestrzeni nazw z http://www.contoso.com/books do <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.XmlReader" /> Przekazano obiekt jako parametr to <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> dla <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>
          <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> Dla <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Wartość domyślna to <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> wystąpienia z <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> ustawioną właściwość <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaCompilationSettings> Klasy określa opcje sprawdzania poprawności unikatowy cząstki autorstwa (UPA) <xref:System.Xml.Schema.XmlSchemaSet>. Aby uzyskać więcej informacji na temat włączania sprawdzanie poprawności UPA, zobacz <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kompiluje schematy języka (XSD) definicja schematu XML dodane do <see cref="T:System.Xml.Schema.XmlSchemaSet" /> w jedną logiczną schematu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana automatycznie, gdy potrzebny jest sprawdzania poprawności i <xref:System.Xml.Schema.XmlSchemaSet> nie został wcześniej skompilowany — na przykład, jeśli <xref:System.Xml.Schema.XmlSchemaSet> służy jako dane wejściowe do tworzenia <xref:System.Xml.XmlReader> obiektu w <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> właściwość <xref:System.Xml.XmlReaderSettings> obiekt. Jeśli <xref:System.Xml.Schema.XmlSchemaSet> jest już w stanie skompilowane, ta metoda nie skompiluje schematów. Jeśli ta metoda jest wykonywana pomyślnie, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość jest ustawiona na `true`.  
  
 Schematów, które zostały wcześniej skompilowane przez <xref:System.Xml.Schema.XmlSchemaSet> nie jest ponownie kompilowana. Jednak schematów, które zostały skompilowane przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> metody <xref:System.Xml.Schema.XmlSchema> zostanie ponownie skompilowana.  
  
> [!NOTE]
>  Należy wywołać <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metodę, jeśli schemat (lub jeden z jego obejmuje/importów) zostały zmienione po dodaniu go do <xref:System.Xml.Schema.XmlSchemaSet>. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Metoda będzie sprawdzać schematu strukturalnych ważności, zgodnie z regułami schematu W3C XML. Jednak nie zostanie przeprowadzone sprawdzanie poprawności pełna. Może również rozpoznać odwołania do składników schematu wewnętrznych i zewnętrznych. Zaimportowanych lub dołączone schematów, które zostały pobrane pomyślnie, również są dodawane do <xref:System.Xml.Schema.XmlSchemaSet>. Importowane schematy są dodawane jako osobne <xref:System.Xml.Schema.XmlSchema> obiekty podczas włączone schematy są wprowadzane części, w tym <xref:System.Xml.Schema.XmlSchema>. Jeśli wywołanie ponownie przetworzyć zakończy się pomyślnie, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość jest ustawiona na wartość false.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Wystąpił błąd podczas sprawdzania poprawności i kompilowania schematów w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, czy schemat schematu XML definition language (XSD) jest w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Schemat <c>targetNamespace</c> właściwości.</param>
        <summary>Wskazuje, czy schemat schematu XML definicji języka (XSD) z identyfikatorem URI przestrzeni nazw określony element docelowy jest w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see langword="true" /> Jeśli schemat o określony element docelowy identyfikator URI przestrzeni nazw jest <see cref="T:System.Xml.Schema.XmlSchemaSet" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schematy pośrednio dodawanych do <xref:System.Xml.Schema.XmlSchemaSet> są wykrywane przez <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> metody, na przykład zaimportowany schematów. Dzięki temu, jeśli schemat http://www.contoso.com/retail przestrzeni nazw, który Importuje schemat http://www.contoso.com/books przestrzeni nazw został dodany do <xref:System.Xml.Schema.XmlSchemaSet>, wywoływania <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> z `http://www.contoso.com/books` jako parametru zwraca `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiektu.</param>
        <summary>Wskazuje, czy określony język definicji schematu XML (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> obiekt jest w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Xml.Schema.XmlSchema" /> obiekt jest w <see cref="T:System.Xml.Schema.XmlSchemaSet" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> Przekazany jako parametr to <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">Tablicy na skopiowanie obiekty.</param>
        <param name="index">Indeks w tablicy, gdy rozpocznie się kopiowanie.</param>
        <summary>Kopiuje wszystkie <see cref="T:System.Xml.Schema.XmlSchema" /> obiektów z <see cref="T:System.Xml.Schema.XmlSchemaSet" /> do danej tablicy, zaczynając od danego indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod kopiuje wszystkie <xref:System.Xml.Schema.XmlSchema> obiekty w <xref:System.Xml.Schema.XmlSchemaSet> do tablicy <xref:System.Xml.Schema.XmlSchema> obiektów.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę definicji schematu XML logicznej schematy języka (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Liczba logicznych schematów w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli istnieją dwie schematów dla przestrzeni nazw `http://www.contoso.com` w <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> właściwości zwróci 1, ponieważ schematy są traktowane jako jeden schemat logiczny sprawdzania poprawności. Jednak jeśli schematu dla przestrzeni nazw `http://www.contoso.com/retail` zaimportować schematu dla `http://www.contoso.com/books` przestrzeni nazw, wartość <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> właściwość będzie mieć wartość 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera język (XSD) schematy atrybutami globalnymi w definicji schematu XML w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Kolekcja atrybutów globalnych.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie elementy globalne w definicji schematu XML schematy języka (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Kolekcja elementów globalnego.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie typy proste i złożone globalne w definicji schematu XML schematów języka (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Kolekcja typów globalnych proste i złożone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A> Właściwość zawsze zwraca typ reprezentujący `xs:anyType` typu złożonego.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy schematów schematu XML definition language (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" /> zostały skompilowane.</summary>
        <value>
          <see langword="true" /> Jeśli schematów w <see cref="T:System.Xml.Schema.XmlSchemaSet" /> zostały skompilowane od czasu ostatniego schematu zostały dodane lub usunięte z <see cref="T:System.Xml.Schema.XmlSchemaSet" />; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Właściwości nie występuje w przypadku edytowania są schematy while w <xref:System.Xml.Schema.XmlSchemaSet>. Aktualizacje indywidualnych schematów w <xref:System.Xml.Schema.XmlSchemaSet> nie są śledzone. W związku z tym <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość może być `true` nawet jednego ze schematów zawartych w <xref:System.Xml.Schema.XmlSchemaSet> zostanie zmieniony, tak długo, jak schematów nie zostały dodane lub usunięte z <xref:System.Xml.Schema.XmlSchemaSet>.  
  
   
  
## Examples  
 Przykład <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwości, zobacz <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera domyślny <see cref="T:System.Xml.XmlNameTable" /> używane przez <see cref="T:System.Xml.Schema.XmlSchemaSet" /> podczas ładowania nowego schematu XML definition language (XSD) schematów.</summary>
        <value>Tabela obiektów atomized ciągu.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiekt do usunięcia z <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Usuwa określony schemat definicji schematu XML (XSD) języka z <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiektu usuniętego z <see cref="T:System.Xml.Schema.XmlSchemaSet" /> lub <see langword="null" /> Jeśli schemat nie został znaleziony w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usuwanie schematu z <xref:System.Xml.Schema.XmlSchemaSet> ustawia <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwości `false`.  
  
   
  
## Examples  
 Poniższy przykład przedstawia dodawanie wielu schematach do <xref:System.Xml.Schema.XmlSchemaSet>, a następnie usunąć jedno ze schematów przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> metody.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat nie jest prawidłowym schematem.</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Przekazany jako parametr to <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiekt do usunięcia z <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Usuwa określony schemat schematu XML definition language (XSD) i wszystkich schematów importuje z <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Xml.Schema.XmlSchema" /> obiekt i wszystkie jego Importy zostały pomyślnie usunięty; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> Metoda usuwa określony schemat i wszystkich schematów importuje z <xref:System.Xml.Schema.XmlSchemaSet>, dopóki nie ma żadnych zależności na schemat lub jego importowane schematy. Jeśli istnieją zależności od schematu lub jego importowanych schematów w <xref:System.Xml.Schema.XmlSchemaSet>, nic nie zostanie usunięty i <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> zwraca `false`. Jeśli `false` jest zwracany i <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> jest zdefiniowana, ostrzeżenie jest wysyłany do obsługi zdarzenia, opisujące zależności.  
  
 Jeśli określony schemat importuje inne schematy i określony schemat został wcześniej usunięty z <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> metody <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> — metoda nie spowoduje usunięcia importowane schematy i zwróci `false`. Na przykład jeśli `parentSchema` importuje `childSchema1` i `childSchema2` następujący kod powoduje tylko usunięcie `parentSchema`, ale nie zaimportowano `childSchema1` i `childSchema2` schematów:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Poniższy kod spowoduje usunięcie `parentSchema` i schematy zaimportowane:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> — Metoda nie ma wpływu na stan <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono dodawanie wielu schematach do <xref:System.Xml.Schema.XmlSchemaSet>, a następnie usunięcie jednego ze schematów i wszystkich schematów importuje, przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> metody.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Przekazany jako parametr to <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Schemat, aby ponownie przetworzyć.</param>
        <summary>Przetwarza ponownie schematu (XSD) języka definicji schematu XML, który już istnieje w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiektu, jeśli schemat jest prawidłowym schematem. Jeśli schemat nie jest prawidłowy oraz <see cref="T:System.Xml.Schema.ValidationEventHandler" /> jest określony, <see langword="null" /> jest zwracany i weryfikacji odpowiednie zdarzenie jest wywoływane. W przeciwnym razie <see cref="T:System.Xml.Schema.XmlSchemaException" /> jest generowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponowne przetwarzanie schematu wykonuje wszystkie przetwarzania wstępnego czynności wykonywanych na schemacie podczas <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metoda jest wywoływana. Jeśli wywołanie <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> zakończy się pomyślnie, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość jest ustawiona na `false`.  
  
 Metoda ponowić powinna być używana po schematu w <xref:System.Xml.Schema.XmlSchemaSet> został zmodyfikowany, po <xref:System.Xml.Schema.XmlSchemaSet> wykonał kompilację.  
  
> [!NOTE]
>  Należy wywołać <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metodę, jeśli schemat (lub jeden z jego obejmuje/importów) zostały zmienione po dodaniu go do <xref:System.Xml.Schema.XmlSchemaSet>. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Metoda będzie sprawdzać schematu strukturalnych ważności, zgodnie z regułami schematu W3C XML. Jednak nie zostanie przeprowadzone sprawdzanie poprawności pełna. Może również rozpoznać odwołania do składników schematu wewnętrznych i zewnętrznych. Zaimportowanych lub dołączone schematów, które zostały pobrane pomyślnie, również są dodawane do <xref:System.Xml.Schema.XmlSchemaSet>. Importowane schematy są dodawane jako osobne <xref:System.Xml.Schema.XmlSchema> obiekty podczas włączone schematy są wprowadzane części, w tym <xref:System.Xml.Schema.XmlSchema>. Jeśli wywołanie ponownie przetworzyć zakończy się pomyślnie, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość jest ustawiona na wartość false.  
  
   
  
## Examples  
 Poniższy przykład przedstawia ponownego przetwarzania dodane do schematu <xref:System.Xml.Schema.XmlSchemaSet>. Po <xref:System.Xml.Schema.XmlSchemaSet> została skompilowana przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> — metoda i dodane do schematu <xref:System.Xml.Schema.XmlSchemaSet> zmodyfikowaniu <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość zostanie ustawiona do `true`, nawet jeśli schemat w <xref:System.Xml.Schema.XmlSchemaSet> został zmodyfikowany. Wywoływanie <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metoda wykonuje wszystkie przetwarzanie wstępne wykonywane przez <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> — metoda i zestawy <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwości `false`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Przekazano obiekt jako parametr to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Przekazano obiekt jako parametr nie istnieje już w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję schematów XML definicji schematów języka (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kolekcję wszystkich definicji schematu XML schematów języka (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> Obiektu zawierającego wszystkich schematów, które zostały dodane do <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Jeśli schematów nie zostały dodane do <see cref="T:System.Xml.Schema.XmlSchemaSet" />, pustą <see cref="T:System.Collections.ICollection" /> obiekt jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca schematów, które zostały dodane pośrednio do <xref:System.Xml.Schema.XmlSchemaSet> ponieważ zostały one zaimportowane.  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> Metoda jest odpowiednikiem <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> przestarzała metoda <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia, jak wykonać iterację wszystkich schematów w <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Schemat <c>targetNamespace</c> właściwości.</param>
        <summary>Zwraca kolekcję wszystkich definicji schematu XML schematów języka (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" /> należących do danej przestrzeni nazw.</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> Obiektu zawierającego wszystkich schematów, które zostały dodane do <see cref="T:System.Xml.Schema.XmlSchemaSet" /> należących do danej przestrzeni nazw. Jeśli schematów nie zostały dodane do <see cref="T:System.Xml.Schema.XmlSchemaSet" />, pustą <see cref="T:System.Collections.ICollection" /> obiekt jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `targetNamespace` parametr jest `null` lub <xref:System.String.Empty>, zwracana wszystkich schematów bez przestrzeni nazw.  
  
 Ta metoda zwraca schematów, które zostały dodane pośrednio do <xref:System.Xml.Schema.XmlSchemaSet> ponieważ zostały one zaimportowane.  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> Metoda jest odpowiednikiem <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> przestarzała metoda <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 Poniższy przykład przedstawia, jak wykonać iterację wszystkich schematów w http://www.contoso.com/books przestrzeni nazw w <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa program obsługi zdarzeń dla odbieranie informacji o błędy sprawdzania poprawności schematu schematu XML definition language (XSD).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawia program obsługi zdarzeń do odbierania informacji na temat błędy sprawdzania poprawności schematu podczas <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> lub <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> metody <xref:System.Xml.Schema.XmlSchemaSet> są nazywane.  
  
 Jeśli nie zdefiniowano program obsługi zdarzeń, <xref:System.Xml.Schema.XmlSchemaException> jest zgłaszany na wszystkie błędy weryfikacji gdzie <xref:System.Xml.Schema.XmlSeverityType> jest <xref:System.Xml.Schema.XmlSeverityType.Error>. Wyjątki nie są zgłaszane błędy sprawdzania poprawności z <xref:System.Xml.Schema.XmlSeverityType> z <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono dodawanie <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> do przechwytywania błędów i ostrzeżeń podczas sprawdzania poprawności względem schematu dokumentu XML.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 W przykładzie użyto pliku books.xml jako danych wejściowych.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 W przykładzie użyto pliku books.xsd jako danych wejściowych.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia <see cref="T:System.Xml.XmlResolver" /> używany do rozpoznawania nazw lub lokalizacji, do której odwołuje się obejmują i importowanie elementów schematu.</summary>
        <value>
          <see cref="T:System.Xml.XmlResolver" /> Używany do rozpoznawania nazw lub lokalizacji, do której odwołuje się obejmują i importowanie elementów schematu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> z <xref:System.Xml.Schema.XmlSchemaSet> jest używany do rozpoznawania przestrzeni nazw lub lokalizacji, do której odwołuje się obejmują i importowanie elementów schematu, ilekroć schematu jest dodawana przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> lub <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metody.  
  
> [!IMPORTANT]
>  Zewnętrzne przestrzeni nazw lub lokalizacji, do której odwołuje się uwzględnić, importowania i ponowne definiowanie elementów schematu są rozwiązywane względem podstawowy identyfikator URI schematu, która obejmuje lub importowane. Na przykład, jeśli podstawowy identyfikator URI, włączając lub importowanie schematu jest pusta lub `null`, lokalizacji zewnętrznych zostały rozwiązane względem bieżącego katalogu. <xref:System.Xml.XmlUrlResolver> Klasy jest używany do rozpoznawania schematów zewnętrznych domyślnie. Aby wyłączyć rozpoznawanie include, importu i ponownie zdefiniować elementów schematu, ustaw <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> właściwości `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>