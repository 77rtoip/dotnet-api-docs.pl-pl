<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="57de316ef00b1a3d01051adc15e178fc8abae0f2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69441196" /></Metadata><TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera pamięć podręczną schematów języka definicji schematu XML (XSD).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   Nie używaj schematów z nieznanych lub niezaufanych źródeł lub lokalizacji. Takie działanie spowoduje naruszenie zabezpieczeń kodu.  
> -   Schematy XML (w tym schematy wbudowane) są podatne na ataki typu "odmowa usługi"; nie Akceptuj ich w scenariuszach niezaufanych.  
> -   Komunikaty o błędach i wyjątki dotyczące sprawdzania poprawności schematu mogą ujawniać poufne informacje o modelu zawartości lub ścieżkach URI do pliku schematu. Należy zachować ostrożność, aby nie ujawniać tych informacji osobom niezaufanym wywołującym.  
> -   Dodatkowe zagadnienia dotyczące zabezpieczeń zostały omówione w sekcji "zagadnienia dotyczące zabezpieczeń".  
  
 <xref:System.Xml.Schema.XmlSchemaSet>jest pamięcią podręczną lub biblioteką, w której można przechowywać schematy języka definicji schematu XML (XSD). <xref:System.Xml.Schema.XmlSchemaSet>zwiększa wydajność przez buforowanie schematów w pamięci zamiast uzyskiwania do nich dostępu z pliku lub adresu URL. Każdy schemat jest identyfikowany przez identyfikator URI przestrzeni nazw i lokalizację, która została określona podczas dodawania schematu do zestawu. <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType> Właściwość służy do <xref:System.Xml.Schema.XmlSchemaSet> przypisywania obiektu, którego czytnik XML powinien używać do sprawdzania poprawności danych.  
  
## <a name="security-considerations"></a>Zagadnienia dotyczące zabezpieczeń  
  
-   Nie używaj schematów z nieznanych lub niezaufanych źródeł. Takie działanie spowoduje naruszenie zabezpieczeń kodu. Zewnętrzne przestrzenie nazw lub lokalizacje, do których odwołują się elementy include, import i redefines schematu, są rozpoznawane w odniesieniu do podstawowego identyfikatora URI schematu, który zawiera lub importuje. Na przykład jeśli podstawowy identyfikator URI schematu dołączania lub importowania jest pusty lub `null`lokalizacje zewnętrzne są rozwiązywane w odniesieniu do bieżącego katalogu. <xref:System.Xml.XmlUrlResolver> Klasa jest używana do rozpoznawania schematów zewnętrznych domyślnie. Aby wyłączyć rozwiązanie dołączania, importowania i ponownego definiowania elementów schematu, należy ustawić <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> właściwość na. `null`  
  
-   <xref:System.Xml.Schema.XmlSchemaSet> Klasa<xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> używa klasy do analizowania i dopasowywania wyrażeń regularnych w schemacie XML. Walidacja aspektów wzorca z wyrażeniami regularnymi w schemacie XML może powodować zwiększenie użycia procesora CPU i należy je unikać w scenariuszach wysokiej dostępności.  
  
-   Wyjątki wywoływane w wyniku użycia <xref:System.Xml.Schema.XmlSchemaSet> klasy, takie <xref:System.Xml.Schema.XmlSchemaException> jak Klasa mogą zawierać poufne informacje, które nie powinny być ujawnione w scenariuszach niezaufanych. Na przykład <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Właściwość <xref:System.Xml.Schema.XmlSchemaException> zwraca ścieżkę URI do pliku schematu, który spowodował wyjątek. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Właściwość nie powinna być ujawniana w scenariuszach niezaufanych. Wyjątki powinny być prawidłowo obsługiwane, aby te informacje poufne nie były ujawniane w scenariuszach niezaufanych.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność pliku XML przy użyciu schematów przechowywanych w <xref:System.Xml.Schema.XmlSchemaSet>. Przestrzeń nazw w pliku `urn:bookstore-schema`XML, określa schemat <xref:System.Xml.Schema.XmlSchemaSet> do użycia na potrzeby walidacji. Dane wyjściowe z przykładu pokazują, że plik XML ma dwa naruszenia schematu:

 - Pierwszy \<> element książki \<zawiera element autor >, ale nie ma \<tytułu > ani \<elementu > cen.

 - \< \< \<W elemencie \<author > w ostatnim elemencie książki > brakuje elementu First-Name > i last-name >, a zamiast tego ma nieprawidłowy element > Name. \<   
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>Dane wejściowe  
 W przykładzie są stosowane następujące dwa pliki wejściowe.  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **Books. xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Schema.XmlSchemaSet" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Schema.XmlSchemaSet" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">Obiekt <see cref="T:System.Xml.XmlNameTable" /> , który ma być używany.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Xml.Schema.XmlSchemaSet" /> klasy z określonym <see cref="T:System.Xml.XmlNameTable" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Obiekt przeszedł jako <see langword="null" />parametr. <see cref="T:System.Xml.XmlNameTable" /></exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje dany schemat języka definicji schematu XML (XSD) do programu <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Obiekt, który ma zostać dodany <see cref="T:System.Xml.Schema.XmlSchemaSet" />do. <see cref="T:System.Xml.Schema.XmlSchema" /></param>
        <summary>Dodaje daną <see cref="T:System.Xml.Schema.XmlSchema" /> wartość <see cref="T:System.Xml.Schema.XmlSchemaSet" />do.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> Obiekt, jeśli schemat jest prawidłowy. Jeśli schemat jest nieprawidłowy i <see cref="T:System.Xml.Schema.ValidationEventHandler" /> został określony <see langword="null" /> , zostanie zwrócony i zostanie zgłoszone odpowiednie zdarzenie walidacji. W przeciwnym razie jest zgłaszany. <see cref="T:System.Xml.Schema.XmlSchemaException" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli obiekt już istnieje <xref:System.Xml.Schema.XmlSchemaSet>w, <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Metoda nie wykonuje żadnych operacji. <xref:System.Xml.Schema.XmlSchema>  
  
 Funkcja tej metody jest taka sama jak <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Metoda.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">Obiekt przeszedł jako <see langword="null" />parametr. <see cref="T:System.Xml.Schema.XmlSchema" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> Obiekt.</param>
        <summary>Dodaje wszystkie schematy języka definicji schematu XML (XSD) z danego <see cref="T:System.Xml.Schema.XmlSchemaSet" /> elementu <see cref="T:System.Xml.Schema.XmlSchemaSet" />do.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było dodać schemat do programu <xref:System.Xml.Schema.XmlSchemaSet>, należy go pomyślnie wstępnie przetworzyć. Przetwarzanie wstępne wykonuje następujące podstawowe zadania.  
  
1.  Schemat jest sprawdzany pod kątem poprawności strukturalnej zgodnie z regułami schematu W3C XML, ale schemat nie jest w pełni sprawdzony.  
  
2.  Odwołania do wewnętrznych i zewnętrznych składników schematu są rozwiązane. Wszystkie zaimportowane lub dołączone schematy, które zostały pomyślnie pobrane, również zostaną <xref:System.Xml.Schema.XmlSchemaSet>dodane do. Importowane schematy są dodawane jako oddzielne <xref:System.Xml.Schema.XmlSchema> obiekty, a dołączone schematy są częścią dołączania. <xref:System.Xml.Schema.XmlSchema>  
  
 `true` <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet> Jeśli właściwość do<xref:System.Xml.Schema.XmlSchemaSet> dodania ma wartość, wszystkie schematy z do dodania zostaną dodane do. <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> Jeśli właściwość <xref:System.Xml.Schema.XmlSchemaSet> do dodania ma wartość `false`, każdy dodany schemat jest wstępnie przetworzony przed dodaniem. W przypadku niepowodzenia wstępnego przetwarzania któregokolwiek ze <xref:System.Xml.Schema.XmlSchemaSet> schematów z nowo dodanego schematu nie są dodawane żadne schematy; zamiast tego <xref:System.Xml.Schema.XmlSchemaException> jest zgłaszany. W związku z tym Poniższy dwa przykłady kodu nie są równoważne.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 Poprzednie dwa przykłady kodu nie są równoważne. W pierwszym przykładzie, jeśli istnieje `schemaSet1` nieprawidłowy schemat w i jego <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość jest ustawiona na `false`, żadne schematy nie są dodawane do `schemaSet`. W drugim przykładzie można dodać wiele schematów do `schemaSet` przed wystąpieniem nieprawidłowego schematu i wystąpieniu wyjątku.  
  
   
  
## Examples  
 Poniższy przykład kodu <xref:System.Xml.Schema.XmlSchemaSet>ilustruje Dodawanie schematów do, a następnie <xref:System.Xml.Schema.XmlSchemaSet> Dodawanie <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> do nowego <xref:System.Xml.Schema.XmlSchemaSet> przy użyciu metody.  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat w <see cref="T:System.Xml.Schema.XmlSchemaSet" /> elemencie jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">Obiekt przeszedł jako <see langword="null" />parametr. <see cref="T:System.Xml.Schema.XmlSchemaSet" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Właściwość Schema <paramref name="targetNamespace" /> lub <see langword="null" /> , aby użyć <paramref name="targetNamespace" /> określonej w schemacie.</param>
        <param name="schemaUri">Adres URL, który określa schemat do załadowania.</param>
        <summary>Dodaje schemat języka definicji schematu XML (XSD) pod adresem URL określonym do <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> Obiekt, jeśli schemat jest prawidłowy. Jeśli schemat jest nieprawidłowy i <see cref="T:System.Xml.Schema.ValidationEventHandler" /> został określony <see langword="null" /> , zostanie zwrócony i zostanie zgłoszone odpowiednie zdarzenie walidacji. W przeciwnym razie jest zgłaszany. <see cref="T:System.Xml.Schema.XmlSchemaException" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było dodać schemat do programu <xref:System.Xml.Schema.XmlSchemaSet>, należy go pomyślnie wstępnie przetworzyć. Przetwarzanie wstępne wykonuje następujące podstawowe zadania.  
  
1.  Schemat jest sprawdzany pod kątem poprawności strukturalnej zgodnie z regułami schematu W3C XML, ale schemat nie jest w pełni sprawdzony.  
  
2.  Odwołania do wewnętrznych i zewnętrznych składników schematu są rozwiązane. Wszystkie zaimportowane lub dołączone schematy, które zostały pomyślnie pobrane, również zostaną <xref:System.Xml.Schema.XmlSchemaSet>dodane do. Importowane schematy są dodawane jako oddzielne <xref:System.Xml.Schema.XmlSchema> obiekty, a dołączone schematy są częścią dołączania. <xref:System.Xml.Schema.XmlSchema>  
  
 Poniżej znajdują się ważne uwagi, które należy wziąć <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> pod uwagę podczas korzystania z metody.  
  
-   Dodanie schematu do <xref:System.Xml.Schema.XmlSchemaSet> programu z tą samą docelową przestrzenią nazw i adresem URL lokalizacji schematu jako schematu już <xref:System.Xml.Schema.XmlSchemaSet> zawartego w elemencie zwróci oryginalny obiekt schematu.  
  
-   Po pomyślnym dodaniu nowego schematu do <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwości Właściwość <xref:System.Xml.Schema.XmlSchemaSet> jest ustawiona na `false`.  
  
-   Wszystkie elementy include lub import napotkane w schemacie XML są rozpoznawane <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> , gdy wywoływana jest metoda. Nie można rozpoznać elementów include i import powoduje wyświetlenie ostrzeżenia dotyczącego sprawdzania poprawności schematu <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> i jeśli nie określono dla <xref:System.Xml.Schema.XmlSchemaSet> tego obiektu, to ostrzeżenie nie zostanie zgłoszone.  
  
-   Jeśli schemat z tą samą docelową przestrzenią nazw, co schemat, który <xref:System.Xml.Schema.XmlSchemaSet> już istnieje w obiekcie <xref:System.Xml.Schema.XmlSchemaSet>, jest dodawany do, dodawane są oba schematy.  
  
    > [!NOTE]
    >  To zachowanie różni się od przestarzałego <xref:System.Xml.Schema.XmlSchemaCollection> obiektu.  
  
-   Metoda ma możliwość używania docelowej przestrzeni nazw zdefiniowanej w schemacie, a nie wymaga, aby docelowa przestrzeń nazw była określona <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> jako parametr, gdy wywoływana jest metoda. <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Określenie `null` wparametrze<xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody powoduje<xref:System.Xml.Schema.XmlSchemaSet> użycie docelowej przestrzeni nazw zdefiniowanej w schemacie, jak pokazano w poniższym przykładzie kodu. `targetNamespace`  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 W powyższym `null` przykładzie kodu jest określony `targetNamespace` jako parametr <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody. W związku z tym `targetNamespace` jest używany określony w pliku Books. XML. W takim przypadku wynik wywołania <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody byłby identyczny, jeśli `http://www.contoso.com/books` został określony jako `targetNamespace` parametr.  
  
-   Schemat W3C XML umożliwia uwzględnienie schematów bez przestrzeni nazw docelowych w schematach ze zdefiniowaną przestrzenią nazw Target. W takim przypadku schemat bez zdefiniowanej docelowej przestrzeni nazw jest przekształcany w docelową przestrzeń nazw schematu uwzględniającego. Uwzględniony schemat jest traktowany jak w przypadku, gdy ma on zdefiniowaną docelową przestrzeń nazw. Podobnie schematy bez docelowej przestrzeni nazw można dodać do <xref:System.Xml.Schema.XmlSchemaSet> i przekształcić w docelowy obszar nazw określony <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> przez metodę, jak pokazano w poniższym przykładzie.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 Jeśli schemat powyżej zostanie dodany do <xref:System.Xml.Schema.XmlSchemaSet> obiektu z docelową przestrzenią nazw `http://www.contoso.com/new/targetnamespace` (jak pokazano w poniższym kodzie), jest traktowany jak jeśli docelowa przestrzeń nazw zadeklarowana `http://www.contoso.com/new/targetnamespace`w schemacie była.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 Poniższy przykład kodu dodaje `http://www.contoso.com/books.xsd` schemat z docelową `http://www.contoso.com/books` przestrzenią nazw do <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 W przykładzie jest użyty `books.xsd` plik jako dane wejściowe.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">Adres URL przesłany jako parametr to <see langword="null" /> lub <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Właściwość Schema <paramref name="targetNamespace" /> lub <see langword="null" /> , aby użyć <paramref name="targetNamespace" /> określonej w schemacie.</param>
        <param name="schemaDocument"><see cref="T:System.Xml.XmlReader" /> Obiekt.</param>
        <summary>Dodaje schemat języka definicji schematu XML (XSD) zawarty w tabeli <see cref="T:System.Xml.XmlReader" /> <see cref="T:System.Xml.Schema.XmlSchemaSet" />do.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> Obiekt, jeśli schemat jest prawidłowy. Jeśli schemat jest nieprawidłowy i <see cref="T:System.Xml.Schema.ValidationEventHandler" /> został określony <see langword="null" /> , zostanie zwrócony i zostanie zgłoszone odpowiednie zdarzenie walidacji. W przeciwnym razie jest zgłaszany. <see cref="T:System.Xml.Schema.XmlSchemaException" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było dodać schemat do programu <xref:System.Xml.Schema.XmlSchemaSet>, należy go pomyślnie wstępnie przetworzyć. Przetwarzanie wstępne wykonuje następujące podstawowe zadania.  
  
1.  Schemat jest sprawdzany pod kątem poprawności strukturalnej zgodnie z regułami schematu W3C XML, ale schemat nie jest w pełni sprawdzony.  
  
2.  Odwołania do wewnętrznych i zewnętrznych składników schematu są rozwiązane. Wszystkie zaimportowane lub dołączone schematy, które zostały pomyślnie pobrane, również zostaną <xref:System.Xml.Schema.XmlSchemaSet>dodane do. Importowane schematy są dodawane jako oddzielne <xref:System.Xml.Schema.XmlSchema> obiekty, a dołączone schematy są częścią dołączania. <xref:System.Xml.Schema.XmlSchema>  
  
 Poniżej znajdują się ważne uwagi, które należy wziąć <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> pod uwagę podczas korzystania z metody.  
  
-   Pomyślnie pobrano schematy zaimportowane lub dołączone przez schematy zawarte <xref:System.Xml.XmlReader> w elemencie są również dodawane <xref:System.Xml.Schema.XmlSchemaSet>do.  
  
-   Jeśli element nie <xref:System.Xml.Schema.XmlSchemaException> jestustawionynaelemenciegłównym,jestgenerowany,chybażebieżący<xref:System.Xml.XmlReader> element jest elementem. Jeśli bieżący element jest `xs:schema` elementem, dokument schematu jest odczytywany <xref:System.Xml.Schema.XmlSchemaSet>w; w przeciwnym razie <xref:System.Xml.Schema.XmlSchemaException> jest zgłaszany, ponieważ schemat jest nieprawidłowy.  
  
-   <xref:System.Xml.XmlReader> Jeśli znajduje się nad sekwencją węzłów XML, tylko pierwszy węzeł w sekwencji zostanie dodany.  
  
-   Jeśli schemat został utworzony przy użyciu <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> wywołania metody, wartość <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> właściwości jest ignorowana, ponieważ wbudowane schematu przetwarzania nie jest stosowane dla dokumentów schematu XML W3C.  
  
-   <xref:System.Xml.XmlResolver> Właściwość<xref:System.Xml.XmlReader> nie jest używana do rozpoznawania odwołań do przestrzeni nazw lub lokalizacji schematu w elementach include i import. Zamiast tego <xref:System.Xml.Schema.XmlSchemaSet>Właściwośćjestużywana. <xref:System.Xml.XmlResolver>  
  
-   Metoda ma możliwość używania docelowej przestrzeni nazw zdefiniowanej w schemacie, a nie wymaga, aby docelowa przestrzeń nazw była określona <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> jako parametr, gdy wywoływana jest metoda. <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Określenie `null` lub <xref:System.String.Empty?displayProperty=nameWithType> do metody<xref:System.Xml.Schema.XmlSchemaSet.Add%2A> powoduje<xref:System.Xml.Schema.XmlSchemaSet> użycie docelowej przestrzeni nazw zdefiniowanej w schemacie. Aby zapoznać się z przykładem tego zachowania, <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> Zobacz metodę.  
  
 Pozostałe funkcje tej metody są takie same jak <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu dodaje schematu Books. XSD zawarte w <xref:System.Xml.XmlTextReader> elemencie z docelową `http://www.contoso.com/books` przestrzenią nazw do <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">Obiekt przeszedł jako <see langword="null" />parametr. <see cref="T:System.Xml.XmlReader" /></exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> <see cref="T:System.Xml.Schema.XmlSchemaSet" />dla elementu.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> Dla<see cref="T:System.Xml.Schema.XmlSchemaSet" />elementu. Wartość domyślna to <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> wystąpienie <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> z właściwością ustawioną na <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa określa unikalne opcje walidacji (UPA) <xref:System.Xml.Schema.XmlSchemaSet>dla. <xref:System.Xml.Schema.XmlSchemaCompilationSettings> Aby uzyskać więcej informacji na temat włączania sprawdzania poprawności UPA <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> , zobacz Właściwość.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kompiluje schematy języka definicji schematu XML (XSD) dodane do <see cref="T:System.Xml.Schema.XmlSchemaSet" /> jednego schematu logicznego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana automatycznie, gdy wymagana jest Walidacja <xref:System.Xml.Schema.XmlSchemaSet> i nie została wcześniej skompilowana — na przykład <xref:System.Xml.Schema.XmlSchemaSet> gdy jest używany jako dane wejściowe do <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> tworzenia <xref:System.Xml.XmlReader> obiektu we właściwości <xref:System.Xml.XmlReaderSettings> Stream. <xref:System.Xml.Schema.XmlSchemaSet> Jeśli jest już w stanie skompilowanym, ta metoda nie będzie ponownie kompilować schematów. Jeśli ta metoda zostanie wykonana pomyślnie, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość jest ustawiona na `true`.  
  
 Schematy, które zostały wcześniej skompilowane przez <xref:System.Xml.Schema.XmlSchemaSet> program, nie są ponownie kompilowane. Jednak schematy skompilowane przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> metody <xref:System.Xml.Schema.XmlSchema> zostaną ponownie skompilowane.  
  
> [!NOTE]
>  Należy wywołać metodę, <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Jeśli zmieniono schemat (lub jeden z jego elementów include/import) po dodaniu go do programu. <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Metoda sprawdzi schemat o ważności strukturalnej zgodnie z regułami schematu W3C XML. Nie zostanie jednak wykonana pełna Walidacja. Spowoduje to również rozpoznanie odwołań do wewnętrznych i zewnętrznych składników schematu. Wszystkie zaimportowane lub dołączone schematy, które zostały pomyślnie pobrane, również zostaną <xref:System.Xml.Schema.XmlSchemaSet>dodane do. Importowane schematy są dodawane jako osobne <xref:System.Xml.Schema.XmlSchema> obiekty, podczas gdy dołączone schematy są częścią dołączania. <xref:System.Xml.Schema.XmlSchema> Jeśli wywołanie przetworzenia zakończy się pomyślnie, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość ma wartość FAŁSZ.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Wystąpił błąd podczas sprawdzania poprawności i kompilowania schematów w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wskazuje, <see cref="T:System.Xml.Schema.XmlSchemaSet" />czy schemat języka definicji schematu XML (XSD) znajduje się w.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Właściwość schematu <paramref name="targetNamespace" /> .</param>
        <summary>Wskazuje, <see cref="T:System.Xml.Schema.XmlSchemaSet" />czy schemat języka definicji schematu XML (XSD) z określonym docelowym identyfikatorem URI przestrzeni nazw znajduje się w.</summary>
        <returns><see langword="true" />Jeśli schemat z określonym docelowym identyfikatorem URI przestrzeni nazw znajduje się <see cref="T:System.Xml.Schema.XmlSchemaSet" />w. w <see langword="false" />przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schematy, które są bezpośrednio dodawane do <xref:System.Xml.Schema.XmlSchemaSet> programu, są wykrywane <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> przez metodę, na przykład zaimportowane schematy. W związku `http://www.contoso.com/retail` z tym <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> `http://www.contoso.com/books` `http://www.contoso.com/books` <xref:System.Xml.Schema.XmlSchemaSet>, jeśli schemat dla przestrzeni nazw, która importuje schemat dla przestrzeni nazw, jest dodawany do, wywołanie z parametrem zwraca wartość `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" /> Obiekt.</param>
        <summary>Wskazuje, <see cref="T:System.Xml.Schema.XmlSchema" /> <see cref="T:System.Xml.Schema.XmlSchemaSet" />czy określony obiekt języka definicji schematu XML (XSD) znajduje się w.</summary>
        <returns><see langword="true" />Jeśli obiekt znajduje się <see cref="T:System.Xml.Schema.XmlSchemaSet" />w; w przeciwnym razie <see langword="false" />. <see cref="T:System.Xml.Schema.XmlSchema" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Przesłany jako <see langword="null" />parametr. <see cref="T:System.Xml.Schema.XmlSchemaSet" /></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">Tablica, do której mają zostać skopiowane obiekty.</param>
        <param name="index">Indeks w tablicy, w której rozpocznie się kopiowanie.</param>
        <summary>Kopiuje wszystkie <see cref="T:System.Xml.Schema.XmlSchema" /> obiekty <see cref="T:System.Xml.Schema.XmlSchemaSet" /> z do danej tablicy, rozpoczynając od danego indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kopiuje wszystkie <xref:System.Xml.Schema.XmlSchema> obiekty <xref:System.Xml.Schema.XmlSchemaSet> w tabeli do tablicy <xref:System.Xml.Schema.XmlSchema> obiektów.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę schematów języka XSD (XML Schema Definition Language) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Liczba schematów logicznych w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli istnieją dwa schematy dla przestrzeni nazw `http://www.contoso.com` <xref:System.Xml.Schema.XmlSchemaSet>w, właściwość zwróci wartość <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> 1, ponieważ schematy są traktowane jako jeden logiczny schemat na potrzeby walidacji. Jeśli jednak schemat przestrzeni nazw `http://www.contoso.com/retail` zaimportował schemat `http://www.contoso.com/books` dla przestrzeni nazw <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> , wartość właściwości będzie równa 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie atrybuty globalne we wszystkich schematach języka definicji schematu XML (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Kolekcja atrybutów globalnych.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie elementy globalne we wszystkich schematach języka definicji schematu XML (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Kolekcja elementów globalnych.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie globalne proste i złożone typy we wszystkich schematach języka definicji schematu XML (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Kolekcja globalnych prostych i złożonych typów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość zawsze zwraca typ, który `xs:anyType` reprezentuje typ złożony. <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy schematy języka definicji schematu XML (XSD) w programie <see cref="T:System.Xml.Schema.XmlSchemaSet" /> zostały skompilowane.</summary>
        <value><see langword="true" />Jeśli schematy <see cref="T:System.Xml.Schema.XmlSchemaSet" /> z programu zostały skompilowane od czasu ostatniego dodania lub usunięcia schematu <see cref="T:System.Xml.Schema.XmlSchemaSet" />z; w przeciwnym razie, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> ma to żadnego oddziaływania, jeśli schematy są edytowane <xref:System.Xml.Schema.XmlSchemaSet>w trakcie. Aktualizacje poszczególnych schematów w programie <xref:System.Xml.Schema.XmlSchemaSet> nie są śledzone. <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> W związku z tym właściwość może być `true` nawet pomimo tego, że jeden z schematów zawartych w <xref:System.Xml.Schema.XmlSchemaSet> został zmieniony, o ile <xref:System.Xml.Schema.XmlSchemaSet>żadne schematy nie zostały dodane lub usunięte z.  
  
   
  
## Examples  
 Aby zapoznać się z <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> przykładem właściwości, <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Zobacz metodę.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość domyślną <see cref="T:System.Xml.XmlNameTable" /> używaną <see cref="T:System.Xml.Schema.XmlSchemaSet" /> podczas ładowania nowych schematów języka definicji schematu XML (XSD).</summary>
        <value>Tabela obiektów ciągów atomowych.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Obiekt, który ma zostać usunięty <see cref="T:System.Xml.Schema.XmlSchemaSet" />z. <see cref="T:System.Xml.Schema.XmlSchema" /></param>
        <summary>Usuwa określony schemat języka definicji schematu XML (XSD) z programu <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Obiekt usunięty <see cref="T:System.Xml.Schema.XmlSchemaSet" /> z lub <see langword="null" /> , Jeśli<see cref="T:System.Xml.Schema.XmlSchemaSet" />schemat nie został odnaleziony w elemencie. <see cref="T:System.Xml.Schema.XmlSchema" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usuwanie schematu z <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> zestawu ustawia właściwość na `false`.  
  
   
  
## Examples  
 Poniższy przykład ilustruje Dodawanie wielu schematów do obiektu <xref:System.Xml.Schema.XmlSchemaSet>, a następnie usunięcie jednego z schematów <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> przy użyciu metody.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat nie jest prawidłowym schematem.</exception>
        <exception cref="T:System.ArgumentNullException">Przesłany jako <see langword="null" />parametr. <see cref="T:System.Xml.Schema.XmlSchema" /></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">Obiekt, który ma zostać usunięty <see cref="T:System.Xml.Schema.XmlSchemaSet" />z. <see cref="T:System.Xml.Schema.XmlSchema" /></param>
        <summary>Usuwa określony schemat języka definicji schematu XML (XSD) i wszystkie schematy importowane z programu <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns><see langword="true" />Jeśli obiekt i wszystkie jego Importy zostały pomyślnie usunięte; <see langword="false" />w przeciwnym razie. <see cref="T:System.Xml.Schema.XmlSchema" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda usuwa określony schemat i wszystkie schematy importowane z programu <xref:System.Xml.Schema.XmlSchemaSet>, o ile nie ma żadnych zależności w schemacie lub jego importowanych schematach. <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> Jeśli istnieją zależności względem schematu lub zaimportowanych schematów w programie <xref:System.Xml.Schema.XmlSchemaSet>, nic nie jest usuwane i <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> zwraca. `false` Jeśli `false` jest zwracany <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> i jest zdefiniowany, do procedury obsługi zdarzeń opisującej zależności jest wysyłane ostrzeżenie.  
  
 Jeśli określony schemat importuje inne schematy, a określony schemat został wcześniej usunięty przy użyciu <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> metody <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> , metoda nie spowoduje usunięcia zaimportowanych schematów i zwróci `false`wartość. Na przykład, jeśli `parentSchema` Importy `childSchema2` `childSchema1` i następujący kod zostaną usunięte `parentSchema`tylko, ale nie zaimportowane `childSchema1` i `childSchema2` schematy:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Poniższy kod `parentSchema` usunie i zaimportowane schematy:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Metoda nie ma wpływu na stan <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwości. <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje Dodawanie wielu schematów do obiektu <xref:System.Xml.Schema.XmlSchemaSet>, a następnie usunięcie jednego ze schematów i wszystkich schematów importowanych przez niego <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> przy użyciu metody.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Przesłany jako <see langword="null" />parametr. <see cref="T:System.Xml.Schema.XmlSchema" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Schemat do przetworzenia.</param>
        <summary>Przetwarza ponownie schemat języka definicji schematu XML (XSD), który już istnieje w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> Obiekt, jeśli schemat jest prawidłowym schematem. Jeśli schemat jest nieprawidłowy i <see cref="T:System.Xml.Schema.ValidationEventHandler" /> został określony, <see langword="null" /> jest zwracany i zostanie zgłoszone odpowiednie zdarzenie walidacji. W przeciwnym razie jest zgłaszany. <see cref="T:System.Xml.Schema.XmlSchemaException" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przetworzenie schematu wykonuje wszystkie kroki przetwarzania wstępnego wykonane w schemacie, gdy <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> wywoływana jest metoda. Jeśli wywołanie <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> powiedzie się <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> , właściwość jest ustawiona na `false`.  
  
 Metoda Reprocess powinna zostać użyta po zmodyfikowaniu schematu w <xref:System.Xml.Schema.XmlSchemaSet> programie <xref:System.Xml.Schema.XmlSchemaSet> po wykonaniu kompilacji.  
  
> [!NOTE]
>  Należy wywołać metodę, <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Jeśli zmieniono schemat (lub jeden z jego elementów include/import) po dodaniu go do programu. <xref:System.Xml.Schema.XmlSchemaSet> <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> Metoda sprawdzi schemat o ważności strukturalnej zgodnie z regułami schematu W3C XML. Nie zostanie jednak wykonana pełna Walidacja. Spowoduje to również rozpoznanie odwołań do wewnętrznych i zewnętrznych składników schematu. Wszystkie zaimportowane lub dołączone schematy, które zostały pomyślnie pobrane, również zostaną <xref:System.Xml.Schema.XmlSchemaSet>dodane do. Importowane schematy są dodawane jako osobne <xref:System.Xml.Schema.XmlSchema> obiekty, podczas gdy dołączone schematy są częścią dołączania. <xref:System.Xml.Schema.XmlSchema> Jeśli wywołanie przetworzenia zakończy się pomyślnie, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość ma wartość FAŁSZ.  
  
   
  
## Examples  
 Poniższy przykład ilustruje reprzetwarzanie schematu dodanego do <xref:System.Xml.Schema.XmlSchemaSet>. <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> <xref:System.Xml.Schema.XmlSchemaSet> `true` <xref:System.Xml.Schema.XmlSchemaSet> Po skompilowaniu <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> przy użyciu metody, a schemat dodany do elementu jest modyfikowany, właściwość zostanie ustawiona na, nawet jeśli schemat w został zmodyfikowany. <xref:System.Xml.Schema.XmlSchemaSet> Wywołanie metody wykonuje wszystkie przetwarzanie wstępne wykonywane <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> przez metodę i ustawia <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> właściwość na `false`. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Schemat jest nieprawidłowy.</exception>
        <exception cref="T:System.ArgumentNullException">Obiekt przeszedł jako <see langword="null" />parametr. <see cref="T:System.Xml.Schema.XmlSchema" /></exception>
        <exception cref="T:System.ArgumentException">Obiekt <see cref="T:System.Xml.Schema.XmlSchema" /> , który został przesłany jako parametr, nie istnieje już <see cref="T:System.Xml.Schema.XmlSchemaSet" />w elemencie.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję schematów języka definicji schematu XML (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kolekcję wszystkich schematów języka definicji schematu XML (XSD) w <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Obiekt zawierający wszystkie schematy, które zostały dodane <see cref="T:System.Xml.Schema.XmlSchemaSet" />do. <see cref="T:System.Collections.ICollection" /> Jeśli żaden schemat nie został dodany do <see cref="T:System.Xml.Schema.XmlSchemaSet" />, zwracany jest pusty <see cref="T:System.Collections.ICollection" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zwraca schematy, które zostały dodane pośrednio do <xref:System.Xml.Schema.XmlSchemaSet> , ponieważ zostały zaimportowane.  
  
> [!NOTE]
>  Metoda jest odpowiednikiem <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> metody przestarzałej <xref:System.Xml.Schema.XmlSchemaCollection>. <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>  
  
   
  
## Examples  
 Poniższy przykład ilustruje, jak wykonać iterację we wszystkich schematach w <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Właściwość schematu <paramref name="targetNamespace" /> .</param>
        <summary>Zwraca kolekcję <see cref="T:System.Xml.Schema.XmlSchemaSet" /> zawierającą wszystkie schematy języka definicji schematu XML (XSD) należące do danego obszaru nazw.</summary>
        <returns>Obiekt zawierający wszystkie schematy, które zostały dodane <see cref="T:System.Xml.Schema.XmlSchemaSet" /> do danego obszaru nazw. <see cref="T:System.Collections.ICollection" /> Jeśli żaden schemat nie został dodany do <see cref="T:System.Xml.Schema.XmlSchemaSet" />, zwracany jest pusty <see cref="T:System.Collections.ICollection" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli parametr ma wartość `null` lub <xref:System.String.Empty>, zwracane są wszystkie schematy bez przestrzeni nazw. `targetNamespace`  
  
 Ta metoda zwraca schematy, które zostały dodane pośrednio do <xref:System.Xml.Schema.XmlSchemaSet> , ponieważ zostały zaimportowane.  
  
> [!NOTE]
>  Metoda jest odpowiednikiem <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> metody przestarzałej <xref:System.Xml.Schema.XmlSchemaCollection>. <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>  
  
   
  
## Examples  
 Poniższy przykład ilustruje, `http://www.contoso.com/books` <xref:System.Xml.Schema.XmlSchemaSet>jak wykonać iterację wszystkich schematów w przestrzeni nazw w.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa procedurę obsługi zdarzeń do uzyskiwania informacji o błędach walidacji schematu języka definicji schematu XML (XSD).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawia procedurę obsługi zdarzeń do uzyskiwania informacji o błędach walidacji schematu <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> w <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> przypadku wywołania metod <xref:System.Xml.Schema.XmlSchemaSet> lub.  
  
 Jeśli program obsługi zdarzeń nie jest zdefiniowany, <xref:System.Xml.Schema.XmlSchemaException> jest zgłaszany w <xref:System.Xml.Schema.XmlSeverityType> przypadku błędów walidacji, w <xref:System.Xml.Schema.XmlSeverityType.Error>których jest. Wyjątki nie są zgłaszane w przypadku błędów walidacji <xref:System.Xml.Schema.XmlSeverityType> z <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje Dodawanie <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> do przechwytywania błędów i ostrzeżeń podczas walidacji dokumentu XML względem schematu.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 W przykładzie jest użyty plik Books. XML jako dane wejściowe.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 W przykładzie jest użyty plik Books. xsd jako dane wejściowe.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlResolver" /> Ustawia używany do rozpoznawania przestrzeni nazw lub lokalizacji, do których odwołują się elementy include i import schematu.</summary>
        <value>Służy <see cref="T:System.Xml.XmlResolver" /> do rozpoznawania przestrzeni nazw lub lokalizacji, do których odwołuje się element include i Importuj elementy schematu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt jest używany do rozpoznawania przestrzeni nazw lub lokalizacji, do których odwołuje się elementy include i import schematu, za każdym razem, gdy <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> schemat zostanie dodany przy użyciu metod lub. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> <xref:System.Xml.XmlResolver> <xref:System.Xml.Schema.XmlSchemaSet>  
  
> [!IMPORTANT]
>  Zewnętrzne przestrzenie nazw lub lokalizacje, do których odwołują się elementy include, import i redefines schematu, są rozpoznawane w odniesieniu do podstawowego identyfikatora URI schematu, który zawiera lub importuje. Na przykład jeśli podstawowy identyfikator URI schematu dołączania lub importowania jest pusty lub `null`lokalizacje zewnętrzne są rozwiązywane w odniesieniu do bieżącego katalogu. <xref:System.Xml.XmlUrlResolver> Klasa jest używana do rozpoznawania schematów zewnętrznych domyślnie. Aby wyłączyć rozwiązanie dołączania, importowania i ponownego definiowania elementów schematu, należy ustawić <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> właściwość na. `null`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>
