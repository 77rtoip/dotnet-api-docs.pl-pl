<Type Name="XmlSchemaValidator" FullName="System.Xml.Schema.XmlSchemaValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="593dcfff13b2f3c4579da94de3116830777dc050" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30741791" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlSchemaValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlSchemaValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaValidator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlSchemaValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaValidator sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje aparat do sprawdzania poprawności schematu języka definicji schematu XML (XSD). <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> Klasy nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   Nie należy używać schematów z nieznaną lub niezaufaną źródeł lub lokalizacji. W ten sposób spowoduje naruszenie zabezpieczeń kodu.  
> -   Schematy XML (w tym wbudowane schematy) są z założenia podatne na ataki; nie akceptuje tych postanowień w scenariuszach niezaufanych.  
> -   Komunikaty o błędach weryfikacji schematu i wyjątków może narazić poufnych informacji o modelu zawartości lub identyfikator URI ścieżki do pliku schematu. Nie można więc ujawnić te informacje dotyczące obiektów wywołujących niezaufanych.  
  
 <xref:System.Xml.Schema.XmlSchemaValidator> Klasy udostępnia mechanizm wydajne, wysokiej wydajności, aby sprawdzić poprawność danych XML względem schematów XML w sposób wypychania. Na przykład <xref:System.Xml.Schema.XmlSchemaValidator> klasa umożliwia sprawdzenie poprawności XML typu infoset sprawdzonych w miejscu, bez konieczności serializować go jako dokument XML i ponownej analizy dokumentu za pomocą sprawdzania poprawności modułu odczytującego XML. <xref:System.Xml.Schema.XmlSchemaValidator> Klasa może również służyć do tworzenia aparaty sprawdzania poprawności, za pośrednictwem niestandardowych źródeł danych XML lub jako sposobu tworzenia sprawdzania poprawności Edytor XML.  
  
 Aby uzyskać więcej informacji na temat <xref:System.Xml.Schema.XmlSchemaValidator> , zobacz [XmlSchemaValidator wypychania weryfikacji](~/docs/standard/data/xml/xmlschemavalidator-push-based-validation.md) tematu.  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> i <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> flagi weryfikacji <xref:System.Xml.Schema.XmlSchemaValidator> obiektu nie są zestaw jest domyślnie. Ponadto <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> właściwość <xref:System.Xml.Schema.XmlSchemaValidator> obiekt jest `null` domyślnie. W związku z tym schematów zewnętrznych, do którego odwołuje się uwzględnić, importy lub elementy ponowne definiowanie nie rozwiązane domyślnie.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje `contosoBooks.xml` pliku przed `contosoBooks.xsd` schematu. W przykładzie użyto <xref:System.Xml.Serialization.XmlSerializer> klasy do deserializacji `contosoBooks.xml` plik i przekazać wartość węzłów do metody <xref:System.Xml.Schema.XmlSchemaValidator> klasy.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 Przykład przyjmuje `contosoBooks.xml` pliku jako dane wejściowe.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 Przykład również przyjmuje `contosoBooks.xsd` jako danych wejściowych.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaValidator (System.Xml.XmlNameTable nameTable, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.IXmlNamespaceResolver namespaceResolver, System.Xml.Schema.XmlSchemaValidationFlags validationFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.IXmlNamespaceResolver namespaceResolver, valuetype System.Xml.Schema.XmlSchemaValidationFlags validationFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable, schemas As XmlSchemaSet, namespaceResolver As IXmlNamespaceResolver, validationFlags As XmlSchemaValidationFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaValidator(System::Xml::XmlNameTable ^ nameTable, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::IXmlNamespaceResolver ^ namespaceResolver, System::Xml::Schema::XmlSchemaValidationFlags validationFlags);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
        <Parameter Name="validationFlags" Type="System.Xml.Schema.XmlSchemaValidationFlags" />
      </Parameters>
      <Docs>
        <param name="nameTable">
          <see cref="T:System.Xml.XmlNameTable" /> Obiekt zawierający element i atrybut nazwy jako ciągi atomized.</param>
        <param name="schemas">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> Obiektu zawierającego schematy języka definicji schematu XML (XSD) używany do sprawdzania poprawności.</param>
        <param name="namespaceResolver">
          <see cref="T:System.Xml.IXmlNamespaceResolver" /> Obiekt używany do rozpoznawania nazw podczas sprawdzania poprawności.</param>
        <param name="validationFlags">
          <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> Wartość określającą opcje sprawdzania poprawności schematu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> konstruktora.  
  
-   Zawartość <xref:System.Xml.Schema.XmlSchemaSet> parametru są kopiowane do wewnętrznego <xref:System.Xml.Schema.XmlSchemaSet> obiektu podczas <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> lub <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> są ustawione opcje sprawdzania poprawności. W związku z tym zmiany w danych wejściowych <xref:System.Xml.Schema.XmlSchemaSet> obiektu podczas sprawdzania poprawności nie ma wpływu na wynik weryfikacji.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaSet> określono parametr nie jest skompilowany, jego <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> metoda jest wywoływana.  
  
-   <xref:System.Xml.IXmlNamespaceResolver> Parametr jest szczególnie ważne w przypadku sprawdzania poprawności `xs:QName` typów. <xref:System.Xml.Schema.XmlSchemaValidator> Klasy nie kopiuje przestrzeni nazw w zakresie od <xref:System.Xml.IXmlNamespaceResolver> obiekt, ale zamiast tego zawiera odwołanie do niej. Dzięki temu nowych przestrzeni nazw do dodania do <xref:System.Xml.IXmlNamespaceResolver> obiektu w procesie weryfikacji.  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> i <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> flagi weryfikacji <xref:System.Xml.Schema.XmlSchemaValidator> obiektu nie są zestaw jest domyślnie. Ponadto <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> właściwość <xref:System.Xml.Schema.XmlSchemaValidator> obiekt jest `null` domyślnie. W związku z tym schematów zewnętrznych, do którego odwołuje się uwzględnić, importy lub elementy ponowne definiowanie nie rozwiązane domyślnie.  
  
   
  
## Examples  
 Przykład <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> konstruktora, zobacz <xref:System.Xml.Schema.XmlSchemaValidator> temat referencyjny klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Co najmniej jedna określone parametry <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Wystąpił błąd podczas kompilowania schematów w <see cref="T:System.Xml.Schema.XmlSchemaSet" /> parametru.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaSet" />
        <altmember cref="T:System.Xml.IXmlNamespaceResolver" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="AddSchema">
      <MemberSignature Language="C#" Value="public void AddSchema (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSchema(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddSchema (schema As XmlSchema)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSchema(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Obiekt do dodania do zestawu schematów używany do sprawdzania poprawności.</param>
        <summary>Dodaje zestaw schematów używany do sprawdzania poprawności schematu języka definicji schematu XML (XSD).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> metody.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> Metody można symulować efekt napotkania wbudowanego schematu XML w dokumencie XML sprawdzania poprawności.  
  
-   Docelowa przestrzeń nazw <xref:System.Xml.Schema.XmlSchema> parametru nie może być zgodna z dowolny element lub atrybut już występujących <xref:System.Xml.Schema.XmlSchemaValidator> obiektu.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> nie ustawiono opcję sprawdzania poprawności, <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> — metoda nie działa.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Docelowa przestrzeń nazw <see cref="T:System.Xml.Schema.XmlSchema" /> parametru jest zgodny ze dowolny element lub atrybut już występujących <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> obiektu.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> Parametr jest nieprawidłowy.</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchema" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="EndValidation">
      <MemberSignature Language="C#" Value="public void EndValidation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndValidation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndValidation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndValidation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy sprawdzania poprawności i sprawdza ograniczenia tożsamości dla całego dokumentu XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A> Metoda kończy się sprawdzanie poprawności i ograniczenia tożsamości w całym dokumencie XML sprawdza, czy <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> ustawiono opcję sprawdzania poprawności.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Błąd ograniczenia tożsamości został znaleziony w dokumencie XML.</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedAttributes () As XmlSchemaAttribute()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaAttribute ^&gt; ^ GetExpectedAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaAttribute[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca oczekiwanych atrybutów dla bieżącego kontekstu elementu.</summary>
        <returns>Tablica <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> obiektów lub pusta tablica, jeśli nie oczekiwanych atrybutów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> metody.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> metoda jest wywoływana bezpośrednio po <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> metody, zwracane są wszystkie atrybuty, które mogą występować w dokumencie XML.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> metoda jest wywoływana po wykonaniu wywołań co najmniej jeden <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> metody, zwracane są atrybuty, które nie zostały jeszcze zatwierdzone dla bieżącego elementu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedParticles">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedParticles () As XmlSchemaParticle()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaParticle ^&gt; ^ GetExpectedParticles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaParticle[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca oczekiwanych cząstek w bieżącym kontekście elementu.</summary>
        <returns>Tablica <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> obiektów lub pusta tablica, jeśli istnieją nie oczekiwano cząstek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nieprawidłowa cząstki, które mogą być zwrócone przez <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> metody są wystąpieniami klasy <xref:System.Xml.Schema.XmlSchemaElement> i <xref:System.Xml.Schema.XmlSchemaAny> klasy.  
  
 Gdy compositor dla modelu zawartości jest `xs:sequence`, jest zwracana tylko dalej cząstki w sekwencji. Jeśli compositor dla modelu zawartości jest `xs:all` lub `xs:choice`, a następnie zwracane są wszystkie prawidłowe cząstki, które można wykonać w bieżącym kontekście elementu.  
  
 Na przykład w języku definicji schematu XML (XSD) schematu i XML dokumentu poniżej, po weryfikacji `book` elementu `book` element jest bieżącym kontekście elementu. <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> Metoda zwraca tablicę zawierającą pojedynczy <xref:System.Xml.Schema.XmlSchemaElement> reprezentujący obiekt `title` elementu. Gdy jest kontekst weryfikacji `title` elementu <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> metoda zwraca pustą tablicę. Jeśli <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> metoda jest wywoływana po wykonaniu `title` element została zweryfikowana, ale przed wysłaniem `description` został zweryfikowany element, zwraca tablicę zawierającą pojedynczy <xref:System.Xml.Schema.XmlSchemaElement> reprezentujący obiekt `description` elementu. Jeśli <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> metoda jest wywoływana po wykonaniu `description` element został zweryfikowany, a następnie zwraca tablicę zawierającą pojedynczy <xref:System.Xml.Schema.XmlSchemaAny> obiekt reprezentujący symbol wieloznaczny.  
  
```vb  
Dim reader As XmlReader =  XmlReader.Create("input.xml")   
  
Dim schemaSet As XmlSchemaSet =  New XmlSchemaSet()   
schemaSet.Add(Nothing, "schema.xsd")  
Dim manager As XmlNamespaceManager =  New XmlNamespaceManager(reader.NameTable)   
  
Dim validator As XmlSchemaValidator =  New XmlSchemaValidator(reader.NameTable,schemaSet,manager,XmlSchemaValidationFlags.None)  
validator.Initialize()  
  
validator.ValidateElement("book", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("title", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
validator.ValidateEndElement(Nothing)  
  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("description", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
For Each particle As XmlSchemaParticle In validator.GetExpectedParticles()  
    Console.WriteLine(particle.GetType())  
Next  
  
validator.ValidateElement("namespace", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlReader reader = XmlReader.Create("input.xml");  
  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize();  
  
validator.ValidateElement("book", "", null);  
  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("title", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("description", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaParticle particle in validator.GetExpectedParticles())  
{  
    Console.WriteLine(particle.GetType());  
}  
  
validator.ValidateElement("namespace", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
validator.ValidateEndElement(null);  
```  
  
 Przykład przyjmuje następujące XML jako dane wejściowe.  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="book">`  
  
 `<xs:complexType>`  
  
 `<xs:sequence>`  
  
 `<xs:element name="title" type="xs:string" />`  
  
 `<xs:element name="description" type="xs:string" />`  
  
 `<xs:any processContents ="lax"/>`  
  
 `</xs:sequence>`  
  
 `</xs:complexType>`  
  
 `</xs:element>`  
  
 `</xs:schema>`  
  
 Przykład przyjmuje następujące schematu XSD jako dane wejściowe.  
  
 `<book>`  
  
 `<title>My Book</title>`  
  
 `<description>My Book's Description</description>`  
  
 `<namespace>System.Xml.Schema</namespace>`  
  
 `</book>`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaParticle" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAny" />
      </Docs>
    </Member>
    <Member MemberName="GetUnspecifiedDefaultAttributes">
      <MemberSignature Language="C#" Value="public void GetUnspecifiedDefaultAttributes (System.Collections.ArrayList defaultAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetUnspecifiedDefaultAttributes(class System.Collections.ArrayList defaultAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetUnspecifiedDefaultAttributes (defaultAttributes As ArrayList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetUnspecifiedDefaultAttributes(System::Collections::ArrayList ^ defaultAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultAttributes" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="defaultAttributes">
          <see cref="T:System.Collections.ArrayList" /> Do wypełnienia z <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> obiektów wszystkich atrybutów nie została jeszcze wystąpił podczas sprawdzania poprawności w kontekście elementu.</param>
        <summary>Weryfikuje tożsamość ograniczenia dotyczące atrybutów domyślnych i wypełnia <see cref="T:System.Collections.ArrayList" /> określenia <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> obiektów wszystkich atrybutów z wartościami domyślnymi, które nie zostały wcześniej zatwierdzone przy użyciu <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> metody w elemencie kontekst.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> Metoda musi zostać wywołana po sprawdzania poprawności atrybutów bieżącego elementu z <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> metody. <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> Metodę do określenia atrybutów domyślnych ma zostać wstawiony do sprawdzania poprawności dokumentu XML.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Initialize">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje stan <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicjuje stan <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> Metoda jest prawidłowa, gdy wywoływana natychmiast po wykonaniu konstrukcji tylko <xref:System.Xml.Schema.XmlSchemaValidator> obiektu lub po wywołaniu <xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A>.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje `contosoBooks.xml` pliku przed `contosoBooks.xsd` schematu. W przykładzie użyto <xref:System.Xml.Serialization.XmlSerializer> klasy do deserializacji `contosoBooks.xml` plik i przekazać wartość węzłów do metody <xref:System.Xml.Schema.XmlSchemaValidator> klasy.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 Przykład przyjmuje `contosoBooks.xml` pliku jako dane wejściowe.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 Przykład również przyjmuje `contosoBooks.xsd` jako danych wejściowych.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> metoda jest prawidłowa, natychmiast po skonstruowaniu <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> obiektu lub po wywołaniu <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> tylko.</exception>
        <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (System.Xml.Schema.XmlSchemaObject partialValidationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize(class System.Xml.Schema.XmlSchemaObject partialValidationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (partialValidationType As XmlSchemaObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize(System::Xml::Schema::XmlSchemaObject ^ partialValidationType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
      </Parameters>
      <Docs>
        <param name="partialValidationType">
          <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, Lub <see cref="T:System.Xml.Schema.XmlSchemaType" /> obiekt używany do inicjowania kontekst weryfikacji <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> obiektu dla częściowego sprawdzania poprawności.</param>
        <summary>Inicjuje stan <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> przy użyciu <see cref="T:System.Xml.Schema.XmlSchemaObject" /> określony dla częściowego sprawdzania poprawności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> Metody pobierającej <xref:System.Xml.Schema.XmlSchemaObject> jako parametr inicjuje <xref:System.Xml.Schema.XmlSchemaValidator> obiekt początkowy stan dla częściowego sprawdzania poprawności.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Xml.Schema.XmlSchemaObject> inicjowane dla przy użyciu częściowego sprawdzania poprawności <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> metody. `orderNumber` Elementu schematu jest przekazywana przez wybranie elementu schematu przez <xref:System.Xml.XmlQualifiedName> w <xref:System.Xml.Schema.XmlSchemaObjectTable> kolekcji zwróconej przez <xref:System.Xml.Schema.XmlSchemaSet.GlobalElements%2A> właściwość <xref:System.Xml.Schema.XmlSchemaSet> obiektu. <xref:System.Xml.Schema.XmlSchemaValidator> Obiektu następnie weryfikuje ten konkretny element.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "schema.xsd")  
schemaSet.Compile()  
Dim nameTable As NameTable = New NameTable()  
Dim manager As XmlNamespaceManager = New XmlNamespaceManager(nameTable)  
  
Dim validator As XmlSchemaValidator = New XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None)  
validator.Initialize(schemaSet.GlobalElements.Item(New XmlQualifiedName("orderNumber")))  
  
validator.ValidateElement("orderNumber", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateText("123")  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
schemaSet.Compile();  
NameTable nameTable = new NameTable();  
XmlNamespaceManager manager = new XmlNamespaceManager(nameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize(schemaSet.GlobalElements[new XmlQualifiedName("orderNumber")]);  
  
validator.ValidateElement("orderNumber", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateText("123");  
validator.ValidateEndElement(null);  
```  
  
 Przykład przyjmuje następujące schematu XML jako dane wejściowe.  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="orderNumber" type="xs:int" />`  
  
 `</xs:schema>`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wywoływanie <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> metoda jest prawidłowa, natychmiast po skonstruowaniu <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> obiektu lub po wywołaniu <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> tylko.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Xml.Schema.XmlSchemaObject" /> Parametr nie jest <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, lub <see cref="T:System.Xml.Schema.XmlSchemaType" /> obiektu.</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchemaObject" /> Parametr nie może być <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaObject" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaType" />
      </Docs>
    </Member>
    <Member MemberName="LineInfoProvider">
      <MemberSignature Language="C#" Value="public System.Xml.IXmlLineInfo LineInfoProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.IXmlLineInfo LineInfoProvider" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property LineInfoProvider As IXmlLineInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::IXmlLineInfo ^ LineInfoProvider { System::Xml::IXmlLineInfo ^ get(); void set(System::Xml::IXmlLineInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.IXmlLineInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje o numerach wierszy dla węzła XML sprawdzania poprawności.</summary>
        <value>
          <see cref="T:System.Xml.IXmlLineInfo" /> Obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Informacje dotyczące wiersza został zgłoszony przez żadnego <xref:System.Xml.Schema.XmlSchemaValidationException> zgłoszony w procesie weryfikacji.  
  
-   Wartość domyślna <xref:System.Xml.IXmlLineInfo> obiektu zwróconego przez <xref:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider%2A> właściwość zwraca wartość 0 dla <xref:System.Xml.IXmlLineInfo.LineNumber%2A> i <xref:System.Xml.IXmlLineInfo.LinePosition%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.IXmlLineInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="SkipToEndElement">
      <MemberSignature Language="C#" Value="public void SkipToEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToEndElement (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> Obiektu, którego właściwości są ustawione, jeśli pomyślnie pominięto bieżącej zawartości elementu. Ten parametr może być <see langword="null" />.</param>
        <summary>Pomija weryfikację bieżącego elementu zawartości i przygotowuje <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> obiektu do weryfikacji zawartości w kontekście elementu nadrzędnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A> metody.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A> Metody Pomija weryfikację bieżącego elementu zawartości i przygotowuje <xref:System.Xml.Schema.XmlSchemaValidator> obiektu sprawdzanie zawartości w kontekście elementu nadrzędnego; jest odpowiednikiem pomijanie sprawdzania poprawności dla wszystkie elementy podrzędne bieżącego elementu, a następnie wywoływanie <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metody.  
  
-   Jeśli bieżący element zawartości pomyślnie jest pominięta, <xref:System.Xml.Schema.XmlSchemaInfo> obiektu użytkownika (Jeśli określono) <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwość jest ustawiona na <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
> [!NOTE]
>  Pominięto zawartości nie zostały zgłoszone błędy nie sprawdzania poprawności.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład wywołanie elementu <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> po wywołaniu <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="SourceUri">
      <MemberSignature Language="C#" Value="public Uri SourceUri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri SourceUri" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.SourceUri" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ SourceUri { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia identyfikator URI źródła dla węzła XML sprawdzania poprawności.</summary>
        <value>A <see cref="T:System.Uri" /> obiekt reprezentujący identyfikator URI źródła dla węzła XML weryfikowany; wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   Źródło identyfikatora URI został zgłoszony przez żadnego <xref:System.Xml.Schema.XmlSchemaValidationException> zgłoszony w procesie weryfikacji.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaValidator.SourceUri%2A> właściwość nie jest ustawiona, to nazwa pliku dokumentu XML <xref:System.String.Empty> w komunikatów o błędach weryfikacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sprawdza poprawność atrybutu w bieżącym kontekście elementu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, string attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, string attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As String, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::String ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">Lokalna nazwa atrybutu do sprawdzania poprawności.</param>
        <param name="namespaceUri">Identyfikator URI przestrzeni nazw atrybutu do sprawdzania poprawności.</param>
        <param name="attributeValue">Wartość atrybutu do sprawdzania poprawności.</param>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> Obiektu, którego właściwości są ustawione w pomyślnym zweryfikowaniem atrybutu. Ten parametr może być <see langword="null" />.</param>
        <summary>Weryfikuje nazwy atrybutu, identyfikator URI przestrzeni nazw i wartości w kontekście bieżącego elementu.</summary>
        <returns>Wartość atrybutu zweryfikowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> metody.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> Metoda musi zostać wywołana po sprawdzania poprawności atrybutów bieżącego elementu z <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> metody.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaAttribute> obiekt został przekazany do <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> metody <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> metoda sprawdza poprawność atrybutu przed <xref:System.Xml.Schema.XmlSchemaAttribute> obiektu.  
  
-   Jeśli ten atrybut zostanie pomyślnie sprawdzony w bieżącym kontekście elementu <xref:System.Xml.Schema.XmlSchemaInfo> obiektu użytkownika (Jeśli określono) <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, i <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwości są ustawione z wynikami weryfikacji.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje `contosoBooks.xml` pliku przed `contosoBooks.xsd` schematu. W przykładzie użyto <xref:System.Xml.Serialization.XmlSerializer> klasy do deserializacji `contosoBooks.xml` plik i przekazać wartość węzłów do metody <xref:System.Xml.Schema.XmlSchemaValidator> klasy.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 Przykład przyjmuje `contosoBooks.xml` pliku jako dane wejściowe.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 Przykład również przyjmuje `contosoBooks.xsd` jako danych wejściowych.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Ten atrybut jest nieprawidłowy w bieżącym kontekście elementu.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład wywołanie elementu <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> po wywołaniu <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <exception cref="T:System.ArgumentNullException">Co najmniej jedna określone parametry <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, System.Xml.Schema.XmlValueGetter attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, class System.Xml.Schema.XmlValueGetter attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As XmlValueGetter, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlValueGetter ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.Xml.Schema.XmlValueGetter" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">Lokalna nazwa atrybutu do sprawdzania poprawności.</param>
        <param name="namespaceUri">Identyfikator URI przestrzeni nazw atrybutu do sprawdzania poprawności.</param>
        <param name="attributeValue">
          <see cref="T:System.Xml.Schema.XmlValueGetter" />
          <see langword="delegate" /> Służy do przekazywania wartość atrybutu jako typ środowiska uruchomieniowego języka wspólnego (CLR) zgodny z typem języka definicji schematu XML (XSD) atrybutu.</param>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> Obiektu, którego właściwości są ustawione w pomyślnym zweryfikowaniem atrybutu. Ten parametr może być <see langword="null" />.</param>
        <summary>Weryfikuje nazwy atrybutu, identyfikator URI przestrzeni nazw i wartości w kontekście bieżącego elementu.</summary>
        <returns>Wartość atrybutu zweryfikowany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> metody.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> Metoda musi zostać wywołana po sprawdzania poprawności atrybutów bieżącego elementu z <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> metody.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaAttribute> obiekt został przekazany do <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> metody <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> metoda sprawdza poprawność atrybutu przed <xref:System.Xml.Schema.XmlSchemaAttribute> obiektu.  
  
-   Jeśli ten atrybut zostanie pomyślnie sprawdzony w bieżącym kontekście elementu <xref:System.Xml.Schema.XmlSchemaInfo> obiektu użytkownika (Jeśli określono) <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, i <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwości są ustawione z wynikami weryfikacji.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje `contosoBooks.xml` pliku przed `contosoBooks.xsd` schematu. W przykładzie użyto <xref:System.Xml.Serialization.XmlSerializer> klasy do deserializacji `contosoBooks.xml` plik i przekazać wartość węzłów do metody <xref:System.Xml.Schema.XmlSchemaValidator> klasy.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 Przykład przyjmuje `contosoBooks.xml` pliku jako dane wejściowe.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 Przykład również przyjmuje `contosoBooks.xsd` jako danych wejściowych.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Ten atrybut jest nieprawidłowy w bieżącym kontekście elementu.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład wywołanie elementu <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> po wywołaniu <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <exception cref="T:System.ArgumentNullException">Co najmniej jedna określone parametry <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Weryfikuje element w bieżącym kontekście.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">Lokalna nazwa elementu do zweryfikowania.</param>
        <param name="namespaceUri">Identyfikator URI przestrzeni nazw elementu do sprawdzania poprawności.</param>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> Obiektu, którego właściwości są ustawione w pomyślnym zweryfikowaniem nazwy elementu. Ten parametr może być <see langword="null" />.</param>
        <summary>Weryfikuje element w bieżącym kontekście.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> metody.  
  
-   Jeśli pomyślnie sprawdzić poprawności nazwy elementu w bieżącym kontekście <xref:System.Xml.Schema.XmlSchemaInfo> obiektu użytkownika (Jeśli określono) <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>, i <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwości są ustawione z wynikami weryfikacji.  
  
-   Jeśli nazwa elementu lub dowolny z jego atrybuty są nieprawidłowe bieżącego kontekstu <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwość jest ustawiona na <xref:System.Xml.Schema.XmlSchemaValidity.Invalid>; w przeciwnym razie <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwość jest ustawiona na <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje `contosoBooks.xml` pliku przed `contosoBooks.xsd` schematu. W przykładzie użyto <xref:System.Xml.Serialization.XmlSerializer> klasy do deserializacji `contosoBooks.xml` plik i przekazać wartość węzłów do metody <xref:System.Xml.Schema.XmlSchemaValidator> klasy.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 Przykład przyjmuje `contosoBooks.xml` pliku jako dane wejściowe.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 Przykład również przyjmuje `contosoBooks.xsd` jako danych wejściowych.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Nazwa elementu jest nieprawidłowa w bieżącym kontekście.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> metoda jest wywoływana po wywołaniu <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo, xsiType As String, xsiNil As String, xsiSchemaLocation As String, xsiNoNamespaceSchemaLocation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::String ^ xsiType, System::String ^ xsiNil, System::String ^ xsiSchemaLocation, System::String ^ xsiNoNamespaceSchemaLocation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="xsiType" Type="System.String" />
        <Parameter Name="xsiNil" Type="System.String" />
        <Parameter Name="xsiSchemaLocation" Type="System.String" />
        <Parameter Name="xsiNoNamespaceSchemaLocation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Lokalna nazwa elementu do zweryfikowania.</param>
        <param name="namespaceUri">Identyfikator URI przestrzeni nazw elementu do sprawdzania poprawności.</param>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> Obiektu, którego właściwości są ustawione w pomyślnym zweryfikowaniem nazwy elementu. Ten parametr może być <see langword="null" />.</param>
        <param name="xsiType">
          <c>Xsi: type</c> wartość elementu atrybutu. Ten parametr może być <see langword="null" />.</param>
        <param name="xsiNil">
          <c>Xsi: nil</c> wartość elementu atrybutu. Ten parametr może być <see langword="null" />.</param>
        <param name="xsiSchemaLocation">
          <c>Istnieją schematy</c> wartość elementu atrybutu. Ten parametr może być <see langword="null" />.</param>
        <param name="xsiNoNamespaceSchemaLocation">
          <c>Xsi:NoNamespaceSchemaLocation</c> wartość elementu atrybutu. Ten parametr może być <see langword="null" />.</param>
        <summary>Weryfikuje element w bieżącym kontekście z <c>xsi: type</c>, <c>xsi: nil</c>, <c>istnieją schematy</c>, i <c>xsi:NoNamespaceSchemaLocation</c> wartości określonych atrybutów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> metody.  
  
-   Jeśli pomyślnie sprawdzić poprawności nazwy elementu w bieżącym kontekście <xref:System.Xml.Schema.XmlSchemaInfo> obiektu użytkownika (Jeśli określono) <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>, i <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwości są ustawione z wynikami weryfikacji.  
  
-   Jeśli nazwa elementu lub dowolny z jego atrybuty są prawidłowe w bieżącym kontekście <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwość jest ustawiona na <xref:System.Xml.Schema.XmlSchemaValidity.Invalid>; w przeciwnym razie <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwość jest ustawiona na <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> wartość nie została przekazana jako parametr <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> konstruktora, `xsi:SchemaLocation` i `xsi:NoNamespaceSchemaLocation` wartości atrybutów są ignorowane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Nazwa elementu jest nieprawidłowa w bieżącym kontekście.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> metoda jest wywoływana po wywołaniu <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEndElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sprawdza, czy zawartości tekstowej elementu jest prawidłowy uwzględnieniu jego typu danych dla elementów z zawartością proste i sprawdza, czy zawartość bieżącego elementu jest pełny dla elementów z zawartością złożoną.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> Obiektu, którego właściwości są ustawione w pomyślnym zweryfikowaniem elementu. Ten parametr może być <see langword="null" />.</param>
        <summary>Sprawdza, czy zawartości tekstowej elementu jest prawidłowy uwzględnieniu jego typu danych dla elementów z zawartością proste i sprawdza, czy zawartość bieżącego elementu jest pełny dla elementów z zawartością złożoną.</summary>
        <returns>Przeanalizowane, wpisany tekst wartość elementu, jeśli element ma prostą zawartością.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metody.  
  
-   Dla elementów z prostej zawartości <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metoda sprawdza, czy zawartości tekstowej elementu jest prawidłowa zgodnie z jego typem danych i zwraca wartość typu przeanalizowany. Zawartości tekstowej elementu są uzyskiwane z wyników z poprzedniego wywołania <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>.  
  
-   Dla elementów z zawartością złożoną <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metoda sprawdza, czy zawartość bieżącego elementu jest pełny.  
  
-   Jeśli element ma wartość domyślną, wartość zwracana z <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metoda jest to wartość domyślna dla elementu.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaValidator> obiekt został skonstruowany przy <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> wartość jako parametr <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metody kontroli ograniczenia tożsamości zasady (jeśli istnieje), stosowane do elementu.  
  
-   Jeśli element zostanie pomyślnie sprawdzony w bieżącym kontekście <xref:System.Xml.Schema.XmlSchemaInfo> obiektu użytkownika (Jeśli określono) <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, i <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwości są ustawione z wynikami weryfikacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Zawartość elementu jest nieprawidłowa.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład jeśli <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> metoda jest wywoływana po wywołaniu <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo, typedValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::Object ^ typedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="typedValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> Obiektu, którego właściwości są ustawione na sprawdzeniu poprawności zawartości tekstowej elementu. Ten parametr może być <see langword="null" />.</param>
        <param name="typedValue">Zawartość tekstu elementu.</param>
        <summary>Sprawdza, czy zawartości tekstowej określony element jest prawidłowy uwzględnieniu jego typu danych.</summary>
        <returns>Przeanalizowane, wpisana prostej zawartości elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Jeśli jest sprawdzana poprawność przed `xs:key`, `xs:keyref`, lub `xs:unique` ograniczenia tożsamości, nie należy używać <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> przeciążenie metody. Zamiast tego wywołać <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> — metoda i przekaż go wartość elementu. Następnie wywołaj <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> przeciążenie metody, która przyjmuje <xref:System.Xml.Schema.XmlSchemaInfo> jako argument, aby sprawdzić poprawność uwzględnieniu jego typu danych zawartości tekstowej elementu.  
  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metody.  
  
-   Dla elementów z prostej zawartości <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A?displayProperty=nameWithType> metoda sprawdza, czy zawartości tekstowej elementu jest prawidłowa zgodnie z jego typem danych i zwraca wartość typu przeanalizowany. Zawartości tekstowej elementu są uzyskiwane z wpisaną zawartość przekazywana jako parametr.  
  
-   Jeśli wywołań <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> wcześniej wprowadzono metoda <xref:System.InvalidOperationException> jest generowany.  
  
-   Jeśli element ma zawartość złożoną <xref:System.InvalidOperationException> jest generowany.  
  
-   Jeśli <xref:System.Xml.Schema.XmlSchemaValidator> obiekt został skonstruowany przy <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> wartość jako parametr <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metody kontroli ograniczenia tożsamości zasady (jeśli istnieje), stosowane do elementu.  
  
-   Jeśli element zostanie pomyślnie sprawdzony w bieżącym kontekście <xref:System.Xml.Schema.XmlSchemaInfo> obiektu użytkownika (Jeśli określono) <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>, <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, i <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwości są ustawione z wynikami weryfikacji.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje `contosoBooks.xml` pliku przed `contosoBooks.xsd` schematu. W przykładzie użyto <xref:System.Xml.Serialization.XmlSerializer> klasy do deserializacji `contosoBooks.xml` plik i przekazać wartość węzłów do metody <xref:System.Xml.Schema.XmlSchemaValidator> klasy.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 Przykład przyjmuje `contosoBooks.xml` pliku jako dane wejściowe.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 Przykład również przyjmuje `contosoBooks.xsd` jako danych wejściowych.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Zawartości tekstowej elementu jest nieprawidłowy.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> w prawidłowej sekwencji nie wywołano metody (na przykład, jeśli <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> metoda jest wywoływana po wywołaniu <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />), wywołań <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> wcześniej wprowadzono metody lub element ma zawartość złożoną.</exception>
        <exception cref="T:System.ArgumentNullException">Parametr zawartości tekstu nie może być <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndOfAttributes">
      <MemberSignature Language="C#" Value="public void ValidateEndOfAttributes (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEndOfAttributes(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEndOfAttributes (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEndOfAttributes(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">
          <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> Obiektu, którego właściwości są ustawione na pomyślne weryfikacji, czy wszystkie atrybuty wymagane w kontekście elementu znajdują się. Ten parametr może być <see langword="null" />.</param>
        <summary>Sprawdza, czy wszystkie wymagane atrybuty w kontekście elementu są przedstawić i przygotowuje <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> obiektu do weryfikacji zawartość elementu podrzędnego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A> metody.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> Zawsze powinna zostać wywołana metoda <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A>.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A> Metoda musi zostać wywołana przed kontynuowaniem weryfikacji zawartości elementu.  
  
-   Jeśli podano wszystkich wymaganych atrybutów w kontekście elementu <xref:System.Xml.Schema.XmlSchemaInfo> obiektu użytkownika (Jeśli określono) <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> właściwość jest ustawiona na <xref:System.Xml.Schema.XmlSchemaValidity.Valid>.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje `contosoBooks.xml` pliku przed `contosoBooks.xsd` schematu. W przykładzie użyto <xref:System.Xml.Serialization.XmlSerializer> klasy do deserializacji `contosoBooks.xml` plik i przekazać wartość węzłów do metody <xref:System.Xml.Schema.XmlSchemaValidator> klasy.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 Przykład przyjmuje `contosoBooks.xml` pliku jako dane wejściowe.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 Przykład również przyjmuje `contosoBooks.xsd` jako danych wejściowych.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Nie znaleziono co najmniej jeden z wymaganych atrybutów w bieżącym kontekście elementu.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład wywołanie elementu <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> po wywołaniu <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
        <exception cref="T:System.ArgumentNullException">Co najmniej jedna określone parametry <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateText">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sprawdza, czy tekst jest dozwolona w bieżącym kontekście elementu i akumuluje tekst sprawdzania poprawności, jeśli bieżący element ma prostą zawartością.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::String ^ elementValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">Tekst <see langword="string" /> do weryfikacji w bieżącym kontekście elementu.</param>
        <summary>Sprawdza, czy tekst <see langword="string" /> określony jest dozwolona w bieżącym kontekście elementu i akumuluje tekst sprawdzania poprawności, jeśli bieżący element ma prostą zawartością.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> metody.  
  
-   Jeśli element ma prostej zawartości, tekst `string` określony jest połączony na każde wywołanie <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> metody do momentu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metoda jest wywoływana. Gdy <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metoda jest wywoływana, cały tekst został zweryfikowany.  
  
-   Jeśli element ma zawartość złożoną, występuje nie łączenia tekstu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Tekst <see langword="string" /> określonego nie jest dozwolona w bieżącym kontekście elementu.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> metoda jest wywoływana po wywołaniu <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <exception cref="T:System.ArgumentNullException">Tekst <see langword="string" /> parametr nie może być <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">
          <see cref="T:System.Xml.Schema.XmlValueGetter" />
          <see langword="delegate" /> Służy do przekazywania wartości tekstowej jako typ środowiska uruchomieniowego języka wspólnego (CLR) zgodny z typem języka definicji schematu XML (XSD) atrybutu.</param>
        <summary>Sprawdza, czy tekst zwrócony przez <see cref="T:System.Xml.Schema.XmlValueGetter" /> określony obiekt jest dozwolona w bieżącym kontekście elementu i akumuluje tekst sprawdzania poprawności, jeśli bieżący element ma prostą zawartością.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poniżej przedstawiono ważne uwagi, które należy wziąć pod uwagę przy użyciu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> metody.  
  
-   Jeśli element ma prostej zawartości, tekst `string` określony jest połączony na każde wywołanie <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> metody do momentu <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metoda jest wywoływana. Gdy <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> metoda jest wywoływana, cały tekst został zweryfikowany.  
  
-   Jeśli element ma zawartość złożoną, występuje nie łączenia tekstu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Tekst <see langword="string" /> określonego nie jest dozwolona w bieżącym kontekście elementu.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> metoda jest wywoływana po wywołaniu <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <exception cref="T:System.ArgumentNullException">Tekst <see langword="string" /> parametr nie może być <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateWhitespace">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sprawdza, czy biały znak jest dozwolona w bieżącym kontekście elementu i akumuluje biały znak w celu weryfikacji, jeśli bieżący element ma prostą zawartością.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::String ^ elementValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">Biały znak <see langword="string" /> do weryfikacji w bieżącym kontekście elementu.</param>
        <summary>Sprawdza, czy biały znak miejsce w <see langword="string" /> określony jest dozwolona w bieżącym kontekście elementu i akumuluje biały znak w celu weryfikacji, jeśli bieżący element ma prostą zawartością.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Biały znak jest niedozwolone w bieżącym kontekście elementu.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład jeśli <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> metoda jest wywoływana po wywołaniu <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">
          <see cref="T:System.Xml.Schema.XmlValueGetter" />
          <see langword="delegate" /> Służy do przekazywania wartości biały znak jako typ środowiska uruchomieniowego języka wspólnego (CLR) zgodny z typem języka definicji schematu XML (XSD) atrybutu.</param>
        <summary>Sprawdza, czy biały znak zwrócony przez <see cref="T:System.Xml.Schema.XmlValueGetter" /> określony obiekt jest dozwolona w bieżącym kontekście elementu i akumuluje biały znak w celu weryfikacji, jeśli bieżący element ma prostą zawartością.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Biały znak jest niedozwolone w bieżącym kontekście elementu.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> Metoda nie została wywołana w poprawnej kolejności. Na przykład jeśli <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> metoda jest wywoływana po wywołaniu <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Schema.ValidationEventHandler" /> Odbierająca schemat sprawdzania poprawności ostrzeżeń i błędów napotkanych podczas sprawdzania poprawności schematu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie <xref:System.Xml.Schema.ValidationEventHandler> jest określony, <xref:System.Xml.Schema.XmlSchemaValidationException> jest generowany dla wszystkich błędów sprawdzania poprawności schematu z <xref:System.Xml.Schema.XmlSeverityType> wartość <xref:System.Xml.Schema.XmlSeverityType.Error>. <xref:System.Xml.Schema.XmlSchemaValidationException> Nie zgłoszono ostrzeżeń weryfikacji z <xref:System.Xml.Schema.XmlSeverityType> wartość <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje `contosoBooks.xml` pliku przed `contosoBooks.xsd` schematu. W przykładzie użyto <xref:System.Xml.Serialization.XmlSerializer> klasy do deserializacji `contosoBooks.xml` plik i przekazać wartość węzłów do metody <xref:System.Xml.Schema.XmlSchemaValidator> klasy.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 Przykład przyjmuje `contosoBooks.xml` pliku jako dane wejściowe.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 Przykład również przyjmuje `contosoBooks.xsd` jako danych wejściowych.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventSender">
      <MemberSignature Language="C#" Value="public object ValidationEventSender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ValidationEventSender" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationEventSender As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ValidationEventSender { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obiekt wysyłane jako obiekt nadawcę zdarzenia sprawdzania poprawności.</summary>
        <value>
          <see cref="T:System.Object" />; Domyślnie jest to <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Na przykład zdarzenie sprawdzania poprawności zobacz <xref:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler> zdarzeń.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia <see cref="T:System.Xml.XmlResolver" /> obiekt używany do rozpoznania <c>xs:import</c> i <c>xs: obejmują</c> elementy oraz <c>istnieją schematy</c> i <c>xsi: noNamespaceSchemaLocation</c> atrybutów.</summary>
        <value>
          <see cref="T:System.Xml.XmlResolver" /> Obiekt; wartość domyślna jest <see cref="T:System.Xml.XmlUrlResolver" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> i <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> flagi weryfikacji <xref:System.Xml.Schema.XmlSchemaValidator> obiektu nie są zestaw jest domyślnie. Ponadto <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> właściwość <xref:System.Xml.Schema.XmlSchemaValidator> obiekt jest `null` domyślnie. W związku z tym schematów zewnętrznych, do którego odwołuje się uwzględnić, importy lub elementy ponowne definiowanie nie rozwiązane domyślnie.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>