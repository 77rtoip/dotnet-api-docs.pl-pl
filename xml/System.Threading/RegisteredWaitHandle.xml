<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RegisteredWaitHandle.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52981c0c3b50f02094deaf940943c288896ef2787.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2981c0c3b50f02094deaf940943c288896ef2787</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.RegisteredWaitHandle">
          <source>Represents a handle that has been registered when calling <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Reprezentuje uchwytu, które zostało zarejestrowane podczas wywoływania metody <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.RegisteredWaitHandle">
          <source>This class cannot be inherited.</source>
          <target state="translated">Klasa ta nie może być dziedziczona.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> Aby ustalić, dlaczego jest wywoływana metoda wywołania zwrotnego i jak wyrejestrować zadania, jeśli wystąpił wywołania zwrotnego, ponieważ został sygnalizowane dojście oczekiwania.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">W przykładzie przedstawiono również sposób użycia <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metody próbę wykonania metody wywołania zwrotnego określony podczas oczekiwania określonego dojścia jest sygnalizowane.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph>, and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">W tym przykładzie metoda wywołania zwrotnego jest <ph id="ph1">`WaitProc`</ph>, i jest dojście oczekiwania <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">W przykładzie zdefiniowano <ph id="ph1">`TaskInfo`</ph> klasy do przechowywania informacji, który jest przekazywany do wywołania zwrotnego, podczas wykonywania.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">W przykładzie jest tworzony <ph id="ph1">`TaskInfo`</ph> obiektów i przypisuje go niektórych danych ciągu.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> Zwróconego przez <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metody jest przypisany do <ph id="ph3">`Handle`</ph> pole <ph id="ph4">`TaskInfo`</ph> obiekt, tak aby metody wywołania zwrotnego ma dostęp do <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>In addition to specifying <ph id="ph1">`TaskInfo`</ph> as the object to pass to the callback method, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that the task will wait for, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one second time-out interval, and multiple callbacks.</source>
          <target state="translated">Oprócz określenia <ph id="ph1">`TaskInfo`</ph> jako obiekt, aby przekazać do metody wywołania zwrotnego, wywołanie <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> określa metodę <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> zadanie czeka, <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegata, który reprezentuje <ph id="ph5">`WaitProc`</ph> metody wywołania zwrotnego co drugi interwał limitu czasu i wielu wywołań zwrotnych.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">Jeśli sygnały wątku głównego <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> przez wywołanie jego <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> metody <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> jest wywoływany delegat.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a time-out occurred.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> Testy metody <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> ustalenie, czy upłynął limit czasu.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping additional callbacks.</source>
          <target state="translated">Jeśli wywołania zwrotnego został wywołany, ponieważ został sygnalizowane dojście oczekiwania, <ph id="ph1">`WaitProc`</ph> wyrejestrowuje metody <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, zatrzymywanie dodatkowe wywołań zwrotnych.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>In the case of a time-out, the task continues to wait.</source>
          <target state="translated">W przypadku przekroczenia limitu czasu zadanie nadal oczekuje.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> Metoda kończy się wydrukowanie komunikat do konsoli.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.RegisteredWaitHandle">
          <source>This type is thread safe.</source>
          <target state="translated">Ten typ jest bezpieczny wątkowo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to be signaled.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> Można zasygnalizować.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>Cancels a registered wait operation issued by the <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Anuluje operację zarejestrowanych oczekiwania, wystawiony przez <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the function succeeds; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli funkcja zakończy się pomyślnie; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>If <ph id="ph1">`waitObject`</ph> is specified, it is signaled only if the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> is successfully unregistered.</source>
          <target state="translated">Jeśli <ph id="ph1">`waitObject`</ph> jest określona, zostanie zasygnalizowane tylko wtedy, gdy <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> jest pomyślnie wyrejestrowany.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>If a callback method is in progress when <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph> executes, <ph id="ph2">`waitObject`</ph> is not signaled until the callback method completes.</source>
          <target state="translated">Jeśli metoda wywołania zwrotnego jest w toku po <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph> wykonuje, <ph id="ph2">`waitObject`</ph> nie zostanie zasygnalizowane dopiero po zakończeniu metody wywołania zwrotnego.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>In particular, if a callback method executes <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph>, <ph id="ph2">`waitObject`</ph> is not signaled until that callback method completes.</source>
          <target state="translated">W szczególności, jeśli metoda wywołania zwrotnego <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph>, <ph id="ph2">`waitObject`</ph> nie zostanie zasygnalizowane aż do zakończenia tej metody wywołania zwrotnego.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph> method to unregister a task if a callback occurred because the wait handle was signaled.</source>
          <target state="translated">Poniższy przykład przedstawia użycie <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A&gt;</ph> metody wyrejestrować zadania, jeśli wywołanie zwrotne wystąpił, ponieważ został sygnalizowane dojście oczekiwania.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">W przykładzie przedstawiono również sposób użycia <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metody próbę wykonania metody wywołania zwrotnego określony podczas oczekiwania określonego dojścia jest sygnalizowane.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph>, and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">W tym przykładzie metoda wywołania zwrotnego jest <ph id="ph1">`WaitProc`</ph>, i jest dojście oczekiwania <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">W przykładzie zdefiniowano <ph id="ph1">`TaskInfo`</ph> klasy do przechowywania informacji, który jest przekazywany do wywołania zwrotnego, podczas wykonywania.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">W przykładzie jest tworzony <ph id="ph1">`TaskInfo`</ph> obiektów i przypisuje go niektórych danych ciągu.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> Zwróconego przez <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metody jest przypisany do <ph id="ph3">`Handle`</ph> pole <ph id="ph4">`TaskInfo`</ph> obiekt, tak aby metody wywołania zwrotnego ma dostęp do <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>In addition to specifying <ph id="ph1">`TaskInfo`</ph> as the object to pass to the callback method, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that the task will wait for, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one second time-out interval, and multiple callbacks.</source>
          <target state="translated">Oprócz określenia <ph id="ph1">`TaskInfo`</ph> jako obiekt, aby przekazać do metody wywołania zwrotnego, wywołanie <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> określa metodę <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> zadanie czeka, <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegata, który reprezentuje <ph id="ph5">`WaitProc`</ph> metody wywołania zwrotnego co drugi interwał limitu czasu i wielu wywołań zwrotnych.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">Jeśli sygnały wątku głównego <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> przez wywołanie jego <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> metody <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> jest wywoływany delegat.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a time-out occurred.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> Testy metody <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> ustalenie, czy upłynął limit czasu.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping additional callbacks.</source>
          <target state="translated">Jeśli wywołania zwrotnego został wywołany, ponieważ został sygnalizowane dojście oczekiwania, <ph id="ph1">`WaitProc`</ph> wyrejestrowuje metody <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, zatrzymywanie dodatkowe wywołań zwrotnych.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>In the case of a time-out, the task continues to wait.</source>
          <target state="translated">W przypadku przekroczenia limitu czasu zadanie nadal oczekuje.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated"><ph id="ph1">`WaitProc`</ph> Metoda kończy się wydrukowanie komunikat do konsoli.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>