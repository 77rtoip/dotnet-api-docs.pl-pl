<Type Name="Volatile" FullName="System.Threading.Volatile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e015169fdea0b177ae9dfa539d0e1c3aed9e0c48" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579715" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Volatile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Volatile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Volatile" />
  <TypeSignature Language="VB.NET" Value="Public Class Volatile" />
  <TypeSignature Language="C++ CLI" Value="public ref class Volatile abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="92561-101">Zawiera metody do wykonywania operacji volatile pamięci.</span>
      <span class="sxs-lookup">
        <span data-stu-id="92561-101">Contains methods for performing volatile memory operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-102">W systemie wieloprocesorowym operacji zapisu volatile zapewnia, że wartość zapisany w lokalizacji pamięci jest natychmiast widoczne dla wszystkich procesorów.</span><span class="sxs-lookup"><span data-stu-id="92561-102">On a multiprocessor system, a volatile write operation ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="92561-103">Volatile operacja odczytu uzyskuje wartość najnowszych zapisany w lokalizacji pamięci przez dowolnego procesora.</span><span class="sxs-lookup"><span data-stu-id="92561-103">A volatile read operation obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="92561-104">Te operacje mogą wymagać opróżniania pamięci podręcznej procesora, co może wpłynąć na wydajność.</span><span class="sxs-lookup"><span data-stu-id="92561-104">These operations might require flushing processor caches, which can affect performance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92561-105">W systemie jednoprocesorowy volatile odczyty i zapisy upewnij się, że wartość jest do odczytu lub zapisywane w pamięci i nie w pamięci podręcznej (na przykład w rejestrze procesora).</span><span class="sxs-lookup"><span data-stu-id="92561-105">On a uniprocessor system, volatile reads and writes ensure that a value is read or written to memory and not cached (for example, in a processor register).</span></span> <span data-ttu-id="92561-106">W związku z tym można użyć tych operacji synchronizujący dostęp do pola, które mogą być aktualizowane przez inny wątek lub sprzętu.</span><span class="sxs-lookup"><span data-stu-id="92561-106">Thus, you can use these operations to synchronize access to a field that can be updated by another thread or by hardware.</span></span>  
  
 <span data-ttu-id="92561-107">Operacje volatile pamięci są dla przypadków specjalnych synchronizacji, gdy blokowania normalnego nie jest dopuszczalne zamiast.</span><span class="sxs-lookup"><span data-stu-id="92561-107">Volatile memory operations are for special cases of synchronization, where normal locking is not an acceptable alternative.</span></span> <span data-ttu-id="92561-108">W normalnych okolicznościach, C# `lock` instrukcji, Visual Basic `SyncLock` instrukcji i <xref:System.Threading.Monitor> klasy Podaj najprostszym najmniej błędów oraz sposób synchronizowania dostępu do danych i <xref:System.Lazy%601> klasa udostępnia prosty sposób bez użycia bezpośrednio w kodzie inicjowania z opóźnieniem dokładnie sprawdzone blokowania.</span><span class="sxs-lookup"><span data-stu-id="92561-108">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide the easiest and least error-prone way of synchronizing access to data, and the <xref:System.Lazy%601> class provides a simple way to write lazy initialization code without directly using double-checked locking.</span></span>  
  
 <span data-ttu-id="92561-109"><xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> i <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> metody włączyć funkcję, która nie jest obsługiwana w językach.</span><span class="sxs-lookup"><span data-stu-id="92561-109">The <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods enable functionality that is not supported in languages.</span></span> <span data-ttu-id="92561-110">Na przykład:</span><span class="sxs-lookup"><span data-stu-id="92561-110">For example:</span></span>  
  
-   <span data-ttu-id="92561-111">Niektóre języki, takie jak Visual Basic nie można rozpoznać koncepcja operacji volatile pamięci.</span><span class="sxs-lookup"><span data-stu-id="92561-111">Some languages, such as Visual Basic, do not recognize the concept of volatile memory operations.</span></span> <span data-ttu-id="92561-112"><xref:System.Threading.Volatile> Klasa udostępnia te funkcje w tych językach.</span><span class="sxs-lookup"><span data-stu-id="92561-112">The <xref:System.Threading.Volatile> class provides that functionality in such languages.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="92561-113">Wywoływanie jednej z tych metod dotyczy tylko dostęp do jednej pamięci.</span><span class="sxs-lookup"><span data-stu-id="92561-113">Calling one of these methods affects only a single memory access.</span></span> <span data-ttu-id="92561-114">Aby zapewnić skuteczne synchronizacji dla pola, dostęp do pola musi używać <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> i <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="92561-114">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="92561-115">W języku C# za pomocą `volatile` modyfikator pola gwarantuje, że używa co dostęp do tego pola <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> i <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> metody, ale `volatile` modyfikator nie można zastosować do elementów tablicy.</span><span class="sxs-lookup"><span data-stu-id="92561-115">In C#, using the `volatile` modifier on a field guarantees that every access to that field uses the <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods, but the `volatile` modifier cannot be applied to array elements.</span></span> <span data-ttu-id="92561-116"><xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> i <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> metody mogą być używane w przypadku elementów tablicy.</span><span class="sxs-lookup"><span data-stu-id="92561-116">The <xref:System.Threading.Volatile.Read%2A?displayProperty=nameWithType> and <xref:System.Threading.Volatile.Write%2A?displayProperty=nameWithType> methods can be used on array elements.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="92561-117">Odczytuje wartość pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-117">Reads the value of a field.</span>
          </span>
          <span data-ttu-id="92561-118">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-118">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static bool Read (ref bool location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Read(bool&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Read(bool % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-119">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-119">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-120">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-120">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-121">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-121">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-122">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-122">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-123">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-123">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-124">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-124">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static byte Read (ref byte location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Read(unsigned int8&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Read(System::Byte % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-125">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-125">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-126">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-126">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-127">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-127">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-128">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-128">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-129">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-129">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-130">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-130">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static double Read (ref double location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Read(float64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Read(double % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-131">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-131">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-132">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-132">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-133">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-133">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-134">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-134">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-135">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-135">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-136">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-136">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static short Read (ref short location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Read(int16&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Read(short % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-137">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-137">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-138">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-138">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-139">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-139">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-140">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-140">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-141">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-141">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-142">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-142">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read (ref int location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read(int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read(int % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-143">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-143">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-144">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-144">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-145">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-145">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-146">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-146">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-147">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-147">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-148">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-148">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static long Read (ref long location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Read(int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Read(long % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-149">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-149">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-150">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-150">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-151">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-151">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-152">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-152">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-153">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-153">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-154">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-154">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static IntPtr Read (ref IntPtr location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Read(native int&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Read(IntPtr % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.IntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-155">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-155">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-156">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-156">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-157">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-157">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-158">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-158">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-159">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-159">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-160">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-160">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static sbyte Read (ref sbyte location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Read(int8&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Read(System::SByte % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.SByte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-161">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-161">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-162">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-162">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-163">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-163">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-164">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-164">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-165">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-165">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-166">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-166">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static float Read (ref float location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Read(float32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Read(float % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-167">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-167">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-168">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-168">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-169">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-169">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-170">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-170">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-171">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-171">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-172">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-172">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static ushort Read (ref ushort location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Read(unsigned int16&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Read(System::UInt16 % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-173">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-173">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-174">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-174">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-175">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-175">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-176">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-176">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-177">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-177">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-178">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-178">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int16@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static uint Read (ref uint location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Read(unsigned int32&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Read(System::UInt32 % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-179">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-179">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-180">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-180">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-181">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-181">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-182">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-182">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-183">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-183">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-184">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-184">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static ulong Read (ref ulong location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Read(unsigned int64&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Read(System::UInt64 % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-185">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-185">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-186">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-186">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-187">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-187">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-188">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-188">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-189">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-189">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-190">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-190">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.Int64@)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static UIntPtr Read (ref UIntPtr location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int Read(native unsigned int&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read (ByRef location As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr Read(UIntPtr % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UIntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-191">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-191">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-192">Odczytuje wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-192">Reads the value of the specified field.</span>
          </span>
          <span data-ttu-id="92561-193">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-193">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-194">Wartość, która została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-194">The value that was read.</span>
          </span>
          <span data-ttu-id="92561-195">Ta wartość jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-195">This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-196">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-196">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Read(System.IntPtr@)" />
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ref T location) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;class T&gt;(!!T&amp; location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Read``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Class) (ByRef location As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T Read(T % location);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="92561-197">Typ pola do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-197">The type of field to read.</span>
          </span>
          <span data-ttu-id="92561-198">Musi to być typem referencyjnym, nie jest typem wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-198">This must be a reference type, not a value type.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="92561-199">Pole do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-199">The field to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-200">Odczytuje odwołanie do obiektu z określonym polem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-200">Reads the object reference from the specified field.</span>
          </span>
          <span data-ttu-id="92561-201">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu pojawia się po tej metody w kodzie, procesor nie można jej przenieść przed tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-201">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="92561-202">Odwołanie do <paramref name="T" /> który została odczytana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-202">The reference to <paramref name="T" /> that was read.</span>
          </span>
          <span data-ttu-id="92561-203">To odwołanie jest najnowsza wersja napisane przez dowolnego procesora na komputerze, niezależnie od tego, czy liczba procesorów lub stan płyty pamięci podręcznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-203">This reference is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-204">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-204">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="92561-205">Zapisuje wartość do pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-205">Writes a value to a field.</span>
          </span>
          <span data-ttu-id="92561-206">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-206">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref bool location, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool&amp; location, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Boolean, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool % location, bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-207">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-207">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-208">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-208">The value to write.</span>
          </span>
          <span data-ttu-id="92561-209">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-209">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-210">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-210">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-211">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-211">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-212">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-212">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref byte location, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int8&amp; location, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Byte % location, System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-213">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-213">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-214">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-214">The value to write.</span>
          </span>
          <span data-ttu-id="92561-215">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-215">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-216">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-216">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-217">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-217">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-218">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-218">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref double location, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64&amp; location, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double % location, double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-219">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-219">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-220">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-220">The value to write.</span>
          </span>
          <span data-ttu-id="92561-221">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-221">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-222">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-222">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-223">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-223">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-224">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-224">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref short location, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int16&amp; location, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(short % location, short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-225">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-225">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-226">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-226">The value to write.</span>
          </span>
          <span data-ttu-id="92561-227">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-227">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-228">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-228">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-229">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-229">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-230">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-230">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref int location, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32&amp; location, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int % location, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-231">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-231">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-232">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-232">The value to write.</span>
          </span>
          <span data-ttu-id="92561-233">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-233">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-234">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-234">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-235">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-235">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-236">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-236">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref long location, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64&amp; location, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long % location, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-237">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-237">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-238">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-238">The value to write.</span>
          </span>
          <span data-ttu-id="92561-239">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-239">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-240">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-240">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-241">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli operacja pamięci występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-241">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a memory operation appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-242">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-242">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref IntPtr location, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(native int&amp; location, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(IntPtr % location, IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-243">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-243">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-244">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-244">The value to write.</span>
          </span>
          <span data-ttu-id="92561-245">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-245">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-246">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-246">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-247">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-247">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-248">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-248">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref sbyte location, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int8&amp; location, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::SByte % location, System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.SByte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-249">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-249">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-250">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-250">The value to write.</span>
          </span>
          <span data-ttu-id="92561-251">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-251">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-252">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-252">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-253">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-253">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-254">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-254">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref float location, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32&amp; location, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float % location, float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-255">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-255">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-256">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-256">The value to write.</span>
          </span>
          <span data-ttu-id="92561-257">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-257">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-258">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-258">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-259">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-259">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-260">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-260">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref ushort location, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int16&amp; location, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt16 % location, System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-261">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-261">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-262">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-262">The value to write.</span>
          </span>
          <span data-ttu-id="92561-263">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-263">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-264">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-264">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-265">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-265">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-266">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-266">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref uint location, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32&amp; location, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 % location, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-267">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-267">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-268">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-268">The value to write.</span>
          </span>
          <span data-ttu-id="92561-269">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-269">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-270">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-270">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-271">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-271">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-272">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-272">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref ulong location, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64&amp; location, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 % location, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UInt64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-273">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-273">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-274">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-274">The value to write.</span>
          </span>
          <span data-ttu-id="92561-275">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-275">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-276">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-276">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-277">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-277">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-278">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-278">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ref UIntPtr location, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(native unsigned int&amp; location, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (ByRef location As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(UIntPtr % location, UIntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.UIntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="location">
          <span data-ttu-id="92561-279">Pola, w którym zapisywana jest wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-279">The field where the value is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-280">Wartość do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-280">The value to write.</span>
          </span>
          <span data-ttu-id="92561-281">Wartość jest zapisywany bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-281">The value is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-282">Zapisuje określoną wartość określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-282">Writes the specified value to the specified field.</span>
          </span>
          <span data-ttu-id="92561-283">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-283">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-284">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-284">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (ref T location, T value) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;class T&gt;(!!T&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Volatile.Write``1(``0@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Class) (ByRef location As T, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static void Write(T % location, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="92561-285">Typ pola do zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-285">The type of field to write.</span>
          </span>
          <span data-ttu-id="92561-286">Musi to być typem referencyjnym, nie jest typem wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-286">This must be a reference type, not a value type.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="92561-287">Pola, w którym zapisywana jest odwołanie do obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-287">The field where the object reference is written.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="92561-288">Odwołanie obiektu do zapisania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-288">The object reference to write.</span>
          </span>
          <span data-ttu-id="92561-289">Odwołania są zapisywane bezpośrednio, aby była widoczna dla wszystkich procesorów w komputerze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-289">The reference is written immediately so that it is visible to all processors in the computer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="92561-290">Zapisuje określony obiekt odwołanie do określonego pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-290">Writes the specified object reference to the specified field.</span>
          </span>
          <span data-ttu-id="92561-291">W systemach, w których jest to wymagane, wstawia bariery pamięci procesora uniemożliwia zmianę kolejności operacje pamięci w następujący sposób: Jeśli do odczytu lub zapisu występuje przed tej metody w kodzie, procesor nie można jej przenieść po tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="92561-291">On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92561-292">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Volatile> klasy.</span><span class="sxs-lookup"><span data-stu-id="92561-292">For more information, see the <xref:System.Threading.Volatile> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>