<Type Name="ReaderWriterLock" FullName="System.Threading.ReaderWriterLock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="edfc6eed7e390687d9d58a733bb641ebef3b9d37" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69143955" /></Metadata><TypeSignature Language="C#" Value="public sealed class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReaderWriterLock extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLock" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReaderWriterLock&#xA;Inherits CriticalFinalizerObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLock sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject" />
  <TypeSignature Language="F#" Value="type ReaderWriterLock = class&#xA;    inherit CriticalFinalizerObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="20e5d-101">Definiuje blokadę obsługującą pojedynczych autorów i wielu czytników.</span><span class="sxs-lookup"><span data-stu-id="20e5d-101">Defines a lock that supports single writers and multiple readers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="20e5d-102"><xref:System.Threading.ReaderWriterLock>Program [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] madwa<xref:System.Threading.ReaderWriterLockSlim> blokady czytnika i.</span><span class="sxs-lookup"><span data-stu-id="20e5d-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] has two reader-writer locks, <xref:System.Threading.ReaderWriterLockSlim> and <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="20e5d-103"><xref:System.Threading.ReaderWriterLockSlim>jest zalecany w przypadku wszystkich nowych rozwiązań programistycznych.</span><span class="sxs-lookup"><span data-stu-id="20e5d-103"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span> <span data-ttu-id="20e5d-104"><xref:System.Threading.ReaderWriterLockSlim>jest podobny do <xref:System.Threading.ReaderWriterLock>, ale ma uproszczone reguły dla rekursji i uaktualniania i obniżania stanu blokady.</span><span class="sxs-lookup"><span data-stu-id="20e5d-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="20e5d-105"><xref:System.Threading.ReaderWriterLockSlim>unika wielu przypadków potencjalnego zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="20e5d-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="20e5d-106">Ponadto wydajność <xref:System.Threading.ReaderWriterLockSlim> jest znacznie lepsza niż <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 <span data-ttu-id="20e5d-107"><xref:System.Threading.ReaderWriterLock>służy do synchronizowania dostępu do zasobu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-107"><xref:System.Threading.ReaderWriterLock> is used to synchronize access to a resource.</span></span> <span data-ttu-id="20e5d-108">W danym momencie umożliwia współbieżny dostęp do odczytu dla wielu wątków lub dostęp do zapisu dla jednego wątku.</span><span class="sxs-lookup"><span data-stu-id="20e5d-108">At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</span></span> <span data-ttu-id="20e5d-109">W sytuacji, gdy zasób jest rzadko zmieniany, `ReaderWriterLock` zapewnia lepszą przepływność niż prosta blokada jednokrotna, <xref:System.Threading.Monitor>na przykład.</span><span class="sxs-lookup"><span data-stu-id="20e5d-109">In a situation where a resource is changed infrequently, a `ReaderWriterLock` provides better throughput than a simple one-at-a-time lock, such as <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="20e5d-110">`ReaderWriterLock`działa najlepiej, gdy większość dostępu jest odczytywana, podczas gdy zapisy są rzadko i mają krótki czas trwania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-110">`ReaderWriterLock` works best where most accesses are reads, while writes are infrequent and of short duration.</span></span> <span data-ttu-id="20e5d-111">Wielu czytników jest alternatywą dla pojedynczych autorów, dzięki czemu nie są blokowane żadne czytelnicy ani autorzy przez długie okresy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-111">Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20e5d-112">Blokada czytnika lub blokady składnika zapisywania dla długich okresów będą zablokować dostęp inne wątki.</span><span class="sxs-lookup"><span data-stu-id="20e5d-112">Holding reader locks or writer locks for long periods will starve other threads.</span></span> <span data-ttu-id="20e5d-113">Aby uzyskać najlepszą wydajność, należy rozważyć restrukturyzację aplikacji w celu zminimalizowania czasu trwania operacji zapisu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-113">For best performance, consider restructuring your application to minimize the duration of writes.</span></span>  
  
 <span data-ttu-id="20e5d-114">Wątek może utrzymywać blokadę czytnika lub blokadę składnika zapisywania, ale nie oba jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="20e5d-114">A thread can hold a reader lock or a writer lock, but not both at the same time.</span></span> <span data-ttu-id="20e5d-115">Zamiast zwalniać blokadę czytnika w celu uzyskania blokady składnika zapisywania, można użyć <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> i. <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A></span><span class="sxs-lookup"><span data-stu-id="20e5d-115">Instead of releasing a reader lock in order to acquire the writer lock, you can use <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> and <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span></span>  
  
 <span data-ttu-id="20e5d-116">Cykliczne żądania blokowania zwiększają liczbę blokad w blokadzie.</span><span class="sxs-lookup"><span data-stu-id="20e5d-116">Recursive lock requests increase the lock count on a lock.</span></span>  
  
 <span data-ttu-id="20e5d-117">Czytelnicy i moduły zapisujące są umieszczane w kolejce osobno.</span><span class="sxs-lookup"><span data-stu-id="20e5d-117">Readers and writers are queued separately.</span></span> <span data-ttu-id="20e5d-118">Gdy wątek zwalnia blokadę składnika zapisywania, wszystkie wątki oczekujące w kolejce czytnika w tym momencie otrzymują blokadę czytnika; gdy wszystkie te blokady czytnika zostały zwolnione, następnym wątkiem oczekującym w kolejce składnika zapisywania (jeśli istnieje) jest przyznany blok zapisywania i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="20e5d-118">When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</span></span> <span data-ttu-id="20e5d-119">Innymi słowy, `ReaderWriterLock` alternatywy między kolekcją czytelników i jednym składnikiem zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-119">In other words, `ReaderWriterLock` alternates between a collection of readers, and one writer.</span></span>  
  
 <span data-ttu-id="20e5d-120">Gdy wątek w kolejce składnika zapisywania oczekuje na zwolnienie aktywnych blokad czytnika, wątki żądające nowych blokad czytnika są gromadzone w kolejce czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-120">While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</span></span> <span data-ttu-id="20e5d-121">Ich żądania nie są udzielane, nawet jeśli mogą współdzielić dostęp współbieżny do istniejących posiadaczy blokady czytnika; pomaga to w ochronie autorów przed nieograniczone zatorem przez czytelników.</span><span class="sxs-lookup"><span data-stu-id="20e5d-121">Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</span></span>  
  
 <span data-ttu-id="20e5d-122">Większość metod uzyskiwania blokad przy `ReaderWriterLock` wartościach limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-122">Most methods for acquiring locks on a `ReaderWriterLock` accept time-out values.</span></span> <span data-ttu-id="20e5d-123">Używaj limitów czasu, aby uniknąć zakleszczenia w aplikacji.</span><span class="sxs-lookup"><span data-stu-id="20e5d-123">Use time-outs to avoid deadlocks in your application.</span></span> <span data-ttu-id="20e5d-124">Na przykład wątek może uzyskać blokadę modułu zapisywania dla jednego zasobu, a następnie zażądać blokady czytnika na drugim zasobie; w międzyczasie inny wątek może uzyskać blokadę modułu zapisywania dla drugiego zasobu i zażądać pierwszej blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-124">For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</span></span> <span data-ttu-id="20e5d-125">O ile nie są używane limity czasu, zakleszczenia wątków.</span><span class="sxs-lookup"><span data-stu-id="20e5d-125">Unless time-outs are used, the threads deadlock.</span></span>  
  
 <span data-ttu-id="20e5d-126">Jeśli limit czasu wygaśnie i żądanie blokady nie zostało przyznane, metoda zwraca sterowanie do wątku wywołującego przez wyrzucanie <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-126">If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <xref:System.ApplicationException>.</span></span> <span data-ttu-id="20e5d-127">Wątek może przechwytywać ten wyjątek i określać, jakie działania należy podjąć dalej.</span><span class="sxs-lookup"><span data-stu-id="20e5d-127">A thread can catch this exception and determine what action to take next.</span></span>  
  
 <span data-ttu-id="20e5d-128">Limity czasu są wyrażone w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="20e5d-128">Time-outs are expressed in milliseconds.</span></span> <span data-ttu-id="20e5d-129">Jeśli użyjesz <xref:System.TimeSpan?displayProperty=nameWithType> do określenia limitu czasu, używana wartość jest całkowitą liczbą całych milisekund reprezentowane <xref:System.TimeSpan>przez.</span><span class="sxs-lookup"><span data-stu-id="20e5d-129">If you use a <xref:System.TimeSpan?displayProperty=nameWithType> to specify the time-out, the value used is the total number of whole milliseconds represented by the <xref:System.TimeSpan>.</span></span> <span data-ttu-id="20e5d-130">W poniższej tabeli przedstawiono prawidłowe wartości limitu czasu (w milisekundach).</span><span class="sxs-lookup"><span data-stu-id="20e5d-130">The following table shows the valid time-out values in milliseconds.</span></span>  
  
|<span data-ttu-id="20e5d-131">Wartość</span><span class="sxs-lookup"><span data-stu-id="20e5d-131">Value</span></span>|<span data-ttu-id="20e5d-132">Opis</span><span class="sxs-lookup"><span data-stu-id="20e5d-132">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="20e5d-133">-1</span><span class="sxs-lookup"><span data-stu-id="20e5d-133">-1</span></span>|<span data-ttu-id="20e5d-134">Wątek czeka na odzyskanie blokady, niezależnie od tego, jak długo trwa.</span><span class="sxs-lookup"><span data-stu-id="20e5d-134">The thread waits until the lock is acquired, regardless of how long it takes.</span></span> <span data-ttu-id="20e5d-135">Dla metod, które określają liczby całkowite limitów czasu, <xref:System.Threading.Timeout.Infinite> można użyć stałej.</span><span class="sxs-lookup"><span data-stu-id="20e5d-135">For methods that specify integer time-outs, the constant <xref:System.Threading.Timeout.Infinite> can be used.</span></span>|  
|<span data-ttu-id="20e5d-136">0</span><span class="sxs-lookup"><span data-stu-id="20e5d-136">0</span></span>|<span data-ttu-id="20e5d-137">Wątek nie czeka na uzyskanie blokady.</span><span class="sxs-lookup"><span data-stu-id="20e5d-137">The thread does not wait to acquire the lock.</span></span> <span data-ttu-id="20e5d-138">Jeśli blokada nie może zostać pobrana natychmiast, metoda zwraca.</span><span class="sxs-lookup"><span data-stu-id="20e5d-138">If the lock cannot be acquired immediately, the method returns.</span></span>|  
|<span data-ttu-id="20e5d-139">>0</span><span class="sxs-lookup"><span data-stu-id="20e5d-139">>0</span></span>|<span data-ttu-id="20e5d-140">Liczba milisekund oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-140">The number of milliseconds to wait.</span></span>|  
  
 <span data-ttu-id="20e5d-141">Z wyjątkiem-1, ujemne wartości limitu czasu są niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="20e5d-141">With the exception of -1, negative time-out values are not allowed.</span></span> <span data-ttu-id="20e5d-142">Jeśli określisz ujemną liczbę całkowitą inną niż-1, zamiast tego zostanie użyta wartość limitu czasu równa zero.</span><span class="sxs-lookup"><span data-stu-id="20e5d-142">If you specify a negative integer other than -1, a time-out value of zero is used instead.</span></span> <span data-ttu-id="20e5d-143">(Oznacza to, że metoda zwraca bez oczekiwania, jeśli nie można natychmiast uzyskać blokady). Jeśli zostanie określona wartość <xref:System.TimeSpan> reprezentująca ujemną liczbę milisekund inną niż-1, <xref:System.ArgumentOutOfRangeException> zostanie zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="20e5d-143">(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <xref:System.TimeSpan> that represents a negative number of milliseconds other than -1, <xref:System.ArgumentOutOfRangeException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-144">Poniższy przykład ilustruje sposób użycia programu <xref:System.Threading.ReaderWriterLock> w celu ochrony zasobu udostępnionego, wartości całkowitej o nazwie `resource`, która jest odczytywana współbieżnie i zapisywana wyłącznie przez wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="20e5d-144">The following example demonstrates how to use a <xref:System.Threading.ReaderWriterLock> to protect a shared resource, an integer value named `resource`, that is read concurrently and written exclusively by multiple threads.</span></span> <span data-ttu-id="20e5d-145">Należy zauważyć, <xref:System.Threading.ReaderWriterLock> że jest zadeklarowany na poziomie klasy, aby był widoczny dla wszystkich wątków.</span><span class="sxs-lookup"><span data-stu-id="20e5d-145">Note that the <xref:System.Threading.ReaderWriterLock> is declared at the class level so that it is visible to all threads.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="20e5d-146">Ten typ jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="20e5d-146">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-147">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-147">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-148">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-148">ReaderWriterLock</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLock();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20e5d-149">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ReaderWriterLock" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-149">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="20e5d-150">Poniższy przykład kodu pokazuje, jak utworzyć nowe wystąpienie <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-150">The following code example demonstrates how to create a new instance of the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="20e5d-151">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-151">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-152">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-152">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-153">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-153">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireReaderLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="20e5d-154">Uzyskuje blokadę czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-154">Acquires a reader lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : int -&gt; unit" Usage="readerWriterLock.AcquireReaderLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="20e5d-155">Limit czasu w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="20e5d-155">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="20e5d-156">Uzyskuje blokadę czytnika przy użyciu <see cref="T:System.Int32" /> wartości limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-156">Acquires a reader lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-157"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A>bloki, jeśli inny wątek ma blokadę modułu zapisywania lub jeśli co najmniej jeden wątek oczekuje na blokadę modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-157"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20e5d-158">Jeśli bieżący wątek ma już blokadę modułu zapisywania, nie zostanie uzyskana blokada czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-158">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="20e5d-159">Zamiast tego liczba blokad dla blokady modułu zapisywania jest zwiększana.</span><span class="sxs-lookup"><span data-stu-id="20e5d-159">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="20e5d-160">Zapobiega to zablokowaniu wątku na podstawie jego własnej blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-160">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="20e5d-161">Wynik jest dokładnie taki sam jak wywoływany <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, a dodatkowe <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> wywołanie jest wymagane podczas zwalniania blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-161">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="20e5d-162">`AcquireReaderLock`obsługuje cykliczne żądania odblokowania czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-162">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="20e5d-163">Oznacza to, że wątek może wywoływać AcquireReaderLock wiele razy, co zwiększa liczbę blokad za każdym razem.</span><span class="sxs-lookup"><span data-stu-id="20e5d-163">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="20e5d-164">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> raz dla każdego wywołania `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="20e5d-164">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="20e5d-165">Alternatywnie można wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> , aby zmniejszyć liczbę blokad od razu do zera.</span><span class="sxs-lookup"><span data-stu-id="20e5d-165">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="20e5d-166">Cykliczne żądania blokad są zawsze przyznawane natychmiast, bez umieszczania wątku żądającego w kolejce czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-166">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="20e5d-167">Używaj cyklicznych blokad z zachowaniem ostrożności, aby uniknąć blokowania żądań zablokowania zapisywania przez długi okres.</span><span class="sxs-lookup"><span data-stu-id="20e5d-167">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="20e5d-168">Aby uzyskać prawidłowe wartości limitu czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-168">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-169">Poniższy przykład kodu pokazuje, jak uzyskać i zwolnić blokadę czytnika oraz jak obsłużyć wyjątek zgłoszony, gdy żądanie przetrwa limit czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-169">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="20e5d-170">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-170">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="20e5d-171"><paramref name="millisecondsTimeout" />wygasa przed udzieleniem żądania blokady.</span><span class="sxs-lookup"><span data-stu-id="20e5d-171"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-172">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-172">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-173">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-173">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireReaderLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="20e5d-174"><see langword="TimeSpan" /> Określanie limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-174">A <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="20e5d-175">Uzyskuje blokadę czytnika przy użyciu <see cref="T:System.TimeSpan" /> wartości limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-175">Acquires a reader lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-176"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A>bloki, jeśli inny wątek ma blokadę modułu zapisywania lub jeśli co najmniej jeden wątek oczekuje na blokadę modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-176"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20e5d-177">Jeśli bieżący wątek ma już blokadę modułu zapisywania, nie zostanie uzyskana blokada czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-177">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="20e5d-178">Zamiast tego liczba blokad dla blokady modułu zapisywania jest zwiększana.</span><span class="sxs-lookup"><span data-stu-id="20e5d-178">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="20e5d-179">Zapobiega to zablokowaniu wątku na podstawie jego własnej blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-179">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="20e5d-180">Wynik jest dokładnie taki sam jak wywoływany <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, a dodatkowe <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> wywołanie jest wymagane podczas zwalniania blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-180">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="20e5d-181">`AcquireReaderLock`obsługuje cykliczne żądania odblokowania czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-181">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="20e5d-182">Oznacza to, że wątek może wywoływać AcquireReaderLock wiele razy, co zwiększa liczbę blokad za każdym razem.</span><span class="sxs-lookup"><span data-stu-id="20e5d-182">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="20e5d-183">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> raz dla każdego wywołania `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="20e5d-183">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="20e5d-184">Alternatywnie można wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> , aby zmniejszyć liczbę blokad od razu do zera.</span><span class="sxs-lookup"><span data-stu-id="20e5d-184">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="20e5d-185">Cykliczne żądania blokad są zawsze przyznawane natychmiast, bez umieszczania wątku żądającego w kolejce czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-185">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="20e5d-186">Używaj cyklicznych blokad z zachowaniem ostrożności, aby uniknąć blokowania żądań zablokowania zapisywania przez długi okres.</span><span class="sxs-lookup"><span data-stu-id="20e5d-186">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="20e5d-187">Aby uzyskać prawidłowe wartości limitu czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-187">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="20e5d-188"><paramref name="timeout" />wygasa przed udzieleniem żądania blokady.</span><span class="sxs-lookup"><span data-stu-id="20e5d-188"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="20e5d-189"><paramref name="timeout" />Określa wartość ujemną inną niż-1 milisekund.</span><span class="sxs-lookup"><span data-stu-id="20e5d-189"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-190">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-190">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-191">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-191">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="20e5d-192">Uzyskuje blokadę modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-192">Acquires the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : int -&gt; unit" Usage="readerWriterLock.AcquireWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="20e5d-193">Limit czasu w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="20e5d-193">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="20e5d-194">Uzyskuje blokadę składnika zapisywania przy użyciu <see cref="T:System.Int32" /> wartości limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-194">Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-195">Ta metoda blokuje, czy inny wątek ma blokadę lub blokadę czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-195">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="20e5d-196">Aby uzyskać opis sposobu, w jaki moduł zapisujący blokuje alternatywę dla wielu współbieżnych blokad czytnika <xref:System.Threading.ReaderWriterLock> , zobacz Klasa.</span><span class="sxs-lookup"><span data-stu-id="20e5d-196">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="20e5d-197">Wątek, który ma już blokadę czytnika, może uzyskać blokadę składnika zapisywania na jeden z dwóch sposobów: przez zwolnienie blokady czytnika przed <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>wywołaniem lub przez <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="20e5d-197">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="20e5d-198">Jeśli wątek jest wywoływany `AcquireWriterLock` , gdy nadal ma blokadę czytnika, zablokuje on własną blokadę czytnika; Jeśli określony zostanie nieskończony limit czasu, wątek zostanie zakleszczony.</span><span class="sxs-lookup"><span data-stu-id="20e5d-198">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="20e5d-199">Aby uniknąć takich zakleszczeń, <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> Użyj, aby określić, czy bieżący wątek ma już blokadę czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-199">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="20e5d-200">`AcquireWriterLock`obsługuje cykliczne żądania składnika zapisywania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="20e5d-200">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="20e5d-201">Oznacza to, że wątek może wywoływać `AcquireWriterLock` wiele razy, co zwiększa liczbę blokad za każdym razem.</span><span class="sxs-lookup"><span data-stu-id="20e5d-201">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="20e5d-202">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> raz dla każdego wywołania `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="20e5d-202">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="20e5d-203">Alternatywnie można wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> , aby zmniejszyć liczbę blokad od razu do zera.</span><span class="sxs-lookup"><span data-stu-id="20e5d-203">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="20e5d-204">Cykliczne żądania blokad są zawsze przyznawane natychmiast, bez umieszczania wątku żądającego w kolejce składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-204">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="20e5d-205">Aby uzyskać prawidłowe wartości limitu czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-205">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-206">Poniższy przykład kodu pokazuje, jak uzyskać i zwolnić blokadę modułu zapisywania oraz jak obsłużyć wyjątek zgłoszony, gdy żądanie przetrwa limit czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-206">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="20e5d-207">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-207">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="20e5d-208"><paramref name="timeout" />wygasa przed udzieleniem żądania blokady.</span><span class="sxs-lookup"><span data-stu-id="20e5d-208"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-209">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-209">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-210">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-210">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="20e5d-211"><see langword="TimeSpan" /> Określanie limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-211">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="20e5d-212">Uzyskuje blokadę składnika zapisywania przy użyciu <see cref="T:System.TimeSpan" /> wartości limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-212">Acquires the writer lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-213">Ta metoda blokuje, czy inny wątek ma blokadę lub blokadę czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-213">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="20e5d-214">Aby uzyskać opis sposobu, w jaki moduł zapisujący blokuje alternatywę dla wielu współbieżnych blokad czytnika <xref:System.Threading.ReaderWriterLock> , zobacz Klasa.</span><span class="sxs-lookup"><span data-stu-id="20e5d-214">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="20e5d-215">Wątek, który ma już blokadę czytnika, może uzyskać blokadę składnika zapisywania na jeden z dwóch sposobów: przez zwolnienie blokady czytnika przed <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>wywołaniem lub przez <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="20e5d-215">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="20e5d-216">Jeśli wątek jest wywoływany `AcquireWriterLock` , gdy nadal ma blokadę czytnika, zablokuje on własną blokadę czytnika; Jeśli określony zostanie nieskończony limit czasu, wątek zostanie zakleszczony.</span><span class="sxs-lookup"><span data-stu-id="20e5d-216">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="20e5d-217">Aby uniknąć takich zakleszczeń, <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> Użyj, aby określić, czy bieżący wątek ma już blokadę czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-217">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="20e5d-218">`AcquireWriterLock`obsługuje cykliczne żądania składnika zapisywania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="20e5d-218">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="20e5d-219">Oznacza to, że wątek może wywoływać `AcquireWriterLock` wiele razy, co zwiększa liczbę blokad za każdym razem.</span><span class="sxs-lookup"><span data-stu-id="20e5d-219">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="20e5d-220">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> raz dla każdego wywołania `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="20e5d-220">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="20e5d-221">Alternatywnie można wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> , aby zmniejszyć liczbę blokad od razu do zera.</span><span class="sxs-lookup"><span data-stu-id="20e5d-221">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="20e5d-222">Cykliczne żądania blokad są zawsze przyznawane natychmiast, bez umieszczania wątku żądającego w kolejce składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-222">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="20e5d-223">Aby uzyskać prawidłowe wartości limitu czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-223">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="20e5d-224"><paramref name="timeout" />wygasa przed udzieleniem żądania blokady.</span><span class="sxs-lookup"><span data-stu-id="20e5d-224"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="20e5d-225"><paramref name="timeout" />Określa wartość ujemną inną niż-1 milisekund.</span><span class="sxs-lookup"><span data-stu-id="20e5d-225"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-226">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-226">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-227">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-227">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AnyWritersSince">
      <MemberSignature Language="C#" Value="public bool AnyWritersSince (int seqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AnyWritersSince(int32 seqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyWritersSince (seqNum As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AnyWritersSince(int seqNum);" />
      <MemberSignature Language="F#" Value="member this.AnyWritersSince : int -&gt; bool" Usage="readerWriterLock.AnyWritersSince seqNum" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seqNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seqNum"><span data-ttu-id="20e5d-228">Numer sekwencyjny.</span><span class="sxs-lookup"><span data-stu-id="20e5d-228">The sequence number.</span></span></param>
        <summary><span data-ttu-id="20e5d-229">Wskazuje, czy blokada składnika zapisywania została przyznana do dowolnego wątku od momentu uzyskania numeru sekwencji.</span><span class="sxs-lookup"><span data-stu-id="20e5d-229">Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</span></span></summary>
        <returns><span data-ttu-id="20e5d-230"><see langword="true" />Jeśli blokada modułu zapisującego została przyznana do dowolnego wątku od momentu uzyskania numeru sekwencyjnego; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="20e5d-230"><see langword="true" /> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-231">Możesz użyć <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> programu i `AnyWritersSince` , aby zwiększyć wydajność aplikacji.</span><span class="sxs-lookup"><span data-stu-id="20e5d-231">You can use <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> and `AnyWritersSince` to improve application performance.</span></span> <span data-ttu-id="20e5d-232">Na przykład wątek może buforować informacje uzyskiwane podczas utrzymywania blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-232">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="20e5d-233">Po zwolnieniu i późniejszym odbyciu blokady wątek może użyć `AnyWritersSince` , aby określić, czy inne wątki zostały zapisane w zasobie w tymczasowym; Jeśli nie, można użyć buforowanych informacji.</span><span class="sxs-lookup"><span data-stu-id="20e5d-233">After releasing and later reacquiring the lock, the thread can use `AnyWritersSince` to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</span></span> <span data-ttu-id="20e5d-234">Ta technika jest przydatna, gdy odczytywanie informacji chronionych przez blokadę jest kosztowne. na przykład uruchomienie zapytania do bazy danych.</span><span class="sxs-lookup"><span data-stu-id="20e5d-234">This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="20e5d-235">Obiekt wywołujący musi mieć blokadę czytnika lub blokadę modułu zapisywania, aby numer sekwencji był przydatny.</span><span class="sxs-lookup"><span data-stu-id="20e5d-235">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-236">Poniższy przykład kodu pokazuje, <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> jak używać metody <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> i właściwości, aby określić, czy inny wątek uzyskał blokadę zapisu dla zasobu chronionego, ponieważ bieżący wątek ostatnio zablokuje blokadę.</span><span class="sxs-lookup"><span data-stu-id="20e5d-236">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method and the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="20e5d-237">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-237">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-238">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-238">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-239">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-239">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DowngradeFromWriterLock">
      <MemberSignature Language="C#" Value="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DowngradeFromWriterLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DowngradeFromWriterLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.DowngradeFromWriterLock :  -&gt; unit" Usage="readerWriterLock.DowngradeFromWriterLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="20e5d-240"><see cref="T:System.Threading.LockCookie" /> Zwrócone przez<see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span><span class="sxs-lookup"><span data-stu-id="20e5d-240">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span></span></param>
        <summary><span data-ttu-id="20e5d-241">Przywraca stan blokady wątku do wcześniej <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> wywołanego elementu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-241">Restores the lock status of the thread to what it was before <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>zwalnia blokadę składnika zapisywania, niezależnie od liczby blokad cyklicznych, i przywraca blokadę czytnika, która była utrzymywana przez wątek przed uaktualnieniem do blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</span></span> <span data-ttu-id="20e5d-243">Liczba blokad w blokadzie czytnika jest przywracana.</span><span class="sxs-lookup"><span data-stu-id="20e5d-243">The lock count on the reader lock is restored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20e5d-244">`DowngradeFromWriterLock`akceptuje metodę <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>uzyskaną przez wywołanie metody. <xref:System.Threading.LockCookie></span><span class="sxs-lookup"><span data-stu-id="20e5d-244">`DowngradeFromWriterLock` accepts a <xref:System.Threading.LockCookie> obtained by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span> <span data-ttu-id="20e5d-245">Nie należy używać `LockCookie` zwracanych przez <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-245">Do not use a `LockCookie` returned by <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span>  
  
 <span data-ttu-id="20e5d-246">Wątek nie jest blokowany podczas obniżania poziomu blokady składnika zapisywania, nawet jeśli inne wątki oczekują na zablokowanie zapisu, ponieważ wszystkie żądania czytnik-Lock są udzielane po wydaniu blokady składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-246">A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-247">Poniższy przykład kodu pokazuje, jak zażądać blokady czytnika, uaktualnić blokadę czytnika do blokady modułu zapisywania i ponownie obniżyć poziom zmian do blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-247">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="20e5d-248">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-248">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="20e5d-249">Wątek nie ma blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-249">The thread does not have the writer lock.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="20e5d-250">Adres <paramref name="lockCookie" /> jest wskaźnikiem o wartości null.</span><span class="sxs-lookup"><span data-stu-id="20e5d-250">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-251">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-251">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-252">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-252">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReaderWriterLock ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="readerWriterLock.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20e5d-253">Zapewnia, że zasoby są zwolnione i inne operacje czyszczenia są wykonywane, gdy moduł zbierający <see cref="T:System.Threading.ReaderWriterLock" /> elementy bezużyteczne odzyskuje obiekt.</span><span class="sxs-lookup"><span data-stu-id="20e5d-253">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.ReaderWriterLock" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-254">Moduł zbierający elementy <xref:System.Threading.ReaderWriterLock.Finalize%2A> bezużyteczne wywołuje <xref:System.Threading.ReaderWriterLock> , kiedy bieżący obiekt jest gotowy do sfinalizowania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-254">The garbage collector calls <xref:System.Threading.ReaderWriterLock.Finalize%2A> when the current <xref:System.Threading.ReaderWriterLock> object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReaderLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReaderLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReaderLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReaderLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReaderLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReaderLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20e5d-255">Pobiera wartość wskazującą, czy bieżący wątek utrzymuje blokadę czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-255">Gets a value indicating whether the current thread holds a reader lock.</span></span></summary>
        <value><span data-ttu-id="20e5d-256"><see langword="true" />Jeśli bieżący wątek utrzymuje blokadę czytnika; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="20e5d-256"><see langword="true" /> if the current thread holds a reader lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="20e5d-257">Poniższy przykład kodu demonstruje, jak użyć `IsReaderLockHeld` , aby uniknąć zakleszczeniów.</span><span class="sxs-lookup"><span data-stu-id="20e5d-257">The following code example demonstrates how to use `IsReaderLockHeld` to avoid deadlocks.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-258">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-258">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-259">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-259">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsWriterLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriterLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriterLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriterLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriterLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriterLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20e5d-260">Pobiera wartość wskazującą, czy bieżący wątek przechowuje blokadę modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-260">Gets a value indicating whether the current thread holds the writer lock.</span></span></summary>
        <value><span data-ttu-id="20e5d-261"><see langword="true" />Jeśli bieżący wątek przechowuje blokadę modułu zapisywania; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="20e5d-261"><see langword="true" /> if the current thread holds the writer lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="20e5d-262">Poniższy przykład kodu pokazuje, że podczas próby uzyskania blokady czytnika w wątku, który ma blokadę składnika zapisywania, program nie przyznaje `ReaderWriterLock` blokady czytnika, ale zamiast tego zwiększa liczbę blokad dla blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-262">The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, `ReaderWriterLock` does not grant the reader lock but instead increments the lock count on the writer lock.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-263">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-263">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-264">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-264">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie ReleaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie ReleaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseLock" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseLock () As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie ReleaseLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseLock : unit -&gt; System.Threading.LockCookie" Usage="readerWriterLock.ReleaseLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20e5d-265">Zwalnia blokadę, niezależnie od tego, ile razy wątek uzyskał blokadę.</span><span class="sxs-lookup"><span data-stu-id="20e5d-265">Releases the lock, regardless of the number of times the thread acquired the lock.</span></span></summary>
        <returns><span data-ttu-id="20e5d-266"><see cref="T:System.Threading.LockCookie" /> Wartość reprezentująca wydaną blokadę.</span><span class="sxs-lookup"><span data-stu-id="20e5d-266">A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>umożliwia zwolnienie blokady czytnika lub blokady składnika zapisywania, niezależnie od liczby blokad cyklicznych.</span><span class="sxs-lookup"><span data-stu-id="20e5d-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> releases the reader lock or writer lock, regardless of the recursive lock count.</span></span> <span data-ttu-id="20e5d-268">Aby przywrócić stan blokady, łącznie z liczbą blokad, należy przekazać <xref:System.Threading.LockCookie> do. <xref:System.Threading.ReaderWriterLock.RestoreLock%2A></span><span class="sxs-lookup"><span data-stu-id="20e5d-268">To restore the state of the lock, including the lock count, pass the <xref:System.Threading.LockCookie> to <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-269">Poniższy przykład kodu pokazuje, jak używać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> metody do zwolnienia blokady, niezależnie od tego, ile razy został on pobrany przez wątek, i jak przywrócić stan blokady później.</span><span class="sxs-lookup"><span data-stu-id="20e5d-269">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="20e5d-270">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-270">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-271">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-271">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-272">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-272">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReaderLock">
      <MemberSignature Language="C#" Value="public void ReleaseReaderLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseReaderLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseReaderLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseReaderLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseReaderLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseReaderLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseReaderLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20e5d-273">Zmniejsza liczbę blokad.</span><span class="sxs-lookup"><span data-stu-id="20e5d-273">Decrements the lock count.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A>zmniejsza liczbę blokad.</span><span class="sxs-lookup"><span data-stu-id="20e5d-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> decrements the lock count.</span></span> <span data-ttu-id="20e5d-275">Gdy licznik osiągnie wartość zero, blokada zostanie wydana.</span><span class="sxs-lookup"><span data-stu-id="20e5d-275">When the count reaches zero, the lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20e5d-276">Jeśli wątek ma blokadę modułu zapisywania, wywołanie `ReleaseReaderLock` ma ten sam skutek co wywołanie <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-276">If a thread has the writer lock, calling `ReleaseReaderLock` has the same effect as calling <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span></span> <span data-ttu-id="20e5d-277">Jeśli wątek nie ma blokad, wywoływanie `ReleaseReaderLock` <xref:System.ApplicationException>zwraca.</span><span class="sxs-lookup"><span data-stu-id="20e5d-277">If a thread has no locks, calling `ReleaseReaderLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-278">Poniższy przykład kodu pokazuje, jak uzyskać i zwolnić blokadę czytnika oraz jak obsłużyć wyjątek zgłoszony, gdy żądanie przetrwa limit czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-278">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="20e5d-279">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-279">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="20e5d-280">Wątek nie ma żadnych blokad czytnika ani składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-280">The thread does not have any reader or writer locks.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-281">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-281">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-282">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-282">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseWriterLock">
      <MemberSignature Language="C#" Value="public void ReleaseWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseWriterLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseWriterLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseWriterLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseWriterLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseWriterLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseWriterLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20e5d-283">Zmniejsza liczbę blokad w blokadzie modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-283">Decrements the lock count on the writer lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>zmniejsza liczbę blokad modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> decrements the writer lock count.</span></span> <span data-ttu-id="20e5d-285">Gdy licznik osiągnie wartość zero, zostaje wydana blokada składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-285">When the count reaches zero, the writer lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20e5d-286">Jeśli wątek ma blokadę czytnika lub nie ma blokad, wywoływanie `ReleaseWriterLock` <xref:System.ApplicationException>generuje.</span><span class="sxs-lookup"><span data-stu-id="20e5d-286">If a thread has a reader lock, or no locks, calling `ReleaseWriterLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-287">Poniższy przykład kodu pokazuje, jak uzyskać i zwolnić blokadę modułu zapisywania oraz jak obsłużyć wyjątek zgłoszony, gdy żądanie przetrwa limit czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-287">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="20e5d-288">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-288">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="20e5d-289">Wątek nie ma blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-289">The thread does not have the writer lock.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-290">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-290">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-291">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-291">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RestoreLock">
      <MemberSignature Language="C#" Value="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RestoreLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RestoreLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.RestoreLock :  -&gt; unit" Usage="readerWriterLock.RestoreLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="20e5d-292"><see cref="T:System.Threading.LockCookie" /> Zwrócone przez<see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span><span class="sxs-lookup"><span data-stu-id="20e5d-292">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></param>
        <summary><span data-ttu-id="20e5d-293">Przywraca stan blokady wątku do jego działania przed wywołaniem <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span><span class="sxs-lookup"><span data-stu-id="20e5d-293">Restores the lock status of the thread to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-294">Przywrócono stan przez `RestoreLock` uwzględnienie liczby blokad cyklicznych.</span><span class="sxs-lookup"><span data-stu-id="20e5d-294">The state restored by `RestoreLock` includes the recursive lock count.</span></span>  
  
 <span data-ttu-id="20e5d-295">Bloki wątku, jeśli próbuje przywrócić blokadę czytnika, gdy inny wątek uzyska blokadę modułu zapisywania, lub jeśli próbuje przywrócić blokadę zapisywania po uzyskaniu blokady czytnika lub blokady modułu zapisującego przez inny wątek.</span><span class="sxs-lookup"><span data-stu-id="20e5d-295">A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</span></span> <span data-ttu-id="20e5d-296">Ponieważ `RestoreLock` nie akceptuje limitów czasu, należy zachować ostrożność, aby uniknąć ewentualnych zakleszczeniów.</span><span class="sxs-lookup"><span data-stu-id="20e5d-296">Because `RestoreLock` does not accept a time-out, you should take care to avoid possible deadlocks.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="20e5d-297">Przed wywołaniem `RestoreLock`upewnij się, że zostały wydane wszystkie blokady uzyskane od czasu wywołania <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>do.</span><span class="sxs-lookup"><span data-stu-id="20e5d-297">Before calling `RestoreLock`, make sure you have released all locks acquired since the call to <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span> <span data-ttu-id="20e5d-298">Na przykład zakleszczenie wątku, jeśli uzyskuje blokadę czytnika, a następnie próbuje przywrócić wcześniejszą blokadę zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-298">For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</span></span> <span data-ttu-id="20e5d-299">Użyj <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> i <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> , aby wykryć takie dodatkowe blokady.</span><span class="sxs-lookup"><span data-stu-id="20e5d-299">Use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> and <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> to detect such additional locks.</span></span>  
  
 <span data-ttu-id="20e5d-300">Nie należy używać <xref:System.Threading.LockCookie> zwracanych z <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-300">Do not use a <xref:System.Threading.LockCookie> returned from <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-301">Poniższy przykład kodu pokazuje, jak używać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> metody do zwolnienia blokady, niezależnie od tego, ile razy został on pobrany przez wątek, i jak przywrócić stan blokady później.</span><span class="sxs-lookup"><span data-stu-id="20e5d-301">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="20e5d-302">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-302">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="20e5d-303">Adres <paramref name="lockCookie" /> jest wskaźnikiem o wartości null.</span><span class="sxs-lookup"><span data-stu-id="20e5d-303">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-304">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-304">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-305">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-305">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpgradeToWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="20e5d-306">Uaktualnia blokadę czytnika do blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-306">Upgrades a reader lock to the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (millisecondsTimeout As Integer) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : int -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="20e5d-307">Limit czasu w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="20e5d-307">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="20e5d-308">Uaktualnia blokadę czytnika do blokady składnika zapisywania przy użyciu <see langword="Int32" /> wartości limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-308">Upgrades a reader lock to the writer lock, using an <see langword="Int32" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="20e5d-309"><see cref="T:System.Threading.LockCookie" /> Wartość.</span><span class="sxs-lookup"><span data-stu-id="20e5d-309">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-310">Gdy wątek wywołuje `UpgradeToWriterLock` blokadę czytnika, niezależnie od liczby blokad, a wątek przechodzi do końca kolejki dla blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-310">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="20e5d-311">W takim przypadku inne wątki mogą zapisywać w zasobie, zanim wątek, który zażądał uaktualnienia, uzyska blokadę modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-311">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20e5d-312">Wyjątek limitu czasu nie jest zgłaszany, dopóki wątek, który wywołał <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metodę, nie może ponownie uzyskać blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-312">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="20e5d-313">Jeśli nie ma innych wątków oczekujących na blokadę składnika zapisywania, dzieje się to natychmiast.</span><span class="sxs-lookup"><span data-stu-id="20e5d-313">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="20e5d-314">Jeśli jednak do blokady składnika zapisywania jest umieszczony inny wątek, wątek, który wywołał <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metodę, nie może ponownie uzyskać blokady czytnika do momentu, gdy wszyscy bieżąca czytelnicy wykupili swoje blokady, a jeden wątek uzyskał i udostępnił blokadę modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-314">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="20e5d-315">Jest to prawdziwe, nawet jeśli inny wątek, który zażądał zablokowania modułu zapisywania, zażądał go po bieżącym wątku nazywanym <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metodą.</span><span class="sxs-lookup"><span data-stu-id="20e5d-315">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="20e5d-316">Aby przywrócić stan blokady, wywołaj <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> <xref:System.Threading.LockCookie> przy użyciu zwróconego `UpgradeToWriterLock`przez.</span><span class="sxs-lookup"><span data-stu-id="20e5d-316">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="20e5d-317">Nie należy używać go `LockCookie` z <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-317">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="20e5d-318">Gdy wątek nie ma blokady czytnika, nie należy używać `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="20e5d-318">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="20e5d-319">Zamiast nich należy używać słów kluczowych <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-319">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="20e5d-320">Aby uzyskać prawidłowe wartości limitu czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-320">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-321">Poniższy przykład kodu pokazuje, jak zażądać blokady czytnika, uaktualnić blokadę czytnika do blokady modułu zapisywania i ponownie obniżyć poziom zmian do blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-321">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="20e5d-322">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-322">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="20e5d-323"><paramref name="millisecondsTimeout" />wygasa przed udzieleniem żądania blokady.</span><span class="sxs-lookup"><span data-stu-id="20e5d-323"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-324">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-324">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-325">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-325">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (timeout As TimeSpan) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : TimeSpan -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="20e5d-326"><see langword="TimeSpan" /> Określanie limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-326">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="20e5d-327">Uaktualnia blokadę czytnika do blokady składnika zapisywania przy użyciu <see langword="TimeSpan" /> wartości limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="20e5d-327">Upgrades a reader lock to the writer lock, using a <see langword="TimeSpan" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="20e5d-328"><see cref="T:System.Threading.LockCookie" /> Wartość.</span><span class="sxs-lookup"><span data-stu-id="20e5d-328">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-329">Gdy wątek wywołuje `UpgradeToWriterLock` blokadę czytnika, niezależnie od liczby blokad, a wątek przechodzi do końca kolejki dla blokady modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-329">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="20e5d-330">W takim przypadku inne wątki mogą zapisywać w zasobie, zanim wątek, który zażądał uaktualnienia, uzyska blokadę modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-330">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="20e5d-331">Wyjątek limitu czasu nie jest zgłaszany, dopóki wątek, który wywołał <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metodę, nie może ponownie uzyskać blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-331">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="20e5d-332">Jeśli nie ma innych wątków oczekujących na blokadę składnika zapisywania, dzieje się to natychmiast.</span><span class="sxs-lookup"><span data-stu-id="20e5d-332">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="20e5d-333">Jeśli jednak do blokady składnika zapisywania jest umieszczony inny wątek, wątek, który wywołał <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metodę, nie może ponownie uzyskać blokady czytnika do momentu, gdy wszyscy bieżąca czytelnicy wykupili swoje blokady, a jeden wątek uzyskał i udostępnił blokadę modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-333">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="20e5d-334">Jest to prawdziwe, nawet jeśli inny wątek, który zażądał zablokowania modułu zapisywania, zażądał go po bieżącym wątku nazywanym <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metodą.</span><span class="sxs-lookup"><span data-stu-id="20e5d-334">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="20e5d-335">Aby przywrócić stan blokady, wywołaj <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> <xref:System.Threading.LockCookie> przy użyciu zwróconego `UpgradeToWriterLock`przez.</span><span class="sxs-lookup"><span data-stu-id="20e5d-335">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="20e5d-336">Nie należy używać go `LockCookie` z <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-336">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="20e5d-337">Gdy wątek nie ma blokady czytnika, nie należy używać `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="20e5d-337">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="20e5d-338">Zamiast nich należy używać słów kluczowych <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-338">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="20e5d-339">Aby uzyskać prawidłowe wartości limitu czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="20e5d-339">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="20e5d-340"><paramref name="timeout" />wygasa przed udzieleniem żądania blokady.</span><span class="sxs-lookup"><span data-stu-id="20e5d-340"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="20e5d-341"><paramref name="timeout" />Określa wartość ujemną inną niż-1 milisekund.</span><span class="sxs-lookup"><span data-stu-id="20e5d-341"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-342">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-342">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-343">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-343">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriterSeqNum">
      <MemberSignature Language="C#" Value="public int WriterSeqNum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriterSeqNum" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriterSeqNum As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriterSeqNum { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WriterSeqNum : int" Usage="System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20e5d-344">Pobiera bieżący numer sekwencyjny.</span><span class="sxs-lookup"><span data-stu-id="20e5d-344">Gets the current sequence number.</span></span></summary>
        <value><span data-ttu-id="20e5d-345">Bieżący numer sekwencyjny.</span><span class="sxs-lookup"><span data-stu-id="20e5d-345">The current sequence number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20e5d-346">Numer sekwencyjny zwiększa się za każdym razem, gdy wątek uzyskuje blokadę modułu zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-346">The sequence number increases whenever a thread acquires the writer lock.</span></span> <span data-ttu-id="20e5d-347">Możesz zapisać numer sekwencyjny i przekazać go do <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> późniejszego czasu, aby określić, czy w międzyczasie inne wątki uzyskały blokadę zapisywania.</span><span class="sxs-lookup"><span data-stu-id="20e5d-347">You can save the sequence number and pass it to <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</span></span>  
  
 <span data-ttu-id="20e5d-348">Można użyć `WriterSeqNum` , aby zwiększyć wydajność aplikacji.</span><span class="sxs-lookup"><span data-stu-id="20e5d-348">You can use `WriterSeqNum` to improve application performance.</span></span> <span data-ttu-id="20e5d-349">Na przykład wątek może buforować informacje uzyskiwane podczas utrzymywania blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="20e5d-349">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="20e5d-350">Po zwolnieniu i późniejszym odbyciu blokady wątek może określić, czy inne wątki zostały zapisane do zasobu przez wywołanie `AnyWritersSince`; Jeśli nie, można użyć buforowanych informacji.</span><span class="sxs-lookup"><span data-stu-id="20e5d-350">After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling `AnyWritersSince`; if not, the cached information can be used.</span></span> <span data-ttu-id="20e5d-351">Ta technika jest przydatna, gdy odczytywanie informacji chronionych przez blokadę jest kosztowne. na przykład uruchomienie zapytania do bazy danych.</span><span class="sxs-lookup"><span data-stu-id="20e5d-351">This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="20e5d-352">Obiekt wywołujący musi mieć blokadę czytnika lub blokadę modułu zapisywania, aby numer sekwencji był przydatny.</span><span class="sxs-lookup"><span data-stu-id="20e5d-352">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="20e5d-353">Poniższy przykład kodu pokazuje, <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> jak użyć właściwości <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> i metody, aby określić, czy inny wątek uzyskał blokadę zapisu dla zasobu chronionego, ponieważ bieżący wątek ostatnio zablokuje blokadę.</span><span class="sxs-lookup"><span data-stu-id="20e5d-353">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property and the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="20e5d-354">Ten kod jest częścią większego przykładu dostarczonego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="20e5d-354">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="20e5d-355">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="20e5d-355">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="20e5d-356">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="20e5d-356">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
