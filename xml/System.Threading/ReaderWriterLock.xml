<Type Name="ReaderWriterLock" FullName="System.Threading.ReaderWriterLock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="405e3d2ae723a795a5dc6cc955e36cfb6ca813b7" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48747873" /></Metadata><TypeSignature Language="C#" Value="public sealed class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReaderWriterLock extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLock" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReaderWriterLock&#xA;Inherits CriticalFinalizerObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLock sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject" />
  <TypeSignature Language="F#" Value="type ReaderWriterLock = class&#xA;    inherit CriticalFinalizerObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e61cd-101">Definiuje obsługującego autorzy jednego i wielu elementów odczytujących blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-101">Defines a lock that supports single writers and multiple readers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="e61cd-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Ma dwa reader_writer_lock, <xref:System.Threading.ReaderWriterLockSlim> i <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] has two reader-writer locks, <xref:System.Threading.ReaderWriterLockSlim> and <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="e61cd-103"><xref:System.Threading.ReaderWriterLockSlim> jest zalecana dla wszystkich nowych wdrożeń.</span><span class="sxs-lookup"><span data-stu-id="e61cd-103"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span> <span data-ttu-id="e61cd-104"><xref:System.Threading.ReaderWriterLockSlim> jest podobny do <xref:System.Threading.ReaderWriterLock>, ale oferuje uproszczone, zasady rekursji oraz uaktualnianie i zmiany na starszą wersję stan blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="e61cd-105"><xref:System.Threading.ReaderWriterLockSlim> pozwala uniknąć wielu przypadkach potencjalnych zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="e61cd-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="e61cd-106">Ponadto wydajność <xref:System.Threading.ReaderWriterLockSlim> jest znacznie lepsze niż <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 <span data-ttu-id="e61cd-107"><xref:System.Threading.ReaderWriterLock> Służy do synchronizowania dostępu do zasobu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-107"><xref:System.Threading.ReaderWriterLock> is used to synchronize access to a resource.</span></span> <span data-ttu-id="e61cd-108">W dowolnym momencie umożliwia równoczesne dostęp do odczytu dla wielu wątków lub dostęp do zapisu dla jednego wątku.</span><span class="sxs-lookup"><span data-stu-id="e61cd-108">At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</span></span> <span data-ttu-id="e61cd-109">W sytuacji, w którym zasób jest rzadko, zmieniane `ReaderWriterLock` zapewnia większą przepustowość niż prostą blokadą jeden w czasie, takie jak <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-109">In a situation where a resource is changed infrequently, a `ReaderWriterLock` provides better throughput than a simple one-at-a-time lock, such as <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="e61cd-110">`ReaderWriterLock` sprawdza się najlepiej w przypadku, gdy większość są odczyty, zapisy są rzadkie i krótki czas.</span><span class="sxs-lookup"><span data-stu-id="e61cd-110">`ReaderWriterLock` works best where most accesses are reads, while writes are infrequent and of short duration.</span></span> <span data-ttu-id="e61cd-111">Wielu elementów odczytujących alternatywne ze składnikami zapisywania pojedynczej, tak, aby czytelnicy ani moduły zapisujące są blokowane przez długi czas.</span><span class="sxs-lookup"><span data-stu-id="e61cd-111">Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e61cd-112">Akcji odczytywania blokad lub moduł zapisujący blokady przez długi czas będzie blokować inne wątki.</span><span class="sxs-lookup"><span data-stu-id="e61cd-112">Holding reader locks or writer locks for long periods will starve other threads.</span></span> <span data-ttu-id="e61cd-113">Aby uzyskać najlepszą wydajność należy wziąć pod uwagę restrukturyzacji aplikację, aby zminimalizować czas trwania zapisów.</span><span class="sxs-lookup"><span data-stu-id="e61cd-113">For best performance, consider restructuring your application to minimize the duration of writes.</span></span>  
  
 <span data-ttu-id="e61cd-114">Wątek może zawierać czytnika, blokady lub blokadę zapisu, ale nie obu jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="e61cd-114">A thread can hold a reader lock or a writer lock, but not both at the same time.</span></span> <span data-ttu-id="e61cd-115">Zamiast zwalniając blokadę, aby można było uzyskać blokadę zapisu, można użyć <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> i <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-115">Instead of releasing a reader lock in order to acquire the writer lock, you can use <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> and <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span></span>  
  
 <span data-ttu-id="e61cd-116">Żądania blokad cyklicznego Zwiększ liczbę blokad na blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-116">Recursive lock requests increase the lock count on a lock.</span></span>  
  
 <span data-ttu-id="e61cd-117">Czytniki i moduły zapisujące są umieszczane w kolejce oddzielnie.</span><span class="sxs-lookup"><span data-stu-id="e61cd-117">Readers and writers are queued separately.</span></span> <span data-ttu-id="e61cd-118">Kiedy wątek zwolni blokadę zapisu, wszystkich wątków oczekujących w kolejce czytnika w tej chwili są przyznawane odczytywania blokad; gdy wszystkie te blokady czytnika zostały zwolnione, dalej oczekiwania wątku w moduł zapisujący dodawać do kolejki, jeśli istnieją, otrzymuje moduł zapisujący blokady i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="e61cd-118">When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</span></span> <span data-ttu-id="e61cd-119">Innymi słowy `ReaderWriterLock` przełącza między zbiór czytelników i jednego składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="e61cd-119">In other words, `ReaderWriterLock` alternates between a collection of readers, and one writer.</span></span>  
  
 <span data-ttu-id="e61cd-120">Gdy wątek w kolejka writer oczekuje blokad aktywny czytnik mogą być wprowadzane, wątków żądanie nowego czytnika blokady są gromadzone w kolejce czytnika.</span><span class="sxs-lookup"><span data-stu-id="e61cd-120">While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</span></span> <span data-ttu-id="e61cd-121">Ich żądania nie są przyznawane, mimo że można mają równoczesny dostęp przy użyciu istniejących posiadaczy blokadę odczytu; Pozwala to chronić moduły zapisujące względem nieokreślony zatorem przez czytniki zawartości.</span><span class="sxs-lookup"><span data-stu-id="e61cd-121">Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</span></span>  
  
 <span data-ttu-id="e61cd-122">Większość metod uzyskania blokady na `ReaderWriterLock` akceptuje wartości limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-122">Most methods for acquiring locks on a `ReaderWriterLock` accept time-out values.</span></span> <span data-ttu-id="e61cd-123">Użyj przekroczeń limitu czasu w celu uniknięcia zakleszczenia w aplikacji.</span><span class="sxs-lookup"><span data-stu-id="e61cd-123">Use time-outs to avoid deadlocks in your application.</span></span> <span data-ttu-id="e61cd-124">Na przykład wątek może uzyskać blokadę na jeden zasób, a następnie żądają blokadę na drugim zasobów; w międzyczasie inny wątek może uzyskać blokady modułu zapisującego dla drugiego zasobu, a blokadę pierwszego żądania.</span><span class="sxs-lookup"><span data-stu-id="e61cd-124">For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</span></span> <span data-ttu-id="e61cd-125">Chyba że stosowane są limity czasu, zakleszczeń wątków.</span><span class="sxs-lookup"><span data-stu-id="e61cd-125">Unless time-outs are used, the threads deadlock.</span></span>  
  
 <span data-ttu-id="e61cd-126">Jeśli nie zostało przyznane żądanie blokady interwał limitu czasu wygaśnięcia, metoda zwraca kontrolę do wątku wywołującego zgłaszając <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-126">If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <xref:System.ApplicationException>.</span></span> <span data-ttu-id="e61cd-127">Wątek można przechwytywać tego wyjątku i określić, jakie działania należy podjąć.</span><span class="sxs-lookup"><span data-stu-id="e61cd-127">A thread can catch this exception and determine what action to take next.</span></span>  
  
 <span data-ttu-id="e61cd-128">Limity czasu są wyrażony w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="e61cd-128">Time-outs are expressed in milliseconds.</span></span> <span data-ttu-id="e61cd-129">Jeśli używasz <xref:System.TimeSpan?displayProperty=nameWithType> Aby określić limit czasu, wartość jest całkowita liczba milisekund całego reprezentowany przez <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-129">If you use a <xref:System.TimeSpan?displayProperty=nameWithType> to specify the time-out, the value used is the total number of whole milliseconds represented by the <xref:System.TimeSpan>.</span></span> <span data-ttu-id="e61cd-130">W poniższej tabeli przedstawiono wartości prawidłowy limit czasu w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="e61cd-130">The following table shows the valid time-out values in milliseconds.</span></span>  
  
|<span data-ttu-id="e61cd-131">Wartość</span><span class="sxs-lookup"><span data-stu-id="e61cd-131">Value</span></span>|<span data-ttu-id="e61cd-132">Opis</span><span class="sxs-lookup"><span data-stu-id="e61cd-132">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="e61cd-133">-1</span><span class="sxs-lookup"><span data-stu-id="e61cd-133">-1</span></span>|<span data-ttu-id="e61cd-134">Wątek czeka, dopóki jest blokada, niezależnie od tego, jak długo trwa.</span><span class="sxs-lookup"><span data-stu-id="e61cd-134">The thread waits until the lock is acquired, regardless of how long it takes.</span></span> <span data-ttu-id="e61cd-135">Dla metod, które określają limity liczby całkowitej, stała <xref:System.Threading.Timeout.Infinite> mogą być używane.</span><span class="sxs-lookup"><span data-stu-id="e61cd-135">For methods that specify integer time-outs, the constant <xref:System.Threading.Timeout.Infinite> can be used.</span></span>|  
|<span data-ttu-id="e61cd-136">0</span><span class="sxs-lookup"><span data-stu-id="e61cd-136">0</span></span>|<span data-ttu-id="e61cd-137">Wątek nie czeka na uzyskanie blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-137">The thread does not wait to acquire the lock.</span></span> <span data-ttu-id="e61cd-138">Jeśli nie można pobrać blokady natychmiast, metoda zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="e61cd-138">If the lock cannot be acquired immediately, the method returns.</span></span>|  
|<span data-ttu-id="e61cd-139">>0</span><span class="sxs-lookup"><span data-stu-id="e61cd-139">>0</span></span>|<span data-ttu-id="e61cd-140">Liczba milisekund.</span><span class="sxs-lookup"><span data-stu-id="e61cd-140">The number of milliseconds to wait.</span></span>|  
  
 <span data-ttu-id="e61cd-141">Z wyjątkiem -1 wartości ujemne limitu czasu nie są dozwolone.</span><span class="sxs-lookup"><span data-stu-id="e61cd-141">With the exception of -1, negative time-out values are not allowed.</span></span> <span data-ttu-id="e61cd-142">Jeśli określisz ujemną liczbę całkowitą od-1, w zamian jest używana wartość limitu czasu, o wartości zero.</span><span class="sxs-lookup"><span data-stu-id="e61cd-142">If you specify a negative integer other than -1, a time-out value of zero is used instead.</span></span> <span data-ttu-id="e61cd-143">(Oznacza to, metoda zwraca bez zbędnego oczekiwania, jeśli nie można pobrać blokady natychmiast.) Jeśli określisz <xref:System.TimeSpan> reprezentujący ujemna liczba milisekund od-1, <xref:System.ArgumentOutOfRangeException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="e61cd-143">(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <xref:System.TimeSpan> that represents a negative number of milliseconds other than -1, <xref:System.ArgumentOutOfRangeException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-144">Poniższy przykład pokazuje sposób użycia <xref:System.Threading.ReaderWriterLock> w celu ochrony zasobu udostępnionego, liczbą całkowitą o nazwie `resource`, która jest jednocześnie i odczytywana wyłącznie przez wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="e61cd-144">The following example demonstrates how to use a <xref:System.Threading.ReaderWriterLock> to protect a shared resource, an integer value named `resource`, that is read concurrently and written exclusively by multiple threads.</span></span> <span data-ttu-id="e61cd-145">Należy pamiętać, że <xref:System.Threading.ReaderWriterLock> zadeklarowane na poziomie klasy, tak aby była widoczna dla wszystkich wątków.</span><span class="sxs-lookup"><span data-stu-id="e61cd-145">Note that the <xref:System.Threading.ReaderWriterLock> is declared at the class level so that it is visible to all threads.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="e61cd-146">Ten typ jest bezpieczny wątkowo.</span><span class="sxs-lookup"><span data-stu-id="e61cd-146">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-147">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-147">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-148">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-148">ReaderWriterLock</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLock();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e61cd-149">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ReaderWriterLock" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-149">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e61cd-150">Poniższy przykład kodu pokazuje, jak utworzyć nowe wystąpienie klasy <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-150">The following code example demonstrates how to create a new instance of the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="e61cd-151">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-151">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-152">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-152">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-153">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-153">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireReaderLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e61cd-154">Uzyskuje blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-154">Acquires a reader lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : int -&gt; unit" Usage="readerWriterLock.AcquireReaderLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="e61cd-155">Limit czasu w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="e61cd-155">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="e61cd-156">Uzyskuje czytnik zablokować, za pomocą <see cref="T:System.Int32" /> wartość limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-156">Acquires a reader lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-157"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blokuje, jeśli inny wątek ma blokadę zapisu lub co najmniej jeden wątek oczekuje na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-157"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e61cd-158">Jeśli bieżący wątek ma już blokadę zapisu, nie czytnika jest blokada.</span><span class="sxs-lookup"><span data-stu-id="e61cd-158">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="e61cd-159">Zamiast tego jest zwiększany liczbę blokad na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-159">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="e61cd-160">Zapobiega to blokowania na swój własny moduł zapisujący blokady wątku.</span><span class="sxs-lookup"><span data-stu-id="e61cd-160">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="e61cd-161">Wynikiem jest dokładnie taka sama, co wywołanie metody <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>oraz dodatkowe wywołanie <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> jest wymagana podczas zwalniania blokady zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-161">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="e61cd-162">`AcquireReaderLock` obsługuje cykliczne blokadę odczytu żądań.</span><span class="sxs-lookup"><span data-stu-id="e61cd-162">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="e61cd-163">Oznacza to, że wątek może wywołać AcquireReaderLock wiele razy, która zwiększa liczbę blokad każdorazowo.</span><span class="sxs-lookup"><span data-stu-id="e61cd-163">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="e61cd-164">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> jeden raz dla każdego wywołania `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="e61cd-164">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="e61cd-165">Ewentualnie możesz wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Aby zmniejszyć liczbę blokad do zera natychmiast.</span><span class="sxs-lookup"><span data-stu-id="e61cd-165">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="e61cd-166">Żądania blokad cyklicznego zawsze przyznawane są natychmiast, bez pogarszania wątku żądania w kolejce czytnika.</span><span class="sxs-lookup"><span data-stu-id="e61cd-166">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="e61cd-167">Używać ostrożnie, blokady cykliczne, aby uniknąć blokowania blokadę zapisu żądania przez długi czas.</span><span class="sxs-lookup"><span data-stu-id="e61cd-167">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="e61cd-168">Dla wartości prawidłowy limit czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-168">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-169">Poniższy przykład kodu pokazuje, jak pobierać i zwolnić blokadę i sposób obsługi wyjątku, gdy upłynie limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="e61cd-169">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="e61cd-170">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-170">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="e61cd-171"><paramref name="millisecondsTimeout" /> upłynie, zanim otrzymuje żądanie blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-171"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-172">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-172">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-173">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-173">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireReaderLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireReaderLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e61cd-174">A <see langword="TimeSpan" /> Określanie przed upłynięciem limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-174">A <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="e61cd-175">Uzyskuje czytnik zablokować, za pomocą <see cref="T:System.TimeSpan" /> wartość limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-175">Acquires a reader lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-176"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blokuje, jeśli inny wątek ma blokadę zapisu lub co najmniej jeden wątek oczekuje na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-176"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e61cd-177">Jeśli bieżący wątek ma już blokadę zapisu, nie czytnika jest blokada.</span><span class="sxs-lookup"><span data-stu-id="e61cd-177">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="e61cd-178">Zamiast tego jest zwiększany liczbę blokad na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-178">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="e61cd-179">Zapobiega to blokowania na swój własny moduł zapisujący blokady wątku.</span><span class="sxs-lookup"><span data-stu-id="e61cd-179">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="e61cd-180">Wynikiem jest dokładnie taka sama, co wywołanie metody <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>oraz dodatkowe wywołanie <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> jest wymagana podczas zwalniania blokady zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-180">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="e61cd-181">`AcquireReaderLock` obsługuje cykliczne blokadę odczytu żądań.</span><span class="sxs-lookup"><span data-stu-id="e61cd-181">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="e61cd-182">Oznacza to, że wątek może wywołać AcquireReaderLock wiele razy, która zwiększa liczbę blokad każdorazowo.</span><span class="sxs-lookup"><span data-stu-id="e61cd-182">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="e61cd-183">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> jeden raz dla każdego wywołania `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="e61cd-183">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="e61cd-184">Ewentualnie możesz wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Aby zmniejszyć liczbę blokad do zera natychmiast.</span><span class="sxs-lookup"><span data-stu-id="e61cd-184">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="e61cd-185">Żądania blokad cyklicznego zawsze przyznawane są natychmiast, bez pogarszania wątku żądania w kolejce czytnika.</span><span class="sxs-lookup"><span data-stu-id="e61cd-185">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="e61cd-186">Używać ostrożnie, blokady cykliczne, aby uniknąć blokowania blokadę zapisu żądania przez długi czas.</span><span class="sxs-lookup"><span data-stu-id="e61cd-186">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="e61cd-187">Dla wartości prawidłowy limit czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-187">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="e61cd-188"><paramref name="timeout" /> upłynie, zanim otrzymuje żądanie blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-188"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e61cd-189"><paramref name="timeout" /> Określa wartość ujemną, inne niż-1 MS.</span><span class="sxs-lookup"><span data-stu-id="e61cd-189"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-190">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-190">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-191">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-191">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e61cd-192">Uzyskuje blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-192">Acquires the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : int -&gt; unit" Usage="readerWriterLock.AcquireWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="e61cd-193">Limit czasu w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="e61cd-193">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="e61cd-194">Pobiera moduł zapisujący blokady, za pomocą <see cref="T:System.Int32" /> wartość limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-194">Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-195">Ta metoda blokuje, jeśli inny wątek ma blokadę odczytu lub moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-195">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="e61cd-196">Opis sposobu, w jaki moduł zapisujący blokady przełącza w kilka blokad równoczesny czytnik zobacz <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-196">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="e61cd-197">Wątek, który ma już blokadę można uzyskać blokadę zapisu w jednym z dwóch sposobów: zwalniając blokadę odczytu, przed wywołaniem <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, lub przez wywołanie <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-197">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e61cd-198">Jeśli wątek wywołuje `AcquireWriterLock` podczas nadal posiada blokadę, spowoduje to zablokowanie na jego własnej blokadzie czytelnika; Jeśli nieskończony limit czasu jest określony, będzie zakleszczenie wątku.</span><span class="sxs-lookup"><span data-stu-id="e61cd-198">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="e61cd-199">Aby uniknąć takich zakleszczenia, użyj <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> do określenia, czy bieżący wątek ma już blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-199">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="e61cd-200">`AcquireWriterLock` obsługuje cykliczne blokadę zapisu żądania.</span><span class="sxs-lookup"><span data-stu-id="e61cd-200">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="e61cd-201">Oznacza to, że wątek może wywołać `AcquireWriterLock` wielokrotnie, która zwiększa liczbę blokad każdorazowo.</span><span class="sxs-lookup"><span data-stu-id="e61cd-201">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="e61cd-202">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> jeden raz dla każdego wywołania `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="e61cd-202">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="e61cd-203">Ewentualnie możesz wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Aby zmniejszyć liczbę blokad do zera natychmiast.</span><span class="sxs-lookup"><span data-stu-id="e61cd-203">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="e61cd-204">Żądania blokad cyklicznego zawsze przyznawane są natychmiast, bez pogarszania wątku żądania w kolejce modułu zapisującego.</span><span class="sxs-lookup"><span data-stu-id="e61cd-204">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="e61cd-205">Dla wartości prawidłowy limit czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-205">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-206">Poniższy przykład kodu pokazuje, jak pobierać i zwolnić blokadę i sposób obsługi wyjątku, gdy upłynie limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="e61cd-206">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="e61cd-207">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-207">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="e61cd-208"><paramref name="timeout" /> upłynie, zanim otrzymuje żądanie blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-208"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-209">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-209">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-210">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-210">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.AcquireWriterLock : TimeSpan -&gt; unit" Usage="readerWriterLock.AcquireWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e61cd-211"><see langword="TimeSpan" /> Określanie przed upłynięciem limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-211">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="e61cd-212">Pobiera moduł zapisujący blokady, za pomocą <see cref="T:System.TimeSpan" /> wartość limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-212">Acquires the writer lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-213">Ta metoda blokuje, jeśli inny wątek ma blokadę odczytu lub moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-213">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="e61cd-214">Opis sposobu, w jaki moduł zapisujący blokady przełącza w kilka blokad równoczesny czytnik zobacz <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-214">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="e61cd-215">Wątek, który ma już blokadę można uzyskać blokadę zapisu w jednym z dwóch sposobów: zwalniając blokadę odczytu, przed wywołaniem <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, lub przez wywołanie <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-215">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e61cd-216">Jeśli wątek wywołuje `AcquireWriterLock` podczas nadal posiada blokadę, spowoduje to zablokowanie na jego własnej blokadzie czytelnika; Jeśli nieskończony limit czasu jest określony, będzie zakleszczenie wątku.</span><span class="sxs-lookup"><span data-stu-id="e61cd-216">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="e61cd-217">Aby uniknąć takich zakleszczenia, użyj <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> do określenia, czy bieżący wątek ma już blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-217">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="e61cd-218">`AcquireWriterLock` obsługuje cykliczne blokadę zapisu żądania.</span><span class="sxs-lookup"><span data-stu-id="e61cd-218">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="e61cd-219">Oznacza to, że wątek może wywołać `AcquireWriterLock` wielokrotnie, która zwiększa liczbę blokad każdorazowo.</span><span class="sxs-lookup"><span data-stu-id="e61cd-219">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="e61cd-220">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> jeden raz dla każdego wywołania `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="e61cd-220">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="e61cd-221">Ewentualnie możesz wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Aby zmniejszyć liczbę blokad do zera natychmiast.</span><span class="sxs-lookup"><span data-stu-id="e61cd-221">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="e61cd-222">Żądania blokad cyklicznego zawsze przyznawane są natychmiast, bez pogarszania wątku żądania w kolejce modułu zapisującego.</span><span class="sxs-lookup"><span data-stu-id="e61cd-222">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="e61cd-223">Dla wartości prawidłowy limit czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-223">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="e61cd-224"><paramref name="timeout" /> upłynie, zanim otrzymuje żądanie blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-224"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e61cd-225"><paramref name="timeout" /> Określa wartość ujemną, inne niż-1 MS.</span><span class="sxs-lookup"><span data-stu-id="e61cd-225"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-226">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-226">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-227">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-227">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AnyWritersSince">
      <MemberSignature Language="C#" Value="public bool AnyWritersSince (int seqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AnyWritersSince(int32 seqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyWritersSince (seqNum As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AnyWritersSince(int seqNum);" />
      <MemberSignature Language="F#" Value="member this.AnyWritersSince : int -&gt; bool" Usage="readerWriterLock.AnyWritersSince seqNum" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seqNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seqNum"><span data-ttu-id="e61cd-228">Numer sekwencyjny.</span><span class="sxs-lookup"><span data-stu-id="e61cd-228">The sequence number.</span></span></param>
        <summary><span data-ttu-id="e61cd-229">Wskazuje, czy moduł zapisujący blokady udzielono na żadnym z wątków ponieważ uzyskano numer sekwencyjny.</span><span class="sxs-lookup"><span data-stu-id="e61cd-229">Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</span></span></summary>
        <returns><span data-ttu-id="e61cd-230"><see langword="true" /> Jeśli moduł zapisujący blokady ma udzielonego na żadnym z wątków, ponieważ numer sekwencyjny zostały pobrane; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e61cd-230"><see langword="true" /> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-231">Możesz użyć <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> i `AnyWritersSince` wydajność aplikacji.</span><span class="sxs-lookup"><span data-stu-id="e61cd-231">You can use <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> and `AnyWritersSince` to improve application performance.</span></span> <span data-ttu-id="e61cd-232">Na przykład wątek może być w pamięci podręcznej informacje, które uzyska podczas utrzymywania blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-232">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="e61cd-233">Po zwalniania i później reacquiring blokady, można użyć wątku `AnyWritersSince` ustalenie, czy inne wątki napisano do zasobu w międzyczasie; Jeśli nie, buforowane informacje mogą być używane.</span><span class="sxs-lookup"><span data-stu-id="e61cd-233">After releasing and later reacquiring the lock, the thread can use `AnyWritersSince` to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</span></span> <span data-ttu-id="e61cd-234">Ta technika jest przydatna, gdzie dane chronione przez blokadę odczytu jest kosztowny; Aby na przykład uruchomić zapytanie bazy danych.</span><span class="sxs-lookup"><span data-stu-id="e61cd-234">This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="e61cd-235">Obiekt wywołujący musi zawierający blokadę lub blokadę zapisu w kolejności dla numeru sekwencji były przydatne.</span><span class="sxs-lookup"><span data-stu-id="e61cd-235">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-236">Poniższy przykład kodu pokazuje sposób użycia <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> metody i <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> właściwości w celu określenia, czy inny wątek zgromadzonych blokadę zapisu w chronionych zasobów od bieżącego wątku ostatniego stanu blokady zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-236">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method and the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="e61cd-237">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-237">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-238">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-238">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-239">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-239">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DowngradeFromWriterLock">
      <MemberSignature Language="C#" Value="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DowngradeFromWriterLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DowngradeFromWriterLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.DowngradeFromWriterLock :  -&gt; unit" Usage="readerWriterLock.DowngradeFromWriterLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="e61cd-240">A <see cref="T:System.Threading.LockCookie" /> zwrócone przez <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span><span class="sxs-lookup"><span data-stu-id="e61cd-240">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span></span></param>
        <summary><span data-ttu-id="e61cd-241">Przywraca stan blokady wątku sprzed <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="e61cd-241">Restores the lock status of the thread to what it was before <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> zwalnia blokadę zapisu, niezależnie od tego, liczbę blokad cykliczne i przywraca blokadę czytnika, która odbyła się przez wątek przed uaktualnieniem do moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-242"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</span></span> <span data-ttu-id="e61cd-243">Po przywróceniu liczbę blokad na blokadzie czytelnika.</span><span class="sxs-lookup"><span data-stu-id="e61cd-243">The lock count on the reader lock is restored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e61cd-244">`DowngradeFromWriterLock` akceptuje <xref:System.Threading.LockCookie> można uzyskać przez wywołanie <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-244">`DowngradeFromWriterLock` accepts a <xref:System.Threading.LockCookie> obtained by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span> <span data-ttu-id="e61cd-245">Nie używaj `LockCookie` zwrócone przez <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-245">Do not use a `LockCookie` returned by <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span>  
  
 <span data-ttu-id="e61cd-246">Wątek nie blokuje przed obniżeniem z blokadę zapisu nawet wtedy, gdy inne wątki oczekiwania na blokadę, ponieważ wszystkie żądania blokadę odczytu są przyznawane po zwolnieniu blokady zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-246">A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-247">Poniższy przykład kodu pokazuje sposób żądania blokadę, Uaktualnij blokadę odczytu na blokadę zapisu i ponownie starszą wersję blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-247">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="e61cd-248">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-248">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="e61cd-249">Wątek nie ma blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-249">The thread does not have the writer lock.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="e61cd-250">Adres <paramref name="lockCookie" /> jest wskaźnikiem wartości null.</span><span class="sxs-lookup"><span data-stu-id="e61cd-250">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-251">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-251">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-252">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-252">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReaderWriterLock ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="readerWriterLock.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e61cd-253">Zapewnia, że zasoby są zwalniane, a inne operacje oczyszczania są wykonywane, gdy moduł odśmiecania pamięci odzyskuje <see cref="T:System.Threading.ReaderWriterLock" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-253">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.ReaderWriterLock" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-254">Moduł odśmiecania pamięci wywołuje <xref:System.Threading.ReaderWriterLock.Finalize%2A> podczas bieżącej <xref:System.Threading.ReaderWriterLock> obiekt jest gotowy do można sfinalizować.</span><span class="sxs-lookup"><span data-stu-id="e61cd-254">The garbage collector calls <xref:System.Threading.ReaderWriterLock.Finalize%2A> when the current <xref:System.Threading.ReaderWriterLock> object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReaderLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReaderLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReaderLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReaderLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReaderLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReaderLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e61cd-255">Pobiera wartość wskazującą, czy bieżący wątek nałoży blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-255">Gets a value indicating whether the current thread holds a reader lock.</span></span></summary>
        <value><span data-ttu-id="e61cd-256"><see langword="true" /> Jeśli bieżący wątek nałoży blokadę; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e61cd-256"><see langword="true" /> if the current thread holds a reader lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e61cd-257">Poniższy przykład kodu demonstruje sposób używania `IsReaderLockHeld` w celu uniknięcia zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="e61cd-257">The following code example demonstrates how to use `IsReaderLockHeld` to avoid deadlocks.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-258">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-258">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-259">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-259">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsWriterLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriterLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriterLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriterLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriterLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriterLockHeld : bool" Usage="System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e61cd-260">Pobiera wartość wskazującą, czy bieżący wątek nałoży blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-260">Gets a value indicating whether the current thread holds the writer lock.</span></span></summary>
        <value><span data-ttu-id="e61cd-261"><see langword="true" /> Jeśli bieżący wątek nałoży blokadę zapisu; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e61cd-261"><see langword="true" /> if the current thread holds the writer lock; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e61cd-262">Poniższy przykład kodu pokazuje, że gdy podejmowana jest próba uzyskania blokady czytnika w wątku, który ma blokadę zapisu `ReaderWriterLock` nie uzyskuje blokadę odczytu, ale zamiast tego zwiększa liczbę blokad na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-262">The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, `ReaderWriterLock` does not grant the reader lock but instead increments the lock count on the writer lock.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-263">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-263">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-264">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-264">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie ReleaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie ReleaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseLock" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseLock () As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie ReleaseLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseLock : unit -&gt; System.Threading.LockCookie" Usage="readerWriterLock.ReleaseLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e61cd-265">Zwalnia blokadę, niezależnie od liczby wątku nabyte blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-265">Releases the lock, regardless of the number of times the thread acquired the lock.</span></span></summary>
        <returns><span data-ttu-id="e61cd-266">A <see cref="T:System.Threading.LockCookie" /> reprezentującą wydana blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-266">A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> zwalnia blokadę odczytu lub moduł zapisujący blokady, niezależnie od tego, liczbę blokad cykliczne.</span><span class="sxs-lookup"><span data-stu-id="e61cd-267"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> releases the reader lock or writer lock, regardless of the recursive lock count.</span></span> <span data-ttu-id="e61cd-268">Aby przywrócić stan blokady, w tym liczbę blokad przekazać <xref:System.Threading.LockCookie> do <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-268">To restore the state of the lock, including the lock count, pass the <xref:System.Threading.LockCookie> to <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-269">Poniższy przykład kodu pokazuje sposób użycia <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> metodę, aby zwolnić blokady, niezależnie od tego, ile razy został pozyskany przez wątek i jak przywrócić stan blokady w dalszej części.</span><span class="sxs-lookup"><span data-stu-id="e61cd-269">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="e61cd-270">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-270">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-271">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-271">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-272">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-272">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReaderLock">
      <MemberSignature Language="C#" Value="public void ReleaseReaderLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseReaderLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseReaderLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseReaderLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseReaderLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseReaderLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseReaderLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e61cd-273">Zmniejsza liczbę blokad.</span><span class="sxs-lookup"><span data-stu-id="e61cd-273">Decrements the lock count.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> Zmniejsza liczbę blokad.</span><span class="sxs-lookup"><span data-stu-id="e61cd-274"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> decrements the lock count.</span></span> <span data-ttu-id="e61cd-275">Jeśli licznik osiągnie zero, blokada jest zwalniana.</span><span class="sxs-lookup"><span data-stu-id="e61cd-275">When the count reaches zero, the lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e61cd-276">Jeśli wątek ma blokadę zapisu, wywołanie `ReleaseReaderLock` ma taki sam skutek co wywołanie metody <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-276">If a thread has the writer lock, calling `ReleaseReaderLock` has the same effect as calling <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span></span> <span data-ttu-id="e61cd-277">Jeśli wątek nie ma blokad, wywołanie `ReleaseReaderLock` zgłasza <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-277">If a thread has no locks, calling `ReleaseReaderLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-278">Poniższy przykład kodu pokazuje, jak pobierać i zwolnić blokadę i sposób obsługi wyjątku, gdy upłynie limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="e61cd-278">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="e61cd-279">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-279">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="e61cd-280">Wątek nie ma żadnych blokad odczytywania lub zapisywania.</span><span class="sxs-lookup"><span data-stu-id="e61cd-280">The thread does not have any reader or writer locks.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-281">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-281">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-282">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-282">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReleaseWriterLock">
      <MemberSignature Language="C#" Value="public void ReleaseWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseWriterLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseWriterLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseWriterLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseWriterLock();" />
      <MemberSignature Language="F#" Value="member this.ReleaseWriterLock : unit -&gt; unit" Usage="readerWriterLock.ReleaseWriterLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e61cd-283">Zmniejsza liczbę blokad na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-283">Decrements the lock count on the writer lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> zmniejsza liczbę blokad modułu zapisującego.</span><span class="sxs-lookup"><span data-stu-id="e61cd-284"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> decrements the writer lock count.</span></span> <span data-ttu-id="e61cd-285">Jeśli licznik osiągnie zero, moduł zapisujący blokady jest zwalniany.</span><span class="sxs-lookup"><span data-stu-id="e61cd-285">When the count reaches zero, the writer lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e61cd-286">Jeśli wątek ma blokadę lub nie blokad, wywołanie `ReleaseWriterLock` zgłasza <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-286">If a thread has a reader lock, or no locks, calling `ReleaseWriterLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-287">Poniższy przykład kodu pokazuje, jak pobierać i zwolnić blokadę i sposób obsługi wyjątku, gdy upłynie limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="e61cd-287">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="e61cd-288">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-288">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="e61cd-289">Wątek nie ma blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-289">The thread does not have the writer lock.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-290">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-290">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-291">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-291">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RestoreLock">
      <MemberSignature Language="C#" Value="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RestoreLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RestoreLock(System::Threading::LockCookie % lockCookie);" />
      <MemberSignature Language="F#" Value="member this.RestoreLock :  -&gt; unit" Usage="readerWriterLock.RestoreLock lockCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie"><span data-ttu-id="e61cd-292">A <see cref="T:System.Threading.LockCookie" /> zwrócone przez <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span><span class="sxs-lookup"><span data-stu-id="e61cd-292">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></param>
        <summary><span data-ttu-id="e61cd-293">Przywraca stan blokady wątku, jakie były przed wywołaniem <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span><span class="sxs-lookup"><span data-stu-id="e61cd-293">Restores the lock status of the thread to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-294">Stan przywrócone przez `RestoreLock` zawiera liczbę blokad cykliczne.</span><span class="sxs-lookup"><span data-stu-id="e61cd-294">The state restored by `RestoreLock` includes the recursive lock count.</span></span>  
  
 <span data-ttu-id="e61cd-295">Blokuje wątek, jeśli próbuje przywrócić blokadę po inny wątek uzyskał moduł zapisujący blokady lub jeśli próbuje przywrócić moduł zapisujący blokady po inny wątek uzyskał blokadę odczytu lub moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-295">A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</span></span> <span data-ttu-id="e61cd-296">Ponieważ `RestoreLock` nie akceptuje upływu limitu czasu, należy powinien zachować ostrożność w celu uniknięcia zakleszczenia możliwe.</span><span class="sxs-lookup"><span data-stu-id="e61cd-296">Because `RestoreLock` does not accept a time-out, you should take care to avoid possible deadlocks.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e61cd-297">Przed wywołaniem `RestoreLock`, upewnij się, zostały wydane od wywołania do wszystkich blokad <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-297">Before calling `RestoreLock`, make sure you have released all locks acquired since the call to <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span> <span data-ttu-id="e61cd-298">Na przykład wątku zakleszczenia jeśli uzyskuje blokadę, a następnie podejmie próbę przywrócenia starszej blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-298">For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</span></span> <span data-ttu-id="e61cd-299">Użyj <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> i <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> wykryć takie dodatkowe blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-299">Use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> and <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> to detect such additional locks.</span></span>  
  
 <span data-ttu-id="e61cd-300">Nie używaj <xref:System.Threading.LockCookie> zwróciło <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-300">Do not use a <xref:System.Threading.LockCookie> returned from <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-301">Poniższy przykład kodu pokazuje sposób użycia <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> metodę, aby zwolnić blokady, niezależnie od tego, ile razy został pozyskany przez wątek i jak przywrócić stan blokady w dalszej części.</span><span class="sxs-lookup"><span data-stu-id="e61cd-301">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="e61cd-302">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-302">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="e61cd-303">Adres <paramref name="lockCookie" /> jest wskaźnikiem wartości null.</span><span class="sxs-lookup"><span data-stu-id="e61cd-303">The address of <paramref name="lockCookie" /> is a null pointer.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-304">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-304">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-305">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-305">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpgradeToWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e61cd-306">Aktualizuje moduł zapisujący blokady blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-306">Upgrades a reader lock to the writer lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (millisecondsTimeout As Integer) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : int -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="e61cd-307">Limit czasu w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="e61cd-307">The time-out in milliseconds.</span></span></param>
        <summary><span data-ttu-id="e61cd-308">Zablokuj blokadę w składniku zapisywania uaktualnień, za pomocą <see langword="Int32" /> wartość limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-308">Upgrades a reader lock to the writer lock, using an <see langword="Int32" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="e61cd-309">A <see cref="T:System.Threading.LockCookie" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="e61cd-309">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-310">Kiedy wątek wywołuje `UpgradeToWriterLock` blokada czytnik jest zwalniana, niezależnie od tego, liczbę blokad i wątku przechodzi na koniec kolejki moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-310">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="e61cd-311">W związku z tym inne wątki napisać do zasobu przed wątku, który zażądał uaktualnienia otrzymuje moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-311">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e61cd-312">Limit czasu nie wyjątku do wątku, który wywołał <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody można ponownie pobrać blokadę odczytu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-312">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="e61cd-313">W przypadku nie ma innych wątków oczekiwanie na blokadę zapisu dzieje się to natychmiast.</span><span class="sxs-lookup"><span data-stu-id="e61cd-313">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="e61cd-314">Jednak jeśli inny wątek jest w kolejce na blokadę zapisu, wątek, nazywana <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody nie można ponownie pobrać blokadę odczytu, aż wszystkie bieżące czytelnicy zostały wydane ich blokad, a jeden wątek stały i ogólnie moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-314">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="e61cd-315">Ta zasada obowiązuje nawet wtedy, gdy wątek, który zażądał moduł zapisujący blokady żądane go po wywołaniu bieżącego wątku <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e61cd-315">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="e61cd-316">Aby przywrócić stan blokady, należy wywołać <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> przy użyciu <xref:System.Threading.LockCookie> zwrócone przez `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="e61cd-316">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="e61cd-317">Nie używaj tego `LockCookie` z <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-317">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="e61cd-318">Jeśli wątek ma nie blokadę odczytu, nie używaj `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="e61cd-318">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="e61cd-319">Zamiast nich należy używać słów kluczowych <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-319">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="e61cd-320">Dla wartości prawidłowy limit czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-320">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-321">Poniższy przykład kodu pokazuje sposób żądania blokadę, Uaktualnij blokadę odczytu na blokadę zapisu i ponownie starszą wersję blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-321">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="e61cd-322">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-322">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="e61cd-323"><paramref name="millisecondsTimeout" /> upłynie, zanim otrzymuje żądanie blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-323"><paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-324">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-324">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-325">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-325">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (timeout As TimeSpan) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.UpgradeToWriterLock : TimeSpan -&gt; System.Threading.LockCookie" Usage="readerWriterLock.UpgradeToWriterLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e61cd-326"><see langword="TimeSpan" /> Określanie przed upłynięciem limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-326">The <see langword="TimeSpan" /> specifying the time-out period.</span></span></param>
        <summary><span data-ttu-id="e61cd-327">Zablokuj blokadę w składniku zapisywania uaktualnień, za pomocą <see langword="TimeSpan" /> wartość limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-327">Upgrades a reader lock to the writer lock, using a <see langword="TimeSpan" /> value for the time-out.</span></span></summary>
        <returns><span data-ttu-id="e61cd-328">A <see cref="T:System.Threading.LockCookie" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="e61cd-328">A <see cref="T:System.Threading.LockCookie" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-329">Kiedy wątek wywołuje `UpgradeToWriterLock` blokada czytnik jest zwalniana, niezależnie od tego, liczbę blokad i wątku przechodzi na koniec kolejki moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-329">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="e61cd-330">W związku z tym inne wątki napisać do zasobu przed wątku, który zażądał uaktualnienia otrzymuje moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-330">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e61cd-331">Limit czasu nie wyjątku do wątku, który wywołał <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody można ponownie pobrać blokadę odczytu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-331">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="e61cd-332">W przypadku nie ma innych wątków oczekiwanie na blokadę zapisu dzieje się to natychmiast.</span><span class="sxs-lookup"><span data-stu-id="e61cd-332">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="e61cd-333">Jednak jeśli inny wątek jest w kolejce na blokadę zapisu, wątek, nazywana <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody nie można ponownie pobrać blokadę odczytu, aż wszystkie bieżące czytelnicy zostały wydane ich blokad, a jeden wątek stały i ogólnie moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-333">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="e61cd-334">Ta zasada obowiązuje nawet wtedy, gdy wątek, który zażądał moduł zapisujący blokady żądane go po wywołaniu bieżącego wątku <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e61cd-334">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="e61cd-335">Aby przywrócić stan blokady, należy wywołać <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> przy użyciu <xref:System.Threading.LockCookie> zwrócone przez `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="e61cd-335">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="e61cd-336">Nie używaj tego `LockCookie` z <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-336">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="e61cd-337">Jeśli wątek ma nie blokadę odczytu, nie używaj `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="e61cd-337">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="e61cd-338">Zamiast nich należy używać słów kluczowych <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-338">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="e61cd-339">Dla wartości prawidłowy limit czasu, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="e61cd-339">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="e61cd-340"><paramref name="timeout" /> upłynie, zanim otrzymuje żądanie blokady.</span><span class="sxs-lookup"><span data-stu-id="e61cd-340"><paramref name="timeout" /> expires before the lock request is granted.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e61cd-341"><paramref name="timeout" /> Określa wartość ujemną, inne niż-1 MS.</span><span class="sxs-lookup"><span data-stu-id="e61cd-341"><paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-342">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-342">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-343">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-343">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriterSeqNum">
      <MemberSignature Language="C#" Value="public int WriterSeqNum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriterSeqNum" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriterSeqNum As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriterSeqNum { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WriterSeqNum : int" Usage="System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e61cd-344">Pobiera bieżący numer sekwencyjny.</span><span class="sxs-lookup"><span data-stu-id="e61cd-344">Gets the current sequence number.</span></span></summary>
        <value><span data-ttu-id="e61cd-345">Z bieżącym numerem sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e61cd-345">The current sequence number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e61cd-346">Sekwencja liczba zwiększa się w każdym przypadku, gdy wątek uzyskuje blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-346">The sequence number increases whenever a thread acquires the writer lock.</span></span> <span data-ttu-id="e61cd-347">Można zapisać numer sekwencyjny i przekazać go do <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> w późniejszym czasie, jeśli chcesz ustalić, czy inne wątki uzyskać blokadę zapisu w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="e61cd-347">You can save the sequence number and pass it to <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</span></span>  
  
 <span data-ttu-id="e61cd-348">Możesz użyć `WriterSeqNum` wydajność aplikacji.</span><span class="sxs-lookup"><span data-stu-id="e61cd-348">You can use `WriterSeqNum` to improve application performance.</span></span> <span data-ttu-id="e61cd-349">Na przykład wątek może być w pamięci podręcznej informacje, które uzyska podczas utrzymywania blokadę.</span><span class="sxs-lookup"><span data-stu-id="e61cd-349">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="e61cd-350">Po zwalniania i później reacquiring blokady, Wątek można określić, czy inne wątki napisano do zasobu przez wywołanie metody `AnyWritersSince`; Jeśli nie, można użyć buforowanych informacji.</span><span class="sxs-lookup"><span data-stu-id="e61cd-350">After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling `AnyWritersSince`; if not, the cached information can be used.</span></span> <span data-ttu-id="e61cd-351">Ta technika jest przydatna, gdy podczas odczytywania informacji o chronionych przez blokadę jest kosztowne. Aby na przykład uruchomić zapytanie bazy danych.</span><span class="sxs-lookup"><span data-stu-id="e61cd-351">This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="e61cd-352">Obiekt wywołujący musi zawierający blokadę lub blokadę zapisu w kolejności dla numeru sekwencji były przydatne.</span><span class="sxs-lookup"><span data-stu-id="e61cd-352">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e61cd-353">Poniższy przykład kodu pokazuje sposób użycia <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> właściwości i <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> metodę pozwala ustalić, czy inny wątek zgromadzonych blokadę zapisu w chronionych zasobów od bieżącego wątku ostatniego stanu blokady zapisu.</span><span class="sxs-lookup"><span data-stu-id="e61cd-353">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property and the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="e61cd-354">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="e61cd-354">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="e61cd-355">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="e61cd-355">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/reader-writer-locks.md"><span data-ttu-id="e61cd-356">ReaderWriterLock</span><span class="sxs-lookup"><span data-stu-id="e61cd-356">ReaderWriterLock</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>