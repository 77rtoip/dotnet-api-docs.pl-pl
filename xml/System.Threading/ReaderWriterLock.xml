<Type Name="ReaderWriterLock" FullName="System.Threading.ReaderWriterLock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc1a0c88765040869d8ad919aeb575e304c71bde" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReaderWriterLock extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLock" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReaderWriterLock&#xA;Inherits CriticalFinalizerObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLock sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="941f1-101">Definiuje blokadę obsługuje autorzy jednego i wielu czytników.</span>
      <span class="sxs-lookup">
        <span data-stu-id="941f1-101">Defines a lock that supports single writers and multiple readers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="941f1-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Ma dwa reader_writer_lock, <xref:System.Threading.ReaderWriterLockSlim> i <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="941f1-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] has two reader-writer locks, <xref:System.Threading.ReaderWriterLockSlim> and <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="941f1-103"><xref:System.Threading.ReaderWriterLockSlim> jest zalecana dla wszystkich nowych wdrożeń.</span><span class="sxs-lookup"><span data-stu-id="941f1-103"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span> <span data-ttu-id="941f1-104"><xref:System.Threading.ReaderWriterLockSlim> przypomina <xref:System.Threading.ReaderWriterLock>, ale jest prostszy zasady rekursji oraz uaktualniania i zmiany na starszą wersję stan blokady.</span><span class="sxs-lookup"><span data-stu-id="941f1-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="941f1-105"><xref:System.Threading.ReaderWriterLockSlim> pozwala uniknąć wielu przypadkach potencjalnych zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="941f1-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="941f1-106">Ponadto wydajność <xref:System.Threading.ReaderWriterLockSlim> jest znacznie lepszą niż <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="941f1-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 <span data-ttu-id="941f1-107"><xref:System.Threading.ReaderWriterLock> Służy do synchronizowania dostęp do zasobu.</span><span class="sxs-lookup"><span data-stu-id="941f1-107"><xref:System.Threading.ReaderWriterLock> is used to synchronize access to a resource.</span></span> <span data-ttu-id="941f1-108">W dowolnym momencie umożliwia równoczesne dostęp do odczytu dla wielu wątków lub dostęp do zapisu dla jednego wątku.</span><span class="sxs-lookup"><span data-stu-id="941f1-108">At any given time, it allows either concurrent read access for multiple threads, or write access for a single thread.</span></span> <span data-ttu-id="941f1-109">W sytuacji, gdy zasób jest rzadko, zmieniane `ReaderWriterLock` zapewnia większą przepustowość niż proste blokady jednego w czasie, takie jak <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="941f1-109">In a situation where a resource is changed infrequently, a `ReaderWriterLock` provides better throughput than a simple one-at-a-time lock, such as <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="941f1-110">`ReaderWriterLock` działa najlepiej, których uzyskuje dostęp do większości odczytów, gdy zapisy są rzadko i krótki czas trwania.</span><span class="sxs-lookup"><span data-stu-id="941f1-110">`ReaderWriterLock` works best where most accesses are reads, while writes are infrequent and of short duration.</span></span> <span data-ttu-id="941f1-111">Wielu czytników alternatywne z pojedynczego zapisywania, dzięki czemu czytników ani zapisywania są blokowane przez dłuższy czas.</span><span class="sxs-lookup"><span data-stu-id="941f1-111">Multiple readers alternate with single writers, so that neither readers nor writers are blocked for long periods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="941f1-112">Akcji blokad czytnika lub moduł zapisujący blokady przez dłuższy czas będzie blokować go, inne wątki.</span><span class="sxs-lookup"><span data-stu-id="941f1-112">Holding reader locks or writer locks for long periods will starve other threads.</span></span> <span data-ttu-id="941f1-113">Aby uzyskać najlepszą wydajność należy wziąć pod uwagę restrukturyzacji aplikacji w taki sposób, aby zminimalizować czas trwania operacji zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-113">For best performance, consider restructuring your application to minimize the duration of writes.</span></span>  
  
 <span data-ttu-id="941f1-114">Wątek może zawierać czytnik blokady lub blokadę zapisu, ale nie oba jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="941f1-114">A thread can hold a reader lock or a writer lock, but not both at the same time.</span></span> <span data-ttu-id="941f1-115">Zamiast zwalnianie blokada czytnika. Aby uzyskać blokadę zapisu, można użyć <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> i <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-115">Instead of releasing a reader lock in order to acquire the writer lock, you can use <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> and <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>.</span></span>  
  
 <span data-ttu-id="941f1-116">Żądania lock cykliczne Zwiększ liczbę blokad na blokadę.</span><span class="sxs-lookup"><span data-stu-id="941f1-116">Recursive lock requests increase the lock count on a lock.</span></span>  
  
 <span data-ttu-id="941f1-117">Czytniki i zapisywania są umieszczane w kolejce oddzielnie.</span><span class="sxs-lookup"><span data-stu-id="941f1-117">Readers and writers are queued separately.</span></span> <span data-ttu-id="941f1-118">Gdy wątek zwalnia blokadę zapisu, wszystkich wątków oczekujących w kolejce czytnika w tej chwili otrzymują blokad czytnika; gdy wszystkie te blokady czytnika zostały zwolnione, dalej oczekiwania wątku w moduł zapisujący kolejki, jeśli istnieje, uzyskuje blokadę zapisu i tak dalej.</span><span class="sxs-lookup"><span data-stu-id="941f1-118">When a thread releases the writer lock, all threads waiting in the reader queue at that instant are granted reader locks; when all of those reader locks have been released, the next thread waiting in the writer queue, if any, is granted the writer lock, and so on.</span></span> <span data-ttu-id="941f1-119">Innymi słowy `ReaderWriterLock` przełącza między kolekcją czytelników i jednego składnika zapisywania.</span><span class="sxs-lookup"><span data-stu-id="941f1-119">In other words, `ReaderWriterLock` alternates between a collection of readers, and one writer.</span></span>  
  
 <span data-ttu-id="941f1-120">Podczas wątku w kolejce modułu zapisującego oczekuje na zwolnienie blokad aktywny czytnik, żądanie nowego czytnika blokad wątków gromadzone w kolejce czytnika.</span><span class="sxs-lookup"><span data-stu-id="941f1-120">While a thread in the writer queue is waiting for active reader locks to be released, threads requesting new reader locks accumulate in the reader queue.</span></span> <span data-ttu-id="941f1-121">Ich żądania nie są przyznawane, mimo że można mają współbieżny dostęp z istniejących posiadaczy blokada czytnika; Pozwala to chronić autorów przed nieograniczonego zablokowaniu przez czytelników.</span><span class="sxs-lookup"><span data-stu-id="941f1-121">Their requests are not granted, even though they could share concurrent access with existing reader-lock holders; this helps protect writers against indefinite blockage by readers.</span></span>  
  
 <span data-ttu-id="941f1-122">Uzyskiwanie blokad na większości metod `ReaderWriterLock` zaakceptować wartości limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="941f1-122">Most methods for acquiring locks on a `ReaderWriterLock` accept time-out values.</span></span> <span data-ttu-id="941f1-123">Użyj limitów czasu, aby uniknąć zakleszczenie w aplikacji.</span><span class="sxs-lookup"><span data-stu-id="941f1-123">Use time-outs to avoid deadlocks in your application.</span></span> <span data-ttu-id="941f1-124">Na przykład wątek może uzyskać blokadę zapisu na jeden zasób, a następnie żądają blokadę na drugi zasobów; Tymczasem inny wątek może uzyskać blokadę zapisu na drugi oraz blokadę pierwszego żądania.</span><span class="sxs-lookup"><span data-stu-id="941f1-124">For example, a thread might acquire the writer lock on one resource and then request a reader lock on a second resource; in the meantime, another thread might acquire the writer lock on the second resource, and request a reader lock on the first.</span></span> <span data-ttu-id="941f1-125">Jeśli używane są limity czasu, zakleszczenie wątków.</span><span class="sxs-lookup"><span data-stu-id="941f1-125">Unless time-outs are used, the threads deadlock.</span></span>  
  
 <span data-ttu-id="941f1-126">Jeśli interwał limitu czasu wygaśnie, a nie udzielono żądanie blokady, metoda zwraca kontroli w wątku wywołującym przez zgłaszanie <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="941f1-126">If the time-out interval expires and the lock request has not been granted, the method returns control to the calling thread by throwing an <xref:System.ApplicationException>.</span></span> <span data-ttu-id="941f1-127">Wątek można przechwycić tego wyjątku i ustalić, jakie działania należy podjąć.</span><span class="sxs-lookup"><span data-stu-id="941f1-127">A thread can catch this exception and determine what action to take next.</span></span>  
  
 <span data-ttu-id="941f1-128">Limity czasu są wyrażony w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="941f1-128">Time-outs are expressed in milliseconds.</span></span> <span data-ttu-id="941f1-129">Jeśli używasz <xref:System.TimeSpan?displayProperty=nameWithType> Aby określić limit czasu, wartość używana jest całkowita liczba pełnych milisekund reprezentowany przez <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="941f1-129">If you use a <xref:System.TimeSpan?displayProperty=nameWithType> to specify the time-out, the value used is the total number of whole milliseconds represented by the <xref:System.TimeSpan>.</span></span> <span data-ttu-id="941f1-130">W poniższej tabeli przedstawiono wartości prawidłowy limit czasu w milisekundach.</span><span class="sxs-lookup"><span data-stu-id="941f1-130">The following table shows the valid time-out values in milliseconds.</span></span>  
  
|<span data-ttu-id="941f1-131">Wartość</span><span class="sxs-lookup"><span data-stu-id="941f1-131">Value</span></span>|<span data-ttu-id="941f1-132">Opis</span><span class="sxs-lookup"><span data-stu-id="941f1-132">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="941f1-133">-1</span><span class="sxs-lookup"><span data-stu-id="941f1-133">-1</span></span>|<span data-ttu-id="941f1-134">Wątek oczekuje, aż uzyskać blokady, niezależnie od tego, jak długo.</span><span class="sxs-lookup"><span data-stu-id="941f1-134">The thread waits until the lock is acquired, regardless of how long it takes.</span></span> <span data-ttu-id="941f1-135">Dla metod, które określić limity czasu liczba całkowita, stała <xref:System.Threading.Timeout.Infinite> mogą być używane.</span><span class="sxs-lookup"><span data-stu-id="941f1-135">For methods that specify integer time-outs, the constant <xref:System.Threading.Timeout.Infinite> can be used.</span></span>|  
|<span data-ttu-id="941f1-136">0</span><span class="sxs-lookup"><span data-stu-id="941f1-136">0</span></span>|<span data-ttu-id="941f1-137">Wątek nie oczekuje na przejęcie blokady.</span><span class="sxs-lookup"><span data-stu-id="941f1-137">The thread does not wait to acquire the lock.</span></span> <span data-ttu-id="941f1-138">Jeśli nie można uzyskać blokady natychmiast, metoda zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="941f1-138">If the lock cannot be acquired immediately, the method returns.</span></span>|  
|<span data-ttu-id="941f1-139">>0</span><span class="sxs-lookup"><span data-stu-id="941f1-139">>0</span></span>|<span data-ttu-id="941f1-140">Wyrażony w milisekundach czas oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="941f1-140">The number of milliseconds to wait.</span></span>|  
  
 <span data-ttu-id="941f1-141">Z wyjątkiem -1 wartości limitu czasu ujemne są niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="941f1-141">With the exception of -1, negative time-out values are not allowed.</span></span> <span data-ttu-id="941f1-142">Jeśli określisz ujemną liczbą całkowitą od-1, zamiast niego jest używana wartość limitu czasu o wartości zero.</span><span class="sxs-lookup"><span data-stu-id="941f1-142">If you specify a negative integer other than -1, a time-out value of zero is used instead.</span></span> <span data-ttu-id="941f1-143">(To znaczy, metoda zwraca bez oczekiwania, jeśli nie można natychmiast uzyskać blokady.) Jeśli określisz <xref:System.TimeSpan> reprezentujący ujemnej liczby milisekund od-1, <xref:System.ArgumentOutOfRangeException> jest generowany.</span><span class="sxs-lookup"><span data-stu-id="941f1-143">(That is, the method returns without waiting, if the lock cannot be acquired immediately.) If you specify a <xref:System.TimeSpan> that represents a negative number of milliseconds other than -1, <xref:System.ArgumentOutOfRangeException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-144">W poniższym przykładzie pokazano sposób użycia <xref:System.Threading.ReaderWriterLock> ochrony udostępnianego zasobu, wartość całkowitą o nazwie `resource`, która jest jednocześnie Odczyt i zapis wyłącznie przez wiele wątków.</span><span class="sxs-lookup"><span data-stu-id="941f1-144">The following example demonstrates how to use a <xref:System.Threading.ReaderWriterLock> to protect a shared resource, an integer value named `resource`, that is read concurrently and written exclusively by multiple threads.</span></span> <span data-ttu-id="941f1-145">Należy pamiętać, że <xref:System.Threading.ReaderWriterLock> jest zadeklarowane na poziomie klasy, aby były one widoczne dla wszystkich wątków.</span><span class="sxs-lookup"><span data-stu-id="941f1-145">Note that the <xref:System.Threading.ReaderWriterLock> is declared at the class level so that it is visible to all threads.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="941f1-146">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="941f1-146">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLock();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="941f1-147">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ReaderWriterLock" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-147">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLock" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="941f1-148">W poniższym przykładzie pokazano, jak utworzyć nowe wystąpienie klasy <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-148">The following code example demonstrates how to create a new instance of the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="941f1-149">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-149">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireReaderLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="941f1-150">Uzyskuje blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-150">Acquires a reader lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="941f1-151">Limit czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-151">The time-out in milliseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="941f1-152">Uzyskuje czytnik zablokować, przy użyciu <see cref="T:System.Int32" /> wartość limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-152">Acquires a reader lock, using an <see cref="T:System.Int32" /> value for the time-out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-153"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blokuje, jeśli moduł zapisujący blokady ma inny wątek lub co najmniej jeden wątek oczekuje na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-153"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="941f1-154">Jeśli bieżący wątek już moduł zapisujący blokady, blokada nie czytnik jest uzyskiwana.</span><span class="sxs-lookup"><span data-stu-id="941f1-154">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="941f1-155">Zamiast tego jest zwiększany liczbę blokad na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-155">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="941f1-156">Zapobiega to blokowania na jego własnej blokadę wątku.</span><span class="sxs-lookup"><span data-stu-id="941f1-156">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="941f1-157">Wynik jest dokładnie taka sama, co wywołanie <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>oraz dodatkowe wywołanie <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> jest wymagana podczas zwalniania blokady modułu zapisującego.</span><span class="sxs-lookup"><span data-stu-id="941f1-157">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="941f1-158">`AcquireReaderLock` obsługuje żądania blokada czytnika cyklicznego.</span><span class="sxs-lookup"><span data-stu-id="941f1-158">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="941f1-159">Oznacza to wątku mogą wywoływać AcquireReaderLock wielokrotnie, która zwiększa liczbę blokad zawsze.</span><span class="sxs-lookup"><span data-stu-id="941f1-159">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="941f1-160">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> raz przy każdym wywołaniu `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="941f1-160">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="941f1-161">Alternatywnie możesz wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Aby zmniejszyć liczbę blokad na zero, natychmiast.</span><span class="sxs-lookup"><span data-stu-id="941f1-161">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="941f1-162">Cykliczne blokady są zawsze przydzielić natychmiast, bez wprowadzania wątku żądania w kolejce czytnika.</span><span class="sxs-lookup"><span data-stu-id="941f1-162">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="941f1-163">Umożliwia cykliczne blokady z ostrożnością, unikania blokowania blokadę zapisu żądania przez dłuższy czas.</span><span class="sxs-lookup"><span data-stu-id="941f1-163">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="941f1-164">Dla limitu czasu prawidłowe wartości, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="941f1-164">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-165">Poniższy przykład kodu pokazuje, jak uzyskać i zwolnić blokadę i sposób obsługi wyjątek, gdy upłynie limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="941f1-165">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="941f1-166">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-166">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="941f1-167">
            <paramref name="millisecondsTimeout" /> wygasa przed udzieleniem żądanie blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-167">
              <paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireReaderLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireReaderLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="941f1-168">A <see langword="TimeSpan" /> określający okres limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-168">A <see langword="TimeSpan" /> specifying the time-out period.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="941f1-169">Uzyskuje czytnik zablokować, przy użyciu <see cref="T:System.TimeSpan" /> wartość limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-169">Acquires a reader lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-170"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blokuje, jeśli moduł zapisujący blokady ma inny wątek lub co najmniej jeden wątek oczekuje na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-170"><xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> blocks if a different thread has the writer lock, or if at least one thread is waiting for the writer lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="941f1-171">Jeśli bieżący wątek już moduł zapisujący blokady, blokada nie czytnik jest uzyskiwana.</span><span class="sxs-lookup"><span data-stu-id="941f1-171">If the current thread already has the writer lock, no reader lock is acquired.</span></span> <span data-ttu-id="941f1-172">Zamiast tego jest zwiększany liczbę blokad na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-172">Instead, the lock count on the writer lock is incremented.</span></span> <span data-ttu-id="941f1-173">Zapobiega to blokowania na jego własnej blokadę wątku.</span><span class="sxs-lookup"><span data-stu-id="941f1-173">This prevents a thread from blocking on its own writer lock.</span></span> <span data-ttu-id="941f1-174">Wynik jest dokładnie taka sama, co wywołanie <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>oraz dodatkowe wywołanie <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> jest wymagana podczas zwalniania blokady modułu zapisującego.</span><span class="sxs-lookup"><span data-stu-id="941f1-174">The result is exactly the same as calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, and an additional call to <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> is required when releasing the writer lock.</span></span>  
  
 <span data-ttu-id="941f1-175">`AcquireReaderLock` obsługuje żądania blokada czytnika cyklicznego.</span><span class="sxs-lookup"><span data-stu-id="941f1-175">`AcquireReaderLock` supports recursive reader-lock requests.</span></span> <span data-ttu-id="941f1-176">Oznacza to wątku mogą wywoływać AcquireReaderLock wielokrotnie, która zwiększa liczbę blokad zawsze.</span><span class="sxs-lookup"><span data-stu-id="941f1-176">That is, a thread can call AcquireReaderLock multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="941f1-177">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> raz przy każdym wywołaniu `AcquireReaderLock`.</span><span class="sxs-lookup"><span data-stu-id="941f1-177">You must call <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> once for each time you call `AcquireReaderLock`.</span></span> <span data-ttu-id="941f1-178">Alternatywnie możesz wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Aby zmniejszyć liczbę blokad na zero, natychmiast.</span><span class="sxs-lookup"><span data-stu-id="941f1-178">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="941f1-179">Cykliczne blokady są zawsze przydzielić natychmiast, bez wprowadzania wątku żądania w kolejce czytnika.</span><span class="sxs-lookup"><span data-stu-id="941f1-179">Recursive lock requests are always granted immediately, without placing the requesting thread in the reader queue.</span></span> <span data-ttu-id="941f1-180">Umożliwia cykliczne blokady z ostrożnością, unikania blokowania blokadę zapisu żądania przez dłuższy czas.</span><span class="sxs-lookup"><span data-stu-id="941f1-180">Use recursive locks with caution, to avoid blocking writer-lock requests for long periods.</span></span>  
  
 <span data-ttu-id="941f1-181">Dla limitu czasu prawidłowe wartości, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="941f1-181">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="941f1-182">
            <paramref name="timeout" /> wygasa przed udzieleniem żądanie blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-182">
              <paramref name="timeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="941f1-183">
            <paramref name="timeout" /> Określa wartość ujemną, innego niż-1 milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-183">
              <paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AcquireWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="941f1-184">Uzyskuje blokadę zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-184">Acquires the writer lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="941f1-185">Limit czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-185">The time-out in milliseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="941f1-186">Pobiera moduł zapisujący zablokować, przy użyciu <see cref="T:System.Int32" /> wartość limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-186">Acquires the writer lock, using an <see cref="T:System.Int32" /> value for the time-out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-187">Ta metoda blokuje, jeśli ma inny wątek blokada czytnika lub moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="941f1-187">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="941f1-188">Opis sposobu blokadę zapisu przełącza wyposażonych w kilka blokad czytnika jednoczesnych, zobacz <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-188">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="941f1-189">Wątek, który ma już blokadę może uzyskać blokadę zapisu w jeden z dwóch sposobów: przez zwolnienie blokady czytnika przed wywołaniem <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, lub przez wywołanie metody <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-189">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="941f1-190">Jeśli wątek wywołuje `AcquireWriterLock` gdy nadal jest blokadę, blokuje na jego własnej blokada czytnika; Jeśli nieskończonego limitu czasu jest określony, będzie zakleszczenie wątku.</span><span class="sxs-lookup"><span data-stu-id="941f1-190">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="941f1-191">Aby uniknąć takich zakleszczenia, użyj <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> ustalenie, czy bieżący wątek jest już blokadę.</span><span class="sxs-lookup"><span data-stu-id="941f1-191">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="941f1-192">`AcquireWriterLock` obsługuje żądania blokadę zapisu cyklicznego.</span><span class="sxs-lookup"><span data-stu-id="941f1-192">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="941f1-193">Oznacza to, że wątek można wywołać `AcquireWriterLock` wielokrotnie, która zwiększa liczbę blokad zawsze.</span><span class="sxs-lookup"><span data-stu-id="941f1-193">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="941f1-194">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> raz przy każdym wywołaniu `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="941f1-194">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="941f1-195">Alternatywnie możesz wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Aby zmniejszyć liczbę blokad na zero, natychmiast.</span><span class="sxs-lookup"><span data-stu-id="941f1-195">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="941f1-196">Cykliczne blokady są zawsze przydzielić natychmiast, bez wprowadzania wątku żądania w kolejce modułu zapisującego.</span><span class="sxs-lookup"><span data-stu-id="941f1-196">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="941f1-197">Dla limitu czasu prawidłowe wartości, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="941f1-197">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-198">Poniższy przykład kodu pokazuje, jak uzyskać i zwolnić blokadę i sposób obsługi wyjątek, gdy upłynie limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="941f1-198">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="941f1-199">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-199">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="941f1-200">
            <paramref name="timeout" /> wygasa przed udzieleniem żądanie blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-200">
              <paramref name="timeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcquireWriterLock (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcquireWriterLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="941f1-201">
            <see langword="TimeSpan" /> Określający okres limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-201">The <see langword="TimeSpan" /> specifying the time-out period.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="941f1-202">Pobiera moduł zapisujący zablokować, przy użyciu <see cref="T:System.TimeSpan" /> wartość limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-202">Acquires the writer lock, using a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-203">Ta metoda blokuje, jeśli ma inny wątek blokada czytnika lub moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="941f1-203">This method blocks if another thread has a reader lock or writer lock.</span></span> <span data-ttu-id="941f1-204">Opis sposobu blokadę zapisu przełącza wyposażonych w kilka blokad czytnika jednoczesnych, zobacz <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-204">For a description of the way the writer lock alternates with multiple concurrent reader locks, see the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 <span data-ttu-id="941f1-205">Wątek, który ma już blokadę może uzyskać blokadę zapisu w jeden z dwóch sposobów: przez zwolnienie blokady czytnika przed wywołaniem <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, lub przez wywołanie metody <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-205">A thread that already has a reader lock can acquire the writer lock in one of two ways: by releasing the reader lock before calling <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, or by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="941f1-206">Jeśli wątek wywołuje `AcquireWriterLock` gdy nadal jest blokadę, blokuje na jego własnej blokada czytnika; Jeśli nieskończonego limitu czasu jest określony, będzie zakleszczenie wątku.</span><span class="sxs-lookup"><span data-stu-id="941f1-206">If a thread calls `AcquireWriterLock` while it still has a reader lock, it will block on its own reader lock; if an infinite time-out is specified, the thread will deadlock.</span></span> <span data-ttu-id="941f1-207">Aby uniknąć takich zakleszczenia, użyj <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> ustalenie, czy bieżący wątek jest już blokadę.</span><span class="sxs-lookup"><span data-stu-id="941f1-207">To avoid such deadlocks, use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> to determine whether the current thread already has a reader lock.</span></span>  
  
 <span data-ttu-id="941f1-208">`AcquireWriterLock` obsługuje żądania blokadę zapisu cyklicznego.</span><span class="sxs-lookup"><span data-stu-id="941f1-208">`AcquireWriterLock` supports recursive writer-lock requests.</span></span> <span data-ttu-id="941f1-209">Oznacza to, że wątek można wywołać `AcquireWriterLock` wielokrotnie, która zwiększa liczbę blokad zawsze.</span><span class="sxs-lookup"><span data-stu-id="941f1-209">That is, a thread can call `AcquireWriterLock` multiple times, which increments the lock count each time.</span></span> <span data-ttu-id="941f1-210">Należy wywołać <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> raz przy każdym wywołaniu `AcquireWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="941f1-210">You must call <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> once for each time you call `AcquireWriterLock`.</span></span> <span data-ttu-id="941f1-211">Alternatywnie możesz wywołać <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> Aby zmniejszyć liczbę blokad na zero, natychmiast.</span><span class="sxs-lookup"><span data-stu-id="941f1-211">Alternatively, you can call <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> to reduce the lock count to zero immediately.</span></span>  
  
 <span data-ttu-id="941f1-212">Cykliczne blokady są zawsze przydzielić natychmiast, bez wprowadzania wątku żądania w kolejce modułu zapisującego.</span><span class="sxs-lookup"><span data-stu-id="941f1-212">Recursive lock requests are always granted immediately, without placing the requesting thread in the writer queue.</span></span>  
  
 <span data-ttu-id="941f1-213">Dla limitu czasu prawidłowe wartości, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="941f1-213">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="941f1-214">
            <paramref name="timeout" /> wygasa przed udzieleniem żądanie blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-214">
              <paramref name="timeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="941f1-215">
            <paramref name="timeout" /> Określa wartość ujemną, innego niż-1 milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-215">
              <paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AnyWritersSince">
      <MemberSignature Language="C#" Value="public bool AnyWritersSince (int seqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AnyWritersSince(int32 seqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AnyWritersSince (seqNum As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AnyWritersSince(int seqNum);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seqNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seqNum">
          <span data-ttu-id="941f1-216">Numer sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-216">The sequence number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="941f1-217">Wskazuje, czy moduł zapisujący blokady zostało przyznane którymkolwiek wątku ponieważ uzyskano numer sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-217">Indicates whether the writer lock has been granted to any thread since the sequence number was obtained.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="941f1-218">
            <see langword="true" /> Jeśli moduł zapisujący blokady zostało przyznane którymkolwiek wątku ponieważ uzyskano numer sekwencyjny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-218">
              <see langword="true" /> if the writer lock has been granted to any thread since the sequence number was obtained; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-219">Można użyć <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> i `AnyWritersSince` aby poprawić wydajność aplikacji.</span><span class="sxs-lookup"><span data-stu-id="941f1-219">You can use <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> and `AnyWritersSince` to improve application performance.</span></span> <span data-ttu-id="941f1-220">Na przykład wątku może buforować informacje, które uzyskuje podczas utrzymywania blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="941f1-220">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="941f1-221">Po zwalniania i później reacquiring blokady, można użyć wątku `AnyWritersSince` ustalenie, czy inne wątki zostały zapisane do zasobu w międzyczasie; w przeciwnym razie można buforowanych informacji.</span><span class="sxs-lookup"><span data-stu-id="941f1-221">After releasing and later reacquiring the lock, the thread can use `AnyWritersSince` to determine whether other threads have written to the resource in the interim; if not, the cached information can be used.</span></span> <span data-ttu-id="941f1-222">Ta technika jest przydatna, gdy odczytu informacji o chronionych przez blokady jest kosztowne. na przykład uruchomienie kwerendy bazy danych.</span><span class="sxs-lookup"><span data-stu-id="941f1-222">This technique is useful where reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="941f1-223">Obiekt wywołujący musi zawierający blokadę lub blokadę zapisu w kolejności numeru sekwencji powinna być użyteczna.</span><span class="sxs-lookup"><span data-stu-id="941f1-223">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-224">Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> — metoda i <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> właściwości w celu określenia, czy inny wątek uzyskać blokadę zapisu na komputerze chronionym zasobów od bieżącego wątku ostatniego stanu blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-224">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method and the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="941f1-225">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-225">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DowngradeFromWriterLock">
      <MemberSignature Language="C#" Value="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DowngradeFromWriterLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DowngradeFromWriterLock(System::Threading::LockCookie % lockCookie);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie">
          <span data-ttu-id="941f1-226">A <see cref="T:System.Threading.LockCookie" /> zwrócony przez <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-226">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="941f1-227">Przywraca stan blokady wątku sprzed <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> została wywołana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-227">Restores the lock status of the thread to what it was before <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> was called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-228"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> zwalnia blokadę zapisu, niezależnie od tego, liczbę blokad cykliczne i przywraca blokada czytnika, która obowiązywała przez wątek przed uaktualnieniem do wersji blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-228"><xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> releases the writer lock, regardless of the recursive lock count, and restores the reader lock that was held by the thread before upgrading to the writer lock.</span></span> <span data-ttu-id="941f1-229">Po przywróceniu liczbę blokad na blokada czytnika.</span><span class="sxs-lookup"><span data-stu-id="941f1-229">The lock count on the reader lock is restored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="941f1-230">`DowngradeFromWriterLock` akceptuje <xref:System.Threading.LockCookie> można uzyskać przez wywołanie <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-230">`DowngradeFromWriterLock` accepts a <xref:System.Threading.LockCookie> obtained by calling <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span> <span data-ttu-id="941f1-231">Nie używaj `LockCookie` zwrócony przez <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-231">Do not use a `LockCookie` returned by <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span>  
  
 <span data-ttu-id="941f1-232">Wątek nie blokuje przy przechodzeniu z blokadę zapisu nawet w przypadku innych wątków oczekuje na blokadę zapisu, ponieważ wszystkie żądania blokada czytnika są przyznawane po zwolnieniu blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-232">A thread does not block when downgrading from the writer lock, even if other threads are waiting for the writer lock, because all reader-lock requests are granted when the writer lock is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-233">Poniższy przykład kodu pokazuje, jak do żądania blokadę, Uaktualnij blokada czytnika do blokadę i obniżyć blokadę ponownie.</span><span class="sxs-lookup"><span data-stu-id="941f1-233">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="941f1-234">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-234">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="941f1-235">Wątek nie ma blokady modułu zapisującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-235">The thread does not have the writer lock.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="941f1-236">Adres <paramref name="lockCookie" /> jest wskaźnika o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-236">The address of <paramref name="lockCookie" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReaderWriterLock ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="941f1-237">Gwarantuje, że zasoby są zwalniane i inne operacje oczyszczania są wykonywane, gdy moduł garbage collector zwraca <see cref="T:System.Threading.ReaderWriterLock" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-237">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.ReaderWriterLock" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-238">Wywołania modułu zbierającego elementy bezużyteczne <xref:System.Threading.ReaderWriterLock.Finalize%2A> podczas bieżącej <xref:System.Threading.ReaderWriterLock> obiekt jest gotowy do przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="941f1-238">The garbage collector calls <xref:System.Threading.ReaderWriterLock.Finalize%2A> when the current <xref:System.Threading.ReaderWriterLock> object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReaderLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReaderLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReaderLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReaderLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReaderLockHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="941f1-239">Pobiera wartość wskazującą, czy bieżący wątek utrzymuje blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-239">Gets a value indicating whether the current thread holds a reader lock.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="941f1-240">
            <see langword="true" /> Jeśli bieżący wątek utrzymuje blokadę; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-240">
              <see langword="true" /> if the current thread holds a reader lock; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="941f1-241">Poniższy przykład kodu pokazuje sposób użycia `IsReaderLockHeld` w celu uniknięcia zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="941f1-241">The following code example demonstrates how to use `IsReaderLockHeld` to avoid deadlocks.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriterLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriterLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriterLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriterLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriterLockHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="941f1-242">Pobiera wartość wskazującą, czy bieżący wątek utrzymuje blokadę zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-242">Gets a value indicating whether the current thread holds the writer lock.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="941f1-243">
            <see langword="true" /> Jeśli bieżący wątek utrzymuje blokadę; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-243">
              <see langword="true" /> if the current thread holds the writer lock; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="941f1-244">Poniższy przykład kodu pokazuje, że podczas próby uzyskania blokady czytnika w wątku, który ma blokadę zapisu `ReaderWriterLock` nie powoduje przyznania blokada czytnika, ale zamiast tego zwiększa liczbę blokad na blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-244">The following code example demonstrates that when an attempt is made to acquire a reader lock on a thread that has a writer lock, `ReaderWriterLock` does not grant the reader lock but instead increments the lock count on the writer lock.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie ReleaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie ReleaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseLock" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseLock () As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie ReleaseLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="941f1-245">Zwalnia blokadę, niezależnie od tego, ile razy wątek uzyskać blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-245">Releases the lock, regardless of the number of times the thread acquired the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="941f1-246">A <see cref="T:System.Threading.LockCookie" /> wartość reprezentującą zwolnione blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-246">A <see cref="T:System.Threading.LockCookie" /> value representing the released lock.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-247"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> zwalnia blokada czytnika lub blokadę zapisu, niezależnie od tego, liczbę blokad cyklicznego.</span><span class="sxs-lookup"><span data-stu-id="941f1-247"><xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> releases the reader lock or writer lock, regardless of the recursive lock count.</span></span> <span data-ttu-id="941f1-248">Aby przywrócić stan blokady, w tym liczbę blokad przekazać <xref:System.Threading.LockCookie> do <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-248">To restore the state of the lock, including the lock count, pass the <xref:System.Threading.LockCookie> to <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-249">Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> metodę, aby zwolnić blokady, niezależnie od tego, ile razy uzyskano przez wątek i przywracania stanu blokady później.</span><span class="sxs-lookup"><span data-stu-id="941f1-249">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="941f1-250">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-250">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReaderLock">
      <MemberSignature Language="C#" Value="public void ReleaseReaderLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseReaderLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseReaderLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseReaderLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseReaderLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="941f1-251">Zmniejsza liczbę blokad.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-251">Decrements the lock count.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-252"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> Zmniejsza liczbę blokad.</span><span class="sxs-lookup"><span data-stu-id="941f1-252"><xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> decrements the lock count.</span></span> <span data-ttu-id="941f1-253">Jeśli licznik osiągnie wartość zero, blokada jest zwalniany.</span><span class="sxs-lookup"><span data-stu-id="941f1-253">When the count reaches zero, the lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="941f1-254">Jeśli moduł zapisujący blokady wątku, podczas wywoływania `ReleaseReaderLock` ma ten sam efekt co wywołanie <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-254">If a thread has the writer lock, calling `ReleaseReaderLock` has the same effect as calling <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>.</span></span> <span data-ttu-id="941f1-255">Jeśli wątku nie ma blokad, wywoływania `ReleaseReaderLock` zgłasza <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="941f1-255">If a thread has no locks, calling `ReleaseReaderLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-256">Poniższy przykład kodu pokazuje, jak uzyskać i zwolnić blokadę i sposób obsługi wyjątek, gdy upłynie limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="941f1-256">The following code example shows how to acquire and release a reader lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="941f1-257">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-257">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="941f1-258">Wątek nie ma żadnych blokad odczytywania lub zapisywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-258">The thread does not have any reader or writer locks.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseWriterLock">
      <MemberSignature Language="C#" Value="public void ReleaseWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseWriterLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseWriterLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseWriterLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseWriterLock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="941f1-259">Zmniejsza liczbę blokad na blokadę zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-259">Decrements the lock count on the writer lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-260"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> zmniejsza liczbę blokad modułu zapisującego.</span><span class="sxs-lookup"><span data-stu-id="941f1-260"><xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> decrements the writer lock count.</span></span> <span data-ttu-id="941f1-261">Jeśli licznik osiągnie wartość zero, moduł zapisujący blokady jest zwalniany.</span><span class="sxs-lookup"><span data-stu-id="941f1-261">When the count reaches zero, the writer lock is released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="941f1-262">Jeśli wątek blokadę lub nie blokad, wywoływania `ReleaseWriterLock` zgłasza <xref:System.ApplicationException>.</span><span class="sxs-lookup"><span data-stu-id="941f1-262">If a thread has a reader lock, or no locks, calling `ReleaseWriterLock` throws an <xref:System.ApplicationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-263">Poniższy przykład kodu pokazuje, jak uzyskać i zwolnić blokadę i sposób obsługi wyjątek, gdy upłynie limit czasu żądania.</span><span class="sxs-lookup"><span data-stu-id="941f1-263">The following code example shows how to acquire and release a writer lock, and how to handle the exception thrown when a request times out.</span></span>  
  
 <span data-ttu-id="941f1-264">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-264">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="941f1-265">Wątek nie ma blokady modułu zapisującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-265">The thread does not have the writer lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RestoreLock">
      <MemberSignature Language="C#" Value="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreLock(valuetype System.Threading.LockCookie&amp; lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RestoreLock (ByRef lockCookie As LockCookie)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RestoreLock(System::Threading::LockCookie % lockCookie);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie">
          <span data-ttu-id="941f1-266">A <see cref="T:System.Threading.LockCookie" /> zwrócony przez <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-266">A <see cref="T:System.Threading.LockCookie" /> returned by <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="941f1-267">Przywraca stan blokady wątku jest przed wywołaniem <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-267">Restores the lock status of the thread to what it was before calling <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-268">Stan przywrócone przez `RestoreLock` zawiera liczbę blokad cyklicznego.</span><span class="sxs-lookup"><span data-stu-id="941f1-268">The state restored by `RestoreLock` includes the recursive lock count.</span></span>  
  
 <span data-ttu-id="941f1-269">Bloki wątku, jeśli próbuje przywrócić blokadę po inny wątek ustawił blokadę zapisu lub spróbuje przywrócić blokadę zapisu, po inny wątek ustawił blokada czytnika lub moduł zapisujący blokady.</span><span class="sxs-lookup"><span data-stu-id="941f1-269">A thread blocks if it tries to restore a reader lock after another thread has acquired the writer lock, or if it tries to restore the writer lock after another thread has acquired a reader lock or writer lock.</span></span> <span data-ttu-id="941f1-270">Ponieważ `RestoreLock` nie akceptuje limit czasu, można należy zwrócić uwagę, aby uniknąć możliwe zakleszczenie.</span><span class="sxs-lookup"><span data-stu-id="941f1-270">Because `RestoreLock` does not accept a time-out, you should take care to avoid possible deadlocks.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="941f1-271">Przed wywołaniem `RestoreLock`, upewnij się, że zostały wydane wszystkich blokad ustawionych od czasu wywołania <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-271">Before calling `RestoreLock`, make sure you have released all locks acquired since the call to <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>.</span></span> <span data-ttu-id="941f1-272">Na przykład wątku zakleszczenie jeśli uzyskuje blokadę, a następnie podejmie próbę przywrócenia starszej blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-272">For example, a thread deadlocks if it acquires a reader lock, and then attempts to restore an earlier writer lock.</span></span> <span data-ttu-id="941f1-273">Użyj <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> i <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> do wykrywania takich dodatkowych blokad.</span><span class="sxs-lookup"><span data-stu-id="941f1-273">Use <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> and <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> to detect such additional locks.</span></span>  
  
 <span data-ttu-id="941f1-274">Nie używaj <xref:System.Threading.LockCookie> zwrócony z <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-274">Do not use a <xref:System.Threading.LockCookie> returned from <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-275">Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> metodę, aby zwolnić blokady, niezależnie od tego, ile razy uzyskano przez wątek i przywracania stanu blokady później.</span><span class="sxs-lookup"><span data-stu-id="941f1-275">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> method to release the lock, regardless of how many times it has been acquired by the thread, and how to restore the state of the lock later.</span></span>  
  
 <span data-ttu-id="941f1-276">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-276">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="941f1-277">Adres <paramref name="lockCookie" /> jest wskaźnika o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-277">The address of <paramref name="lockCookie" /> is a null pointer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpgradeToWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="941f1-278">Uaktualnia blokadę do blokadę zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-278">Upgrades a reader lock to the writer lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (millisecondsTimeout As Integer) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="941f1-279">Limit czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-279">The time-out in milliseconds.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="941f1-280">Blokowanie blokadę w składniku zapisywania uaktualnień, przy użyciu <see langword="Int32" /> wartość limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-280">Upgrades a reader lock to the writer lock, using an <see langword="Int32" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="941f1-281">A <see cref="T:System.Threading.LockCookie" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-281">A <see cref="T:System.Threading.LockCookie" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-282">Gdy wywołuje wątku `UpgradeToWriterLock` blokada czytnika został wydany, niezależnie od tego, liczbę blokad i wątku przechodzi do końca moduł zapisujący blokady do kolejki.</span><span class="sxs-lookup"><span data-stu-id="941f1-282">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="941f1-283">W związku z tym inne wątki może zapisać zasobów przed wątku, który zażądał uaktualnienia uzyskuje blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-283">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="941f1-284">Limit czasu nie wyjątku do wątku, który wywołuje <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody można ponownie uzyskać blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="941f1-284">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="941f1-285">Jeśli nie ma żadnych innych wątków oczekujących na blokadę zapisu, dzieje się natychmiast.</span><span class="sxs-lookup"><span data-stu-id="941f1-285">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="941f1-286">Jednak jeśli inny wątek jest w kolejce na blokadę zapisu, wątek który wywołuje <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody nie można ponownie uzyskać blokady czytnika, aż wszystkie bieżące czytników zostały wydane ich blokad, a jeden wątek stały i wydane blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-286">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="941f1-287">Dotyczy to nawet wtedy, gdy wątek, żądany moduł zapisujący blokady zażądał go po wywołaniu metody bieżącego wątku <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="941f1-287">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="941f1-288">Aby przywrócić stan blokady, należy wywołać <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> przy użyciu <xref:System.Threading.LockCookie> zwrócony przez `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="941f1-288">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="941f1-289">Nie używaj to `LockCookie` z <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-289">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="941f1-290">Jeśli wątek nie blokada czytnika, nie używaj `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="941f1-290">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="941f1-291">Zamiast nich należy używać słów kluczowych <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-291">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="941f1-292">Dla limitu czasu prawidłowe wartości, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="941f1-292">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-293">Poniższy przykład kodu pokazuje, jak do żądania blokadę, Uaktualnij blokada czytnika do blokadę i obniżyć blokadę ponownie.</span><span class="sxs-lookup"><span data-stu-id="941f1-293">The following code example shows how to request a reader lock, upgrade the reader lock to a writer lock, and downgrade to a reader lock again.</span></span>  
  
 <span data-ttu-id="941f1-294">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-294">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="941f1-295">
            <paramref name="millisecondsTimeout" /> wygasa przed udzieleniem żądanie blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-295">
              <paramref name="millisecondsTimeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpgradeToWriterLock (timeout As TimeSpan) As LockCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::LockCookie UpgradeToWriterLock(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="941f1-296">
            <see langword="TimeSpan" /> Określający okres limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-296">The <see langword="TimeSpan" /> specifying the time-out period.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="941f1-297">Blokowanie blokadę w składniku zapisywania uaktualnień, przy użyciu <see langword="TimeSpan" /> wartość limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-297">Upgrades a reader lock to the writer lock, using a <see langword="TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="941f1-298">A <see cref="T:System.Threading.LockCookie" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-298">A <see cref="T:System.Threading.LockCookie" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-299">Gdy wywołuje wątku `UpgradeToWriterLock` blokada czytnika został wydany, niezależnie od tego, liczbę blokad i wątku przechodzi do końca moduł zapisujący blokady do kolejki.</span><span class="sxs-lookup"><span data-stu-id="941f1-299">When a thread calls `UpgradeToWriterLock` the reader lock is released, regardless of the lock count, and the thread goes to the end of the queue for the writer lock.</span></span> <span data-ttu-id="941f1-300">W związku z tym inne wątki może zapisać zasobów przed wątku, który zażądał uaktualnienia uzyskuje blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-300">Thus, other threads might write to the resource before the thread that requested the upgrade is granted the writer lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="941f1-301">Limit czasu nie wyjątku do wątku, który wywołuje <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody można ponownie uzyskać blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="941f1-301">The time-out exception is not thrown until the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method can reacquire the reader lock.</span></span> <span data-ttu-id="941f1-302">Jeśli nie ma żadnych innych wątków oczekujących na blokadę zapisu, dzieje się natychmiast.</span><span class="sxs-lookup"><span data-stu-id="941f1-302">If there are no other threads waiting for the writer lock, this happens immediately.</span></span> <span data-ttu-id="941f1-303">Jednak jeśli inny wątek jest w kolejce na blokadę zapisu, wątek który wywołuje <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody nie można ponownie uzyskać blokady czytnika, aż wszystkie bieżące czytników zostały wydane ich blokad, a jeden wątek stały i wydane blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-303">However, if another thread is queued for the writer lock, the thread that called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method cannot reacquire the reader lock until all current readers have released their locks, and one thread has acquired and released the writer lock.</span></span> <span data-ttu-id="941f1-304">Dotyczy to nawet wtedy, gdy wątek, żądany moduł zapisujący blokady zażądał go po wywołaniu metody bieżącego wątku <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="941f1-304">This is true even if the other thread that requested the writer lock requested it after the current thread called the <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> method.</span></span>  
  
 <span data-ttu-id="941f1-305">Aby przywrócić stan blokady, należy wywołać <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> przy użyciu <xref:System.Threading.LockCookie> zwrócony przez `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="941f1-305">To restore the lock state, call <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> using the <xref:System.Threading.LockCookie> returned by `UpgradeToWriterLock`.</span></span> <span data-ttu-id="941f1-306">Nie używaj to `LockCookie` z <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-306">Do not use this `LockCookie` with <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>.</span></span>  
  
 <span data-ttu-id="941f1-307">Jeśli wątek nie blokada czytnika, nie używaj `UpgradeToWriterLock`.</span><span class="sxs-lookup"><span data-stu-id="941f1-307">When a thread has no reader lock, do not use `UpgradeToWriterLock`.</span></span> <span data-ttu-id="941f1-308">Zamiast nich należy używać słów kluczowych <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>.</span><span class="sxs-lookup"><span data-stu-id="941f1-308">Use <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> instead.</span></span>  
  
 <span data-ttu-id="941f1-309">Dla limitu czasu prawidłowe wartości, zobacz <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="941f1-309">For valid time-out values, see <xref:System.Threading.ReaderWriterLock>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="941f1-310">
            <paramref name="timeout" /> wygasa przed udzieleniem żądanie blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-310">
              <paramref name="timeout" /> expires before the lock request is granted.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="941f1-311">
            <paramref name="timeout" /> Określa wartość ujemną, innego niż-1 milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-311">
              <paramref name="timeout" /> specifies a negative value other than -1 milliseconds.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriterSeqNum">
      <MemberSignature Language="C#" Value="public int WriterSeqNum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriterSeqNum" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriterSeqNum As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WriterSeqNum { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="941f1-312">Pobiera bieżący numer sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-312">Gets the current sequence number.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="941f1-313">Bieżący numer sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="941f1-313">The current sequence number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="941f1-314">Sekwencja liczba zwiększa się zawsze, gdy wątek uzyskuje blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-314">The sequence number increases whenever a thread acquires the writer lock.</span></span> <span data-ttu-id="941f1-315">Można zapisać numer sekwencji i przekaż go do <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> w późniejszym czasie, aby ustalić, czy inne wątki zostały nabyte blokadę zapisu w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="941f1-315">You can save the sequence number and pass it to <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> at a later time, if you want to determine whether other threads have acquired the writer lock in the meantime.</span></span>  
  
 <span data-ttu-id="941f1-316">Można użyć `WriterSeqNum` aby poprawić wydajność aplikacji.</span><span class="sxs-lookup"><span data-stu-id="941f1-316">You can use `WriterSeqNum` to improve application performance.</span></span> <span data-ttu-id="941f1-317">Na przykład wątku może buforować informacje, które uzyskuje podczas utrzymywania blokady czytnika.</span><span class="sxs-lookup"><span data-stu-id="941f1-317">For example, a thread might cache the information it obtains while holding a reader lock.</span></span> <span data-ttu-id="941f1-318">Po zwalniania i później reacquiring blokady, Wątek można określić, czy inne wątki zostały zapisane zasobu, wywołując `AnyWritersSince`; Jeśli nie, można użyć buforowanych informacji.</span><span class="sxs-lookup"><span data-stu-id="941f1-318">After releasing and later reacquiring the lock, the thread can determine whether other threads have written to the resource by calling `AnyWritersSince`; if not, the cached information can be used.</span></span> <span data-ttu-id="941f1-319">Ta technika jest przydatna podczas odczytywania informacji o chronionych przez blokady jest kosztowne. na przykład uruchomienie kwerendy bazy danych.</span><span class="sxs-lookup"><span data-stu-id="941f1-319">This technique is useful when reading the information protected by the lock is expensive; for example, running a database query.</span></span>  
  
 <span data-ttu-id="941f1-320">Obiekt wywołujący musi zawierający blokadę lub blokadę zapisu w kolejności numeru sekwencji powinna być użyteczna.</span><span class="sxs-lookup"><span data-stu-id="941f1-320">The caller must be holding a reader lock or a writer lock in order for the sequence number to be useful.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="941f1-321">Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> właściwości i <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> metodę, aby określić, czy inny wątek uzyskać blokadę zapisu na komputerze chronionym zasobów od bieżącego wątku ostatniego stanu blokadę zapisu.</span><span class="sxs-lookup"><span data-stu-id="941f1-321">The following code example shows how to use the <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> property and the <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> method to determine whether another thread acquired the writer lock on the protected resource since the current thread last held the writer lock.</span></span>  
  
 <span data-ttu-id="941f1-322">Ten kod jest częścią większego przykładu udostępnionego dla <xref:System.Threading.ReaderWriterLock> klasy.</span><span class="sxs-lookup"><span data-stu-id="941f1-322">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLock> class.</span></span>  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>