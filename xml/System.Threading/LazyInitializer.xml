<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b8f1237cfd6d85d48bb50e363e78511841ce1202" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68543700" /></Metadata><TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza procedury inicjowania z opóźnieniem.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Te procedury nie wymagają przydzielenia dedykowanego wystąpienia inicjalizacji z opóźnieniem, zamiast tego przy użyciu odwołań, aby upewnić się, że obiekty docelowe zostały zainicjowane w miarę uzyskiwania do nich dostępu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak używać EnsureInitialized do opóźnieniem zainicjować wartości przy użyciu wartości logicznej, aby sprawdzić, czy Inicjalizacja już się zakończyła, oraz obiekt, który ma być używany jako wzajemne blokady wykluczenia.  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
bool _dataInitialized = false;  
object _dataLock = new object();  

//  ...  
  
ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>Metody <see cref="T:System.Threading.LazyInitializer" /> są bezpieczne dla wątków i mogą być wywoływane z wielu wątków jednocześnie.</threadsafe>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje typ docelowy, jeśli nie został jeszcze zainicjowany.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ odwołania, który ma zostać zainicjowany.</typeparam>
        <param name="target">Odwołanie do zainicjowania, jeśli nie zostało jeszcze zainicjowane.</param>
        <summary>Inicjuje docelowy typ referencyjny z konstruktorem bez parametrów typu, jeśli nie został jeszcze zainicjowany.</summary>
        <returns>Zainicjowany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być używana tylko w przypadku typów referencyjnych. Aby zapewnić inicjalizację typów wartości, zobacz inne przeciążenia `EnsureInitialized`.  
  
 Ta metoda może być używana współbieżnie przez wiele wątków do zainicjowania `target`.  
  
 W przypadku, gdy wiele wątków uzyskuje dostęp do tej metody współbieżnie, można `T` utworzyć wiele wystąpień, ale tylko jeden z nich będzie przechowywany `target`w. W takim przypadku ta metoda nie spowoduje usunięcia obiektów, które nie zostały zapisane. Jeśli takie obiekty muszą zostać usunięte, jest do obiektu wywołującego, aby określić, czy obiekt nie był używany, a następnie odpowiednio usunąć obiekt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">Brak uprawnień dostępu do konstruktora typu <paramref name="T" /> .</exception>
        <exception cref="T:System.MissingMemberException">Typ <paramref name="T" /> nie ma konstruktora bez parametrów.</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ odwołania, który ma zostać zainicjowany.</typeparam>
        <param name="target">Odwołanie do zainicjowania, jeśli nie zostało jeszcze zainicjowane.</param>
        <param name="valueFactory">Funkcja, która jest wywoływana w celu zainicjowania odwołania.</param>
        <summary>Inicjuje docelowy typ referencyjny przy użyciu określonej funkcji, jeśli nie została jeszcze zainicjowana.</summary>
        <returns>Zainicjowany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być używana tylko w typach referencyjnych i `valueFactory` nie może zwracać odwołania o wartości null (Nothing w Visual Basic). Aby zapewnić inicjalizację typów wartości lub zezwolić na puste typy odwołań, zobacz inne przeciążenia EnsureInitialized.  
  
 Ta metoda może być używana współbieżnie przez wiele wątków do zainicjowania `target`.  
  
 W przypadku, gdy wiele wątków uzyskuje dostęp do tej metody współbieżnie, można `T` utworzyć wiele wystąpień, ale tylko jeden z nich będzie przechowywany `target`w. W takim przypadku ta metoda nie spowoduje usunięcia obiektów, które nie zostały zapisane. Jeśli takie obiekty muszą zostać usunięte, jest do obiektu wywołującego, aby określić, czy obiekt nie był używany, a następnie odpowiednio usunąć obiekt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">Typ <paramref name="T" /> nie ma konstruktora bez parametrów.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="valueFactory" />zwrócono wartość null (Nothing w Visual Basic).</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ odwołania, który ma zostać zainicjowany.</typeparam>
        <param name="target">Odwołanie lub wartość typu <c>T</c> do zainicjowania, jeśli nie została jeszcze zainicjowana.</param>
        <param name="initialized">Odwołanie do wartości logicznej określającej, czy element docelowy został już zainicjowany.</param>
        <param name="syncLock">Odwołanie do obiektu używanego jako wzajemnie wykluczające się blokady do inicjowania <paramref name="target" />. Jeśli <paramref name="syncLock" /> ma<see langword="null" />wartość, zostanie utworzony nowy obiekt.</param>
        <summary>Inicjuje odwołanie docelowe lub typ wartości z konstruktorem bez parametrów, jeśli nie został jeszcze zainicjowany.</summary>
        <returns>Zainicjowany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `initialized` wartość jest równa true, dalsze inicjowanie nie jest wykonywane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">Brak uprawnień dostępu do konstruktora typu <paramref name="T" /> .</exception>
        <exception cref="T:System.MissingMemberException">Typ <paramref name="T" /> nie ma konstruktora bez parametrów.</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ odwołania, który ma zostać zainicjowany.</typeparam>
        <param name="target">Odwołanie do zainicjowania, jeśli nie zostało jeszcze zainicjowane.</param>
        <param name="syncLock">Odwołanie do obiektu używanego jako wzajemnie wykluczające się blokady do inicjowania <paramref name="target" />. Jeśli <paramref name="syncLock" /> ma<see langword="null" />wartość, zostanie utworzony nowy obiekt.</param>
        <param name="valueFactory">Metoda do wywołania do zainicjowania <paramref name="target" />.</param>
        <summary>Inicjuje docelowy typ referencyjny z określoną funkcją, jeśli nie została jeszcze zainicjowana.</summary>
        <returns>Zainicjowany obiekt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ odwołania, który ma zostać zainicjowany.</typeparam>
        <param name="target">Odwołanie lub wartość typu <c>T</c> do zainicjowania, jeśli nie została jeszcze zainicjowana.</param>
        <param name="initialized">Odwołanie do wartości logicznej określającej, czy element docelowy został już zainicjowany.</param>
        <param name="syncLock">Odwołanie do obiektu używanego jako wzajemnie wykluczające się blokady do inicjowania <paramref name="target" />. Jeśli <paramref name="syncLock" /> ma<see langword="null" />wartość, zostanie utworzony nowy obiekt.</param>
        <param name="valueFactory">Funkcja, która jest wywoływana w celu zainicjowania odwołania lub wartości.</param>
        <summary>Inicjuje odwołanie docelowe lub typ wartości przy użyciu określonej funkcji, jeśli nie została jeszcze zainicjowana.</summary>
        <returns>Zainicjowany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `initialized` wartość jest równa true, dalsze inicjowanie nie jest wykonywane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">Brak uprawnień dostępu do konstruktora typu <paramref name="T" /> .</exception>
        <exception cref="T:System.MissingMemberException">Typ <paramref name="T" /> nie ma konstruktora bez parametrów.</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
      </Docs>
    </Member>
  </Members>
</Type>