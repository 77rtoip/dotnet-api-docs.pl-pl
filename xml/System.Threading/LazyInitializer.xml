<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c6cb826eb4c9cc7e7c2970010b6d3cbdc3d09f8" /><Meta Name="ms.sourcegitcommit" Value="f9e71795ba0f9c2dfaa74bec233343ed0f3ffd99" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/14/2019" /><Meta Name="ms.locfileid" Value="57932068" /></Metadata><TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="37d86-101">Zawiera procedury inicjowania z opóźnieniem.</span><span class="sxs-lookup"><span data-stu-id="37d86-101">Provides lazy initialization routines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37d86-102">Te procedury uniknąć konieczności przydzielenie wystąpienia dedykowaną, inicjowania z opóźnieniem, zamiast tego w celu zapewnienia, że elementy docelowe zostały zainicjowane, ponieważ są one używane przy użyciu odwołań.</span><span class="sxs-lookup"><span data-stu-id="37d86-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37d86-103">Poniższy przykład pokazuje, jak używać EnsureInitialized opóźnieniem zainicjować wartość przy użyciu wartość logiczną w celu sprawdzenia, czy Inicjowanie zostało już przeprowadzone i obiekt ma być używany jako blokadę wykluczania wzajemnego.</span><span class="sxs-lookup"><span data-stu-id="37d86-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="37d86-104">Metody <see cref="T:System.Threading.LazyInitializer" /> są odporne na wątki i może być wywoływana z wielu wątków jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="37d86-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="37d86-105">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="37d86-105">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="37d86-106">Inicjuje typ docelowy, jeśli jeszcze nie zostało zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="37d86-106">Initializes a target type if it hasn't already been initialized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="37d86-107">Typ odwołania do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="37d86-107">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="37d86-108">Odwołanie typu <c>T</c> zainicjować, jeśli nie został już zainicjowany.</span><span class="sxs-lookup"><span data-stu-id="37d86-108">A reference of type <c>T</c> to initialize if it has not already been initialized.</span></span></param>
        <summary><span data-ttu-id="37d86-109">Inicjuje typu odwołania docelowego przy użyciu typu domyślnego konstruktora, jeśli jeszcze nie zostało zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="37d86-109">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="37d86-110">Zainicjowana klasa odwołanie typu <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="37d86-110">The initialized reference of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37d86-111">Ta metoda może być wykorzystywane w typach referencyjnych.</span><span class="sxs-lookup"><span data-stu-id="37d86-111">This method may only be used on reference types.</span></span> <span data-ttu-id="37d86-112">Aby zapewnić inicjowania typów wartości, zobacz inne przeciążenia EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="37d86-112">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="37d86-113">Ta metoda może służyć współbieżnie przez wiele wątków można zainicjować `target`.</span><span class="sxs-lookup"><span data-stu-id="37d86-113">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="37d86-114">W przypadku, gdy wiele wątków dostęp do tej metody współbieżnie, wiele wystąpień `T` maja zostać utworzona, ale tylko jeden będą przechowywane w `target`.</span><span class="sxs-lookup"><span data-stu-id="37d86-114">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="37d86-115">W wystąpieniu ta metoda będzie Likwiduj obiektów, które nie zostały zapisane.</span><span class="sxs-lookup"><span data-stu-id="37d86-115">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="37d86-116">Jeśli takie obiekty musi zostać usunięty, jest obiekt wywołujący, aby określić, jeśli obiekt nie był używany i następnie odpowiednio usunięcia obiektu.</span><span class="sxs-lookup"><span data-stu-id="37d86-116">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="37d86-117">Uprawnienia dostępu konstruktora typu <paramref name="T" /> brakowało.</span><span class="sxs-lookup"><span data-stu-id="37d86-117">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="37d86-118">Typ <paramref name="T" /> nie ma domyślnego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="37d86-118">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="37d86-119">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="37d86-119">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="37d86-120">Typ odwołania, odwołania do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="37d86-120">The reference type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="37d86-121">Odwołanie typu <c>T</c> zainicjować, jeśli jeszcze nie zostało zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="37d86-121">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="37d86-122">Funkcja, która jest wywoływana w celu zainicjowania odwołania.</span><span class="sxs-lookup"><span data-stu-id="37d86-122">The function that is called to initialize the reference.</span></span></param>
        <summary><span data-ttu-id="37d86-123">Docelowy typ odwołania jest inicjowana przy użyciu określonej funkcji, jeśli jeszcze nie zostało zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="37d86-123">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="37d86-124">Zainicjowana klasa wartości typu <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="37d86-124">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37d86-125">Ta metoda może używać tylko w typach referencyjnych i `valueFactory` może nie zwrócić odwołanie o wartości null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="37d86-125">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="37d86-126">Aby upewnić się, inicjowania typów wartości lub zezwala na typy odwołania o wartości null, zobacz inne przeciążenia EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="37d86-126">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="37d86-127">Ta metoda może służyć współbieżnie przez wiele wątków można zainicjować `target`.</span><span class="sxs-lookup"><span data-stu-id="37d86-127">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="37d86-128">W przypadku, gdy wiele wątków dostęp do tej metody współbieżnie, wiele wystąpień `T` maja zostać utworzona, ale tylko jeden będą przechowywane w `target`.</span><span class="sxs-lookup"><span data-stu-id="37d86-128">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="37d86-129">W wystąpieniu ta metoda będzie Likwiduj obiektów, które nie zostały zapisane.</span><span class="sxs-lookup"><span data-stu-id="37d86-129">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="37d86-130">Jeśli takie obiekty musi zostać usunięty, jest obiekt wywołujący, aby określić, jeśli obiekt nie był używany i następnie odpowiednio usunięcia obiektu.</span><span class="sxs-lookup"><span data-stu-id="37d86-130">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="37d86-131">Typ <paramref name="T" /> nie ma domyślnego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="37d86-131">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="37d86-132"><paramref name="valueFactory" /> zwróciła wartość null (Nothing w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="37d86-132"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="37d86-133">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="37d86-133">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="37d86-134">Typ odwołania do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="37d86-134">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="37d86-135">Odwołanie lub wartość typu <c>T</c> zainicjować, jeśli jeszcze nie zostało zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="37d86-135">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="37d86-136">Odwołanie do wartość logiczna określająca, czy element docelowy został już zainicjowany.</span><span class="sxs-lookup"><span data-stu-id="37d86-136">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="37d86-137">Odwołanie do obiektu, używane jako wzajemnie się wykluczają blokady dla inicjowania <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="37d86-137">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="37d86-138">Jeśli <paramref name="syncLock" /> jest <see langword="null" />, będzie można utworzyć wystąpienia nowego obiektu.</span><span class="sxs-lookup"><span data-stu-id="37d86-138">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <summary><span data-ttu-id="37d86-139">Inicjuje typ docelowy odwołanie lub wartość, przy użyciu jego domyślnego konstruktora, jeśli jeszcze nie zostało zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="37d86-139">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="37d86-140">Zainicjowana klasa wartości typu <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="37d86-140">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37d86-141">Jeśli `intialized` zostanie określony jako wartość true, nie dalsze Inicjalizacja występuje.</span><span class="sxs-lookup"><span data-stu-id="37d86-141">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="37d86-142">Uprawnienia dostępu konstruktora typu <paramref name="T" /> brakowało.</span><span class="sxs-lookup"><span data-stu-id="37d86-142">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="37d86-143">Typ <paramref name="T" /> nie ma domyślnego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="37d86-143">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="37d86-144">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="37d86-144">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="37d86-145">Typ odwołania do zainicjowania.</span><span class="sxs-lookup"><span data-stu-id="37d86-145">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="37d86-146">Odwołanie lub wartość typu <c>T</c> zainicjować, jeśli jeszcze nie zostało zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="37d86-146">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="37d86-147">Odwołanie do wartość logiczna określająca, czy element docelowy został już zainicjowany.</span><span class="sxs-lookup"><span data-stu-id="37d86-147">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="37d86-148">Odwołanie do obiektu, używane jako wzajemnie się wykluczają blokady dla inicjowania <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="37d86-148">A reference to an object used as the mutually exclusive lock for initializing <paramref name="target" />.</span></span> <span data-ttu-id="37d86-149">Jeśli <paramref name="syncLock" /> jest <see langword="null" />, będzie można utworzyć wystąpienia nowego obiektu.</span><span class="sxs-lookup"><span data-stu-id="37d86-149">If <paramref name="syncLock" /> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="37d86-150">Funkcja, która jest wywoływana, aby zainicjować odwołanie lub wartość.</span><span class="sxs-lookup"><span data-stu-id="37d86-150">The function that is called to initialize the reference or value.</span></span></param>
        <summary><span data-ttu-id="37d86-151">Typ docelowy odwołanie lub wartość jest inicjowana przy użyciu określonej funkcji, jeśli jeszcze nie zostało zainicjowane.</span><span class="sxs-lookup"><span data-stu-id="37d86-151">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="37d86-152">Zainicjowana klasa wartości typu <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="37d86-152">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37d86-153">Jeśli `intialized` zostanie określony jako wartość true, nie dalsze Inicjalizacja występuje.</span><span class="sxs-lookup"><span data-stu-id="37d86-153">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="37d86-154">Uprawnienia dostępu konstruktora typu <paramref name="T" /> brakowało.</span><span class="sxs-lookup"><span data-stu-id="37d86-154">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="37d86-155">Typ <paramref name="T" /> nie ma domyślnego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="37d86-155">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="37d86-156">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="37d86-156">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>