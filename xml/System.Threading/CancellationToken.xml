<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e7f14c4eec0f7f46844e55ee51a2e1e82947e377" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68541317" /></Metadata><TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3abd0-101">Propaguje powiadomienie, że operacje powinny być anulowane.</span><span class="sxs-lookup"><span data-stu-id="3abd0-101">Propagates notification that operations should be canceled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-102">A <xref:System.Threading.CancellationToken> umożliwia współpracę między wątkami, elementami roboczymi puli wątków lub <xref:System.Threading.Tasks.Task> obiektami.</span><span class="sxs-lookup"><span data-stu-id="3abd0-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="3abd0-103">Token anulowania można utworzyć przez utworzenie wystąpienia <xref:System.Threading.CancellationTokenSource> obiektu, który zarządza tokenami anulowania pobranymi z jego <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="3abd0-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3abd0-104">Następnie można przekazać token anulowania do dowolnej liczby wątków, zadań lub operacji, które powinny otrzymywać powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="3abd0-105">Nie można użyć tokenu do inicjowania anulowania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="3abd0-106">Gdy obiekt będący właścicielem <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>wywołuje <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> , właściwość każdej kopii tokenu `true`anulowania ma ustawioną wartość.</span><span class="sxs-lookup"><span data-stu-id="3abd0-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="3abd0-107">Obiekty otrzymujące powiadomienie mogą reagować w dowolny sposób.</span><span class="sxs-lookup"><span data-stu-id="3abd0-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="3abd0-108">Aby uzyskać więcej informacji i przykładów kodu, zobacz [Anulowanie w zarządzanych wątkach](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="3abd0-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3abd0-109">Poniższy przykład używa generatora liczb losowych do emulowania aplikacji do zbierania danych, która odczytuje 10 wartości całkowitych z jedenastu różnych instrumentów.</span><span class="sxs-lookup"><span data-stu-id="3abd0-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="3abd0-110">Wartość zero wskazuje, że pomiar nie powiódł się dla jednego instrumentu, w tym przypadku operacja powinna zostać anulowana i nie ma potrzeby obliczenia całkowitego średniego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="3abd0-111">Aby obsłużyć możliwe anulowanie operacji, przykład tworzy <xref:System.Threading.CancellationTokenSource> obiekt generujący token anulowania, który jest przesyłany <xref:System.Threading.Tasks.TaskFactory> do obiektu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="3abd0-112"><xref:System.Threading.Tasks.TaskFactory> Obiekt z kolei przekazuje token anulowania do każdego zadania odpowiedzialnego za zbieranie odczytów dla określonego instrumentu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="3abd0-113"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> Metoda jest wywoływana, aby upewnić się, że średni jest obliczany dopiero po pomyślnym zebraniu wszystkich odczytów.</span><span class="sxs-lookup"><span data-stu-id="3abd0-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="3abd0-114">Jeśli zadanie nie zostało anulowane, wywołanie <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> metody zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="3abd0-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="3abd0-115">Wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Threading.CancellationToken" /> są bezpieczne dla wątków i mogą być używane współbieżnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="3abd0-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-116">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-116">Cancellation</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-117">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-117">Task Cancellation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled"><span data-ttu-id="3abd0-118">Stan anulowany dla tokenu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-118">The canceled state for the token.</span></span></param>
        <summary><span data-ttu-id="3abd0-119"><see cref="T:System.Threading.CancellationToken" />Inicjuje.</span><span class="sxs-lookup"><span data-stu-id="3abd0-119">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-120">Tokeny utworzone za pomocą tego konstruktora pozostaną w stanie anulowanym określonym `canceled` przez parametr.</span><span class="sxs-lookup"><span data-stu-id="3abd0-120">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="3abd0-121">Jeśli `canceled` jest `false` ,oba<xref:System.Threading.CancellationToken.CanBeCanceled%2A> i<xref:System.Threading.CancellationToken.IsCancellationRequested%2A> będą .`false`</span><span class="sxs-lookup"><span data-stu-id="3abd0-121">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="3abd0-122">Jeśli `canceled` jest `true` ,oba<xref:System.Threading.CancellationToken.CanBeCanceled%2A> i<xref:System.Threading.CancellationToken.IsCancellationRequested%2A> będą .`true`</span><span class="sxs-lookup"><span data-stu-id="3abd0-122">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-123">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-123">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-124">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-124">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3abd0-125">Określa, czy ten token może być w stanie anulowany.</span><span class="sxs-lookup"><span data-stu-id="3abd0-125">Gets whether this token is capable of being in the canceled state.</span></span></summary>
        <value><span data-ttu-id="3abd0-126"><see langword="true" />Jeśli ten token może być w stanie anulowany; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="3abd0-126"><see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-127">Jeśli <xref:System.Threading.CancellationToken.CanBeCanceled%2A> <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> `true`zwraca `false`, jest gwarantowane, że token nigdy nie będzie przechodzić w stan anulowany, co oznacza, że nigdy nie zwróci.</span><span class="sxs-lookup"><span data-stu-id="3abd0-127">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="3abd0-128">Token anulowania, który nie może zostać anulowany, jest zwracany <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> przez właściwość statyczną.</span><span class="sxs-lookup"><span data-stu-id="3abd0-128">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="3abd0-129">Opcjonalnie można użyć tej właściwości, aby określić, czy token anulowania może zostać anulowany przed badaniem wartości <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> właściwości w celu ustalenia, czy została anulowana.</span><span class="sxs-lookup"><span data-stu-id="3abd0-129">You can optionally use this property to determine whether a cancellation token can be canceled before examining the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-130">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-130">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-131">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-131">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3abd0-132">Określa, czy bieżące <see cref="T:System.Threading.CancellationToken" /> wystąpienie jest równe określonemu tokenowi.</span><span class="sxs-lookup"><span data-stu-id="3abd0-132">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="3abd0-133">Drugi obiekt do porównania z tym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="3abd0-133">The other object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="3abd0-134">Określa, czy bieżące <see cref="T:System.Threading.CancellationToken" /> wystąpienie jest równe określonemu. <see cref="T:System.Object" /></span><span class="sxs-lookup"><span data-stu-id="3abd0-134">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="3abd0-135"><see langword="true" />Jeśli <paramref name="other" /> <see langword="false" />jest i i jeśli dwa wystąpienia są równe; w przeciwnym razie,. <see cref="T:System.Threading.CancellationToken" /></span><span class="sxs-lookup"><span data-stu-id="3abd0-135"><see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="3abd0-136">Zobacz sekcję Spostrzeżenia, aby uzyskać więcej informacji.</span><span class="sxs-lookup"><span data-stu-id="3abd0-136">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="3abd0-137">Dwa tokeny anulowania są równe w przypadku spełnienia jednego z następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="3abd0-137">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="3abd0-138">Są one skojarzone z tym samym <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="3abd0-138">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="3abd0-139">Zostały one zbudowane z konstruktorów <xref:System.Threading.CancellationToken> publicznych, a ich <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="3abd0-139">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="3abd0-140">Wartość obu tokenów anulowania to <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3abd0-140">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3abd0-141">Skojarzenie <see cref="T:System.Threading.CancellationTokenSource" /> zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="3abd0-141">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-142">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-142">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-143">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-143">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="3abd0-144">Druga <see cref="T:System.Threading.CancellationToken" /> do porównania z tym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="3abd0-144">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="3abd0-145">Określa, czy bieżące <see cref="T:System.Threading.CancellationToken" /> wystąpienie jest równe określonemu tokenowi.</span><span class="sxs-lookup"><span data-stu-id="3abd0-145">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
        <returns><span data-ttu-id="3abd0-146"><see langword="true" />Jeśli wystąpienia są równe; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="3abd0-146"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="3abd0-147">Zobacz sekcję Spostrzeżenia, aby uzyskać więcej informacji.</span><span class="sxs-lookup"><span data-stu-id="3abd0-147">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="3abd0-148">Dwa tokeny anulowania są równe w przypadku spełnienia jednego z następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="3abd0-148">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="3abd0-149">Są one skojarzone z tym samym <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="3abd0-149">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="3abd0-150">Zostały one zbudowane z konstruktorów <xref:System.Threading.CancellationToken> publicznych, a ich <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="3abd0-150">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="3abd0-151">Wartość obu tokenów anulowania to <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3abd0-151">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-152">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-152">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-153">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-153">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3abd0-154">Służy jako funkcja skrótu dla elementu <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="3abd0-154">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="3abd0-155">Kod skrótu dla bieżącego <see cref="T:System.Threading.CancellationToken" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="3abd0-155">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3abd0-156">Pobiera, czy dla tego tokenu zażądano anulowania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-156">Gets whether cancellation has been requested for this token.</span></span></summary>
        <value><span data-ttu-id="3abd0-157"><see langword="true" />Jeśli dla tego tokenu zażądano anulowania, w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="3abd0-157"><see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-158">Ta właściwość wskazuje, czy dla tego tokenu zażądano anulowania, albo za pomocą tokenu początkowo skonstruowanego w stanie anulowanym, czy za <xref:System.Threading.CancellationTokenSource.Cancel%2A> pomocą wywołania skojarzonego <xref:System.Threading.CancellationTokenSource>z tokenem.</span><span class="sxs-lookup"><span data-stu-id="3abd0-158">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="3abd0-159">Ta właściwość ma `true`tylko gwarancję, że zażądano anulowania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-159">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="3abd0-160">Nie gwarantuje to, że każda zarejestrowana procedura obsługi zakończyła wykonywanie, ani czy żądania anulowania nie zakończyły propagowania do wszystkich zarejestrowanych programów obsługi.</span><span class="sxs-lookup"><span data-stu-id="3abd0-160">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="3abd0-161">Może być wymagana dodatkowa synchronizacja, szczególnie w sytuacjach, w których obiekty pokrewne są anulowane współbieżnie.</span><span class="sxs-lookup"><span data-stu-id="3abd0-161">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3abd0-162">Poniżej znajduje się prosty przykład, który wykonuje proces serwera do momentu <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> , gdy `true`Właściwość zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="3abd0-162">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="3abd0-163">Przykład tworzy wystąpienie <xref:System.Threading.CancellationTokenSource> obiektu, który kontroluje dostęp do tokenu anulowania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-163">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="3abd0-164">Następnie definiuje dwa procedury wątków.</span><span class="sxs-lookup"><span data-stu-id="3abd0-164">It then defines two thread procedures.</span></span> <span data-ttu-id="3abd0-165">Pierwszy jest zdefiniowany jako wyrażenie lambda, które tworzy pulę klawiatury i, po naciśnięciu klawisza "C", wywołuje <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> , aby ustawić token anulowania na stan anulowany.</span><span class="sxs-lookup"><span data-stu-id="3abd0-165">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="3abd0-166">Druga jest metodą `ServerClass.StaticMethod`sparametryzowanej,, która wykonuje pętlę <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> do momentu, aż `true`właściwość jest.</span><span class="sxs-lookup"><span data-stu-id="3abd0-166">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="3abd0-167">Główny wątek następnie uruchamia dwa wątki i bloki do momentu zakończenia wątku, który wykonuje `ServerClass.StaticMethod` metodę.</span><span class="sxs-lookup"><span data-stu-id="3abd0-167">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-168">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-168">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-169">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-169">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3abd0-170">Zwraca wartość pustą <see cref="T:System.Threading.CancellationToken" /> .</span><span class="sxs-lookup"><span data-stu-id="3abd0-170">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span></span></summary>
        <value><span data-ttu-id="3abd0-171">Pusty token anulowania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-171">An empty cancellation token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-172">Nie można anulować tokenu anulowania zwróconego przez tę właściwość. oznacza to, że <xref:System.Threading.CancellationToken.CanBeCanceled%2A> jego właściwość `false`jest.</span><span class="sxs-lookup"><span data-stu-id="3abd0-172">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="3abd0-173">Można również użyć instrukcji C# [Default (CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) , aby utworzyć pusty token anulowania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-173">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="3abd0-174">Dwa puste tokeny anulowania są zawsze równe.</span><span class="sxs-lookup"><span data-stu-id="3abd0-174">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-175">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-175">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-176">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-176">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="3abd0-177">Pierwsze wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="3abd0-177">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="3abd0-178">Drugie wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="3abd0-178">The second instance.</span></span></param>
        <summary><span data-ttu-id="3abd0-179">Określa, czy <see cref="T:System.Threading.CancellationToken" /> dwa wystąpienia są równe.</span><span class="sxs-lookup"><span data-stu-id="3abd0-179">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="3abd0-180"><see langword="true" />Jeśli wystąpienia są równe; w przeciwnym <see langword="false" /> razie zobacz sekcję Uwagi, aby uzyskać więcej informacji.</span><span class="sxs-lookup"><span data-stu-id="3abd0-180"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="3abd0-181">Dwa tokeny anulowania są równe w przypadku spełnienia jednego z następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="3abd0-181">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="3abd0-182">Są one skojarzone z tym samym <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="3abd0-182">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="3abd0-183">Zostały one zbudowane z konstruktorów <xref:System.Threading.CancellationToken> publicznych, a ich <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="3abd0-183">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="3abd0-184">Wartość obu tokenów anulowania to <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3abd0-184">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3abd0-185">Skojarzenie <see cref="T:System.Threading.CancellationTokenSource" /> zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="3abd0-185">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-186">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-186">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-187">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-187">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="3abd0-188">Pierwsze wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="3abd0-188">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="3abd0-189">Drugie wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="3abd0-189">The second instance.</span></span></param>
        <summary><span data-ttu-id="3abd0-190">Określa, czy <see cref="T:System.Threading.CancellationToken" /> dwa wystąpienia nie są równe.</span><span class="sxs-lookup"><span data-stu-id="3abd0-190">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span></span></summary>
        <returns><span data-ttu-id="3abd0-191"><see langword="true" />Jeśli wystąpienia nie są równe; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="3abd0-191"><see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="3abd0-192">Aby uzyskać definicję równości, zobacz <xref:System.Threading.CancellationToken.Equals%2A> metodę.</span><span class="sxs-lookup"><span data-stu-id="3abd0-192">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3abd0-193">Skojarzenie <see cref="T:System.Threading.CancellationTokenSource" /> zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="3abd0-193">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-194">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-194">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-195">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-195">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3abd0-196">Rejestruje delegata, który zostanie wywołany po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-196">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-197">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-197">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-198">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-198">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="3abd0-199">Delegat, który ma zostać wykonany po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <summary><span data-ttu-id="3abd0-200">Rejestruje delegata, który zostanie wywołany po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-200">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="3abd0-201"><see cref="T:System.Threading.CancellationTokenRegistration" /> Wystąpienie, którego można użyć do wyrejestrowania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-201">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-202">Jeśli token jest już w stanie anulowanym, delegat zostanie uruchomiony natychmiast i synchronicznie.</span><span class="sxs-lookup"><span data-stu-id="3abd0-202">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="3abd0-203">Każdy wyjątek wygenerowany przez delegata zostanie rozpropagowany z tego wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="3abd0-203">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="3abd0-204">Bieżąca <xref:System.Threading.ExecutionContext> jest przechwytywana wraz z delegatem i zostanie użyta podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-204">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="3abd0-205">Bieżąca <xref:System.Threading.SynchronizationContext> nie została przechwycona.</span><span class="sxs-lookup"><span data-stu-id="3abd0-205">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3abd0-206">Skojarzona <see cref="T:System.Threading.CancellationTokenSource" /> została usunięta.</span><span class="sxs-lookup"><span data-stu-id="3abd0-206">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3abd0-207"><paramref name="callback" />ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="3abd0-207"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-208">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-208">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-209">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-209">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="3abd0-210">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="3abd0-210">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="3abd0-211">Delegat, który ma zostać wykonany po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-211">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="3abd0-212">Wartość wskazująca, czy przechwycić bieżącą <see cref="T:System.Threading.SynchronizationContext" /> i użyć jej podczas <paramref name="callback" />wywoływania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-212">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="3abd0-213">Rejestruje delegata, który zostanie wywołany po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-213">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="3abd0-214"><see cref="T:System.Threading.CancellationTokenRegistration" /> Wystąpienie, którego można użyć do wyrejestrowania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-214">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-215">Jeśli token jest już w stanie anulowanym, delegat zostanie uruchomiony natychmiast i synchronicznie.</span><span class="sxs-lookup"><span data-stu-id="3abd0-215">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="3abd0-216">Każdy wyjątek wygenerowany przez delegata zostanie rozpropagowany z tego wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="3abd0-216">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="3abd0-217">Bieżąca <xref:System.Threading.ExecutionContext> jest przechwytywana wraz z delegatem i zostanie użyta podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-217">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="3abd0-218">Jeśli `useSynchronizationContext` <xref:System.Threading.SynchronizationContext>ma `true`wartość, bieżący, jeśli taki istnieje, jest również przechwytywany wraz z delegatem i będzie używany podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-218">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="3abd0-219">W przeciwnym razie nie jestprzechwytywane.<xref:System.Threading.SynchronizationContext></span><span class="sxs-lookup"><span data-stu-id="3abd0-219">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3abd0-220">Skojarzona <see cref="T:System.Threading.CancellationTokenSource" /> została usunięta.</span><span class="sxs-lookup"><span data-stu-id="3abd0-220">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3abd0-221"><paramref name="callback" />ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="3abd0-221"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-222">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-222">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-223">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-223">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="3abd0-224">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="3abd0-224">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="3abd0-225">Delegat, który ma zostać wykonany po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-225">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="3abd0-226">Stan, który ma zostać przekazany <paramref name="callback" /> do momentu wywołania obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-226">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="3abd0-227">Może to być wartość null.</span><span class="sxs-lookup"><span data-stu-id="3abd0-227">This may be null.</span></span></param>
        <summary><span data-ttu-id="3abd0-228">Rejestruje delegata, który zostanie wywołany po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-228">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="3abd0-229"><see cref="T:System.Threading.CancellationTokenRegistration" /> Wystąpienie, którego można użyć do wyrejestrowania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-229">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-230">Jeśli token jest już w stanie anulowanym, delegat zostanie uruchomiony natychmiast i synchronicznie.</span><span class="sxs-lookup"><span data-stu-id="3abd0-230">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="3abd0-231">Każdy wyjątek wygenerowany przez delegata zostanie rozpropagowany z tego wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="3abd0-231">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="3abd0-232">Bieżąca <xref:System.Threading.ExecutionContext> jest przechwytywana wraz z delegatem i zostanie użyta podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-232">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="3abd0-233">Bieżąca <xref:System.Threading.SynchronizationContext> nie została przechwycona.</span><span class="sxs-lookup"><span data-stu-id="3abd0-233">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3abd0-234">Skojarzona <see cref="T:System.Threading.CancellationTokenSource" /> została usunięta.</span><span class="sxs-lookup"><span data-stu-id="3abd0-234">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3abd0-235"><paramref name="callback" />ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="3abd0-235"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-236">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-236">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-237">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-237">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="3abd0-238">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="3abd0-238">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="3abd0-239">Delegat, który ma zostać wykonany po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-239">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="3abd0-240">Stan, który ma zostać przekazany <paramref name="callback" /> do momentu wywołania obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-240">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="3abd0-241">Może to być wartość null.</span><span class="sxs-lookup"><span data-stu-id="3abd0-241">This may be null.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="3abd0-242">Wartość logiczna wskazująca, czy przechwycić bieżącą <see cref="T:System.Threading.SynchronizationContext" /> i użyć jej podczas <paramref name="callback" />wywoływania obiektu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-242">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="3abd0-243">Rejestruje delegata, który zostanie wywołany po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-243">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="3abd0-244"><see cref="T:System.Threading.CancellationTokenRegistration" /> Wystąpienie, którego można użyć do wyrejestrowania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-244">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-245">Jeśli token jest już w stanie anulowanym, delegat zostanie uruchomiony natychmiast i synchronicznie.</span><span class="sxs-lookup"><span data-stu-id="3abd0-245">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="3abd0-246">Każdy wyjątek wygenerowany przez delegata zostanie rozpropagowany z tego wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="3abd0-246">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="3abd0-247">Bieżąca <xref:System.Threading.ExecutionContext> jest przechwytywana wraz z delegatem i zostanie użyta podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-247">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="3abd0-248">Jeśli `useSynchronizationContext` <xref:System.Threading.SynchronizationContext>ma `true`wartość, bieżący, jeśli taki istnieje, jest również przechwytywany wraz z delegatem i będzie używany podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-248">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="3abd0-249">W przeciwnym razie nie jestprzechwytywane.<xref:System.Threading.SynchronizationContext></span><span class="sxs-lookup"><span data-stu-id="3abd0-249">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3abd0-250">Skojarzona <see cref="T:System.Threading.CancellationTokenSource" /> została usunięta.</span><span class="sxs-lookup"><span data-stu-id="3abd0-250">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3abd0-251"><paramref name="callback" />ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="3abd0-251"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-252">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-252">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-253">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-253">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="3abd0-254">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="3abd0-254">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3abd0-255">Zgłasza wyjątek <see cref="T:System.OperationCanceledException" /> , jeśli ten token ma żądanie anulowania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-255">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-256">Ta metoda zapewnia funkcje równoważne:</span><span class="sxs-lookup"><span data-stu-id="3abd0-256">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="3abd0-257">C#</span><span class="sxs-lookup"><span data-stu-id="3abd0-257">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3abd0-258">Token ma żądanie anulowania.</span><span class="sxs-lookup"><span data-stu-id="3abd0-258">The token has had cancellation requested.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3abd0-259">Skojarzona <see cref="T:System.Threading.CancellationTokenSource" /> została usunięta.</span><span class="sxs-lookup"><span data-stu-id="3abd0-259">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-260">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-260">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-261">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-261">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md"><span data-ttu-id="3abd0-262">Instrukcje: Anulowanie zadania i jego elementów podrzędnych</span><span class="sxs-lookup"><span data-stu-id="3abd0-262">How to: Cancel a Task and Its Children</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegister">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration UnsafeRegister (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration UnsafeRegister(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnsafeRegister (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration UnsafeRegister(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.UnsafeRegister : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.UnsafeRegister (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="3abd0-263">Delegat do wykonania po <see cref="T:System.Threading.CancellationToken" /> anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-263">The delegate to execute when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="3abd0-264">Stan, który ma zostać przekazany <paramref name="callback" /> do momentu wywołania obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-264">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span>  <span data-ttu-id="3abd0-265">Może to być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3abd0-265">This may be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="3abd0-266">Rejestruje delegata, który jest wywoływany <see cref="T:System.Threading.CancellationToken" /> po anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-266">Registers a delegate that is called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="3abd0-267">Obiekt, którego można użyć do wyrejestrowania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-267">An object that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
            If this token is already in the canceled state, the delegate is run immediately and synchronously.
            Any exception the delegate generates is propagated out of this method call.
            
<span data-ttu-id="3abd0-268"><xref:System.Threading.ExecutionContext> Nie przechwycono ani nie przepływa do wywołania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="3abd0-268">The  <xref:System.Threading.ExecutionContext> is not captured nor flowed to the callback's invocation.</span></span>
            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3abd0-269"><paramref name="callback" />ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="3abd0-269"><paramref name="callback" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3abd0-270"><see cref="T:System.Threading.WaitHandle" /> Pobiera, który jest sygnalizowane po anulowaniu tokenu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-270">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></summary>
        <value><span data-ttu-id="3abd0-271"><see cref="T:System.Threading.WaitHandle" /> Jest to sygnalizowane po anulowaniu tokenu.</span><span class="sxs-lookup"><span data-stu-id="3abd0-271">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3abd0-272">Uzyskanie dostępu do tej właściwości <xref:System.Threading.WaitHandle> powoduje wystąpienie wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="3abd0-272">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="3abd0-273">Preferowanym rozwiązaniem jest użycie tej właściwości tylko wtedy, gdy jest to konieczne, a następnie oddysponowanie skojarzonego <xref:System.Threading.CancellationTokenSource> wystąpienia z najwcześniejszą szansą (likwidacja źródła spowoduje jego likwidację).</span><span class="sxs-lookup"><span data-stu-id="3abd0-273">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="3abd0-274">Uchwyt nie powinien być zamknięty ani usunięty bezpośrednio.</span><span class="sxs-lookup"><span data-stu-id="3abd0-274">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3abd0-275">Skojarzona <see cref="T:System.Threading.CancellationTokenSource" /> została usunięta.</span><span class="sxs-lookup"><span data-stu-id="3abd0-275">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3abd0-276">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="3abd0-276">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3abd0-277">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="3abd0-277">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/6e2aa49b-fc84-4bcf-962b-17db98b7edcb"><span data-ttu-id="3abd0-278">Instrukcje: Nasłuchiwanie żądań anulowania z dojściami oczekiwania</span><span class="sxs-lookup"><span data-stu-id="3abd0-278">How to: Listen for Cancellation Requests That Have Wait Handles</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>