<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e3d7f1b32c93ee6a846ae19f351082e292a90426" /><Meta Name="ms.sourcegitcommit" Value="3efce15f3841385ee3ba24bd71ff0c0cf9a47815" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/03/2019" /><Meta Name="ms.locfileid" Value="58874556" /></Metadata><TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="850cc-101">Propaguje powiadomienie, które operacje powinny być anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-101">Propagates notification that operations should be canceled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-102">A <xref:System.Threading.CancellationToken> umożliwia kooperatywne anulowanie między wątkami, elementów roboczych puli wątków, lub <xref:System.Threading.Tasks.Task> obiektów.</span><span class="sxs-lookup"><span data-stu-id="850cc-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="850cc-103">Utwórz token anulowania przez utworzenie wystąpienia <xref:System.Threading.CancellationTokenSource> obiektu, który zarządza tokenów anulowania pobierane z jego <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="850cc-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="850cc-104">Możesz następnie przekazać token anulowania do dowolnej liczby wątków, zadań lub operacji, które mają otrzymywać powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="850cc-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="850cc-105">Token nie można zainicjować anulowanie.</span><span class="sxs-lookup"><span data-stu-id="850cc-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="850cc-106">Kiedy wywołuje obiekt-właściciel <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> na każdej kopii token anulowania jest właściwością `true`.</span><span class="sxs-lookup"><span data-stu-id="850cc-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="850cc-107">Obiekty, które otrzyma powiadomienie może odpowiadać w jakikolwiek sposób jest odpowiednia.</span><span class="sxs-lookup"><span data-stu-id="850cc-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="850cc-108">Aby uzyskać więcej informacji i przykładów kodu zobacz [anulowanie w zarządzanych wątkach](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="850cc-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="850cc-109">W poniższym przykładzie użyto generator liczb losowych do emulowania aplikacji zbierania danych, odczytująca jedenaście instrumencie 10 wartości całkowitych.</span><span class="sxs-lookup"><span data-stu-id="850cc-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="850cc-110">Wartość zero wskazuje, że pomiar nie powiodło się dla jednego dokumentu, obliczona w takim przypadku można anulować operację i nie oznacza ogólne.</span><span class="sxs-lookup"><span data-stu-id="850cc-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="850cc-111">Aby obsłużyć możliwe anulowanie operacji, przykład tworzy <xref:System.Threading.CancellationTokenSource> obiektu, która generuje token anulowania, który jest przekazywany do <xref:System.Threading.Tasks.TaskFactory> obiektu.</span><span class="sxs-lookup"><span data-stu-id="850cc-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="850cc-112"><xref:System.Threading.Tasks.TaskFactory> Obiektu z kolei przekazuje token anulowania do poszczególnych zadań odpowiedzialny za zbieranie odczyty dla określonego dokumentu.</span><span class="sxs-lookup"><span data-stu-id="850cc-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="850cc-113"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> Metoda jest wywoływana, aby upewnić się, że średnia jest obliczana tylko wtedy, gdy wszystkie odczyty zebrano zostały pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="850cc-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="850cc-114">Jeśli zadanie ma nie, ponieważ zostało anulowane, wywołanie <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> metoda zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="850cc-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="850cc-115">Wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Threading.CancellationToken" /> są odporne na wątki i mogą być używane jednocześnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="850cc-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-116">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-116">Cancellation</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-117">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-117">Task Cancellation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled"><span data-ttu-id="850cc-118">Stanem anulowane, tokenu.</span><span class="sxs-lookup"><span data-stu-id="850cc-118">The canceled state for the token.</span></span></param>
        <summary><span data-ttu-id="850cc-119">Inicjuje <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-119">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-120">Tokeny utworzonych za pomocą tego konstruktora pozostanie ze stanem anulowane, określony przez `canceled` parametru.</span><span class="sxs-lookup"><span data-stu-id="850cc-120">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="850cc-121">Jeśli `canceled` jest `false`, zarówno <xref:System.Threading.CancellationToken.CanBeCanceled%2A> i <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> będzie `false`.</span><span class="sxs-lookup"><span data-stu-id="850cc-121">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="850cc-122">Jeśli `canceled` jest `true`, zarówno <xref:System.Threading.CancellationToken.CanBeCanceled%2A> i <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> będzie `true`.</span><span class="sxs-lookup"><span data-stu-id="850cc-122">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-123">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-123">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-124">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-124">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="850cc-125">Pobiera informacje, czy ten token jest może być ze stanem anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-125">Gets whether this token is capable of being in the canceled state.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="850cc-126">Jeśli ten token może być ze stanem anulowane; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-126">if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-127">Jeśli <xref:System.Threading.CancellationToken.CanBeCanceled%2A> zwraca `false`, ma żadnej gwarancji, że token nigdy nie przejdą do stanem anulowane, co oznacza, że <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> nigdy nie zwróci `true`.</span><span class="sxs-lookup"><span data-stu-id="850cc-127">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="850cc-128">Token anulowania, który nie może być anulowany jest zwróconą przez statyczną <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="850cc-128">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="850cc-129">Ta właściwość opcjonalnie służy do określenia, czy token anulowania, może być anulowane przed zbadaniem wartość <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> właściwości w celu określenia, czy zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-129">You can optionally use this property to determine whether a cancellation token can be canceled before examining the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-130">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-130">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-131">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-131">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="850cc-132">Określa, czy bieżący <see cref="T:System.Threading.CancellationToken" /> wystąpienie jest równe określony token.</span><span class="sxs-lookup"><span data-stu-id="850cc-132">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="850cc-133">Inny obiekt do porównania z tym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="850cc-133">The other object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="850cc-134">Określa, czy bieżący <see cref="T:System.Threading.CancellationToken" /> wystąpienie jest równe określonej <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-134">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="850cc-135">Jeśli <paramref name="other" /> jest <see cref="T:System.Threading.CancellationToken" /> i, jeśli dwa wystąpienia są równe; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-135">if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="850cc-136">Zobacz sekcję Spostrzeżenia, aby uzyskać więcej informacji.</span><span class="sxs-lookup"><span data-stu-id="850cc-136">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="850cc-137">Dwa tokeny anulowania są równe, jeśli spełniony jest jeden z następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="850cc-137">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="850cc-138">Są one skojarzone z tym samym <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="850cc-138">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="850cc-139">One zostały oba zbudowany z publicznego <xref:System.Threading.CancellationToken> konstruktorów i ich <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="850cc-139">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="850cc-140">Wartość obu tokenów anulowania <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="850cc-140">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="850cc-141">Skojarzone <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="850cc-141">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-142">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-142">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-143">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-143">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="850cc-144">Druga <see cref="T:System.Threading.CancellationToken" /> do porównania z tym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="850cc-144">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="850cc-145">Określa, czy bieżący <see cref="T:System.Threading.CancellationToken" /> wystąpienie jest równe określony token.</span><span class="sxs-lookup"><span data-stu-id="850cc-145">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="850cc-146">Jeśli wystąpienia nie są równe; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-146">if the instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="850cc-147">Zobacz sekcję Spostrzeżenia, aby uzyskać więcej informacji.</span><span class="sxs-lookup"><span data-stu-id="850cc-147">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="850cc-148">Dwa tokeny anulowania są równe, jeśli spełniony jest jeden z następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="850cc-148">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="850cc-149">Są one skojarzone z tym samym <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="850cc-149">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="850cc-150">One zostały oba zbudowany z publicznego <xref:System.Threading.CancellationToken> konstruktorów i ich <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="850cc-150">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="850cc-151">Wartość obu tokenów anulowania <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="850cc-151">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-152">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-152">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-153">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-153">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="850cc-154">Pełni rolę funkcji skrótu dla <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-154">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="850cc-155">Wartość skrótu dla bieżącego <see cref="T:System.Threading.CancellationToken" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="850cc-155">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="850cc-156">Pobiera informacje, czy zażądano anulowania, dla tego tokenu.</span><span class="sxs-lookup"><span data-stu-id="850cc-156">Gets whether cancellation has been requested for this token.</span></span></summary>
        <value><see langword="true" /> <span data-ttu-id="850cc-157">żądanie dla tego tokena; jeśli ma odwołania w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-157">if cancellation has been requested for this token; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-158">Ta właściwość wskazuje, czy zażądano anulowania dla tego tokenu za pośrednictwem tokenu zbudowane początkowo w stanem anulowane, lub wywoływania <xref:System.Threading.CancellationTokenSource.Cancel%2A> na skojarzonej z tokenu <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="850cc-158">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="850cc-159">Jeśli ta właściwość jest `true`, tylko gwarantuje, że zażądano anulowania.</span><span class="sxs-lookup"><span data-stu-id="850cc-159">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="850cc-160">Nie gwarantuje, że każdego zarejestrowanego programu obsługi zakończenia ani żądań anulowania została zakończona, propagowanie do całej obsługi zarejestrowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-160">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="850cc-161">Dodatkowe synchronizacji mogą być wymagane, szczególnie w sytuacjach, gdzie obiekty powiązane są anulowane, jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="850cc-161">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="850cc-162">Poniżej przedstawiono prosty przykład, który uruchamia proces serwera do <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> właściwość zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="850cc-162">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="850cc-163">Przykład tworzy <xref:System.Threading.CancellationTokenSource> obiektu, które kontrolują dostęp do tokenu anulowania.</span><span class="sxs-lookup"><span data-stu-id="850cc-163">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="850cc-164">Definiuje dwie procedury wątku.</span><span class="sxs-lookup"><span data-stu-id="850cc-164">It then defines two thread procedures.</span></span> <span data-ttu-id="850cc-165">Pierwszy jest zdefiniowany jako wyrażenie lambda, które pul klawiatury i, gdy zostanie naciśnięty klawisz "C", wywołuje <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> można ustawić token anulowania do anulowania stanu.</span><span class="sxs-lookup"><span data-stu-id="850cc-165">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="850cc-166">Drugą jest metodą sparametryzowane `ServerClass.StaticMethod`, który wykonuje pętli do <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="850cc-166">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="850cc-167">Główny wątek następnie rozpoczyna się dwoma wątkami i bloków do wątku, który wykonuje `ServerClass.StaticMethod` metoda kończy.</span><span class="sxs-lookup"><span data-stu-id="850cc-167">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-168">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-168">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-169">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-169">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="850cc-170">Zwraca pustą <see cref="T:System.Threading.CancellationToken" /> wartość.</span><span class="sxs-lookup"><span data-stu-id="850cc-170">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span></span></summary>
        <value><span data-ttu-id="850cc-171">Token anulowania puste.</span><span class="sxs-lookup"><span data-stu-id="850cc-171">An empty cancellation token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-172">Token anulowania, zwracane przez tę właściwość nie może być anulowany; oznacza to, że jego <xref:System.Threading.CancellationToken.CanBeCanceled%2A> właściwość `false`.</span><span class="sxs-lookup"><span data-stu-id="850cc-172">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="850cc-173">Można również użyć języka C# [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) instrukcję, aby utworzyć token anulowania puste.</span><span class="sxs-lookup"><span data-stu-id="850cc-173">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="850cc-174">Dwa tokeny anulowania pusty zawsze są równe.</span><span class="sxs-lookup"><span data-stu-id="850cc-174">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-175">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-175">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-176">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-176">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="850cc-177">Pierwsze wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="850cc-177">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="850cc-178">Drugie wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="850cc-178">The second instance.</span></span></param>
        <summary><span data-ttu-id="850cc-179">Określa, czy dwa <see cref="T:System.Threading.CancellationToken" /> wystąpień są takie same.</span><span class="sxs-lookup"><span data-stu-id="850cc-179">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="850cc-180">Jeśli wystąpienia nie są równe; w przeciwnym razie <see langword="false" /> zobacz sekcję Spostrzeżenia, aby uzyskać więcej informacji.</span><span class="sxs-lookup"><span data-stu-id="850cc-180">if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="850cc-181">Dwa tokeny anulowania są równe, jeśli spełniony jest jeden z następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="850cc-181">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="850cc-182">Są one skojarzone z tym samym <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="850cc-182">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="850cc-183">One zostały oba zbudowany z publicznego <xref:System.Threading.CancellationToken> konstruktorów i ich <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> wartości są równe.</span><span class="sxs-lookup"><span data-stu-id="850cc-183">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="850cc-184">Wartość obu tokenów anulowania <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="850cc-184">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="850cc-185">Skojarzone <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="850cc-185">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-186">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-186">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-187">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-187">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="850cc-188">Pierwsze wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="850cc-188">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="850cc-189">Drugie wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="850cc-189">The second instance.</span></span></param>
        <summary><span data-ttu-id="850cc-190">Określa, czy dwa <see cref="T:System.Threading.CancellationToken" /> wystąpienia nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="850cc-190">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span></span></summary>
        <returns><see langword="true" /> <span data-ttu-id="850cc-191">Jeśli wystąpienia nie są równe; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-191">if the instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="850cc-192">Definicję równości <xref:System.Threading.CancellationToken.Equals%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="850cc-192">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="850cc-193">Skojarzone <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="850cc-193">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-194">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-194">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-195">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-195">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="850cc-196">Rejestruje delegata, która zostanie wywołana kiedy to <see cref="T:System.Threading.CancellationToken" /> zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-196">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-197">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-197">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-198">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-198">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="850cc-199">Delegat do wykonania, kiedy <see cref="T:System.Threading.CancellationToken" /> zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <summary><span data-ttu-id="850cc-200">Rejestruje delegata, która zostanie wywołana kiedy to <see cref="T:System.Threading.CancellationToken" /> zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-200">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="850cc-201"><see cref="T:System.Threading.CancellationTokenRegistration" /> Wystąpienia, który może służyć do wyrejestrowania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="850cc-201">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-202">Jeśli ten token jest już ze stanem anulowane, delegat zostanie uruchomiona natychmiast.</span><span class="sxs-lookup"><span data-stu-id="850cc-202">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="850cc-203">Każdego wyjątku, generowanych przez delegat będzie propagowane poza wywołanie tej metody.</span><span class="sxs-lookup"><span data-stu-id="850cc-203">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="850cc-204">Bieżący <xref:System.Threading.ExecutionContext> są przechwytywane oraz delegata i będą używane podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="850cc-204">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="850cc-205">Bieżący <xref:System.Threading.SynchronizationContext> nie są przechwytywane.</span><span class="sxs-lookup"><span data-stu-id="850cc-205">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="850cc-206">Skojarzone <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="850cc-206">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> <span data-ttu-id="850cc-207">ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="850cc-207">is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-208">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-208">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-209">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-209">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="850cc-210">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="850cc-210">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="850cc-211">Delegat do wykonania, kiedy <see cref="T:System.Threading.CancellationToken" /> zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-211">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="850cc-212">Wartość, która wskazuje, czy chcesz przechwycić bieżący <see cref="T:System.Threading.SynchronizationContext" /> i używać go podczas wywoływania <paramref name="callback" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-212">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="850cc-213">Rejestruje delegata, która zostanie wywołana kiedy to <see cref="T:System.Threading.CancellationToken" /> zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-213">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="850cc-214"><see cref="T:System.Threading.CancellationTokenRegistration" /> Wystąpienia, który może służyć do wyrejestrowania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="850cc-214">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-215">Jeśli ten token jest już ze stanem anulowane, delegat zostanie uruchomiona natychmiast.</span><span class="sxs-lookup"><span data-stu-id="850cc-215">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="850cc-216">Każdego wyjątku, generowanych przez delegat będzie propagowane poza wywołanie tej metody.</span><span class="sxs-lookup"><span data-stu-id="850cc-216">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="850cc-217">Bieżący <xref:System.Threading.ExecutionContext> są przechwytywane oraz delegata i będą używane podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="850cc-217">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="850cc-218">Jeśli `useSynchronizationContext` jest `true`, bieżący <xref:System.Threading.SynchronizationContext>, jeśli jeden istnieje, również są przechwytywane oraz delegata i będą używane podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="850cc-218">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="850cc-219">W przeciwnym razie <xref:System.Threading.SynchronizationContext> nie są przechwytywane.</span><span class="sxs-lookup"><span data-stu-id="850cc-219">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="850cc-220">Skojarzone <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="850cc-220">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> <span data-ttu-id="850cc-221">ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="850cc-221">is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-222">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-222">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-223">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-223">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="850cc-224">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="850cc-224">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="850cc-225">Delegat do wykonania, kiedy <see cref="T:System.Threading.CancellationToken" /> zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-225">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="850cc-226">Stan do przekazania do <paramref name="callback" /> gdy obiekt delegowany jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="850cc-226">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="850cc-227">Może to być wartość null.</span><span class="sxs-lookup"><span data-stu-id="850cc-227">This may be null.</span></span></param>
        <summary><span data-ttu-id="850cc-228">Rejestruje delegata, która zostanie wywołana kiedy to <see cref="T:System.Threading.CancellationToken" /> zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-228">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="850cc-229"><see cref="T:System.Threading.CancellationTokenRegistration" /> Wystąpienia, który może służyć do wyrejestrowania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="850cc-229">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-230">Jeśli ten token jest już ze stanem anulowane, delegat zostanie uruchomiona natychmiast.</span><span class="sxs-lookup"><span data-stu-id="850cc-230">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="850cc-231">Każdego wyjątku, generowanych przez delegat będzie propagowane poza wywołanie tej metody.</span><span class="sxs-lookup"><span data-stu-id="850cc-231">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="850cc-232">Bieżący <xref:System.Threading.ExecutionContext> są przechwytywane oraz delegata i będą używane podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="850cc-232">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="850cc-233">Bieżący <xref:System.Threading.SynchronizationContext> nie są przechwytywane.</span><span class="sxs-lookup"><span data-stu-id="850cc-233">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="850cc-234">Skojarzone <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="850cc-234">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> <span data-ttu-id="850cc-235">ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="850cc-235">is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-236">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-236">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-237">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-237">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="850cc-238">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="850cc-238">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="850cc-239">Delegat do wykonania, kiedy <see cref="T:System.Threading.CancellationToken" /> zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-239">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="850cc-240">Stan do przekazania do <paramref name="callback" /> gdy obiekt delegowany jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="850cc-240">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="850cc-241">Może to być wartość null.</span><span class="sxs-lookup"><span data-stu-id="850cc-241">This may be null.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="850cc-242">Wartość logiczna wskazująca, czy do przechwytywania bieżącego <see cref="T:System.Threading.SynchronizationContext" /> i używać go podczas wywoływania <paramref name="callback" />.</span><span class="sxs-lookup"><span data-stu-id="850cc-242">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="850cc-243">Rejestruje delegata, która zostanie wywołana kiedy to <see cref="T:System.Threading.CancellationToken" /> zostało anulowane.</span><span class="sxs-lookup"><span data-stu-id="850cc-243">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="850cc-244"><see cref="T:System.Threading.CancellationTokenRegistration" /> Wystąpienia, który może służyć do wyrejestrowania wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="850cc-244">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-245">Jeśli ten token jest już ze stanem anulowane, delegat zostanie uruchomiona natychmiast.</span><span class="sxs-lookup"><span data-stu-id="850cc-245">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="850cc-246">Każdego wyjątku, generowanych przez delegat będzie propagowane poza wywołanie tej metody.</span><span class="sxs-lookup"><span data-stu-id="850cc-246">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="850cc-247">Bieżący <xref:System.Threading.ExecutionContext> są przechwytywane oraz delegata i będą używane podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="850cc-247">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="850cc-248">Jeśli `useSynchronizationContext` jest `true`, bieżący <xref:System.Threading.SynchronizationContext>, jeśli jeden istnieje, również są przechwytywane oraz delegata i będą używane podczas jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="850cc-248">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="850cc-249">W przeciwnym razie <xref:System.Threading.SynchronizationContext> nie są przechwytywane.</span><span class="sxs-lookup"><span data-stu-id="850cc-249">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="850cc-250">Skojarzone <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="850cc-250">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> <span data-ttu-id="850cc-251">ma wartość null.</span><span class="sxs-lookup"><span data-stu-id="850cc-251">is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-252">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-252">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-253">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-253">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="850cc-254">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="850cc-254">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="850cc-255">Zgłasza <see cref="T:System.OperationCanceledException" /> gdyby ten token ma zażądano anulowania.</span><span class="sxs-lookup"><span data-stu-id="850cc-255">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-256">Ta metoda bazuje na równoważne funkcje:</span><span class="sxs-lookup"><span data-stu-id="850cc-256">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="850cc-257">C#</span><span class="sxs-lookup"><span data-stu-id="850cc-257">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="850cc-258">Token miał zażądano anulowania.</span><span class="sxs-lookup"><span data-stu-id="850cc-258">The token has had cancellation requested.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="850cc-259">Skojarzone <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="850cc-259">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-260">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-260">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-261">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-261">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md"><span data-ttu-id="850cc-262">Instrukcje: Anulowanie zadania i jego elementów podrzędnych</span><span class="sxs-lookup"><span data-stu-id="850cc-262">How to: Cancel a Task and Its Children</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegister">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration UnsafeRegister (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration UnsafeRegister(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnsafeRegister (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration UnsafeRegister(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.UnsafeRegister : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.UnsafeRegister (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="850cc-263">Pobiera <see cref="T:System.Threading.WaitHandle" /> zasygnalizowania po anulowaniu tokenu.</span><span class="sxs-lookup"><span data-stu-id="850cc-263">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></summary>
        <value><span data-ttu-id="850cc-264">A <see cref="T:System.Threading.WaitHandle" /> zasygnalizowania po anulowaniu tokenu.</span><span class="sxs-lookup"><span data-stu-id="850cc-264">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="850cc-265">Dostęp do tej właściwości powoduje, że <xref:System.Threading.WaitHandle> z myślą o uruchamianiu.</span><span class="sxs-lookup"><span data-stu-id="850cc-265">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="850cc-266">Zaleca się tylko używać tej właściwości, gdy jest to konieczne i następnie usuń skojarzony <xref:System.Threading.CancellationTokenSource> wystąpienia w możliwie najkrótszym (disposing tego przydzielonego dojścia zlikwiduje źródła).</span><span class="sxs-lookup"><span data-stu-id="850cc-266">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="850cc-267">Dojście nie powinien zamknięte lub usunięciu bezpośrednio.</span><span class="sxs-lookup"><span data-stu-id="850cc-267">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="850cc-268">Skojarzone <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="850cc-268">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="850cc-269">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="850cc-269">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="850cc-270">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="850cc-270">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/6e2aa49b-fc84-4bcf-962b-17db98b7edcb"><span data-ttu-id="850cc-271">Instrukcje: Nasłuchiwanie żądań anulowania z dojściami oczekiwania</span><span class="sxs-lookup"><span data-stu-id="850cc-271">How to: Listen for Cancellation Requests That Have Wait Handles</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>