<Type Name="ThreadExceptionEventArgs" FullName="System.Threading.ThreadExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f672c8eb9235b3b4fcc0d7ecb7776b56eb28195a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58685319" /></Metadata><TypeSignature Language="C#" Value="public class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type ThreadExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia dane dla <see cref="E:System.Windows.Forms.Application.ThreadException" /> zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Element <xref:System.Threading.ThreadExceptionEventArgs> jest tworzony przez wątek, po wystąpieniu nieobsługiwanego wyjątku. <xref:System.Threading.ThreadExceptionEventArgs> zawiera <xref:System.Exception> który wystąpił.  
  
   
  
## Examples  
 Poniższy przykład umożliwia wywoływanie <xref:System.Windows.Forms.Application.ThreadException> zdarzeń, klikając pozycję `button1` w formularzu. Ten przykład tworzy dwie klasy. `ErrorHandler` Klasy tworzy formularz i przycisk, który wywołuje zdarzenie. `CustomExceptionHandler` Klasa dostarcza metody do obsługi wyjątków.  
  
 W `Main` w `ErrorHandler` klasy, kod tworzy nowe wystąpienie klasy, czyli obsługi wyjątków wystąpienia `CustomExceptionHandler`. Następnie wystąpienie zostanie dodany do zdarzenia, a aplikacja jest uruchomiona.  
  
 W `OnThreadException` method in Class metoda `CustomExceptionHandler` klasy, w przykładzie użyto `try...catch...finally` instrukcję, aby przetworzyć wyjątku. `ShowThreadExceptionDialog` Metoda tworzy komunikat do wyświetlenia i wyświetla go w oknie komunikatu.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.ThreadExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadExceptionEventArgs (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadExceptionEventArgs(Exception ^ t);" />
      <MemberSignature Language="F#" Value="new System.Threading.ThreadExceptionEventArgs : Exception -&gt; System.Threading.ThreadExceptionEventArgs" Usage="new System.Threading.ThreadExceptionEventArgs t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t"><see cref="T:System.Exception" /> Który wystąpił.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ThreadExceptionEventArgs" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład umożliwia wywoływanie <xref:System.Windows.Forms.Application.ThreadException> zdarzeń, klikając pozycję `button1` w formularzu. Ten przykład tworzy dwie klasy. `ErrorHandler` Klasy tworzy formularz i przycisk, który wywołuje zdarzenie. `CustomExceptionHandler` Klasa dostarcza metody do obsługi wyjątków.  
  
 W `Main` w `ErrorHandler` klasy, kod tworzy nowe wystąpienie klasy, czyli obsługi wyjątków wystąpienia `CustomExceptionHandler`. Następnie wystąpienie zostanie dodany do zdarzenia, a aplikacja jest uruchomiona.  
  
 W `OnThreadException` method in Class metoda `CustomExceptionHandler` klasy, w przykładzie użyto `try...catch...finally` instrukcję, aby przetworzyć wyjątku. `ShowThreadExceptionDialog` Metoda tworzy komunikat do wyświetlenia i wyświetla go w oknie komunikatu.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.ThreadStart" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Exception" /> który wystąpił.</summary>
        <value><see cref="T:System.Exception" /> Który wystąpił.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład umożliwia wywoływanie <xref:System.Windows.Forms.Application.ThreadException> zdarzeń, klikając pozycję `button1` w formularzu. Ten przykład tworzy dwie klasy. `ErrorHandler` Klasy tworzy formularz i przycisk, który wywołuje zdarzenie. `CustomExceptionHandler` Klasa dostarcza metody do obsługi wyjątków.  
  
 W `Main` w `ErrorHandler` klasy, kod tworzy nowe wystąpienie klasy, czyli obsługi wyjątków wystąpienia `CustomExceptionHandler`. Następnie wystąpienie zostanie dodany do zdarzenia, a aplikacja jest uruchomiona.  
  
 W `OnThreadException` method in Class metoda `CustomExceptionHandler` klasy, w przykładzie użyto `try...catch...finally` instrukcję, aby przetworzyć wyjątku. `ShowThreadExceptionDialog` Metoda tworzy komunikat do wyświetlenia i wyświetla go w oknie komunikatu.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>