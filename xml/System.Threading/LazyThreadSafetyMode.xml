<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1572f860069ab9a5fc15b40d017dc83c02cefdc1" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68392224" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Określa, <see cref="T:System.Lazy`1" /> jak wystąpienie synchronizuje dostęp między wieloma wątkami.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego wyliczenia, `mode` aby określić <xref:System.Lazy%601> parametr konstruktorów. Efekty wszystkich konstruktorów z synchronizacją wątków można opisać w warunkach tego wyliczenia, niezależnie od tego, czy mają `mode` one parametry.  
  
 Wystąpienie jest inicjowane przez określoną przez użytkownika metodę inicjującą lub przez konstruktora bez parametrów dla `T`. <xref:System.Lazy%601> Metoda inicjacji jest określana przez `valueFactory` parametr <xref:System.Lazy%601> konstruktora. Metoda zwraca wystąpienie elementu `T`, który jest typem opóźnieniem wystąpienia elementu. <xref:System.Lazy%601> Jeśli Konstruktor nie ma `valueFactory` parametru, do zainicjowania <xref:System.Lazy%601> wystąpienia `T` jest używany Konstruktor bez parametrów. W obu przypadkach Inicjalizacja odbywa się przy pierwszym wywołaniu <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości.  
  
 Oprócz określania bezpieczeństwa <xref:System.Lazy%601> wątku wystąpienia to wyliczenie ma wpływ na buforowanie wyjątków. Gdy wyjątki są buforowane dla <xref:System.Lazy%601> wystąpienia, uzyskasz tylko jedną szansę na zainicjowanie wystąpienia. Jeśli wyjątek jest zgłaszany podczas pierwszego wywołania <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości, ten wyjątek jest buforowany i ponownie zgłaszany we wszystkich kolejnych wywołaniach <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości. Zalety buforowania wyjątków polega na tym, że wszystkie dwa wątki zawsze uzyskują ten sam wynik nawet w przypadku wystąpienia błędów.  
  
 W przypadku określenia trybu PublicationOnly wyjątki nigdy nie są buforowane. W przypadku określenia wartości none lub ExecutionAndPublication buforowanie zależy od tego, czy określono metodę inicjacji, czy zezwolić na użycie konstruktora `T` bez parametrów. Określenie metody inicjującej umożliwia buforowanie wyjątków dla tych dwóch trybów. Metoda inicjacji może być bardzo prosta. Na przykład może wywołać konstruktora bez parametrów `T`dla: `new Lazy<Contents>(() => new Contents(), mode)` w C#, lub `New Lazy(Of Contents)(Function() New Contents())` w Visual Basic. Jeśli używasz konstruktora, który nie określa metody inicjacji, wyjątki, które są zgłaszane przez konstruktora bez parametrów dla `T` nie są buforowane. W poniższej tabeli zestawiono zachowanie buforowania wyjątków.  
  
|Tryb|Korzystanie z metody inicjującej|Używanie konstruktora bez parametrów dla`T`|  
|----------|---------------------------------|---------------------------------------|  
|Brak|Pozostaje|Niebuforowane|  
|PublicationOnly|Niebuforowane|Niebuforowane|  
|ExecutionAndPublication|Pozostaje|Niebuforowane|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Blokady są używane do zapewnienia, że tylko jeden wątek może inicjować <see cref="T:System.Lazy`1" /> wystąpienie w sposób bezpieczny wątkowo. Jeśli metoda inicjacji (lub Konstruktor bez parametrów nie ma metody inicjującej) używa wewnętrznych blokad, mogą wystąpić zakleszczenia. Jeśli używasz <see cref="T:System.Lazy`1" /> konstruktora, który określa metodę inicjującą (<paramref name="valueFactory" /> parametr) i jeśli metoda inicjacji zgłasza wyjątek (lub nie może obsłużyć wyjątku) przy <see cref="P:System.Lazy`1.Value" /> pierwszym wywołaniu właściwości, a następnie wyjątek jest buforowany i zgłaszany ponownie w przypadku kolejnych wywołań <see cref="P:System.Lazy`1.Value" /> właściwości. Jeśli używasz <see cref="T:System.Lazy`1" /> konstruktora, który nie określa metody inicjacji, wyjątki, które są zgłaszane przez konstruktora bez parametrów dla <paramref name="T" /> nie są buforowane. W takim przypadku kolejne wywołanie <see cref="P:System.Lazy`1.Value" /> właściwości może pomyślnie <see cref="T:System.Lazy`1" /> inicjować wystąpienie. Jeśli metoda inicjacji cyklicznie uzyskuje dostęp <see cref="P:System.Lazy`1.Value" /> do właściwości <see cref="T:System.Lazy`1" /> wystąpienia, <see cref="T:System.InvalidOperationException" /> jest zgłaszany.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><see cref="T:System.Lazy`1" /> Wystąpienie nie jest bezpieczne wątkowo. Jeśli wystąpienie jest dostępne z wielu wątków, jego zachowanie jest niezdefiniowane. Tego trybu należy używać tylko wtedy, gdy wysoka wydajność jest <see cref="T:System.Lazy`1" /> istotna, a wystąpienie jest gwarantowane nigdy nie do zainicjowania z więcej niż jednego wątku. Jeśli używasz <see cref="T:System.Lazy`1" /> konstruktora, który określa metodę inicjującą (<paramref name="valueFactory" /> parametr) i jeśli metoda inicjacji zgłasza wyjątek (lub nie może obsłużyć wyjątku) przy <see cref="P:System.Lazy`1.Value" /> pierwszym wywołaniu właściwości, a następnie wyjątek jest buforowany i zgłaszany ponownie w przypadku kolejnych wywołań <see cref="P:System.Lazy`1.Value" /> właściwości. Jeśli używasz <see cref="T:System.Lazy`1" /> konstruktora, który nie określa metody inicjacji, wyjątki, które są zgłaszane przez konstruktora bez parametrów dla <paramref name="T" /> nie są buforowane. W takim przypadku kolejne wywołanie <see cref="P:System.Lazy`1.Value" /> właściwości może pomyślnie <see cref="T:System.Lazy`1" /> inicjować wystąpienie. Jeśli metoda inicjacji cyklicznie uzyskuje dostęp <see cref="P:System.Lazy`1.Value" /> do właściwości <see cref="T:System.Lazy`1" /> wystąpienia, <see cref="T:System.InvalidOperationException" /> jest zgłaszany.</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Gdy wiele wątków próbuje zainicjować <see cref="T:System.Lazy`1" /> wystąpienie jednocześnie, wszystkie wątki mogą uruchamiać metodę inicjacji (lub konstruktora bez parametrów, jeśli nie ma metody inicjacji). Pierwszy wątek do ukończenia inicjalizacji ustawia wartość <see cref="T:System.Lazy`1" /> wystąpienia. Ta wartość jest zwracana do innych wątków, które jednocześnie uruchomiły metodę inicjacji, chyba że metoda inicjacji zgłosi wyjątki dla tych wątków. Wszystkie wystąpienia <paramref name="T" /> , które zostały utworzone przez konkurujące wątki, są odrzucane. Jeśli metoda inicjacji zgłosi wyjątek w dowolnym wątku, wyjątek jest propagowany z <see cref="P:System.Lazy`1.Value" /> właściwości tego wątku. Wyjątek nie jest buforowany. Wartość <see cref="P:System.Lazy`1.IsValueCreated" /> właściwości pozostaje <see langword="false" />, <see cref="P:System.Lazy`1.Value" /> a kolejne wywołania właściwości, przez wątek, w którym został zgłoszony wyjątek lub przez inne wątki, powodują ponowne uruchomienie metody inicjacji. Jeśli metoda inicjacji cyklicznie uzyskuje dostęp <see cref="P:System.Lazy`1.Value" /> do właściwości <see cref="T:System.Lazy`1" /> wystąpienia, żaden wyjątek nie jest zgłaszany.</summary>
      </Docs>
    </Member>
  </Members>
</Type>