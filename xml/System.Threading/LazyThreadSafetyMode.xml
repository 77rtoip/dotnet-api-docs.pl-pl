<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4502e79c5f83c66e066d94d6b0a8fddc75bfa4ea" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46646683" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Określa, jak <see cref="T:System.Lazy`1" /> wystąpienia synchronizuje dostęp między wieloma wątkami.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego wyliczenia, aby określić `mode` parametru <xref:System.Lazy%601> konstruktorów. Efekty wszystkie konstruktory synchronizacji wątków może być opisywana w kategoriach tego wyliczenia informację określającą, czy mają one `mode` parametrów.  
  
 A <xref:System.Lazy%601> wystąpienie jest inicjowane przez metodę inicjowania określonych przez użytkownika lub domyślnego konstruktora dla `T`. Metoda inicjująca jest określona przez `valueFactory` parametru <xref:System.Lazy%601> konstruktora. Metoda ta zwraca wystąpienie `T`, który jest typem, który opóźnieniem zostanie uruchomiony przez wystąpienie <xref:System.Lazy%601>. Jeśli nie ma konstruktora `valueFactory` parametr, domyślny konstruktor dla `T` służy do inicjowania <xref:System.Lazy%601> wystąpienia. W obu przypadkach inicjowania wystąpi przy pierwszym wywołaniu <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości.  
  
 Oprócz określenia bezpieczeństwo wątku <xref:System.Lazy%601> wystąpienie, to wyliczenie ma wpływ na buforowanie wyjątku. Kiedy wyjątki nie są buforowane <xref:System.Lazy%601> wypadku otrzymasz tylko jedną szansę, aby zainicjować wystąpienie. Jeśli wyjątek jest zgłaszany po raz pierwszy należy wywołać <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwość, czy wyjątek jest buforowana i zgłaszany ponownie na wszystkie kolejne wywołania <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości. Zaletą buforowania wyjątków jest żadnych dwoma wątkami zawsze ten sam wynik, nawet wtedy, gdy występują błędy.  
  
 Podczas określania trybu PublicationOnly wyjątki nigdy nie są buforowane. Po określeniu None lub ExecutionAndPublication, pamięć podręczna zależy od tego, czy określić metodę inicjalizacji, lub pozwolić domyślnego konstruktora dla `T` ma być używany. Określanie metody inicjującej umożliwia wyjątek buforowania dla tych dwóch trybów. Metoda inicjująca może być bardzo proste. Na przykład może wywołać konstruktora domyślnego dla `T`: `new Lazy<Contents>(() => new Contents(), mode)` w języku C# lub `New Lazy(Of Contents)(Function() New Contents())` w języku Visual Basic. Jeśli używasz konstruktora, który nie określa metodę inicjalizacji wyjątki wyrzucane przez domyślny konstruktor dla `T` nie są buforowane. W poniższej tabeli podsumowano zachowanie buforowania wyjątku.  
  
|Tryb|Za pomocą metody inicjującej|Przy użyciu domyślnego konstruktora dla `T`|  
|----------|---------------------------------|---------------------------------------|  
|Brak|Pamięci podręcznej|Nie pamięci podręcznej|  
|PublicationOnly|Nie pamięci podręcznej|Nie pamięci podręcznej|  
|ExecutionAndPublication|Pamięci podręcznej|Nie pamięci podręcznej|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicjalizacja z opóźnieniem</related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Blokady są używane, aby upewnić się, że można zainicjować tylko jednego wątku <see cref="T:System.Lazy`1" /> wystąpienia w sposób bezpieczny dla wątków. Jeśli metoda inicjująca (lub domyślnego konstruktora, jeśli nie istnieje metoda inicjowania) używa wewnętrznie blokad, zakleszczeń mogą wystąpić. Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który określa metodę inicjalizacji (<paramref name="valueFactory" /> parametru), i jeśli tej metody inicjowania zgłasza wyjątek (lub nie powiedzie się do obsługi wyjątku) pierwszy raz, możesz wywołać <see cref="P:System.Lazy`1.Value" /> właściwości, a następnie wyjątek jest pamięci podręcznej i ponownie wygenerowany w kolejnych wywołaniach <see cref="P:System.Lazy`1.Value" /> właściwości. Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który nie określa metodę inicjalizacji, wyjątki wyrzucane przez domyślny konstruktor dla <paramref name="T" /> nie są buforowane. W takim przypadku kolejne wywołanie <see cref="P:System.Lazy`1.Value" /> właściwość może zostać pomyślnie zainicjowany <see cref="T:System.Lazy`1" /> wystąpienia. Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <see cref="P:System.Lazy`1.Value" /> właściwość <see cref="T:System.Lazy`1" /> wypadku <see cref="T:System.InvalidOperationException" /> zgłaszany.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><see cref="T:System.Lazy`1" /> Wystąpienie nie jest bezpieczny dla wątków; Jeśli wystąpienie jest dostępny z wielu wątków, jego zachowanie jest niezdefiniowane. Użyj tego trybu, tylko wtedy, gdy jest to bezwzględnie o wysokiej wydajności i <see cref="T:System.Lazy`1" /> wystąpienia jest gwarantowane, nigdy nie można zainicjować z więcej niż jednego wątku. Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który określa metodę inicjalizacji (<paramref name="valueFactory" /> parametru), i jeśli tej metody inicjowania zgłasza wyjątek (lub nie powiedzie się do obsługi wyjątku) pierwszy raz, możesz wywołać <see cref="P:System.Lazy`1.Value" /> właściwości, a następnie wyjątek jest pamięci podręcznej i ponownie wygenerowany w kolejnych wywołaniach <see cref="P:System.Lazy`1.Value" /> właściwości. Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który nie określa metodę inicjalizacji, wyjątki wyrzucane przez domyślny konstruktor dla <paramref name="T" /> nie są buforowane. W takim przypadku kolejne wywołanie <see cref="P:System.Lazy`1.Value" /> właściwość może zostać pomyślnie zainicjowany <see cref="T:System.Lazy`1" /> wystąpienia. Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <see cref="P:System.Lazy`1.Value" /> właściwość <see cref="T:System.Lazy`1" /> wypadku <see cref="T:System.InvalidOperationException" /> zgłaszany.</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Gdy wiele wątków próbuje zainicjować <see cref="T:System.Lazy`1" /> wystąpienia jednocześnie wszystkie wątki mogą być uruchamiane przez metodę inicjowania (lub domyślnego konstruktora, jeśli nie istnieje metoda inicjowania). Pierwszym wątku, aby zakończyć inicjowanie ustawia wartość <see cref="T:System.Lazy`1" /> wystąpienia. Ta wartość jest zwracana dla innych wątków jednocześnie uruchomione przez metodę inicjowania, chyba że metoda inicjująca zgłasza wyjątki na te wątki. Wszystkie wystąpienia <paramref name="T" /> utworzonych konkurując wątki są odrzucane. Jeśli metoda inicjująca zgłasza wyjątek w jednym z wątków, wyjątek jest propagowany z <see cref="P:System.Lazy`1.Value" /> właściwości w tym wątku. Wyjątek nie jest buforowana. Wartość <see cref="P:System.Lazy`1.IsValueCreated" /> pozostaje właściwość <see langword="false" />i kolejnych wywołań <see cref="P:System.Lazy`1.Value" /> właściwości przez wątek, w którym został zgłoszony wyjątek lub przez inne wątki spowodować, że metoda inicjująca ponownie uruchomić. Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <see cref="P:System.Lazy`1.Value" /> właściwość <see cref="T:System.Lazy`1" /> wystąpienia, jest zgłaszany żaden wyjątek.</summary>
      </Docs>
    </Member>
  </Members>
</Type>