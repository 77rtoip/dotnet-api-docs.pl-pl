<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4502e79c5f83c66e066d94d6b0a8fddc75bfa4ea" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46646683" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="dbeab-101">Określa, jak <see cref="T:System.Lazy`1" /> wystąpienia synchronizuje dostęp między wieloma wątkami.</span><span class="sxs-lookup"><span data-stu-id="dbeab-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dbeab-102">Użyj tego wyliczenia, aby określić `mode` parametru <xref:System.Lazy%601> konstruktorów.</span><span class="sxs-lookup"><span data-stu-id="dbeab-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="dbeab-103">Efekty wszystkie konstruktory synchronizacji wątków może być opisywana w kategoriach tego wyliczenia informację określającą, czy mają one `mode` parametrów.</span><span class="sxs-lookup"><span data-stu-id="dbeab-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="dbeab-104">A <xref:System.Lazy%601> wystąpienie jest inicjowane przez metodę inicjowania określonych przez użytkownika lub domyślnego konstruktora dla `T`.</span><span class="sxs-lookup"><span data-stu-id="dbeab-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="dbeab-105">Metoda inicjująca jest określona przez `valueFactory` parametru <xref:System.Lazy%601> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="dbeab-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="dbeab-106">Metoda ta zwraca wystąpienie `T`, który jest typem, który opóźnieniem zostanie uruchomiony przez wystąpienie <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="dbeab-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="dbeab-107">Jeśli nie ma konstruktora `valueFactory` parametr, domyślny konstruktor dla `T` służy do inicjowania <xref:System.Lazy%601> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="dbeab-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="dbeab-108">W obu przypadkach inicjowania wystąpi przy pierwszym wywołaniu <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="dbeab-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="dbeab-109">Oprócz określenia bezpieczeństwo wątku <xref:System.Lazy%601> wystąpienie, to wyliczenie ma wpływ na buforowanie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="dbeab-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="dbeab-110">Kiedy wyjątki nie są buforowane <xref:System.Lazy%601> wypadku otrzymasz tylko jedną szansę, aby zainicjować wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="dbeab-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="dbeab-111">Jeśli wyjątek jest zgłaszany po raz pierwszy należy wywołać <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwość, czy wyjątek jest buforowana i zgłaszany ponownie na wszystkie kolejne wywołania <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="dbeab-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="dbeab-112">Zaletą buforowania wyjątków jest żadnych dwoma wątkami zawsze ten sam wynik, nawet wtedy, gdy występują błędy.</span><span class="sxs-lookup"><span data-stu-id="dbeab-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="dbeab-113">Podczas określania trybu PublicationOnly wyjątki nigdy nie są buforowane.</span><span class="sxs-lookup"><span data-stu-id="dbeab-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="dbeab-114">Po określeniu None lub ExecutionAndPublication, pamięć podręczna zależy od tego, czy określić metodę inicjalizacji, lub pozwolić domyślnego konstruktora dla `T` ma być używany.</span><span class="sxs-lookup"><span data-stu-id="dbeab-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="dbeab-115">Określanie metody inicjującej umożliwia wyjątek buforowania dla tych dwóch trybów.</span><span class="sxs-lookup"><span data-stu-id="dbeab-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="dbeab-116">Metoda inicjująca może być bardzo proste.</span><span class="sxs-lookup"><span data-stu-id="dbeab-116">The initialization method can be very simple.</span></span> <span data-ttu-id="dbeab-117">Na przykład może wywołać konstruktora domyślnego dla `T`: `new Lazy<Contents>(() => new Contents(), mode)` w języku C# lub `New Lazy(Of Contents)(Function() New Contents())` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="dbeab-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="dbeab-118">Jeśli używasz konstruktora, który nie określa metodę inicjalizacji wyjątki wyrzucane przez domyślny konstruktor dla `T` nie są buforowane.</span><span class="sxs-lookup"><span data-stu-id="dbeab-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="dbeab-119">W poniższej tabeli podsumowano zachowanie buforowania wyjątku.</span><span class="sxs-lookup"><span data-stu-id="dbeab-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="dbeab-120">Tryb</span><span class="sxs-lookup"><span data-stu-id="dbeab-120">Mode</span></span>|<span data-ttu-id="dbeab-121">Za pomocą metody inicjującej</span><span class="sxs-lookup"><span data-stu-id="dbeab-121">Using initialization method</span></span>|<span data-ttu-id="dbeab-122">Przy użyciu domyślnego konstruktora dla `T`</span><span class="sxs-lookup"><span data-stu-id="dbeab-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="dbeab-123">Brak</span><span class="sxs-lookup"><span data-stu-id="dbeab-123">None</span></span>|<span data-ttu-id="dbeab-124">Pamięci podręcznej</span><span class="sxs-lookup"><span data-stu-id="dbeab-124">Cached</span></span>|<span data-ttu-id="dbeab-125">Nie pamięci podręcznej</span><span class="sxs-lookup"><span data-stu-id="dbeab-125">Not cached</span></span>|  
|<span data-ttu-id="dbeab-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="dbeab-126">PublicationOnly</span></span>|<span data-ttu-id="dbeab-127">Nie pamięci podręcznej</span><span class="sxs-lookup"><span data-stu-id="dbeab-127">Not cached</span></span>|<span data-ttu-id="dbeab-128">Nie pamięci podręcznej</span><span class="sxs-lookup"><span data-stu-id="dbeab-128">Not cached</span></span>|  
|<span data-ttu-id="dbeab-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="dbeab-129">ExecutionAndPublication</span></span>|<span data-ttu-id="dbeab-130">Pamięci podręcznej</span><span class="sxs-lookup"><span data-stu-id="dbeab-130">Cached</span></span>|<span data-ttu-id="dbeab-131">Nie pamięci podręcznej</span><span class="sxs-lookup"><span data-stu-id="dbeab-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="dbeab-132">Inicjalizacja z opóźnieniem</span><span class="sxs-lookup"><span data-stu-id="dbeab-132">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="dbeab-133">Blokady są używane, aby upewnić się, że można zainicjować tylko jednego wątku <see cref="T:System.Lazy`1" /> wystąpienia w sposób bezpieczny dla wątków.</span><span class="sxs-lookup"><span data-stu-id="dbeab-133">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span></span> <span data-ttu-id="dbeab-134">Jeśli metoda inicjująca (lub domyślnego konstruktora, jeśli nie istnieje metoda inicjowania) używa wewnętrznie blokad, zakleszczeń mogą wystąpić.</span><span class="sxs-lookup"><span data-stu-id="dbeab-134">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span></span> <span data-ttu-id="dbeab-135">Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który określa metodę inicjalizacji (<paramref name="valueFactory" /> parametru), i jeśli tej metody inicjowania zgłasza wyjątek (lub nie powiedzie się do obsługi wyjątku) pierwszy raz, możesz wywołać <see cref="P:System.Lazy`1.Value" /> właściwości, a następnie wyjątek jest pamięci podręcznej i ponownie wygenerowany w kolejnych wywołaniach <see cref="P:System.Lazy`1.Value" /> właściwości.</span><span class="sxs-lookup"><span data-stu-id="dbeab-135">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="dbeab-136">Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który nie określa metodę inicjalizacji, wyjątki wyrzucane przez domyślny konstruktor dla <paramref name="T" /> nie są buforowane.</span><span class="sxs-lookup"><span data-stu-id="dbeab-136">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="dbeab-137">W takim przypadku kolejne wywołanie <see cref="P:System.Lazy`1.Value" /> właściwość może zostać pomyślnie zainicjowany <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="dbeab-137">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="dbeab-138">Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <see cref="P:System.Lazy`1.Value" /> właściwość <see cref="T:System.Lazy`1" /> wypadku <see cref="T:System.InvalidOperationException" /> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="dbeab-138">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="dbeab-139"><see cref="T:System.Lazy`1" /> Wystąpienie nie jest bezpieczny dla wątków; Jeśli wystąpienie jest dostępny z wielu wątków, jego zachowanie jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="dbeab-139">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span></span> <span data-ttu-id="dbeab-140">Użyj tego trybu, tylko wtedy, gdy jest to bezwzględnie o wysokiej wydajności i <see cref="T:System.Lazy`1" /> wystąpienia jest gwarantowane, nigdy nie można zainicjować z więcej niż jednego wątku.</span><span class="sxs-lookup"><span data-stu-id="dbeab-140">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span></span> <span data-ttu-id="dbeab-141">Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który określa metodę inicjalizacji (<paramref name="valueFactory" /> parametru), i jeśli tej metody inicjowania zgłasza wyjątek (lub nie powiedzie się do obsługi wyjątku) pierwszy raz, możesz wywołać <see cref="P:System.Lazy`1.Value" /> właściwości, a następnie wyjątek jest pamięci podręcznej i ponownie wygenerowany w kolejnych wywołaniach <see cref="P:System.Lazy`1.Value" /> właściwości.</span><span class="sxs-lookup"><span data-stu-id="dbeab-141">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="dbeab-142">Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który nie określa metodę inicjalizacji, wyjątki wyrzucane przez domyślny konstruktor dla <paramref name="T" /> nie są buforowane.</span><span class="sxs-lookup"><span data-stu-id="dbeab-142">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="dbeab-143">W takim przypadku kolejne wywołanie <see cref="P:System.Lazy`1.Value" /> właściwość może zostać pomyślnie zainicjowany <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="dbeab-143">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="dbeab-144">Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <see cref="P:System.Lazy`1.Value" /> właściwość <see cref="T:System.Lazy`1" /> wypadku <see cref="T:System.InvalidOperationException" /> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="dbeab-144">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="dbeab-145">Gdy wiele wątków próbuje zainicjować <see cref="T:System.Lazy`1" /> wystąpienia jednocześnie wszystkie wątki mogą być uruchamiane przez metodę inicjowania (lub domyślnego konstruktora, jeśli nie istnieje metoda inicjowania).</span><span class="sxs-lookup"><span data-stu-id="dbeab-145">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span></span> <span data-ttu-id="dbeab-146">Pierwszym wątku, aby zakończyć inicjowanie ustawia wartość <see cref="T:System.Lazy`1" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="dbeab-146">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="dbeab-147">Ta wartość jest zwracana dla innych wątków jednocześnie uruchomione przez metodę inicjowania, chyba że metoda inicjująca zgłasza wyjątki na te wątki.</span><span class="sxs-lookup"><span data-stu-id="dbeab-147">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span></span> <span data-ttu-id="dbeab-148">Wszystkie wystąpienia <paramref name="T" /> utworzonych konkurując wątki są odrzucane.</span><span class="sxs-lookup"><span data-stu-id="dbeab-148">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span></span> <span data-ttu-id="dbeab-149">Jeśli metoda inicjująca zgłasza wyjątek w jednym z wątków, wyjątek jest propagowany z <see cref="P:System.Lazy`1.Value" /> właściwości w tym wątku.</span><span class="sxs-lookup"><span data-stu-id="dbeab-149">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span></span> <span data-ttu-id="dbeab-150">Wyjątek nie jest buforowana.</span><span class="sxs-lookup"><span data-stu-id="dbeab-150">The exception is not cached.</span></span> <span data-ttu-id="dbeab-151">Wartość <see cref="P:System.Lazy`1.IsValueCreated" /> pozostaje właściwość <see langword="false" />i kolejnych wywołań <see cref="P:System.Lazy`1.Value" /> właściwości przez wątek, w którym został zgłoszony wyjątek lub przez inne wątki spowodować, że metoda inicjująca ponownie uruchomić.</span><span class="sxs-lookup"><span data-stu-id="dbeab-151">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span></span> <span data-ttu-id="dbeab-152">Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <see cref="P:System.Lazy`1.Value" /> właściwość <see cref="T:System.Lazy`1" /> wystąpienia, jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="dbeab-152">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>