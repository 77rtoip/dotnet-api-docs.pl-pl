<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LazyThreadSafetyMode.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifies how a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance synchronizes access among multiple threads.</source>
          <target state="translated">Określa sposób <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienia synchronizuje dostępu między wiele wątków.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Use this enumeration to specify the <ph id="ph1">`mode`</ph> parameter of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructors.</source>
          <target state="translated">To wyliczenie umożliwia określenie <ph id="ph1">`mode`</ph> parametr <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> konstruktorów.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have <ph id="ph1">`mode`</ph> parameters.</source>
          <target state="translated">Czy mają one pod względem tego wyliczenia można również opisać skutków wszystkie konstruktory synchronizacja wątku <ph id="ph1">`mode`</ph> parametrów.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance is initialized either by a user-specified initialization method or by the default constructor for <ph id="ph2">`T`</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> wystąpienie jest inicjowane przez metodę inicjowania określone przez użytkownika lub domyślnego konstruktora dla <ph id="ph2">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method is specified by the <ph id="ph1">`valueFactory`</ph> parameter of a <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> constructor.</source>
          <target state="translated">Metoda inicjowania jest określona przez <ph id="ph1">`valueFactory`</ph> parametr <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> konstruktora.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The method returns an instance of <ph id="ph1">`T`</ph>, which is the type that is lazily instantiated by the instance of <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>.</source>
          <target state="translated">Metoda zwraca wystąpienie klasy <ph id="ph1">`T`</ph>, który jest typem, który jest w trybie opóźnienia utworzone przez wystąpienie <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If a constructor does not have a <ph id="ph1">`valueFactory`</ph> parameter, the default constructor for <ph id="ph2">`T`</ph> is used to initialize the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">Jeśli nie ma konstruktora <ph id="ph1">`valueFactory`</ph> parametr, domyślnego konstruktora dla <ph id="ph2">`T`</ph> służy do inicjowania <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> wystąpienia.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In either case, initialization occurs the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">W obu przypadkach inicjowania wystąpi przy pierwszym wywołaniu <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>In addition to specifying the thread safety of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, this enumeration affects exception caching.</source>
          <target state="translated">Oprócz określenia bezpieczeństwo wątku <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> wystąpienie, to wyliczenie ma wpływ na buforowanie wyjątku.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When exceptions are cached for a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, you get only one chance to initialize the instance.</source>
          <target state="translated">Gdy wyjątki są buforowane dla <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> wystąpienia, zostanie wyświetlony tylko jeden możliwość inicjowania wystąpienia.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If an exception is thrown the first time you call the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property, that exception is cached and rethrown on all subsequent calls to the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Jeśli wyjątek jest zgłaszany po raz pierwszy należy wywołać <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> właściwości, czy wyjątek jest buforowany i zgłoszony na wszystkie kolejne wywołania <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</source>
          <target state="translated">Zaletą buforowania wyjątków jest to, czy jakieś wątki dwóch zawsze uzyskać ten sam rezultat, nawet w przypadku wystąpienia błędów.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify the PublicationOnly mode, exceptions are never cached.</source>
          <target state="translated">Po określeniu trybu PublicationOnly wyjątki nigdy nie są buforowane.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for <ph id="ph1">`T`</ph> to be used.</source>
          <target state="translated">Po określeniu None lub ExecutionAndPublication, buforowanie zależy od tego, czy określić metodę inicjalizacji lub pozwolić domyślnego konstruktora dla <ph id="ph1">`T`</ph> do użycia.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Specifying an initialization method enables exception caching for these two modes.</source>
          <target state="translated">Określanie metody inicjującej umożliwia buforowanie wyjątku dla tych dwóch trybów.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The initialization method can be very simple.</source>
          <target state="translated">Metoda inicjująca może być bardzo proste.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>For example, it might call the default constructor for <ph id="ph1">`T`</ph>: <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> in C#, or <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph> in Visual Basic.</source>
          <target state="translated">Na przykład może wywołać konstruktora domyślnego dla <ph id="ph1">`T`</ph>: <ph id="ph2">`new Lazy&lt;Contents&gt;(() =&gt; new Contents(), mode)`</ph> w języku C# lub <ph id="ph3">`New Lazy(Of Contents)(Function() New Contents())`</ph> w języku Visual Basic.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph1">`T`</ph> are not cached.</source>
          <target state="translated">Jeśli używasz konstruktora, który nie określa metodę inicjalizacji wyjątki, które są generowane przez domyślny konstruktor <ph id="ph1">`T`</ph> nie są buforowane.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>The following table summarizes exception caching behavior.</source>
          <target state="translated">W poniższej tabeli przedstawiono wyjątek zachowanie buforowania.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Mode</source>
          <target state="translated">Tryb</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using initialization method</source>
          <target state="translated">Za pomocą metody inicjującej</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Using default constructor for <ph id="ph1">`T`</ph></source>
          <target state="translated">Przy użyciu domyślnego konstruktora dla <ph id="ph1">`T`</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>None</source>
          <target state="translated">Brak</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">W pamięci podręcznej</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Nie w pamięci podręcznej</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>PublicationOnly</source>
          <target state="translated">PublicationOnly</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Nie w pamięci podręcznej</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Nie w pamięci podręcznej</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>ExecutionAndPublication</source>
          <target state="translated">ExecutionAndPublication</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Cached</source>
          <target state="translated">W pamięci podręcznej</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.LazyThreadSafetyMode">
          <source>Not cached</source>
          <target state="translated">Nie w pamięci podręcznej</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>Locks are used to ensure that only a single thread can initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance in a thread-safe manner.</source>
          <target state="translated">Blokady są używane, aby upewnić się, że można zainicjować tylko jednego wątku <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienia w sposób wątkowo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</source>
          <target state="translated">Jeśli metoda inicjowania (lub domyślnego konstruktora, jeśli nie istnieje metoda inicjowania) używane wewnętrznie blokad, może wystąpić zakleszczenia.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">Jeśli używasz <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> Konstruktor, który określa metodę inicjalizacji (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parametru), i jeśli metoda inicjowania zgłasza wyjątek (lub nie powiedzie się do obsługi wyjątku) pierwszy raz można wywołać <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwości, programu wyjątek jest buforowany i ponownie zgłoszony w kolejnych wywołań <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">Jeśli używasz <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> Konstruktor, który nie określa metodę inicjalizacji, wyjątki, które są generowane przez domyślny konstruktor <ph id="ph2">&lt;paramref name="T" /&gt;</ph> nie są buforowane.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">W takim przypadku kolejne wywołanie <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwość może zostać pomyślnie zainicjowany <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienia.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwość <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienia, <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> Wystąpienie nie jest bezpieczne dla wątków; Jeśli wystąpienie jest uzyskać dostęp wiele wątków, jego zachowanie jest niezdefiniowany.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>Use this mode only when high performance is crucial and the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is guaranteed never to be initialized from more than one thread.</source>
          <target state="translated">Tego trybu należy używać tylko wtedy, gdy kluczowy wysokiej wydajności i <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienia jest gwarantowane, nigdy nie można zainicjować z więcej niż jednego wątku.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that specifies an initialization method (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, then the exception is cached and thrown again on subsequent calls to the <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property.</source>
          <target state="translated">Jeśli używasz <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> Konstruktor, który określa metodę inicjalizacji (<ph id="ph2">&lt;paramref name="valueFactory" /&gt;</ph> parametru), i jeśli metoda inicjowania zgłasza wyjątek (lub nie powiedzie się do obsługi wyjątku) pierwszy raz można wywołać <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwości, programu wyjątek jest buforowany i ponownie zgłoszony w kolejnych wywołań <ph id="ph4">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If you use a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <ph id="ph2">&lt;paramref name="T" /&gt;</ph> are not cached.</source>
          <target state="translated">Jeśli używasz <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> Konstruktor, który nie określa metodę inicjalizacji, wyjątki, które są generowane przez domyślny konstruktor <ph id="ph2">&lt;paramref name="T" /&gt;</ph> nie są buforowane.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>In that case, a subsequent call to the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property might successfully initialize the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">W takim przypadku kolejne wywołanie <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwość może zostać pomyślnie zainicjowany <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienia.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.None">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, an <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> is thrown.</source>
          <target state="translated">Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwość <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienia, <ph id="ph3">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>When multiple threads try to initialize a <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</source>
          <target state="translated">Podczas próby zainicjowania wiele wątków <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienie równocześnie, wszystkie wątki mogą być uruchamiane metodę inicjowania (lub domyślnego konstruktora, jeśli nie istnieje metoda inicjowania).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The first thread to complete initialization sets the value of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">Pierwszym wątkiem ukończyć inicjalizacji ustawia wartość <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienia.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</source>
          <target state="translated">Ta wartość jest zwracana do innych wątków jednocześnie uruchomione metody inicjującej chyba, że metoda inicjowania zgłasza wyjątków na tych wątków.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>Any instances of <ph id="ph1">&lt;paramref name="T" /&gt;</ph> that were created by the competing threads are discarded.</source>
          <target state="translated">Wszystkie wystąpienia <ph id="ph1">&lt;paramref name="T" /&gt;</ph> utworzonych przez konkurujących wątków zostaną odrzucone.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method throws an exception on any thread, the exception is propagated out of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property on that thread.</source>
          <target state="translated">Jeśli metoda inicjująca zgłasza wyjątek w którymkolwiek wątku, wyjątek zostanie przekazane z <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwości w tym wątku.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The exception is not cached.</source>
          <target state="translated">Wyjątek nie są buforowane.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> property remains <ph id="ph2">&lt;see langword="false" /&gt;</ph>, and subsequent calls to the <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</source>
          <target state="translated">Wartość <ph id="ph1">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> pozostaje właściwości <ph id="ph2">&lt;see langword="false" /&gt;</ph>i kolejne wywołania <ph id="ph3">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwości, przez wątek, w której wystąpił wyjątek lub innych wątków powodują metody inicjującej ponownie uruchomić.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
          <source>If the initialization method recursively accesses the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property of the <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance, no exception is thrown.</source>
          <target state="translated">Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> właściwość <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> wystąpienia, nie jest wyjątek.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>