<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7b8cb3cb58c44ad9e2ea7abef87a229aed01ec6a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579229" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Określa sposób <see cref="T:System.Lazy`1" /> wystąpienia synchronizuje dostępu między wiele wątków.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To wyliczenie umożliwia określenie `mode` parametr <xref:System.Lazy%601> konstruktorów. Czy mają one pod względem tego wyliczenia można również opisać skutków wszystkie konstruktory synchronizacja wątku `mode` parametrów.  
  
 A <xref:System.Lazy%601> wystąpienie jest inicjowane przez metodę inicjowania określone przez użytkownika lub domyślnego konstruktora dla `T`. Metoda inicjowania jest określona przez `valueFactory` parametr <xref:System.Lazy%601> konstruktora. Metoda zwraca wystąpienie klasy `T`, który jest typem, który jest w trybie opóźnienia utworzone przez wystąpienie <xref:System.Lazy%601>. Jeśli nie ma konstruktora `valueFactory` parametr, domyślnego konstruktora dla `T` służy do inicjowania <xref:System.Lazy%601> wystąpienia. W obu przypadkach inicjowania wystąpi przy pierwszym wywołaniu <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości.  
  
 Oprócz określenia bezpieczeństwo wątku <xref:System.Lazy%601> wystąpienie, to wyliczenie ma wpływ na buforowanie wyjątku. Gdy wyjątki są buforowane dla <xref:System.Lazy%601> wystąpienia, zostanie wyświetlony tylko jeden możliwość inicjowania wystąpienia. Jeśli wyjątek jest zgłaszany po raz pierwszy należy wywołać <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości, czy wyjątek jest buforowany i zgłoszony na wszystkie kolejne wywołania <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> właściwości. Zaletą buforowania wyjątków jest to, czy jakieś wątki dwóch zawsze uzyskać ten sam rezultat, nawet w przypadku wystąpienia błędów.  
  
 Po określeniu trybu PublicationOnly wyjątki nigdy nie są buforowane. Po określeniu None lub ExecutionAndPublication, buforowanie zależy od tego, czy określić metodę inicjalizacji lub pozwolić domyślnego konstruktora dla `T` do użycia. Określanie metody inicjującej umożliwia buforowanie wyjątku dla tych dwóch trybów. Metoda inicjująca może być bardzo proste. Na przykład może wywołać konstruktora domyślnego dla `T`: `new Lazy<Contents>(() => new Contents(), mode)` w języku C# lub `New Lazy(Of Contents)(Function() New Contents())` w języku Visual Basic. Jeśli używasz konstruktora, który nie określa metodę inicjalizacji wyjątki, które są generowane przez domyślny konstruktor `T` nie są buforowane. W poniższej tabeli przedstawiono wyjątek zachowanie buforowania.  
  
|Tryb|Za pomocą metody inicjującej|Przy użyciu domyślnego konstruktora dla `T`|  
|----------|---------------------------------|---------------------------------------|  
|Brak|W pamięci podręcznej|Nie w pamięci podręcznej|  
|PublicationOnly|Nie w pamięci podręcznej|Nie w pamięci podręcznej|  
|ExecutionAndPublication|W pamięci podręcznej|Nie w pamięci podręcznej|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Blokady są używane, aby upewnić się, że można zainicjować tylko jednego wątku <see cref="T:System.Lazy`1" /> wystąpienia w sposób wątkowo. Jeśli metoda inicjowania (lub domyślnego konstruktora, jeśli nie istnieje metoda inicjowania) używane wewnętrznie blokad, może wystąpić zakleszczenia. Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który określa metodę inicjalizacji (<paramref name="valueFactory" /> parametru), i jeśli metoda inicjowania zgłasza wyjątek (lub nie powiedzie się do obsługi wyjątku) pierwszy raz można wywołać <see cref="P:System.Lazy`1.Value" /> właściwości, programu wyjątek jest buforowany i ponownie zgłoszony w kolejnych wywołań <see cref="P:System.Lazy`1.Value" /> właściwości. Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który nie określa metodę inicjalizacji, wyjątki, które są generowane przez domyślny konstruktor <paramref name="T" /> nie są buforowane. W takim przypadku kolejne wywołanie <see cref="P:System.Lazy`1.Value" /> właściwość może zostać pomyślnie zainicjowany <see cref="T:System.Lazy`1" /> wystąpienia. Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <see cref="P:System.Lazy`1.Value" /> właściwość <see cref="T:System.Lazy`1" /> wystąpienia, <see cref="T:System.InvalidOperationException" /> jest generowany.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <see cref="T:System.Lazy`1" /> Wystąpienie nie jest bezpieczne dla wątków; Jeśli wystąpienie jest uzyskać dostęp wiele wątków, jego zachowanie jest niezdefiniowany. Tego trybu należy używać tylko wtedy, gdy kluczowy wysokiej wydajności i <see cref="T:System.Lazy`1" /> wystąpienia jest gwarantowane, nigdy nie można zainicjować z więcej niż jednego wątku. Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który określa metodę inicjalizacji (<paramref name="valueFactory" /> parametru), i jeśli metoda inicjowania zgłasza wyjątek (lub nie powiedzie się do obsługi wyjątku) pierwszy raz można wywołać <see cref="P:System.Lazy`1.Value" /> właściwości, programu wyjątek jest buforowany i ponownie zgłoszony w kolejnych wywołań <see cref="P:System.Lazy`1.Value" /> właściwości. Jeśli używasz <see cref="T:System.Lazy`1" /> Konstruktor, który nie określa metodę inicjalizacji, wyjątki, które są generowane przez domyślny konstruktor <paramref name="T" /> nie są buforowane. W takim przypadku kolejne wywołanie <see cref="P:System.Lazy`1.Value" /> właściwość może zostać pomyślnie zainicjowany <see cref="T:System.Lazy`1" /> wystąpienia. Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <see cref="P:System.Lazy`1.Value" /> właściwość <see cref="T:System.Lazy`1" /> wystąpienia, <see cref="T:System.InvalidOperationException" /> jest generowany.</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Podczas próby zainicjowania wiele wątków <see cref="T:System.Lazy`1" /> wystąpienie równocześnie, wszystkie wątki mogą być uruchamiane metodę inicjowania (lub domyślnego konstruktora, jeśli nie istnieje metoda inicjowania). Pierwszym wątkiem ukończyć inicjalizacji ustawia wartość <see cref="T:System.Lazy`1" /> wystąpienia. Ta wartość jest zwracana do innych wątków jednocześnie uruchomione metody inicjującej chyba, że metoda inicjowania zgłasza wyjątków na tych wątków. Wszystkie wystąpienia <paramref name="T" /> utworzonych przez konkurujących wątków zostaną odrzucone. Jeśli metoda inicjująca zgłasza wyjątek w którymkolwiek wątku, wyjątek zostanie przekazane z <see cref="P:System.Lazy`1.Value" /> właściwości w tym wątku. Wyjątek nie są buforowane. Wartość <see cref="P:System.Lazy`1.IsValueCreated" /> pozostaje właściwości <see langword="false" />i kolejne wywołania <see cref="P:System.Lazy`1.Value" /> właściwości, przez wątek, w której wystąpił wyjątek lub innych wątków powodują metody inicjującej ponownie uruchomić. Jeśli rekursywnie metoda inicjowania uzyskuje dostęp do <see cref="P:System.Lazy`1.Value" /> właściwość <see cref="T:System.Lazy`1" /> wystąpienia, nie jest wyjątek.</summary>
      </Docs>
    </Member>
  </Members>
</Type>