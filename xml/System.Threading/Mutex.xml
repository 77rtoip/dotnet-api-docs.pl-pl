<Type Name="Mutex" FullName="System.Threading.Mutex">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6bce0feaf14f66f8608164cfa777620d7f3b329f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579835" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Mutex : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Mutex extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Mutex" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Mutex&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Mutex sealed : System::Threading::WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d49d3-101">Podstawowy synchronizacji, które może być również używane do synchronizacji międzyprocesowej.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d49d3-101">A synchronization primitive that can also be used for interprocess synchronization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-102">Po dwóch lub więcej wątków muszą uzyskać dostęp do udostępnionego zasobu w tym samym czasie, których system potrzebuje mechanizm synchronizacji, aby upewnić się, że tylko jeden wątek jednocześnie używa zasobu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-102">When two or more threads need to access a shared resource at the same time, the system needs a synchronization mechanism to ensure that only one thread at a time uses the resource.</span></span> <span data-ttu-id="d49d3-103"><xref:System.Threading.Mutex> Synchronizacja jest pierwotnych, który daje wyłącznego dostępu do udostępnionego zasobu tylko jednego wątku.</span><span class="sxs-lookup"><span data-stu-id="d49d3-103"><xref:System.Threading.Mutex> is a synchronization primitive that grants exclusive access to the shared resource to only one thread.</span></span> <span data-ttu-id="d49d3-104">Wątek nabędzie obiektu mutex, drugi wątku, który chce uzyskać tego obiektu mutex został wstrzymany, dopóki pierwszym wątkiem zwalnia obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-104">If a thread acquires a mutex, the second thread that wants to acquire that mutex is suspended until the first thread releases the mutex.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d49d3-105">Ten typ implementuje <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="d49d3-106">Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego.</span><span class="sxs-lookup"><span data-stu-id="d49d3-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="d49d3-107">Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> metody w `try` / `catch` bloku.</span><span class="sxs-lookup"><span data-stu-id="d49d3-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="d49d3-108">Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak `using` (w języku C#) lub `Using` (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="d49d3-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="d49d3-109">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu tematu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="d49d3-110">Można użyć <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> metoda żądania własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-110">You can use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method to request ownership of a mutex.</span></span> <span data-ttu-id="d49d3-111">Wywołania wątku bloki dopóki nie wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="d49d3-111">The calling thread blocks until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="d49d3-112">Obiektu mutex jest informowany wskazują, że nie jest właścicielem.</span><span class="sxs-lookup"><span data-stu-id="d49d3-112">The mutex is signaled to indicate that it is not owned.</span></span> <span data-ttu-id="d49d3-113">W takim przypadku <xref:System.Threading.WaitHandle.WaitOne%2A> metoda zwraca `true`, a wątek wywołujący przejmuje obiektu mutex i uzyskuje dostęp do zasobów chronionych przez obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-113">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true`, and the calling thread assumes ownership of the mutex and accesses the resource protected by the mutex.</span></span> <span data-ttu-id="d49d3-114">Po zakończeniu dostęp do zasobu, należy wywołać wątku <xref:System.Threading.Mutex.ReleaseMutex%2A> metodę, aby zwolnić prawo własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-114">When it has finished accessing the resource, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the mutex.</span></span> <span data-ttu-id="d49d3-115">W sekcji przykładów w pierwszym przykładzie przedstawiono tego wzorca.</span><span class="sxs-lookup"><span data-stu-id="d49d3-115">The first example in the Examples section illustrates this pattern.</span></span>  
  
-   <span data-ttu-id="d49d3-116">Limit czasu określony w wywołaniu <xref:System.Threading.WaitHandle.WaitOne%2A> metodę, która ma `millisecondsTimeout` lub `timeout` parametru upłynął.</span><span class="sxs-lookup"><span data-stu-id="d49d3-116">The time-out interval specified in the call to a <xref:System.Threading.WaitHandle.WaitOne%2A> method that has a `millisecondsTimeout` or `timeout` parameter has elapsed.</span></span> <span data-ttu-id="d49d3-117">W takim przypadku <xref:System.Threading.WaitHandle.WaitOne%2A> metoda zwraca `false`, a wątek wywołujący sprawia, że dalsze próby uzyskania prawa własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-117">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `false`, and the calling thread makes no further attempt to acquire ownership of the mutex.</span></span> <span data-ttu-id="d49d3-118">W takim przypadku należy struktury kodu tak, aby w wątku wywołującym odmówiono dostępu do zasobu, która jest chroniona przez obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-118">In this case, you should structure your code so that access to the resource that is protected by the mutex is denied to the calling thread.</span></span> <span data-ttu-id="d49d3-119">Ponieważ wątek nigdy nie uzyskać prawo własności obiektu mutex, nie należy wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-119">Because the thread never acquired ownership of the mutex, it must not call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span> <span data-ttu-id="d49d3-120">W sekcji przykładów w drugim przykładzie przedstawiono tego wzorca.</span><span class="sxs-lookup"><span data-stu-id="d49d3-120">The second example in the Examples section illustrates this pattern.</span></span>  
  
 <span data-ttu-id="d49d3-121"><xref:System.Threading.Mutex> Klasy wymusza tożsamości wątku, dlatego może być zwolnione obiektu mutex tylko przez wątek, do którego został uzyskany.</span><span class="sxs-lookup"><span data-stu-id="d49d3-121">The <xref:System.Threading.Mutex> class enforces thread identity, so a mutex can be released only by the thread that acquired it.</span></span> <span data-ttu-id="d49d3-122">Z kolei <xref:System.Threading.Semaphore> klasa nie obsługuje wymuszania tożsamości wątku.</span><span class="sxs-lookup"><span data-stu-id="d49d3-122">By contrast, the <xref:System.Threading.Semaphore> class does not enforce thread identity.</span></span> <span data-ttu-id="d49d3-123">Mutex również mogą być przekazywane między granicami domeny aplikacji.</span><span class="sxs-lookup"><span data-stu-id="d49d3-123">A mutex can also be passed across application domain boundaries.</span></span>  
  
 <span data-ttu-id="d49d3-124">Wątek, który jest właścicielem obiektu mutex może zażądać tego samego obiektu mutex w wywołaniach powtarzane <xref:System.Threading.WaitHandle.WaitOne%2A> bez blokowanie jego wykonania.</span><span class="sxs-lookup"><span data-stu-id="d49d3-124">The thread that owns a mutex can request the same mutex in repeated calls to <xref:System.Threading.WaitHandle.WaitOne%2A> without blocking its execution.</span></span> <span data-ttu-id="d49d3-125">Jednak należy wywołać wątku <xref:System.Threading.Mutex.ReleaseMutex%2A> metody taką samą liczbę razy, aby zwolnić prawo własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-125">However, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="d49d3-126">Ponieważ <xref:System.Threading.Mutex> klasa dziedziczy <xref:System.Threading.WaitHandle>, możesz także wywołać statycznych <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> i <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> metody synchronizujący dostęp do chronionych zasobów.</span><span class="sxs-lookup"><span data-stu-id="d49d3-126">Because the <xref:System.Threading.Mutex> class inherits from <xref:System.Threading.WaitHandle>, you can also call the static <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> and <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> methods to synchronize access to a protected resource.</span></span>  
  
 <span data-ttu-id="d49d3-127">Zakończenie wątku podczas będący właścicielem obiektu mutex, jest nazywany porzucony obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-127">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="d49d3-128">Stan obiektu mutex ustawiono sygnalizowane i następnego wątku oczekiwania pobiera własności.</span><span class="sxs-lookup"><span data-stu-id="d49d3-128">The state of the mutex is set to signaled, and the next waiting thread gets ownership.</span></span> <span data-ttu-id="d49d3-129">Począwszy od wersji 2.0 programu .NET Framework, <xref:System.Threading.AbandonedMutexException> jest zgłaszany w następnym wątku, który uzyskuje porzuconego elementu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-129">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the abandoned mutex.</span></span> <span data-ttu-id="d49d3-130">Przed programu .NET Framework w wersji 2.0 nie zgłoszono wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d49d3-130">Before version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="d49d3-131">Porzuconego elementu mutex często oznacza to poważny błąd w kodzie.</span><span class="sxs-lookup"><span data-stu-id="d49d3-131">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="d49d3-132">Wątek kończy działanie bez zwolnienia obiektu mutex, struktur danych chronionych przez obiektu mutex może być w stanie spójności.</span><span class="sxs-lookup"><span data-stu-id="d49d3-132">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="d49d3-133">Następnego wątku własności obiektu mutex żądania obsługi tego wyjątku i kontynuować, jeśli można sprawdzić integralność struktury danych.</span><span class="sxs-lookup"><span data-stu-id="d49d3-133">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="d49d3-134">W przypadku obiektu mutex systemowe porzuconego elementu mutex może wskazywać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</span><span class="sxs-lookup"><span data-stu-id="d49d3-134">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
 <span data-ttu-id="d49d3-135">Istnieją dwa typy muteksy: muteksy lokalne, które nienazwanych i nazwanych muteksy systemu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-135">Mutexes are of two types: local mutexes, which are unnamed, and named system mutexes.</span></span> <span data-ttu-id="d49d3-136">Mutex lokalny istnieje tylko w ramach procesu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-136">A local mutex exists only within your process.</span></span> <span data-ttu-id="d49d3-137">Może służyć przez wszystkie wątki procesu, który zawiera odwołanie do <xref:System.Threading.Mutex> obiekt, który reprezentuje obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-137">It can be used by any thread in your process that has a reference to the <xref:System.Threading.Mutex> object that represents the mutex.</span></span> <span data-ttu-id="d49d3-138">Każdy nienazwane <xref:System.Threading.Mutex> obiekt reprezentuje oddzielny lokalny obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-138">Each unnamed <xref:System.Threading.Mutex> object represents a separate local mutex.</span></span>  
  
 <span data-ttu-id="d49d3-139">O nazwie system Muteksy są widoczne w systemie operacyjnym i może służyć do synchronizowania działania procesów.</span><span class="sxs-lookup"><span data-stu-id="d49d3-139">Named system mutexes are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="d49d3-140">Można utworzyć <xref:System.Threading.Mutex> obiekt, który reprezentuje system nazwanego obiektu mutex przy użyciu konstruktora akceptującego nazwę.</span><span class="sxs-lookup"><span data-stu-id="d49d3-140">You can create a <xref:System.Threading.Mutex> object that represents a named system mutex by using a constructor that accepts a name.</span></span> <span data-ttu-id="d49d3-141">Obiekt systemu operacyjnego można tworzyć w tym samym czasie lub może istnieć przed tworzeniem <xref:System.Threading.Mutex> obiektu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-141">The operating-system object can be created at the same time, or it can exist before the creation of the <xref:System.Threading.Mutex> object.</span></span> <span data-ttu-id="d49d3-142">Możesz utworzyć wiele <xref:System.Threading.Mutex> obiektów, które reprezentują takie same nazwanego obiektu mutex systemu i może używać <xref:System.Threading.Mutex.OpenExisting%2A> metodę, aby otworzyć istniejące nazwanego obiektu mutex systemu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-142">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex, and you can use the <xref:System.Threading.Mutex.OpenExisting%2A> method to open an existing named system mutex.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d49d3-143">Na serwerze, na którym są uruchomione usługi terminalowe system nazwanego obiektu mutex ma dwa poziomy widoczności.</span><span class="sxs-lookup"><span data-stu-id="d49d3-143">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="d49d3-144">Jeśli jej nazwa rozpoczyna się od prefiksu "Global\\", jest widoczne we wszystkich sesjach serwera terminali obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-144">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="d49d3-145">Jeśli jej nazwa rozpoczyna się od prefiksu "lokalnego\\", obiektu mutex jest widoczna tylko w sesji serwera terminali, której został utworzony.</span><span class="sxs-lookup"><span data-stu-id="d49d3-145">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="d49d3-146">W takim przypadku oddzielnego obiektu mutex o takiej samej nazwie może istnieć w każdym z innych sesji serwera terminali na serwerze.</span><span class="sxs-lookup"><span data-stu-id="d49d3-146">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="d49d3-147">Jeżeli nie określisz prefiksu, podczas tworzenia nazwanego obiektu mutex, trwa prefiks "lokalnego\\".</span><span class="sxs-lookup"><span data-stu-id="d49d3-147">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="d49d3-148">W sesji serwera terminali dwóch muteksy, których nazwy różnią się tylko wielkością ich prefiksów są oddzielne muteksy i obie są widoczne dla wszystkich procesów w sesji serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="d49d3-148">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="d49d3-149">Oznacza to, że nazwy prefiksu "Global\\" i "lokalnego\\" opisuje zakres nazwa obiektu mutex względem sesje serwera terminali, a nie względem procesów.</span><span class="sxs-lookup"><span data-stu-id="d49d3-149">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

  
## Examples  
 <span data-ttu-id="d49d3-150">W tym przykładzie pokazano, jak lokalnie <xref:System.Threading.Mutex> obiektu służy do synchronizowania dostępu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-150">This example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="d49d3-151">Ponieważ każdy wątek wywołujący jest zablokowany do czasu jej uzyskuje prawo własności obiektu mutex, należy wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> metodę, aby zwolnić własność wątku.</span><span class="sxs-lookup"><span data-stu-id="d49d3-151">Because each calling thread is blocked until it acquires ownership of the mutex, it must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the thread.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Mutex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="d49d3-152">W poniższym przykładzie wywołanie każdy wątek <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> metody można uzyskać obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-152">In the following example, each thread calls the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> method to acquire the mutex.</span></span> <span data-ttu-id="d49d3-153">Jeśli upłynie limit czasu, metoda zwraca `false`, i wątku nie uzyskuje obiektu mutex ani uzyskuje dostęp do zasobów chroni obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-153">If the time-out interval elapses, the method returns `false`, and the thread neither acquires the mutex nor gains access to the resource the mutex protects.</span></span> <span data-ttu-id="d49d3-154"><xref:System.Threading.Mutex.ReleaseMutex%2A> Metoda jest wywoływana tylko przez wątek, który uzyskuje obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-154">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is called only by the thread that acquires the mutex.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="d49d3-155">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d49d3-155">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d49d3-156">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-156">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d49d3-157">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasy przy użyciu domyślnej właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-157">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-158">Wywołanie tego przeciążenia konstruktora jest taka sama jak wywołanie <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> przeładowania konstruktora i określając `false` dla początkowego własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-158">Calling this constructor overload is the same as calling the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor overload and specifying `false` for initial ownership of the mutex.</span></span> <span data-ttu-id="d49d3-159">Oznacza to, że wątek wywołujący nie jest właścicielem obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-159">That is, the calling thread does not own the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d49d3-160">Poniższy kod przedstawia przykład sposobu lokalnego <xref:System.Threading.Mutex> obiektu służy do synchronizowania dostępu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-160">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="d49d3-161">Wątek, który tworzy obiektu mutex nie ma ona początkowo.</span><span class="sxs-lookup"><span data-stu-id="d49d3-161">The thread that creates the mutex does not own it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="d49d3-162">
            <see langword="true" /> Aby zapewnić wywołania wątku początkowej prawo własności obiektu mutex; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-162">
              <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d49d3-163">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasy z wartość logiczną wskazującą, czy wątek wywołujący powinien mieć początkowej własności obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-163">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d49d3-164">Poniższy kod przedstawia przykład sposobu lokalnego <xref:System.Threading.Mutex> obiektu służy do synchronizowania dostępu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-164">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="d49d3-165">Wątek, który tworzy <xref:System.Threading.Mutex> początkowo jest właścicielem.</span><span class="sxs-lookup"><span data-stu-id="d49d3-165">The thread that creates the <xref:System.Threading.Mutex> owns it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="d49d3-166">
            <see langword="true" /> Aby zapewnić wywoływania własność początkowej wątku systemu nazwanego obiektu mutex mutex systemu o nazwie zostanie utworzony w wyniku tego wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-166">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d49d3-167">Nazwa <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-167">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="d49d3-168">Jeśli wartość jest <see langword="null" />, <see cref="T:System.Threading.Mutex" /> jest bez nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-168">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d49d3-169">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasy z wartość logiczną wskazującą, czy wątek wywołujący powinien mieć początkowej własności obiektu mutex i ciąg, który jest nazwą obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-169">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-170">Jeśli `name` nie jest `null` i `initiallyOwned` jest `true`, wątek wywołujący jest właścicielem obiektu mutex tylko wtedy, gdy system nazwanego obiektu mutex został utworzony w wyniku tego wywołania.</span><span class="sxs-lookup"><span data-stu-id="d49d3-170">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the mutex only if the named system mutex was created as a result of this call.</span></span> <span data-ttu-id="d49d3-171">Ponieważ nie ma mechanizmu ustalania, czy system nazwanego obiektu mutex został utworzony, to lepiej określić `false` dla `initiallyOwned` podczas wywoływania tej przeładowania konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d49d3-171">Since there is no mechanism for determining whether the named system mutex was created, it is better to specify `false` for `initiallyOwned` when calling this constructor overload.</span></span> <span data-ttu-id="d49d3-172">Można użyć <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> konstruktora, jeśli trzeba określić własność początkowej.</span><span class="sxs-lookup"><span data-stu-id="d49d3-172">You can use the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> constructor if you need to determine initial ownership.</span></span>  
  
 <span data-ttu-id="d49d3-173">Ten konstruktor inicjuje <xref:System.Threading.Mutex> obiekt, który reprezentuje system nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-173">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="d49d3-174">Możesz utworzyć wiele <xref:System.Threading.Mutex> obiektów, które reprezentują takie same nazwanego obiektu mutex systemu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-174">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="d49d3-175">Jeśli nazwanego obiektu mutex została już utworzona z kontrolę dostępu, a obiekt wywołujący nie ma <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d49d3-175">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="d49d3-176">Aby otworzyć istniejące nazwanego obiektu mutex tylko uprawnienia niezbędne do synchronizowania wątku działań, zobacz <xref:System.Threading.Mutex.OpenExisting%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-176">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="d49d3-177">Jeśli określisz `null` lub pusty ciąg `name`, lokalnego obiektu mutex jest tworzony tak, jakby były nazywane <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d49d3-177">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="d49d3-178">W takim przypadku `createdNew` jest zawsze `true`.</span><span class="sxs-lookup"><span data-stu-id="d49d3-178">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="d49d3-179">Ponieważ są one systemowe, muteksy nazwanego może służyć do zapewnienia koordynacji wykorzystania zasobów przez granice procesu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-179">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d49d3-180">Na serwerze, na którym są uruchomione usługi terminalowe system nazwanego obiektu mutex ma dwa poziomy widoczności.</span><span class="sxs-lookup"><span data-stu-id="d49d3-180">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="d49d3-181">Jeśli jej nazwa rozpoczyna się od prefiksu "Global\\", jest widoczne we wszystkich sesjach serwera terminali obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-181">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="d49d3-182">Jeśli jej nazwa rozpoczyna się od prefiksu "lokalnego\\", obiektu mutex jest widoczna tylko w sesji serwera terminali, której został utworzony.</span><span class="sxs-lookup"><span data-stu-id="d49d3-182">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="d49d3-183">W takim przypadku oddzielnego obiektu mutex o takiej samej nazwie może istnieć w każdym z innych sesji serwera terminali na serwerze.</span><span class="sxs-lookup"><span data-stu-id="d49d3-183">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="d49d3-184">Jeżeli nie określisz prefiksu, podczas tworzenia nazwanego obiektu mutex, trwa prefiks "lokalnego\\".</span><span class="sxs-lookup"><span data-stu-id="d49d3-184">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="d49d3-185">W sesji serwera terminali dwóch muteksy, których nazwy różnią się tylko wielkością ich prefiksów są oddzielne muteksy i obie są widoczne dla wszystkich procesów w sesji serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="d49d3-185">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="d49d3-186">Oznacza to, że nazwy prefiksu "Global\\" i "lokalnego\\" opisuje zakres nazwa obiektu mutex względem sesje serwera terminali, a nie względem procesów.</span><span class="sxs-lookup"><span data-stu-id="d49d3-186">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

## Examples  
 <span data-ttu-id="d49d3-187">W poniższym przykładzie pokazano, jak nazwanego obiektu mutex jest używany do między wątki uruchomione w dwa osobne procesy.</span><span class="sxs-lookup"><span data-stu-id="d49d3-187">The following example shows how a named mutex is used to signal between threads running in two separate processes.</span></span>  
  
 <span data-ttu-id="d49d3-188">Uruchom ten program z co najmniej dwa polecenia systemu windows.</span><span class="sxs-lookup"><span data-stu-id="d49d3-188">Run this program from two or more command windows.</span></span> <span data-ttu-id="d49d3-189">Każdy proces tworzy <xref:System.Threading.Mutex> obiekt, który reprezentuje nazwanego obiektu mutex `MyMutex`.</span><span class="sxs-lookup"><span data-stu-id="d49d3-189">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex `MyMutex`.</span></span> <span data-ttu-id="d49d3-190">Nazwanego obiektu mutex to obiekt systemowy, którego okres istnienia jest ograniczone przez okresy istnienia <xref:System.Threading.Mutex> obiektów, które reprezentują go.</span><span class="sxs-lookup"><span data-stu-id="d49d3-190">The named mutex is a system object whose lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="d49d3-191">Nazwanego obiektu mutex jest tworzony podczas pierwszego procesu tworzy jego <xref:System.Threading.Mutex> obiektu; w tym przykładzie nazwanego obiektu mutex jest własnością pierwszego procesu, który uruchamia program.</span><span class="sxs-lookup"><span data-stu-id="d49d3-191">The named mutex is created when the first process creates its <xref:System.Threading.Mutex> object; in this example, the named mutex is owned by the first process that runs the program.</span></span> <span data-ttu-id="d49d3-192">Nazwanego obiektu mutex jest niszczony podczas wszystkich <xref:System.Threading.Mutex> obiektów, które reprezentują go zostały wydane.</span><span class="sxs-lookup"><span data-stu-id="d49d3-192">The named mutex is destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span>  
  
 <span data-ttu-id="d49d3-193">Przeładowania konstruktora używana w tym przykładzie nie wiadomo wątek wywołujący czy przyznano początkowej własność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-193">The constructor overload used in this example cannot tell the calling thread whether initial ownership of the named mutex was granted.</span></span> <span data-ttu-id="d49d3-194">Ten konstruktor nie należy używać do żądania początkowego własność, o ile nie może mieć pewność, że wątek utworzy nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-194">You should not use this constructor to request initial ownership unless you can be certain that the thread will create the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="d49d3-195">Nazwanego obiektu mutex istnieje i ma kontrolę dostępu, ale użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-195">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="d49d3-196">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-196">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="d49d3-197">Nazwanego obiektu mutex nie można utworzyć, prawdopodobnie ponieważ dojścia oczekiwania innego typu ma taką samą nazwę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-197">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d49d3-198">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-198">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d49d3-199">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-199">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d49d3-200">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-200">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="d49d3-201">
            <see langword="true" /> Aby zapewnić wywoływania własność początkowej wątku systemu nazwanego obiektu mutex mutex systemu o nazwie zostanie utworzony w wyniku tego wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-201">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d49d3-202">Nazwa <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-202">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="d49d3-203">Jeśli wartość jest <see langword="null" />, <see cref="T:System.Threading.Mutex" /> jest bez nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-203">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="d49d3-204">Po powrocie z tej metody zawiera wartość logiczna, która jest <see langword="true" /> Jeśli utworzono lokalnego obiektu mutex (to znaczy, jeśli <c>nazwa</c> jest <see langword="null" /> lub ciąg pusty) lub jeśli utworzono określony system nazwanego obiektu mutex; <see langword="false" /> Jeśli określonego nazwanego obiektu mutex systemu już istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-204">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="d49d3-205">Ten parametr jest przekazywany niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-205">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d49d3-206">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> z wartość logiczną wskazującą, czy wątek wywołujący powinien mieć początkowej własności obiektu mutex, ciąg określający nazwę obiektu mutex i wartość logiczną wskazującą, gdy metoda zwróci wartość, Określa, czy wątek wywołujący uzyskał początkowej własności obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-206">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-207">Jeśli `name` nie jest `null` i `initiallyOwned` jest `true`, wątek wywołujący jest właścicielem nazwanego obiektu mutex tylko wtedy, gdy `createdNew` jest `true` po wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-207">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="d49d3-208">W przeciwnym razie wątku mogą żądać obiektu mutex przez wywołanie metody <xref:System.Threading.WaitHandle.WaitOne%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-208">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="d49d3-209">Ten konstruktor inicjuje <xref:System.Threading.Mutex> obiekt, który reprezentuje system nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-209">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="d49d3-210">Możesz utworzyć wiele <xref:System.Threading.Mutex> obiektów, które reprezentują takie same nazwanego obiektu mutex systemu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-210">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="d49d3-211">Jeśli nazwanego obiektu mutex została już utworzona z kontrolę dostępu, a obiekt wywołujący nie ma <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> praw, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d49d3-211">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> rights, an exception is thrown.</span></span> <span data-ttu-id="d49d3-212">Aby otworzyć istniejące nazwanego obiektu mutex tylko uprawnienia niezbędne do synchronizowania wątku działań, zobacz <xref:System.Threading.Mutex.OpenExisting%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-212">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="d49d3-213">Jeśli określisz `null` lub pusty ciąg `name`, lokalnego obiektu mutex jest tworzony tak, jakby były nazywane <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d49d3-213">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="d49d3-214">W takim przypadku `createdNew` jest zawsze `true`.</span><span class="sxs-lookup"><span data-stu-id="d49d3-214">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="d49d3-215">Ponieważ są one systemowe, muteksy nazwanego może służyć do zapewnienia koordynacji wykorzystania zasobów przez granice procesu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-215">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d49d3-216">Na serwerze, na którym są uruchomione usługi terminalowe system nazwanego obiektu mutex ma dwa poziomy widoczności.</span><span class="sxs-lookup"><span data-stu-id="d49d3-216">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="d49d3-217">Jeśli jej nazwa rozpoczyna się od prefiksu "Global\\", jest widoczne we wszystkich sesjach serwera terminali obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-217">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="d49d3-218">Jeśli jej nazwa rozpoczyna się od prefiksu "lokalnego\\", obiektu mutex jest widoczna tylko w sesji serwera terminali, której został utworzony.</span><span class="sxs-lookup"><span data-stu-id="d49d3-218">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="d49d3-219">W takim przypadku oddzielnego obiektu mutex o takiej samej nazwie może istnieć w każdym z innych sesji serwera terminali na serwerze.</span><span class="sxs-lookup"><span data-stu-id="d49d3-219">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="d49d3-220">Jeżeli nie określisz prefiksu, podczas tworzenia nazwanego obiektu mutex, trwa prefiks "lokalnego\\".</span><span class="sxs-lookup"><span data-stu-id="d49d3-220">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="d49d3-221">W sesji serwera terminali dwóch muteksy, których nazwy różnią się tylko wielkością ich prefiksów są oddzielne muteksy i obie są widoczne dla wszystkich procesów w sesji serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="d49d3-221">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="d49d3-222">Oznacza to, że nazwy prefiksu "Global\\" i "lokalnego\\" opisuje zakres nazwa obiektu mutex względem sesje serwera terminali, a nie względem procesów.</span><span class="sxs-lookup"><span data-stu-id="d49d3-222">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]   
  
## Examples  
 <span data-ttu-id="d49d3-223">Poniższy przykład kodu pokazuje, jak nazwanego obiektu mutex jest używany do między procesów i wątków.</span><span class="sxs-lookup"><span data-stu-id="d49d3-223">The following code example shows how a named mutex is used to signal between processes or threads.</span></span> <span data-ttu-id="d49d3-224">Uruchom ten program z co najmniej dwa polecenia systemu windows.</span><span class="sxs-lookup"><span data-stu-id="d49d3-224">Run this program from two or more command windows.</span></span> <span data-ttu-id="d49d3-225">Każdy proces tworzy <xref:System.Threading.Mutex> obiekt, który reprezentuje nazwanego obiektu mutex "MyMutex".</span><span class="sxs-lookup"><span data-stu-id="d49d3-225">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex "MyMutex".</span></span> <span data-ttu-id="d49d3-226">Nazwanego obiektu mutex jest obiektem systemu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-226">The named mutex is a system object.</span></span> <span data-ttu-id="d49d3-227">W tym przykładzie jego okres istnienia jest ograniczone przez okresy istnienia <xref:System.Threading.Mutex> obiektów, które reprezentują go.</span><span class="sxs-lookup"><span data-stu-id="d49d3-227">In this example, its lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="d49d3-228">Nazwanego obiektu mutex jest tworzony podczas pierwszego procesu tworzy jego lokalnego <xref:System.Threading.Mutex> obiektu i zniszczona, gdy wszystkie <xref:System.Threading.Mutex> obiektów, które reprezentują go zostały wydane.</span><span class="sxs-lookup"><span data-stu-id="d49d3-228">The named mutex is created when the first process creates its local <xref:System.Threading.Mutex> object, and destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span> <span data-ttu-id="d49d3-229">Właścicielem nazwanego obiektu mutex jest początkowo pierwszego procesu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-229">The named mutex is initially owned by the first process.</span></span> <span data-ttu-id="d49d3-230">Druga procedura i wszystkie kolejne procesy poczekaj procesów wcześniejszych wersji nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-230">The second process and any subsequent processes wait for earlier processes to release the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="d49d3-231">Nazwanego obiektu mutex istnieje i ma kontrolę dostępu, ale użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-231">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="d49d3-232">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-232">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="d49d3-233">Nazwanego obiektu mutex nie można utworzyć, prawdopodobnie ponieważ dojścia oczekiwania innego typu ma taką samą nazwę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-233">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d49d3-234">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-234">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d49d3-235">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-235">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d49d3-236">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-236">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="d49d3-237">
            <see langword="true" /> Aby zapewnić wywoływania własność początkowej wątku systemu nazwanego obiektu mutex mutex systemu o nazwie zostanie utworzony w wyniku tego wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-237">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d49d3-238">Nazwa obiektu mutex systemu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-238">The name of the system mutex.</span>
          </span>
          <span data-ttu-id="d49d3-239">Jeśli wartość jest <see langword="null" />, <see cref="T:System.Threading.Mutex" /> jest bez nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-239">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="d49d3-240">Po powrocie z tej metody zawiera wartość logiczna, która jest <see langword="true" /> Jeśli utworzono lokalnego obiektu mutex (to znaczy, jeśli <c>nazwa</c> jest <see langword="null" /> lub ciąg pusty) lub jeśli utworzono określony system nazwanego obiektu mutex; <see langword="false" /> Jeśli określonego nazwanego obiektu mutex systemu już istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-240">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="d49d3-241">Ten parametr jest przekazywany niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-241">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="mutexSecurity">
          <span data-ttu-id="d49d3-242">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> obiekt, który reprezentuje kontrolę dostępu ma zostać zastosowany do systemu nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-242">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d49d3-243">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasy z wartość logiczną wskazującą, czy wątek wywołujący powinien mieć początkowej prawo własności obiektu mutex, ciąg określający nazwę obiektu mutex, wskazujący, gdy metoda zwróci wartość, wartość logiczna Określa, czy wątek wywołujący uzyskał początkowej własności obiektu mutex i kontrolę dostępu ma zostać zastosowany do nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-243">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, a Boolean variable that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex, and the access control security to be applied to the named mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-244">Jeśli `name` nie jest `null` i `initiallyOwned` jest `true`, wątek wywołujący jest właścicielem nazwanego obiektu mutex tylko wtedy, gdy `createdNew` jest `true` po wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-244">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="d49d3-245">W przeciwnym razie wątku mogą żądać obiektu mutex przez wywołanie metody <xref:System.Threading.WaitHandle.WaitOne%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-245">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="d49d3-246">Użyj tego konstruktora, aby zastosować kontrolę dostępu do systemu nazwanego obiektu mutex podczas jego tworzenia, uniemożliwia pobieranie formantu obiektu mutex innego kodu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-246">Use this constructor to apply access control security to a named system mutex when it is created, preventing other code from taking control of the mutex.</span></span>  
  
 <span data-ttu-id="d49d3-247">Ten konstruktor inicjuje <xref:System.Threading.Mutex> obiekt, który reprezentuje system nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-247">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="d49d3-248">Możesz utworzyć wiele <xref:System.Threading.Mutex> obiektów, które reprezentują takie same nazwanego obiektu mutex systemu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-248">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="d49d3-249">Jeśli system nazwanego obiektu mutex nie istnieje, jest tworzony z określonym kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-249">If the named system mutex does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="d49d3-250">Jeśli istnieje nazwanego obiektu mutex, określony kontrolę dostępu jest ignorowane.</span><span class="sxs-lookup"><span data-stu-id="d49d3-250">If the named mutex exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d49d3-251">Obiekt wywołujący ma pełną kontrolę nad nowo utworzony <xref:System.Threading.Mutex> nawet wtedy, gdy obiekt `mutexSecurity` nie zezwala lub nie powiedzie się pewne prawa dostępu do bieżącego użytkownika.</span><span class="sxs-lookup"><span data-stu-id="d49d3-251">The caller has full control over the newly created <xref:System.Threading.Mutex> object even if `mutexSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="d49d3-252">Jednak jeśli bieżący użytkownik próbuje pobrać inny <xref:System.Threading.Mutex> obiekt, do reprezentowania takie same nazwanego obiektu mutex, za pomocą konstruktora lub <xref:System.Threading.Mutex.OpenExisting%2A> zastosowano kontrolę dostępu w systemie Windows metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-252">However, if the current user attempts to get another <xref:System.Threading.Mutex> object to represent the same named mutex, using either a constructor or the <xref:System.Threading.Mutex.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="d49d3-253">Jeśli nazwanego obiektu mutex została już utworzona z kontrolę dostępu, a obiekt wywołujący nie ma <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, jest zgłaszany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d49d3-253">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="d49d3-254">Aby otworzyć istniejące nazwanego obiektu mutex tylko uprawnienia niezbędne do synchronizowania wątku działań, zobacz <xref:System.Threading.Mutex.OpenExisting%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-254">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="d49d3-255">Jeśli określisz `null` lub pusty ciąg `name`, lokalnego obiektu mutex jest tworzony tak, jakby były nazywane <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="d49d3-255">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="d49d3-256">W takim przypadku `createdNew` jest zawsze `true`.</span><span class="sxs-lookup"><span data-stu-id="d49d3-256">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="d49d3-257">Ponieważ są one systemowe, muteksy nazwanego może służyć do zapewnienia koordynacji wykorzystania zasobów przez granice procesu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-257">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d49d3-258">Na serwerze, na którym są uruchomione usługi terminalowe system nazwanego obiektu mutex ma dwa poziomy widoczności.</span><span class="sxs-lookup"><span data-stu-id="d49d3-258">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="d49d3-259">Jeśli jej nazwa rozpoczyna się od prefiksu "Global\\", jest widoczne we wszystkich sesjach serwera terminali obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-259">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="d49d3-260">Jeśli jej nazwa rozpoczyna się od prefiksu "lokalnego\\", obiektu mutex jest widoczna tylko w sesji serwera terminali, której został utworzony.</span><span class="sxs-lookup"><span data-stu-id="d49d3-260">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="d49d3-261">W takim przypadku oddzielnego obiektu mutex o takiej samej nazwie może istnieć w każdym z innych sesji serwera terminali na serwerze.</span><span class="sxs-lookup"><span data-stu-id="d49d3-261">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="d49d3-262">Jeżeli nie określisz prefiksu, podczas tworzenia nazwanego obiektu mutex, trwa prefiks "lokalnego\\".</span><span class="sxs-lookup"><span data-stu-id="d49d3-262">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="d49d3-263">W sesji serwera terminali dwóch muteksy, których nazwy różnią się tylko wielkością ich prefiksów są oddzielne muteksy i obie są widoczne dla wszystkich procesów w sesji serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="d49d3-263">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="d49d3-264">Oznacza to, że nazwy prefiksu "Global\\" i "lokalnego\\" opisuje zakres nazwa obiektu mutex względem sesje serwera terminali, a nie względem procesów.</span><span class="sxs-lookup"><span data-stu-id="d49d3-264">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]  
   
  
## Examples  
 <span data-ttu-id="d49d3-265">W poniższym przykładzie kodu pokazano zachowanie międzyprocesowa nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-265">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="d49d3-266">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenie metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-266">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="d49d3-267">Jeśli obiektu mutex nie istnieje, jest tworzony z początkowej własności i kontrolę dostępu, nie zezwala na bieżący użytkownik prawa do używania obiektu mutex, ale daje prawo do odczytu, a zmiana uprawnień do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-267">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="d49d3-268">Jeśli uruchamiane skompilowany przykład dwa okna polecenia, druga kopia spowoduje zgłoszenie wyjątku naruszenie dostępu w wywołaniu <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="d49d3-268">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="d49d3-269">Wyjątek zostanie przechwycony i w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenie metody można otworzyć z uprawnień niezbędnych do odczytu i zmienić uprawnienia obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-269">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="d49d3-270">Po zmianie są uprawnienia obiektu mutex jest otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="d49d3-270">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="d49d3-271">Trzeci okno polecenia uruchamiane przykład skompilowany, uruchamia, przy użyciu nowe uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="d49d3-271">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="d49d3-272">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-272">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="d49d3-273">Nazwanego obiektu mutex istnieje i ma kontrolę dostępu, ale użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-273">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="d49d3-274">Nazwanego obiektu mutex nie można utworzyć, prawdopodobnie ponieważ dojścia oczekiwania innego typu ma taką samą nazwę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-274">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d49d3-275">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-275">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d49d3-276">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-276">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d49d3-277">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-277">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.MutexSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As MutexSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::MutexSecurity ^ GetAccessControl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d49d3-278">Pobiera <see cref="T:System.Security.AccessControl.MutexSecurity" /> obiekt, który reprezentuje kontrolę dostępu dla nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-278">Gets a <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d49d3-279">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> obiekt, który reprezentuje kontrolę dostępu dla nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-279">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-280"><xref:System.Threading.Mutex.GetAccessControl%2A> Metoda używa następujących kombinacji flag (połączone, przy użyciu operacji bitowej OR) do wyszukania uprawnienia: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, i <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d49d3-280">The <xref:System.Threading.Mutex.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d49d3-281">Użytkownik musi mieć <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> wywołanie tej metody i obiektu mutex musi została otwarta z <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d49d3-281">The user must have <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d49d3-282">W poniższym przykładzie kodu pokazano zachowanie międzyprocesowa nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-282">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="d49d3-283">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenie metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-283">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="d49d3-284">Jeśli obiektu mutex nie istnieje, jest tworzony z początkowej własności i kontrolę dostępu, nie zezwala na bieżący użytkownik prawa do używania obiektu mutex, ale daje prawo do odczytu, a zmiana uprawnień do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-284">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="d49d3-285">Jeśli uruchamiane skompilowany przykład dwa okna polecenia, druga kopia spowoduje zgłoszenie wyjątku naruszenie dostępu w wywołaniu <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="d49d3-285">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="d49d3-286">Wyjątek zostanie przechwycony i w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenie metody, aby otworzyć obiektu mutex z uprawnień wymaganych do odczytu, a zmiana uprawnień, przy użyciu <xref:System.Threading.Mutex.GetAccessControl%2A> i <xref:System.Threading.Mutex.SetAccessControl%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-286">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="d49d3-287">Po zmianie są uprawnienia obiektu mutex jest otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="d49d3-287">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="d49d3-288">Trzeci okno polecenia uruchamiane przykład skompilowany, uruchamia, przy użyciu nowe uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="d49d3-288">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="d49d3-289">Bieżący <see cref="T:System.Threading.Mutex" /> obiekt reprezentuje system nazwanego obiektu mutex, ale użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-289">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
          <span data-ttu-id="d49d3-290">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-290">-or-</span>
          </span>
          <span data-ttu-id="d49d3-291">Bieżący <see cref="T:System.Threading.Mutex" /> obiekt reprezentuje system nazwanego obiektu mutex, a nie została otwarta z <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-291">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, and was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="d49d3-292">Nie jest obsługiwane dla systemu Windows 98 lub Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-292">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d49d3-293">Otwiera określonego nazwanego obiektu mutex, jeśli już istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-293">Opens a specified named mutex, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d49d3-294">Nazwa obiektu mutex systemu, aby otworzyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-294">The name of the system mutex to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d49d3-295">Otwiera określonego nazwanego obiektu mutex, jeśli już istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-295">Opens the specified named mutex, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d49d3-296">Obiekt, który reprezentuje system nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-296">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-297"><xref:System.Threading.Mutex.OpenExisting%2A> Metody spróbuje otworzyć określonego nazwanego obiektu mutex systemu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-297">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open the specified named system mutex.</span></span> <span data-ttu-id="d49d3-298">Jeśli system obiektu mutex nie istnieje, ta metoda zgłasza wyjątek zamiast tworzenia obiektu systemowego.</span><span class="sxs-lookup"><span data-stu-id="d49d3-298">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="d49d3-299">Aby utworzyć obiektu mutex systemu, gdy jeszcze nie istnieje, użyj jednej z <xref:System.Threading.Mutex.%23ctor%2A> ma konstruktorów `name` parametru.</span><span class="sxs-lookup"><span data-stu-id="d49d3-299">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="d49d3-300">Tej metody należy użyć tej samej wartości dla wielu wywołań `name` nie musi zwracać taki sam <xref:System.Threading.Mutex> obiektu, nawet jeśli obiekty, które są zwracane reprezentują tego samego obiektu mutex systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="d49d3-300">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="d49d3-301">Przeciążenie tej metody jest odpowiednikiem wywołania <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenie metody i określając <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> i <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> praw, połączone przy użyciu operacji lub.</span><span class="sxs-lookup"><span data-stu-id="d49d3-301">This method overload is equivalent to calling the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="d49d3-302">Określanie <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> Flaga umożliwia wątku oczekiwania na obiektu mutex i określając <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> Flaga umożliwia wątku w celu wywołania <xref:System.Threading.Mutex.ReleaseMutex%2A> — metoda.</span><span class="sxs-lookup"><span data-stu-id="d49d3-302">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="d49d3-303">Ta metoda nie żąda prawo własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-303">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d49d3-304">W poniższym przykładzie kodu pokazano zachowanie międzyprocesowa nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-304">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="d49d3-305">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenie metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-305">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="d49d3-306">Jeśli obiektu mutex nie istnieje, jest tworzony z początkowej własności i kontrolę dostępu, nie zezwala na bieżący użytkownik prawa do używania obiektu mutex, ale daje prawo do odczytu, a zmiana uprawnień do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-306">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="d49d3-307">Jeśli uruchamiane skompilowany przykład dwa okna polecenia, druga kopia spowoduje zgłoszenie wyjątku naruszenie dostępu w wywołaniu <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="d49d3-307">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="d49d3-308">Wyjątek zostanie przechwycony i w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenie metody można otworzyć z uprawnień niezbędnych do odczytu i zmienić uprawnienia obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-308">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="d49d3-309">Po zmianie są uprawnienia obiektu mutex jest otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="d49d3-309">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="d49d3-310">Trzeci okno polecenia uruchamiane przykład skompilowany, uruchamia, przy użyciu nowe uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="d49d3-310">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d49d3-311">
            <paramref name="name" /> jest pustym ciągiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-311">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="d49d3-312">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-312">-or-</span>
          </span>
          <span data-ttu-id="d49d3-313">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-313">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d49d3-314">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-314">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="d49d3-315">Nazwanego obiektu mutex nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-315">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="d49d3-316">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-316">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="d49d3-317">Istnieje nazwanego obiektu mutex, ale użytkownik nie ma dostępu zabezpieczeń, trzeba go używać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-317">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d49d3-318">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-318">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d49d3-319">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-319">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As MutexRights) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d49d3-320">Nazwa obiektu mutex systemu, aby otworzyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-320">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="d49d3-321">Bitowe połączenie wartości wyliczenia, które reprezentują dostęp wymaganymi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-321">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d49d3-322">Otwiera określonego nazwanego obiektu mutex, jeśli już istnieje, z wymaganymi dostępu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-322">Opens the specified named mutex, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d49d3-323">Obiekt, który reprezentuje system nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-323">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-324">`rights` Parametr musi zawierać <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flagę wątków, aby czekać na obiektu mutex i <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flagę wątków, aby wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-324">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="d49d3-325"><xref:System.Threading.Mutex.OpenExisting%2A> Metoda próbuje otworzyć istniejące nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-325">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open an existing named mutex.</span></span> <span data-ttu-id="d49d3-326">Jeśli system obiektu mutex nie istnieje, ta metoda zgłasza wyjątek zamiast tworzenia obiektu systemowego.</span><span class="sxs-lookup"><span data-stu-id="d49d3-326">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="d49d3-327">Aby utworzyć obiektu mutex systemu, gdy jeszcze nie istnieje, użyj jednej z <xref:System.Threading.Mutex.%23ctor%2A> ma konstruktorów `name` parametru.</span><span class="sxs-lookup"><span data-stu-id="d49d3-327">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="d49d3-328">Tej metody należy użyć tej samej wartości dla wielu wywołań `name` nie musi zwracać taki sam <xref:System.Threading.Mutex> obiektu, nawet jeśli obiekty, które są zwracane reprezentują tego samego obiektu mutex systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="d49d3-328">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="d49d3-329">Ta metoda nie żąda prawo własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-329">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d49d3-330">W poniższym przykładzie kodu pokazano zachowanie międzyprocesowa nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-330">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="d49d3-331">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenie metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-331">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="d49d3-332">Jeśli obiektu mutex nie istnieje, jest tworzony z początkowej własności i kontrolę dostępu, nie zezwala na bieżący użytkownik prawa do używania obiektu mutex, ale daje prawo do odczytu, a zmiana uprawnień do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-332">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="d49d3-333">Jeśli uruchamiane skompilowany przykład dwa okna polecenia, druga kopia spowoduje zgłoszenie wyjątku naruszenie dostępu w wywołaniu <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="d49d3-333">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="d49d3-334">Wyjątek zostanie przechwycony i w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenie metody można otworzyć z uprawnień niezbędnych do odczytu i zmienić uprawnienia obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-334">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="d49d3-335">Po zmianie są uprawnienia obiektu mutex jest otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="d49d3-335">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="d49d3-336">Trzeci okno polecenia uruchamiane przykład skompilowany, uruchamia, przy użyciu nowe uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="d49d3-336">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d49d3-337">
            <paramref name="name" /> jest pustym ciągiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-337">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="d49d3-338">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-338">-or-</span>
          </span>
          <span data-ttu-id="d49d3-339">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-339">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d49d3-340">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-340">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="d49d3-341">Nazwanego obiektu mutex nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-341">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="d49d3-342">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-342">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="d49d3-343">Istnieje nazwanego obiektu mutex, ale użytkownik nie ma dostępu do żądanego zabezpieczeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-343">The named mutex exists, but the user does not have the desired security access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d49d3-344">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-344">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d49d3-345">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-345">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMutex">
      <MemberSignature Language="C#" Value="public void ReleaseMutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseMutex() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.ReleaseMutex" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMutex ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseMutex();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d49d3-346">Wersje <see cref="T:System.Threading.Mutex" /> po.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-346">Releases the <see cref="T:System.Threading.Mutex" /> once.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-347">Zawsze, gdy wątek uzyskuje obiektu mutex (na przykład przez wywołanie jego <xref:System.Threading.WaitHandle.WaitOne%2A> — metoda), następnie należy wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> zrzeka prawo własności obiektu mutex i odblokować innych wątków, które próbują uzyskać prawo własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-347">Whenever a thread acquires a mutex (for example, by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method), it must subsequently call <xref:System.Threading.Mutex.ReleaseMutex%2A> to relinquish ownership of the mutex and unblock other threads that are trying to gain ownership of the mutex.</span></span> <span data-ttu-id="d49d3-348">Jeśli próba pobrania prawo własności obiektu mutex zakończy się niepowodzeniem (na przykład, gdy wywołanie <xref:System.Threading.WaitHandle.WaitOne%2A> metody z `millisecondsTimeout` lub `timeout` zwraca parametr `false` ponieważ limit czasu żądania), wątek nie należy wywoływać <xref:System.Threading.Mutex.ReleaseMutex%2A>, w tym przypadku wątku również nie powinien być dozwolony dostęp do zasobu chronione przez obiektu mutex, jak przedstawiono na poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="d49d3-348">If the attempt to get ownership of the mutex fails (for example, when a call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method with a `millisecondsTimeout` or a `timeout` parameter returns `false` because the request times out), the thread shouldn't call <xref:System.Threading.Mutex.ReleaseMutex%2A>, In this case, the thread should also not be allowed to access the resource protected by the mutex, as the following example shows.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 <span data-ttu-id="d49d3-349">Wątek, który jest właścicielem obiektu mutex można określić tego samego obiektu mutex oczekiwania powtarzane wywołania funkcji bez blokowania jego wykonywania.</span><span class="sxs-lookup"><span data-stu-id="d49d3-349">A thread that owns a mutex can specify the same mutex in repeated wait function calls without blocking its execution.</span></span> <span data-ttu-id="d49d3-350">Liczba wywołań jest przechowywany przez środowisko uruchomieniowe języka wspólnego.</span><span class="sxs-lookup"><span data-stu-id="d49d3-350">The number of calls is kept by the common language runtime.</span></span> <span data-ttu-id="d49d3-351">Wątek należy wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> taką samą liczbę razy, aby zwolnić prawo własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-351">The thread must call <xref:System.Threading.Mutex.ReleaseMutex%2A> the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="d49d3-352">Zakończenie wątku podczas będący właścicielem obiektu mutex, jest nazywany porzucony obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-352">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="d49d3-353">Stan obiektu mutex jest ustawiona na sygnałowego i następnego wątku oczekiwania pobiera własności.</span><span class="sxs-lookup"><span data-stu-id="d49d3-353">The state of the mutex is set to signaled and the next waiting thread gets ownership.</span></span> <span data-ttu-id="d49d3-354">Jeśli nie jest właścicielem obiektu mutex, zostanie zasygnalizowane stan obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-354">If no one owns the mutex, the state of the mutex is signaled.</span></span> <span data-ttu-id="d49d3-355">Począwszy od wersji 2.0 programu .NET Framework, <xref:System.Threading.AbandonedMutexException> jest zgłaszany w następnym wątku, który uzyskuje obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-355">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the mutex.</span></span> <span data-ttu-id="d49d3-356">Przed programu .NET Framework w wersji 2.0 nie zgłoszono wyjątek.</span><span class="sxs-lookup"><span data-stu-id="d49d3-356">Prior to version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="d49d3-357">Porzuconego elementu mutex często oznacza to poważny błąd w kodzie.</span><span class="sxs-lookup"><span data-stu-id="d49d3-357">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="d49d3-358">Wątek kończy działanie bez zwolnienia obiektu mutex, struktur danych chronionych przez obiektu mutex może być w stanie spójności.</span><span class="sxs-lookup"><span data-stu-id="d49d3-358">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="d49d3-359">Następnego wątku własności obiektu mutex żądania obsługi tego wyjątku i kontynuować, jeśli można sprawdzić integralność struktury danych.</span><span class="sxs-lookup"><span data-stu-id="d49d3-359">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="d49d3-360">W przypadku obiektu mutex systemowe porzuconego elementu mutex może wskazywać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</span><span class="sxs-lookup"><span data-stu-id="d49d3-360">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d49d3-361">W poniższym przykładzie pokazano, jak lokalnie <xref:System.Threading.Mutex> obiektu służy do synchronizowania dostępu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-361">The following example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="d49d3-362">Wątek, który tworzy obiektu mutex nie ma ona początkowo.</span><span class="sxs-lookup"><span data-stu-id="d49d3-362">The thread that creates the mutex does not own it initially.</span></span> <span data-ttu-id="d49d3-363"><xref:System.Threading.Mutex.ReleaseMutex%2A> Metoda jest używana do zwolnienia obiektu mutex, gdy nie jest już potrzebne.</span><span class="sxs-lookup"><span data-stu-id="d49d3-363">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is used to release the mutex when it is no longer needed.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="d49d3-364">Wątek wywołujący nie jest właścicielem obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-364">The calling thread does not own the mutex.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="d49d3-365">Bieżące wystąpienie został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-365">The current instance has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="mutexSecurity">
          <span data-ttu-id="d49d3-366">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> obiekt, który reprezentuje kontrolę dostępu ma zostać zastosowany do systemu nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-366">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d49d3-367">Ustawia kontrolę dostępu do systemu nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-367">Sets the access control security for a named system mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-368">Użytkownik musi mieć <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> praw, aby wywołać tę metodę i obiektu mutex musi została otwarta z <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d49d3-368">The user must have <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d49d3-369">W poniższym przykładzie kodu pokazano zachowanie międzyprocesowa nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="d49d3-369">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="d49d3-370">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenie metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-370">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="d49d3-371">Jeśli obiektu mutex nie istnieje, jest tworzony z początkowej własności i kontrolę dostępu, nie zezwala na bieżący użytkownik prawa do używania obiektu mutex, ale daje prawo do odczytu, a zmiana uprawnień do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-371">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="d49d3-372">Jeśli uruchamiane skompilowany przykład dwa okna polecenia, druga kopia spowoduje zgłoszenie wyjątku naruszenie dostępu w wywołaniu <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="d49d3-372">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="d49d3-373">Wyjątek zostanie przechwycony i w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenie metody, aby otworzyć obiektu mutex z uprawnień wymaganych do odczytu, a zmiana uprawnień, przy użyciu <xref:System.Threading.Mutex.GetAccessControl%2A> i <xref:System.Threading.Mutex.SetAccessControl%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-373">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="d49d3-374">Po zmianie są uprawnienia obiektu mutex jest otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="d49d3-374">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="d49d3-375">Trzeci okno polecenia uruchamiane przykład skompilowany, uruchamia, przy użyciu nowe uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="d49d3-375">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d49d3-376">
            <paramref name="mutexSecurity" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-376">
              <paramref name="mutexSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="d49d3-377">Użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-377">The user does not have <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
          <span data-ttu-id="d49d3-378">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-378">-or-</span>
          </span>
          <span data-ttu-id="d49d3-379">Obiektu mutex nie został otwarty z <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-379">The mutex was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="d49d3-380">Bieżący <see cref="T:System.Threading.Mutex" /> obiekt nie reprezentuje system nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-380">The current <see cref="T:System.Threading.Mutex" /> object does not represent a named system mutex.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d49d3-381">Otwiera określonego nazwanego obiektu mutex, jeśli już istnieje i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-381">Opens a specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Mutex&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d49d3-382">Nazwa obiektu mutex systemu, aby otworzyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-382">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="d49d3-383">Po powrocie z tej metody zawiera <see cref="T:System.Threading.Mutex" /> obiekt, który reprezentuje nazwanego obiektu mutex, jeśli wywołanie zakończyło się pomyślnie, lub <see langword="null" /> Jeśli wywołanie zakończyło się niepowodzeniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-383">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="d49d3-384">Ten parametr jest traktowany jako niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-384">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d49d3-385">Otwiera określonego nazwanego obiektu mutex, jeśli już istnieje i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-385">Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d49d3-386">
            <see langword="true" /> Jeśli nazwanego obiektu mutex została otwarta pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-386">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-387">Jeśli nazwanego obiektu mutex nie istnieje, ta metoda nie utworzy go.</span><span class="sxs-lookup"><span data-stu-id="d49d3-387">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="d49d3-388">Aby utworzyć obiektu mutex systemu, gdy jeszcze nie istnieje, użyj jednej z <xref:System.Threading.Mutex.%23ctor%2A> ma konstruktorów `name` parametru.</span><span class="sxs-lookup"><span data-stu-id="d49d3-388">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="d49d3-389">Jeśli masz pewności, czy istnieje nazwanego obiektu mutex, użyj tego przeciążenia metody zamiast <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenie metody, która zgłasza wyjątek, jeśli obiektu mutex nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="d49d3-389">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="d49d3-390">Tej metody należy użyć tej samej wartości dla wielu wywołań `name` nie musi zwracać taki sam <xref:System.Threading.Mutex> obiektu, nawet jeśli obiekty, które są zwracane reprezentują tego samego obiektu mutex systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="d49d3-390">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="d49d3-391">Przeciążenie tej metody jest odpowiednikiem wywołania <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> przeciążenie metody i określając <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> i <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> praw, połączone przy użyciu operacji lub.</span><span class="sxs-lookup"><span data-stu-id="d49d3-391">This method overload is equivalent to calling the <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="d49d3-392">Określanie <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> Flaga umożliwia wątku oczekiwania na obiektu mutex i określając <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> Flaga umożliwia wątku w celu wywołania <xref:System.Threading.Mutex.ReleaseMutex%2A> — metoda.</span><span class="sxs-lookup"><span data-stu-id="d49d3-392">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="d49d3-393">Ta metoda nie żąda prawo własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-393">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d49d3-394">
            <paramref name="name" /> jest pustym ciągiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-394">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="d49d3-395">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-395">-or-</span>
          </span>
          <span data-ttu-id="d49d3-396">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-396">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d49d3-397">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-397">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="d49d3-398">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-398">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="d49d3-399">Istnieje nazwanego obiektu mutex, ale użytkownik nie ma dostępu zabezpieczeń, trzeba go używać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-399">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d49d3-400">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-400">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d49d3-401">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-401">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.MutexRights rights, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As MutexRights, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="result" Type="System.Threading.Mutex&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d49d3-402">Nazwa obiektu mutex systemu, aby otworzyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-402">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="d49d3-403">Bitowe połączenie wartości wyliczenia, które reprezentują dostęp wymaganymi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-403">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="d49d3-404">Po powrocie z tej metody zawiera <see cref="T:System.Threading.Mutex" /> obiekt, który reprezentuje nazwanego obiektu mutex, jeśli wywołanie zakończyło się pomyślnie, lub <see langword="null" /> Jeśli wywołanie zakończyło się niepowodzeniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-404">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="d49d3-405">Ten parametr jest traktowany jako niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-405">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d49d3-406">Otwiera określonego nazwanego obiektu mutex, jeśli już istnieje z wymaganymi dostęp i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-406">Opens the specified named mutex, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d49d3-407">
            <see langword="true" /> Jeśli nazwanego obiektu mutex została otwarta pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-407">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d49d3-408">Jeśli nazwanego obiektu mutex nie istnieje, ta metoda nie utworzy go.</span><span class="sxs-lookup"><span data-stu-id="d49d3-408">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="d49d3-409">Aby utworzyć obiektu mutex systemu, gdy jeszcze nie istnieje, użyj jednej z <xref:System.Threading.Mutex.%23ctor%2A> ma konstruktorów `name` parametru.</span><span class="sxs-lookup"><span data-stu-id="d49d3-409">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="d49d3-410">Jeśli masz pewności, czy istnieje nazwanego obiektu mutex, użyj tego przeciążenia metody zamiast <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenie metody, która zgłasza wyjątek, jeśli obiektu mutex nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="d49d3-410">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="d49d3-411">`rights` Parametr musi zawierać <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flagę wątków, aby czekać na obiektu mutex i <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flagę wątków, aby wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="d49d3-411">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="d49d3-412">Tej metody należy użyć tej samej wartości dla wielu wywołań `name` nie musi zwracać taki sam <xref:System.Threading.Mutex> obiektu, nawet jeśli obiekty, które są zwracane reprezentują tego samego obiektu mutex systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="d49d3-412">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="d49d3-413">Ta metoda nie żąda prawo własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="d49d3-413">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d49d3-414">
            <paramref name="name" /> jest pustym ciągiem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-414">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="d49d3-415">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-415">-or-</span>
          </span>
          <span data-ttu-id="d49d3-416">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-416">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d49d3-417">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-417">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="d49d3-418">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-418">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="d49d3-419">Istnieje nazwanego obiektu mutex, ale użytkownik nie ma dostępu zabezpieczeń, trzeba go używać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-419">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d49d3-420">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-420">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d49d3-421">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d49d3-421">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>