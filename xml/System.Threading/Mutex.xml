<Type Name="Mutex" FullName="System.Threading.Mutex">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="275d99adffc9c04d2d1d3561f11aa937737aa2d3" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39811882" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Mutex : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Mutex extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Mutex" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Mutex&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Mutex sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Mutex = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="72764-101">Podstawowego synchronizacji, który może również służyć do synchronizacji międzyprocesowej.</span>
      <span class="sxs-lookup">
        <span data-stu-id="72764-101">A synchronization primitive that can also be used for interprocess synchronization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-102">Jeśli dwa lub więcej wątków muszą uzyskać dostęp do udostępnionego zasobu, w tym samym czasie, system musi mechanizm synchronizacji, aby upewnić się, że tylko jeden wątek jednocześnie korzysta z zasobów.</span><span class="sxs-lookup"><span data-stu-id="72764-102">When two or more threads need to access a shared resource at the same time, the system needs a synchronization mechanism to ensure that only one thread at a time uses the resource.</span></span> <span data-ttu-id="72764-103"><xref:System.Threading.Mutex> jest elementem synchronizacji pierwotnych, która przyznaje wyłączny dostęp do udostępnionego zasobu, aby tylko jeden wątek.</span><span class="sxs-lookup"><span data-stu-id="72764-103"><xref:System.Threading.Mutex> is a synchronization primitive that grants exclusive access to the shared resource to only one thread.</span></span> <span data-ttu-id="72764-104">Wątek uzyskuje mutex, drugi wątek, który chce uzyskać tego obiektu mutex jest zawieszona do czasu pierwszym wątkiem zwalnia element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-104">If a thread acquires a mutex, the second thread that wants to acquire that mutex is suspended until the first thread releases the mutex.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="72764-105">Ten typ implementuje <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="72764-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="72764-106">Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niej.</span><span class="sxs-lookup"><span data-stu-id="72764-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="72764-107">Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> method in Class metoda `try` / `catch` bloku.</span><span class="sxs-lookup"><span data-stu-id="72764-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="72764-108">Aby usunąć ją pośrednio, użyj konstrukcją języka pierwszej klasy takiej jak `using` (w języku C#) lub `Using` (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="72764-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="72764-109">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="72764-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="72764-110">Możesz użyć <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> metody żądania własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-110">You can use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method to request ownership of a mutex.</span></span> <span data-ttu-id="72764-111">Wywołania wątku bloki dopóki nie wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="72764-111">The calling thread blocks until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="72764-112">Element mutex jest sygnalizowane, aby wskazać, że nie jest własnością.</span><span class="sxs-lookup"><span data-stu-id="72764-112">The mutex is signaled to indicate that it is not owned.</span></span> <span data-ttu-id="72764-113">W takim przypadku <xref:System.Threading.WaitHandle.WaitOne%2A> metoda zwraca `true`, i Wątek wywołujący przejmuje element mutex i uzyskuje dostęp do zasobów chronionych przez element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-113">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true`, and the calling thread assumes ownership of the mutex and accesses the resource protected by the mutex.</span></span> <span data-ttu-id="72764-114">Po zakończeniu dostępu do zasobu, należy wywołać wątku <xref:System.Threading.Mutex.ReleaseMutex%2A> metodę, aby zwolnić własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-114">When it has finished accessing the resource, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the mutex.</span></span> <span data-ttu-id="72764-115">Pierwszy przykład w sekcji Przykłady przedstawiono tego wzorca.</span><span class="sxs-lookup"><span data-stu-id="72764-115">The first example in the Examples section illustrates this pattern.</span></span>  
  
-   <span data-ttu-id="72764-116">Limit czasu określony w wywołaniu <xref:System.Threading.WaitHandle.WaitOne%2A> metody, która ma `millisecondsTimeout` lub `timeout` upłynął parametru.</span><span class="sxs-lookup"><span data-stu-id="72764-116">The time-out interval specified in the call to a <xref:System.Threading.WaitHandle.WaitOne%2A> method that has a `millisecondsTimeout` or `timeout` parameter has elapsed.</span></span> <span data-ttu-id="72764-117">W takim przypadku <xref:System.Threading.WaitHandle.WaitOne%2A> metoda zwraca `false`, i Wątek wywołujący sprawia, że dalsze próby uzyskania własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-117">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `false`, and the calling thread makes no further attempt to acquire ownership of the mutex.</span></span> <span data-ttu-id="72764-118">W takim przypadku należy strukturą kodu, tak, aby odmowa dostępu do zasobu, który jest chroniony przez element mutex do wątku wywołującego.</span><span class="sxs-lookup"><span data-stu-id="72764-118">In this case, you should structure your code so that access to the resource that is protected by the mutex is denied to the calling thread.</span></span> <span data-ttu-id="72764-119">Ponieważ wątek nigdy nie nabyty własności obiektu mutex, nie należy wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-119">Because the thread never acquired ownership of the mutex, it must not call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span> <span data-ttu-id="72764-120">Drugi przykład w sekcji Przykłady przedstawiono tego wzorca.</span><span class="sxs-lookup"><span data-stu-id="72764-120">The second example in the Examples section illustrates this pattern.</span></span>  
  
 <span data-ttu-id="72764-121"><xref:System.Threading.Mutex> Klasy wymusza tożsamość wątku, więc mutex będą dostępne tylko w wątku, do którego został uzyskany.</span><span class="sxs-lookup"><span data-stu-id="72764-121">The <xref:System.Threading.Mutex> class enforces thread identity, so a mutex can be released only by the thread that acquired it.</span></span> <span data-ttu-id="72764-122">Z kolei <xref:System.Threading.Semaphore> klasy nie wymusza tożsamość wątku.</span><span class="sxs-lookup"><span data-stu-id="72764-122">By contrast, the <xref:System.Threading.Semaphore> class does not enforce thread identity.</span></span> <span data-ttu-id="72764-123">Mutex, również mogą być przekazywane poza granice domeny aplikacji.</span><span class="sxs-lookup"><span data-stu-id="72764-123">A mutex can also be passed across application domain boundaries.</span></span>  
  
 <span data-ttu-id="72764-124">Wątek, który jest właścicielem obiektu mutex można zażądać tego samego obiektu mutex w wywołaniach powtarzanych <xref:System.Threading.WaitHandle.WaitOne%2A> bez blokowania jej wykonanie.</span><span class="sxs-lookup"><span data-stu-id="72764-124">The thread that owns a mutex can request the same mutex in repeated calls to <xref:System.Threading.WaitHandle.WaitOne%2A> without blocking its execution.</span></span> <span data-ttu-id="72764-125">Jednakże, należy wywołać wątku <xref:System.Threading.Mutex.ReleaseMutex%2A> metoda taką samą liczbę razy, aby zwolnić własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-125">However, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="72764-126">Ponieważ <xref:System.Threading.Mutex> klasa dziedziczy <xref:System.Threading.WaitHandle>, można również wywołać statyczną <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> i <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> metody do synchronizowania dostępu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="72764-126">Because the <xref:System.Threading.Mutex> class inherits from <xref:System.Threading.WaitHandle>, you can also call the static <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> and <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> methods to synchronize access to a protected resource.</span></span>  
  
 <span data-ttu-id="72764-127">Wątek kończy działanie podczas będącego właścicielem elementu mutex, jest nazywany porzucone element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-127">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="72764-128">Stan obiektu mutex ustawiono sygnalizowane i następny wątek oczekiwania uzyskuje własność.</span><span class="sxs-lookup"><span data-stu-id="72764-128">The state of the mutex is set to signaled, and the next waiting thread gets ownership.</span></span> <span data-ttu-id="72764-129">Począwszy od wersji 2.0 programu .NET Framework, <xref:System.Threading.AbandonedMutexException> jest zgłaszany w następny wątek, który uzyska element mutex porzucone.</span><span class="sxs-lookup"><span data-stu-id="72764-129">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the abandoned mutex.</span></span> <span data-ttu-id="72764-130">Przed wersją 2.0 platformy .NET Framework żaden wyjątek został zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="72764-130">Before version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="72764-131">Porzuconego elementu mutex często oznacza to poważny błąd w kodzie.</span><span class="sxs-lookup"><span data-stu-id="72764-131">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="72764-132">Jeśli wątek kończy działanie bez zwalniania element mutex, struktur danych chronionych przez element mutex może nie być w stanie spójności.</span><span class="sxs-lookup"><span data-stu-id="72764-132">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="72764-133">Następny wątek do żądania własności obiektu mutex można obsługi tego wyjątku i kontynuować, jeśli można zweryfikować integralności struktur danych.</span><span class="sxs-lookup"><span data-stu-id="72764-133">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="72764-134">W przypadku elementu mutex systemowe porzuconego elementu mutex może wskazywać, że aplikacji zostało zakończone nagle (na przykład przy użyciu Menedżera zadań Windows).</span><span class="sxs-lookup"><span data-stu-id="72764-134">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
 <span data-ttu-id="72764-135">Istnieją dwa typy muteksy: muteksy lokalnego, która nienazwane i o nazwie muteksy systemu.</span><span class="sxs-lookup"><span data-stu-id="72764-135">Mutexes are of two types: local mutexes, which are unnamed, and named system mutexes.</span></span> <span data-ttu-id="72764-136">Lokalny element mutex istnieje tylko w ramach procesu.</span><span class="sxs-lookup"><span data-stu-id="72764-136">A local mutex exists only within your process.</span></span> <span data-ttu-id="72764-137">Mogą być używane w żadnym z wątków w procesie, który zawiera odwołanie do <xref:System.Threading.Mutex> obiekt, który reprezentuje element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-137">It can be used by any thread in your process that has a reference to the <xref:System.Threading.Mutex> object that represents the mutex.</span></span> <span data-ttu-id="72764-138">Każdy nienazwane <xref:System.Threading.Mutex> obiekt reprezentuje oddzielny lokalny element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-138">Each unnamed <xref:System.Threading.Mutex> object represents a separate local mutex.</span></span>  
  
 <span data-ttu-id="72764-139">O nazwie system Muteksy są widoczne w całym systemie operacyjnym i może służyć do synchronizowania działania procesów.</span><span class="sxs-lookup"><span data-stu-id="72764-139">Named system mutexes are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="72764-140">Możesz utworzyć <xref:System.Threading.Mutex> obiekt, który przedstawia muteks systemu o nazwie przy użyciu konstruktora, który przyjmuje nazwę.</span><span class="sxs-lookup"><span data-stu-id="72764-140">You can create a <xref:System.Threading.Mutex> object that represents a named system mutex by using a constructor that accepts a name.</span></span> <span data-ttu-id="72764-141">W tym samym czasie można utworzyć obiektu systemu operacyjnego lub może istnieć przed tworzenie <xref:System.Threading.Mutex> obiektu.</span><span class="sxs-lookup"><span data-stu-id="72764-141">The operating-system object can be created at the same time, or it can exist before the creation of the <xref:System.Threading.Mutex> object.</span></span> <span data-ttu-id="72764-142">Możesz tworzyć wiele <xref:System.Threading.Mutex> obiekty reprezentujące takie same, o nazwie systemu element mutex i można użyć <xref:System.Threading.Mutex.OpenExisting%2A> metodę, aby otworzyć istniejący o nazwie systemu element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-142">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex, and you can use the <xref:System.Threading.Mutex.OpenExisting%2A> method to open an existing named system mutex.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72764-143">Na serwerze, na którym są uruchomione usługi terminalowe mutex o nazwie system może mieć dwa poziomy widoczności.</span><span class="sxs-lookup"><span data-stu-id="72764-143">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="72764-144">Jeśli nazwa zaczyna się od prefiksu "Global\\", element mutex są widoczne we wszystkich sesjach serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="72764-144">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="72764-145">Jeśli nazwa zaczyna się od prefiksu "lokalnego\\", element mutex jest widoczna tylko w sesji serwera terminali, której został utworzony.</span><span class="sxs-lookup"><span data-stu-id="72764-145">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="72764-146">W takim przypadku oddzielnych mutex o takiej samej nazwie może istnieć we wszystkich innych sesji serwera terminali na serwerze.</span><span class="sxs-lookup"><span data-stu-id="72764-146">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="72764-147">Jeśli nie określisz prefiks, podczas tworzenia nazwanego obiektu mutex, zajmuje się prefiksem "lokalnego\\".</span><span class="sxs-lookup"><span data-stu-id="72764-147">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="72764-148">W sesji serwera terminali dwóch muteksy, których nazwy różnią się jedynie ich prefiksy są oddzielne muteksy i obie są widoczne dla wszystkich procesów w sesji serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="72764-148">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="72764-149">Oznacza to, że nazwy prefiksu "Global\\" i "lokalnego\\" opisuje zakres nazwa obiektu mutex względem sesje serwera terminali, nie względem procesów.</span><span class="sxs-lookup"><span data-stu-id="72764-149">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

  
## Examples  
 <span data-ttu-id="72764-150">W tym przykładzie pokazano, jak lokalnie <xref:System.Threading.Mutex> obiekt jest używany do synchronizowania dostępu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="72764-150">This example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="72764-151">Ponieważ każdy wątek wywołujący jest zablokowany do momentu jej uzyskuje własność obiektu mutex, należy wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> metodę, aby zwolnić własności wątku.</span><span class="sxs-lookup"><span data-stu-id="72764-151">Because each calling thread is blocked until it acquires ownership of the mutex, it must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the thread.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Mutex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="72764-152">W poniższym przykładzie każdy wątek wywołuje <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> metodę, aby pobrać element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-152">In the following example, each thread calls the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> method to acquire the mutex.</span></span> <span data-ttu-id="72764-153">Jeśli upłynie limit czasu, metoda zwraca `false`, i wątku nie uzyska element mutex ani nie uzyska dostęp do zasobów chroni element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-153">If the time-out interval elapses, the method returns `false`, and the thread neither acquires the mutex nor gains access to the resource the mutex protects.</span></span> <span data-ttu-id="72764-154"><xref:System.Threading.Mutex.ReleaseMutex%2A> Metoda jest wywoływana tylko przez wątek, który uzyska element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-154">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is called only by the thread that acquires the mutex.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="72764-155">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="72764-155">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72764-156">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-156">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="72764-157">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasy przy użyciu domyślnej właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-157">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-158">Wywołanie tego przeciążenia konstruktora jest taka sama jak wywołanie <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> przeciążenia konstruktora i określając `false` dla początkowej własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-158">Calling this constructor overload is the same as calling the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor overload and specifying `false` for initial ownership of the mutex.</span></span> <span data-ttu-id="72764-159">Oznacza to, że wątek wywołujący nie jest właścicielem obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-159">That is, the calling thread does not own the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72764-160">Poniższy kod przedstawia przykład, w jaki sposób lokalny <xref:System.Threading.Mutex> obiekt jest używany do synchronizowania dostępu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="72764-160">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="72764-161">Wątek, który tworzy element mutex nie posiada ona początkowo.</span><span class="sxs-lookup"><span data-stu-id="72764-161">The thread that creates the mutex does not own it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex initiallyOwned" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="72764-162">
            <see langword="true" /> Aby dać wywołującego wątku początkowej własności obiektu mutex; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-162">
              <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72764-163">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasie z atrybutem wartość logiczną, wskazującą, czy wątek wywołujący powinien mieć początkowej własności obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-163">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="72764-164">Poniższy kod przedstawia przykład, w jaki sposób lokalny <xref:System.Threading.Mutex> obiekt jest używany do synchronizowania dostępu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="72764-164">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="72764-165">Wątek, który tworzy <xref:System.Threading.Mutex> początkowo jest jego właścicielem.</span><span class="sxs-lookup"><span data-stu-id="72764-165">The thread that creates the <xref:System.Threading.Mutex> owns it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="72764-166">
            <see langword="true" /> Aby dać wywołującego wątku początkowej własności obiektu mutex systemu o nazwie, jeśli nazwany systemu element mutex jest tworzona w wyniku tego wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-166">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="72764-167">Nazwa <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-167">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="72764-168">Jeśli wartość jest <see langword="null" />, <see cref="T:System.Threading.Mutex" /> jest bez nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-168">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72764-169">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasie z atrybutem wartość logiczną, wskazującą, czy wątek wywołujący powinien mieć początkowej własności obiektu mutex i ciąg, który jest nazwą obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-169">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-170">Jeśli `name` nie `null` i `initiallyOwned` jest `true`, wątek wywołujący jest właścicielem obiektu mutex, tylko wtedy, gdy element mutex o nazwie system został utworzony w wyniku tego wywołania.</span><span class="sxs-lookup"><span data-stu-id="72764-170">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the mutex only if the named system mutex was created as a result of this call.</span></span> <span data-ttu-id="72764-171">Ponieważ nie istnieje żaden mechanizm służący do określania, czy nazwany systemu element mutex został utworzony, to lepiej określać `false` dla `initiallyOwned` podczas wywoływania tego przeciążenia konstruktora.</span><span class="sxs-lookup"><span data-stu-id="72764-171">Since there is no mechanism for determining whether the named system mutex was created, it is better to specify `false` for `initiallyOwned` when calling this constructor overload.</span></span> <span data-ttu-id="72764-172">Możesz użyć <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> konstruktora, jeśli zachodzi potrzeba określenia własności początkowej.</span><span class="sxs-lookup"><span data-stu-id="72764-172">You can use the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> constructor if you need to determine initial ownership.</span></span>  
  
 <span data-ttu-id="72764-173">Ten konstruktor inicjuje <xref:System.Threading.Mutex> obiekt, który przedstawia muteks systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="72764-173">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="72764-174">Możesz tworzyć wiele <xref:System.Threading.Mutex> obiekty reprezentujące takie same, o nazwie systemu element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-174">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="72764-175">Jeśli nazwany element mutex został już utworzony za pomocą kontrolę dostępu, a obiekt wywołujący nie ma <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="72764-175">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="72764-176">Aby otworzyć istniejący o nazwie obiektu mutex z tylko te uprawnienia, które są wymagane do zsynchronizowania działaniach, zobacz <xref:System.Threading.Mutex.OpenExisting%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-176">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="72764-177">Jeśli określisz `null` lub ciągu pustego `name`, Lokalny element mutex zostanie utworzony, tak, jakby były nazywane <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="72764-177">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="72764-178">W tym przypadku `createdNew` jest zawsze `true`.</span><span class="sxs-lookup"><span data-stu-id="72764-178">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="72764-179">Ponieważ są one całego systemu, o nazwie muteksy może służyć do zapewnienia koordynacji wykorzystania zasobów przez granice procesu.</span><span class="sxs-lookup"><span data-stu-id="72764-179">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72764-180">Na serwerze, na którym są uruchomione usługi terminalowe mutex o nazwie system może mieć dwa poziomy widoczności.</span><span class="sxs-lookup"><span data-stu-id="72764-180">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="72764-181">Jeśli nazwa zaczyna się od prefiksu "Global\\", element mutex są widoczne we wszystkich sesjach serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="72764-181">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="72764-182">Jeśli nazwa zaczyna się od prefiksu "lokalnego\\", element mutex jest widoczna tylko w sesji serwera terminali, której został utworzony.</span><span class="sxs-lookup"><span data-stu-id="72764-182">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="72764-183">W takim przypadku oddzielnych mutex o takiej samej nazwie może istnieć we wszystkich innych sesji serwera terminali na serwerze.</span><span class="sxs-lookup"><span data-stu-id="72764-183">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="72764-184">Jeśli nie określisz prefiks, podczas tworzenia nazwanego obiektu mutex, zajmuje się prefiksem "lokalnego\\".</span><span class="sxs-lookup"><span data-stu-id="72764-184">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="72764-185">W sesji serwera terminali dwóch muteksy, których nazwy różnią się jedynie ich prefiksy są oddzielne muteksy i obie są widoczne dla wszystkich procesów w sesji serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="72764-185">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="72764-186">Oznacza to, że nazwy prefiksu "Global\\" i "lokalnego\\" opisuje zakres nazwa obiektu mutex względem sesje serwera terminali, nie względem procesów.</span><span class="sxs-lookup"><span data-stu-id="72764-186">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

## Examples  
 <span data-ttu-id="72764-187">Poniższy przykład pokazuje, jak nazwanego obiektu mutex jest używany do między wątkami w dwóch oddzielnych procesach.</span><span class="sxs-lookup"><span data-stu-id="72764-187">The following example shows how a named mutex is used to signal between threads running in two separate processes.</span></span>  
  
 <span data-ttu-id="72764-188">Uruchom ten program z co najmniej dwa polecenia systemu windows.</span><span class="sxs-lookup"><span data-stu-id="72764-188">Run this program from two or more command windows.</span></span> <span data-ttu-id="72764-189">Każdy proces tworzy <xref:System.Threading.Mutex> obiekt, który reprezentuje nazwanego obiektu mutex `MyMutex`.</span><span class="sxs-lookup"><span data-stu-id="72764-189">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex `MyMutex`.</span></span> <span data-ttu-id="72764-190">Nazwany element mutex jest obiektem systemowym, którego okres istnienia jest ograniczone przez okresy istnienia <xref:System.Threading.Mutex> obiekty reprezentujące go.</span><span class="sxs-lookup"><span data-stu-id="72764-190">The named mutex is a system object whose lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="72764-191">Nazwany element mutex jest tworzony podczas tworzenia pierwszego procesu jej <xref:System.Threading.Mutex> obiektu; w tym przykładzie nazwanego obiektu mutex jest własnością pierwszy proces, który uruchamia program.</span><span class="sxs-lookup"><span data-stu-id="72764-191">The named mutex is created when the first process creates its <xref:System.Threading.Mutex> object; in this example, the named mutex is owned by the first process that runs the program.</span></span> <span data-ttu-id="72764-192">Nazwany element mutex zostanie zniszczony podczas wszystkich <xref:System.Threading.Mutex> wydano obiekty reprezentujące go.</span><span class="sxs-lookup"><span data-stu-id="72764-192">The named mutex is destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span>  
  
 <span data-ttu-id="72764-193">Przeciążenia konstruktora, używany w tym przykładzie nie wiadomo wątek wywołujący, czy przyznano początkowej własności nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-193">The constructor overload used in this example cannot tell the calling thread whether initial ownership of the named mutex was granted.</span></span> <span data-ttu-id="72764-194">Nie należy używać tego konstruktora, aby zażądać początkowego, własności, chyba, że można mieć pewność, że wątek utworzy nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-194">You should not use this constructor to request initial ownership unless you can be certain that the thread will create the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="72764-195">Mutex o nazwie istnieje i ma kontrolę dostępu, ale użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-195">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="72764-196">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-196">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="72764-197">Nazwany element mutex nie można utworzyć, prawdopodobnie ponieważ dojście oczekiwania innego typu ma taką samą nazwę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-197">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72764-198">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-198">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="72764-199">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-199">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="72764-200">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-200">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="72764-201">
            <see langword="true" /> Aby dać wywołującego wątku początkowej własności obiektu mutex systemu o nazwie, jeśli nazwany systemu element mutex jest tworzona w wyniku tego wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-201">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="72764-202">Nazwa <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-202">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="72764-203">Jeśli wartość jest <see langword="null" />, <see cref="T:System.Threading.Mutex" /> jest bez nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-203">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="72764-204">Po powrocie z tej metody zawiera wartość logiczna, która jest <see langword="true" /> Jeśli utworzono lokalnego obiektu mutex (to znaczy, jeśli <c>nazwa</c> jest <see langword="null" /> ani być pustym ciągiem) lub jeśli utworzono określonego nazwanego systemu element mutex; <see langword="false" /> Jeśli określony o nazwie systemu element mutex już istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-204">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="72764-205">Ten parametr jest przekazywany niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-205">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72764-206">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasie z atrybutem wartość logiczną, wskazującą, czy wątek wywołujący powinien mieć początkowej własności obiektu mutex, ciąg, który jest nazwą obiektu mutex i wartość logiczną, która wskazuje, gdy metoda zwróci wartość, czy wątek wywołujący uzyskał początkowej własności obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-206">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-207">Jeśli `name` nie `null` i `initiallyOwned` jest `true`, wątek wywołujący posiada nazwanego obiektu mutex tylko wtedy, gdy `createdNew` jest `true` po wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="72764-207">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="72764-208">W przeciwnym razie wątek może żądać element mutex, wywołując <xref:System.Threading.WaitHandle.WaitOne%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-208">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="72764-209">Ten konstruktor inicjuje <xref:System.Threading.Mutex> obiekt, który przedstawia muteks systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="72764-209">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="72764-210">Możesz tworzyć wiele <xref:System.Threading.Mutex> obiekty reprezentujące takie same, o nazwie systemu element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-210">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="72764-211">Jeśli nazwany element mutex został już utworzony za pomocą kontrolę dostępu, a obiekt wywołujący nie ma <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> praw, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="72764-211">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> rights, an exception is thrown.</span></span> <span data-ttu-id="72764-212">Aby otworzyć istniejący o nazwie obiektu mutex z tylko te uprawnienia, które są wymagane do zsynchronizowania działaniach, zobacz <xref:System.Threading.Mutex.OpenExisting%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-212">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="72764-213">Jeśli określisz `null` lub ciągu pustego `name`, Lokalny element mutex zostanie utworzony, tak, jakby były nazywane <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="72764-213">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="72764-214">W tym przypadku `createdNew` jest zawsze `true`.</span><span class="sxs-lookup"><span data-stu-id="72764-214">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="72764-215">Ponieważ są one całego systemu, o nazwie muteksy może służyć do zapewnienia koordynacji wykorzystania zasobów przez granice procesu.</span><span class="sxs-lookup"><span data-stu-id="72764-215">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72764-216">Na serwerze, na którym są uruchomione usługi terminalowe mutex o nazwie system może mieć dwa poziomy widoczności.</span><span class="sxs-lookup"><span data-stu-id="72764-216">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="72764-217">Jeśli nazwa zaczyna się od prefiksu "Global\\", element mutex są widoczne we wszystkich sesjach serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="72764-217">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="72764-218">Jeśli nazwa zaczyna się od prefiksu "lokalnego\\", element mutex jest widoczna tylko w sesji serwera terminali, której został utworzony.</span><span class="sxs-lookup"><span data-stu-id="72764-218">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="72764-219">W takim przypadku oddzielnych mutex o takiej samej nazwie może istnieć we wszystkich innych sesji serwera terminali na serwerze.</span><span class="sxs-lookup"><span data-stu-id="72764-219">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="72764-220">Jeśli nie określisz prefiks, podczas tworzenia nazwanego obiektu mutex, zajmuje się prefiksem "lokalnego\\".</span><span class="sxs-lookup"><span data-stu-id="72764-220">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="72764-221">W sesji serwera terminali dwóch muteksy, których nazwy różnią się jedynie ich prefiksy są oddzielne muteksy i obie są widoczne dla wszystkich procesów w sesji serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="72764-221">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="72764-222">Oznacza to, że nazwy prefiksu "Global\\" i "lokalnego\\" opisuje zakres nazwa obiektu mutex względem sesje serwera terminali, nie względem procesów.</span><span class="sxs-lookup"><span data-stu-id="72764-222">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]   
  
## Examples  
 <span data-ttu-id="72764-223">Poniższy przykład kodu pokazuje, jak nazwanego obiektu mutex jest używany w celu sygnalizowania, że między procesów lub wątków.</span><span class="sxs-lookup"><span data-stu-id="72764-223">The following code example shows how a named mutex is used to signal between processes or threads.</span></span> <span data-ttu-id="72764-224">Uruchom ten program z co najmniej dwa polecenia systemu windows.</span><span class="sxs-lookup"><span data-stu-id="72764-224">Run this program from two or more command windows.</span></span> <span data-ttu-id="72764-225">Każdy proces tworzy <xref:System.Threading.Mutex> obiekt, który reprezentuje nazwanego obiektu mutex "MyMutex".</span><span class="sxs-lookup"><span data-stu-id="72764-225">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex "MyMutex".</span></span> <span data-ttu-id="72764-226">Nazwany element mutex jest obiektem systemowym.</span><span class="sxs-lookup"><span data-stu-id="72764-226">The named mutex is a system object.</span></span> <span data-ttu-id="72764-227">W tym przykładzie jego okres istnienia jest ograniczone przez okresy istnienia <xref:System.Threading.Mutex> obiekty reprezentujące go.</span><span class="sxs-lookup"><span data-stu-id="72764-227">In this example, its lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="72764-228">Nazwanego obiektu mutex jest tworzone, gdy pierwszy proces tworzy jego lokalnego <xref:System.Threading.Mutex> obiektu, a następnie niszczone, gdy wszystkie <xref:System.Threading.Mutex> wydano obiekty reprezentujące go.</span><span class="sxs-lookup"><span data-stu-id="72764-228">The named mutex is created when the first process creates its local <xref:System.Threading.Mutex> object, and destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span> <span data-ttu-id="72764-229">Nazwany element mutex początkowo jest własnością pierwszego procesu.</span><span class="sxs-lookup"><span data-stu-id="72764-229">The named mutex is initially owned by the first process.</span></span> <span data-ttu-id="72764-230">Drugi procesu i wszystkie kolejne procesy poczekaj, aż procesów wcześniejszych wersji nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-230">The second process and any subsequent processes wait for earlier processes to release the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="72764-231">Mutex o nazwie istnieje i ma kontrolę dostępu, ale użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-231">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="72764-232">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-232">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="72764-233">Nazwany element mutex nie można utworzyć, prawdopodobnie ponieważ dojście oczekiwania innego typu ma taką samą nazwę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-233">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72764-234">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-234">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="72764-235">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-235">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="72764-236">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-236">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  * System.Security.AccessControl.MutexSecurity -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew, mutexSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="72764-237">
            <see langword="true" /> Aby dać wywołującego wątku początkowej własności obiektu mutex systemu o nazwie, jeśli nazwany systemu element mutex jest tworzona w wyniku tego wywołania; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-237">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="72764-238">Nazwa systemu element mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-238">The name of the system mutex.</span>
          </span>
          <span data-ttu-id="72764-239">Jeśli wartość jest <see langword="null" />, <see cref="T:System.Threading.Mutex" /> jest bez nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-239">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="72764-240">Po powrocie z tej metody zawiera wartość logiczna, która jest <see langword="true" /> Jeśli utworzono lokalnego obiektu mutex (to znaczy, jeśli <c>nazwa</c> jest <see langword="null" /> ani być pustym ciągiem) lub jeśli utworzono określonego nazwanego systemu element mutex; <see langword="false" /> Jeśli określony o nazwie systemu element mutex już istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-240">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="72764-241">Ten parametr jest przekazywany niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-241">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="mutexSecurity">
          <span data-ttu-id="72764-242">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> obiekt, który reprezentuje kontrolę dostępu mają być stosowane do nazwanych systemu element mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-242">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72764-243">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Mutex" /> klasie z atrybutem wartość logiczną, wskazującą, czy wątek wywołujący powinien mieć początkowej własności obiektu mutex, ciąg, który jest nazwą obiektu mutex, zmiennej typu Boolean wskazującą, gdy metoda zwróci wartość, czy wątek wywołujący uzyskał początkowej własności obiektu mutex i kontrolę dostępu stosowaną do nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-243">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, a Boolean variable that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex, and the access control security to be applied to the named mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-244">Jeśli `name` nie `null` i `initiallyOwned` jest `true`, wątek wywołujący posiada nazwanego obiektu mutex tylko wtedy, gdy `createdNew` jest `true` po wywołaniu.</span><span class="sxs-lookup"><span data-stu-id="72764-244">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="72764-245">W przeciwnym razie wątek może żądać element mutex, wywołując <xref:System.Threading.WaitHandle.WaitOne%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-245">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="72764-246">Użyj tego konstruktora, aby zastosować kontrolę dostępu do elementu mutex systemu o nazwie, podczas jego tworzenia, uniemożliwiając innym kodem przejmowaniu element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-246">Use this constructor to apply access control security to a named system mutex when it is created, preventing other code from taking control of the mutex.</span></span>  
  
 <span data-ttu-id="72764-247">Ten konstruktor inicjuje <xref:System.Threading.Mutex> obiekt, który przedstawia muteks systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="72764-247">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="72764-248">Możesz tworzyć wiele <xref:System.Threading.Mutex> obiekty reprezentujące takie same, o nazwie systemu element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-248">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="72764-249">Jeśli nazwany systemu element mutex nie istnieje, zostanie utworzony przy użyciu określonego kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="72764-249">If the named system mutex does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="72764-250">Jeśli istnieje nazwanego obiektu mutex, określony kontrolę dostępu jest ignorowany.</span><span class="sxs-lookup"><span data-stu-id="72764-250">If the named mutex exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72764-251">Obiekt wywołujący ma pełną kontrolę nad nowo utworzony <xref:System.Threading.Mutex> nawet wtedy, gdy obiekt `mutexSecurity` nie zezwala lub nie powiedzie się pewne prawa dostępu do bieżącego użytkownika.</span><span class="sxs-lookup"><span data-stu-id="72764-251">The caller has full control over the newly created <xref:System.Threading.Mutex> object even if `mutexSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="72764-252">Jednak jeśli bieżący użytkownik próbuje pobrać inny <xref:System.Threading.Mutex> obiektu, do reprezentowania takie same o nazwie obiektu mutex, za pomocą konstruktora lub <xref:System.Threading.Mutex.OpenExisting%2A> metody Windows zastosowano kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="72764-252">However, if the current user attempts to get another <xref:System.Threading.Mutex> object to represent the same named mutex, using either a constructor or the <xref:System.Threading.Mutex.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="72764-253">Jeśli nazwany element mutex został już utworzony za pomocą kontrolę dostępu, a obiekt wywołujący nie ma <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="72764-253">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="72764-254">Aby otworzyć istniejący o nazwie obiektu mutex z tylko te uprawnienia, które są wymagane do zsynchronizowania działaniach, zobacz <xref:System.Threading.Mutex.OpenExisting%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-254">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="72764-255">Jeśli określisz `null` lub ciągu pustego `name`, Lokalny element mutex zostanie utworzony, tak, jakby były nazywane <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="72764-255">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="72764-256">W tym przypadku `createdNew` jest zawsze `true`.</span><span class="sxs-lookup"><span data-stu-id="72764-256">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="72764-257">Ponieważ są one całego systemu, o nazwie muteksy może służyć do zapewnienia koordynacji wykorzystania zasobów przez granice procesu.</span><span class="sxs-lookup"><span data-stu-id="72764-257">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="72764-258">Na serwerze, na którym są uruchomione usługi terminalowe mutex o nazwie system może mieć dwa poziomy widoczności.</span><span class="sxs-lookup"><span data-stu-id="72764-258">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="72764-259">Jeśli nazwa zaczyna się od prefiksu "Global\\", element mutex są widoczne we wszystkich sesjach serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="72764-259">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="72764-260">Jeśli nazwa zaczyna się od prefiksu "lokalnego\\", element mutex jest widoczna tylko w sesji serwera terminali, której został utworzony.</span><span class="sxs-lookup"><span data-stu-id="72764-260">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="72764-261">W takim przypadku oddzielnych mutex o takiej samej nazwie może istnieć we wszystkich innych sesji serwera terminali na serwerze.</span><span class="sxs-lookup"><span data-stu-id="72764-261">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="72764-262">Jeśli nie określisz prefiks, podczas tworzenia nazwanego obiektu mutex, zajmuje się prefiksem "lokalnego\\".</span><span class="sxs-lookup"><span data-stu-id="72764-262">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="72764-263">W sesji serwera terminali dwóch muteksy, których nazwy różnią się jedynie ich prefiksy są oddzielne muteksy i obie są widoczne dla wszystkich procesów w sesji serwera terminali.</span><span class="sxs-lookup"><span data-stu-id="72764-263">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="72764-264">Oznacza to, że nazwy prefiksu "Global\\" i "lokalnego\\" opisuje zakres nazwa obiektu mutex względem sesje serwera terminali, nie względem procesów.</span><span class="sxs-lookup"><span data-stu-id="72764-264">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]  
   
  
## Examples  
 <span data-ttu-id="72764-265">Poniższy przykład kodu pokazuje zachowanie między procesami nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="72764-265">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="72764-266">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenia metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-266">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="72764-267">Jeśli element mutex nie istnieje, zostanie utworzony przy użyciu początkowego, własności i kontrolę dostępu, która odrzuca prawa do używania obiektu mutex bieżącego użytkownika, ale przyznaje uprawnienia do odczytu i zmienić uprawnienia do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-267">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="72764-268">Po uruchomieniu przykładzie skompilowane z dwóch poleceń systemu windows, drugą kopię spowoduje zgłoszenie wyjątku naruszenie zasad dostępu na wywołanie <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="72764-268">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="72764-269">Wyjątek, a w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenia metody, aby otworzyć element mutex za pomocą uprawnień wymaganych do odczytywania i zmienić uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="72764-269">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="72764-270">Po zmianie uprawnienia element mutex zostanie otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="72764-270">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="72764-271">Po uruchomieniu przykładzie skompilowane z okna poleceń, trzeci działa przy użyciu nowych uprawnień.</span><span class="sxs-lookup"><span data-stu-id="72764-271">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="72764-272">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-272">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="72764-273">Mutex o nazwie istnieje i ma kontrolę dostępu, ale użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-273">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="72764-274">Nazwany element mutex nie można utworzyć, prawdopodobnie ponieważ dojście oczekiwania innego typu ma taką samą nazwę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-274">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72764-275">
            <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-275">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="72764-276">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-276">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="72764-277">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-277">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.MutexSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As MutexSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::MutexSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.MutexSecurity" Usage="mutex.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="72764-278">Pobiera <see cref="T:System.Security.AccessControl.MutexSecurity" /> obiekt, który reprezentuje kontrolę dostępu do nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-278">Gets a <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72764-279">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> obiekt, który reprezentuje kontrolę dostępu do nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-279">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-280"><xref:System.Threading.Mutex.GetAccessControl%2A> Metoda używa następujących kombinacji flag (połączone za pomocą bitowej operacji OR) do wyszukania uprawnienia: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, i <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="72764-280">The <xref:System.Threading.Mutex.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="72764-281">Użytkownik musi mieć <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> do wywołania tej metody, a element mutex musi została otwarta z <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="72764-281">The user must have <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72764-282">Poniższy przykład kodu pokazuje zachowanie między procesami nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="72764-282">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="72764-283">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenia metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-283">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="72764-284">Jeśli element mutex nie istnieje, zostanie utworzony przy użyciu początkowego, własności i kontrolę dostępu, która odrzuca prawa do używania obiektu mutex bieżącego użytkownika, ale przyznaje uprawnienia do odczytu i zmienić uprawnienia do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-284">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="72764-285">Po uruchomieniu przykładzie skompilowane z dwóch poleceń systemu windows, drugą kopię spowoduje zgłoszenie wyjątku naruszenie zasad dostępu na wywołanie <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="72764-285">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="72764-286">Wyjątek, a w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenia metody, aby otworzyć element mutex za pomocą uprawnień wymaganych do odczytywania i zmienić uprawnienia za pomocą <xref:System.Threading.Mutex.GetAccessControl%2A> i <xref:System.Threading.Mutex.SetAccessControl%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-286">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="72764-287">Po zmianie uprawnienia element mutex zostanie otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="72764-287">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="72764-288">Po uruchomieniu przykładzie skompilowane z okna poleceń, trzeci działa przy użyciu nowych uprawnień.</span><span class="sxs-lookup"><span data-stu-id="72764-288">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="72764-289">Bieżący <see cref="T:System.Threading.Mutex" /> obiektu przedstawia muteks systemu o nazwie, ale użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-289">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
          <span data-ttu-id="72764-290">- lub - bieżący <see cref="T:System.Threading.Mutex" /> przedstawia muteks systemu o nazwie, a nie zostało otwarte z <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-290">-or-  The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, and was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="72764-291">Nie jest obsługiwane dla Windows 98 lub Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-291">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72764-292">Otwiera określony element mutex o nazwie, jeśli już istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-292">Opens a specified named mutex, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="72764-293">Nazwa obiektu mutex systemu, aby otworzyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-293">The name of the system mutex to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72764-294">Otwiera określony nazwany element mutex, jeśli już istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-294">Opens the specified named mutex, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72764-295">Obiekt, który reprezentuje nazwane systemu element mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-295">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-296"><xref:System.Threading.Mutex.OpenExisting%2A> Metoda podejmuje próbę otwarcia określonego o nazwie systemu element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-296">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open the specified named system mutex.</span></span> <span data-ttu-id="72764-297">Jeśli systemu element mutex nie istnieje, ta metoda zgłasza wyjątek zamiast tworzenia obiektu systemowego.</span><span class="sxs-lookup"><span data-stu-id="72764-297">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="72764-298">Aby utworzyć systemu element mutex, jeśli jeszcze nie istnieje, użyj jednej z <xref:System.Threading.Mutex.%23ctor%2A> konstruktorów, które ma `name` parametru.</span><span class="sxs-lookup"><span data-stu-id="72764-298">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="72764-299">Wiele wywołań tej metody, używanego przez tę samą wartość `name` nie zawsze zwracają takie same <xref:System.Threading.Mutex> obiektów, nawet jeśli obiekty, które są zwracane reprezentują ten sam element mutex systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="72764-299">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="72764-300">Tego przeciążenia metody jest równoważne z wywoływaniem <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenie metody i określając <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> i <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> praw, połączone za pomocą bitowej operacji OR.</span><span class="sxs-lookup"><span data-stu-id="72764-300">This method overload is equivalent to calling the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="72764-301">Określanie <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> Flaga umożliwia wątku czekać na element mutex i określając <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> Flaga umożliwia wątków do wywoływania <xref:System.Threading.Mutex.ReleaseMutex%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-301">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="72764-302">Ta metoda nie żąda własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-302">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72764-303">Poniższy przykład kodu pokazuje zachowanie między procesami nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="72764-303">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="72764-304">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenia metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-304">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="72764-305">Jeśli element mutex nie istnieje, zostanie utworzony przy użyciu początkowego, własności i kontrolę dostępu, która odrzuca prawa do używania obiektu mutex bieżącego użytkownika, ale przyznaje uprawnienia do odczytu i zmienić uprawnienia do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-305">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="72764-306">Po uruchomieniu przykładzie skompilowane z dwóch poleceń systemu windows, drugą kopię spowoduje zgłoszenie wyjątku naruszenie zasad dostępu na wywołanie <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="72764-306">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="72764-307">Wyjątek, a w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenia metody, aby otworzyć element mutex za pomocą uprawnień wymaganych do odczytywania i zmienić uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="72764-307">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="72764-308">Po zmianie uprawnienia element mutex zostanie otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="72764-308">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="72764-309">Po uruchomieniu przykładzie skompilowane z okna poleceń, trzeci działa przy użyciu nowych uprawnień.</span><span class="sxs-lookup"><span data-stu-id="72764-309">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72764-310">
            <paramref name="name" /> jest ciągiem pustym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-310">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="72764-311">- lub - <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-311">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72764-312">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-312">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="72764-313">Nazwany element mutex nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-313">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="72764-314">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-314">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="72764-315">Mutex o nazwie istnieje, ale użytkownik nie ma dostępu zabezpieczeń wymagane do jej używać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-315">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="72764-316">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-316">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="72764-317">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-317">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As MutexRights) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.MutexRights -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="72764-318">Nazwa obiektu mutex systemu, aby otworzyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-318">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="72764-319">Bitowa kombinacja wartości wyliczenia, które reprezentują dostęp pożądanych zabezpieczeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-319">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72764-320">Zostanie otwarty określonego nazwanego obiektu mutex, jeśli już istnieje, z dostępem do pożądanych zabezpieczeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-320">Opens the specified named mutex, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72764-321">Obiekt, który reprezentuje nazwane systemu element mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-321">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-322">`rights` Parametr musi zawierać <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flagi, aby zezwolić wątków, aby czekać na element mutex i <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flagi, aby zezwolić wątków do wywoływania <xref:System.Threading.Mutex.ReleaseMutex%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-322">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="72764-323"><xref:System.Threading.Mutex.OpenExisting%2A> Metoda próbuje otworzyć istniejący o nazwie elementu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-323">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open an existing named mutex.</span></span> <span data-ttu-id="72764-324">Jeśli systemu element mutex nie istnieje, ta metoda zgłasza wyjątek zamiast tworzenia obiektu systemowego.</span><span class="sxs-lookup"><span data-stu-id="72764-324">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="72764-325">Aby utworzyć systemu element mutex, jeśli jeszcze nie istnieje, użyj jednej z <xref:System.Threading.Mutex.%23ctor%2A> konstruktorów, które ma `name` parametru.</span><span class="sxs-lookup"><span data-stu-id="72764-325">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="72764-326">Wiele wywołań tej metody, używanego przez tę samą wartość `name` nie zawsze zwracają takie same <xref:System.Threading.Mutex> obiektów, nawet jeśli obiekty, które są zwracane reprezentują ten sam element mutex systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="72764-326">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="72764-327">Ta metoda nie żąda własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-327">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72764-328">Poniższy przykład kodu pokazuje zachowanie między procesami nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="72764-328">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="72764-329">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenia metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-329">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="72764-330">Jeśli element mutex nie istnieje, zostanie utworzony przy użyciu początkowego, własności i kontrolę dostępu, która odrzuca prawa do używania obiektu mutex bieżącego użytkownika, ale przyznaje uprawnienia do odczytu i zmienić uprawnienia do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-330">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="72764-331">Po uruchomieniu przykładzie skompilowane z dwóch poleceń systemu windows, drugą kopię spowoduje zgłoszenie wyjątku naruszenie zasad dostępu na wywołanie <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="72764-331">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="72764-332">Wyjątek, a w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenia metody, aby otworzyć element mutex za pomocą uprawnień wymaganych do odczytywania i zmienić uprawnienia.</span><span class="sxs-lookup"><span data-stu-id="72764-332">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="72764-333">Po zmianie uprawnienia element mutex zostanie otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="72764-333">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="72764-334">Po uruchomieniu przykładzie skompilowane z okna poleceń, trzeci działa przy użyciu nowych uprawnień.</span><span class="sxs-lookup"><span data-stu-id="72764-334">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72764-335">
            <paramref name="name" /> jest ciągiem pustym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-335">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="72764-336">- lub - <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-336">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72764-337">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-337">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="72764-338">Nazwany element mutex nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-338">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="72764-339">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-339">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="72764-340">Mutex o nazwie istnieje, ale użytkownik nie ma dostępu pożądanych zabezpieczeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-340">The named mutex exists, but the user does not have the desired security access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="72764-341">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-341">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="72764-342">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-342">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMutex">
      <MemberSignature Language="C#" Value="public void ReleaseMutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseMutex() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.ReleaseMutex" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMutex ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseMutex();" />
      <MemberSignature Language="F#" Value="member this.ReleaseMutex : unit -&gt; unit" Usage="mutex.ReleaseMutex " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="72764-343">Wersje <see cref="T:System.Threading.Mutex" /> po.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-343">Releases the <see cref="T:System.Threading.Mutex" /> once.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-344">Zawsze, gdy wątek uzyskuje mutex (na przykład przez wywołanie jego <xref:System.Threading.WaitHandle.WaitOne%2A> metoda), następnie należy wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> zrzeka się własności obiektu mutex i odblokować inne wątki, które próbujesz przejęcie na własność obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-344">Whenever a thread acquires a mutex (for example, by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method), it must subsequently call <xref:System.Threading.Mutex.ReleaseMutex%2A> to relinquish ownership of the mutex and unblock other threads that are trying to gain ownership of the mutex.</span></span> <span data-ttu-id="72764-345">Jeśli próba pobrania własności obiektu mutex zakończy się niepowodzeniem (na przykład, gdy wywołanie <xref:System.Threading.WaitHandle.WaitOne%2A> metody z `millisecondsTimeout` lub `timeout` parametr zwraca `false` , ponieważ upłynął limit czasu żądania), wątek nie powinien wywoływać <xref:System.Threading.Mutex.ReleaseMutex%2A>, w tym przypadek, wątek również nie powinien uzyskać dostęp do zasobu, chronione przez element mutex, co ilustruje poniższy przykład.</span><span class="sxs-lookup"><span data-stu-id="72764-345">If the attempt to get ownership of the mutex fails (for example, when a call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method with a `millisecondsTimeout` or a `timeout` parameter returns `false` because the request times out), the thread shouldn't call <xref:System.Threading.Mutex.ReleaseMutex%2A>, In this case, the thread should also not be allowed to access the resource protected by the mutex, as the following example shows.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 <span data-ttu-id="72764-346">Wątek, który jest właścicielem obiektu mutex można określić ten sam element mutex w wywołaniach funkcji powtarzanych oczekiwania bez blokowania jej wykonanie.</span><span class="sxs-lookup"><span data-stu-id="72764-346">A thread that owns a mutex can specify the same mutex in repeated wait function calls without blocking its execution.</span></span> <span data-ttu-id="72764-347">Liczba wywołań jest przechowywany przez środowisko uruchomieniowe języka wspólnego.</span><span class="sxs-lookup"><span data-stu-id="72764-347">The number of calls is kept by the common language runtime.</span></span> <span data-ttu-id="72764-348">Wątek musi wywołać <xref:System.Threading.Mutex.ReleaseMutex%2A> taką samą liczbę razy, aby zwolnić własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-348">The thread must call <xref:System.Threading.Mutex.ReleaseMutex%2A> the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="72764-349">Wątek kończy działanie podczas będącego właścicielem elementu mutex, jest nazywany porzucone element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-349">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="72764-350">Stan obiektu mutex jest ustawiony na zasygnalizowany, a następnie następny wątek oczekiwania pobiera własności.</span><span class="sxs-lookup"><span data-stu-id="72764-350">The state of the mutex is set to signaled and the next waiting thread gets ownership.</span></span> <span data-ttu-id="72764-351">Jeśli nie jest właścicielem obiektu mutex, jest sygnalizowane stanu obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-351">If no one owns the mutex, the state of the mutex is signaled.</span></span> <span data-ttu-id="72764-352">Począwszy od wersji 2.0 programu .NET Framework, <xref:System.Threading.AbandonedMutexException> jest zgłaszany w następny wątek, który uzyska element mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-352">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the mutex.</span></span> <span data-ttu-id="72764-353">Przed programu .NET Framework w wersji 2.0 żaden wyjątek został zgłoszony.</span><span class="sxs-lookup"><span data-stu-id="72764-353">Prior to version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="72764-354">Porzuconego elementu mutex często oznacza to poważny błąd w kodzie.</span><span class="sxs-lookup"><span data-stu-id="72764-354">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="72764-355">Jeśli wątek kończy działanie bez zwalniania element mutex, struktur danych chronionych przez element mutex może nie być w stanie spójności.</span><span class="sxs-lookup"><span data-stu-id="72764-355">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="72764-356">Następny wątek do żądania własności obiektu mutex można obsługi tego wyjątku i kontynuować, jeśli można zweryfikować integralności struktur danych.</span><span class="sxs-lookup"><span data-stu-id="72764-356">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="72764-357">W przypadku elementu mutex systemowe porzuconego elementu mutex może wskazywać, że aplikacji zostało zakończone nagle (na przykład przy użyciu Menedżera zadań Windows).</span><span class="sxs-lookup"><span data-stu-id="72764-357">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72764-358">W poniższym przykładzie pokazano, jak lokalnie <xref:System.Threading.Mutex> obiekt jest używany do synchronizowania dostępu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="72764-358">The following example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="72764-359">Wątek, który tworzy element mutex nie posiada ona początkowo.</span><span class="sxs-lookup"><span data-stu-id="72764-359">The thread that creates the mutex does not own it initially.</span></span> <span data-ttu-id="72764-360"><xref:System.Threading.Mutex.ReleaseMutex%2A> Metoda jest używana do zwolnienia obiektu mutex, gdy nie jest już potrzebny.</span><span class="sxs-lookup"><span data-stu-id="72764-360">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is used to release the mutex when it is no longer needed.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="72764-361">Wątek wywołujący nie jest właścicielem obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-361">The calling thread does not own the mutex.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="72764-362">Bieżące wystąpienie został już usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-362">The current instance has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.MutexSecurity -&gt; unit" Usage="mutex.SetAccessControl mutexSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="mutexSecurity">
          <span data-ttu-id="72764-363">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> obiekt, który reprezentuje kontrolę dostępu mają być stosowane do nazwanych systemu element mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-363">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72764-364">Ustawia kontrolę dostępu dla elementu mutex systemu o nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-364">Sets the access control security for a named system mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-365">Użytkownik musi mieć <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> praw do wywołania tej metody, a element mutex musi została otwarta z <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="72764-365">The user must have <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72764-366">Poniższy przykład kodu pokazuje zachowanie między procesami nazwanego obiektu mutex z kontrolę dostępu.</span><span class="sxs-lookup"><span data-stu-id="72764-366">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="72764-367">W przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenia metody, aby przetestować obecność nazwanego obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-367">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="72764-368">Jeśli element mutex nie istnieje, zostanie utworzony przy użyciu początkowego, własności i kontrolę dostępu, która odrzuca prawa do używania obiektu mutex bieżącego użytkownika, ale przyznaje uprawnienia do odczytu i zmienić uprawnienia do obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-368">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="72764-369">Po uruchomieniu przykładzie skompilowane z dwóch poleceń systemu windows, drugą kopię spowoduje zgłoszenie wyjątku naruszenie zasad dostępu na wywołanie <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="72764-369">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="72764-370">Wyjątek, a w przykładzie użyto <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenia metody, aby otworzyć element mutex za pomocą uprawnień wymaganych do odczytywania i zmienić uprawnienia za pomocą <xref:System.Threading.Mutex.GetAccessControl%2A> i <xref:System.Threading.Mutex.SetAccessControl%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-370">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="72764-371">Po zmianie uprawnienia element mutex zostanie otwarty z uprawnień wymaganych do wprowadzania i zwolnij go.</span><span class="sxs-lookup"><span data-stu-id="72764-371">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="72764-372">Po uruchomieniu przykładzie skompilowane z okna poleceń, trzeci działa przy użyciu nowych uprawnień.</span><span class="sxs-lookup"><span data-stu-id="72764-372">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72764-373">
            <paramref name="mutexSecurity" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-373">
              <paramref name="mutexSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="72764-374">Użytkownik nie ma <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-374">The user does not have <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
          <span data-ttu-id="72764-375">- lub - element mutex nie został otwarty z <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-375">-or-  The mutex was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="72764-376">Bieżący <see cref="T:System.Threading.Mutex" /> obiekt nie reprezentuje mutex systemu o nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-376">The current <see cref="T:System.Threading.Mutex" /> object does not represent a named system mutex.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72764-377">Otwiera określony element mutex nazwanych, jeśli już istnieje i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-377">Opens a specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Mutex" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="72764-378">Nazwa obiektu mutex systemu, aby otworzyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-378">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="72764-379">Po powrocie z tej metody zawiera <see cref="T:System.Threading.Mutex" /> obiekt, który reprezentuje nazwanego obiektu mutex, jeśli wywołanie zakończyło się pomyślnie, lub <see langword="null" /> Jeśli wywołanie nie powiodło się.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-379">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="72764-380">Ten parametr jest traktowany jako niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-380">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72764-381">Jeśli już istnieje i zwraca wartość wskazującą, czy operacja się powiedzie, zostanie otwarty określonego nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-381">Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72764-382">
            <see langword="true" /> Jeśli nazwany element mutex został otwarty pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-382">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-383">Jeśli nazwany element mutex nie istnieje, ta metoda nie powoduje utworzenia go.</span><span class="sxs-lookup"><span data-stu-id="72764-383">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="72764-384">Aby utworzyć systemu element mutex, jeśli jeszcze nie istnieje, użyj jednej z <xref:System.Threading.Mutex.%23ctor%2A> konstruktorów, które ma `name` parametru.</span><span class="sxs-lookup"><span data-stu-id="72764-384">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="72764-385">Jeśli masz pewności, czy istnieje nazwanego obiektu mutex, użyj tego przeciążenia metody, zamiast <xref:System.Threading.Mutex.OpenExisting%28System.String%29> przeciążenia metody, która zgłasza wyjątek, jeśli element mutex nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="72764-385">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="72764-386">Wiele wywołań tej metody, używanego przez tę samą wartość `name` nie zawsze zwracają takie same <xref:System.Threading.Mutex> obiektów, nawet jeśli obiekty, które są zwracane reprezentują ten sam element mutex systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="72764-386">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="72764-387">Tego przeciążenia metody jest równoważne z wywoływaniem <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> przeciążenie metody i określając <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> i <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> praw, połączone za pomocą bitowej operacji OR.</span><span class="sxs-lookup"><span data-stu-id="72764-387">This method overload is equivalent to calling the <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="72764-388">Określanie <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> Flaga umożliwia wątku czekać na element mutex i określając <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> Flaga umożliwia wątków do wywoływania <xref:System.Threading.Mutex.ReleaseMutex%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-388">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="72764-389">Ta metoda nie żąda własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-389">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72764-390">
            <paramref name="name" /> jest ciągiem pustym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-390">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="72764-391">- lub - <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-391">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72764-392">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-392">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="72764-393">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-393">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="72764-394">Mutex o nazwie istnieje, ale użytkownik nie ma dostępu zabezpieczeń wymagane do jej używać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-394">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="72764-395">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-395">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="72764-396">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-396">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.MutexRights rights, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As MutexRights, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.MutexRights *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="result" Type="System.Threading.Mutex" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="72764-397">Nazwa obiektu mutex systemu, aby otworzyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-397">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="72764-398">Bitowa kombinacja wartości wyliczenia, które reprezentują dostęp pożądanych zabezpieczeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-398">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="72764-399">Po powrocie z tej metody zawiera <see cref="T:System.Threading.Mutex" /> obiekt, który reprezentuje nazwanego obiektu mutex, jeśli wywołanie zakończyło się pomyślnie, lub <see langword="null" /> Jeśli wywołanie nie powiodło się.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-399">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="72764-400">Ten parametr jest traktowany jako niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-400">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72764-401">Jeśli już istnieje z dostępem do pożądanych zabezpieczeń i zwraca wartość wskazującą, czy operacja się powiedzie, zostanie otwarty określonego nazwanego obiektu mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-401">Opens the specified named mutex, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="72764-402">
            <see langword="true" /> Jeśli nazwany element mutex został otwarty pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-402">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72764-403">Jeśli nazwany element mutex nie istnieje, ta metoda nie powoduje utworzenia go.</span><span class="sxs-lookup"><span data-stu-id="72764-403">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="72764-404">Aby utworzyć systemu element mutex, jeśli jeszcze nie istnieje, użyj jednej z <xref:System.Threading.Mutex.%23ctor%2A> konstruktorów, które ma `name` parametru.</span><span class="sxs-lookup"><span data-stu-id="72764-404">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="72764-405">Jeśli masz pewności, czy istnieje nazwanego obiektu mutex, użyj tego przeciążenia metody, zamiast <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> przeciążenia metody, która zgłasza wyjątek, jeśli element mutex nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="72764-405">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="72764-406">`rights` Parametr musi zawierać <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flagi, aby zezwolić wątków, aby czekać na element mutex i <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flagi, aby zezwolić wątków do wywoływania <xref:System.Threading.Mutex.ReleaseMutex%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="72764-406">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="72764-407">Wiele wywołań tej metody, używanego przez tę samą wartość `name` nie zawsze zwracają takie same <xref:System.Threading.Mutex> obiektów, nawet jeśli obiekty, które są zwracane reprezentują ten sam element mutex systemu o nazwie.</span><span class="sxs-lookup"><span data-stu-id="72764-407">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="72764-408">Ta metoda nie żąda własności obiektu mutex.</span><span class="sxs-lookup"><span data-stu-id="72764-408">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="72764-409">
            <paramref name="name" /> jest ciągiem pustym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-409">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="72764-410">- lub - <paramref name="name" /> jest dłuższa niż 260 znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-410">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="72764-411">
            <paramref name="name" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-411">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="72764-412">Wystąpił błąd systemu Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-412">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="72764-413">Mutex o nazwie istnieje, ale użytkownik nie ma dostępu zabezpieczeń wymagane do jej używać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-413">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="72764-414">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-414">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="72764-415">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72764-415">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>