<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CancellationTokenSource.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac594e623c10b8f5fb941b4f23eb30c7dcadd826d47.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94e623c10b8f5fb941b4f23eb30c7dcadd826d47</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Signals to a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that it should be canceled.</source>
          <target state="translated">Sygnały do <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> , które powinny być anulowane.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, .NET Framework używa ujednoliconego modelu wspólnych anulowania asynchroniczne lub długotrwałe operacje synchroniczne, która obejmuje dwa obiekty:</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which provides a cancellation token through its <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property and sends a cancellation message by calling its <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> method.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> obiektu, który zawiera token anulowania za pośrednictwem jego <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> właściwości i wysyła wiadomości o anulowaniu przez wywołanie jego <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> lub <ph id="ph4">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object, which indicates whether cancellation is requested.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> obiektu, który wskazuje, czy żądanie anulowania.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The general pattern for implementing the cooperative cancellation model is:</source>
          <target state="translated">Ogólne wzorzec stosowania modelu wspólnych anulowania jest:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Instantiate a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which manages and sends cancellation notification to the individual cancellation tokens.</source>
          <target state="translated">Utwórz wystąpienie <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> obiektu, który zarządza i wysyła powiadomienie do anulowania do poszczególnych anulowanie tokenów.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Pass the token returned by the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph> property to each task or thread that listens for cancellation.</source>
          <target state="translated">Przekaż token zwracany przez <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph> właściwości do każdego zadania lub wątku, który nasłuchuje anulowania.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method from operations that receive the cancellation token.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> metody z operacji otrzymujących token anulowania.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Provide a mechanism for each task or thread to respond to a cancellation request.</source>
          <target state="translated">Mechanizm dla każdego wątku na odpowiedź na żądanie anulowania.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.</source>
          <target state="translated">Czy chcesz anulować operację i dokładnie tak jak to zrobić, zależy od logiki aplikacji.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> method to provide notification of cancellation.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> metodę w celu zapewnienia powiadomienia o anulowaniu.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>This sets the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> property on every copy of the cancellation token to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">To ustawienie <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> właściwości każdej kopii token anulowania do <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Dispose%2A&gt;</ph> method when you are finished with the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Dispose%2A&gt;</ph> metody po zakończeniu pracy z <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>For more information, see <bpt id="p1">[</bpt>Cancellation in Managed Threads<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>anulowanie w zarządzanych wątkach<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Ten typ implementuje <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Po zakończeniu za pomocą wystąpienia typu bezpośrednio lub pośrednio należy usunąć z niego.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Do usuwania tego typu, należy wywołać jej <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> metody w <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloku.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak <ph id="ph1">`using`</ph> (w języku C#) lub <ph id="ph2">`Using`</ph> (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu tematu.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</source>
          <target state="translated">W poniższym przykładzie użyto generator liczb losowych, co pozwoliłoby na emulowanie aplikacji zbierania danych, która odczytuje 10 wartości całkowitej z 11 instrumencie.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</source>
          <target state="translated">Wartość zerowa wskazuje, że pomiar ma nie dla jednego dokumentu, obliczane w takim przypadku można anulować operację i nie oznacza ogólne.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To handle the possible cancellation of the operation, the example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object that generates a cancellation token which is passed to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">Aby obsłużyć możliwe anulowanie operacji, tworzy przykładzie <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> obiekt, który generuje token anulowania, który jest przekazywany do <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> Obiektu z kolei przekazuje token anulowania do poszczególnych zadań odpowiedzialne za zbieranie odczyty dla określonego dokumentu.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> Metoda jest wywoływana, aby upewnić się, że średnia jest obliczana tylko wtedy, gdy wszystkie odczyty zebrano zostały pomyślnie.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>If a task has not because it has been cancelled, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> method throws an exception.</source>
          <target state="translated">Jeśli zadanie ma nie, ponieważ zostało anulowane, wywołanie <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> metoda zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of <ph id="ph2">&lt;see cref="M:System.Threading.CancellationTokenSource.Dispose" /&gt;</ph>, which must only be used when all other operations on the <ph id="ph3">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> object have completed.</source>
          <target state="translated">Wszystkie publiczne i chronione elementy członkowskie <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> są wątkowo i mogą być stosowane jednocześnie wiele wątków, z wyjątkiem produktów <ph id="ph2">&lt;see cref="M:System.Threading.CancellationTokenSource.Dispose" /&gt;</ph>, która może być używana tylko podczas wszystkich operacji na <ph id="ph3">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> obiektu została ukończona.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Inicjuje <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>The time interval in milliseconds to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Interwał w milisekundach czas oczekiwania przed anulowaniem to <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class that will be canceled after the specified delay in milliseconds.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> klasy, która zostanie anulowane po określonym opóźnienie w milisekundach.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>The countdown for the <ph id="ph1">`millisecondsDelay`</ph> starts during the call to the constructor.</source>
          <target state="translated">Odlicza czas do <ph id="ph1">`millisecondsDelay`</ph> rozpoczyna się podczas wywołania konstruktora.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>When the <ph id="ph1">`millisecondsDelay`</ph> expires, the constructed <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled (if it has not been canceled already).</source>
          <target state="translated">Gdy <ph id="ph1">`millisecondsDelay`</ph> wygaśnie, zbudowany <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> zostało anulowane (Jeśli nie zostało anulowane już).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>Subsequent calls to <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the <ph id="ph2">`millisecondsDelay`</ph> for the constructed <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">Kolejne wywołania <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> spowoduje zresetowanie <ph id="ph2">`millisecondsDelay`</ph> dla zbudowany <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, jeśli nie została już anulowana.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>The time interval to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Przedział czasu oczekiwania przed anulowaniem to <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class that will be canceled after the specified time span.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> klasy, która zostanie anulowane po określony czas.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>The countdown for the delay starts during the call to the constructor.</source>
          <target state="translated">Uruchamia odliczania opóźnienia podczas wywołania konstruktora.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>When the delay expires, the constructed <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.</source>
          <target state="translated">Opóźnienie wygaśnięcia, zbudowany <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> została anulowana, jeśli nie została już anulowana.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>Subsequent calls to <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the delay for the constructed <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">Kolejne wywołania <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> spowoduje zresetowanie opóźnienie zbudowany <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, jeśli nie została już anulowana.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> is less than -1 or greater than <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> jest mniejsze niż -1 lub większa niż <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> is less than -1 or greater than <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> jest mniejsze niż -1 lub większa niż <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Communicates a request for cancellation.</source>
          <target state="translated">Komunikuje się żądanie anulowania.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>Communicates a request for cancellation.</source>
          <target state="translated">Komunikuje się żądanie anulowania.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The associated <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns true.</source>
          <target state="translated">Skojarzony <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> zostanie powiadomiony o anulowanie i przechodzi do stanu gdzie <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> zwraca wartość true.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>Any callbacks or cancelable operations registered with the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.</source>
          <target state="translated">Wszystkie operacje można anulować lub wywołania zwrotne zarejestrowane z <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> zostaną wykonane.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>We recommend that cancelable operations and callbacks registered with <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> not throw exceptions.</source>
          <target state="translated">Zaleca się, że można anulować operacji i wywołania zwrotne zarejestrowane z <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> nie zgłaszają wyjątki.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>This overload of Cancel will aggregate any exceptions thrown into an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</source>
          <target state="translated">To przeciążenie Anuluj będzie używana do agregowania wszelkie wyjątki zgłaszane w <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, że jedno wywołanie zwrotne Zgłaszanie wyjątku nie uniemożliwi inne zarejestrowane wywołania zwrotne wykonywane.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</source>
          <target state="translated">W poniższym przykładzie użyto generator liczb losowych, co pozwoliłoby na emulowanie aplikacji zbierania danych, która odczytuje 10 wartości całkowitej z 11 instrumencie.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</source>
          <target state="translated">Wartość zerowa wskazuje, że pomiar ma nie dla jednego dokumentu, obliczane w takim przypadku można anulować operację i nie oznacza ogólne.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>To handle the possible cancellation of the operation, the example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object that generates a cancellation token which is passed to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">Aby obsłużyć możliwe anulowanie operacji, tworzy przykładzie <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> obiekt, który generuje token anulowania, który jest przekazywany do <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> Obiektu z kolei przekazuje token anulowania do poszczególnych zadań odpowiedzialne za zbieranie odczyty dla określonego dokumentu.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> Metoda jest wywoływana, aby upewnić się, że średnia jest obliczana tylko wtedy, gdy wszystkie odczyty zebrano zostały pomyślnie.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>If a task has not because it has been cancelled, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> method throws an exception.</source>
          <target state="translated">Jeśli zadanie ma nie, ponieważ zostało anulowane, wywołanie <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> metoda zgłasza wyjątek.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>This <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">To <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> został usunięty.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Wyjątek agregacji zawierający wszystkie wyjątki zgłaszane przez zarejestrowanych wywołania zwrotne w skojarzonych <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if exceptions should immediately propagate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli wyjątki powinien natychmiast propagować; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed if an exception occurs.</source>
          <target state="translated">Komunikuje się żądanie anulowania i określa, czy pozostałe wywołania zwrotne i operacje można anulować powinna zostać przetworzona, jeśli wystąpi wyjątek.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>The associated <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Skojarzony <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> zostanie powiadomiony o anulowanie i przechodzi do stanu gdzie <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> zwraca <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Any callbacks or cancelable operations registered with the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.</source>
          <target state="translated">Wszystkie operacje można anulować lub wywołania zwrotne zarejestrowane z <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> zostaną wykonane.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Callbacks will be executed synchronously in LIFO order.</source>
          <target state="translated">Wywołania zwrotne będzie wykonywana synchronicznie w kolejności LIFO.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>We recommend that cancelable operations and callbacks registered with <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> not throw exceptions.</source>
          <target state="translated">Zaleca się, że można anulować operacji i wywołania zwrotne zarejestrowane z <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> nie zgłaszają wyjątki.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>If <ph id="ph1">`throwOnFirstException`</ph> is <ph id="ph2">`true`</ph>, an exception will immediately propagate out of the call to <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>, preventing the remaining callbacks and cancelable operations from being processed.</source>
          <target state="translated">Jeśli <ph id="ph1">`throwOnFirstException`</ph> jest <ph id="ph2">`true`</ph>, wyjątek zostanie natychmiast propagować poza wywołanie <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>, uniemożliwia pozostałe wywołania zwrotne i można anulować operacji przetwarzania.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>If <ph id="ph1">`throwOnFirstException`</ph> is <ph id="ph2">`false`</ph>, this overload will aggregate any exceptions thrown into an <ph id="ph3">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</source>
          <target state="translated">Jeśli <ph id="ph1">`throwOnFirstException`</ph> jest <ph id="ph2">`false`</ph>, to przeciążenie będzie używana do agregowania wszelkie wyjątki zgłaszane w <ph id="ph3">&lt;xref:System.AggregateException&gt;</ph>, że jedno wywołanie zwrotne Zgłaszanie wyjątku nie uniemożliwi inne zarejestrowane wywołania zwrotne wykonywane.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">To <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> został usunięty.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Wyjątek agregacji zawierający wszystkie wyjątki zgłaszane przez zarejestrowanych wywołania zwrotne w skojarzonych <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Planuje operacji anulowania tego <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The time span to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Przedział czasu oczekiwania przed anulowaniem to <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> after the specified number of milliseconds.</source>
          <target state="translated">Planuje operacji anulowania tego <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> po określoną liczbę milisekund.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The countdown for the <ph id="ph1">`millisecondsDelay`</ph> starts during this call.</source>
          <target state="translated">Odlicza czas do <ph id="ph1">`millisecondsDelay`</ph> rozpoczyna się podczas tego wywołania.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>When the <ph id="ph1">`millisecondsDelay`</ph> expires, this <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.</source>
          <target state="translated">Gdy <ph id="ph1">`millisecondsDelay`</ph> wygaśnie, to <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> została anulowana, jeśli nie została już anulowana.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>Subsequent calls to CancelAfter will reset the <ph id="ph1">`millisecondsDelay`</ph> for this <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">Kolejne wywołania CancelAfter spowoduje zresetowanie <ph id="ph1">`millisecondsDelay`</ph> dla tego <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, jeśli nie została już anulowana.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The exception thrown when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Wyjątek podczas to <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> został usunięty.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The exception thrown when <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> is less than -1.</source>
          <target state="translated">Wyjątek podczas <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The time span to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Przedział czasu oczekiwania przed anulowaniem to <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> after the specified time span.</source>
          <target state="translated">Planuje operacji anulowania tego <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> po określonym czasie span.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The exception thrown when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Wyjątek podczas to <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> został usunięty.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The exception that is thrown when <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> is less than -1 or greater than Int32.MaxValue.</source>
          <target state="translated">Wyjątek zgłaszany, gdy <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> jest mniejsza niż -1 lub większa niż wartość Int32.MaxValue.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens are in the canceled state.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> który będzie w stanie anulowane podczas tokenów źródła są w stanie anulowane.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>An array that contains the cancellation token instances to observe.</source>
          <target state="translated">Tablica zawiera wystąpienia token anulowania, aby przyjrzeć się.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> który będzie w stanie anulowane podczas tokenów źródła w określonej tablicy są w stanie anulowane.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that is linked to the source tokens.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> połączonego źródła tokenów.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with one of the source tokens has been disposed.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> skojarzony z jednym źródle tokeny został usunięty.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> jest pusty.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The first cancellation token to observe.</source>
          <target state="translated">Pierwszy token anulowania do przestrzegania.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The second cancellation token to observe.</source>
          <target state="translated">Drugi token anulowania do przestrzegania.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens are in the canceled state.</source>
          <target state="translated">Tworzy <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> który będzie w stanie anulowane podczas tokenów źródła są w stanie anulowane.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that is linked to the source tokens.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> połączonego źródła tokenów.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with one of the source tokens has been disposed.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> skojarzony z jednym źródle tokeny został usunięty.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Wywołanie <ph id="ph1">`Dispose`</ph> po zakończeniu przy użyciu <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> Pozostawia metody <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> w stanie uniemożliwiającym jego używanie.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> was occupying.</source>
          <target state="translated">Po wywołaniu <ph id="ph1">`Dispose`</ph>, konieczne jest zwolnienie wszystkich odwołań do <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>czyszczenie zasobów niezarządzanych<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> i <bpt id="p2">[</bpt>implementacja metody Dispose<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Wywoływanie zawsze <ph id="ph1">`Dispose`</ph> przed zwolnieniem ostatniego odwołania do <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> obiektu <ph id="ph2">`Finalize`</ph> metody.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zwolnić zasoby zarządzane i niezarządzane; <ph id="ph2">&lt;see langword="false" /&gt;</ph> aby zwolnić tylko zasoby niezarządzane.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated">Zwalnia zasoby niezarządzane używane przez <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> i opcjonalnie zwalnia zasoby zarządzane.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>Gets whether cancellation has been requested for this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Pobiera informację, czy zażądano anulowania tego <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if cancellation has been requested for this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli zażądano anulowania tego <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>This property indicates whether cancellation has been requested for this token source, such as due to a call to its <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> method.</source>
          <target state="translated">Ta właściwość wskazuje, czy anulowania zażądano dla tego źródła tokenu, takich jak wskutek wywołania jego <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>If this property returns <ph id="ph1">`true`</ph>, it only guarantees that cancellation has been requested.</source>
          <target state="translated">Jeśli ta właściwość zwraca <ph id="ph1">`true`</ph>, tylko gwarantuje, że zażądano anulowania.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</source>
          <target state="translated">Nie gwarantuje co program obsługi zarejestrowanych przy użyciu odpowiedniego tokenu zakończenie wykonywania ani anulowania żądania zostało ukończone, propagowania na wszystkich zarejestrowanych programów obsługi.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</source>
          <target state="translated">Dodatkowe synchronizacji mogą być wymagane, szczególnie w sytuacjach, w którym powiązane obiekty zostały anulowane jednocześnie.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> skojarzony z tym <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> Skojarzony z tym <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>The token source has been disposed.</source>
          <target state="translated">Token źródła został usunięty.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>