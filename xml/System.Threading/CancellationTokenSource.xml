<Type Name="CancellationTokenSource" FullName="System.Threading.CancellationTokenSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="509f734265234b6b9cc1e250226f10c318bb1629" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68541277" /></Metadata><TypeSignature Language="C#" Value="public class CancellationTokenSource : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CancellationTokenSource extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationTokenSource" />
  <TypeSignature Language="VB.NET" Value="Public Class CancellationTokenSource&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CancellationTokenSource : IDisposable" />
  <TypeSignature Language="F#" Value="type CancellationTokenSource = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8431a-101">Informuje o tym, że powinno być anulowane. <see cref="T:System.Threading.CancellationToken" /></span><span class="sxs-lookup"><span data-stu-id="8431a-101">Signals to a <see cref="T:System.Threading.CancellationToken" /> that it should be canceled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8431a-102">Począwszy od, .NET Framework korzysta z ujednoliconego modelu do korzystania z operacji synchronicznych w ramach komunikacji asynchronicznej lub długotrwałej, która obejmuje dwa obiekty: [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</span><span class="sxs-lookup"><span data-stu-id="8431a-102">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:</span></span>  
  
-   <span data-ttu-id="8431a-103">Obiekt, który dostarcza token anulowania za pomocą jego <xref:System.Threading.CancellationTokenSource.Token%2A> właściwości i wysyła komunikat o anulowaniu, wywołując jego <xref:System.Threading.CancellationTokenSource.Cancel%2A> metodę <xref:System.Threading.CancellationTokenSource.CancelAfter%2A>or. <xref:System.Threading.CancellationTokenSource></span><span class="sxs-lookup"><span data-stu-id="8431a-103">A <xref:System.Threading.CancellationTokenSource> object, which provides a cancellation token through its <xref:System.Threading.CancellationTokenSource.Token%2A> property and sends a cancellation message by calling its <xref:System.Threading.CancellationTokenSource.Cancel%2A> or <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> method.</span></span>  
  
-   <span data-ttu-id="8431a-104"><xref:System.Threading.CancellationToken> Obiekt, który wskazuje, czy zażądano anulowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-104">A <xref:System.Threading.CancellationToken> object, which indicates whether cancellation is requested.</span></span>  
  
 <span data-ttu-id="8431a-105">Ogólny wzorzec dla implementacji spółdzielczego modelu anulowania to:</span><span class="sxs-lookup"><span data-stu-id="8431a-105">The general pattern for implementing the cooperative cancellation model is:</span></span>  
  
-   <span data-ttu-id="8431a-106">Utworzenie wystąpienia <xref:System.Threading.CancellationTokenSource> obiektu, który zarządza i wysyła powiadomienie o anulowaniu do poszczególnych tokenów anulowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-106">Instantiate a <xref:System.Threading.CancellationTokenSource> object, which manages and sends cancellation notification to the individual cancellation tokens.</span></span>  
  
-   <span data-ttu-id="8431a-107">Przekaż token zwracany przez <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> właściwość do każdego zadania lub wątku, który nasłuchuje do anulowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-107">Pass the token returned by the <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property to each task or thread that listens for cancellation.</span></span>  
  
-   <span data-ttu-id="8431a-108">Wywołaj <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> metodę z operacji, które odbierają token anulowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-108">Call the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> method from operations that receive the cancellation token.</span></span> <span data-ttu-id="8431a-109">Udostępnij mechanizm dla każdego zadania lub wątku, aby odpowiedzieć na żądanie anulowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-109">Provide a mechanism for each task or thread to respond to a cancellation request.</span></span> <span data-ttu-id="8431a-110">Bez względu na to, czy użytkownik zdecyduje się anulować operację i jak to zrobić, zależy od logiki aplikacji.</span><span class="sxs-lookup"><span data-stu-id="8431a-110">Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.</span></span>  
  
-   <span data-ttu-id="8431a-111">Wywołaj <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> metodę, aby powiadomić o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="8431a-111">Call the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to provide notification of cancellation.</span></span> <span data-ttu-id="8431a-112">Ustawia <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> właściwość dla każdej kopii tokenu anulowania na `true`.</span><span class="sxs-lookup"><span data-stu-id="8431a-112">This sets the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> property on every copy of the cancellation token to `true`.</span></span>  
  
-   <span data-ttu-id="8431a-113"><xref:System.Threading.CancellationTokenSource> Wywołaj <xref:System.Threading.CancellationTokenSource.Dispose%2A> metodę po zakończeniu pracy z obiektem.</span><span class="sxs-lookup"><span data-stu-id="8431a-113">Call the <xref:System.Threading.CancellationTokenSource.Dispose%2A> method when you are finished with the <xref:System.Threading.CancellationTokenSource> object.</span></span>  
  
 <span data-ttu-id="8431a-114">Aby uzyskać więcej informacji, zobacz [Anulowanie w zarządzanych wątkach](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="8431a-114">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8431a-115">Ten typ implementuje <xref:System.IDisposable> interfejs.</span><span class="sxs-lookup"><span data-stu-id="8431a-115">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="8431a-116">Po zakończeniu korzystania z wystąpienia typu należy usunąć jego wartość bezpośrednio lub pośrednio.</span><span class="sxs-lookup"><span data-stu-id="8431a-116">When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="8431a-117">Aby usunąć typ bezpośrednio <xref:System.IDisposable.Dispose%2A> , wywołaj jego metodę `try` / `catch` w bloku.</span><span class="sxs-lookup"><span data-stu-id="8431a-117">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="8431a-118">Aby usunąć go pośrednio, użyj konstrukcji języka, takiej jak `using` (in C#) lub `Using` (w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8431a-118">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="8431a-119">Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego <xref:System.IDisposable> interfejs IDisposable" w temacie dotyczącym interfejsu.</span><span class="sxs-lookup"><span data-stu-id="8431a-119">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8431a-120">Poniższy przykład używa generatora liczb losowych do emulowania aplikacji do zbierania danych, która odczytuje 10 wartości całkowitych z jedenastu różnych instrumentów.</span><span class="sxs-lookup"><span data-stu-id="8431a-120">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="8431a-121">Wartość zero wskazuje, że pomiar nie powiódł się dla jednego instrumentu, w tym przypadku operacja powinna zostać anulowana i nie ma potrzeby obliczenia całkowitego średniego.</span><span class="sxs-lookup"><span data-stu-id="8431a-121">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="8431a-122">Aby obsłużyć możliwe anulowanie operacji, przykład tworzy <xref:System.Threading.CancellationTokenSource> obiekt generujący token anulowania, który jest przesyłany <xref:System.Threading.Tasks.TaskFactory> do obiektu.</span><span class="sxs-lookup"><span data-stu-id="8431a-122">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="8431a-123"><xref:System.Threading.Tasks.TaskFactory> Obiekt z kolei przekazuje token anulowania do każdego zadania odpowiedzialnego za zbieranie odczytów dla określonego instrumentu.</span><span class="sxs-lookup"><span data-stu-id="8431a-123">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="8431a-124"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> Metoda jest wywoływana, aby upewnić się, że średni jest obliczany dopiero po pomyślnym zebraniu wszystkich odczytów.</span><span class="sxs-lookup"><span data-stu-id="8431a-124">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="8431a-125">Jeśli zadanie nie zostało anulowane, wywołanie <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> metody zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="8431a-125">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8431a-126">Wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Threading.CancellationTokenSource" /> są bezpieczne dla wątków i mogą być używane jednocześnie z wielu wątków, z <see cref="M:System.Threading.CancellationTokenSource.Dispose" />wyjątkiem, które muszą być używane tylko wtedy, gdy <see cref="T:System.Threading.CancellationTokenSource" /> wszystkie inne operacje na obiekcie zostały ukończone.</span><span class="sxs-lookup"><span data-stu-id="8431a-126">All public and protected members of <see cref="T:System.Threading.CancellationTokenSource" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.CancellationTokenSource.Dispose" />, which must only be used when all other operations on the <see cref="T:System.Threading.CancellationTokenSource" /> object have completed.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="8431a-127">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="8431a-127">Cancellation</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="8431a-128">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="8431a-128">Task Cancellation</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8431a-129"><see cref="T:System.Threading.CancellationTokenSource" />Inicjuje.</span><span class="sxs-lookup"><span data-stu-id="8431a-129">Initializes the <see cref="T:System.Threading.CancellationTokenSource" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationTokenSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationTokenSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8431a-130">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.CancellationTokenSource" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="8431a-130">Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="8431a-131">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="8431a-131">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="8431a-132">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="8431a-132">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationTokenSource (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (millisecondsDelay As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationTokenSource(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationTokenSource : int -&gt; System.Threading.CancellationTokenSource" Usage="new System.Threading.CancellationTokenSource millisecondsDelay" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay"><span data-ttu-id="8431a-133">Przedział czasu (w milisekundach) oczekiwania przed anulowaniem tego <see cref="T:System.Threading.CancellationTokenSource" />działania.</span><span class="sxs-lookup"><span data-stu-id="8431a-133">The time interval in milliseconds to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span></span></param>
        <summary><span data-ttu-id="8431a-134">Inicjuje nowe wystąpienie <see cref="T:System.Threading.CancellationTokenSource" /> klasy, które zostanie anulowane po określonym opóźnieniu (w milisekundach).</span><span class="sxs-lookup"><span data-stu-id="8431a-134">Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class that will be canceled after the specified delay in milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8431a-135">Odliczanie dla `millisecondsDelay` uruchomienia w trakcie wywołania konstruktora.</span><span class="sxs-lookup"><span data-stu-id="8431a-135">The countdown for the `millisecondsDelay` starts during the call to the constructor.</span></span>  <span data-ttu-id="8431a-136">Gdy wygaśnie, konstruowana <xref:System.Threading.CancellationTokenSource> zostanie anulowany (jeśli nie został jeszcze anulowany). `millisecondsDelay`</span><span class="sxs-lookup"><span data-stu-id="8431a-136">When the `millisecondsDelay` expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled (if it has not been canceled already).</span></span>  
  
 <span data-ttu-id="8431a-137">Kolejne wywołania <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> spowodują `millisecondsDelay` zresetowanie dla skonstruowanego <xref:System.Threading.CancellationTokenSource>elementu, jeśli nie zostało to jeszcze anulowane.</span><span class="sxs-lookup"><span data-stu-id="8431a-137">Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the `millisecondsDelay` for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8431a-138"><paramref name="millisecondsDelay" />jest mniejsza niż-1.</span><span class="sxs-lookup"><span data-stu-id="8431a-138"><paramref name="millisecondsDelay" /> is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationTokenSource (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (delay As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationTokenSource(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationTokenSource : TimeSpan -&gt; System.Threading.CancellationTokenSource" Usage="new System.Threading.CancellationTokenSource delay" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="delay"><span data-ttu-id="8431a-139">Przedział czasu oczekiwania przed anulowaniem tego <see cref="T:System.Threading.CancellationTokenSource" />działania.</span><span class="sxs-lookup"><span data-stu-id="8431a-139">The time interval to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span></span></param>
        <summary><span data-ttu-id="8431a-140">Inicjuje nowe wystąpienie <see cref="T:System.Threading.CancellationTokenSource" /> klasy, które zostanie anulowane po określonym przedziale czasu.</span><span class="sxs-lookup"><span data-stu-id="8431a-140">Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class that will be canceled after the specified time span.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8431a-141">Odliczanie dla opóźnienia zaczyna się w trakcie wywołania konstruktora.</span><span class="sxs-lookup"><span data-stu-id="8431a-141">The countdown for the delay starts during the call to the constructor.</span></span> <span data-ttu-id="8431a-142">Gdy opóźnienie wygaśnie, konstruowana <xref:System.Threading.CancellationTokenSource> została anulowana, jeśli nie została już anulowana.</span><span class="sxs-lookup"><span data-stu-id="8431a-142">When the delay expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.</span></span>  
  
 <span data-ttu-id="8431a-143">Kolejne wywołania <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> spowodują zresetowanie opóźnienia dla konstruowanego <xref:System.Threading.CancellationTokenSource>, jeśli nie zostało to jeszcze anulowane.</span><span class="sxs-lookup"><span data-stu-id="8431a-143">Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the delay for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8431a-144"><paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /></span><span class="sxs-lookup"><span data-stu-id="8431a-144"><paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /></span></span> <span data-ttu-id="8431a-145">jest mniejsza niż-1 lub większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="8431a-145">is less than -1 or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Cancel">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8431a-146">Komunikuje żądanie anulowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-146">Communicates a request for cancellation.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="8431a-147">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="8431a-147">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="8431a-148">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="8431a-148">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; unit" Usage="cancellationTokenSource.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8431a-149">Komunikuje żądanie anulowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-149">Communicates a request for cancellation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8431a-150">Skojarzenie <xref:System.Threading.CancellationToken> zostanie powiadomione o anulowaniu i przejdzie do stanu, w <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> którym zwraca wartość true.</span><span class="sxs-lookup"><span data-stu-id="8431a-150">The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns true.</span></span>  
  
 <span data-ttu-id="8431a-151">Wszystkie wywołania zwrotne lub operacje anulowania zarejestrowane w ramach <xref:System.Threading.CancellationToken> zostaną wykonane.</span><span class="sxs-lookup"><span data-stu-id="8431a-151">Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.</span></span>  
  
 <span data-ttu-id="8431a-152">Zalecamy, aby operacje anulowania i wywołania zwrotne zarejestrowane z <xref:System.Threading.CancellationToken> niezgłaszanymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="8431a-152">We recommend that cancelable operations and callbacks registered with <xref:System.Threading.CancellationToken> not throw exceptions.</span></span> 
 
 <span data-ttu-id="8431a-153">To Przeciążenie anulowania spowoduje zagregowanie wszelkich wyjątków zgłoszonych do <xref:System.AggregateException>, takich jak jedno wywołanie zwrotne, które zgłasza wyjątek, nie uniemożliwi wykonywania innych zarejestrowanych wywołań zwrotnych.</span><span class="sxs-lookup"><span data-stu-id="8431a-153">This overload of Cancel will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</span></span> 
   
  
## Examples  
 <span data-ttu-id="8431a-154">Poniższy przykład używa generatora liczb losowych do emulowania aplikacji do zbierania danych, która odczytuje 10 wartości całkowitych z jedenastu różnych instrumentów.</span><span class="sxs-lookup"><span data-stu-id="8431a-154">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="8431a-155">Wartość zero wskazuje, że pomiar nie powiódł się dla jednego instrumentu, w tym przypadku operacja powinna zostać anulowana i nie ma potrzeby obliczenia całkowitego średniego.</span><span class="sxs-lookup"><span data-stu-id="8431a-155">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="8431a-156">Aby obsłużyć możliwe anulowanie operacji, przykład tworzy <xref:System.Threading.CancellationTokenSource> obiekt generujący token anulowania, który jest przesyłany <xref:System.Threading.Tasks.TaskFactory> do obiektu.</span><span class="sxs-lookup"><span data-stu-id="8431a-156">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="8431a-157"><xref:System.Threading.Tasks.TaskFactory> Obiekt z kolei przekazuje token anulowania do każdego zadania odpowiedzialnego za zbieranie odczytów dla określonego instrumentu.</span><span class="sxs-lookup"><span data-stu-id="8431a-157">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="8431a-158"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> Metoda jest wywoływana, aby upewnić się, że średni jest obliczany dopiero po pomyślnym zebraniu wszystkich odczytów.</span><span class="sxs-lookup"><span data-stu-id="8431a-158">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="8431a-159">Jeśli zadanie nie zostało anulowane, wywołanie <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> metody zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="8431a-159">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8431a-160">To <see cref="T:System.Threading.CancellationTokenSource" /> zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="8431a-160">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="8431a-161">Wyjątek agregujący zawierający wszystkie wyjątki zgłoszone przez zarejestrowane wywołania zwrotne w skojarzonym <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="8431a-161">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="8431a-162">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="8431a-162">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="8431a-163">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="8431a-163">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel (bool throwOnFirstException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel(bool throwOnFirstException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel (throwOnFirstException As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel(bool throwOnFirstException);" />
      <MemberSignature Language="F#" Value="member this.Cancel : bool -&gt; unit" Usage="cancellationTokenSource.Cancel throwOnFirstException" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throwOnFirstException" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="throwOnFirstException"><span data-ttu-id="8431a-164"><see langword="true" />Jeśli wyjątki powinny być natychmiast propagowane; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="8431a-164"><see langword="true" /> if exceptions should immediately propagate; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8431a-165">Komunikuje żądanie anulowania i określa, czy pozostałe wywołania zwrotne i operacje anulowania powinny być przetwarzane, jeśli wystąpi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="8431a-165">Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed if an exception occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8431a-166">Skojarzone <xref:System.Threading.CancellationToken> powiadomienie zostanie powiadomione o anulowaniu i przejdzie do stanu, w <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> którym `true`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="8431a-166">The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns `true`.</span></span>  
  
 <span data-ttu-id="8431a-167">Wszystkie wywołania zwrotne lub operacje anulowania zarejestrowane w ramach <xref:System.Threading.CancellationToken> zostaną wykonane.</span><span class="sxs-lookup"><span data-stu-id="8431a-167">Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.</span></span> <span data-ttu-id="8431a-168">Wywołania zwrotne będą wykonywane synchronicznie w kolejności kolejki LIFO.</span><span class="sxs-lookup"><span data-stu-id="8431a-168">Callbacks will be executed synchronously in LIFO order.</span></span> 
  
 <span data-ttu-id="8431a-169">Zalecamy, aby operacje anulowania i wywołania zwrotne zarejestrowane z <xref:System.Threading.CancellationToken> niezgłaszanymi wyjątkami.</span><span class="sxs-lookup"><span data-stu-id="8431a-169">We recommend that cancelable operations and callbacks registered with <xref:System.Threading.CancellationToken> not throw exceptions.</span></span> 
  
 <span data-ttu-id="8431a-170">Jeśli `throwOnFirstException` <xref:System.Threading.CancellationTokenSource.Cancel%2A>jest `true`, wyjątek zostanie natychmiast rozpropagowany z wywołania do, co uniemożliwia przetworzenie pozostałych operacji wywołania zwrotnego i anulowanie.</span><span class="sxs-lookup"><span data-stu-id="8431a-170">If `throwOnFirstException` is `true`, an exception will immediately propagate out of the call to <xref:System.Threading.CancellationTokenSource.Cancel%2A>, preventing the remaining callbacks and cancelable operations from being processed.</span></span>  
  
 <span data-ttu-id="8431a-171">Jeśli `throwOnFirstException` <xref:System.AggregateException>jest `false`, to Przeciążenie spowoduje zagregowanie wszelkich wyjątków zgłoszonych do, takich jak jedno wywołanie zwrotne, które zgłasza wyjątek, nie uniemożliwi wykonywania innych zarejestrowanych wywołań zwrotnych.</span><span class="sxs-lookup"><span data-stu-id="8431a-171">If `throwOnFirstException` is `false`, this overload will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8431a-172">To <see cref="T:System.Threading.CancellationTokenSource" /> zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="8431a-172">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="8431a-173">Wyjątek agregujący zawierający wszystkie wyjątki zgłoszone przez zarejestrowane wywołania zwrotne w skojarzonym <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="8431a-173">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="8431a-174">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="8431a-174">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="8431a-175">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="8431a-175">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CancelAfter">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8431a-176">Planuje operację anulowania na tym <see cref="T:System.Threading.CancellationTokenSource" />.</span><span class="sxs-lookup"><span data-stu-id="8431a-176">Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CancelAfter">
      <MemberSignature Language="C#" Value="public void CancelAfter (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAfter(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAfter (millisecondsDelay As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAfter(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="member this.CancelAfter : int -&gt; unit" Usage="cancellationTokenSource.CancelAfter millisecondsDelay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay"><span data-ttu-id="8431a-177">Przedział czasu oczekiwania przed anulowaniem tego <see cref="T:System.Threading.CancellationTokenSource" />działania.</span><span class="sxs-lookup"><span data-stu-id="8431a-177">The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span></span></param>
        <summary><span data-ttu-id="8431a-178">Planuje operację <see cref="T:System.Threading.CancellationTokenSource" /> anulowania po określonej liczbie milisekund.</span><span class="sxs-lookup"><span data-stu-id="8431a-178">Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource" /> after the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8431a-179">Odliczanie dla `millisecondsDelay` uruchomienia w trakcie tego wywołania.</span><span class="sxs-lookup"><span data-stu-id="8431a-179">The countdown for the `millisecondsDelay` starts during this call.</span></span> <span data-ttu-id="8431a-180">Po wygaśnięciu ta <xref:System.Threading.CancellationTokenSource> wartość zostanie anulowana, jeśli nie została już anulowana. `millisecondsDelay`</span><span class="sxs-lookup"><span data-stu-id="8431a-180">When the `millisecondsDelay` expires, this <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.</span></span>  
  
 <span data-ttu-id="8431a-181">Kolejne wywołania do CancelAfter spowodują zresetowanie `millisecondsDelay` dla tego <xref:System.Threading.CancellationTokenSource>elementu, jeśli nie zostało to jeszcze anulowane.</span><span class="sxs-lookup"><span data-stu-id="8431a-181">Subsequent calls to CancelAfter will reset the `millisecondsDelay` for this <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8431a-182">Wyjątek zgłoszony, gdy <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="8431a-182">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8431a-183">Wyjątek zgłoszony, gdy <paramref name="millisecondsDelay" /> jest mniejszy niż-1.</span><span class="sxs-lookup"><span data-stu-id="8431a-183">The exception thrown when <paramref name="millisecondsDelay" /> is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CancelAfter">
      <MemberSignature Language="C#" Value="public void CancelAfter (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAfter(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAfter (delay As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAfter(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="member this.CancelAfter : TimeSpan -&gt; unit" Usage="cancellationTokenSource.CancelAfter delay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="delay"><span data-ttu-id="8431a-184">Przedział czasu oczekiwania przed anulowaniem tego <see cref="T:System.Threading.CancellationTokenSource" />działania.</span><span class="sxs-lookup"><span data-stu-id="8431a-184">The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span></span></param>
        <summary><span data-ttu-id="8431a-185">Planuje operację <see cref="T:System.Threading.CancellationTokenSource" /> anulowania po określonym przedziale czasu.</span><span class="sxs-lookup"><span data-stu-id="8431a-185">Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource" /> after the specified time span.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
            The countdown for the delay starts during this call.  When the delay expires, 
            this <xref:System.Threading.CancellationTokenSource> is canceled, if it has
            not been canceled already.
            
            Subsequent calls to `CancelAfter` will reset the delay for this <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.

            ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8431a-186">Wyjątek zgłoszony, gdy <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="8431a-186">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8431a-187">Wyjątek, który jest generowany, <paramref name="delay" /> gdy jest mniejsza niż-1 lub większa niż Int32. MaxValue.</span><span class="sxs-lookup"><span data-stu-id="8431a-187">The exception that is thrown when <paramref name="delay" /> is less than -1 or greater than Int32.MaxValue.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateLinkedTokenSource">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8431a-188">Tworzy element <see cref="T:System.Threading.CancellationTokenSource" /> , który będzie w stanie anulowany, gdy którykolwiek z tokenów źródłowych jest w stanie anulowany.</span><span class="sxs-lookup"><span data-stu-id="8431a-188">Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens are in the canceled state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateLinkedTokenSource">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationTokenSource CreateLinkedTokenSource (params System.Threading.CancellationToken[] tokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.CancellationTokenSource CreateLinkedTokenSource(valuetype System.Threading.CancellationToken[] tokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateLinkedTokenSource (ParamArray tokens As CancellationToken()) As CancellationTokenSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::CancellationTokenSource ^ CreateLinkedTokenSource(... cli::array &lt;System::Threading::CancellationToken&gt; ^ tokens);" />
      <MemberSignature Language="F#" Value="static member CreateLinkedTokenSource : System.Threading.CancellationToken[] -&gt; System.Threading.CancellationTokenSource" Usage="System.Threading.CancellationTokenSource.CreateLinkedTokenSource tokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="System.Threading.CancellationToken[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tokens"><span data-ttu-id="8431a-189">Tablica zawierająca wystąpienia tokenu anulowania do obserwowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-189">An array that contains the cancellation token instances to observe.</span></span></param>
        <summary><span data-ttu-id="8431a-190">Tworzy element <see cref="T:System.Threading.CancellationTokenSource" /> , który będzie w stanie anulowany, gdy którykolwiek z tokenów źródłowych w określonej tablicy jest w stanie anulowany.</span><span class="sxs-lookup"><span data-stu-id="8431a-190">Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</span></span></summary>
        <returns><span data-ttu-id="8431a-191">A <see cref="T:System.Threading.CancellationTokenSource" /> który jest połączony z tokenami źródłowymi.</span><span class="sxs-lookup"><span data-stu-id="8431a-191">A <see cref="T:System.Threading.CancellationTokenSource" /> that is linked to the source tokens.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8431a-192"><see cref="T:System.Threading.CancellationTokenSource" /> Skojarzenie skojarzone z jednym z tokenów źródłowych zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="8431a-192">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8431a-193"><paramref name="tokens" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8431a-193"><paramref name="tokens" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8431a-194"><paramref name="tokens" />jest puste.</span><span class="sxs-lookup"><span data-stu-id="8431a-194"><paramref name="tokens" /> is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="8431a-195">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="8431a-195">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="8431a-196">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="8431a-196">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/6f4f3804-2ed7-41b4-a97a-6e32b93f6e05"><span data-ttu-id="8431a-197">Instrukcje: Nasłuchiwanie wielu żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="8431a-197">How to: Listen for Multiple Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateLinkedTokenSource">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationTokenSource CreateLinkedTokenSource (System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.CancellationTokenSource CreateLinkedTokenSource(valuetype System.Threading.CancellationToken token1, valuetype System.Threading.CancellationToken token2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateLinkedTokenSource (token1 As CancellationToken, token2 As CancellationToken) As CancellationTokenSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::CancellationTokenSource ^ CreateLinkedTokenSource(System::Threading::CancellationToken token1, System::Threading::CancellationToken token2);" />
      <MemberSignature Language="F#" Value="static member CreateLinkedTokenSource : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; System.Threading.CancellationTokenSource" Usage="System.Threading.CancellationTokenSource.CreateLinkedTokenSource (token1, token2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token1" Type="System.Threading.CancellationToken" />
        <Parameter Name="token2" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="token1"><span data-ttu-id="8431a-198">Pierwszy token anulowania do obserwowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-198">The first cancellation token to observe.</span></span></param>
        <param name="token2"><span data-ttu-id="8431a-199">Drugi token anulowania do obserwowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-199">The second cancellation token to observe.</span></span></param>
        <summary><span data-ttu-id="8431a-200">Tworzy element <see cref="T:System.Threading.CancellationTokenSource" /> , który będzie w stanie anulowany, gdy którykolwiek z tokenów źródłowych jest w stanie anulowany.</span><span class="sxs-lookup"><span data-stu-id="8431a-200">Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens are in the canceled state.</span></span></summary>
        <returns><span data-ttu-id="8431a-201">A <see cref="T:System.Threading.CancellationTokenSource" /> który jest połączony z tokenami źródłowymi.</span><span class="sxs-lookup"><span data-stu-id="8431a-201">A <see cref="T:System.Threading.CancellationTokenSource" /> that is linked to the source tokens.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8431a-202"><see cref="T:System.Threading.CancellationTokenSource" /> Skojarzenie skojarzone z jednym z tokenów źródłowych zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="8431a-202">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="8431a-203">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="8431a-203">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="8431a-204">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="8431a-204">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/6f4f3804-2ed7-41b4-a97a-6e32b93f6e05"><span data-ttu-id="8431a-205">Instrukcje: Nasłuchiwanie wielu żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="8431a-205">How to: Listen for Multiple Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8431a-206">Zwalnia wszystkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Threading.CancellationTokenSource" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="8431a-206">Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cancellationTokenSource.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8431a-207">Zwalnia wszystkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Threading.CancellationTokenSource" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="8431a-207">Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8431a-208">Wywołaj `Dispose` po zakończeniu korzystania z <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="8431a-208">Call `Dispose` when you are finished using the <xref:System.Threading.CancellationTokenSource>.</span></span> <span data-ttu-id="8431a-209">`Dispose` Metoda<xref:System.Threading.CancellationTokenSource> pozostawia w stanie niezdatnym do użytku.</span><span class="sxs-lookup"><span data-stu-id="8431a-209">The `Dispose` method leaves the <xref:System.Threading.CancellationTokenSource> in an unusable state.</span></span> <span data-ttu-id="8431a-210">Po wywołaniu `Dispose`należy wydać wszystkie odwołania <xref:System.Threading.CancellationTokenSource> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.Threading.CancellationTokenSource> , którą zajmował.</span><span class="sxs-lookup"><span data-stu-id="8431a-210">After calling `Dispose`, you must release all references to the <xref:System.Threading.CancellationTokenSource> so the garbage collector can reclaim the memory that the <xref:System.Threading.CancellationTokenSource> was occupying.</span></span>  
  
 <span data-ttu-id="8431a-211">Aby uzyskać więcej informacji, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="8431a-211">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8431a-212">Zawsze wywołuj `Dispose` przed wydaniem ostatniego odwołania <xref:System.Threading.CancellationTokenSource>do.</span><span class="sxs-lookup"><span data-stu-id="8431a-212">Always call `Dispose` before you release your last reference to the <xref:System.Threading.CancellationTokenSource>.</span></span> <span data-ttu-id="8431a-213">W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.Threading.CancellationTokenSource> `Finalize` metody obiektu przez moduł zbierający elementy bezużyteczne.</span><span class="sxs-lookup"><span data-stu-id="8431a-213">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CancellationTokenSource> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="cancellationTokenSource.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="8431a-214"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</span><span class="sxs-lookup"><span data-stu-id="8431a-214"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="8431a-215">Zwalnia niezarządzane zasoby używane przez <see cref="T:System.Threading.CancellationTokenSource" /> klasę i opcjonalnie zwalnia zarządzane zasoby.</span><span class="sxs-lookup"><span data-stu-id="8431a-215">Releases the unmanaged resources used by the <see cref="T:System.Threading.CancellationTokenSource" /> class and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationTokenSource.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationTokenSource.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8431a-216">Pozwala uzyskać żądanie anulowania dla tego <see cref="T:System.Threading.CancellationTokenSource" />elementu.</span><span class="sxs-lookup"><span data-stu-id="8431a-216">Gets whether cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource" />.</span></span></summary>
        <value><span data-ttu-id="8431a-217"><see langword="true" />Jeśli dla tego <see cref="T:System.Threading.CancellationTokenSource" />żądania zażądano anulowania, <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="8431a-217"><see langword="true" /> if cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8431a-218">Ta właściwość wskazuje, czy dla tego źródła tokenu zażądano anulowania, na przykład z powodu wywołania <xref:System.Threading.CancellationTokenSource.Cancel%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="8431a-218">This property indicates whether cancellation has been requested for this token source, such as due to a call to its <xref:System.Threading.CancellationTokenSource.Cancel%2A> method.</span></span>  
  
 <span data-ttu-id="8431a-219">Ta właściwość zwraca `true`tylko gwarancję, że zażądano anulowania.</span><span class="sxs-lookup"><span data-stu-id="8431a-219">If this property returns `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="8431a-220">Nie gwarantuje to, że każdy program obsługi zarejestrowany z odpowiednim tokenem zakończył wykonywanie lub że żądania anulowania nie zakończyły propagowania do wszystkich zarejestrowanych programów obsługi.</span><span class="sxs-lookup"><span data-stu-id="8431a-220">It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="8431a-221">Może być wymagana dodatkowa synchronizacja, szczególnie w sytuacjach, w których obiekty pokrewne są anulowane współbieżnie.</span><span class="sxs-lookup"><span data-stu-id="8431a-221">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="8431a-222">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="8431a-222">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="8431a-223">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="8431a-223">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken Token" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationTokenSource.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken Token { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.Token : System.Threading.CancellationToken" Usage="System.Threading.CancellationTokenSource.Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8431a-224">Pobiera skojarzoną z tym <see cref="T:System.Threading.CancellationTokenSource" />elementem. <see cref="T:System.Threading.CancellationToken" /></span><span class="sxs-lookup"><span data-stu-id="8431a-224">Gets the <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.CancellationTokenSource" />.</span></span></summary>
        <value><span data-ttu-id="8431a-225">Skojarzone z tym <see cref="T:System.Threading.CancellationTokenSource" />elementem. <see cref="T:System.Threading.CancellationToken" /></span><span class="sxs-lookup"><span data-stu-id="8431a-225">The <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.CancellationTokenSource" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8431a-226">Źródło tokenu zostało usunięte.</span><span class="sxs-lookup"><span data-stu-id="8431a-226">The token source has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="8431a-227">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="8431a-227">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="8431a-228">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="8431a-228">Task Cancellation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>