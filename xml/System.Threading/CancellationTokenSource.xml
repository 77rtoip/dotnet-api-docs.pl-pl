<Type Name="CancellationTokenSource" FullName="System.Threading.CancellationTokenSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a5c4235356d0a510085a72cb25fd70c979d39c1" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39873051" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CancellationTokenSource : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CancellationTokenSource extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationTokenSource" />
  <TypeSignature Language="VB.NET" Value="Public Class CancellationTokenSource&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CancellationTokenSource : IDisposable" />
  <TypeSignature Language="F#" Value="type CancellationTokenSource = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ecaa3-101">Sygnalizuje <see cref="T:System.Threading.CancellationToken" /> który powinna zostać anulowana.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ecaa3-101">Signals to a <see cref="T:System.Threading.CancellationToken" /> that it should be canceled.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ecaa3-102">Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], .NET Framework przy użyciu ujednoliconego modelu kooperatywne anulowanie asynchronicznego lub długotrwałe operacje synchroniczne, które obejmuje dwa obiekty:</span><span class="sxs-lookup"><span data-stu-id="ecaa3-102">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:</span></span>  
  
-   <span data-ttu-id="ecaa3-103">A <xref:System.Threading.CancellationTokenSource> obiektu, który zawiera token anulowania, za pośrednictwem jego <xref:System.Threading.CancellationTokenSource.Token%2A> właściwość i wysyła anulowania komunikatu przez wywołanie jego <xref:System.Threading.CancellationTokenSource.Cancel%2A> lub <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-103">A <xref:System.Threading.CancellationTokenSource> object, which provides a cancellation token through its <xref:System.Threading.CancellationTokenSource.Token%2A> property and sends a cancellation message by calling its <xref:System.Threading.CancellationTokenSource.Cancel%2A> or <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> method.</span></span>  
  
-   <span data-ttu-id="ecaa3-104">Element <xref:System.Threading.CancellationToken> obiektu, który wskazuje, czy zażądano anulowania.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-104">A <xref:System.Threading.CancellationToken> object, which indicates whether cancellation is requested.</span></span>  
  
 <span data-ttu-id="ecaa3-105">Ogólny schemat implementowania modelu kooperatywne anulowanie jest:</span><span class="sxs-lookup"><span data-stu-id="ecaa3-105">The general pattern for implementing the cooperative cancellation model is:</span></span>  
  
-   <span data-ttu-id="ecaa3-106">Utwórz wystąpienie <xref:System.Threading.CancellationTokenSource> obiektu, który zarządza i wysyła powiadomienie odwołania do tokenów anulowania indywidualnych.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-106">Instantiate a <xref:System.Threading.CancellationTokenSource> object, which manages and sends cancellation notification to the individual cancellation tokens.</span></span>  
  
-   <span data-ttu-id="ecaa3-107">Przekaż token zwrócony przez <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> właściwość do każdego zadania lub wątkiem, który będzie nasłuchiwać pod kątem anulowania.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-107">Pass the token returned by the <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property to each task or thread that listens for cancellation.</span></span>  
  
-   <span data-ttu-id="ecaa3-108">Wywołaj <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> metody z operacji, które odbierają token anulowania.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-108">Call the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> method from operations that receive the cancellation token.</span></span> <span data-ttu-id="ecaa3-109">Mechanizm dla każdego zadania lub wątku na odpowiedź na żądanie anulowania.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-109">Provide a mechanism for each task or thread to respond to a cancellation request.</span></span> <span data-ttu-id="ecaa3-110">Czy chcesz anulować operację i dokładnie tak jak to zrobić, zależy od logiki aplikacji.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-110">Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.</span></span>  
  
-   <span data-ttu-id="ecaa3-111">Wywołaj <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> metodę w celu udostępnienia powiadomienia o anulowaniu.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-111">Call the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to provide notification of cancellation.</span></span> <span data-ttu-id="ecaa3-112">To ustawienie <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> właściwości dla każdej kopii token anulowania na potrzeby `true`.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-112">This sets the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType> property on every copy of the cancellation token to `true`.</span></span>  
  
-   <span data-ttu-id="ecaa3-113">Wywołaj <xref:System.Threading.CancellationTokenSource.Dispose%2A> metody po zakończeniu <xref:System.Threading.CancellationTokenSource> obiektu.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-113">Call the <xref:System.Threading.CancellationTokenSource.Dispose%2A> method when you are finished with the <xref:System.Threading.CancellationTokenSource> object.</span></span>  
  
 <span data-ttu-id="ecaa3-114">Aby uzyskać więcej informacji, zobacz [anulowanie w zarządzanych wątkach](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="ecaa3-114">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ecaa3-115">Ten typ implementuje <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-115">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ecaa3-116">Po zakończeniu używania wystąpienia typu, należy usunąć ją bezpośrednio lub pośrednio.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-116">When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="ecaa3-117">Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> method in Class metoda `try` / `catch` bloku.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-117">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="ecaa3-118">Aby usunąć ją pośrednio, użyj konstrukcją języka pierwszej klasy takiej jak `using` (w języku C#) lub `Using` (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="ecaa3-118">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="ecaa3-119">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-119">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ecaa3-120">W poniższym przykładzie użyto generator liczb losowych do emulowania aplikacji zbierania danych, odczytująca jedenaście instrumencie 10 wartości całkowitych.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-120">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="ecaa3-121">Wartość zero wskazuje, że pomiar nie powiodło się dla jednego dokumentu, obliczona w takim przypadku można anulować operację i nie oznacza ogólne.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-121">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="ecaa3-122">Aby obsłużyć możliwe anulowanie operacji, przykład tworzy <xref:System.Threading.CancellationTokenSource> obiektu, która generuje token anulowania, który jest przekazywany do <xref:System.Threading.Tasks.TaskFactory> obiektu.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-122">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="ecaa3-123"><xref:System.Threading.Tasks.TaskFactory> Obiektu z kolei przekazuje token anulowania do poszczególnych zadań odpowiedzialny za zbieranie odczyty dla określonego dokumentu.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-123">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="ecaa3-124"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> Metoda jest wywoływana, aby upewnić się, że średnia jest obliczana tylko wtedy, gdy wszystkie odczyty zebrano zostały pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-124">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="ecaa3-125">Jeśli zadanie ma nie, ponieważ zostało anulowane, wywołanie <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> metoda zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-125">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ecaa3-126">Wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Threading.CancellationTokenSource" /> są odporne na wątki i mogą być używane jednocześnie z wielu wątków, z wyjątkiem produktów <see cref="M:System.Threading.CancellationTokenSource.Dispose" />, który może być używana tylko podczas wszystkich operacji na <see cref="T:System.Threading.CancellationTokenSource" /> obiektu została ukończona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ecaa3-126">All public and protected members of <see cref="T:System.Threading.CancellationTokenSource" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.CancellationTokenSource.Dispose" />, which must only be used when all other operations on the <see cref="T:System.Threading.CancellationTokenSource" /> object have completed.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-127">Inicjuje <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-127">Initializes the <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationTokenSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationTokenSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-128">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.CancellationTokenSource" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-128">Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationTokenSource (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (millisecondsDelay As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationTokenSource(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationTokenSource : int -&gt; System.Threading.CancellationTokenSource" Usage="new System.Threading.CancellationTokenSource millisecondsDelay" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="ecaa3-129">Interwał czasu w milisekundach czas oczekiwania przed anulowaniem to <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-129">The time interval in milliseconds to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ecaa3-130">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.CancellationTokenSource" /> klasę, która zostanie anulowane po określonym czasie opóźnienia w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-130">Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class that will be canceled after the specified delay in milliseconds.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ecaa3-131">Odlicza czas do `millisecondsDelay` rozpoczyna się podczas wywołania konstruktora.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-131">The countdown for the `millisecondsDelay` starts during the call to the constructor.</span></span>  <span data-ttu-id="ecaa3-132">Gdy `millisecondsDelay` wygaśnie, stworzonego elementu <xref:System.Threading.CancellationTokenSource> zostało anulowane (Jeśli nie zostało anulowane już).</span><span class="sxs-lookup"><span data-stu-id="ecaa3-132">When the `millisecondsDelay` expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled (if it has not been canceled already).</span></span>  
  
 <span data-ttu-id="ecaa3-133">Kolejne wywołania <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> spowoduje zresetowanie `millisecondsDelay` do stworzonego elementu <xref:System.Threading.CancellationTokenSource>, jeśli nie zostało już anulowane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-133">Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the `millisecondsDelay` for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ecaa3-134">
            <paramref name="millisecondsDelay" /> jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-134">
              <paramref name="millisecondsDelay" /> is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationTokenSource (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (delay As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationTokenSource(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationTokenSource : TimeSpan -&gt; System.Threading.CancellationTokenSource" Usage="new System.Threading.CancellationTokenSource delay" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="ecaa3-135">Interwał czasu oczekiwania przed anulowaniem to <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-135">The time interval to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ecaa3-136">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.CancellationTokenSource" /> klasę, która zostanie anulowane po określonym czasie span.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-136">Initializes a new instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class that will be canceled after the specified time span.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ecaa3-137">Rozpoczyna odliczania opóźnienia podczas wywołania konstruktora.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-137">The countdown for the delay starts during the call to the constructor.</span></span> <span data-ttu-id="ecaa3-138">Po upływie opóźnienie, stworzonego elementu <xref:System.Threading.CancellationTokenSource> została anulowana, jeśli nie zostało już anulowane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-138">When the delay expires, the constructed <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.</span></span>  
  
 <span data-ttu-id="ecaa3-139">Kolejne wywołania <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> spowoduje zresetowanie opóźnienie stworzonego elementu <xref:System.Threading.CancellationTokenSource>, jeśli nie zostało już anulowane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-139">Subsequent calls to <xref:System.Threading.CancellationTokenSource.CancelAfter%2A> will reset the delay for the constructed <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ecaa3-140">
            <paramref name="delay" />
            <see langword="." />
            <see cref="P:System.TimeSpan.TotalMilliseconds" /> jest mniejsza niż -1 lub większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-140">
              <paramref name="delay" />
              <see langword="." />
              <see cref="P:System.TimeSpan.TotalMilliseconds" /> is less than -1 or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="  &#xA;            T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ecaa3-141">
            <paramref name="delay" />
            <see langword="." />
            <see cref="P:System.TimeSpan.TotalMilliseconds" /> jest mniejsza niż -1 lub większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-141">
              <paramref name="delay" />
              <see langword="." />
              <see cref="P:System.TimeSpan.TotalMilliseconds" /> is less than -1 or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Cancel">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-142">Komunikuje się żądanie anulowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-142">Communicates a request for cancellation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; unit" Usage="cancellationTokenSource.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-143">Komunikuje się żądanie anulowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-143">Communicates a request for cancellation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ecaa3-144">Skojarzone <xref:System.Threading.CancellationToken> zostanie powiadomiony o anulowania i przechodzi do stanu gdzie <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> zwraca wartość true.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-144">The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns true.</span></span>  
  
 <span data-ttu-id="ecaa3-145">Wszystkie operacje można anulować lub wywołania zwrotne zarejestrowane w usłudze <xref:System.Threading.CancellationToken> zostaną wykonane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-145">Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.</span></span>  
  
 <span data-ttu-id="ecaa3-146">Zaleca się, że można anulować operacji i wywołania zwrotne zarejestrowane w usłudze <xref:System.Threading.CancellationToken> nie zgłasza wyjątków.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-146">We recommend that cancelable operations and callbacks registered with <xref:System.Threading.CancellationToken> not throw exceptions.</span></span> 
 
 <span data-ttu-id="ecaa3-147">To przeciążenie Anuluj będzie używana do agregowania wyjątki zgłaszane w <xref:System.AggregateException>, w taki sposób, że jeden wywołania zwrotnego, zostanie zgłoszony wyjątek nie uniemożliwi inne zarejestrowanego wywołania zwrotne wykonywane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-147">This overload of Cancel will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</span></span> 
   
  
## Examples  
 <span data-ttu-id="ecaa3-148">W poniższym przykładzie użyto generator liczb losowych do emulowania aplikacji zbierania danych, odczytująca jedenaście instrumencie 10 wartości całkowitych.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-148">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="ecaa3-149">Wartość zero wskazuje, że pomiar nie powiodło się dla jednego dokumentu, obliczona w takim przypadku można anulować operację i nie oznacza ogólne.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-149">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="ecaa3-150">Aby obsłużyć możliwe anulowanie operacji, przykład tworzy <xref:System.Threading.CancellationTokenSource> obiektu, która generuje token anulowania, który jest przekazywany do <xref:System.Threading.Tasks.TaskFactory> obiektu.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-150">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="ecaa3-151"><xref:System.Threading.Tasks.TaskFactory> Obiektu z kolei przekazuje token anulowania do poszczególnych zadań odpowiedzialny za zbieranie odczyty dla określonego dokumentu.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-151">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="ecaa3-152"><xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> Metoda jest wywoływana, aby upewnić się, że średnia jest obliczana tylko wtedy, gdy wszystkie odczyty zebrano zostały pomyślnie.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-152">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="ecaa3-153">Jeśli zadanie ma nie, ponieważ zostało anulowane, wywołanie <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> metoda zgłasza wyjątek.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-153">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ecaa3-154">To <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-154">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ecaa3-155">Łączny wyjątek zawierającą wszystkie wyjątki generowane przez zarejestrowanego wywołania zwrotne dla powiązanego <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-155">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel (bool throwOnFirstException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel(bool throwOnFirstException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel (throwOnFirstException As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel(bool throwOnFirstException);" />
      <MemberSignature Language="F#" Value="member this.Cancel : bool -&gt; unit" Usage="cancellationTokenSource.Cancel throwOnFirstException" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throwOnFirstException" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="throwOnFirstException">
          <span data-ttu-id="ecaa3-156">
            <see langword="true" /> Jeśli wyjątki należy natychmiast propagowane; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-156">
              <see langword="true" /> if exceptions should immediately propagate; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ecaa3-157">Komunikuje się żądanie anulowania i określa, czy można anulować operacji i pozostałe wywołania zwrotne mają być przetwarzane, jeśli wystąpi wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-157">Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed if an exception occurs.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ecaa3-158">Skojarzone <xref:System.Threading.CancellationToken> zostanie powiadomiony o anulowania i przechodzi do stanu gdzie <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> zwraca `true`.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-158">The associated <xref:System.Threading.CancellationToken> will be notified of the cancellation and will transition to a state where <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> returns `true`.</span></span>  
  
 <span data-ttu-id="ecaa3-159">Wszystkie operacje można anulować lub wywołania zwrotne zarejestrowane w usłudze <xref:System.Threading.CancellationToken> zostaną wykonane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-159">Any callbacks or cancelable operations registered with the <xref:System.Threading.CancellationToken> will be executed.</span></span> <span data-ttu-id="ecaa3-160">Wywołania zwrotne będą wykonywane synchronicznie, w kolejności LIFO.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-160">Callbacks will be executed synchronously in LIFO order.</span></span> 
  
 <span data-ttu-id="ecaa3-161">Zaleca się, że można anulować operacji i wywołania zwrotne zarejestrowane w usłudze <xref:System.Threading.CancellationToken> nie zgłasza wyjątków.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-161">We recommend that cancelable operations and callbacks registered with <xref:System.Threading.CancellationToken> not throw exceptions.</span></span> 
  
 <span data-ttu-id="ecaa3-162">Jeśli `throwOnFirstException` jest `true`, wyjątek od razu będzie propagowany poza wywołanie <xref:System.Threading.CancellationTokenSource.Cancel%2A>, zapobieganie pozostałe wywołania zwrotne i można anulować operacji przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-162">If `throwOnFirstException` is `true`, an exception will immediately propagate out of the call to <xref:System.Threading.CancellationTokenSource.Cancel%2A>, preventing the remaining callbacks and cancelable operations from being processed.</span></span>  
  
 <span data-ttu-id="ecaa3-163">Jeśli `throwOnFirstException` jest `false`, to przeciążenie będzie używana do agregowania wyjątki zgłaszane w <xref:System.AggregateException>, w taki sposób, że jeden wywołania zwrotnego, zostanie zgłoszony wyjątek nie uniemożliwi inne zarejestrowanego wywołania zwrotne wykonywane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-163">If `throwOnFirstException` is `false`, this overload will aggregate any exceptions thrown into an <xref:System.AggregateException>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ecaa3-164">To <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-164">This <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="ecaa3-165">Łączny wyjątek zawierającą wszystkie wyjątki generowane przez zarejestrowanego wywołania zwrotne dla powiązanego <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-165">An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CancelAfter">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-166">Planuje operacji anulowania, w tym <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-166">Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CancelAfter">
      <MemberSignature Language="C#" Value="public void CancelAfter (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAfter(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAfter (millisecondsDelay As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAfter(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="member this.CancelAfter : int -&gt; unit" Usage="cancellationTokenSource.CancelAfter millisecondsDelay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="ecaa3-167">Przedział czasu oczekiwania przed anulowaniem to <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-167">The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ecaa3-168">Planuje operacji anulowania, w tym <see cref="T:System.Threading.CancellationTokenSource" /> po określonej liczbie milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-168">Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource" /> after the specified number of milliseconds.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ecaa3-169">Odlicza czas do `millisecondsDelay` rozpoczyna się podczas tego wywołania.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-169">The countdown for the `millisecondsDelay` starts during this call.</span></span> <span data-ttu-id="ecaa3-170">Gdy `millisecondsDelay` wygaśnie, to <xref:System.Threading.CancellationTokenSource> została anulowana, jeśli nie zostało już anulowane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-170">When the `millisecondsDelay` expires, this <xref:System.Threading.CancellationTokenSource> is canceled, if it has not been canceled already.</span></span>  
  
 <span data-ttu-id="ecaa3-171">Spowoduje to zresetowanie kolejnych wywołań CancelAfter `millisecondsDelay` tego <xref:System.Threading.CancellationTokenSource>, jeśli nie zostało już anulowane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-171">Subsequent calls to CancelAfter will reset the `millisecondsDelay` for this <xref:System.Threading.CancellationTokenSource>, if it has not been canceled already.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ecaa3-172">Wyjątek generowany, gdy to <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-172">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ecaa3-173">Wyjątek generowany, gdy <paramref name="millisecondsDelay" /> jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-173">The exception thrown when <paramref name="millisecondsDelay" /> is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelAfter">
      <MemberSignature Language="C#" Value="public void CancelAfter (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAfter(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAfter (delay As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAfter(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="member this.CancelAfter : TimeSpan -&gt; unit" Usage="cancellationTokenSource.CancelAfter delay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="ecaa3-174">Przedział czasu oczekiwania przed anulowaniem to <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-174">The time span to wait before canceling this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ecaa3-175">Planuje operacji anulowania, w tym <see cref="T:System.Threading.CancellationTokenSource" /> rozciągać się po określonym czasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-175">Schedules a cancel operation on this <see cref="T:System.Threading.CancellationTokenSource" /> after the specified time span.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ecaa3-176">Wyjątek generowany, gdy to <see cref="T:System.Threading.CancellationTokenSource" /> został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-176">The exception thrown when this <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ecaa3-177">Wyjątek, który jest generowany, gdy <paramref name="delay" /> jest mniejsza niż -1 lub większa niż wartość parametru Int32.MaxValue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-177">The exception that is thrown when <paramref name="delay" /> is less than -1 or greater than Int32.MaxValue.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateLinkedTokenSource">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-178">Tworzy <see cref="T:System.Threading.CancellationTokenSource" /> się ze stanem anulowane dowolne tokeny źródła w przypadku ze stanem anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-178">Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens are in the canceled state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateLinkedTokenSource">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationTokenSource CreateLinkedTokenSource (params System.Threading.CancellationToken[] tokens);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.CancellationTokenSource CreateLinkedTokenSource(valuetype System.Threading.CancellationToken[] tokens) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateLinkedTokenSource (ParamArray tokens As CancellationToken()) As CancellationTokenSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::CancellationTokenSource ^ CreateLinkedTokenSource(... cli::array &lt;System::Threading::CancellationToken&gt; ^ tokens);" />
      <MemberSignature Language="F#" Value="static member CreateLinkedTokenSource : System.Threading.CancellationToken[] -&gt; System.Threading.CancellationTokenSource" Usage="System.Threading.CancellationTokenSource.CreateLinkedTokenSource tokens" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokens" Type="System.Threading.CancellationToken[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tokens">
          <span data-ttu-id="ecaa3-179">Tablica, która zawiera wystąpienia token anulowania do obserwowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-179">An array that contains the cancellation token instances to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ecaa3-180">Tworzy <see cref="T:System.Threading.CancellationTokenSource" /> się ze stanem anulowane dowolne tokeny źródła w wybranej tablicy w przypadku ze stanem anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-180">Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ecaa3-181">A <see cref="T:System.Threading.CancellationTokenSource" /> połączonego tokenów źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-181">A <see cref="T:System.Threading.CancellationTokenSource" /> that is linked to the source tokens.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ecaa3-182">A <see cref="T:System.Threading.CancellationTokenSource" /> skojarzonych z jednym źródłem byla zahozena tokenów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-182">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ecaa3-183">
            <paramref name="tokens" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-183">
              <paramref name="tokens" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ecaa3-184">
            <paramref name="tokens" /> jest pusty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-184">
              <paramref name="tokens" /> is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateLinkedTokenSource">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationTokenSource CreateLinkedTokenSource (System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.CancellationTokenSource CreateLinkedTokenSource(valuetype System.Threading.CancellationToken token1, valuetype System.Threading.CancellationToken token2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateLinkedTokenSource (token1 As CancellationToken, token2 As CancellationToken) As CancellationTokenSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::CancellationTokenSource ^ CreateLinkedTokenSource(System::Threading::CancellationToken token1, System::Threading::CancellationToken token2);" />
      <MemberSignature Language="F#" Value="static member CreateLinkedTokenSource : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; System.Threading.CancellationTokenSource" Usage="System.Threading.CancellationTokenSource.CreateLinkedTokenSource (token1, token2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token1" Type="System.Threading.CancellationToken" />
        <Parameter Name="token2" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="token1">
          <span data-ttu-id="ecaa3-185">Pierwszy token anulowania do obserwowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-185">The first cancellation token to observe.</span>
          </span>
        </param>
        <param name="token2">
          <span data-ttu-id="ecaa3-186">Drugi token anulowania do obserwowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-186">The second cancellation token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ecaa3-187">Tworzy <see cref="T:System.Threading.CancellationTokenSource" /> się ze stanem anulowane dowolne tokeny źródła w przypadku ze stanem anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-187">Creates a <see cref="T:System.Threading.CancellationTokenSource" /> that will be in the canceled state when any of the source tokens are in the canceled state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ecaa3-188">A <see cref="T:System.Threading.CancellationTokenSource" /> połączonego tokenów źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-188">A <see cref="T:System.Threading.CancellationTokenSource" /> that is linked to the source tokens.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ecaa3-189">A <see cref="T:System.Threading.CancellationTokenSource" /> skojarzonych z jednym źródłem byla zahozena tokenów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-189">A <see cref="T:System.Threading.CancellationTokenSource" /> associated with one of the source tokens has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-190">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Threading.CancellationTokenSource" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-190">Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cancellationTokenSource.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-191">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Threading.CancellationTokenSource" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-191">Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenSource" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ecaa3-192">Wywołaj `Dispose` po zakończeniu przy użyciu <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-192">Call `Dispose` when you are finished using the <xref:System.Threading.CancellationTokenSource>.</span></span> <span data-ttu-id="ecaa3-193">`Dispose` Pozostawia metoda <xref:System.Threading.CancellationTokenSource> w stanie uniemożliwiającym jego używanie.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-193">The `Dispose` method leaves the <xref:System.Threading.CancellationTokenSource> in an unusable state.</span></span> <span data-ttu-id="ecaa3-194">Po wywołaniu `Dispose`, trzeba zwolnić wszystkie odwołania do <xref:System.Threading.CancellationTokenSource> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć, <xref:System.Threading.CancellationTokenSource> zajmowaną przez wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-194">After calling `Dispose`, you must release all references to the <xref:System.Threading.CancellationTokenSource> so the garbage collector can reclaim the memory that the <xref:System.Threading.CancellationTokenSource> was occupying.</span></span>  
  
 <span data-ttu-id="ecaa3-195">Aby uzyskać więcej informacji, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="ecaa3-195">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ecaa3-196">Zawsze wywołuj `Dispose` przed publikacją swoje ostatnie odwołanie do <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-196">Always call `Dispose` before you release your last reference to the <xref:System.Threading.CancellationTokenSource>.</span></span> <span data-ttu-id="ecaa3-197">W przeciwnym razie zasobów jest przy użyciu nie zostanie zwolniona, dopóki moduł odśmiecania pamięci wywołuje <xref:System.Threading.CancellationTokenSource> obiektu `Finalize` metody.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-197">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CancellationTokenSource> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="cancellationTokenSource.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="ecaa3-198">
            <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko niezarządzane zasoby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-198">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ecaa3-199">Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Threading.CancellationTokenSource" /> klasy i opcjonalnie zwalnia zasoby zarządzane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-199">Releases the unmanaged resources used by the <see cref="T:System.Threading.CancellationTokenSource" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationTokenSource.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationTokenSource.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-200">Pobiera informację, czy zażądano anulowania, w tym <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-200">Gets whether cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ecaa3-201">
            <see langword="true" /> Jeśli zażądano anulowania, w tym <see cref="T:System.Threading.CancellationTokenSource" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-201">
              <see langword="true" /> if cancellation has been requested for this <see cref="T:System.Threading.CancellationTokenSource" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ecaa3-202">Ta właściwość wskazuje, czy anulowania wysłano żądanie dla tego tokenu źródła, takich jak ze względu na wywołanie w celu jego <xref:System.Threading.CancellationTokenSource.Cancel%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-202">This property indicates whether cancellation has been requested for this token source, such as due to a call to its <xref:System.Threading.CancellationTokenSource.Cancel%2A> method.</span></span>  
  
 <span data-ttu-id="ecaa3-203">Jeśli ta właściwość zwraca `true`, tylko gwarantuje, że zażądano anulowania.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-203">If this property returns `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="ecaa3-204">Nie gwarantuje każdy program obsługi zarejestrowanych za pomocą odpowiedniego tokenu zakończenie wykonywania ani żądań anulowania została zakończona, propagowanie do całej obsługi zarejestrowane.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-204">It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="ecaa3-205">Dodatkowe synchronizacji mogą być wymagane, szczególnie w sytuacjach, gdzie obiekty powiązane są anulowane, jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="ecaa3-205">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken Token" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationTokenSource.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken Token { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.Token : System.Threading.CancellationToken" Usage="System.Threading.CancellationTokenSource.Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ecaa3-206">Pobiera <see cref="T:System.Threading.CancellationToken" /> skojarzony z tym <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-206">Gets the <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ecaa3-207">
            <see cref="T:System.Threading.CancellationToken" /> Skojarzony z tym <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-207">The <see cref="T:System.Threading.CancellationToken" /> associated with this <see cref="T:System.Threading.CancellationTokenSource" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ecaa3-208">Źródło tokenu został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ecaa3-208">The token source has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>