<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9087366b105fd0db08981653c09c4fc5801df013" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579232" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="da717-101">Powiadamia oczekiwania wątku, który wystąpiło zdarzenie.</span>
      <span class="sxs-lookup">
        <span data-stu-id="da717-101">Notifies a waiting thread that an event has occurred.</span>
      </span>
      <span data-ttu-id="da717-102">Klasa ta nie może być dziedziczona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="da717-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da717-103">`AutoResetEvent` Umożliwia wątków do komunikowania się ze sobą za sygnalizowania.</span><span class="sxs-lookup"><span data-stu-id="da717-103">`AutoResetEvent` allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="da717-104">Zazwyczaj za pomocą tej klasy wątków wyłącznego dostępu do zasobu.</span><span class="sxs-lookup"><span data-stu-id="da717-104">Typically, you use this class when threads need exclusive access to a resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da717-105">Ten typ implementuje <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="da717-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="da717-106">Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego.</span><span class="sxs-lookup"><span data-stu-id="da717-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="da717-107">Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> metody w `try` / `catch` bloku.</span><span class="sxs-lookup"><span data-stu-id="da717-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="da717-108">Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak `using` (w języku C#) lub `Using` (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="da717-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="da717-109">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu tematu.</span><span class="sxs-lookup"><span data-stu-id="da717-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="da717-110">Wątek oczekuje na sygnał, wywołując <xref:System.Threading.WaitHandle.WaitOne%2A> na `AutoResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="da717-110">A thread waits for a signal by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the `AutoResetEvent`.</span></span> <span data-ttu-id="da717-111">Jeśli `AutoResetEvent` jest w stanie sygnalizowane bloki wątku, oczekiwania wątku że obecnie formantów zasobu sygnalizuje, że zasób jest dostępny, wywołując <xref:System.Threading.EventWaitHandle.Set%2A>.</span><span class="sxs-lookup"><span data-stu-id="da717-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <xref:System.Threading.EventWaitHandle.Set%2A>.</span></span>  
  
 <span data-ttu-id="da717-112">Wywoływanie `Set` sygnały `AutoResetEvent` zwolnienia oczekiwania wątku.</span><span class="sxs-lookup"><span data-stu-id="da717-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="da717-113">`AutoResetEvent` pozostaje zasygnalizować dopiero po zwolnieniu pojedynczego wątku oczekiwania i automatycznie zwraca stan sygnalizowane na.</span><span class="sxs-lookup"><span data-stu-id="da717-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="da717-114">Jeśli nie ma wątków oczekujących, stan, pozostanie ona sygnałowego nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="da717-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="da717-115">Jeśli wątek wywołuje <xref:System.Threading.WaitHandle.WaitOne%2A> podczas <xref:System.Threading.AutoResetEvent> jest w stanie sygnałowego wątku nie są blokowane.</span><span class="sxs-lookup"><span data-stu-id="da717-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="da717-116"><xref:System.Threading.AutoResetEvent> Zwalnia wątek natychmiast, a następnie powróci do stanu sygnalizowane.</span><span class="sxs-lookup"><span data-stu-id="da717-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da717-117">Nie ma żadnych gwarancji, że każdego wywołania <xref:System.Threading.EventWaitHandle.Set%2A> metody opublikuje wątku.</span><span class="sxs-lookup"><span data-stu-id="da717-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="da717-118">Jeśli dwa wywołania są zbyt blisko siebie tak, aby drugie wywołanie występuje przed wątek został zwolniony, tylko jeden wątek jest zwalniany.</span><span class="sxs-lookup"><span data-stu-id="da717-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="da717-119">Jest tak, jakby nie nastąpiły drugie wywołanie.</span><span class="sxs-lookup"><span data-stu-id="da717-119">It is as if the second call did not happen.</span></span> <span data-ttu-id="da717-120">Ponadto jeśli <xref:System.Threading.EventWaitHandle.Set%2A> jest wywoływane, gdy nie ma żadnych wątków oczekujących i <xref:System.Threading.AutoResetEvent> zostało już zasygnalizowane, połączenie nie ma wpływu.</span><span class="sxs-lookup"><span data-stu-id="da717-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="da717-121">Można kontrolować początkowy stan `AutoResetEvent` przekazując wartość logiczną do konstruktora: `true` Jeśli stan początkowy jest sygnalizowane i `false` inaczej.</span><span class="sxs-lookup"><span data-stu-id="da717-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="da717-122">`AutoResetEvent` można również używać razem `static` <xref:System.Threading.WaitHandle.WaitAll%2A> i <xref:System.Threading.WaitHandle.WaitAny%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="da717-122">`AutoResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="da717-123">Aby uzyskać więcej informacji na temat mechanizmów synchronizacji wątku, zobacz [autoresetevent —](~/docs/standard/threading/autoresetevent.md) w dokumentacji koncepcyjnego.</span><span class="sxs-lookup"><span data-stu-id="da717-123">For more information about thread synchronization mechanisms, see [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) in the conceptual documentation.</span></span>  
  
 <span data-ttu-id="da717-124">Począwszy od programu .NET Framework w wersji 2.0, <xref:System.Threading.AutoResetEvent> pochodzi z nowego <xref:System.Threading.EventWaitHandle> klasy.</span><span class="sxs-lookup"><span data-stu-id="da717-124">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="da717-125"><xref:System.Threading.AutoResetEvent> Jest funkcjonalnym odpowiednikiem <xref:System.Threading.EventWaitHandle> utworzone za pomocą <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da717-125">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="da717-126">W odróżnieniu od <xref:System.Threading.AutoResetEvent> klasy <xref:System.Threading.EventWaitHandle> klasy zapewnia dostęp do systemu o nazwie zdarzenia synchronizacji.</span><span class="sxs-lookup"><span data-stu-id="da717-126">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da717-127">Poniższy przykład przedstawia użycie <xref:System.Threading.AutoResetEvent> zwolnienia jeden wątek pojedynczo, wywołując <xref:System.Threading.EventWaitHandle.Set%2A> — metoda (dla klasy podstawowej) każdego czasu użytkownik naciśnie **Enter** klucza.</span><span class="sxs-lookup"><span data-stu-id="da717-127">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="da717-128">W przykładzie uruchomiono trzech wątków, które oczekiwanie na <xref:System.Threading.AutoResetEvent> utworzony w stanie sygnałowego.</span><span class="sxs-lookup"><span data-stu-id="da717-128">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="da717-129">Pierwszym wątkiem zwolnieniu natychmiast, ponieważ <xref:System.Threading.AutoResetEvent> jest już w stanie sygnałowego.</span><span class="sxs-lookup"><span data-stu-id="da717-129">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="da717-130">Spowoduje to zresetowanie <xref:System.Threading.AutoResetEvent> stan sygnalizowane tak, aby zablokować kolejnych wątków.</span><span class="sxs-lookup"><span data-stu-id="da717-130">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="da717-131">Zablokowanych wątków nie są wydawane, dopóki użytkownik zwolni je jeden jednocześnie, naciskając klawisz **Enter** klucza.</span><span class="sxs-lookup"><span data-stu-id="da717-131">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="da717-132">Po wątki są wydawane z pierwszego <xref:System.Threading.AutoResetEvent>, będą oni czekać na innym <xref:System.Threading.AutoResetEvent> utworzony w stanie sygnalizowane.</span><span class="sxs-lookup"><span data-stu-id="da717-132">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="da717-133">Blokuj wszystkie trzy wątki, więc <xref:System.Threading.EventWaitHandle.Set%2A> metoda musi zostać wywołana trzy razy zwolnienia je wszystkie.</span><span class="sxs-lookup"><span data-stu-id="da717-133">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="da717-134">Ta klasa jest bezpieczne dla wątków.</span>
      <span class="sxs-lookup">
        <span data-stu-id="da717-134">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="da717-135">
            <see langword="true" /> Aby ustawić stanu początkowego sygnalizuje; <see langword="false" /> Aby ustawić stan początkowy nie sygnalizuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da717-135">
              <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da717-136">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.AutoResetEvent" /> klasy z wartość logiczną wskazującą, czy wartość stanu początkowego sygnałowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da717-136">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da717-137">W poniższym przykładzie użyto <xref:System.Threading.AutoResetEvent> zsynchronizować działania dwoma wątkami.</span><span class="sxs-lookup"><span data-stu-id="da717-137">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="da717-138">Wykonuje pierwszym wątkiem, czyli wątku aplikacji `Main`.</span><span class="sxs-lookup"><span data-stu-id="da717-138">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="da717-139">Zapisuje wartości do chronionego zasobu, który jest `static` (`Shared` w języku Visual Basic) pola o nazwie `number`.</span><span class="sxs-lookup"><span data-stu-id="da717-139">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="da717-140">Drugi wątek wykonuje statycznych `ThreadProc` metodę, która odczytuje wartości napisane przez `Main`.</span><span class="sxs-lookup"><span data-stu-id="da717-140">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="da717-141">`ThreadProc` Metoda oczekuje na <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="da717-141">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="da717-142">Gdy `Main` wywołania <xref:System.Threading.EventWaitHandle.Set%2A> metoda <xref:System.Threading.AutoResetEvent>, `ThreadProc` metoda odczytuje jedną wartość.</span><span class="sxs-lookup"><span data-stu-id="da717-142">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="da717-143"><xref:System.Threading.AutoResetEvent> Resetuje natychmiast, więc `ThreadProc` metoda oczekuje się ponownie.</span><span class="sxs-lookup"><span data-stu-id="da717-143">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="da717-144">Logika program gwarantuje, że `ThreadProc` metody nigdy nie odczyta tę samą wartość dwa razy.</span><span class="sxs-lookup"><span data-stu-id="da717-144">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="da717-145">Go nie gwarantuje, że `ThreadProc` — metoda odczytuje każdej wartości napisane przez `Main`.</span><span class="sxs-lookup"><span data-stu-id="da717-145">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="da717-146">Drugi wymagają gwarancji, że <xref:System.Threading.AutoResetEvent> blokady.</span><span class="sxs-lookup"><span data-stu-id="da717-146">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="da717-147">Po zakończeniu każdej operacji zapisu `Main` daje przez wywołanie metody <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> metody na umożliwieniu drugiego wątku do wykonania.</span><span class="sxs-lookup"><span data-stu-id="da717-147">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="da717-148">W przeciwnym razie na komputerze z jednym procesorem `Main` zapisać wiele wartości między dowolne dwie operacje odczytu.</span><span class="sxs-lookup"><span data-stu-id="da717-148">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>