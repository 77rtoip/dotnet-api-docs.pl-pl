<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6c72b3fc762735a05e86e1f0909983982e425393" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69229592" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="87d00-101">Reprezentuje zdarzenie synchronizacji wątku, które po zasygnalizowaniu resetuje automatycznie po zwolnieniu jednego oczekującego wątku.</span><span class="sxs-lookup"><span data-stu-id="87d00-101">Represents a thread synchronization event that, when signaled, resets automatically after releasing a single waiting thread.</span></span> <span data-ttu-id="87d00-102">Klasa ta nie może być dziedziczona.</span><span class="sxs-lookup"><span data-stu-id="87d00-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87d00-103">`AutoResetEvent`Używasz, <xref:System.Threading.ManualResetEvent>i dointerakcjiwątku(lubsygnalizacjiwątku).<xref:System.Threading.EventWaitHandle></span><span class="sxs-lookup"><span data-stu-id="87d00-103">You use `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="87d00-104">Aby uzyskać więcej informacji, zobacz [interakcja wątku lub](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) sekcja Sygnalizowanie w artykule [Omówienie elementów pierwotnych synchronizacji](~/docs/standard/threading/overview-of-synchronization-primitives.md) .</span><span class="sxs-lookup"><span data-stu-id="87d00-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87d00-105">Ten typ implementuje <xref:System.IDisposable> interfejs.</span><span class="sxs-lookup"><span data-stu-id="87d00-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="87d00-106">Po zakończeniu korzystania z typu należy usunąć jego wartość bezpośrednio lub pośrednio.</span><span class="sxs-lookup"><span data-stu-id="87d00-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="87d00-107">Aby usunąć typ bezpośrednio <xref:System.IDisposable.Dispose%2A> , wywołaj jego metodę `try` / `catch` w bloku.</span><span class="sxs-lookup"><span data-stu-id="87d00-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="87d00-108">Aby usunąć go pośrednio, użyj konstrukcji języka, takiej jak `using` (in C#) lub `Using` (w Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="87d00-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="87d00-109">Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego <xref:System.IDisposable> interfejs IDisposable" w temacie dotyczącym interfejsu.</span><span class="sxs-lookup"><span data-stu-id="87d00-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="87d00-110">Wątek czeka na sygnał przez wywołanie [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span><span class="sxs-lookup"><span data-stu-id="87d00-110">A thread waits for a signal by calling [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span></span> <span data-ttu-id="87d00-111">Jeśli jest w stanie niesygnalizującym, wątek jest blokowany do momentu wywołania [AutoResetEvent. Set.](xref:System.Threading.EventWaitHandle.Set%2A) `AutoResetEvent`</span><span class="sxs-lookup"><span data-stu-id="87d00-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks until [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) is called.</span></span>  
  
 <span data-ttu-id="87d00-112">`Set` Wywoływanie `AutoResetEvent` sygnałów do zwolnienia wątku oczekującego.</span><span class="sxs-lookup"><span data-stu-id="87d00-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="87d00-113">`AutoResetEvent`pozostanie sygnalizowane do momentu zwolnienia pojedynczego wątku oczekującego, a następnie automatycznie powróci do stanu niesygnalizowanego.</span><span class="sxs-lookup"><span data-stu-id="87d00-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="87d00-114">Jeśli żaden wątek nie oczekuje, stan pozostanie nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="87d00-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="87d00-115">Jeśli wątek <xref:System.Threading.WaitHandle.WaitOne%2A> <xref:System.Threading.AutoResetEvent> jest wywoływany, gdy jest w stanie sygnalizującym, wątek nie jest blokowany.</span><span class="sxs-lookup"><span data-stu-id="87d00-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="87d00-116"><xref:System.Threading.AutoResetEvent> Zwalnia wątek natychmiast i powraca do stanu niesygnalizowanego.</span><span class="sxs-lookup"><span data-stu-id="87d00-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87d00-117">Nie ma gwarancji, że każde wywołanie <xref:System.Threading.EventWaitHandle.Set%2A> metody spowoduje zwolnienie wątku.</span><span class="sxs-lookup"><span data-stu-id="87d00-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="87d00-118">Jeśli dwa wywołania są zbyt blisko siebie, więc drugie wywołanie następuje przed zwolnieniem wątku, zostanie wydane tylko jeden wątek.</span><span class="sxs-lookup"><span data-stu-id="87d00-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="87d00-119">Jest tak, jakby drugie wywołanie zostało wykonane.</span><span class="sxs-lookup"><span data-stu-id="87d00-119">It's as if the second call did not happen.</span></span> <span data-ttu-id="87d00-120">Ponadto, jeśli <xref:System.Threading.EventWaitHandle.Set%2A> jest wywoływana, gdy nie ma żadnych wątków oczekujących <xref:System.Threading.AutoResetEvent> i jest już sygnalizowane, wywołanie nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="87d00-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="87d00-121">Można kontrolować początkowy stan `AutoResetEvent` przez przekazanie wartości logicznej do konstruktora: `true` Jeśli początkowy stan jest sygnalizowane i `false` w inny sposób.</span><span class="sxs-lookup"><span data-stu-id="87d00-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="87d00-122">`AutoResetEvent`można go również używać z `static` <xref:System.Threading.WaitHandle.WaitAll%2A> metodami <xref:System.Threading.WaitHandle.WaitAny%2A> i.</span><span class="sxs-lookup"><span data-stu-id="87d00-122">`AutoResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="87d00-123">Począwszy od .NET Framework w wersji 2,0, <xref:System.Threading.AutoResetEvent> pochodzi od nowej <xref:System.Threading.EventWaitHandle> klasy.</span><span class="sxs-lookup"><span data-stu-id="87d00-123">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="87d00-124">Jest funkcjonalnie równoważny <xref:System.Threading.EventWaitHandle> z utworzonym za pomocą <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>. <xref:System.Threading.AutoResetEvent></span><span class="sxs-lookup"><span data-stu-id="87d00-124">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87d00-125"><xref:System.Threading.AutoResetEvent> W<xref:System.Threading.EventWaitHandle> przeciwieństwie do klasy, klasa zapewnia dostęp do nazwanych zdarzeń synchronizacji systemu.</span><span class="sxs-lookup"><span data-stu-id="87d00-125">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87d00-126">Poniższy przykład pokazuje, jak używać <xref:System.Threading.AutoResetEvent> do zwolnienia jednego wątku, <xref:System.Threading.EventWaitHandle.Set%2A> wywołując metodę (w klasie bazowej) za każdym razem, gdy użytkownik naciśnie klawisz **Enter** .</span><span class="sxs-lookup"><span data-stu-id="87d00-126">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="87d00-127">Przykład uruchamia trzy wątki, które czekają na <xref:System.Threading.AutoResetEvent> , który został utworzony w stanie sygnalizowane.</span><span class="sxs-lookup"><span data-stu-id="87d00-127">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="87d00-128">Pierwszy wątek jest wydawany natychmiast, ponieważ <xref:System.Threading.AutoResetEvent> jest już w stanie sygnalizującym.</span><span class="sxs-lookup"><span data-stu-id="87d00-128">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="87d00-129">Spowoduje to zresetowanie <xref:System.Threading.AutoResetEvent> do stanu bez sygnalizowania, tak aby kolejne wątki blokowały.</span><span class="sxs-lookup"><span data-stu-id="87d00-129">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="87d00-130">Zablokowane wątki nie są zwalniane, dopóki użytkownik ich nie zwolni pojedynczo przez naciśnięcie klawisza **Enter** .</span><span class="sxs-lookup"><span data-stu-id="87d00-130">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="87d00-131">Po wydaniu wątków od pierwszej <xref:System.Threading.AutoResetEvent>, czekają na inny <xref:System.Threading.AutoResetEvent> , który został utworzony w stanie niesygnalizującym.</span><span class="sxs-lookup"><span data-stu-id="87d00-131">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="87d00-132">Wszystkie trzy wątki blokują, dlatego <xref:System.Threading.EventWaitHandle.Set%2A> Metoda musi być wywoływana trzy razy, aby zwolnić wszystkie.</span><span class="sxs-lookup"><span data-stu-id="87d00-132">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="87d00-133">Ta klasa jest bezpieczna wątkowo.</span><span class="sxs-lookup"><span data-stu-id="87d00-133">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="87d00-134">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="87d00-134">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="87d00-135">Przegląd elementów podstawowych synchronizacji</span><span class="sxs-lookup"><span data-stu-id="87d00-135">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="87d00-136"><see langword="true" />Aby ustawić stan początkowy na zasygnalizowanie; <see langword="false" /> aby ustawić stan początkowy na niesygnalizujący.</span><span class="sxs-lookup"><span data-stu-id="87d00-136"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span></span></param>
        <summary><span data-ttu-id="87d00-137">Inicjuje nowe wystąpienie <see cref="T:System.Threading.AutoResetEvent" /> klasy za pomocą wartości logicznej wskazującej, czy ustawić początkowy stan do sygnalizowania.</span><span class="sxs-lookup"><span data-stu-id="87d00-137">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87d00-138">Poniższy przykład używa <xref:System.Threading.AutoResetEvent> do synchronizowania działań dwóch wątków.</span><span class="sxs-lookup"><span data-stu-id="87d00-138">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="87d00-139">Pierwszy wątek, który jest wątkiem aplikacji, jest wykonywany `Main`.</span><span class="sxs-lookup"><span data-stu-id="87d00-139">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="87d00-140">Zapisuje wartości do chronionego zasobu, czyli `static` pola (`Shared` w Visual Basic) o nazwie `number`.</span><span class="sxs-lookup"><span data-stu-id="87d00-140">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="87d00-141">Drugi wątek wykonuje metodę statyczną `ThreadProc` , która odczytuje wartości zapisywane przez. `Main`</span><span class="sxs-lookup"><span data-stu-id="87d00-141">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="87d00-142">`ThreadProc` Metoda czeka <xref:System.Threading.AutoResetEvent>na.</span><span class="sxs-lookup"><span data-stu-id="87d00-142">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="87d00-143">Gdy `Main` wywołuje<xref:System.Threading.EventWaitHandle.Set%2A> metodęna<xref:System.Threading.AutoResetEvent>, Metoda`ThreadProc` odczytuje jedną wartość.</span><span class="sxs-lookup"><span data-stu-id="87d00-143">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="87d00-144">Natychmiast resetuje, `ThreadProc` więc metoda czeka ponownie. <xref:System.Threading.AutoResetEvent></span><span class="sxs-lookup"><span data-stu-id="87d00-144">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="87d00-145">Logika programu gwarantuje, że `ThreadProc` Metoda nigdy nie będzie odczytywać tej samej wartości dwa razy.</span><span class="sxs-lookup"><span data-stu-id="87d00-145">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="87d00-146">Nie gwarantuje to, że `ThreadProc` Metoda będzie odczytywać każdą wartość zapisaną przez. `Main`</span><span class="sxs-lookup"><span data-stu-id="87d00-146">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="87d00-147">Gwarantuje to, że wymagana jest <xref:System.Threading.AutoResetEvent> druga blokada.</span><span class="sxs-lookup"><span data-stu-id="87d00-147">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="87d00-148">Po każdej operacji `Main` zapisu uzyskuje wartość, <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> wywołując metodę, aby dać drugiemu wątkowi szansę wykonania.</span><span class="sxs-lookup"><span data-stu-id="87d00-148">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="87d00-149">W przeciwnym razie na komputerze `Main` z jednym procesorem będzie zapisywać wiele wartości między dowolnymi dwoma operacjami odczytu.</span><span class="sxs-lookup"><span data-stu-id="87d00-149">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="87d00-150">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="87d00-150">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="87d00-151">Przegląd elementów podstawowych synchronizacji</span><span class="sxs-lookup"><span data-stu-id="87d00-151">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87d00-152">Ustawia stan zdarzenia na Niesygnalizowane, co powoduje zablokowanie wątków.</span><span class="sxs-lookup"><span data-stu-id="87d00-152">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="87d00-153"><see langword="true" />Jeśli operacja się powiedzie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="87d00-153"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87d00-154">Ustawia stan zdarzenia do zasygnalizowania, co umożliwia przeprowadzenie maksymalnie jednego wątku oczekującego.</span><span class="sxs-lookup"><span data-stu-id="87d00-154">Sets the state of the event to signaled, which allows at most one waiting thread to proceed.</span></span></summary>
        <returns><span data-ttu-id="87d00-155"><see langword="true" />Jeśli operacja się powiedzie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="87d00-155"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="87d00-156">Metoda Set zwalnia pojedynczy wątek.</span><span class="sxs-lookup"><span data-stu-id="87d00-156">The Set method releases a single thread.</span></span> <span data-ttu-id="87d00-157">Jeśli nie ma oczekujących wątków, dojście oczekiwania zostanie sygnalizowane do momentu, aż wątek podejmie próbę oczekiwania na niego lub dopóki nie zostanie wywołana jego Metoda resetowania.</span><span class="sxs-lookup"><span data-stu-id="87d00-157">If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its Reset method is called.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="87d00-158">Nie ma gwarancji, że każde wywołanie metody Set spowoduje zwolnienie wątku.</span><span class="sxs-lookup"><span data-stu-id="87d00-158">There is no guarantee that every call to the Set method will release a thread.</span></span> <span data-ttu-id="87d00-159">Jeśli dwa wywołania są zbyt blisko siebie, więc drugie wywołanie następuje przed zwolnieniem wątku, zostanie wydane tylko jeden wątek — tak, jakby drugie wywołanie nie było wykonywane.</span><span class="sxs-lookup"><span data-stu-id="87d00-159">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released - as if the second call did not happen.</span></span> <span data-ttu-id="87d00-160">Ponadto, jeśli Metoda Set jest wywoływana, gdy nie ma żadnych wątków oczekujących i <xref:System.Threading.AutoResetEvent> jest już sygnalizowane, wywołanie nie ma żadnego wpływu.</span><span class="sxs-lookup"><span data-stu-id="87d00-160">Also, if the Set method is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
