<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6c72b3fc762735a05e86e1f0909983982e425393" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69229592" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zdarzenie synchronizacji wątku, które po zasygnalizowaniu resetuje automatycznie po zwolnieniu jednego oczekującego wątku. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AutoResetEvent`Używasz, <xref:System.Threading.ManualResetEvent>i dointerakcjiwątku(lubsygnalizacjiwątku).<xref:System.Threading.EventWaitHandle> Aby uzyskać więcej informacji, zobacz [interakcja wątku lub](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) sekcja Sygnalizowanie w artykule [Omówienie elementów pierwotnych synchronizacji](~/docs/standard/threading/overview-of-synchronization-primitives.md) .  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejs. Po zakończeniu korzystania z typu należy usunąć jego wartość bezpośrednio lub pośrednio. Aby usunąć typ bezpośrednio <xref:System.IDisposable.Dispose%2A> , wywołaj jego metodę `try` / `catch` w bloku. Aby usunąć go pośrednio, użyj konstrukcji języka, takiej jak `using` (in C#) lub `Using` (w Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego <xref:System.IDisposable> interfejs IDisposable" w temacie dotyczącym interfejsu.  
  
 Wątek czeka na sygnał przez wywołanie [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A). Jeśli jest w stanie niesygnalizującym, wątek jest blokowany do momentu wywołania [AutoResetEvent. Set.](xref:System.Threading.EventWaitHandle.Set%2A) `AutoResetEvent`  
  
 `Set` Wywoływanie `AutoResetEvent` sygnałów do zwolnienia wątku oczekującego. `AutoResetEvent`pozostanie sygnalizowane do momentu zwolnienia pojedynczego wątku oczekującego, a następnie automatycznie powróci do stanu niesygnalizowanego. Jeśli żaden wątek nie oczekuje, stan pozostanie nieokreślony.  
  
 Jeśli wątek <xref:System.Threading.WaitHandle.WaitOne%2A> <xref:System.Threading.AutoResetEvent> jest wywoływany, gdy jest w stanie sygnalizującym, wątek nie jest blokowany. <xref:System.Threading.AutoResetEvent> Zwalnia wątek natychmiast i powraca do stanu niesygnalizowanego.  
  
> [!IMPORTANT]
>  Nie ma gwarancji, że każde wywołanie <xref:System.Threading.EventWaitHandle.Set%2A> metody spowoduje zwolnienie wątku. Jeśli dwa wywołania są zbyt blisko siebie, więc drugie wywołanie następuje przed zwolnieniem wątku, zostanie wydane tylko jeden wątek. Jest tak, jakby drugie wywołanie zostało wykonane. Ponadto, jeśli <xref:System.Threading.EventWaitHandle.Set%2A> jest wywoływana, gdy nie ma żadnych wątków oczekujących <xref:System.Threading.AutoResetEvent> i jest już sygnalizowane, wywołanie nie ma żadnego wpływu.  
  
 Można kontrolować początkowy stan `AutoResetEvent` przez przekazanie wartości logicznej do konstruktora: `true` Jeśli początkowy stan jest sygnalizowane i `false` w inny sposób.  
  
 `AutoResetEvent`można go również używać z `static` <xref:System.Threading.WaitHandle.WaitAll%2A> metodami <xref:System.Threading.WaitHandle.WaitAny%2A> i.  
  
 Począwszy od .NET Framework w wersji 2,0, <xref:System.Threading.AutoResetEvent> pochodzi od nowej <xref:System.Threading.EventWaitHandle> klasy. Jest funkcjonalnie równoważny <xref:System.Threading.EventWaitHandle> z utworzonym za pomocą <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>. <xref:System.Threading.AutoResetEvent>  
  
> [!NOTE]
>  <xref:System.Threading.AutoResetEvent> W<xref:System.Threading.EventWaitHandle> przeciwieństwie do klasy, klasa zapewnia dostęp do nazwanych zdarzeń synchronizacji systemu.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Threading.AutoResetEvent> do zwolnienia jednego wątku, <xref:System.Threading.EventWaitHandle.Set%2A> wywołując metodę (w klasie bazowej) za każdym razem, gdy użytkownik naciśnie klawisz **Enter** . Przykład uruchamia trzy wątki, które czekają na <xref:System.Threading.AutoResetEvent> , który został utworzony w stanie sygnalizowane. Pierwszy wątek jest wydawany natychmiast, ponieważ <xref:System.Threading.AutoResetEvent> jest już w stanie sygnalizującym. Spowoduje to zresetowanie <xref:System.Threading.AutoResetEvent> do stanu bez sygnalizowania, tak aby kolejne wątki blokowały. Zablokowane wątki nie są zwalniane, dopóki użytkownik ich nie zwolni pojedynczo przez naciśnięcie klawisza **Enter** .  
  
 Po wydaniu wątków od pierwszej <xref:System.Threading.AutoResetEvent>, czekają na inny <xref:System.Threading.AutoResetEvent> , który został utworzony w stanie niesygnalizującym. Wszystkie trzy wątki blokują, dlatego <xref:System.Threading.EventWaitHandle.Set%2A> Metoda musi być wywoływana trzy razy, aby zwolnić wszystkie.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ta klasa jest bezpieczna wątkowo.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Zarządzana wątkowość</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Przegląd elementów podstawowych synchronizacji</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" />Aby ustawić stan początkowy na zasygnalizowanie; <see langword="false" /> aby ustawić stan początkowy na niesygnalizujący.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Threading.AutoResetEvent" /> klasy za pomocą wartości logicznej wskazującej, czy ustawić początkowy stan do sygnalizowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład używa <xref:System.Threading.AutoResetEvent> do synchronizowania działań dwóch wątków. Pierwszy wątek, który jest wątkiem aplikacji, jest wykonywany `Main`. Zapisuje wartości do chronionego zasobu, czyli `static` pola (`Shared` w Visual Basic) o nazwie `number`. Drugi wątek wykonuje metodę statyczną `ThreadProc` , która odczytuje wartości zapisywane przez. `Main`  
  
 `ThreadProc` Metoda czeka <xref:System.Threading.AutoResetEvent>na. Gdy `Main` wywołuje<xref:System.Threading.EventWaitHandle.Set%2A> metodęna<xref:System.Threading.AutoResetEvent>, Metoda`ThreadProc` odczytuje jedną wartość. Natychmiast resetuje, `ThreadProc` więc metoda czeka ponownie. <xref:System.Threading.AutoResetEvent>  
  
 Logika programu gwarantuje, że `ThreadProc` Metoda nigdy nie będzie odczytywać tej samej wartości dwa razy. Nie gwarantuje to, że `ThreadProc` Metoda będzie odczytywać każdą wartość zapisaną przez. `Main` Gwarantuje to, że wymagana jest <xref:System.Threading.AutoResetEvent> druga blokada.  
  
 Po każdej operacji `Main` zapisu uzyskuje wartość, <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> wywołując metodę, aby dać drugiemu wątkowi szansę wykonania. W przeciwnym razie na komputerze `Main` z jednym procesorem będzie zapisywać wiele wartości między dowolnymi dwoma operacjami odczytu.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Zarządzana wątkowość</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Przegląd elementów podstawowych synchronizacji</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia stan zdarzenia na Niesygnalizowane, co powoduje zablokowanie wątków.</summary>
        <returns><see langword="true" />Jeśli operacja się powiedzie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia stan zdarzenia do zasygnalizowania, co umożliwia przeprowadzenie maksymalnie jednego wątku oczekującego.</summary>
        <returns><see langword="true" />Jeśli operacja się powiedzie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Metoda Set zwalnia pojedynczy wątek. Jeśli nie ma oczekujących wątków, dojście oczekiwania zostanie sygnalizowane do momentu, aż wątek podejmie próbę oczekiwania na niego lub dopóki nie zostanie wywołana jego Metoda resetowania.

> [!IMPORTANT]
> Nie ma gwarancji, że każde wywołanie metody Set spowoduje zwolnienie wątku. Jeśli dwa wywołania są zbyt blisko siebie, więc drugie wywołanie następuje przed zwolnieniem wątku, zostanie wydane tylko jeden wątek — tak, jakby drugie wywołanie nie było wykonywane. Ponadto, jeśli Metoda Set jest wywoływana, gdy nie ma żadnych wątków oczekujących i <xref:System.Threading.AutoResetEvent> jest już sygnalizowane, wywołanie nie ma żadnego wpływu.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
