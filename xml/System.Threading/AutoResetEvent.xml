<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a70cc7b3c6903a5500072e799554598f083322e5" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52732904" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Powiadamia wątku oczekiwania, który wystąpiło zdarzenie. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AutoResetEvent` Umożliwia wątków do komunikowania się ze sobą za sygnalizowanie. Zazwyczaj za pomocą tej klasy wątków wyłącznego dostępu do zasobu.  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejsu. Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niej. Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> method in Class metoda `try` / `catch` bloku. Aby usunąć ją pośrednio, użyj konstrukcją języka pierwszej klasy takiej jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu.  
  
 Wątek czeka na sygnał, wywołując <xref:System.Threading.WaitHandle.WaitOne%2A> na `AutoResetEvent`. Jeśli `AutoResetEvent` jest w stanie zasygnalizowane blokuje wątku, oczekiwanie na wątek obecnie Określa zasób do sygnalizowania, że zasób jest dostępny, wywołując <xref:System.Threading.EventWaitHandle.Set%2A>.  
  
 Wywoływanie `Set` sygnały `AutoResetEvent` zwolnić wątek oczekiwania. `AutoResetEvent` pozostaje sygnalizowane, aż do pojedynczego wątku oczekiwania jest zwalniany i automatycznie powraca do stanu zasygnalizowane. Jeśli żadne wątki oczekujące, stan, pozostanie ona sygnałowego przez czas nieokreślony.  
  
 Jeśli wątek wywołuje <xref:System.Threading.WaitHandle.WaitOne%2A> podczas <xref:System.Threading.AutoResetEvent> jest w stanie sygnałowego wątku nie są blokowane. <xref:System.Threading.AutoResetEvent> Natychmiast zwalnia wątku, a następnie wróci do stanu zasygnalizowane.  
  
> [!IMPORTANT]
>  Nie ma żadnej gwarancji, każde wywołanie <xref:System.Threading.EventWaitHandle.Set%2A> metoda zwolni wątku. Jeśli dwa wywołania są zbyt blisko siebie, tak, aby drugie wywołanie występuje przed wydano wątku, tylko jeden wątek jest zwalniana. Jest tak, jakby nie nastąpiły drugie wywołanie. Ponadto jeśli <xref:System.Threading.EventWaitHandle.Set%2A> jest wywoływana, gdy nie istnieją wątki oczekujące i <xref:System.Threading.AutoResetEvent> już jest sygnalizowane, wywołanie nie ma wpływu.  
  
 Można kontrolować stan początkowy `AutoResetEvent` , przekazując wartość typu Boolean do konstruktora: `true` Jeśli stan początkowy jest sygnalizowane i `false` inaczej.  
  
 `AutoResetEvent` można również za pomocą `static` <xref:System.Threading.WaitHandle.WaitAll%2A> i <xref:System.Threading.WaitHandle.WaitAny%2A> metody.  
  
 Aby uzyskać więcej informacji na temat mechanizmów synchronizacji wątków, zobacz [autoresetevent —](~/docs/standard/threading/autoresetevent.md) w dokumentacji koncepcyjnego.  
  
 Począwszy od programu .NET Framework w wersji 2.0, <xref:System.Threading.AutoResetEvent> pochodzi z nowym <xref:System.Threading.EventWaitHandle> klasy. <xref:System.Threading.AutoResetEvent> Jest funkcjonalnym odpowiednikiem <xref:System.Threading.EventWaitHandle> utworzone za pomocą <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  W odróżnieniu od <xref:System.Threading.AutoResetEvent> klasy <xref:System.Threading.EventWaitHandle> klasy zapewnia dostęp do systemu o nazwie zdarzenia synchronizacji.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Threading.AutoResetEvent> zwolnić jednemu wątkowi w czasie, przez wywołanie metody <xref:System.Threading.EventWaitHandle.Set%2A> — metoda (w klasie bazowej) każdego czasu użytkownik naciśnie **Enter** klucza. W przykładzie uruchomiono trzech wątków, które czekać na <xref:System.Threading.AutoResetEvent> utworzony w sygnalizowanego stanu. Pierwszy wątek jest zwalniany natychmiast, ponieważ <xref:System.Threading.AutoResetEvent> jest już sygnalizowanego stanu. Spowoduje to zresetowanie <xref:System.Threading.AutoResetEvent> do stanu zasygnalizowane tak, aby zablokować kolejnych wątków. Zablokowane wątki nie są zwalniane, dopóki użytkownik zwolni ich jednego naraz, naciskając klawisz **Enter** klucza.  
  
 Po wątki są wydawane z pierwszego <xref:System.Threading.AutoResetEvent>, będą oni czekać na innym <xref:System.Threading.AutoResetEvent> utworzony w stanie zasygnalizowane. Blokuj wszystkie trzy wątki, więc <xref:System.Threading.EventWaitHandle.Set%2A> metoda musi zostać wywołana trzykrotnie zwolnić je wszystkie.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ta klasa jest bezpieczny dla wątków.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Zarządzana wątkowość</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <see langword="true" /> Aby ustawić stan początkowy sygnałowego; <see langword="false" /> ustawić stan początkowy zasygnalizowane.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.AutoResetEvent" /> klasie z atrybutem wartość logiczną wskazującą, czy należy ustawić stan początkowy sygnalizowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Threading.AutoResetEvent> zsynchronizować działania dwoma wątkami. Pierwszym wątkiem, czyli wątku aplikacji wykonuje `Main`. Zapisuje wartości do chronionego zasobu, który jest `static` (`Shared` w języku Visual Basic) pole o nazwie `number`. Drugi wątek wykonuje statyczną `ThreadProc` metody, która odczytuje wartości napisane przez `Main`.  
  
 `ThreadProc` Metoda czeka na <xref:System.Threading.AutoResetEvent>. Gdy `Main` wywołania <xref:System.Threading.EventWaitHandle.Set%2A> metody <xref:System.Threading.AutoResetEvent>, `ThreadProc` metoda odczytuje jedną wartość. <xref:System.Threading.AutoResetEvent> Resetuje natychmiast, więc `ThreadProc` metoda oczekuje się ponownie.  
  
 Logika program gwarantuje, że `ThreadProc` metoda nigdy nie odczyta taką samą wartość dwa razy. Go nie gwarantuje, że `ThreadProc` metoda odczyta każda wartość napisane przez `Main`. Tej gwarancji wymagałoby sekundy <xref:System.Threading.AutoResetEvent> blokady.  
  
 Po zakończeniu każdej operacji zapisu `Main` daje przez wywołanie metody <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> metody, aby zapewnić możliwość wykonania drugiego wątku. W przeciwnym razie na komputerze jednoprocesorowym `Main` napisać wiele wartości między dowolnymi dwoma operacji odczytu.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Zarządzana wątkowość</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia stan zdarzenia w celu nonsignaled, co powoduje, że wątki w celu blokowania.</summary>
        <returns>
          <see langword="true" /> Jeśli operacja się powiedzie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia stan zdarzenia, które ma być zasygnalizowany, co pozwala na większości jeden wątek oczekiwania aby kontynuować.</summary>
        <returns>
          <see langword="true" /> Jeśli operacja się powiedzie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Metoda Set zwalnia jednego wątku. Jeśli nie istnieją wątki oczekujące, dojście oczekiwania pozostaje sygnałowego, aż wątek próby poczekaj na nim lub dopóki nie zostanie wywołana jego metoda resetowania.

> [!IMPORTANT]
> Nie ma żadnej gwarancji, że każde wywołanie metody Set zwolni wątku. Jeśli dwa wywołania są zbyt blisko siebie, tak, aby drugie wywołanie występuje przed wydano wątku, tylko jeden wątek jest zwalniana — tak, jakby nie nastąpiły drugie wywołanie. Ponadto jeśli metoda zestaw jest wywoływana, gdy nie istnieją wątki oczekujące i <xref:System.Threading.AutoResetEvent> już jest sygnalizowane, wywołanie nie ma wpływu.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>