<Type Name="ThreadStart" FullName="System.Threading.ThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="757faaeb61202c2dfb918b6181d28b880bc48464" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69143784" /></Metadata><TypeSignature Language="C#" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ThreadStart()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ThreadStart();" />
  <TypeSignature Language="F#" Value="type ThreadStart = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>Reprezentuje metodę, która jest <see cref="T:System.Threading.Thread" />wykonywana w.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu wątku zarządzanego Metoda wykonywana na wątku jest reprezentowana przez <xref:System.Threading.ThreadStart> delegata <xref:System.Threading.ParameterizedThreadStart> lub delegata <xref:System.Threading.Thread.%23ctor%2A> , który jest przesyłany do konstruktora. Wątek nie rozpoczyna wykonywania do momentu <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> wywołania metody. Wykonywanie rozpoczyna się w pierwszym wierszu metody reprezentowanej przez <xref:System.Threading.ThreadStart> element lub. <xref:System.Threading.ParameterizedThreadStart>  
  
> [!NOTE]
>  Visual Basic i C# użytkownicy mogą pominąć <xref:System.Threading.ThreadStart> <xref:System.Threading.ParameterizedThreadStart> Konstruktor delegata podczas tworzenia wątku. W Visual Basic Użyj `AddressOf` operatora podczas przekazywania metody <xref:System.Threading.Thread.%23ctor%2A> do `Dim t As New Thread(AddressOf ThreadProc)`konstruktora; na przykład. W C#programie wystarczy określić nazwę procedury wątku. Kompilator wybiera prawidłowy Konstruktor delegatów.  
>  
>  Dla C++, rozpoczynając od .NET Framework 2,0, tworzenie <xref:System.Threading.ThreadStart> delegata dla metody statycznej wymaga tylko jednego parametru: adres metody wywołania zwrotnego, kwalifikowana przez nazwę klasy. We wcześniejszych wersjach są wymagane dwa parametry podczas tworzenia delegata dla metody statycznej: zero (null) i adres metody. Dla metody wystąpienia wszystkie wersje wymagają dwóch parametrów: zmiennej wystąpienia i adresu metody.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje składnię tworzenia i używania <xref:System.Threading.ThreadStart> delegata z metodą wystąpienia i metodą statyczną.  
  
 Aby zapoznać się z innym prostym przykładem, <xref:System.Threading.ThreadStart> który pokazuje, jak <xref:System.Threading.Thread.Start?displayProperty=nameWithType> utworzyć delegata, zobacz Przeciążenie metody. Aby uzyskać więcej informacji na temat tworzenia wątków, zobacz [Tworzenie wątków i przekazywanie danych w czasie rozpoczęcia](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  
  
 [!code-cpp[System.Threading.ThreadStart2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadStart2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadStart2/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadStart2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadStart2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ParameterizedThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">Tworzenie wątków i przekazywanie danych w czasie rozpoczęcia</related>
  </Docs>
</Type>
