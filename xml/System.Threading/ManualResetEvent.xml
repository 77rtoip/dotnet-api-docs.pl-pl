<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef7963b99d115f4a7f54e535f80eb38d73ee365" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56394155" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="268ff-101">Reprezentuje zdarzenie synchronizacji wątków, gdy sygnalizowane, można ręcznie zresetować.</span><span class="sxs-lookup"><span data-stu-id="268ff-101">Represents a thread synchronization event that, when signaled, must be reset manually.</span></span> <span data-ttu-id="268ff-102">Klasa ta nie może być dziedziczona.</span><span class="sxs-lookup"><span data-stu-id="268ff-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="268ff-103">Możesz użyć `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, i <xref:System.Threading.EventWaitHandle> interakcji wątku (lub sygnalizowanie wątku).</span><span class="sxs-lookup"><span data-stu-id="268ff-103">You use `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="268ff-104">Aby uzyskać więcej informacji, zobacz [wątku, i interakcji sygnalizowanie](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) części [Przegląd elementów podstawowych synchronizacji](~/docs/standard/threading/overview-of-synchronization-primitives.md) artykułu.</span><span class="sxs-lookup"><span data-stu-id="268ff-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  

 <span data-ttu-id="268ff-105">Kiedy wątek rozpoczyna się działanie, które należy wykonać przed innymi kontynuować wątków, wywołuje [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) umieścić `ManualResetEvent` w stanie zasygnalizowane.</span><span class="sxs-lookup"><span data-stu-id="268ff-105">When a thread begins an activity that must complete before other threads proceed, it calls [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="268ff-106">Ten wątek może być uważane za kontrolowanie `ManualResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="268ff-106">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="268ff-107">Wątki tego wywołania [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) bloku, oczekuje na sygnał.</span><span class="sxs-lookup"><span data-stu-id="268ff-107">Threads that call [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) block, awaiting the signal.</span></span> <span data-ttu-id="268ff-108">Po ukończeniu działania przez kontrolowanie wątku wywoływanych przez nią [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) do sygnalizowania, że przejść wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="268ff-108">When the controlling thread completes the activity, it calls [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="268ff-109">Wszystkie wątki oczekiwania są zwalniane.</span><span class="sxs-lookup"><span data-stu-id="268ff-109">All waiting threads are released.</span></span>  

 <span data-ttu-id="268ff-110">Gdy ma zostać sygnalizowane, `ManualResetEvent` pozostaje zasygnalizowany, dopóki nie zostanie ręcznie zresetowane przez wywołanie metody <xref:System.Threading.EventWaitHandle.Reset> metody.</span><span class="sxs-lookup"><span data-stu-id="268ff-110">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset by calling the <xref:System.Threading.EventWaitHandle.Reset> method.</span></span> <span data-ttu-id="268ff-111">Oznacza to, że wywołania <xref:System.Threading.WaitHandle.WaitOne%2A> natychmiast zwróci.</span><span class="sxs-lookup"><span data-stu-id="268ff-111">That is, calls to <xref:System.Threading.WaitHandle.WaitOne%2A> return immediately.</span></span>  

 <span data-ttu-id="268ff-112">Można kontrolować stan początkowy `ManualResetEvent` , przekazując wartość typu Boolean do konstruktora: `true` Jeśli stan początkowy jest sygnalizowane, i `false` inaczej.</span><span class="sxs-lookup"><span data-stu-id="268ff-112">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled, and `false` otherwise.</span></span>  
 
 <span data-ttu-id="268ff-113">`ManualResetEvent` można również za pomocą `static` <xref:System.Threading.WaitHandle.WaitAll%2A> i <xref:System.Threading.WaitHandle.WaitAny%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="268ff-113">`ManualResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="268ff-114">Począwszy od programu .NET Framework w wersji 2.0, <xref:System.Threading.ManualResetEvent> pochodzi od klasy <xref:System.Threading.EventWaitHandle> klasy.</span><span class="sxs-lookup"><span data-stu-id="268ff-114">Beginning with the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="268ff-115">A <xref:System.Threading.ManualResetEvent> jest funkcjonalnym odpowiednikiem <xref:System.Threading.EventWaitHandle> utworzone za pomocą <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="268ff-115">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="268ff-116">W odróżnieniu od <xref:System.Threading.ManualResetEvent> klasy <xref:System.Threading.EventWaitHandle> klasy zapewnia dostęp do systemu o nazwie zdarzenia synchronizacji.</span><span class="sxs-lookup"><span data-stu-id="268ff-116">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  

 <span data-ttu-id="268ff-117">Począwszy od programu .NET Framework w wersji 4.0 <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> klasy jest uproszczone alternatywą do <xref:System.Threading.ManualResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="268ff-117">Beginning with the .NET Framework version 4.0, the <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> class is a lightweight alternative to <xref:System.Threading.ManualResetEvent>.</span></span>    
   
   
  
## Examples  
 <span data-ttu-id="268ff-118">Poniższy przykład pokazuje, jak <xref:System.Threading.ManualResetEvent> działa.</span><span class="sxs-lookup"><span data-stu-id="268ff-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="268ff-119">Przykład rozpoczyna się od <xref:System.Threading.ManualResetEvent> w stanie unsignaled (czyli `false` jest przekazywana do konstruktora).</span><span class="sxs-lookup"><span data-stu-id="268ff-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="268ff-120">Przykład tworzy trzy wątki, każdego z bloków, które w <xref:System.Threading.ManualResetEvent> przez wywołanie jego <xref:System.Threading.WaitHandle.WaitOne%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="268ff-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="268ff-121">Gdy użytkownik naciśnie **Enter** klucza, przykład wywołuje <xref:System.Threading.EventWaitHandle.Set%2A> metody, która uwalnia wszystkich trzech wątków.</span><span class="sxs-lookup"><span data-stu-id="268ff-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="268ff-122">Natomiast to zachowanie <xref:System.Threading.AutoResetEvent> klasy, która uwalnia jeden wątków w czasie, resetowanie automatycznie po każdym wydaniu.</span><span class="sxs-lookup"><span data-stu-id="268ff-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="268ff-123">Naciśnięcie klawisza **Enter** klucz ponownie pokazuje, że <xref:System.Threading.ManualResetEvent> pozostaje w stanie zasygnalizowany, aż do jego <xref:System.Threading.EventWaitHandle.Reset%2A> metoda jest wywoływana: W przykładzie uruchomiono dwóch wątków.</span><span class="sxs-lookup"><span data-stu-id="268ff-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="268ff-124">Te wątki nie blokują przy wywoływaniu <xref:System.Threading.WaitHandle.WaitOne%2A> metody, ale zamiast tego zostało ukończone.</span><span class="sxs-lookup"><span data-stu-id="268ff-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="268ff-125">Naciśnięcie klawisza **Enter** klucz ponownie powoduje przykładu tak, aby wywołać <xref:System.Threading.EventWaitHandle.Reset%2A> metody i uruchomić jeden więcej wątku, która zablokuje wywoływanych przez nią <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="268ff-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="268ff-126">Naciśnięcie klawisza **Enter** klucza, jeden raz ostatni wywołania <xref:System.Threading.EventWaitHandle.Set%2A> zwolnić ostatni wątek, a program kończy się.</span><span class="sxs-lookup"><span data-stu-id="268ff-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="268ff-127">Ta klasa jest bezpieczny dla wątków.</span><span class="sxs-lookup"><span data-stu-id="268ff-127">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="268ff-128">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="268ff-128">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="268ff-129">Przegląd elementów podstawowych synchronizacji</span><span class="sxs-lookup"><span data-stu-id="268ff-129">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="268ff-130"><see langword="true" /> Aby ustawić stan początkowy sygnalizowane; <see langword="false" /> ustawić stan początkowy nonsignaled.</span><span class="sxs-lookup"><span data-stu-id="268ff-130"><see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="268ff-131">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ManualResetEvent" /> klasie z atrybutem wartość logiczną wskazującą, czy należy ustawić stan początkowy sygnalizowanego.</span><span class="sxs-lookup"><span data-stu-id="268ff-131">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="268ff-132">Jeśli stan początkowy <xref:System.Threading.ManualResetEvent> jest sygnalizowane (to znaczy, jeśli jest ono tworzone przez przekazanie `true` dla `initialState`), wątki, które czekać na <xref:System.Threading.ManualResetEvent> nie blokują.</span><span class="sxs-lookup"><span data-stu-id="268ff-132">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="268ff-133">W przypadku nonsignaled początkowy stan wątków block do momentu <xref:System.Threading.EventWaitHandle.Set%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="268ff-133">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="268ff-134">Zarządzana wątkowość</span><span class="sxs-lookup"><span data-stu-id="268ff-134">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="268ff-135">Przegląd elementów podstawowych synchronizacji</span><span class="sxs-lookup"><span data-stu-id="268ff-135">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="268ff-136">Ustawia stan zdarzenia w celu nonsignaled, co powoduje, że wątki w celu blokowania.</span><span class="sxs-lookup"><span data-stu-id="268ff-136">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="268ff-137"><see langword="true" /> Jeśli operacja się powiedzie; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="268ff-137"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="268ff-138">Ustawia stan zdarzenia, które ma być zasygnalizowany, co pozwala jeden lub więcej wątków oczekujących kontynuować.</span><span class="sxs-lookup"><span data-stu-id="268ff-138">Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</span></span></summary>
        <returns><span data-ttu-id="268ff-139"><see langword="true" /> Jeśli operacja się powiedzie; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="268ff-139"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="268ff-140">Wywołanie metody Set pozostawia dojście oczekiwania w zasygnalizowany stan do momentu <xref:System.Threading.ManualResetEvent.Reset> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="268ff-140">Calling the Set method leaves the wait handle in a signaled state until the <xref:System.Threading.ManualResetEvent.Reset> method is called.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>