<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="50280627a764fdaf9fec13f62e5e70616ce14337" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58712665" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zdarzenie synchronizacji wątków, gdy sygnalizowane, można ręcznie zresetować. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Możesz użyć `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, i <xref:System.Threading.EventWaitHandle> interakcji wątku (lub sygnalizowanie wątku). Aby uzyskać więcej informacji, zobacz [wątku, i interakcji sygnalizowanie](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) części [Przegląd elementów podstawowych synchronizacji](~/docs/standard/threading/overview-of-synchronization-primitives.md) artykułu.  

 Kiedy wątek rozpoczyna się działanie, które należy wykonać przed innymi kontynuować wątków, wywołuje [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) umieścić `ManualResetEvent` w stanie zasygnalizowane. Ten wątek może być uważane za kontrolowanie `ManualResetEvent`. Wątki tego wywołania [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) bloku, oczekuje na sygnał. Po ukończeniu działania przez kontrolowanie wątku wywoływanych przez nią [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) do sygnalizowania, że przejść wątków oczekujących. Wszystkie wątki oczekiwania są zwalniane.  

 Gdy ma zostać sygnalizowane, `ManualResetEvent` pozostaje zasygnalizowany, dopóki nie zostanie ręcznie zresetowane przez wywołanie metody <xref:System.Threading.EventWaitHandle.Reset> metody. Oznacza to, że wywołania <xref:System.Threading.WaitHandle.WaitOne%2A> natychmiast zwróci.  

 Można kontrolować stan początkowy `ManualResetEvent` , przekazując wartość typu Boolean do konstruktora: `true` Jeśli stan początkowy jest sygnalizowane, i `false` inaczej.  
 
 `ManualResetEvent` można również za pomocą `static` <xref:System.Threading.WaitHandle.WaitAll%2A> i <xref:System.Threading.WaitHandle.WaitAny%2A> metody.  
  
 Począwszy od programu .NET Framework w wersji 2.0, <xref:System.Threading.ManualResetEvent> pochodzi od klasy <xref:System.Threading.EventWaitHandle> klasy. A <xref:System.Threading.ManualResetEvent> jest funkcjonalnym odpowiednikiem <xref:System.Threading.EventWaitHandle> utworzone za pomocą <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
> W odróżnieniu od <xref:System.Threading.ManualResetEvent> klasy <xref:System.Threading.EventWaitHandle> klasy zapewnia dostęp do systemu o nazwie zdarzenia synchronizacji.  

 Począwszy od programu .NET Framework w wersji 4.0 <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> klasy jest uproszczone alternatywą do <xref:System.Threading.ManualResetEvent>.    
   
   
  
## Examples  
 Poniższy przykład pokazuje, jak <xref:System.Threading.ManualResetEvent> działa. Przykład rozpoczyna się od <xref:System.Threading.ManualResetEvent> w stanie unsignaled (czyli `false` jest przekazywana do konstruktora). Przykład tworzy trzy wątki, każdego z bloków, które w <xref:System.Threading.ManualResetEvent> przez wywołanie jego <xref:System.Threading.WaitHandle.WaitOne%2A> metody. Gdy użytkownik naciśnie **Enter** klucza, przykład wywołuje <xref:System.Threading.EventWaitHandle.Set%2A> metody, która uwalnia wszystkich trzech wątków. Natomiast to zachowanie <xref:System.Threading.AutoResetEvent> klasy, która uwalnia jeden wątków w czasie, resetowanie automatycznie po każdym wydaniu.  
  
 Naciśnięcie klawisza **Enter** klucz ponownie pokazuje, że <xref:System.Threading.ManualResetEvent> pozostaje w stanie zasygnalizowany, aż do jego <xref:System.Threading.EventWaitHandle.Reset%2A> metoda jest wywoływana: W przykładzie uruchomiono dwóch wątków. Te wątki nie blokują przy wywoływaniu <xref:System.Threading.WaitHandle.WaitOne%2A> metody, ale zamiast tego zostało ukończone.  
  
 Naciśnięcie klawisza **Enter** klucz ponownie powoduje przykładu tak, aby wywołać <xref:System.Threading.EventWaitHandle.Reset%2A> metody i uruchomić jeden więcej wątku, która zablokuje wywoływanych przez nią <xref:System.Threading.WaitHandle.WaitOne%2A>. Naciśnięcie klawisza **Enter** klucza, jeden raz ostatni wywołania <xref:System.Threading.EventWaitHandle.Set%2A> zwolnić ostatni wątek, a program kończy się.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ta klasa jest bezpieczny dla wątków.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Zarządzana wątkowość</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Przegląd elementów podstawowych synchronizacji</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" /> Aby ustawić stan początkowy sygnalizowane; <see langword="false" /> ustawić stan początkowy nonsignaled.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ManualResetEvent" /> klasie z atrybutem wartość logiczną wskazującą, czy należy ustawić stan początkowy sygnalizowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli stan początkowy <xref:System.Threading.ManualResetEvent> jest sygnalizowane (to znaczy, jeśli jest ono tworzone przez przekazanie `true` dla `initialState`), wątki, które czekać na <xref:System.Threading.ManualResetEvent> nie blokują. W przypadku nonsignaled początkowy stan wątków block do momentu <xref:System.Threading.EventWaitHandle.Set%2A> metoda jest wywoływana.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Zarządzana wątkowość</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Przegląd elementów podstawowych synchronizacji</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia stan zdarzenia w celu nonsignaled, co powoduje, że wątki w celu blokowania.</summary>
        <returns><see langword="true" /> Jeśli operacja się powiedzie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia stan zdarzenia, które ma być zasygnalizowany, co pozwala jeden lub więcej wątków oczekujących kontynuować.</summary>
        <returns><see langword="true" /> Jeśli operacja się powiedzie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Wywołanie metody Set pozostawia dojście oczekiwania w zasygnalizowany stan do momentu <xref:System.Threading.ManualResetEvent.Reset> metoda jest wywoływana.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>