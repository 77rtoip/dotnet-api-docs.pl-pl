<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c0a17f12cc4e28122f27008de4d7c78591b617c4" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37608968" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5d3d6-101">Powiadamia o jeden lub więcej wątków oczekiwania, które wystąpiło zdarzenie.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5d3d6-101">Notifies one or more waiting threads that an event has occurred.</span>
      </span>
      <span data-ttu-id="5d3d6-102">Klasa ta nie może być dziedziczona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5d3d6-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d3d6-103">W .NET Framework w wersji 2.0 <xref:System.Threading.ManualResetEvent> pochodzi z nowym <xref:System.Threading.EventWaitHandle> klasy.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="5d3d6-104">A <xref:System.Threading.ManualResetEvent> jest funkcjonalnym odpowiednikiem <xref:System.Threading.EventWaitHandle> utworzone za pomocą <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5d3d6-105">W odróżnieniu od <xref:System.Threading.ManualResetEvent> klasy <xref:System.Threading.EventWaitHandle> klasy zapewnia dostęp do systemu o nazwie zdarzenia synchronizacji.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="5d3d6-106"><xref:System.Threading.ManualResetEvent> Umożliwia wątków do komunikowania się ze sobą za sygnalizowanie.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="5d3d6-107">Zazwyczaj ta komunikacja dotyczy zadań, w której jeden wątek musi zakończyć się przed kontynuacją inne wątki.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="5d3d6-108">Kiedy wątek rozpoczyna się działanie, które należy wykonać przed innymi kontynuować wątków, wywołuje <xref:System.Threading.EventWaitHandle.Reset%2A> umieścić `ManualResetEvent` w stanie zasygnalizowane.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="5d3d6-109">Ten wątek może być uważane za kontrolowanie `ManualResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="5d3d6-110">Wątki tego wywołania <xref:System.Threading.WaitHandle.WaitOne%2A> na `ManualResetEvent` zablokuje oczekuje na sygnał.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="5d3d6-111">Po ukończeniu działania przez kontrolowanie wątku wywoływanych przez nią <xref:System.Threading.EventWaitHandle.Set%2A> do sygnalizowania, że przejść wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="5d3d6-112">Wszystkie wątki oczekiwania są zwalniane.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="5d3d6-113">Gdy ma zostać sygnalizowane, `ManualResetEvent` pozostaje zasygnalizowany, dopóki zostanie zresetowane ręcznie.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="5d3d6-114">Oznacza to, że wywołania `WaitOne` natychmiast zwróci.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="5d3d6-115">Można kontrolować stan początkowy `ManualResetEvent` , przekazując wartość typu Boolean do konstruktora, `true` Jeśli stan początkowy jest sygnalizowane i `false` inaczej.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="5d3d6-116">`ManualResetEvent` można również za pomocą `static` <xref:System.Threading.WaitHandle.WaitAll%2A> i <xref:System.Threading.WaitHandle.WaitAny%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="5d3d6-117">Aby uzyskać więcej informacji na temat mechanizmów synchronizacji wątków, zobacz [ManualResetEvent i ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) w dokumentacji koncepcyjnego.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5d3d6-118">Poniższy przykład pokazuje, jak <xref:System.Threading.ManualResetEvent> działa.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="5d3d6-119">Przykład rozpoczyna się od <xref:System.Threading.ManualResetEvent> w stanie unsignaled (czyli `false` jest przekazywana do konstruktora).</span><span class="sxs-lookup"><span data-stu-id="5d3d6-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="5d3d6-120">Przykład tworzy trzy wątki, każdego z bloków, które w <xref:System.Threading.ManualResetEvent> przez wywołanie jego <xref:System.Threading.WaitHandle.WaitOne%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="5d3d6-121">Gdy użytkownik naciśnie **Enter** klucza, przykład wywołuje <xref:System.Threading.EventWaitHandle.Set%2A> metody, która uwalnia wszystkich trzech wątków.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="5d3d6-122">Natomiast to zachowanie <xref:System.Threading.AutoResetEvent> klasy, która uwalnia jeden wątków w czasie, resetowanie automatycznie po każdym wydaniu.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="5d3d6-123">Naciśnięcie klawisza **Enter** klucz ponownie pokazuje, że <xref:System.Threading.ManualResetEvent> pozostaje w stanie zasygnalizowany, aż do jego <xref:System.Threading.EventWaitHandle.Reset%2A> metoda jest wywoływana: przykład rozpoczyna się dwóch wątków.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="5d3d6-124">Te wątki nie blokują przy wywoływaniu <xref:System.Threading.WaitHandle.WaitOne%2A> metody, ale zamiast tego zostało ukończone.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="5d3d6-125">Naciśnięcie klawisza **Enter** klucz ponownie powoduje przykładu tak, aby wywołać <xref:System.Threading.EventWaitHandle.Reset%2A> metody i uruchomić jeden więcej wątku, która zablokuje wywoływanych przez nią <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="5d3d6-126">Naciśnięcie klawisza **Enter** klucza, jeden raz ostatni wywołania <xref:System.Threading.EventWaitHandle.Set%2A> zwolnić ostatni wątek, a program kończy się.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="5d3d6-127">Ta klasa jest bezpieczny dla wątków.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5d3d6-127">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="5d3d6-128">
            <see langword="true" /> Aby ustawić stan początkowy sygnalizowane; <see langword="false" /> ustawić stan początkowy nonsignaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5d3d6-128">
              <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5d3d6-129">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ManualResetEvent" /> klasie z atrybutem wartość logiczną wskazującą, czy należy ustawić stan początkowy sygnalizowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5d3d6-129">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d3d6-130">Jeśli stan początkowy <xref:System.Threading.ManualResetEvent> jest sygnalizowane (to znaczy, jeśli jest ono tworzone przez przekazanie `true` dla `initialState`), wątki, które czekać na <xref:System.Threading.ManualResetEvent> nie blokują.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-130">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="5d3d6-131">W przypadku nonsignaled początkowy stan wątków block do momentu <xref:System.Threading.EventWaitHandle.Set%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="5d3d6-131">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>