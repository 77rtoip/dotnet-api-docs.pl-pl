<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fc38683df38d8ccd043f3a8b1a312aae448c5e2f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69098891" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zdarzenie synchronizacji wątku, które po zasygnalizowaniu należy zresetować ręcznie. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 `ManualResetEvent`Używasz, <xref:System.Threading.AutoResetEvent>i dointerakcjiwątku(lubsygnalizacjiwątku).<xref:System.Threading.EventWaitHandle> Aby uzyskać więcej informacji, zobacz [interakcja wątku lub](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) sekcja Sygnalizowanie w artykule [Omówienie elementów pierwotnych synchronizacji](~/docs/standard/threading/overview-of-synchronization-primitives.md) .  

 Gdy wątek rozpocznie działanie, które musi zostać zakończone przed kontynuowaniem innych wątków, wywoła [ManualResetEvent. Reset](xref:System.Threading.EventWaitHandle.Reset%2A) , `ManualResetEvent` aby umieścić w stanie niesygnalizującym. Ten wątek może być uważany za kontrolujący `ManualResetEvent`. Wątki, które wywołują blok [ManualResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) , czekające na sygnał. Gdy wątek kontrolny kończy działanie, wywołuje [ManualResetEvent. Set](xref:System.Threading.EventWaitHandle.Set%2A) , aby sygnalizować, że oczekujące wątki mogą działać. Wszystkie oczekujące wątki są wydane.  

 Po zasygnalizowaniu `ManualResetEvent` zostanie on zasygnalizowani do momentu zresetowania go ręcznie przez <xref:System.Threading.EventWaitHandle.Reset> wywołanie metody. Oznacza to, że wywołania <xref:System.Threading.WaitHandle.WaitOne%2A> są zwracane natychmiast.  

 Możesz sterować początkowym stanem a `ManualResetEvent` przez przekazanie wartości logicznej do konstruktora: `true` Jeśli początkowy stan jest sygnalizowane i `false` w inny sposób.  
 
 `ManualResetEvent`można go również używać z `static` <xref:System.Threading.WaitHandle.WaitAll%2A> metodami <xref:System.Threading.WaitHandle.WaitAny%2A> i.  
  
 <xref:System.Threading.ManualResetEvent> Począwszy<xref:System.Threading.EventWaitHandle> od .NET Framework w wersji 2,0, pochodzi od klasy. A <xref:System.Threading.ManualResetEvent> jest funkcjonalnie równoważne <xref:System.Threading.EventWaitHandle> z utworzonym za <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>pomocą.  
  
> [!NOTE]
> <xref:System.Threading.ManualResetEvent> W<xref:System.Threading.EventWaitHandle> przeciwieństwie do klasy, klasa zapewnia dostęp do nazwanych zdarzeń synchronizacji systemu.  

 Począwszy od .NET Framework w wersji 4,0, <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> Klasa jest lekkim alternatywą dla. <xref:System.Threading.ManualResetEvent>    
   
   
  
## Examples  
 Poniższy przykład ilustruje sposób <xref:System.Threading.ManualResetEvent> działania programu. Przykład rozpoczyna się od znaku <xref:System.Threading.ManualResetEvent> w stanie niesygnalizującym ( `false` czyli jest przesyłany do konstruktora). Przykład tworzy trzy wątki, z których każdy jest <xref:System.Threading.ManualResetEvent> blokowany przez <xref:System.Threading.WaitHandle.WaitOne%2A> wywołanie metody. Gdy użytkownik naciśnie klawisz **Enter** , przykład wywołuje <xref:System.Threading.EventWaitHandle.Set%2A> metodę, która zwalnia wszystkie trzy wątki. Jest to kontrast z zachowaniem <xref:System.Threading.AutoResetEvent> klasy, która zwalnia wątki pojedynczo, resetuje się automatycznie po każdej wersji.  
  
 Ponowne naciśnięcie klawisza **Enter** pokazuje, <xref:System.Threading.ManualResetEvent> że pozostało w stanie sygnalizowania <xref:System.Threading.EventWaitHandle.Reset%2A> do momentu wywołania jego metody: Przykład uruchamia dwa kolejne wątki. Te wątki nie blokują, gdy wywołujący <xref:System.Threading.WaitHandle.WaitOne%2A> metodę, ale zamiast tego uruchamiają się do ukończenia.  
  
 Naciśnięcie klawisza **Enter** spowoduje ponowne wywołanie <xref:System.Threading.EventWaitHandle.Reset%2A> metody i uruchomienie jednego wątku, który blokuje czas wywoływania. <xref:System.Threading.WaitHandle.WaitOne%2A> Naciśnięcie klawisza **Enter** po raz ostatni <xref:System.Threading.EventWaitHandle.Set%2A> wywołuje wywołania ostatniego wątku, a program zostaje zakończony.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ta klasa jest bezpieczna wątkowo.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Zarządzana wątkowość</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Przegląd elementów podstawowych synchronizacji</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" />Aby ustawić stan początkowy na zasygnalizowanie; <see langword="false" /> aby ustawić stan początkowy na Niesygnalizowane.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Threading.ManualResetEvent" /> klasy za pomocą wartości logicznej wskazującej, czy ustawić początkowy stan do sygnalizowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli początkowy stan <xref:System.Threading.ManualResetEvent> jest zasygnalizowaniem (oznacza to, że jeśli jest tworzony `initialState`przez przekazanie `true` przez), wątki, które oczekują na <xref:System.Threading.ManualResetEvent> nie bloku. Jeśli stan początkowy jest niesygnalizujący, wątki blokują do momentu <xref:System.Threading.EventWaitHandle.Set%2A> wywołania metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Zarządzana wątkowość</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Przegląd elementów podstawowych synchronizacji</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia stan zdarzenia na Niesygnalizowane, co powoduje zablokowanie wątków.</summary>
        <returns><see langword="true" />Jeśli operacja się powiedzie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia stan zdarzenia, które ma być sygnalizowane przez co najmniej jeden oczekujący wątek.</summary>
        <returns><see langword="true" />Jeśli operacja się powiedzie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Wywołanie metody Set powoduje pozostawienie uchwytu oczekiwania w stanie zasygnalizowania do <xref:System.Threading.ManualResetEvent.Reset> momentu wywołania metody.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
