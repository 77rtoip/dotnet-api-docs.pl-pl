<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a3111b9d3890e99871797d80fe33a669a253dba6" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39851178" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <TypeSignature Language="F#" Value="type ThreadPool = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ae770-101">Zawiera pulę wątków, które może służyć do wykonywania zadań, Publikuj elementy robocze, Przetwarzanie asynchroniczne We/Wy, Oczekiwanie w imieniu innych wątków i przetworzyć czasomierzy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ae770-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-102">Wiele aplikacji Utwórz wątki, które możesz wydać dużym stopniem czas w stanie uśpiony, oczekiwanie na zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="ae770-102">Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</span></span> <span data-ttu-id="ae770-103">Inne wątki mogą przejść w stan uśpiony tylko do wznowione, okresowo sondować zmiany lub zaktualizować informacje o stanie.</span><span class="sxs-lookup"><span data-stu-id="ae770-103">Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</span></span> <span data-ttu-id="ae770-104">Pula wątków umożliwia wątków bardziej wydajnie, zapewniając aplikację z pulą wątków roboczych, które są zarządzane przez system.</span><span class="sxs-lookup"><span data-stu-id="ae770-104">The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</span></span> <span data-ttu-id="ae770-105">Następujące operacje, które używają wątków z puli wątków:</span><span class="sxs-lookup"><span data-stu-id="ae770-105">Examples of operations that use thread pool threads include the following:</span></span>  
  
-   <span data-ttu-id="ae770-106">Po utworzeniu <xref:System.Threading.Tasks.Task> lub <xref:System.Threading.Tasks.Task%601> obiektu w celu wykonania niektórych zadań asynchronicznie, domyślnie zadanie jest zaplanowane do uruchomienia na wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-106">When you create a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</span></span>  
  
-   <span data-ttu-id="ae770-107">Czasomierze asynchronicznego użyć puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-107">Asynchronous timers use the thread pool.</span></span> <span data-ttu-id="ae770-108">Wątków z puli wątków wykonania wywołania zwrotne z <xref:System.Threading.Timer?displayProperty=nameWithType> klasy i wywoływanie zdarzeń od <xref:System.Timers.Timer?displayProperty=nameWithType> klasy.</span><span class="sxs-lookup"><span data-stu-id="ae770-108">Thread pool threads execute callbacks from the <xref:System.Threading.Timer?displayProperty=nameWithType> class and raise events from the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span>  
  
-   <span data-ttu-id="ae770-109">Korzystając z uchwytami oczekiwania zarejestrowanych wątku systemu monitoruje stan dojść oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-109">When you use registered wait handles, a system thread monitors the status of the wait handles.</span></span> <span data-ttu-id="ae770-110">Po ukończeniu operacji oczekiwania wątku roboczego z puli wątków wykonuje odpowiedniej funkcji wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="ae770-110">When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</span></span>  
  
-   <span data-ttu-id="ae770-111">Gdy wywołujesz <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metoda to metoda wykonanie na wątku z puli wątków w kolejce.</span><span class="sxs-lookup"><span data-stu-id="ae770-111">When you call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method to queue a method for execution on a thread pool thread.</span></span> <span data-ttu-id="ae770-112">Można to zrobić, przekazując metody <xref:System.Threading.WaitCallback> delegować.</span><span class="sxs-lookup"><span data-stu-id="ae770-112">You do this by passing the method a <xref:System.Threading.WaitCallback> delegate.</span></span>   <span data-ttu-id="ae770-113">Pełnomocnik ma podpis</span><span class="sxs-lookup"><span data-stu-id="ae770-113">The delegate has the signature</span></span>  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     <span data-ttu-id="ae770-114">gdzie `state` jest obiektem, który zawiera dane używane przez delegata.</span><span class="sxs-lookup"><span data-stu-id="ae770-114">where `state` is an object that contains data to be used by the delegate.</span></span> <span data-ttu-id="ae770-115">Rzeczywiste dane mogą być przekazywane do obiektu delegowanego, wywołując <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-115">The actual data can be passed to the delegate by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ae770-116">Wątki w puli wątków zarządzanych są wątków w tle.</span><span class="sxs-lookup"><span data-stu-id="ae770-116">The threads in the managed thread pool are background threads.</span></span> <span data-ttu-id="ae770-117">Oznacza to, że ich <xref:System.Threading.Thread.IsBackground%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="ae770-117">That is, their <xref:System.Threading.Thread.IsBackground%2A> properties are `true`.</span></span> <span data-ttu-id="ae770-118">Oznacza to, że <xref:System.Threading.ThreadPool> wątku nie zachowa aplikację działającą po zamknięciu wszystkie wątki pierwszego planu.</span><span class="sxs-lookup"><span data-stu-id="ae770-118">This means that a <xref:System.Threading.ThreadPool> thread will not keep an application running after all foreground threads have exited.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ae770-119">Gdy w puli wątków ponownie używa wątku, czyści dane w pamięci lokalnej wątku lub pola, które są oznaczone <xref:System.ThreadStaticAttribute> atrybutu.</span><span class="sxs-lookup"><span data-stu-id="ae770-119">When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="ae770-120">W związku z tym, gdy metoda sprawdza, czy lokalny magazyn wątków lub pola, które są oznaczone <xref:System.ThreadStaticAttribute> atrybutu wartości znajdzie może pozostać za pośrednictwem z wcześniejszego użycia wątek puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-120">Therefore, when a method examines thread local storage or fields that are marked with the <xref:System.ThreadStaticAttribute> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</span></span>  
  
 <span data-ttu-id="ae770-121">Możesz również dodawać do kolejki elementów roboczych, które nie są związane z operacji oczekiwania, do puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-121">You can also queue work items that are not related to a wait operation to the thread pool.</span></span> <span data-ttu-id="ae770-122">Aby zażądać obsługiwania przez wątek w puli wątków o element roboczy, należy wywołać <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-122">To request that a work item be handled by a thread in the thread pool, call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="ae770-123">Ta metoda przyjmuje jako parametr to odwołanie do metody lub delegata, która zostanie wywołana przez wątek wybrane z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-123">This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</span></span> <span data-ttu-id="ae770-124">Nie ma możliwości anulowania elementu roboczego po zostało umieszczone w kolejce.</span><span class="sxs-lookup"><span data-stu-id="ae770-124">There is no way to cancel a work item after it has been queued.</span></span>  
  
 <span data-ttu-id="ae770-125">Czasomierze kolejki czasomierza i oczekiwania zarejestrowanych operacji należy również użyć puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-125">Timer-queue timers and registered wait operations also use the thread pool.</span></span> <span data-ttu-id="ae770-126">Ich funkcji wywołania zwrotnego są umieszczane w kolejce puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-126">Their callback functions are queued to the thread pool.</span></span>  
  
 <span data-ttu-id="ae770-127">Istnieje jedna pula wątków na proces.</span><span class="sxs-lookup"><span data-stu-id="ae770-127">There is one thread pool per process.</span></span> <span data-ttu-id="ae770-128">Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], domyślny rozmiar puli wątków dla procesu zależy od wielu czynników, takich jak rozmiar wirtualnej przestrzeni adresowej.</span><span class="sxs-lookup"><span data-stu-id="ae770-128">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</span></span> <span data-ttu-id="ae770-129">Proces może wywołać <xref:System.Threading.ThreadPool.GetMaxThreads%2A> metodę pozwala ustalić liczbę wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-129">A process can call the <xref:System.Threading.ThreadPool.GetMaxThreads%2A> method to determine the number of threads.</span></span> <span data-ttu-id="ae770-130">Liczba wątków w puli wątków można zmienić za pomocą <xref:System.Threading.ThreadPool.SetMaxThreads%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-130">The number of threads in the thread pool can be changed by using the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> method.</span></span> <span data-ttu-id="ae770-131">Każdy wątek korzysta z domyślnego rozmiaru stosu i uruchamia wyzwalacz w priorytet domyślny.</span><span class="sxs-lookup"><span data-stu-id="ae770-131">Each thread uses the default stack size and runs at the default priority.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ae770-132">Kod niezarządzany, który jest hostem środowiska .NET Framework można zmienić rozmiar puli wątków za pomocą `CorSetMaxThreads` funkcji, zdefiniowane w pliku mscoree.h.</span><span class="sxs-lookup"><span data-stu-id="ae770-132">Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the `CorSetMaxThreads` function, defined in the mscoree.h file.</span></span>  
  
 <span data-ttu-id="ae770-133">Puli wątków zapewnia nowych wątków roboczych lub wątków do ukończenia operacji We/Wy na żądanie, dopóki nie zostanie osiągnięty co najmniej dla każdej kategorii.</span><span class="sxs-lookup"><span data-stu-id="ae770-133">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="ae770-134">Po osiągnięciu co najmniej puli wątków można utworzyć dodatkowe wątki w danej kategorii lub poczekaj na ukończenie niektóre zadania.</span><span class="sxs-lookup"><span data-stu-id="ae770-134">When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="ae770-135">Począwszy od [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], puli wątków tworzy i niszczy wątków roboczych w celu zoptymalizowania przepływności, która jest zdefiniowana jako liczbę zadań, kończące się na jednostkę czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-135">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="ae770-136">Zbyt mało wątków może nie mieć optymalnego wykorzystania dostępnych zasobów, natomiast zbyt wiele wątków może zwiększyć rywalizacji o zasoby.</span><span class="sxs-lookup"><span data-stu-id="ae770-136">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ae770-137">Gdy zapotrzebowanie jest niskie, rzeczywista liczba wątków z puli wątków może spadną poniżej wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="ae770-137">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="ae770-138">Możesz użyć <xref:System.Threading.ThreadPool.GetMinThreads%2A> metody uzyskiwania tych wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="ae770-138">You can use the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method to obtain these minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae770-139">Możesz użyć <xref:System.Threading.ThreadPool.SetMinThreads%2A> metodę, aby zwiększyć minimalną liczbę wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-139">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="ae770-140">Jednak niepotrzebnie zwiększenie tych wartości może spowodować problemy z wydajnością.</span><span class="sxs-lookup"><span data-stu-id="ae770-140">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="ae770-141">Jeśli zbyt wiele zadań jest uruchomiona w tym samym czasie, wszystkie z nich może pojawić się wolno.</span><span class="sxs-lookup"><span data-stu-id="ae770-141">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="ae770-142">W większości przypadków puli wątków będą działać lepiej z własną algorytm wątki alokacji.</span><span class="sxs-lookup"><span data-stu-id="ae770-142">In most cases the thread pool will perform better with its own algorithm for allocating threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae770-143">W poniższym przykładzie wątku głównego aplikacji kolejki metodę o nazwie `ThreadProc` można wykonać na wątku z puli wątków, sen dla jednej sekundy, a następnie zamyka.</span><span class="sxs-lookup"><span data-stu-id="ae770-143">In the following example, the main application thread  queues a method named `ThreadProc` to execute on a thread pool thread, sleeps for one second, and then exits.</span></span> <span data-ttu-id="ae770-144">`ThreadProc` Metoda po prostu wyświetla komunikat.</span><span class="sxs-lookup"><span data-stu-id="ae770-144">The `ThreadProc` method simply displays a message.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="ae770-145">Jeśli komentarz wystąpi poza wywołanie <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> metody główny wątek kończy działanie zanim metoda zostanie uruchomiona w wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-145">If you comment out the call to the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, the main thread exits before         method runs on the thread pool thread.</span></span>  <span data-ttu-id="ae770-146">Korzysta z puli wątków wątków w tle, które nie jest przechowywana aplikacja była uruchomiona, jeśli wszystkie wątki pierwszoplanowe zostać zakończony.</span><span class="sxs-lookup"><span data-stu-id="ae770-146">The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</span></span>  <span data-ttu-id="ae770-147">(Jest to prosty przykład sytuacja wyścigu).</span><span class="sxs-lookup"><span data-stu-id="ae770-147">(This         is a simple example of a race condition.)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ae770-148">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ae770-148">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ae770-149">Wiąże dojście systemu operacyjnego do <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : nativeint -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="ae770-150">
            <see cref="T:System.IntPtr" /> Przechowuje dojście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          </span>
          <span data-ttu-id="ae770-151">Dojście musi otwarte dla nakładające się operacji We/Wy w niezarządzanym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-152">Wiąże dojście systemu operacyjnego do <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-153">
            <see langword="true" /> Jeśli uchwyt jest powiązana; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-153">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="ae770-154">Obiekt wywołujący nie posiada wymaganych uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-154">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ae770-155">Aby uzyskać możliwość wywoływania niezarządzanego kodu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-155">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="ae770-156">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-156">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : System.Runtime.InteropServices.SafeHandle -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="ae770-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> przechowuje dojście systemu operacyjnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          </span>
          <span data-ttu-id="ae770-158">Dojście musi otwarte dla nakładające się operacji We/Wy w niezarządzanym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-159">Wiąże dojście systemu operacyjnego do <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-160">
            <see langword="true" /> Jeśli uchwyt jest powiązana; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-160">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-161">`osHandle` Parametr powinien być <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, która jest pochodną abstrakcyjnej <xref:System.Runtime.InteropServices.SafeHandle> klasy.</span><span class="sxs-lookup"><span data-stu-id="ae770-161">The `osHandle` parameter should be a <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, which derives from the abstract <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ae770-162">
            <paramref name="osHandle" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-162">
              <paramref name="osHandle" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ae770-163">Aby uzyskać możliwość wywoływania niezarządzanego kodu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-163">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="ae770-164">Powiązane wyliczenie: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-164">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetAvailableThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetAvailableThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="ae770-165">Liczba wątków roboczych dostępne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-165">The number of available worker threads.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="ae770-166">Liczba dostępnych asynchronicznego wątków We/Wy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-166">The number of available asynchronous I/O threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-167">Pobiera różnicę między maksymalną liczbę wątków z puli wątków zwrócony przez <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> metoda i liczba aktualnie aktywne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-168">Gdy <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> zwraca zmiennej określonej przez `workerThreads` zawiera liczbę wątków roboczych dodatkowe, które mogą być uruchamiane, a zmienna określona przez `completionPortThreads` zawiera liczbę dodatkowych asynchronicznego wątków We/Wy, które mogą być pracę.</span><span class="sxs-lookup"><span data-stu-id="ae770-168">When <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> returns, the variable specified by `workerThreads` contains the number of additional worker threads that can be started, and the variable specified by `completionPortThreads` contains the number of additional asynchronous I/O threads that can be started.</span></span>  
  
 <span data-ttu-id="ae770-169">W przypadku nie ma dostępnych wątków żądania puli wątków dodatkowe pozostają w kolejce do momentu wątków z puli wątków stają się dostępne.</span><span class="sxs-lookup"><span data-stu-id="ae770-169">If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae770-170">Poniższy przykład wyświetla liczbę wątków roboczych i dostępne wątki We/Wy po uruchomieniu prostą aplikację.</span><span class="sxs-lookup"><span data-stu-id="ae770-170">The following example displays the number of worker threads and I/O threads available when a simple app is started.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMaxThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="ae770-171">Maksymalna liczba wątków w puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-171">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="ae770-172">Maksymalna liczba asynchronicznego wątków We/Wy w puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-173">Pobiera liczbę żądań w puli wątków, które mogą być wykonywane jednocześnie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="ae770-174">Wszystkie żądania powyżej tego numeru pozostaną w kolejce, dopóki wątków z puli wątków stają się dostępne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-174">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-175">Gdy <xref:System.Threading.ThreadPool.GetMaxThreads%2A> zwraca zmiennej określonej przez `workerThreads` zawiera maksymalną liczbę wątków roboczych dozwolonych w puli wątków i zmiennej określonej przez `completionPortThreads` zawiera maksymalną liczbę asynchronicznego wątków We/Wy w Pula wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-175">When <xref:System.Threading.ThreadPool.GetMaxThreads%2A> returns, the variable specified by `workerThreads` contains the maximum number of worker threads allowed in the thread pool, and the variable specified by `completionPortThreads` contains the maximum number of asynchronous I/O threads allowed in the thread pool.</span></span>  
  
 <span data-ttu-id="ae770-176">Możesz użyć <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> metodę pozwala ustalić rzeczywista liczba wątków w puli wątków w danym momencie.</span><span class="sxs-lookup"><span data-stu-id="ae770-176">You can use the <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> method to determine the actual number of threads in the thread pool at any given time.</span></span>  
  
 <span data-ttu-id="ae770-177">Możesz użyć <xref:System.Threading.ThreadPool.SetMaxThreads%2A> można ustawić maksymalną liczbę wątków roboczych i asynchronicznych operacji We/Wy wątków w puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-177">You can use the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</span></span>  
  
 <span data-ttu-id="ae770-178">Możesz dodawać do kolejki, jak wiele wątków, żądań w puli pamięci systemowej zezwala na to.</span><span class="sxs-lookup"><span data-stu-id="ae770-178">You can queue as many thread pool requests as system memory allows.</span></span> <span data-ttu-id="ae770-179">W przypadku żądań więcej niż wątków z puli wątków dodatkowych żądań pozostają w kolejce do momentu wątków z puli wątków stają się dostępne.</span><span class="sxs-lookup"><span data-stu-id="ae770-179">If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae770-180">Poniższy przykład kodu pokazuje, jak pobrać liczbę maksymalną i dostępna liczba wątków w puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-180">The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</span></span> <span data-ttu-id="ae770-181">Element roboczy znajduje się w kolejce używającej `FileStream` do asynchronicznego zapisu do dwóch plików.</span><span class="sxs-lookup"><span data-stu-id="ae770-181">A work item is queued that uses `FileStream` to asynchronously write to two files.</span></span> <span data-ttu-id="ae770-182">Metody wywołania zwrotnego jest mierzony nakładania się.</span><span class="sxs-lookup"><span data-stu-id="ae770-182">The callback methods are timed to overlap.</span></span> <span data-ttu-id="ae770-183">Wątek roboczy obsługuje element roboczy i, w zależności od szybkości i liczby procesorów w komputerze, co najmniej dwóch wątków portu zakończenia obsługi operacji zapisu.</span><span class="sxs-lookup"><span data-stu-id="ae770-183">A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMinThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="ae770-184">Po powrocie z tej metody zawiera minimalną liczbę wątków roboczych, tworzonych w puli wątków na żądanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="ae770-185">Po powrocie z tej metody zawiera minimalna liczba asynchronicznego wątków We/Wy, tworzonych w puli wątków na żądanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-186">Pobiera minimalną liczbę wątków, tworzonych w puli wątków na żądanie, gdy zostaną wprowadzone nowe żądania, przed przełączeniem na algorytm do zarządzania tworzeniem wątku i niszczeniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-187">Puli wątków zapewnia nowych wątków roboczych lub wątków do ukończenia operacji We/Wy na żądanie, dopóki nie zostanie osiągnięty co najmniej dla każdej kategorii.</span><span class="sxs-lookup"><span data-stu-id="ae770-187">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="ae770-188">Minimalna liczba wątków domyślnie do liczby procesorów w systemie.</span><span class="sxs-lookup"><span data-stu-id="ae770-188">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="ae770-189">Gdy zostanie osiągnięta minimalny, puli wątków można utworzyć dodatkowe wątki w danej kategorii lub poczekaj na ukończenie niektóre zadania.</span><span class="sxs-lookup"><span data-stu-id="ae770-189">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="ae770-190">Począwszy od [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], puli wątków tworzy i niszczy wątki w celu zoptymalizowania przepływności, która jest zdefiniowana jako liczbę zadań, kończące się na jednostkę czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-190">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="ae770-191">Zbyt mało wątków może nie mieć optymalnego wykorzystania dostępnych zasobów, natomiast zbyt wiele wątków może zwiększyć rywalizacji o zasoby.</span><span class="sxs-lookup"><span data-stu-id="ae770-191">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ae770-192">Gdy zapotrzebowanie jest niskie, rzeczywista liczba wątków z puli wątków może spadną poniżej wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="ae770-192">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae770-193">Poniższy przykład Ustawia minimalną liczbę wątków roboczych na cztery i zachowuje oryginalnej wartości minimalna liczba wątków uzupełniania w usłudze asynchronicznych operacji We/Wy.</span><span class="sxs-lookup"><span data-stu-id="ae770-193">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ae770-194">Umieszcza w kolejce metody do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-194">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="ae770-195">Metoda jest wykonywana po udostępnieniu wątku z puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-195">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem callBack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="ae770-196">A <see cref="T:System.Threading.WaitCallback" /> reprezentujący metodę do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-197">Umieszcza w kolejce metody do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-197">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="ae770-198">Metoda jest wykonywana po udostępnieniu wątku z puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-198">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-199">
            <see langword="true" /> Jeśli metoda pomyślnie znajduje się w kolejce; <see cref="T:System.NotSupportedException" /> jest generowany, jeśli element roboczy nie można umieścić w kolejce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-199">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-200">Możesz umieścić dane wymagane przez umieszczonych w kolejce metody pól wystąpienia klasy, w którym metoda jest zdefiniowany, lub możesz użyć <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> przeciążenie, które akceptuje obiekt zawierający niezbędnych danych.</span><span class="sxs-lookup"><span data-stu-id="ae770-200">You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload that accepts an object containing the necessary data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ae770-201">Użytkowników programu Visual Basic można pominąć <xref:System.Threading.WaitCallback> Konstruktor i po prostu użyj `AddressOf` operator przy przekazywaniu Metoda wywołania zwrotnego do <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="ae770-201">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="ae770-202">Visual Basic automatycznie wywołuje konstruktor poprawnym delegacie.</span><span class="sxs-lookup"><span data-stu-id="ae770-202">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="ae770-203">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="ae770-203">Version Information</span></span>  
 <span data-ttu-id="ae770-204">W .NET Framework w wersji 2.0 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> wartość właściwości jest propagowana do wątki robocze w kolejce przy użyciu <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-204">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="ae770-205">We wcześniejszych wersjach nie są propagowane informacji o jednostce.</span><span class="sxs-lookup"><span data-stu-id="ae770-205">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae770-206">W poniższym przykładzie użyto <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> przeciążenia metody do kolejki zadań, która jest reprezentowana przez `ThreadProc` metod w celu wykonania, gdy wątek stanie się dostępny.</span><span class="sxs-lookup"><span data-stu-id="ae770-206">The following example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> method overload to queue a task, which is represented by the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="ae770-207">Nie informacji o zadaniu jest dostarczany za pomocą tego przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="ae770-207">No task information is supplied with this overload.</span></span> <span data-ttu-id="ae770-208">W związku z tym, informacje, które są dostępne dla `ThreadProc` metoda jest ograniczona do obiektu, którego należy metoda.</span><span class="sxs-lookup"><span data-stu-id="ae770-208">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ae770-209">
            <paramref name="callBack" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-209">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ae770-210">Znajduje się środowisko uruchomieniowe języka wspólnego (CLR) i host nie obsługuje tej akcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="ae770-211">A <see cref="T:System.Threading.WaitCallback" /> reprezentujący metodę do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-212">Obiekt zawierający dane do użycia przez metodę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-212">An object containing data to be used by the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-213">Kolejki metodę wykonywania i określa obiekt zawierający dane do użycia przez metodę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          </span>
          <span data-ttu-id="ae770-214">Metoda jest wykonywana po udostępnieniu wątku z puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-214">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-215">
            <see langword="true" /> Jeśli metoda pomyślnie znajduje się w kolejce; <see cref="T:System.NotSupportedException" /> jest generowany, jeśli element roboczy nie można umieścić w kolejce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-215">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-216">Jeśli metoda wywołania zwrotnego wymaga złożonych danych, można zdefiniować klasę zawierającą dane.</span><span class="sxs-lookup"><span data-stu-id="ae770-216">If the callback method requires complex data, you can define a class to contain the data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ae770-217">Użytkowników programu Visual Basic można pominąć <xref:System.Threading.WaitCallback> Konstruktor i po prostu użyj `AddressOf` operator przy przekazywaniu Metoda wywołania zwrotnego do <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="ae770-217">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="ae770-218">Visual Basic automatycznie wywołuje konstruktor poprawnym delegacie.</span><span class="sxs-lookup"><span data-stu-id="ae770-218">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="ae770-219">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="ae770-219">Version Information</span></span>  
 <span data-ttu-id="ae770-220">W .NET Framework w wersji 2.0 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> wartość właściwości jest propagowana do wątki robocze w kolejce przy użyciu <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-220">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="ae770-221">We wcześniejszych wersjach nie są propagowane informacji o jednostce.</span><span class="sxs-lookup"><span data-stu-id="ae770-221">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae770-222">W poniższym przykładzie użyto puli wątków .NET do obliczania `Fibonacci` wyniku dla pięciu liczby z zakresu od 20 do 40.</span><span class="sxs-lookup"><span data-stu-id="ae770-222">The following example uses the .NET thread pool to calculate the `Fibonacci` result for five numbers between 20 and 40.</span></span> <span data-ttu-id="ae770-223">Każdy `Fibonacci` wynik jest reprezentowany przez `Fibonacci` klasy, która udostępnia metodę o nazwie `ThreadPoolCallback` , która wykonuje obliczenie.</span><span class="sxs-lookup"><span data-stu-id="ae770-223">Each `Fibonacci` result is represented by the `Fibonacci` class, which provides a method named `ThreadPoolCallback` that performs the calculation.</span></span> <span data-ttu-id="ae770-224">Obiekt, który reprezentuje każdy `Fibonacci` wartość zostanie utworzony i `ThreadPoolCallback` metoda jest przekazywana do <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>, co powoduje przypisanie dostępnych wątków w puli, aby wykonać metodę.</span><span class="sxs-lookup"><span data-stu-id="ae770-224">An object that represents each `Fibonacci` value is created, and the `ThreadPoolCallback` method is passed to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>, which assigns an available thread in the pool to execute the method.</span></span>  
  
 <span data-ttu-id="ae770-225">Ponieważ każdy `Fibonacci` obiekt otrzymuje częściową losową wartość do obliczenia, a ponieważ każdy wątek będzie konkurującymi czasu procesora, nie wiadomo z wyprzedzeniem, jak długo potrwa dla wszystkich pięciu wyniki mają być obliczane.</span><span class="sxs-lookup"><span data-stu-id="ae770-225">Because each `Fibonacci` object is given a semi-random value to compute, and because each thread will be competing for processor time, you cannot know in advance how long it will take for all five results to be calculated.</span></span> <span data-ttu-id="ae770-226">Dlatego każdego `Fibonacci` obiekt jest przekazywany wystąpienie <xref:System.Threading.ManualResetEvent> klasy podczas konstruowania.</span><span class="sxs-lookup"><span data-stu-id="ae770-226">That is why each `Fibonacci` object is passed an instance of the <xref:System.Threading.ManualResetEvent> class during construction.</span></span> <span data-ttu-id="ae770-227">Każdy obiekt sygnalizuje obiektu podanego zdarzenia po obliczeniu zakończeniu, pozwalający głównemu wątkowi bloku wykonywania za pomocą <xref:System.Threading.WaitHandle.WaitAll%2A> aż do wszystkich pięciu `Fibonacci` obiekty zostały obliczone wynik.</span><span class="sxs-lookup"><span data-stu-id="ae770-227">Each object signals the provided event object when its calculation is complete, which allows the primary thread to block execution with <xref:System.Threading.WaitHandle.WaitAll%2A> until all five `Fibonacci` objects have calculated a result.</span></span> <span data-ttu-id="ae770-228">`Main` Metoda następnie wyświetla każdy `Fibonacci` wynik.</span><span class="sxs-lookup"><span data-stu-id="ae770-228">The `Main` method then displays each `Fibonacci` result.</span></span>
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ae770-229">Znajduje się środowisko uruchomieniowe języka wspólnego (CLR) i host nie obsługuje tej akcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-229">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ae770-230">
            <paramref name="callBack" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-230">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem&lt;TState&gt; (Action&lt;TState&gt; callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem&lt;TState&gt;(class System.Action`1&lt;!!TState&gt; callBack, !!TState state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem(Of TState) (callBack As Action(Of TState), state As TState, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static bool QueueUserWorkItem(Action&lt;TState&gt; ^ callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : Action&lt;'State&gt; * 'State * bool -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state, preferLocal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callBack" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="preferLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="callBack">To be added.</param>
        <param name="state">To be added.</param>
        <param name="preferLocal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ae770-231">Rejestruje delegata, która oczekuje na <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-231">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="ae770-232">
            <see cref="T:System.Threading.WaitHandle" /> Do zarejestrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-232">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="ae770-233">Użyj <see cref="T:System.Threading.WaitHandle" /> innych niż <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-233">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="ae770-234">
            <see cref="T:System.Threading.WaitOrTimerCallback" /> Pełnomocnika do wywołania, gdy <c>waitObject</c> zasygnalizowania parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-234">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-235">Obiekt, który jest przekazywany do obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-235">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="ae770-236">Limit czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-236">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="ae770-237">Jeśli <c>millisecondsTimeOutInterval</c> parametr ma wartość 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-237">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="ae770-238">Jeśli <c>millisecondsTimeOutInterval</c> wynosi -1, nigdy nie upływa interwał limitu czasu funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-238">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="ae770-239">
            <see langword="true" /> Aby wskazać, że wątek nie jest już będzie czekać <c>waitObject</c> parametru po wywołaniu delegata; <see langword="false" /> resetowany czasomierz za każdym razem, gdy kończy operacji oczekiwania, dopóki nie zostanie wyrejestrowany czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-239">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-240">Rejestruje delegata oczekiwania <see cref="T:System.Threading.WaitHandle" />, określając całkowita 32-bitowych limitu czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-240">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-241">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> Która hermetyzuje uchwyt macierzysty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-241">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-242">Po zakończeniu przy użyciu <xref:System.Threading.RegisteredWaitHandle> , jest zwracana przez tę metodę, należy wywołać jej <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodę, aby zwolnić odwołania do dojścia oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-242">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="ae770-243">Firma Microsoft zaleca, aby zawsze wywołujesz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody, nawet jeśli określisz `true` dla `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="ae770-243">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="ae770-244">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie Jeśli wywołasz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizatora.</span><span class="sxs-lookup"><span data-stu-id="ae770-244">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="ae770-245"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Metody kolejki określonego delegata do puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-245">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="ae770-246">Wątek roboczy wykona delegata, gdy wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="ae770-246">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="ae770-247">Określony obiekt jest w sygnalizowanego stanu.</span><span class="sxs-lookup"><span data-stu-id="ae770-247">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="ae770-248">Upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-248">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="ae770-249"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Metoda sprawdza bieżący stan określonego obiektu <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="ae770-249">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="ae770-250">Jeśli stan obiektu jest unsignaled, metoda rejestruje operacji oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-250">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="ae770-251">Operacji oczekiwania jest wykonywane przez wątków z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-251">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="ae770-252">Delegat jest wykonywana przez wątek roboczy, gdy stan obiektu jest sygnalizowane lub upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-252">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="ae770-253">Jeśli `timeOutInterval` parametru jest 0 (zero) i `executeOnlyOnce` parametr jest `false`, jest resetowany za każdym razem, gdy zdarzenie jest sygnalizowane lub upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-253">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ae770-254">Za pomocą <xref:System.Threading.Mutex> dla `waitObject` nie zapewnia wzajemne wykluczenie dla wywołania zwrotne, ponieważ podstawowego interfejsu API Win32 używa domyślnego `WT_EXECUTEDEFAULT` Flaga, dzięki czemu każdy wywołania zwrotnego jest wysyłane w oddzielnym wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-254">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="ae770-255">Zamiast <xref:System.Threading.Mutex>, użyj <xref:System.Threading.Semaphore> z maksymalną liczbą 1.</span><span class="sxs-lookup"><span data-stu-id="ae770-255">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="ae770-256">Aby anulować operację oczekiwania, należy wywołać <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-256">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ae770-257">Wątek oczekiwania używa Win32 `WaitForMultipleObjects` funkcję, aby monitorowanie operacji oczekiwania zarejestrowane.</span><span class="sxs-lookup"><span data-stu-id="ae770-257">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="ae770-258">W związku z tym, jeśli musisz użyć tego samego uchwytu macierzystego systemu operacyjnego w wielu wywołań <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, należy skopiować uchwyt przy użyciu Win32 `DuplicateHandle` funkcji.</span><span class="sxs-lookup"><span data-stu-id="ae770-258">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="ae770-259">Należy zwrócić uwagę, czy nie powinien impulsów przekazany obiekt zdarzenia <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ponieważ wątek oczekiwania nie może wykryć, czy zdarzenie jest sygnalizowane, zanim zostanie zresetowane.</span><span class="sxs-lookup"><span data-stu-id="ae770-259">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="ae770-260">Przed zwróceniem, funkcja modyfikuje stan niektórych typów obiektów synchronizacji.</span><span class="sxs-lookup"><span data-stu-id="ae770-260">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="ae770-261">Modyfikacja występuje tylko w przypadku obiektu, którego sygnalizowanego stanu spowodowane warunek oczekiwania, które należy spełnić.</span><span class="sxs-lookup"><span data-stu-id="ae770-261">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="ae770-262">Na przykład za pomocą jednej zmniejsza się liczba semafora.</span><span class="sxs-lookup"><span data-stu-id="ae770-262">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="ae770-263">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="ae770-263">Version Information</span></span>  
 <span data-ttu-id="ae770-264">Począwszy od programu .NET Framework w wersji 2.0, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> wartość właściwości jest propagowana do wątki robocze w kolejce przy użyciu <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-264">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="ae770-265">We wcześniejszych wersjach nie są propagowane informacji o jednostce.</span><span class="sxs-lookup"><span data-stu-id="ae770-265">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ae770-266">
            <paramref name="millisecondsTimeOutInterval" /> Parametr jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-266">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="ae770-267">
            <see cref="T:System.Threading.WaitHandle" /> Do zarejestrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-267">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="ae770-268">Użyj <see cref="T:System.Threading.WaitHandle" /> innych niż <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-268">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="ae770-269">
            <see cref="T:System.Threading.WaitOrTimerCallback" /> Pełnomocnika do wywołania, gdy <c>waitObject</c> zasygnalizowania parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-269">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-270">Obiekt przekazany do delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-270">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="ae770-271">Limit czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-271">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="ae770-272">Jeśli <c>millisecondsTimeOutInterval</c> parametr ma wartość 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-272">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="ae770-273">Jeśli <c>millisecondsTimeOutInterval</c> wynosi -1, nigdy nie upływa interwał limitu czasu funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-273">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="ae770-274">
            <see langword="true" /> Aby wskazać, że wątek nie jest już będzie czekać <c>waitObject</c> parametru po wywołaniu delegata; <see langword="false" /> resetowany czasomierz za każdym razem, gdy kończy operacji oczekiwania, dopóki nie zostanie wyrejestrowany czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-274">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-275">Rejestruje delegata oczekiwania <see cref="T:System.Threading.WaitHandle" />, określając całkowita 64-bitowych limitu czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-275">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-276">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> Która hermetyzuje uchwyt macierzysty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-276">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-277">Po zakończeniu przy użyciu <xref:System.Threading.RegisteredWaitHandle> , jest zwracana przez tę metodę, należy wywołać jej <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodę, aby zwolnić odwołania do dojścia oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-277">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="ae770-278">Firma Microsoft zaleca, aby zawsze wywołujesz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody, nawet jeśli określisz `true` dla `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="ae770-278">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="ae770-279">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie Jeśli wywołasz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizatora.</span><span class="sxs-lookup"><span data-stu-id="ae770-279">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="ae770-280"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Metody kolejki określonego delegata do puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-280">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="ae770-281">Wątek roboczy wykona delegata, gdy wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="ae770-281">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="ae770-282">Określony obiekt jest w sygnalizowanego stanu.</span><span class="sxs-lookup"><span data-stu-id="ae770-282">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="ae770-283">Upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-283">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="ae770-284"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Metoda sprawdza bieżący stan określonego obiektu <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="ae770-284">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="ae770-285">Jeśli stan obiektu jest unsignaled, metoda rejestruje operacji oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-285">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="ae770-286">Operacji oczekiwania jest wykonywane przez wątków z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-286">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="ae770-287">Delegat jest wykonywana przez wątek roboczy, gdy stan obiektu jest sygnalizowane lub upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-287">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="ae770-288">Jeśli `timeOutInterval` parametru jest 0 (zero) i `executeOnlyOnce` parametr jest `false`, jest resetowany za każdym razem, gdy zdarzenie jest sygnalizowane lub upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-288">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ae770-289">Za pomocą <xref:System.Threading.Mutex> dla `waitObject` nie zapewnia wzajemne wykluczenie dla wywołania zwrotne, ponieważ podstawowego interfejsu API Win32 używa domyślnego `WT_EXECUTEDEFAULT` Flaga, dzięki czemu każdy wywołania zwrotnego jest wysyłane w oddzielnym wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-289">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="ae770-290">Zamiast <xref:System.Threading.Mutex>, użyj <xref:System.Threading.Semaphore> z maksymalną liczbą 1.</span><span class="sxs-lookup"><span data-stu-id="ae770-290">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="ae770-291">Aby anulować operację oczekiwania, należy wywołać <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-291">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ae770-292">Wątek oczekiwania używa Win32 `WaitForMultipleObjects` funkcję, aby monitorowanie operacji oczekiwania zarejestrowane.</span><span class="sxs-lookup"><span data-stu-id="ae770-292">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="ae770-293">W związku z tym, jeśli musisz użyć tego samego uchwytu macierzystego systemu operacyjnego w wielu wywołań <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, należy skopiować uchwyt przy użyciu Win32 `DuplicateHandle` funkcji.</span><span class="sxs-lookup"><span data-stu-id="ae770-293">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="ae770-294">Należy zwrócić uwagę, czy nie powinien impulsów przekazany obiekt zdarzenia <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ponieważ wątek oczekiwania nie może wykryć, czy zdarzenie jest sygnalizowane, zanim zostanie zresetowane.</span><span class="sxs-lookup"><span data-stu-id="ae770-294">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="ae770-295">Przed zwróceniem, funkcja modyfikuje stan niektórych typów obiektów synchronizacji.</span><span class="sxs-lookup"><span data-stu-id="ae770-295">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="ae770-296">Modyfikacja występuje tylko w przypadku obiektu, którego sygnalizowanego stanu spowodowane warunek oczekiwania, które należy spełnić.</span><span class="sxs-lookup"><span data-stu-id="ae770-296">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="ae770-297">Na przykład za pomocą jednej zmniejsza się liczba semafora.</span><span class="sxs-lookup"><span data-stu-id="ae770-297">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="ae770-298">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="ae770-298">Version Information</span></span>  
 <span data-ttu-id="ae770-299">Począwszy od programu .NET Framework w wersji 2.0, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> wartość właściwości jest propagowana do wątki robocze w kolejce przy użyciu <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-299">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="ae770-300">We wcześniejszych wersjach nie są propagowane informacji o jednostce.</span><span class="sxs-lookup"><span data-stu-id="ae770-300">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ae770-301">
            <paramref name="millisecondsTimeOutInterval" /> Parametr jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-301">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="ae770-302">
            <see cref="T:System.Threading.WaitHandle" /> Do zarejestrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-302">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="ae770-303">Użyj <see cref="T:System.Threading.WaitHandle" /> innych niż <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-303">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="ae770-304">
            <see cref="T:System.Threading.WaitOrTimerCallback" /> Pełnomocnika do wywołania, gdy <c>waitObject</c> zasygnalizowania parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-304">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-305">Obiekt przekazany do delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-305">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="ae770-306">Limit czasu, reprezentowane przez <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-306">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="ae770-307">Jeśli <c>limitu czasu</c> jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-307">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="ae770-308">Jeśli <c>limitu czasu</c> wynosi -1, nigdy nie upływa interwał limitu czasu funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-308">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="ae770-309">
            <see langword="true" /> Aby wskazać, że wątek nie jest już będzie czekać <c>waitObject</c> parametru po wywołaniu delegata; <see langword="false" /> resetowany czasomierz za każdym razem, gdy kończy operacji oczekiwania, dopóki nie zostanie wyrejestrowany czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-309">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-310">Rejestruje delegata oczekiwania <see cref="T:System.Threading.WaitHandle" />, określanie <see cref="T:System.TimeSpan" /> wartość limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-310">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-311">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> Która hermetyzuje uchwyt macierzysty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-311">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-312">Po zakończeniu przy użyciu <xref:System.Threading.RegisteredWaitHandle> , jest zwracana przez tę metodę, należy wywołać jej <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodę, aby zwolnić odwołania do dojścia oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-312">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="ae770-313">Firma Microsoft zaleca, aby zawsze wywołujesz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody, nawet jeśli określisz `true` dla `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="ae770-313">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="ae770-314">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie Jeśli wywołasz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizatora.</span><span class="sxs-lookup"><span data-stu-id="ae770-314">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="ae770-315"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Metody kolejki określonego delegata do puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-315">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="ae770-316">Wątek roboczy wykona delegata, gdy wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="ae770-316">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="ae770-317">Określony obiekt jest w sygnalizowanego stanu.</span><span class="sxs-lookup"><span data-stu-id="ae770-317">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="ae770-318">Upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-318">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="ae770-319"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Metoda sprawdza bieżący stan określonego obiektu <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="ae770-319">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="ae770-320">Jeśli stan obiektu jest unsignaled, metoda rejestruje operacji oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-320">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="ae770-321">Operacji oczekiwania jest wykonywane przez wątków z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-321">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="ae770-322">Delegat jest wykonywana przez wątek roboczy, gdy stan obiektu jest sygnalizowane lub upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-322">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="ae770-323">Jeśli `timeOutInterval` parametru jest 0 (zero) i `executeOnlyOnce` parametr jest `false`, jest resetowany za każdym razem, gdy zdarzenie jest sygnalizowane lub upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-323">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ae770-324">Za pomocą <xref:System.Threading.Mutex> dla `waitObject` nie zapewnia wzajemne wykluczenie dla wywołania zwrotne, ponieważ podstawowego interfejsu API Win32 używa domyślnego `WT_EXECUTEDEFAULT` Flaga, dzięki czemu każdy wywołania zwrotnego jest wysyłane w oddzielnym wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-324">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="ae770-325">Zamiast <xref:System.Threading.Mutex>, użyj <xref:System.Threading.Semaphore> z maksymalną liczbą 1.</span><span class="sxs-lookup"><span data-stu-id="ae770-325">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="ae770-326">Aby anulować operację oczekiwania, należy wywołać <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-326">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ae770-327">Wątek oczekiwania używa Win32 `WaitForMultipleObjects` funkcję, aby monitorowanie operacji oczekiwania zarejestrowane.</span><span class="sxs-lookup"><span data-stu-id="ae770-327">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="ae770-328">W związku z tym, jeśli musisz użyć tego samego uchwytu macierzystego systemu operacyjnego w wielu wywołań <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, należy skopiować uchwyt przy użyciu Win32 `DuplicateHandle` funkcji.</span><span class="sxs-lookup"><span data-stu-id="ae770-328">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="ae770-329">Należy zwrócić uwagę, czy nie powinien impulsów przekazany obiekt zdarzenia <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ponieważ wątek oczekiwania nie może wykryć, czy zdarzenie jest sygnalizowane, zanim zostanie zresetowane.</span><span class="sxs-lookup"><span data-stu-id="ae770-329">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="ae770-330">Przed zwróceniem, funkcja modyfikuje stan niektórych typów obiektów synchronizacji.</span><span class="sxs-lookup"><span data-stu-id="ae770-330">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="ae770-331">Modyfikacja występuje tylko w przypadku obiektu, którego sygnalizowanego stanu spowodowane warunek oczekiwania, które należy spełnić.</span><span class="sxs-lookup"><span data-stu-id="ae770-331">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="ae770-332">Na przykład za pomocą jednej zmniejsza się liczba semafora.</span><span class="sxs-lookup"><span data-stu-id="ae770-332">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="ae770-333">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="ae770-333">Version Information</span></span>  
 <span data-ttu-id="ae770-334">Począwszy od programu .NET Framework w wersji 2.0, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> wartość właściwości jest propagowana do wątki robocze w kolejce przy użyciu <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-334">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="ae770-335">We wcześniejszych wersjach nie są propagowane informacji o jednostce.</span><span class="sxs-lookup"><span data-stu-id="ae770-335">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ae770-336">
            <paramref name="timeout" /> Parametr jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-336">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ae770-337">
            <paramref name="timeout" /> Parametru jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-337">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="ae770-338">
            <see cref="T:System.Threading.WaitHandle" /> Do zarejestrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-338">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="ae770-339">Użyj <see cref="T:System.Threading.WaitHandle" /> innych niż <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-339">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="ae770-340">
            <see cref="T:System.Threading.WaitOrTimerCallback" /> Pełnomocnika do wywołania, gdy <c>waitObject</c> zasygnalizowania parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-340">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-341">Obiekt przekazany do delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-341">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="ae770-342">Limit czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-342">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="ae770-343">Jeśli <c>millisecondsTimeOutInterval</c> parametr ma wartość 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-343">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="ae770-344">Jeśli <c>millisecondsTimeOutInterval</c> wynosi -1, nigdy nie upływa interwał limitu czasu funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-344">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="ae770-345">
            <see langword="true" /> Aby wskazać, że wątek nie jest już będzie czekać <c>waitObject</c> parametru po wywołaniu delegata; <see langword="false" /> resetowany czasomierz za każdym razem, gdy kończy operacji oczekiwania, dopóki nie zostanie wyrejestrowany czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-345">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-346">Rejestruje delegata oczekiwania <see cref="T:System.Threading.WaitHandle" />, określając 32-bitowej nieoznaczonej liczby całkowitej limitu czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-346">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-347">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> Można anulować operacji oczekiwania zarejestrowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-347">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-348">Po zakończeniu przy użyciu <xref:System.Threading.RegisteredWaitHandle> , jest zwracana przez tę metodę, należy wywołać jej <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodę, aby zwolnić odwołania do dojścia oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-348">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="ae770-349">Firma Microsoft zaleca, aby zawsze wywołujesz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody, nawet jeśli określisz `true` dla `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="ae770-349">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="ae770-350">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie Jeśli wywołasz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizatora.</span><span class="sxs-lookup"><span data-stu-id="ae770-350">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="ae770-351"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Metody kolejki określonego delegata do puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-351">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="ae770-352">Wątek roboczy wykona delegata, gdy wystąpi jedno z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="ae770-352">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="ae770-353">Określony obiekt jest w sygnalizowanego stanu.</span><span class="sxs-lookup"><span data-stu-id="ae770-353">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="ae770-354">Upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-354">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="ae770-355"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Metoda sprawdza bieżący stan określonego obiektu <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="ae770-355">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="ae770-356">Jeśli stan obiektu jest unsignaled, metoda rejestruje operacji oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-356">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="ae770-357">Operacji oczekiwania jest wykonywane przez wątków z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-357">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="ae770-358">Delegat jest wykonywana przez wątek roboczy, gdy stan obiektu jest sygnalizowane lub upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-358">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="ae770-359">Jeśli `timeOutInterval` parametru jest 0 (zero) i `executeOnlyOnce` parametr jest `false`, jest resetowany za każdym razem, gdy zdarzenie jest sygnalizowane lub upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-359">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ae770-360">Za pomocą <xref:System.Threading.Mutex> dla `waitObject` nie zapewnia wzajemne wykluczenie dla wywołania zwrotne, ponieważ podstawowego interfejsu API Win32 używa domyślnego `WT_EXECUTEDEFAULT` Flaga, dzięki czemu każdy wywołania zwrotnego jest wysyłane w oddzielnym wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-360">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="ae770-361">Zamiast <xref:System.Threading.Mutex>, użyj <xref:System.Threading.Semaphore> z maksymalną liczbą 1.</span><span class="sxs-lookup"><span data-stu-id="ae770-361">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="ae770-362">Aby anulować operację oczekiwania, należy wywołać <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-362">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ae770-363">Wątek oczekiwania używa Win32 `WaitForMultipleObjects` funkcję, aby monitorowanie operacji oczekiwania zarejestrowane.</span><span class="sxs-lookup"><span data-stu-id="ae770-363">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="ae770-364">W związku z tym, jeśli musisz użyć tego samego uchwytu macierzystego systemu operacyjnego w wielu wywołań <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, należy skopiować uchwyt przy użyciu Win32 `DuplicateHandle` funkcji.</span><span class="sxs-lookup"><span data-stu-id="ae770-364">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="ae770-365">Należy zwrócić uwagę, czy nie powinien impulsów przekazany obiekt zdarzenia <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ponieważ wątek oczekiwania nie może wykryć, czy zdarzenie jest sygnalizowane, zanim zostanie zresetowane.</span><span class="sxs-lookup"><span data-stu-id="ae770-365">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="ae770-366">Przed zwróceniem, funkcja modyfikuje stan niektórych typów obiektów synchronizacji.</span><span class="sxs-lookup"><span data-stu-id="ae770-366">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="ae770-367">Modyfikacja występuje tylko w przypadku obiektu, którego sygnalizowanego stanu spowodowane warunek oczekiwania, które należy spełnić.</span><span class="sxs-lookup"><span data-stu-id="ae770-367">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="ae770-368">Na przykład za pomocą jednej zmniejsza się liczba semafora.</span><span class="sxs-lookup"><span data-stu-id="ae770-368">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="ae770-369">Informacje o wersji</span><span class="sxs-lookup"><span data-stu-id="ae770-369">Version Information</span></span>  
 <span data-ttu-id="ae770-370">Począwszy od programu .NET Framework w wersji 2.0, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> wartość właściwości jest propagowana do wątki robocze w kolejce przy użyciu <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-370">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="ae770-371">We wcześniejszych wersjach nie są propagowane informacji o jednostce.</span><span class="sxs-lookup"><span data-stu-id="ae770-371">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae770-372">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody do wykonania metodą określonego wywołania zwrotnego, gdy jest sygnalizowane dojście oczekiwania określony.</span><span class="sxs-lookup"><span data-stu-id="ae770-372">The following example shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="ae770-373">W tym przykładzie, metody wywołania zwrotnego jest `WaitProc`, a to dojście oczekiwania <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="ae770-373">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="ae770-374">W przykładzie zdefiniowano `TaskInfo` klasy do przechowywania informacji, który jest przekazywany do wywołania zwrotnego, podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="ae770-374">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="ae770-375">W przykładzie jest tworzony `TaskInfo` obiektu, a następnie przypisuje go niektóre dane ciągu.</span><span class="sxs-lookup"><span data-stu-id="ae770-375">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="ae770-376"><xref:System.Threading.RegisteredWaitHandle> Zwracanym przez <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody jest przypisany do `Handle` pole `TaskInfo` obiekt metody wywołania zwrotnego ma dostęp do <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="ae770-376">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="ae770-377">Oprócz określenia `TaskInfo` jako obiekt do przekazania do metody wywołania zwrotnego, wywołanie <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> określa metodę <xref:System.Threading.AutoResetEvent> , zadanie będzie oczekiwać, <xref:System.Threading.WaitOrTimerCallback> delegata, który reprezentuje `WaitProc` metody wywołania zwrotnego co drugi interwał limitu czasu, a wiele wywołań zwrotnych.</span><span class="sxs-lookup"><span data-stu-id="ae770-377">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="ae770-378">Gdy sygnały w głównym wątku <xref:System.Threading.AutoResetEvent> przez wywołanie jego <xref:System.Threading.EventWaitHandle.Set%2A> metody <xref:System.Threading.WaitOrTimerCallback> obiekt delegowany jest wywoływany.</span><span class="sxs-lookup"><span data-stu-id="ae770-378">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="ae770-379">`WaitProc` Testy metoda <xref:System.Threading.RegisteredWaitHandle> do określenia, czy upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-379">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="ae770-380">Jeśli wywołano wywołanie zwrotne, ponieważ zostało zasygnalizowane dojście oczekiwania, `WaitProc` wyrejestrowuje metoda <xref:System.Threading.RegisteredWaitHandle>, zatrzymanie dodatkowe wywołania zwrotne.</span><span class="sxs-lookup"><span data-stu-id="ae770-380">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="ae770-381">W przypadku przekroczenia limitu czasu zadanie będzie nadal czekać.</span><span class="sxs-lookup"><span data-stu-id="ae770-381">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="ae770-382">`WaitProc` Metoda kończy się wydrukować komunikat do konsoli.</span><span class="sxs-lookup"><span data-stu-id="ae770-382">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ae770-383">
            <paramref name="millisecondsTimeOutInterval" /> Parametr jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-383">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMaxThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="ae770-384">Maksymalna liczba wątków w puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-384">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="ae770-385">Maksymalna liczba asynchronicznego wątków We/Wy w puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-385">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-386">Ustawia liczbę żądań w puli wątków, które mogą być wykonywane jednocześnie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-386">Sets the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="ae770-387">Wszystkie żądania powyżej tego numeru pozostaną w kolejce, dopóki wątków z puli wątków stają się dostępne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-387">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-388">
            <see langword="true" /> Jeśli ta zmiana jest kończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-388">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-389">Nie można ustawić maksymalną liczbę wątków roboczych lub wątków zakończenia operacji We/Wy na liczbę mniejszą niż liczba procesorów w komputerze.</span><span class="sxs-lookup"><span data-stu-id="ae770-389">You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</span></span> <span data-ttu-id="ae770-390">Aby określić liczbę procesorów są obecne, pobrać wartość <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="ae770-390">To determine how many processors are present, retrieve the value of the <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="ae770-391">Ponadto nie można ustawić maksymalną liczbę wątków roboczych lub wątków ukończenia operacji We/Wy na liczbę mniejsze niż minimalne odpowiednią liczbę wątków roboczych lub wątki zakończenia operacji We/Wy.</span><span class="sxs-lookup"><span data-stu-id="ae770-391">In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</span></span> <span data-ttu-id="ae770-392">Aby określić rozmiar puli wątków minimalne, należy wywołać <xref:System.Threading.ThreadPool.GetMinThreads%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="ae770-392">To determine the minimum thread pool size,  call the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method.</span></span>  
  
 <span data-ttu-id="ae770-393">Jeśli znajduje się środowisko uruchomieniowe języka wspólnego, np. przez Internet Information Services (IIS) lub SQL Server host może ograniczyć lub uniemożliwić zmiany rozmiaru puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-393">If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</span></span>  
  
 <span data-ttu-id="ae770-394">Zmiana maksymalnej liczby wątków w puli wątków, należy zachować ostrożność.</span><span class="sxs-lookup"><span data-stu-id="ae770-394">Use caution when changing the maximum number of threads in the thread pool.</span></span> <span data-ttu-id="ae770-395">Podczas organizowanych kodu, zmiany mogą się niekorzystny wpływ na bibliotek kodu, których używasz.</span><span class="sxs-lookup"><span data-stu-id="ae770-395">While your code might benefit, the changes might have an adverse effect on code libraries you use.</span></span>  
  
 <span data-ttu-id="ae770-396">Ustawienie zbyt duży rozmiar puli wątków może spowodować problemy z wydajnością.</span><span class="sxs-lookup"><span data-stu-id="ae770-396">Setting the thread pool size too large can cause performance problems.</span></span> <span data-ttu-id="ae770-397">Jeśli zbyt wiele wątków, są wykonywane w tym samym czasie, przełączanie zadań obciążenie staje się ważnym czynnikiem.</span><span class="sxs-lookup"><span data-stu-id="ae770-397">If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ae770-398">Aby uzyskać możliwość kontrolować wątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-398">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="ae770-399">Wartość uprawnienia: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-399">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMinThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="ae770-400">Minimalna liczba wątków roboczych, tworzonych w puli wątków na żądanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-400">The minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="ae770-401">Minimalna liczba asynchronicznych operacji We/Wy wątków, tworzonych w puli wątków na żądanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-401">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-402">Ustawia minimalną liczbę wątków, tworzonych w puli wątków na żądanie, nowych żądań, przed przełączeniem na algorytm zarządzania wątku tworzenia i niszczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-402">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-403">
            <see langword="true" /> Jeśli ta zmiana jest kończy się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-403">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-404">Puli wątków zapewnia nowych wątków roboczych lub wątków do ukończenia operacji We/Wy na żądanie, dopóki nie zostanie osiągnięty co najmniej dla każdej kategorii.</span><span class="sxs-lookup"><span data-stu-id="ae770-404">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="ae770-405">Gdy zostanie osiągnięta minimalny, puli wątków można utworzyć dodatkowe wątki w danej kategorii lub poczekaj na ukończenie niektóre zadania.</span><span class="sxs-lookup"><span data-stu-id="ae770-405">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="ae770-406">Począwszy od [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], puli wątków tworzy i niszczy wątki w celu zoptymalizowania przepływności, która jest zdefiniowana jako liczbę zadań, kończące się na jednostkę czasu.</span><span class="sxs-lookup"><span data-stu-id="ae770-406">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="ae770-407">Zbyt mało wątków może nie mieć optymalnego wykorzystania dostępnych zasobów, natomiast zbyt wiele wątków może zwiększyć rywalizacji o zasoby.</span><span class="sxs-lookup"><span data-stu-id="ae770-407">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
 <span data-ttu-id="ae770-408">Gdy zapotrzebowanie jest niskie, rzeczywista liczba wątków z puli wątków może spadną poniżej wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="ae770-408">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="ae770-409">Jeśli określisz liczbę ujemną lub podana liczba większa niż maksymalna liczba aktywnych wątków z puli wątków (uzyskanych przy użyciu <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> zwraca `false` i nie jest zmieniany minimalnej wartości.</span><span class="sxs-lookup"><span data-stu-id="ae770-409">If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> returns `false` and does not change either of the minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae770-410">Minimalna liczba wątków domyślnie do liczby procesorów w systemie.</span><span class="sxs-lookup"><span data-stu-id="ae770-410">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="ae770-411">Możesz użyć <xref:System.Threading.ThreadPool.SetMinThreads%2A> metodę, aby zwiększyć minimalną ofthreads liczb.</span><span class="sxs-lookup"><span data-stu-id="ae770-411">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number ofthreads.</span></span> <span data-ttu-id="ae770-412">Jednak niepotrzebnie zwiększenie tych wartości może spowodować problemy z wydajnością.</span><span class="sxs-lookup"><span data-stu-id="ae770-412">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="ae770-413">Jeśli zbyt wiele zadań jest uruchomiona w tym samym czasie, wszystkie z nich może pojawić się wolno.</span><span class="sxs-lookup"><span data-stu-id="ae770-413">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="ae770-414">W większości przypadków puli wątków będą działać lepiej z własną algorytm wątki alokacji.</span><span class="sxs-lookup"><span data-stu-id="ae770-414">In most cases, the thread pool will perform better with its own algorithm for allocating threads.</span></span> <span data-ttu-id="ae770-415">Zmniejszenie minimum, aby była ona mniejsza niż liczba procesorów również może obniżyć wydajność.</span><span class="sxs-lookup"><span data-stu-id="ae770-415">Reducing the minimum to less than the number of processors can also hurt performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ae770-416">Poniższy przykład Ustawia minimalną liczbę wątków roboczych na cztery i zachowuje oryginalnej wartości minimalna liczba wątków uzupełniania w usłudze asynchronicznych operacji We/Wy.</span><span class="sxs-lookup"><span data-stu-id="ae770-416">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ae770-417">Aby uzyskać możliwość kontrolować wątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-417">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="ae770-418">Wartość uprawnienia: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-418">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueNativeOverlapped : nativeptr&lt;System.Threading.NativeOverlapped&gt; -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueNativeOverlapped overlapped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped">
          <span data-ttu-id="ae770-419">
            <see cref="T:System.Threading.NativeOverlapped" /> Struktury do kolejki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-419">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-420">Umieszcza w kolejce nakładające się operacji We/Wy do wykonania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-420">Queues an overlapped I/O operation for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-421">
            <see langword="true" /> Jeśli operacja pomyślnie zostało umieszczone w kolejce do portu ukończenia operacji We/Wy; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-421">
              <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-422">Aby uzyskać informacji o używaniu natywny Win32 pokrywający się operacji We/Wy, zobacz <xref:System.Threading.Overlapped> klasy, <xref:System.Threading.NativeOverlapped> struktury i `OVERLAPPED` struktury w zestawie SDK platformy Win32.</span><span class="sxs-lookup"><span data-stu-id="ae770-422">For information about using native Win32 overlapped I/O, see the <xref:System.Threading.Overlapped> class, the <xref:System.Threading.NativeOverlapped> structure, and the `OVERLAPPED` structure in the Win32 Platform SDK.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae770-423">Za pomocą <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> metoda może przypadkowo otwierają lukę w zabezpieczeniach.</span><span class="sxs-lookup"><span data-stu-id="ae770-423">Using the <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> method could inadvertently open up a security hole.</span></span> <span data-ttu-id="ae770-424">Zabezpieczenia dostępu kodu określa jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</span><span class="sxs-lookup"><span data-stu-id="ae770-424">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="ae770-425">Podczas pracy znajduje się w kolejce przy użyciu wątek puli wątków <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, stosu wątku z puli wątków nie ma kontekście rzeczywistych obiektów wywołujących.</span><span class="sxs-lookup"><span data-stu-id="ae770-425">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, the stack of the thread pool thread does not have the context of the actual callers.</span></span> <span data-ttu-id="ae770-426">Złośliwy kod może być w stanie wykorzystać ten element, aby uniknąć sprawdzania uprawnień.</span><span class="sxs-lookup"><span data-stu-id="ae770-426">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ae770-427">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-427">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ae770-428">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-428">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="ae770-429">A <see cref="T:System.Threading.WaitCallback" /> reprezentujący pełnomocnika do wywołania, gdy wątków w puli wątków przejmuje elementu roboczego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-429">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-430">Obiekt, który jest przekazywany do obiektu delegowanego, gdy obsługiwany z puli wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-430">The object that is passed to the delegate when serviced from the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-431">Kolejki określonego delegata do puli wątków, ale nie propaguje stosu wywołującego do wątku roboczego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-431">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-432">
            <see langword="true" /> Jeśli metoda się powiedzie; <see cref="T:System.OutOfMemoryException" /> jest generowany, jeśli element roboczy nie można umieścić w kolejce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-432">
              <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-433">W odróżnieniu od <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metody <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> nie propaguje stosu wywołującego do wątku roboczego.</span><span class="sxs-lookup"><span data-stu-id="ae770-433">Unlike the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method, <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="ae770-434">Dzięki temu kod utratę wywołania stosu, a tym samym do podniesienia swoich uprawnień zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="ae770-434">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae770-435">Za pomocą <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> może przypadkowo otwierają lukę w zabezpieczeniach.</span><span class="sxs-lookup"><span data-stu-id="ae770-435">Using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="ae770-436">Zabezpieczenia dostępu kodu określa jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</span><span class="sxs-lookup"><span data-stu-id="ae770-436">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="ae770-437">Podczas pracy znajduje się w kolejce przy użyciu wątek puli wątków <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, stosu wątku z puli wątków nie będzie miał kontekście rzeczywistych obiektów wywołujących.</span><span class="sxs-lookup"><span data-stu-id="ae770-437">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="ae770-438">Złośliwy kod może być w stanie wykorzystać ten element, aby uniknąć sprawdzania uprawnień.</span><span class="sxs-lookup"><span data-stu-id="ae770-438">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="ae770-439">Obiekt wywołujący nie posiada wymaganych uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-439">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="ae770-440">Wystąpił stan braku pamięci.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-440">An out-of-memory condition was encountered.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="ae770-441">Element roboczy nie można umieścić w kolejce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-441">The work item could not be queued.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ae770-442">
            <paramref name="callBack" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-442">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ae770-443">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-443">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ae770-444">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-444">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ae770-445">Rejestruje delegata oczekiwania <see cref="T:System.Threading.WaitHandle" />, ale nie propaguje stosu wywołującego do wątku roboczego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-445">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="ae770-446">
            <see cref="T:System.Threading.WaitHandle" /> Do zarejestrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-446">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="ae770-447">Użyj <see cref="T:System.Threading.WaitHandle" /> innych niż <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-447">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="ae770-448">Pełnomocnika do wywołania, gdy <c>waitObject</c> zasygnalizowania parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-448">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-449">Obiekt, który jest przekazywany do obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-449">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="ae770-450">Limit czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-450">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="ae770-451">Jeśli <c>millisecondsTimeOutInterval</c> parametr ma wartość 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-451">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="ae770-452">Jeśli <c>millisecondsTimeOutInterval</c> wynosi -1, nigdy nie upływa interwał limitu czasu funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-452">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="ae770-453">
            <see langword="true" /> Aby wskazać, że wątek nie jest już będzie czekać <c>waitObject</c> parametru po wywołaniu delegata; <see langword="false" /> resetowany czasomierz za każdym razem, gdy kończy operacji oczekiwania, dopóki nie zostanie wyrejestrowany czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-453">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-454">Rejestruje delegata oczekiwania <see cref="T:System.Threading.WaitHandle" />, za pomocą całkowita 32-bitowych dla limitu czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-454">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="ae770-455">Ta metoda nie propaguje stosu wywołującego do wątku roboczego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-455">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-456">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> Obiektu, który może służyć do anulowania operacji oczekiwania zarejestrowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-456">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-457">W odróżnieniu od <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> nie propaguje stosu wywołującego do wątku roboczego.</span><span class="sxs-lookup"><span data-stu-id="ae770-457">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="ae770-458">Dzięki temu kod utratę wywołania stosu, a tym samym do podniesienia swoich uprawnień zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="ae770-458">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae770-459">Za pomocą <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> może przypadkowo otwierają lukę w zabezpieczeniach.</span><span class="sxs-lookup"><span data-stu-id="ae770-459">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="ae770-460">Zabezpieczenia dostępu kodu określa jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</span><span class="sxs-lookup"><span data-stu-id="ae770-460">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="ae770-461">Podczas pracy znajduje się w kolejce przy użyciu wątek puli wątków <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, stosu wątku z puli wątków nie będzie miał kontekście rzeczywistych obiektów wywołujących.</span><span class="sxs-lookup"><span data-stu-id="ae770-461">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="ae770-462">Złośliwy kod może być w stanie wykorzystać ten element, aby uniknąć sprawdzania uprawnień.</span><span class="sxs-lookup"><span data-stu-id="ae770-462">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="ae770-463">Za pomocą <xref:System.Threading.Mutex> dla `waitObject` nie zapewnia wzajemne wykluczenie dla wywołania zwrotne, ponieważ podstawowego interfejsu API Win32 używa domyślnego `WT_EXECUTEDEFAULT` Flaga, dzięki czemu każdy wywołania zwrotnego jest wysyłane w oddzielnym wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-463">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="ae770-464">Po zakończeniu przy użyciu <xref:System.Threading.RegisteredWaitHandle> , jest zwracana przez tę metodę, należy wywołać jej <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodę, aby zwolnić odwołania do dojścia oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-464">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="ae770-465">Firma Microsoft zaleca, aby zawsze wywołujesz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody, nawet jeśli określisz `true` dla `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="ae770-465">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="ae770-466">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie Jeśli wywołasz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizatora.</span><span class="sxs-lookup"><span data-stu-id="ae770-466">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ae770-467">
            <paramref name="millisecondsTimeOutInterval" /> Parametr jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-467">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="ae770-468">Obiekt wywołujący nie posiada wymaganych uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-468">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ae770-469">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-469">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ae770-470">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-470">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="ae770-471">
            <see cref="T:System.Threading.WaitHandle" /> Do zarejestrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-471">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="ae770-472">Użyj <see cref="T:System.Threading.WaitHandle" /> innych niż <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-472">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="ae770-473">Pełnomocnika do wywołania, gdy <c>waitObject</c> zasygnalizowania parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-473">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-474">Obiekt, który jest przekazywany do obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-474">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="ae770-475">Limit czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-475">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="ae770-476">Jeśli <c>millisecondsTimeOutInterval</c> parametr ma wartość 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-476">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="ae770-477">Jeśli <c>millisecondsTimeOutInterval</c> wynosi -1, nigdy nie upływa interwał limitu czasu funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-477">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="ae770-478">
            <see langword="true" /> Aby wskazać, że wątek nie jest już będzie czekać <c>waitObject</c> parametru po wywołaniu delegata; <see langword="false" /> resetowany czasomierz za każdym razem, gdy kończy operacji oczekiwania, dopóki nie zostanie wyrejestrowany czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-478">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-479">Rejestruje delegata oczekiwania <see cref="T:System.Threading.WaitHandle" />, określając całkowita 64-bitowych limitu czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-479">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="ae770-480">Ta metoda nie propaguje stosu wywołującego do wątku roboczego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-480">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-481">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> Obiektu, który może służyć do anulowania operacji oczekiwania zarejestrowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-481">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-482">W odróżnieniu od <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> nie propaguje stosu wywołującego do wątku roboczego.</span><span class="sxs-lookup"><span data-stu-id="ae770-482">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="ae770-483">Dzięki temu kod utratę wywołania stosu, a tym samym do podniesienia swoich uprawnień zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="ae770-483">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae770-484">Za pomocą <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> może przypadkowo otwierają lukę w zabezpieczeniach.</span><span class="sxs-lookup"><span data-stu-id="ae770-484">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="ae770-485">Zabezpieczenia dostępu kodu określa jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</span><span class="sxs-lookup"><span data-stu-id="ae770-485">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="ae770-486">Podczas pracy znajduje się w kolejce przy użyciu wątek puli wątków <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, stosu wątku z puli wątków nie będzie miał kontekście rzeczywistych obiektów wywołujących.</span><span class="sxs-lookup"><span data-stu-id="ae770-486">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="ae770-487">Złośliwy kod może być w stanie wykorzystać ten element, aby uniknąć sprawdzania uprawnień.</span><span class="sxs-lookup"><span data-stu-id="ae770-487">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="ae770-488">Za pomocą <xref:System.Threading.Mutex> dla `waitObject` nie zapewnia wzajemne wykluczenie dla wywołania zwrotne, ponieważ podstawowego interfejsu API Win32 używa domyślnego `WT_EXECUTEDEFAULT` Flaga, dzięki czemu każdy wywołania zwrotnego jest wysyłane w oddzielnym wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-488">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="ae770-489">Po zakończeniu przy użyciu <xref:System.Threading.RegisteredWaitHandle> , jest zwracana przez tę metodę, należy wywołać jej <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodę, aby zwolnić odwołania do dojścia oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-489">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="ae770-490">Firma Microsoft zaleca, aby zawsze wywołujesz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody, nawet jeśli określisz `true` dla `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="ae770-490">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="ae770-491">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie Jeśli wywołasz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizatora.</span><span class="sxs-lookup"><span data-stu-id="ae770-491">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ae770-492">
            <paramref name="millisecondsTimeOutInterval" /> Parametr jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-492">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="ae770-493">Obiekt wywołujący nie posiada wymaganych uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-493">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ae770-494">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-494">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ae770-495">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-495">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="ae770-496">
            <see cref="T:System.Threading.WaitHandle" /> Do zarejestrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-496">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="ae770-497">Użyj <see cref="T:System.Threading.WaitHandle" /> innych niż <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-497">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="ae770-498">Pełnomocnika do wywołania, gdy <c>waitObject</c> zasygnalizowania parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-498">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-499">Obiekt, który jest przekazywany do obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-499">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="ae770-500">Limit czasu, reprezentowane przez <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-500">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="ae770-501">Jeśli <c>limitu czasu</c> jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-501">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="ae770-502">Jeśli <c>limitu czasu</c> wynosi -1, nigdy nie upływa interwał limitu czasu funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-502">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="ae770-503">
            <see langword="true" /> Aby wskazać, że wątek nie jest już będzie czekać <c>waitObject</c> parametru po wywołaniu delegata; <see langword="false" /> resetowany czasomierz za każdym razem, gdy kończy operacji oczekiwania, dopóki nie zostanie wyrejestrowany czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-503">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-504">Rejestruje delegata oczekiwania <see cref="T:System.Threading.WaitHandle" />, określanie <see cref="T:System.TimeSpan" /> wartość limitu czasu. Ta metoda nie propaguje stosu wywołującego do wątku roboczego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-504">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-505">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> Obiektu, który może służyć do anulowania operacji oczekiwania zarejestrowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-505">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-506">W odróżnieniu od <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> nie propaguje stosu wywołującego do wątku roboczego.</span><span class="sxs-lookup"><span data-stu-id="ae770-506">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="ae770-507">Dzięki temu kod utratę wywołania stosu, a tym samym do podniesienia swoich uprawnień zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="ae770-507">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae770-508">Za pomocą <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> może przypadkowo otwierają lukę w zabezpieczeniach.</span><span class="sxs-lookup"><span data-stu-id="ae770-508">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="ae770-509">Zabezpieczenia dostępu kodu określa jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</span><span class="sxs-lookup"><span data-stu-id="ae770-509">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="ae770-510">Podczas pracy znajduje się w kolejce przy użyciu wątek puli wątków <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, stosu wątku z puli wątków nie będzie miał kontekście rzeczywistych obiektów wywołujących.</span><span class="sxs-lookup"><span data-stu-id="ae770-510">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="ae770-511">Złośliwy kod może być w stanie wykorzystać ten element, aby uniknąć sprawdzania uprawnień.</span><span class="sxs-lookup"><span data-stu-id="ae770-511">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="ae770-512">Za pomocą <xref:System.Threading.Mutex> dla `waitObject` nie zapewnia wzajemne wykluczenie dla wywołania zwrotne, ponieważ podstawowego interfejsu API Win32 używa domyślnego `WT_EXECUTEDEFAULT` Flaga, dzięki czemu każdy wywołania zwrotnego jest wysyłane w oddzielnym wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-512">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="ae770-513">Po zakończeniu przy użyciu <xref:System.Threading.RegisteredWaitHandle> , jest zwracana przez tę metodę, należy wywołać jej <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodę, aby zwolnić odwołania do dojścia oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-513">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="ae770-514">Firma Microsoft zaleca, aby zawsze wywołujesz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody, nawet jeśli określisz `true` dla `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="ae770-514">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="ae770-515">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie Jeśli wywołasz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizatora.</span><span class="sxs-lookup"><span data-stu-id="ae770-515">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ae770-516">
            <paramref name="timeout" /> Parametr jest mniejsza niż -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-516">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ae770-517">
            <paramref name="timeout" /> Parametru jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-517">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="ae770-518">Obiekt wywołujący nie posiada wymaganych uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-518">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ae770-519">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-519">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ae770-520">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-520">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="ae770-521">
            <see cref="T:System.Threading.WaitHandle" /> Do zarejestrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-521">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="ae770-522">Użyj <see cref="T:System.Threading.WaitHandle" /> innych niż <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-522">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="ae770-523">Pełnomocnika do wywołania, gdy <c>waitObject</c> zasygnalizowania parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-523">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="ae770-524">Obiekt, który jest przekazywany do obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-524">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="ae770-525">Limit czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-525">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="ae770-526">Jeśli <c>millisecondsTimeOutInterval</c> parametr ma wartość 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-526">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="ae770-527">Jeśli <c>millisecondsTimeOutInterval</c> wynosi -1, nigdy nie upływa interwał limitu czasu funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-527">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="ae770-528">
            <see langword="true" /> Aby wskazać, że wątek nie jest już będzie czekać <c>waitObject</c> parametru po wywołaniu delegata; <see langword="false" /> resetowany czasomierz za każdym razem, gdy kończy operacji oczekiwania, dopóki nie zostanie wyrejestrowany czas oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-528">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae770-529">Rejestruje delegata oczekiwania <see cref="T:System.Threading.WaitHandle" />, określając 32-bitowej nieoznaczonej liczby całkowitej limitu czasu w milisekundach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-529">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="ae770-530">Ta metoda nie propaguje stosu wywołującego do wątku roboczego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-530">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae770-531">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> Obiektu, który może służyć do anulowania operacji oczekiwania zarejestrowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-531">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae770-532">W odróżnieniu od <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> nie propaguje stosu wywołującego do wątku roboczego.</span><span class="sxs-lookup"><span data-stu-id="ae770-532">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="ae770-533">Dzięki temu kod utratę wywołania stosu, a tym samym do podniesienia swoich uprawnień zabezpieczeń.</span><span class="sxs-lookup"><span data-stu-id="ae770-533">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ae770-534">Za pomocą <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> może przypadkowo otwierają lukę w zabezpieczeniach.</span><span class="sxs-lookup"><span data-stu-id="ae770-534">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="ae770-535">Zabezpieczenia dostępu kodu określa jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</span><span class="sxs-lookup"><span data-stu-id="ae770-535">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="ae770-536">Podczas pracy znajduje się w kolejce przy użyciu wątek puli wątków <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, stosu wątku z puli wątków nie będzie miał kontekście rzeczywistych obiektów wywołujących.</span><span class="sxs-lookup"><span data-stu-id="ae770-536">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="ae770-537">Złośliwy kod może być w stanie wykorzystać ten element, aby uniknąć sprawdzania uprawnień.</span><span class="sxs-lookup"><span data-stu-id="ae770-537">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="ae770-538">Za pomocą <xref:System.Threading.Mutex> dla `waitObject` nie zapewnia wzajemne wykluczenie dla wywołania zwrotne, ponieważ podstawowego interfejsu API Win32 używa domyślnego `WT_EXECUTEDEFAULT` Flaga, dzięki czemu każdy wywołania zwrotnego jest wysyłane w oddzielnym wątku z puli wątków.</span><span class="sxs-lookup"><span data-stu-id="ae770-538">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="ae770-539">Po zakończeniu przy użyciu <xref:System.Threading.RegisteredWaitHandle> , jest zwracana przez tę metodę, należy wywołać jej <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodę, aby zwolnić odwołania do dojścia oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="ae770-539">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="ae770-540">Firma Microsoft zaleca, aby zawsze wywołujesz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metody, nawet jeśli określisz `true` dla `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="ae770-540">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="ae770-541">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie Jeśli wywołasz <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizatora.</span><span class="sxs-lookup"><span data-stu-id="ae770-541">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="ae770-542">Obiekt wywołujący nie posiada wymaganych uprawnień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-542">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ae770-543">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-543">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ae770-544">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae770-544">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>