<Type Name="WaitCallback" FullName="System.Threading.WaitCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b3440ac2a814ac3b46ed007085faf8975b8c5cc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605655" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitCallback(object state);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitCallback(state As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitCallback(System::Object ^ state);" />
  <TypeSignature Language="F#" Value="type WaitCallback = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Obiekt zawierający informacje mają być używane przez metodę wywołania zwrotnego.</param>
    <summary>Reprezentuje metodę wywołania zwrotnego do wykonania wątku puli wątków.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitCallback> reprezentuje metodę wywołania zwrotnego, która ma być wykonana na <xref:System.Threading.ThreadPool> wątku. Tworzenie obiektu delegowanego przez przekazanie metodę wywołania zwrotnego do <xref:System.Threading.WaitCallback> konstruktora. Metodę musi mieć podpisu, pokazano poniżej.  
  
 Zadania do wykonania w kolejce przez przekazanie <xref:System.Threading.WaitCallback> przekazać <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=nameWithType>. Metodę wywołania zwrotnego wykonuje po udostępnieniu wątku puli wątków.  
  
> [!NOTE]
>  Użytkownicy programu Visual Basic można pominąć <xref:System.Threading.WaitCallback> Konstruktor i po prostu użyj `AddressOf` operator podczas przekazywania metody wywołania zwrotnego do <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic automatycznie wywołuje konstruktor delegata poprawne.  
  
 Jeśli do przekazywania informacji do metody wywołania zwrotnego należy utworzyć obiekt, który zawiera niezbędne informacje i przekaż go do <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> gdy kolejka zadania do wykonania. Zawsze wykonuje metodę wywołania zwrotnego, `state` parametr zawiera ten obiekt.  
  
 Aby uzyskać więcej informacji o używaniu wywołań zwrotnych do synchronizowania wątków z puli wątków, zobacz [puli wątków zarządzanych](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 Ta sekcja zawiera dwa przykłady. W pierwszym przykładzie pokazano, jak można dodać do kolejki prostych zadań do wykonania w puli wątków.  
  
 Drugim przykładzie pokazano, jak można w kolejce zadania i przekazywania informacji do niej.  
  
 **Przykład 1**  
  
 Ten przykład przedstawia sposób użycia <xref:System.Threading.WaitCallback> delegata do kolejki zadań do wykonania w puli wątków. Przykład kodu wykorzystuje <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> przeciążenie metody można umieścić w kolejce zadań, która jest reprezentowana przez <xref:System.Threading.WaitCallback> który opakowuje `ThreadProc` metody do wykonania, gdy wątek staje się dostępna. Informacje o zadaniu są dostarczane z tego przeciążenia. W związku z tym informacje, które są dostępne dla `ThreadProc` metody jest ograniczona do metody należy do obiektu.  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 **Przykład 2**  
  
 W tym przykładzie przedstawiono sposób tworzenia obiektu, który zawiera informacje o zadaniu. Ilustruje też sposób przekazywania tego obiektu do umieszczonych w kolejce do wykonania zadania w puli wątków.  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadPool" />
  </Docs>
</Type>