<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WaitHandle.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59c30c9bf2d271da2afe9d173213a99d04fceefda.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c30c9bf2d271da2afe9d173213a99d04fceefda</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitHandle">
          <source>Encapsulates operating system–specific objects that wait for exclusive access to shared resources.</source>
          <target state="translated">Hermetyzuje obiekty specyficzne dla systemu operacyjnego, które poczekaj, aż wyłącznego dostępu do zasobów udostępnionych.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> class encapsulates Win32 synchronization handles, and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> Klasa hermetyzuje dojścia synchronizacji Win32 i jest używana do reprezentowania wszystkich obiektów synchronizacji w czasie wykonywania, które umożliwiają wielu operacji oczekiwania.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>For a comparison of wait handles with other synchronization objects, see <bpt id="p1">[</bpt>Overview of Synchronization Primitives<ept id="p1">](~/docs/standard/threading/overview-of-synchronization-primitives.md)</ept>.</source>
          <target state="translated">Porównanie uchwyty oczekiwania z innymi obiektami synchronizacji, zobacz <bpt id="p1">[</bpt>podstawowych Omówienie synchronizacji<ept id="p1">](~/docs/standard/threading/overview-of-synchronization-primitives.md)</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> class itself is abstract.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> Sama klasa jest abstrakcyjna.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>Classes derived from <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> methods to block while waiting for access to shared resources.</source>
          <target state="translated">Klasy wyprowadzone z <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> zdefiniować mechanizm sygnalizowania biorąc lub zwalniania dostęp do udostępnionych zasobów, ale korzystają z dziedziczonego <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> metod, które mają być blokowane podczas oczekiwania na dostęp do zasobów udostępnionych.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>The classes derived from <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> include:</source>
          <target state="translated">Klasy pochodne <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> obejmują:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> Klasy.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>See <bpt id="p1">[</bpt>Mutexes<ept id="p1">](~/docs/standard/threading/mutexes.md)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>muteksy<ept id="p1">](~/docs/standard/threading/mutexes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class and its derived classes, <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> Klasy i jej klas pochodnych <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> i <ph id="ph3">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>See <bpt id="p1">[</bpt>EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent<ept id="p1">](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>EventWaitHandle, autoresetevent —, CountdownEvent, ManualResetEvent<ept id="p1">](~/docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> Klasy.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>See <bpt id="p1">[</bpt>Semaphore and SemaphoreSlim<ept id="p1">](~/docs/standard/threading/semaphore-and-semaphoreslim.md)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>semafor i klasa SemaphoreSlim<ept id="p1">](~/docs/standard/threading/semaphore-and-semaphoreslim.md)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>Threads can block on an individual wait handle by calling the instance method <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, which is inherited by classes derived from <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Zablokować wątków w dojściu do poszczególnych oczekiwania przez wywołanie metody wystąpienia <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, który jest dziedziczone przez klasy pochodzące od <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>The derived classes of <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> differ in their thread affinity.</source>
          <target state="translated">Klasy pochodne <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> różnią się w ich koligacji wątku.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>Event wait handles (<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</source>
          <target state="translated">Uchwyty oczekiwania zdarzenia (<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, i <ph id="ph3">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>) i semaforów nie mają koligacji wątku; którymkolwiek wątku można zasygnalizować dojście oczekiwania zdarzenia lub semafora.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <ph id="ph1">&lt;xref:System.Threading.Mutex.ReleaseMutex%2A&gt;</ph> method on a mutex that it does not own.</source>
          <target state="translated">Z drugiej strony, muteksy, mają koligacji wątku; Wątek, który jest właścicielem obiektu mutex musi zwolnić go i jest zwracany wyjątek, jeśli wątek wywołuje <ph id="ph1">&lt;xref:System.Threading.Mutex.ReleaseMutex%2A&gt;</ph> metody dla obiektu mutex, który nie jest właścicielem.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> class derives from <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, these classes can be used to synchronize the activities of threads across application domain boundaries.</source>
          <target state="translated">Ponieważ <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> pochodną klasy <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, te klasy mogą być używane do synchronizowania działania wątków poza granice domeny aplikacji.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>In addition to its derived classes, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> class has a number of static methods that block a thread until one or more synchronization objects receive a signal..</source>
          <target state="translated">Oprócz jej klas pochodnych <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> klasa ma kilka metod statycznych, które blokują wątku, dopóki jedna lub więcej obiektów synchronizacji odebrał sygnału.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>These include:</source>
          <target state="translated">Należą do nich następujące elementy:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph>, which allows a thread to signal one wait handle and immediately wait on another.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph>, dzięki czemu wątek sygnału jeden dojście oczekiwania i natychmiast czekać na innym.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>, which allows a thread to wait until all the wait handles in an array receive a signal.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>, dzięki czemu wątek poczekać, aż wszystkie dojścia oczekiwania w tablicy odebrał sygnału.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, which allows a thread to wait until any one of a specified set of wait handles has been signaled .</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, dzięki czemu wątek poczekać, aż któregokolwiek z określonego zestawu uchwyty oczekiwania został sygnalizowane.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</source>
          <target state="translated">Przeciążenia metody te zapewniają interwałów limitu czasu dla porzucanie czas oczekiwania oraz możliwość zakończyć kontekstu synchronizacji przed wprowadzeniem czas oczekiwania, dzięki czemu inne wątki używać kontekstu synchronizacji.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Ten typ implementuje <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Po zakończeniu przy użyciu tego typu lub typu pochodnego w bezpośrednio lub pośrednio należy usunąć z niego.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Do usuwania tego typu, należy wywołać jej <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> metody w <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloku.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak <ph id="ph1">`using`</ph> (w języku C#) lub <ph id="ph2">`Using`</ph> (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfejsu tematu.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> implements the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> pattern.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> implementuje <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> wzorca.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>See <bpt id="p1">[</bpt>Dispose Pattern<ept id="p1">](~/docs/standard/design-guidelines/dispose-pattern.md)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>wzorzec Dispose<ept id="p1">](~/docs/standard/design-guidelines/dispose-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>When you derive from <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> property to store your native handle operating system handle.</source>
          <target state="translated">Jeśli pochodzi od <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph>, użyj <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> właściwości do przechowywania uchwyt macierzysty uchwyt systemu operacyjnego.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>You do not need to override the protected <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Dispose%2A&gt;</ph> method unless you use additional unmanaged resources.</source>
          <target state="translated">Nie trzeba zastąpić chronionej <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Dispose%2A&gt;</ph> metody chyba że są używane dodatkowe zasoby niezarządzane.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph> class.</source>
          <target state="translated">Poniższy kod przedstawia przykład jak dwa wątki można wykonać zadania w tle podczas głównym wątku czeka na zakończenie przy użyciu statycznych zadań <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metody <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitHandle">
          <source>This type is thread safe.</source>
          <target state="translated">Ten typ jest bezpieczny wątkowo.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.Close">
          <source>Releases all resources held by the current <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</source>
          <target state="translated">Zwalnia wszystkie zasoby zajmowane przez bieżące <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Close">
          <source>This method is the public implementation of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> method for the <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> class and its derived classes.</source>
          <target state="translated">Ta metoda jest implementacją publicznego <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> metodę <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> klasy i jej klas pochodnych.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Close">
          <source>It provides a standard implementation that calls the <ph id="ph1">`Dispose(Boolean)`</ph> overload with a <ph id="ph2">`true`</ph> argument and then calls the <ph id="ph3">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Zapewnia standardowej implementacji, która wywołuje <ph id="ph1">`Dispose(Boolean)`</ph> przeciążenia z <ph id="ph2">`true`</ph> argument, a następnie wywołania <ph id="ph3">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Close">
          <source>Call this method to release all resources held by an instance of <ph id="ph1">`WaitHandle`</ph> or a derived class.</source>
          <target state="translated">Wywołanie tej metody, aby zwolnić wszystkie zasoby zajmowane przez wystąpienia <ph id="ph1">`WaitHandle`</ph> lub klasy pochodnej.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Close">
          <source>Once this method is called, references to the current instance cause undefined behavior.</source>
          <target state="translated">Gdy ta metoda jest wywoływana, odwołania do bieżącego wystąpienia spowodować niezdefiniowane zachowanie.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Close">
          <source>Always call <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.WaitHandle.Dispose&gt;</ph> before you release your last reference to the <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Wywoływanie zawsze <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.WaitHandle.Dispose&gt;</ph> przed zwolnieniem ostatniego odwołania do <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Close">
          <source>Otherwise, the resources it is using will not be freed.</source>
          <target state="translated">W przeciwnym razie zasoby, które używa nie zostanie zwolniona.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Close">
          <source>You should override the <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> method to release resources allocated in derived classes.</source>
          <target state="translated">Należy zastąpić <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> metodę, aby zwolnić zasoby przydzielone w klasach pochodnych.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitHandle">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> class</source>
          <target state="translated">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> — klasa</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> class.</source>
          <target state="translated">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Dispose">
          <source>This method is equivalent to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> method.</source>
          <target state="translated">Ta metoda jest odpowiednikiem <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.WaitHandle.Dispose&gt;</ph> before you release your last reference to the <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Wywoływanie zawsze <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.WaitHandle.Dispose&gt;</ph> przed zwolnieniem ostatniego odwołania do <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Dispose">
          <source>Otherwise, the resources it is using will not be freed.</source>
          <target state="translated">W przeciwnym razie zasoby, które używa nie zostanie zwolniona.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zwolnić zasoby zarządzane i niezarządzane; <ph id="ph2">&lt;see langword="false" /&gt;</ph> aby zwolnić tylko zasoby niezarządzane.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
          <source>When overridden in a derived class, releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, zwalnia zasoby niezarządzane używane przez <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>i opcjonalnie zwalnia zasoby zarządzane.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
          <source>This method is called by the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.Dispose&gt;</ph> methods with the <ph id="ph3">`explicitDisposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Ta metoda jest wywoływana przez <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.WaitHandle.Dispose&gt;</ph> metod <ph id="ph3">`explicitDisposing`</ph> ustawiono parametr <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`explicitDisposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph> object references.</source>
          <target state="translated">Gdy <ph id="ph1">`explicitDisposing`</ph> parametr jest <ph id="ph2">`true`</ph>, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph> obiektu odwołania.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
          <source>You should override the <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /&gt;</ph> method to release resources allocated in derived classes.</source>
          <target state="translated">Należy zastąpić <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /&gt;</ph> metodę, aby zwolnić zasoby przydzielone w klasach pochodnych.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.WaitHandle.Dispose" /&gt;</ph> method can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.Close" /&gt;</ph> Lub <ph id="ph2">&lt;see cref="M:System.Threading.WaitHandle.Dispose" /&gt;</ph> metodę można wywoływać wielokrotnie przez inne obiekty.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
          <source>When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> or <ph id="ph2">&lt;see langword="Close" /&gt;</ph>.</source>
          <target state="translated">W przypadku przesłaniania tej metody, należy uważać, aby nie odwołują się obiekty, które zostały wcześniej zlikwidowane w wywołaniu wcześniejszych <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> lub <ph id="ph2">&lt;see langword="Close" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Threading.WaitHandle.Handle">
          <source>Gets or sets the native operating system handle.</source>
          <target state="translated">Pobiera lub ustawia uchwyt macierzysty system operacyjny.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.Handle">
          <source>An <ph id="ph1">&lt;see langword="IntPtr" /&gt;</ph> representing the native operating system handle.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="IntPtr" /&gt;</ph> Reprezentujący uchwyt macierzysty system operacyjny.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.Handle">
          <source>The default is the value of the <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.InvalidHandle" /&gt;</ph> field.</source>
          <target state="translated">Wartość domyślna to wartość <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.InvalidHandle" /&gt;</ph> pola.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.Handle">
          <source>Assigning a new value to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Handle%2A&gt;</ph> property does not close the previous handle.</source>
          <target state="translated">Przypisywanie nową wartość do <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Handle%2A&gt;</ph> właściwości nie zamyka poprzedniej dojścia.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.Handle">
          <source>This can result in a leaked handle.</source>
          <target state="translated">Może to spowodować, że ujawnione dojścia.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.Handle">
          <source>Do not use this property in the .NET Framework version 2.0 or later; use the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> property instead.</source>
          <target state="translated">Nie należy używać tej właściwości w programie .NET Framework w wersji 2.0 lub nowszy; Użyj <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> właściwości zamiast tego.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.Handle">
          <source>Setting this property to a valid handle also sets the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> property, but setting it to <ph id="ph2">&lt;xref:System.Threading.WaitHandle.InvalidHandle&gt;</ph> can result in a leaked handle.</source>
          <target state="translated">Ustawienie tej właściwości na prawidłowy uchwyt również zestawy <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> właściwości, ale ustawieniem dla niego <ph id="ph2">&lt;xref:System.Threading.WaitHandle.InvalidHandle&gt;</ph> może spowodować uchwyt ujawnione.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.Handle">
          <source>Requires full trust for the immediate caller to set the property value.</source>
          <target state="translated">Wymagane jest pełne zaufanie do bezpośredniego obiektu wywołującego można ustawić wartości właściwości.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.Handle">
          <source>This member cannot be set by partially trusted or transparent code.</source>
          <target state="translated">Nie można ustawić tego elementu członkowskiego przez kod częściowo zaufany lub przezroczyste.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.Handle">
          <source>Derived types must have <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph> to set the property value.</source>
          <target state="translated">Typy pochodne muszą mieć <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph> można ustawić wartości właściwości.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="F:System.Threading.WaitHandle.InvalidHandle">
          <source>Represents an invalid native operating system handle.</source>
          <target state="translated">Reprezentuje dojścia nieprawidłowy natywnego systemu operacyjnego.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="F:System.Threading.WaitHandle.InvalidHandle">
          <source>This field is read-only.</source>
          <target state="translated">To pole jest tylko do odczytu.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Threading.WaitHandle.InvalidHandle">
          <source>Used internally to initialize the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Handle%2A&gt;</ph> property.</source>
          <target state="translated">Używana wewnętrznie w celu zainicjowania <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Handle%2A&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Threading.WaitHandle.InvalidHandle">
          <source>You can use this value to determine whether the <ph id="ph1">&lt;see cref="P:System.Threading.WaitHandle.Handle" /&gt;</ph> property contains a valid native operating system handle.</source>
          <target state="translated">Tej wartości można użyć, aby określić, czy <ph id="ph1">&lt;see cref="P:System.Threading.WaitHandle.Handle" /&gt;</ph> właściwość zawiera dojście prawidłowego natywnego systemu operacyjnego.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>Gets or sets the native operating system handle.</source>
          <target state="translated">Pobiera lub ustawia uchwyt macierzysty system operacyjny.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /&gt;</ph> representing the native operating system handle.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /&gt;</ph> reprezentujący uchwyt macierzysty system operacyjny.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>When you assign a new value to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> property, the previous handle will be closed when the previous <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> object is collected.</source>
          <target state="translated">Po przypisaniu nową wartość do <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> właściwość poprzedniej dojście zostanie zamknięty kiedy poprzedniej <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> zbieranych obiektu.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>Do not manually close the handle, because this results in an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> when the <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> attempts to close the handle.</source>
          <target state="translated">Nie ręcznie zamknąć uchwytu, ponieważ powoduje to <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> podczas <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> próbuje zamknąć dojścia.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> implements the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> pattern.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> implementuje <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> wzorca.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>See <bpt id="p1">[</bpt>Dispose Pattern<ept id="p1">](~/docs/standard/design-guidelines/dispose-pattern.md)</ept>.</source>
          <target state="translated">Zobacz <bpt id="p1">[</bpt>wzorzec Dispose<ept id="p1">](~/docs/standard/design-guidelines/dispose-pattern.md)</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>When you derive from <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> property to store your native handle operating system handle.</source>
          <target state="translated">Jeśli pochodzi od <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph>, użyj <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A&gt;</ph> właściwości do przechowywania uchwyt macierzysty uchwyt systemu operacyjnego.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>You do not need to override the protected <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Dispose%2A&gt;</ph> method unless you use additional unmanaged resources.</source>
          <target state="translated">Nie trzeba zastąpić chronionej <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Dispose%2A&gt;</ph> metody chyba że są używane dodatkowe zasoby niezarządzane.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.WaitHandle.SafeWaitHandle">
          <source>Derived types must have <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph> to call this member.</source>
          <target state="translated">Typy pochodne muszą mieć <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph> do wywołania tego elementu członkowskiego.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitHandle">
          <source>Signals one <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> and waits on another.</source>
          <target state="translated">Sygnały jedną <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> i czeka na innym.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to signal.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> Sygnalizują.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to wait on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> Oczekiwania.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>Signals one <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> and waits on another.</source>
          <target state="translated">Sygnały jedną <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> i czeka na innym.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli zarówno sygnał, jak i czas oczekiwania zakończy się pomyślnie; Jeśli czas oczekiwania nie zostanie ukończone, metoda zwraca.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>This operation is not guaranteed to be atomic.</source>
          <target state="translated">Ta operacja nie jest gwarantowana niepodzielnych.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>After the current thread signals <ph id="ph1">`toSignal`</ph> but before it waits on <ph id="ph2">`toWaitOn`</ph>, a thread that is running on another processor might signal <ph id="ph3">`toWaitOn`</ph> or wait on it.</source>
          <target state="translated">Po bieżącym wątku sygnały <ph id="ph1">`toSignal`</ph> , ale przed oczekuje <ph id="ph2">`toWaitOn`</ph>, wątku, który działa na innego procesora może sygnalizować <ph id="ph3">`toWaitOn`</ph> lub zaczekaj na nim.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</source>
          <target state="translated">Poniższy przykład kodu wykorzystuje <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29&gt;</ph> przeciążenie metody, aby zezwolić na sygnał zablokowanych wątków, a następnie poczekaj zakończenie wątku zadania głównego wątku.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>The example starts five threads, allows them to block on an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph> flag, and then releases one thread each time the user presses the ENTER key.</source>
          <target state="translated">Przykład rozpoczyna pięć wątków, pozwala na blokowanie na <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> utworzone za pomocą <ph id="ph2">&lt;xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType&gt;</ph> flagi, a następnie jeden wątek wersjach czasu naciśnięciu klawisza ENTER.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>The example then queues another five threads and releases them all using an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with the <ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">W przykładzie następnie kolejki innego pięć wątków i zwalnia wszystkie przy użyciu <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> utworzone za pomocą <ph id="ph2">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph> flagi.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source><ph id="ph1">&lt;paramref name="toWaitOn" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toWaitOn" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>The method was called on a thread that has <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph>.</source>
          <target state="translated">Metoda została wywołana w wątku, który ma <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>This method is not supported on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ta metoda nie jest obsługiwana w systemie Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> is a semaphore, and it already has a full count.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> jest semafora i jest już pełna count.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to signal.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> Sygnalizują.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to wait on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> Oczekiwania.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>An integer that represents the interval to wait.</source>
          <target state="translated">Liczba całkowita, która reprezentuje interwału oczekiwania.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>If the value is <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, that is, -1, the wait is infinite.</source>
          <target state="translated">Jeśli wartość jest <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, -1, czas oczekiwania jest nieograniczony.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć domeny synchronizacji dla kontekstu przed oczekiwaniem (Jeśli w kontekście zsynchronizowane), a potem; ponownie pozyskać w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>Signals one <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</source>
          <target state="translated">Sygnały jedną <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> i czeka na innym określająca interwał limitu czasu, całkowita 32-bitowe i określanie, czy zamknąć domeny synchronizacji w kontekście przed wejściem czas oczekiwania.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if both the signal and the wait completed successfully, or <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the signal completed but the wait timed out.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli zarówno sygnał, jak i czas oczekiwania ukończone pomyślnie, lub <ph id="ph2">&lt;see langword="false" /&gt;</ph> jeśli sygnał ukończone, ale czas oczekiwania upłynął limit czasu.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>This operation is not guaranteed to be atomic.</source>
          <target state="translated">Ta operacja nie jest gwarantowana niepodzielnych.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>After the current thread signals <ph id="ph1">`toSignal`</ph> but before it waits on <ph id="ph2">`toWaitOn`</ph>, a thread that is running on another processor might signal <ph id="ph3">`toWaitOn`</ph> or wait on it.</source>
          <target state="translated">Po bieżącym wątku sygnały <ph id="ph1">`toSignal`</ph> , ale przed oczekuje <ph id="ph2">`toWaitOn`</ph>, wątku, który działa na innego procesora może sygnalizować <ph id="ph3">`toWaitOn`</ph> lub zaczekaj na nim.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>It tests the state of the <ph id="ph1">`toWaitOn`</ph> and returns immediately.</source>
          <target state="translated">Sprawdza on stan <ph id="ph1">`toWaitOn`</ph> i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>Even if you are currently executing a method on a class that does not derive from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie pochodzi od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>The thread returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method completes.</source>
          <target state="translated">Wątek zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>This can be useful when the context-bound class has <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="toWaitOn" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toWaitOn" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>The method is called on a thread that has <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph>.</source>
          <target state="translated">Metoda jest wywoływana w wątku, który ma <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>This method is not supported on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ta metoda nie jest obsługiwana w systemie Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> cannot be signaled because it would exceed its maximum count.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> Nie może zostać zgłoszony, ponieważ zostałaby przekroczona maksymalna wartość licznika.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to signal.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> Sygnalizują.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to wait on.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> Oczekiwania.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the interval to wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący interwał oczekiwania.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>If the value is -1, the wait is infinite.</source>
          <target state="translated">Jeśli wartość wynosi -1, czas oczekiwania to nieskończoność.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć domeny synchronizacji dla kontekstu przed oczekiwaniem (Jeśli w kontekście zsynchronizowane), a potem; ponownie pozyskać w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>Signals one <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> and waits on another, specifying the time-out interval as a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> and specifying whether to exit the synchronization domain for the context before entering the wait.</source>
          <target state="translated">Sygnały jedną <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> i czeka na innym Określanie limitu czasu jako <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> i określanie, czy należy zakończyć domeny synchronizacji w kontekście przed wejściem czas oczekiwania.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if both the signal and the wait completed successfully, or <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the signal completed but the wait timed out.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli zarówno sygnał, jak i czas oczekiwania ukończone pomyślnie, lub <ph id="ph2">&lt;see langword="false" /&gt;</ph> jeśli sygnał ukończone, ale czas oczekiwania upłynął limit czasu.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>This operation is not guaranteed to be atomic.</source>
          <target state="translated">Ta operacja nie jest gwarantowana niepodzielnych.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>After the current thread signals <ph id="ph1">`toSignal`</ph> but before it waits on <ph id="ph2">`toWaitOn`</ph>, a thread that is running on another processor might signal <ph id="ph3">`toWaitOn`</ph> or wait on it.</source>
          <target state="translated">Po bieżącym wątku sygnały <ph id="ph1">`toSignal`</ph> , ale przed oczekuje <ph id="ph2">`toWaitOn`</ph>, wątku, który działa na innego procesora może sygnalizować <ph id="ph3">`toWaitOn`</ph> lub zaczekaj na nim.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>The maximum value for <ph id="ph1">`timeout`</ph> is <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Maksymalna wartość <ph id="ph1">`timeout`</ph> jest <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>If <ph id="ph1">`timeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>It tests the state of the <ph id="ph1">`toWaitOn`</ph> and returns immediately.</source>
          <target state="translated">Sprawdza on stan <ph id="ph1">`toWaitOn`</ph> i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>Even if you are currently executing a method on a class that does not derive from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie pochodzi od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>The thread returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method completes.</source>
          <target state="translated">Wątek zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>This can be useful when the context-bound class has <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="toWaitOn" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toWaitOn" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>The method was called on a thread that has <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph>.</source>
          <target state="translated">Metoda została wywołana w wątku, który ma <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>This method is not supported on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ta metoda nie jest obsługiwana w systemie Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> is a semaphore, and it already has a full count.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toSignal" /&gt;</ph> jest semafora i jest już pełna count.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> evaluates to a negative number of milliseconds other than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> daje w wyniku ujemną liczbę milisekund niż -1.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest większa niż <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitHandle">
          <source>Waits for all the elements in the specified array to receive a signal.</source>
          <target state="translated">Czeka na wszystkie elementy w określonej tablicy na odebrał sygnału.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>This array cannot contain multiple references to the same object.</source>
          <target state="translated">Ta tablica nie może zawierać wiele odwołań do tego samego obiektu.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>Waits for all the elements in the specified array to receive a signal.</source>
          <target state="translated">Czeka na wszystkie elementy w określonej tablicy na odebrał sygnału.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> when every element in <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> has received a signal; otherwise the method never returns.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Podczas każdego elementu w <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> otrzymał sygnał; w przeciwnym razie metoda zwraca nigdy nie.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is new in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> jest nowa w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>In previous versions, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when a mutex is abandoned.</source>
          <target state="translated">W poprzednich wersjach <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph> kiedy zostanie porzucony obiektu mutex.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>An abandoned mutex often indicates a serious coding error.</source>
          <target state="translated">Porzuconego elementu mutex często oznacza to poważny błąd kodowania.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
          <target state="translated">W przypadku obiektu mutex całego systemu może oznaczać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The exception contains information useful for debugging.</source>
          <target state="translated">Wyjątek zawiera informacje przydatne podczas debugowania.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns when all the handles are signaled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda zwraca wartość, gdy wszystkie dojścia są sygnalizowane.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>On some implementations, if more than 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach więcej niż 64 uchwyty są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>If the array contains duplicates, the call fails with a <ph id="ph1">&lt;xref:System.DuplicateWaitObjectException&gt;</ph>.</source>
          <target state="translated">Jeśli tablica zawiera duplikaty, połączenie kończy się niepowodzeniem z <ph id="ph1">&lt;xref:System.DuplicateWaitObjectException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method is not supported on threads that have <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda nie jest obsługiwana w wątkach, które mają <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>Calling this method overload is equivalent to calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> method overload and specifying -1 (or <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>) for <ph id="ph3">`millisecondsTimeout`</ph> and <ph id="ph4">`true`</ph> for <ph id="ph5">`exitContext`</ph>.</source>
          <target state="translated">Wywołanie metody przeciążenie tej metody jest odpowiednikiem wywołania <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> przeciążenie metody i określając -1 (lub <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>) dla <ph id="ph3">`millisecondsTimeout`</ph> i <ph id="ph4">`true`</ph> dla <ph id="ph5">`exitContext`</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak za pomocą puli wątków asynchronicznie utworzyć i zapisać do grupy plików.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>Each write operation is queued as a work item and signals when it is finished.</source>
          <target state="translated">Po zakończeniu każdej operacji zapisu jest w kolejce elementu roboczego i sygnałów.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The main thread waits for all the items to signal and then exits.</source>
          <target state="translated">Główny wątek oczekuje dla wszystkich elementów, które sygnalizują i kończy pracę.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements and the .NET Framework version is 2.0 or later.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 2.0 lub nowszej.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.ArgumentException" /&gt;</ph>, instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch wyjątku klasy podstawowej <ph id="ph1">&lt;see cref="T:System.ArgumentException" /&gt;</ph>, zamiast tego.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains elements that are duplicates.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera elementy, które są duplikatami.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> attribute is applied to the thread procedure for the current thread, and <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> contains more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> Atrybut jest stosowany do procedury wątku dla bieżącego wątku i <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> zawiera więcej niż jeden element.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 1.0 lub 1.1.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The wait terminated because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>This array cannot contain multiple references to the same object (duplicates).</source>
          <target state="translated">Ta tablica nie może zawierać wiele odwołań do tego samego obiektu (duplikatów).</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) będzie czekać w nieskończoność.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>Waits for all the elements in the specified array to receive a signal, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value to specify the time interval.</source>
          <target state="translated">Czeka na wszystkie elementy w określonej tablicy na sygnał, przy użyciu <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> wartość, aby określić interwał czasu.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> when every element in <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> has received a signal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Podczas każdego elementu w <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> otrzymał sygnał; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>It tests the state of the wait handles and returns immediately.</source>
          <target state="translated">Sprawdza stan uchwyty oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda zwraca wartość, gdy czas oczekiwania zakończenie, co oznacza, że gdy są sygnalizowane wszystkie dojścia lub przekroczenia limitu czasu.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>On some implementations, if more than 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach więcej niż 64 uchwyty są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>If there are duplicates in the array, the call fails with a <ph id="ph1">&lt;xref:System.DuplicateWaitObjectException&gt;</ph>.</source>
          <target state="translated">Jeśli istnieją duplikaty w tablicy, połączenie kończy się niepowodzeniem z <ph id="ph1">&lt;xref:System.DuplicateWaitObjectException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method is not supported on threads that have <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda nie jest obsługiwana w wątkach, które mają <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>Calling this method overload is the same as calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> overload and specifying <ph id="ph2">`false`</ph> for <ph id="ph3">`exitContext`</ph>.</source>
          <target state="translated">Wywoływanie przeciążenie tej metody jest taka sama jak wywołanie <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> przeciążenia i określając <ph id="ph2">`false`</ph> dla <ph id="ph3">`exitContext`</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.ArgumentException" /&gt;</ph>, instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch wyjątku klasy podstawowej <ph id="ph1">&lt;see cref="T:System.ArgumentException" /&gt;</ph>, zamiast tego.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains elements that are duplicates.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera elementy, które są duplikatami.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> attribute is applied to the thread procedure for the current thread, and <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> contains more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> Atrybut jest stosowany do procedury wątku dla bieżącego wątku i <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> zawiera więcej niż jeden element.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>This array cannot contain multiple references to the same object.</source>
          <target state="translated">Ta tablica nie może zawierać wiele odwołań do tego samego obiektu.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds, to wait indefinitely.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wartość-1 milisekund, będzie czekać w nieskończoność.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>Waits for all the elements in the specified array to receive a signal, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value to specify the time interval.</source>
          <target state="translated">Czeka na wszystkie elementy w określonej tablicy na sygnał, przy użyciu <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> wartość, aby określić interwał czasu.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> when every element in <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> has received a signal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Podczas każdego elementu w <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> otrzymał sygnał; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>If <ph id="ph1">`timeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>It tests the state of the wait handles and returns immediately.</source>
          <target state="translated">Sprawdza stan uchwyty oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda zwraca kończy czas oczekiwania, co oznacza, że są sygnalizowane albo wszystkie dojścia lub przekroczenia limitu czasu.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>On some implementations, if more than 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach więcej niż 64 uchwyty są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>If the array contains duplicates, the call will fail.</source>
          <target state="translated">Jeśli tablica zawiera duplikaty, połączenie nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method is not supported on threads that have <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda nie jest obsługiwana w wątkach, które mają <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The maximum value for <ph id="ph1">`timeout`</ph> is <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Maksymalna wartość <ph id="ph1">`timeout`</ph> jest <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>Calling this method overload is the same as calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29&gt;</ph> overload and specifying <ph id="ph2">`false`</ph> for <ph id="ph3">`exitContext`</ph>.</source>
          <target state="translated">Wywoływanie przeciążenie tej metody jest taka sama jak wywołanie <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29&gt;</ph> przeciążenia i określając <ph id="ph2">`false`</ph> dla <ph id="ph3">`exitContext`</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.ArgumentException" /&gt;</ph>, instead.</source>
          <target state="translated">W <bpt id="p1">[</bpt>.NET dla Sklepu Windows apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> lub <bpt id="p2">[</bpt>przenośnej biblioteki klas<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch wyjątku klasy podstawowej <ph id="ph1">&lt;see cref="T:System.ArgumentException" /&gt;</ph>, zamiast tego.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains elements that are duplicates.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera elementy, które są duplikatami.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> attribute is applied to the thread procedure for the current thread, and <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> contains more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> Atrybut jest stosowany do procedury wątku dla bieżącego wątku i <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> zawiera więcej niż jeden element.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest liczbą ujemną niż-1 milisekund, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest większa niż <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The wait terminated because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>This array cannot contain multiple references to the same object (duplicates).</source>
          <target state="translated">Ta tablica nie może zawierać wiele odwołań do tego samego obiektu (duplikatów).</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) będzie czekać w nieskończoność.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć domeny synchronizacji dla kontekstu przed oczekiwaniem (Jeśli w kontekście zsynchronizowane), a potem; ponownie pozyskać w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>Waits for all the elements in the specified array to receive a signal, using an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</source>
          <target state="translated">Czeka na wszystkie elementy w określonej tablicy na sygnał, przy użyciu <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> wartość, aby określić przedział czasu i określanie, czy zamknąć domeny synchronizacji przed czas oczekiwania.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> when every element in <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> has received a signal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Podczas każdego elementu w <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> otrzymał sygnał; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>It tests the state of the wait handles and returns immediately.</source>
          <target state="translated">Sprawdza stan uchwyty oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is new in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> jest nowa w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>In previous versions, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when a mutex is abandoned.</source>
          <target state="translated">W poprzednich wersjach <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph> kiedy zostanie porzucony obiektu mutex.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>An abandoned mutex often indicates a serious coding error.</source>
          <target state="translated">Porzuconego elementu mutex często oznacza to poważny błąd kodowania.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
          <target state="translated">W przypadku obiektu mutex całego systemu może oznaczać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The exception contains information useful for debugging.</source>
          <target state="translated">Wyjątek zawiera informacje przydatne podczas debugowania.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda zwraca wartość, gdy czas oczekiwania zakończenie, co oznacza, że gdy są sygnalizowane wszystkie dojścia lub przekroczenia limitu czasu.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>On some implementations, if more than 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach więcej niż 64 uchwyty są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>If there are duplicates in the array, the call fails with a <ph id="ph1">&lt;xref:System.DuplicateWaitObjectException&gt;</ph>.</source>
          <target state="translated">Jeśli istnieją duplikaty w tablicy, połączenie kończy się niepowodzeniem z <ph id="ph1">&lt;xref:System.DuplicateWaitObjectException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method is not supported on threads that have <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda nie jest obsługiwana w wątkach, które mają <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>Even if you are currently executing a method on a class that is not derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie jest pochodną <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The thread returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method completes.</source>
          <target state="translated">Wątek zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>This can be useful when the context-bound class has the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> attribute.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> atrybutu.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak za pomocą puli wątków asynchronicznie utworzyć i zapisać do grupy plików.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>Each write operation is queued as a work item and signals when it is finished.</source>
          <target state="translated">Po zakończeniu każdej operacji zapisu jest w kolejce elementu roboczego i sygnałów.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The main thread waits for all the items to signal and then exits.</source>
          <target state="translated">Główny wątek oczekuje dla wszystkich elementów, które sygnalizują i kończy pracę.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements and the .NET Framework version is 2.0 or later.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 2.0 lub nowszej.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains elements that are duplicates.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera elementy, które są duplikatami.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> attribute is applied to the thread procedure for the current thread, and <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> contains more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> Atrybut jest stosowany do procedury wątku dla bieżącego wątku i <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> zawiera więcej niż jeden element.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 1.0 lub 1.1.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>This array cannot contain multiple references to the same object.</source>
          <target state="translated">Ta tablica nie może zawierać wiele odwołań do tego samego obiektu.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds, to wait indefinitely.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wartość-1 milisekund, będzie czekać w nieskończoność.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć domeny synchronizacji dla kontekstu przed oczekiwaniem (Jeśli w kontekście zsynchronizowane), a potem; ponownie pozyskać w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>Waits for all the elements in the specified array to receive a signal, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</source>
          <target state="translated">Czeka na wszystkie elementy w określonej tablicy na sygnał, przy użyciu <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> wartość, aby określić przedział czasu i określanie, czy zamknąć domeny synchronizacji przed czas oczekiwania.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> when every element in <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> has received a signal; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Podczas każdego elementu w <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> otrzymał sygnał; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>If <ph id="ph1">`timeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>It tests the state of the wait handles and returns immediately.</source>
          <target state="translated">Sprawdza stan uchwyty oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is new in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> jest nowa w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>In previous versions, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when a mutex is abandoned.</source>
          <target state="translated">W poprzednich wersjach <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph> kiedy zostanie porzucony obiektu mutex.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>An abandoned mutex often indicates a serious coding error.</source>
          <target state="translated">Porzuconego elementu mutex często oznacza to poważny błąd kodowania.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
          <target state="translated">W przypadku obiektu mutex całego systemu może oznaczać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The exception contains information useful for debugging.</source>
          <target state="translated">Wyjątek zawiera informacje przydatne podczas debugowania.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda zwraca kończy czas oczekiwania, co oznacza, że są sygnalizowane albo wszystkie dojścia lub przekroczenia limitu czasu.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>On some implementations, if more than 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach więcej niż 64 uchwyty są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>If the array contains duplicates, the call will fail.</source>
          <target state="translated">Jeśli tablica zawiera duplikaty, połączenie nie powiedzie się.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method is not supported on threads that have <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> Metoda nie jest obsługiwana w wątkach, które mają <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The maximum value for <ph id="ph1">`timeout`</ph> is <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Maksymalna wartość <ph id="ph1">`timeout`</ph> jest <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>Even if you are currently executing a method on a class that is not derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie jest pochodną <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>It returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method completes.</source>
          <target state="translated">Zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>This can be useful when the context-bound class has <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak za pomocą puli wątków asynchronicznie utworzyć i zapisać do grupy plików.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>Each write operation is queued as a work item and signals when it is finished.</source>
          <target state="translated">Po zakończeniu każdej operacji zapisu jest w kolejce elementu roboczego i sygnałów.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The main thread waits for all the items to signal and then exits.</source>
          <target state="translated">Główny wątek oczekuje dla wszystkich elementów, które sygnalizują i kończy pracę.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements and the .NET Framework version is 2.0 or later.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 2.0 lub nowszej.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains elements that are duplicates.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera elementy, które są duplikatami.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> attribute is applied to the thread procedure for the current thread, and <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> contains more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.STAThreadAttribute" /&gt;</ph> Atrybut jest stosowany do procedury wątku dla bieżącego wątku i <ph id="ph2">&lt;paramref name="waitHandles" /&gt;</ph> zawiera więcej niż jeden element.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 1.0 lub 1.1.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest liczbą ujemną niż-1 milisekund, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest większa niż <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The wait terminated because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitHandle">
          <source>Waits for any of the elements in the specified array to receive a signal.</source>
          <target state="translated">Czeka na jeden z elementów w określonej tablicy na odebrał sygnału.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>Waits for any of the elements in the specified array to receive a signal.</source>
          <target state="translated">Czeka na jeden z elementów w określonej tablicy na odebrał sygnału.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>The array index of the object that satisfied the wait.</source>
          <target state="translated">Indeks tablicy obiektu spełniającego oczekiwania.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is new in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> jest nowa w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>In previous versions, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> if the wait completes because a mutex is abandoned.</source>
          <target state="translated">W poprzednich wersjach <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph> wykona czas oczekiwania, ponieważ obiektu mutex zostanie zaniechana.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>An abandoned mutex often indicates a serious coding error.</source>
          <target state="translated">Porzuconego elementu mutex często oznacza to poważny błąd kodowania.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
          <target state="translated">W przypadku obiektu mutex całego systemu może oznaczać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>The exception contains information useful for debugging.</source>
          <target state="translated">Wyjątek zawiera informacje przydatne podczas debugowania.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> only when the wait completes because of an abandoned mutex.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> Metoda zgłasza <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> tylko, gdy czas oczekiwania kończy z powodu porzuconego elementu mutex.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>If <ph id="ph1">`waitHandles`</ph> contains a released mutex with a lower index number than the abandoned mutex, the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method completes normally and the exception is not thrown.</source>
          <target state="translated">Jeśli <ph id="ph1">`waitHandles`</ph> zawiera wydanych obiektu mutex niższy numer indeksu niż porzuconego elementu mutex <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metody kończy się normalnie i nie jest zgłaszany wyjątek.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, and that <ph id="ph2">`Mutex`</ph> is at index 0 (zero) in a <ph id="ph3">`WaitAny`</ph> array on another thread, the index returned by <ph id="ph4">`WaitAny`</ph> is 128 instead of 0.</source>
          <target state="translated">W wersjach wcześniejszych niż wersja 2.0, jeśli wątek kończy działanie lub przerwanie bez jawnego zwolnienia programu .NET Framework <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>oraz że <ph id="ph2">`Mutex`</ph> znajduje się pod indeksem 0 (zero) w <ph id="ph3">`WaitAny`</ph> tablicy w innym wątku, indeks zwrócony przez <ph id="ph4">`WaitAny`</ph> jest 128 zamiast 0.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>This method returns when any handle is signaled.</source>
          <target state="translated">Ta metoda zwraca, jeśli zostanie zasygnalizowane dowolny uchwyt.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</source>
          <target state="translated">Jeśli więcej niż jeden obiekt staje się zasygnalizowane podczas wywołania, zwracana wartość jest indeks tablicy sygnałowego obiektu mający najmniejszą wartość indeksu sygnałowego obiektów.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>On some implementations, if more that 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach, jeśli więcej dojść 64 są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>Calling this method overload is equivalent to calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> method overload and specifying -1 (or <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>) for <ph id="ph3">`millisecondsTimeout`</ph> and <ph id="ph4">`true`</ph> for <ph id="ph5">`exitContext`</ph>.</source>
          <target state="translated">Wywołanie metody przeciążenie tej metody jest odpowiednikiem wywołania <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> przeciążenie metody i określając -1 (lub <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph>) dla <ph id="ph3">`millisecondsTimeout`</ph> i <ph id="ph4">`true`</ph> dla <ph id="ph5">`exitContext`</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>The following code example demonstrates calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method.</source>
          <target state="translated">Poniższy przykład kodu pokazuje wywołanie <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 1.0 lub 1.1.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements, and the .NET Framework version is 2.0 or later.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 2.0 lub nowszej.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) będzie czekać w nieskończoność.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</source>
          <target state="translated">Czeka na jeden z elementów w określonej tablicy na sygnał, za pomocą całkowita 32-bitowy, aby określić interwał czasu.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>The array index of the object that satisfied the wait, or <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.WaitTimeout" /&gt;</ph> if no object satisfied the wait and a time interval equivalent to <ph id="ph2">&lt;paramref name="millisecondsTimeout" /&gt;</ph> has passed.</source>
          <target state="translated">Indeks tablicy obiektu, który spełnia oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.WaitTimeout" /&gt;</ph> Jeśli żaden obiekt spełnione czas oczekiwania i przedział czasu odpowiednikiem <ph id="ph2">&lt;paramref name="millisecondsTimeout" /&gt;</ph> minął.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>It tests the state of the wait handles and returns immediately.</source>
          <target state="translated">Sprawdza stan uchwyty oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> only when the wait completes because of an abandoned mutex.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> Metoda zgłasza <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> tylko, gdy czas oczekiwania kończy z powodu porzuconego elementu mutex.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>If <ph id="ph1">`waitHandles`</ph> contains a released mutex with a lower index number than the abandoned mutex, the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method completes normally and the exception is not thrown.</source>
          <target state="translated">Jeśli <ph id="ph1">`waitHandles`</ph> zawiera wydanych obiektu mutex niższy numer indeksu niż porzuconego elementu mutex <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metody kończy się normalnie i nie jest zgłaszany wyjątek.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</source>
          <target state="translated">Ta metoda zwraca wartość, gdy zakończenie czas oczekiwania, jeśli dowolny z uchwytów są sygnalizowane lub zostanie przekroczony limit czasu.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</source>
          <target state="translated">Jeśli więcej niż jeden obiekt staje się zasygnalizowane podczas wywołania, zwracana wartość jest indeks tablicy sygnałowego obiektu mający najmniejszą wartość indeksu sygnałowego obiektów.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>On some implementations, if more that 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach, jeśli więcej dojść 64 są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>Calling this method overload is the same as calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> overload and specifying <ph id="ph2">`false`</ph> for <ph id="ph3">`exitContext`</ph>.</source>
          <target state="translated">Wywoływanie przeciążenie tej metody jest taka sama jak wywołanie <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> przeciążenia i określając <ph id="ph2">`false`</ph> dla <ph id="ph3">`exitContext`</ph>.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wartość-1 milisekund oczekiwania przez czas nieokreślony.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>Waits for any of the elements in the specified array to receive a signal, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to specify the time interval.</source>
          <target state="translated">Czeka na jeden z elementów w określonej tablicy na sygnał, przy użyciu <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> Aby określić interwał czasu.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The array index of the object that satisfied the wait, or <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.WaitTimeout" /&gt;</ph> if no object satisfied the wait and a time interval equivalent to <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> has passed.</source>
          <target state="translated">Indeks tablicy obiektu, który spełnia oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.WaitTimeout" /&gt;</ph> Jeśli żaden obiekt spełnione czas oczekiwania i przedział czasu odpowiednikiem <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> minął.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>If <ph id="ph1">`timeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>It tests the state of the wait handles and returns immediately.</source>
          <target state="translated">Sprawdza stan uchwyty oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> only when the wait completes because of an abandoned mutex.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> Metoda zgłasza <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> tylko, gdy czas oczekiwania kończy z powodu porzuconego elementu mutex.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>If <ph id="ph1">`waitHandles`</ph> contains a released mutex with a lower index number than the abandoned mutex, the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method completes normally and the exception is not thrown.</source>
          <target state="translated">Jeśli <ph id="ph1">`waitHandles`</ph> zawiera wydanych obiektu mutex niższy numer indeksu niż porzuconego elementu mutex <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metody kończy się normalnie i nie jest zgłaszany wyjątek.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</source>
          <target state="translated">Ta metoda zwraca wartość, gdy zakończenie czas oczekiwania, jeśli dowolny z uchwytów są sygnalizowane lub przekroczenia limitu czasu.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</source>
          <target state="translated">Jeśli więcej niż jeden obiekt staje się zasygnalizowane podczas wywołania, zwracana wartość jest indeks tablicy sygnałowego obiektu mający najmniejszą wartość indeksu sygnałowego obiektów.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>On some implementations, if more that 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach, jeśli więcej dojść 64 są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The maximum value for <ph id="ph1">`timeout`</ph> is <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Maksymalna wartość <ph id="ph1">`timeout`</ph> jest <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>Calling this method overload is the same as calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29&gt;</ph> overload and specifying <ph id="ph2">`false`</ph> for <ph id="ph3">`exitContext`</ph>.</source>
          <target state="translated">Wywoływanie przeciążenie tej metody jest taka sama jak wywołanie <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29&gt;</ph> przeciążenia i określając <ph id="ph2">`false`</ph> dla <ph id="ph3">`exitContext`</ph>.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest liczbą ujemną niż-1 milisekund, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest większa niż <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) będzie czekać w nieskończoność.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć domeny synchronizacji dla kontekstu przed oczekiwaniem (Jeśli w kontekście zsynchronizowane), a potem; ponownie pozyskać w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</source>
          <target state="translated">Czeka na jeden z elementów w określonej tablicy na sygnał, za pomocą całkowita 32-bitowy, aby określić przedział czasu i określająca, czy zakończyć działanie synchronizacji domeny przed czas oczekiwania.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The array index of the object that satisfied the wait, or <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.WaitTimeout" /&gt;</ph> if no object satisfied the wait and a time interval equivalent to <ph id="ph2">&lt;paramref name="millisecondsTimeout" /&gt;</ph> has passed.</source>
          <target state="translated">Indeks tablicy obiektu, który spełnia oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.WaitTimeout" /&gt;</ph> Jeśli żaden obiekt spełnione czas oczekiwania i przedział czasu odpowiednikiem <ph id="ph2">&lt;paramref name="millisecondsTimeout" /&gt;</ph> minął.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>It tests the state of the wait handles and returns immediately.</source>
          <target state="translated">Sprawdza stan uchwyty oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is new in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> jest nowa w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>In previous versions, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> if the wait completes because a mutex is abandoned.</source>
          <target state="translated">W poprzednich wersjach <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph> wykona czas oczekiwania, ponieważ obiektu mutex zostanie zaniechana.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>An abandoned mutex often indicates a serious coding error.</source>
          <target state="translated">Porzuconego elementu mutex często oznacza to poważny błąd kodowania.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
          <target state="translated">W przypadku obiektu mutex całego systemu może oznaczać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The exception contains information useful for debugging.</source>
          <target state="translated">Wyjątek zawiera informacje przydatne podczas debugowania.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> only when the wait completes because of an abandoned mutex.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> Metoda zgłasza <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> tylko, gdy czas oczekiwania kończy z powodu porzuconego elementu mutex.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`waitHandles`</ph> contains a released mutex with a lower index number than the abandoned mutex, the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method completes normally and the exception is not thrown.</source>
          <target state="translated">Jeśli <ph id="ph1">`waitHandles`</ph> zawiera wydanych obiektu mutex niższy numer indeksu niż porzuconego elementu mutex <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metody kończy się normalnie i nie jest zgłaszany wyjątek.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, and that <ph id="ph2">`Mutex`</ph> is at index 0 (zero) in a <ph id="ph3">`WaitAny`</ph> array on another thread, the index returned by <ph id="ph4">`WaitAny`</ph> is 128 instead of 0.</source>
          <target state="translated">W wersjach wcześniejszych niż wersja 2.0, jeśli wątek kończy działanie lub przerwanie bez jawnego zwolnienia programu .NET Framework <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>oraz że <ph id="ph2">`Mutex`</ph> znajduje się pod indeksem 0 (zero) w <ph id="ph3">`WaitAny`</ph> tablicy w innym wątku, indeks zwrócony przez <ph id="ph4">`WaitAny`</ph> jest 128 zamiast 0.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</source>
          <target state="translated">Ta metoda zwraca wartość, gdy zakończenie czas oczekiwania, jeśli dowolny z uchwytów są sygnalizowane lub zostanie przekroczony limit czasu.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</source>
          <target state="translated">Jeśli więcej niż jeden obiekt staje się zasygnalizowane podczas wywołania, zwracana wartość jest indeks tablicy sygnałowego obiektu mający najmniejszą wartość indeksu sygnałowego obiektów.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>On some implementations, if more that 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach, jeśli więcej dojść 64 są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>Even if you are currently executing a method on a class that does not derive from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie pochodzi od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The thread returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method completes.</source>
          <target state="translated">Wątek zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>This can be useful when the context-bound class has <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak używać puli wątków jednocześnie wyszukiwania plików na wielu dyskach.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>For space considerations, only the root directory of each disk is searched.</source>
          <target state="translated">Zagadnienia miejsca przeszukiwane będą tylko w katalogu głównym każdego dysku.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 1.0 lub 1.1.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements, and the .NET Framework version is 2.0 or later.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 2.0 lub nowszej.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> array containing the objects for which the current instance will wait.</source>
          <target state="translated">A <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph> tablicę zawierającą obiekty, dla których będzie czekać bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wartość-1 milisekund oczekiwania przez czas nieokreślony.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć domeny synchronizacji dla kontekstu przed oczekiwaniem (Jeśli w kontekście zsynchronizowane), a potem; ponownie pozyskać w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>Waits for any of the elements in the specified array to receive a signal, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</source>
          <target state="translated">Czeka na jeden z elementów w określonej tablicy na sygnał, przy użyciu <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> określić przedział czasu i określanie, czy zamknąć domeny synchronizacji przed czas oczekiwania.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The array index of the object that satisfied the wait, or <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.WaitTimeout" /&gt;</ph> if no object satisfied the wait and a time interval equivalent to <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> has passed.</source>
          <target state="translated">Indeks tablicy obiektu, który spełnia oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.WaitHandle.WaitTimeout" /&gt;</ph> Jeśli żaden obiekt spełnione czas oczekiwania i przedział czasu odpowiednikiem <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> minął.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>If <ph id="ph1">`timeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>It tests the state of the wait handles and returns immediately.</source>
          <target state="translated">Sprawdza stan uchwyty oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is new in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> jest nowa w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>In previous versions, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> if the wait completes because a mutex is abandoned.</source>
          <target state="translated">W poprzednich wersjach <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph> wykona czas oczekiwania, ponieważ obiektu mutex zostanie zaniechana.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>An abandoned mutex often indicates a serious coding error.</source>
          <target state="translated">Porzuconego elementu mutex często oznacza to poważny błąd kodowania.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
          <target state="translated">W przypadku obiektu mutex całego systemu może oznaczać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The exception contains information useful for debugging.</source>
          <target state="translated">Wyjątek zawiera informacje przydatne podczas debugowania.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> only when the wait completes because of an abandoned mutex.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> Metoda zgłasza <ph id="ph2">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> tylko, gdy czas oczekiwania kończy z powodu porzuconego elementu mutex.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>If <ph id="ph1">`waitHandles`</ph> contains a released mutex with a lower index number than the abandoned mutex, the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method completes normally and the exception is not thrown.</source>
          <target state="translated">Jeśli <ph id="ph1">`waitHandles`</ph> zawiera wydanych obiektu mutex niższy numer indeksu niż porzuconego elementu mutex <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metody kończy się normalnie i nie jest zgłaszany wyjątek.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, and that <ph id="ph2">`Mutex`</ph> is at index 0 (zero) in a <ph id="ph3">`WaitAny`</ph> array on another thread, the index returned by <ph id="ph4">`WaitAny`</ph> is 128 instead of 0.</source>
          <target state="translated">W wersjach wcześniejszych niż wersja 2.0, jeśli wątek kończy działanie lub przerwanie bez jawnego zwolnienia programu .NET Framework <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>oraz że <ph id="ph2">`Mutex`</ph> znajduje się pod indeksem 0 (zero) w <ph id="ph3">`WaitAny`</ph> tablicy w innym wątku, indeks zwrócony przez <ph id="ph4">`WaitAny`</ph> jest 128 zamiast 0.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</source>
          <target state="translated">Ta metoda zwraca wartość, gdy zakończenie czas oczekiwania, jeśli dowolny z uchwytów są sygnalizowane lub przekroczenia limitu czasu.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</source>
          <target state="translated">Jeśli więcej niż jeden obiekt staje się zasygnalizowane podczas wywołania, zwracana wartość jest indeks tablicy sygnałowego obiektu mający najmniejszą wartość indeksu sygnałowego obiektów.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>On some implementations, if more that 64 handles are passed, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown.</source>
          <target state="translated">W niektórych implementacjach, jeśli więcej dojść 64 są przekazywane <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> jest generowany.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The maximum value for <ph id="ph1">`timeout`</ph> is <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Maksymalna wartość <ph id="ph1">`timeout`</ph> jest <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>Even if you are currently executing a method on a class that does not derive from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie pochodzi od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The thread returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method completes.</source>
          <target state="translated">Wątek zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>This can be useful when the context-bound class has <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak używać puli wątków jednocześnie wyszukiwania plików na wielu dyskach.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>For space considerations, only the root directory of each disk is searched.</source>
          <target state="translated">Zagadnienia miejsca przeszukiwane będą tylko w katalogu głównym każdego dysku.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>One or more of the objects in the <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Co najmniej jeden z obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> tablica jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The number of objects in <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is greater than the system permits.</source>
          <target state="translated">Liczba obiektów w <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest większa, niż pozwala na system.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 1.0 lub 1.1.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest liczbą ujemną niż-1 milisekund, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest większa niż <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> is an array with no elements, and the .NET Framework version is 2.0 or later.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> jest tablicą o żadnych elementów i jest programu .NET Framework w wersji 2.0 lub nowszej.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> array contains a transparent proxy for a <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="waitHandles" /&gt;</ph> Tablica zawiera przezroczystego obiektu pośredniczącego dla <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitHandle">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> receives a signal.</source>
          <target state="translated">Blokuje bieżącego wątku do bieżącego <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> odbiera sygnał.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> receives a signal.</source>
          <target state="translated">Blokuje bieżącego wątku do bieżącego <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> odbiera sygnał.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance receives a signal.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżące wystąpienie odebrał sygnału.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>If the current instance is never signaled, <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /&gt;</ph> never returns.</source>
          <target state="translated">Jeśli bieżące wystąpienie nigdy nie zostanie zasygnalizowane, <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /&gt;</ph> nigdy nie zwraca.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is new in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> jest nowa w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>In previous versions, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when a mutex is abandoned.</source>
          <target state="translated">W poprzednich wersjach <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph> kiedy zostanie porzucony obiektu mutex.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>An abandoned mutex often indicates a serious coding error.</source>
          <target state="translated">Porzuconego elementu mutex często oznacza to poważny błąd kodowania.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
          <target state="translated">W przypadku obiektu mutex całego systemu może oznaczać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>The exception contains information useful for debugging.</source>
          <target state="translated">Wyjątek zawiera informacje przydatne podczas debugowania.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>The caller of this method blocks indefinitely until the current instance receives a signal.</source>
          <target state="translated">Element wywołujący tego bloków metody do czasu bieżącego wystąpienia odbiera sygnał.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>Use this method to block until a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> receives a signal from another thread, such as is generated when an asynchronous operation completes.</source>
          <target state="translated">Ta metoda służy do blokowania do <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> odbiera sygnał z innego wątku, takich jak jest generowany po zakończeniu operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>Calling this method overload is equivalent to calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29&gt;</ph> method overload and specifying -1 or <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> for the first parameter and <ph id="ph3">`false`</ph> for the second parameter.</source>
          <target state="translated">Wywołanie metody przeciążenie tej metody jest odpowiednikiem wywołania <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29&gt;</ph> przeciążenie metody i określając -1 lub <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType&gt;</ph> jako pierwszy parametr i <ph id="ph3">`false`</ph> dla drugiego parametru.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>Override this method to customize the behavior of derived classes.</source>
          <target state="translated">Zastępuje tę metodę, aby dostosować zachowanie klas pochodnych.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak zapobiec proces przerywanie podczas oczekiwania na zakończenie wykonywania wątku w tle przy użyciu dojścia oczekiwania.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>The current instance has already been disposed.</source>
          <target state="translated">Bieżące wystąpienie został już usunięty.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne">
          <source>The current instance is a transparent proxy for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated">Bieżące wystąpienie jest przezroczystego obiektu pośredniczącego dla <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) będzie czekać w nieskończoność.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</source>
          <target state="translated">Blokuje bieżącego wątku do bieżącego <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> odbiera sygnał, aby określić interwał czasu w milisekundach przy użyciu całkowita 32-bitowych.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance receives a signal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżące wystąpienie odebrał sygnału; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Sprawdza stan dojście oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>The caller of this method blocks until the current instance receives a signal or a time-out occurs.</source>
          <target state="translated">Występuje, wywołujący bloków tej metody do momentu otrzymania sygnału lub limit czasu oczekiwania przez bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>Use this method to block until a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> receives a signal from another thread, such as is generated when an asynchronous operation completes.</source>
          <target state="translated">Ta metoda służy do blokowania do <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> odbiera sygnał z innego wątku, takich jak jest generowany po zakończeniu operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>Override this method to customize the behavior of derived classes.</source>
          <target state="translated">Zastępuje tę metodę, aby dostosować zachowanie klas pochodnych.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>Calling this method overload is the same as calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29&gt;</ph> overload and specifying <ph id="ph2">`false`</ph> for <ph id="ph3">`exitContext`</ph>.</source>
          <target state="translated">Wywoływanie przeciążenie tej metody jest taka sama jak wywołanie <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29&gt;</ph> przeciążenia i określając <ph id="ph2">`false`</ph> dla <ph id="ph3">`exitContext`</ph>.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak zapobiec proces przerywanie podczas oczekiwania na zakończenie wykonywania wątku w tle przy użyciu dojścia oczekiwania.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">Bieżące wystąpienie został już usunięty.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
          <source>The current instance is a transparent proxy for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated">Bieżące wystąpienie jest przezroczystego obiektu pośredniczącego dla <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wartość-1 milisekund oczekiwania przez czas nieokreślony.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>Blocks the current thread until the current instance receives a signal, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to specify the time interval.</source>
          <target state="translated">Blokuje bieżący wątek, do momentu otrzymania przez bieżące wystąpienie sygnał, przy użyciu <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> Aby określić interwał czasu.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance receives a signal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżące wystąpienie odebrał sygnału; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>If <ph id="ph1">`timeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Sprawdza stan dojście oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>The caller of this method blocks until the current instance receives a signal or a time-out occurs.</source>
          <target state="translated">Występuje, wywołujący bloków tej metody do momentu otrzymania sygnału lub limit czasu oczekiwania przez bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>Use this method to block until a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> receives a signal from another thread, such as is generated when an asynchronous operation completes.</source>
          <target state="translated">Ta metoda służy do blokowania do <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> odbiera sygnał z innego wątku, takich jak jest generowany po zakończeniu operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>Override this method to customize the behavior of derived classes.</source>
          <target state="translated">Zastępuje tę metodę, aby dostosować zachowanie klas pochodnych.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>The maximum value for <ph id="ph1">`timeout`</ph> is <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Maksymalna wartość <ph id="ph1">`timeout`</ph> jest <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>Calling this method overload is the same as calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29&gt;</ph> overload and specifying <ph id="ph2">`false`</ph> for <ph id="ph3">`exitContext`</ph>.</source>
          <target state="translated">Wywoływanie przeciążenie tej metody jest taka sama jak wywołanie <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29&gt;</ph> przeciążenia i określając <ph id="ph2">`false`</ph> dla <ph id="ph3">`exitContext`</ph>.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">Bieżące wystąpienie został już usunięty.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest liczbą ujemną niż-1 milisekund, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest większa niż <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
          <source>The current instance is a transparent proxy for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated">Bieżące wystąpienie jest przezroczystego obiektu pośredniczącego dla <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania, lub <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) będzie czekać w nieskończoność.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć domeny synchronizacji dla kontekstu przed oczekiwaniem (Jeśli w kontekście zsynchronizowane), a potem; ponownie pozyskać w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</source>
          <target state="translated">Blokuje bieżącego wątku do bieżącego <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> odbiera sygnał, za pomocą całkowita 32-bitowy, aby określić przedział czasu i określanie, czy zamknąć domeny synchronizacji przed czas oczekiwania.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance receives a signal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżące wystąpienie odebrał sygnału; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Sprawdza stan dojście oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is new in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> jest nowa w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>In previous versions, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when a mutex is abandoned.</source>
          <target state="translated">W poprzednich wersjach <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph> kiedy zostanie porzucony obiektu mutex.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>An abandoned mutex often indicates a serious coding error.</source>
          <target state="translated">Porzuconego elementu mutex często oznacza to poważny błąd kodowania.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
          <target state="translated">W przypadku obiektu mutex całego systemu może oznaczać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The exception contains information useful for debugging.</source>
          <target state="translated">Wyjątek zawiera informacje przydatne podczas debugowania.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The caller of this method blocks until the current instance receives a signal or a time-out occurs.</source>
          <target state="translated">Występuje, wywołujący bloków tej metody do momentu otrzymania sygnału lub limit czasu oczekiwania przez bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>Use this method to block until a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> receives a signal from another thread, such as is generated when an asynchronous operation completes.</source>
          <target state="translated">Ta metoda służy do blokowania do <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> odbiera sygnał z innego wątku, takich jak jest generowany po zakończeniu operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>Override this method to customize the behavior of derived classes.</source>
          <target state="translated">Zastępuje tę metodę, aby dostosować zachowanie klas pochodnych.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The <ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>Even if you are currently executing a method on a class that does not derive from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie pochodzi od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The thread returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method completes.</source>
          <target state="translated">Wątek zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>This can be useful when the context-bound class has <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The following example shows how the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29&gt;</ph> method overload behaves when it is called within a synchronization domain.</source>
          <target state="translated">W poniższym przykładzie przedstawiono sposób <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29&gt;</ph> przeciążenie metody ma zachowywać się, gdy jest wywoływana w domenie synchronizacji.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>First, a thread waits with <ph id="ph1">`exitContext`</ph> set to <ph id="ph2">`false`</ph> and blocks until the wait timeout expires.</source>
          <target state="translated">Po pierwsze, wątek oczekuje z <ph id="ph1">`exitContext`</ph> ustawioną <ph id="ph2">`false`</ph> i blokuje do chwili osiągnięcia limitu czasu oczekiwania.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>A second thread executes after the first thread terminates and waits with <ph id="ph1">`exitContext`</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Drugi wątek wykonuje po pierwszym wątkiem kończy i czeka z <ph id="ph1">`exitContext`</ph> ustawioną <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</source>
          <target state="translated">Wywołanie sygnału dojście oczekiwania dla tego drugiego wątku nie jest blokowane i zakończeniu przed upływem limitu czasu oczekiwania.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">Bieżące wystąpienie został już usunięty.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
          <source>The current instance is a transparent proxy for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated">Bieżące wystąpienie jest przezroczystego obiektu pośredniczącego dla <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący wartość-1 milisekund oczekiwania przez czas nieokreślony.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć domeny synchronizacji dla kontekstu przed oczekiwaniem (Jeśli w kontekście zsynchronizowane), a potem; ponownie pozyskać w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>Blocks the current thread until the current instance receives a signal, using a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</source>
          <target state="translated">Blokuje bieżący wątek, do momentu otrzymania przez bieżące wystąpienie sygnał, przy użyciu <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> określić przedział czasu i określanie, czy zamknąć domeny synchronizacji przed czas oczekiwania.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance receives a signal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżące wystąpienie odebrał sygnału; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>If <ph id="ph1">`timeout`</ph> is zero, the method does not block.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> wynosi zero, nie są blokowane przez metodę.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>It tests the state of the wait handle and returns immediately.</source>
          <target state="translated">Sprawdza stan dojście oczekiwania, a zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> is new in the .NET Framework version 2.0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AbandonedMutexException&gt;</ph> jest nowa w programie .NET Framework w wersji 2.0.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>In previous versions, the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when a mutex is abandoned.</source>
          <target state="translated">W poprzednich wersjach <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metoda zwraca <ph id="ph2">`true`</ph> kiedy zostanie porzucony obiektu mutex.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>An abandoned mutex often indicates a serious coding error.</source>
          <target state="translated">Porzuconego elementu mutex często oznacza to poważny błąd kodowania.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</source>
          <target state="translated">W przypadku obiektu mutex całego systemu może oznaczać, że aplikacji zostało zakończone nagle (na przykład za pomocą Menedżera zadań systemu Windows).</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>The exception contains information useful for debugging.</source>
          <target state="translated">Wyjątek zawiera informacje przydatne podczas debugowania.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>The caller of this method blocks until the current instance receives a signal or a time-out occurs.</source>
          <target state="translated">Występuje, wywołujący bloków tej metody do momentu otrzymania sygnału lub limit czasu oczekiwania przez bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>Use this method to block until a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> receives a signal from another thread, such as is generated when an asynchronous operation completes.</source>
          <target state="translated">Ta metoda służy do blokowania do <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> odbiera sygnał z innego wątku, takich jak jest generowany po zakończeniu operacji asynchronicznej.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interfejsu.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>Override this method to customize the behavior of derived classes.</source>
          <target state="translated">Zastępuje tę metodę, aby dostosować zachowanie klas pochodnych.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>The maximum value for <ph id="ph1">`timeout`</ph> is <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Maksymalna wartość <ph id="ph1">`timeout`</ph> jest <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>Even if you are currently executing a method on a class that does not derive from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie pochodzi od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>The thread returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method completes.</source>
          <target state="translated">Wątek zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>This can be useful when the context-bound class has <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak zapobiec proces przerywanie podczas oczekiwania na zakończenie wykonywania wątku w tle przy użyciu dojścia oczekiwania.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>The current instance has already been disposed.</source>
          <target state="translated">Bieżące wystąpienie został już usunięty.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest liczbą ujemną niż-1 milisekund, która reprezentuje nieskończony limit czasu.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> jest większa niż <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>The wait completed because a thread exited without releasing a mutex.</source>
          <target state="translated">Oczekiwanie zakończone, ponieważ wątek został zakończony bez zwolnienia obiektu mutex.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>This exception is not thrown on Windows 98 or Windows Millennium Edition.</source>
          <target state="translated">Ten wyjątek nie jest generowany na Windows 98 lub Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
          <source>The current instance is a transparent proxy for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> in another application domain.</source>
          <target state="translated">Bieżące wystąpienie jest przezroczystego obiektu pośredniczącego dla <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> w innej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" uid="F:System.Threading.WaitHandle.WaitTimeout">
          <source>Indicates that a <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /&gt;</ph> operation timed out before any of the wait handles were signaled.</source>
          <target state="translated">Oznacza to, że <ph id="ph1">&lt;see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /&gt;</ph> upłynął limit czasu operacji przed żadnego uchwyty oczekiwania były sygnalizowane.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="F:System.Threading.WaitHandle.WaitTimeout">
          <source>This field is constant.</source>
          <target state="translated">To pole jest stałe.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Threading.WaitHandle.WaitTimeout">
          <source>This field is one of the possible return values of <ph id="ph1">`WaitAny`</ph>.</source>
          <target state="translated">To pole jest jedną z możliwych wartości zwracanych metody <ph id="ph1">`WaitAny`</ph>.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Threading.WaitHandle.WaitTimeout">
          <source>The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</source>
          <target state="translated">Poniższy przykład kodu pokazuje, jak używać puli wątków jednocześnie wyszukiwania plików na wielu dyskach.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Threading.WaitHandle.WaitTimeout">
          <source>For space considerations, only the root directory of each disk is searched.</source>
          <target state="translated">Zagadnienia miejsca przeszukiwane będą tylko w katalogu głównym każdego dysku.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>