<Type Name="ReaderWriterLockSlim" FullName="System.Threading.ReaderWriterLockSlim">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0cb27555e4aa4f7d0ecfa40570ea7c22907655fc" />
    <Meta Name="ms.sourcegitcommit" Value="2902e97018244969c4c5b1b51e4b8c4b76006f74" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/14/2018" />
    <Meta Name="ms.locfileid" Value="39061737" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReaderWriterLockSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLockSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class ReaderWriterLockSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type ReaderWriterLockSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="1da7e-101">Reprezentuje blokady, który jest używany do zarządzania dostęp do zasobów, dzięki czemu wiele wątków do odczytu lub wyłączny dostęp do zapisu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1da7e-101">Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-102">Użyj <xref:System.Threading.ReaderWriterLockSlim> ochrony z zasobem, który jest odczytywany przez wiele wątków i zapisana przez jeden wątek jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-102">Use <xref:System.Threading.ReaderWriterLockSlim> to protect a resource that is read by multiple threads and written to by one thread at a time.</span></span> <span data-ttu-id="1da7e-103"><xref:System.Threading.ReaderWriterLockSlim> zezwala na wiele wątków w trybie do odczytu, umożliwia jeden wątek być w trybie wyłączności na własność blokadę zapisu i umożliwia jeden wątek, który ma dostęp do odczytu w trybie możliwość uaktualnienia do odczytu, z którego wątku można uaktualnić do zapisu trybu bez konieczności zrzeka się go s dostęp do odczytu do tego zasobu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-103"><xref:System.Threading.ReaderWriterLockSlim> allows multiple threads to be in read mode, allows one thread to be in write mode with exclusive ownership of the lock, and allows one thread that has read access to be in upgradeable read mode, from which the thread can upgrade to write mode without having to relinquish its read access to the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-104"><xref:System.Threading.ReaderWriterLockSlim> jest podobny do <xref:System.Threading.ReaderWriterLock>, ale oferuje uproszczone, zasady rekursji oraz uaktualnianie i zmiany na starszą wersję stan blokady.</span><span class="sxs-lookup"><span data-stu-id="1da7e-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="1da7e-105"><xref:System.Threading.ReaderWriterLockSlim> pozwala uniknąć wielu przypadkach potencjalnych zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="1da7e-106">Ponadto wydajność <xref:System.Threading.ReaderWriterLockSlim> jest znacznie lepsze niż <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="1da7e-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="1da7e-107"><xref:System.Threading.ReaderWriterLockSlim> jest zalecana dla wszystkich nowych wdrożeń.</span><span class="sxs-lookup"><span data-stu-id="1da7e-107"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span>  
  
 <span data-ttu-id="1da7e-108">Domyślnie nowe wystąpienia <xref:System.Threading.ReaderWriterLockSlim> są tworzone za pomocą <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> Flaga, a nie zezwalaj na rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-108">By default, new instances of <xref:System.Threading.ReaderWriterLockSlim> are created with the <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> flag and do not allow recursion.</span></span> <span data-ttu-id="1da7e-109">Ta zasada domyślna jest zalecane dla wszystkich nowych wdrożeniach, ponieważ rekursji wprowadza niepotrzebnych komplikacji i sprawia, że Twój kod jest bardziej podatna na zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-109">This default policy is recommended for all new development, because recursion introduces unnecessary complications and makes your code more prone to deadlocks.</span></span> <span data-ttu-id="1da7e-110">Aby uprościć migrację z istniejących projektów używających <xref:System.Threading.Monitor> lub <xref:System.Threading.ReaderWriterLock>, możesz użyć <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> flagi do tworzenia wystąpień <xref:System.Threading.ReaderWriterLockSlim> umożliwiające rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-110">To simplify migration from existing projects that use <xref:System.Threading.Monitor> or <xref:System.Threading.ReaderWriterLock>, you can use the <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> flag to create instances of <xref:System.Threading.ReaderWriterLockSlim> that allow recursion.</span></span>  
  
 <span data-ttu-id="1da7e-111">Wątek wprowadzić blokady w trzech trybów: Odczyt tryb, w trybie zapisu oraz możliwość uaktualnienia trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-111">A thread can enter the lock in three modes: read mode, write mode, and upgradeable read mode.</span></span> <span data-ttu-id="1da7e-112">(W pozostałej części tego tematu, "możliwość uaktualnienia trybie do odczytu" jest określany jako "Tryb możliwość uaktualnienia" i frazy "Wprowadź `x` trybu" jest używana mieszcząca dłużej frazy "Wprowadź blokadę w `x` trybu".)</span><span class="sxs-lookup"><span data-stu-id="1da7e-112">(In the rest of this topic, "upgradeable read mode" is referred to as "upgradeable mode", and the phrase "enter `x` mode" is used in preference to the longer phrase "enter the lock in `x` mode".)</span></span>  
  
 <span data-ttu-id="1da7e-113">Niezależnie od tego, zasady rekursji tylko jeden wątek może być w trybie zapisu w dowolnym momencie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-113">Regardless of recursion policy, only one thread can be in write mode at any time.</span></span> <span data-ttu-id="1da7e-114">Gdy wątek jest w trybie zapisu, nie z innego wątku można wprowadzić blokady w dowolnym trybie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-114">When a thread is in write mode, no other thread can enter the lock in any mode.</span></span> <span data-ttu-id="1da7e-115">Tylko jeden wątek może być w trybie możliwość uaktualnienia w dowolnej chwili.</span><span class="sxs-lookup"><span data-stu-id="1da7e-115">Only one thread can be in upgradeable mode at any time.</span></span> <span data-ttu-id="1da7e-116">Dowolna liczba wątków może być w trybie do odczytu i może istnieć jeden wątek w trybie możliwość uaktualnienia podczas gdy inne wątki są w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-116">Any number of threads can be in read mode, and there can be one thread in upgradeable mode while other threads are in read mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1da7e-117">Ten typ implementuje <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-117">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="1da7e-118">Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-118">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="1da7e-119">Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> method in Class metoda `try` / `catch` bloku.</span><span class="sxs-lookup"><span data-stu-id="1da7e-119">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="1da7e-120">Aby usunąć ją pośrednio, użyj konstrukcją języka pierwszej klasy takiej jak `using` (w języku C#) lub `Using` (w języku Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="1da7e-120">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="1da7e-121">Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-121">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="1da7e-122"><xref:System.Threading.ReaderWriterLockSlim> zarządzane koligacji wątku; oznacza to, że każdy <xref:System.Threading.Thread> obiektu należy własne wywołania metody i wyjścia tryby blokowania.</span><span class="sxs-lookup"><span data-stu-id="1da7e-122"><xref:System.Threading.ReaderWriterLockSlim> has managed thread affinity; that is, each <xref:System.Threading.Thread> object must make its own method calls to enter and exit lock modes.</span></span> <span data-ttu-id="1da7e-123">Żaden wątek nie można zmienić trybu z innego wątku.</span><span class="sxs-lookup"><span data-stu-id="1da7e-123">No thread can change the mode of another thread.</span></span>  
  
 <span data-ttu-id="1da7e-124">Jeśli <xref:System.Threading.ReaderWriterLockSlim> nie zezwala na rekursji, wątek, czy zablokować próbuje wprowadzić blokadę z kilku powodów:</span><span class="sxs-lookup"><span data-stu-id="1da7e-124">If a <xref:System.Threading.ReaderWriterLockSlim> does not allow recursion, a thread that tries to enter the lock can block for several reasons:</span></span>  
  
-   <span data-ttu-id="1da7e-125">Wątek, który próbuje wprowadzić bloków w trybie do odczytu, jeśli istnieją wątki oczekujące wprowadzić w trybie zapisu czy też istnieje pojedynczy wątek w trybie zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-125">A thread that tries to enter read mode blocks if there are threads waiting to enter write mode or if there is a single thread in write mode.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1da7e-126">Blokowanie nowych czytników, gdy moduły zapisujące są umieszczane w kolejce jest zasady sprawiedliwe blokady, które preferuje modułów zapisujących.</span><span class="sxs-lookup"><span data-stu-id="1da7e-126">Blocking new readers when writers are queued is a lock fairness policy that favors writers.</span></span> <span data-ttu-id="1da7e-127">Bieżące zasady sprawiedliwe równoważy sprawiedliwe czytników i składników zapisywania, podwyższenie poziomu przepływności w najbardziej typowych scenariuszy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-127">The current fairness policy balances fairness to readers and writers, to promote throughput in the most common scenarios.</span></span> <span data-ttu-id="1da7e-128">Przyszłe wersje [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] mogą wprowadzać nowe zasady sprawiedliwe.</span><span class="sxs-lookup"><span data-stu-id="1da7e-128">Future versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] may introduce new fairness policies.</span></span>  
  
-   <span data-ttu-id="1da7e-129">Wątek, który próbuje wprowadzić bloków w trybie możliwość uaktualnienia, czy istnieje już wątku w trybie możliwość uaktualnienia, jeśli istnieją wątki oczekujące na tryb zapisu w przypadku pojedynczego wątku w trybie zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-129">A thread that tries to enter upgradeable mode blocks if there is already a thread in upgradeable mode, if there are threads waiting to enter write mode, or if there is a single thread in write mode.</span></span>  
  
-   <span data-ttu-id="1da7e-130">Wątek, który próbuje wprowadzić bloki tryb zapisu, jeśli wątek w jednym z trzech trybów.</span><span class="sxs-lookup"><span data-stu-id="1da7e-130">A thread that tries to enter write mode blocks if there is a thread in any of the three modes.</span></span>  
  
## <a name="upgrading-and-downgrading-locks"></a><span data-ttu-id="1da7e-131">Uaktualnianie i zmiany na starszą wersję blokad</span><span class="sxs-lookup"><span data-stu-id="1da7e-131">Upgrading and Downgrading Locks</span></span>  
 <span data-ttu-id="1da7e-132">Możliwość uaktualnienia tryb jest przeznaczony w przypadkach, gdy wątek zwykle odczytuje z chronionego zasobu, ale może być konieczne zapisanie w nim, jeśli spełniony jest jakiś warunek.</span><span class="sxs-lookup"><span data-stu-id="1da7e-132">Upgradeable mode is intended for cases where a thread usually reads from the protected resource, but might need to write to it if some condition is met.</span></span> <span data-ttu-id="1da7e-133">Wątek, który wprowadził <xref:System.Threading.ReaderWriterLockSlim> w trybie możliwość uaktualnienia ma dostęp do odczytu do chronionego zasobu, a następnie przeprowadzić uaktualnienie do tryb zapisu przez wywołanie metody <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> lub <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1da7e-133">A thread that has entered a <xref:System.Threading.ReaderWriterLockSlim> in upgradeable mode has read access to the protected resource, and can upgrade to write mode by calling the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> methods.</span></span> <span data-ttu-id="1da7e-134">Ponieważ może istnieć tylko jeden wątek w trybie możliwość uaktualnienia w danym momencie, uaktualnienie do tryb zapisu nie zakleszczenie rekursji jest niedozwolony, który jest domyślne zasady.</span><span class="sxs-lookup"><span data-stu-id="1da7e-134">Because there can be only one thread in upgradeable mode at a time, upgrading to write mode cannot deadlock when recursion is not allowed, which is the default policy.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1da7e-135">Niezależnie od tego, zasady rekursji wątek, który początkowo wprowadzone odczytu tryb nie jest dozwolona uaktualnić do trybu możliwość uaktualnienia lub zapisu, ponieważ tego wzorca tworzy silne prawdopodobieństwo zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-135">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span> <span data-ttu-id="1da7e-136">Na przykład jeśli dwa wątki w trybie do odczytu, które obie próbować Wprowadź tryb zapisu, ich będzie zakleszczenie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-136">For example, if two threads in read mode both try to enter write mode, they will deadlock.</span></span> <span data-ttu-id="1da7e-137">Możliwość uaktualnienia tryb zaprojektowano w celu uniknięcia zakleszczenia takie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-137">Upgradeable mode is designed to avoid such deadlocks.</span></span>  
  
 <span data-ttu-id="1da7e-138">W przypadku innych wątków w trybie do odczytu, wątek, który jest uaktualniany bloków.</span><span class="sxs-lookup"><span data-stu-id="1da7e-138">If there are other threads in read mode, the thread that is upgrading blocks.</span></span> <span data-ttu-id="1da7e-139">Podczas gdy wątek jest zablokowany, inne wątki, w których podejmowana jest próba przejść do trybu odczytu są blokowane.</span><span class="sxs-lookup"><span data-stu-id="1da7e-139">While the thread is blocked, other threads that try to enter read mode are blocked.</span></span> <span data-ttu-id="1da7e-140">Po zamknięciu wszystkich wątków w trybie do odczytu, zablokowany wątek możliwość uaktualnienia przechodzi w tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-140">When all threads have exited from read mode, the blocked upgradeable thread enters write mode.</span></span> <span data-ttu-id="1da7e-141">W przypadku innych wątków oczekujących na wejście zapisu trybu, pozostają zablokowane, ponieważ pojedynczego wątku, który jest w trybie możliwość uaktualnienia zapobiega ich uzyskania wyłącznego dostępu do zasobu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-141">If there are other threads waiting to enter write mode, they remain blocked, because the single thread that is in upgradeable mode prevents them from gaining exclusive access to the resource.</span></span>  
  
 <span data-ttu-id="1da7e-142">Inne wątki, które czekają na tryb odczytu w wątku w trybie możliwość uaktualnienia opuszcza tryb zapisu, tworzyć, chyba że istnieją wątki oczekujące, aby wprowadzić tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-142">When the thread in upgradeable mode exits write mode, other threads that are waiting to enter read mode can do so, unless there are threads waiting to enter write mode.</span></span> <span data-ttu-id="1da7e-143">Wątek w trybie możliwość uaktualnienia można uaktualnić i obniżyć przez czas nieokreślony, tak długo, jak to tylko wątku, który zapisuje do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-143">The thread in upgradeable mode can upgrade and downgrade indefinitely, as long as it is the only thread that writes to the protected resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1da7e-144">Jeśli zezwolisz na wiele wątków wprowadzić zapisu trybu lub możliwość uaktualnienia, nie wolno zezwalać na jeden wątek, aby zająć całych tryb możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-144">If you allow multiple threads to enter write mode or upgradeable mode, you must not allow one thread to monopolize upgradeable mode.</span></span> <span data-ttu-id="1da7e-145">W przeciwnym razie wątków, w których podejmowana jest próba wprowadź i zapisywać w trybie bezpośrednio zostaną zablokowane przez czas nieokreślony, gdy są one zablokowane, inne wątki nie będzie można wprowadzić w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-145">Otherwise, threads that try to enter write mode directly will be blocked indefinitely, and while they are blocked, other threads will be unable to enter read mode.</span></span>  
  
 <span data-ttu-id="1da7e-146">Wątek w trybie możliwość uaktualnienia mogą obniżyć wersję trybu odczytu za pośrednictwem pierwszego wywołania <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> metody, a następnie wywołując <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="1da7e-146">A thread in upgradeable mode can downgrade to read mode by first calling the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method and then calling the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method.</span></span> <span data-ttu-id="1da7e-147">Ten wzorzec obniżenia poziomu jest dozwolona dla wszystkich zasad rekursji blokady nawet <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span><span class="sxs-lookup"><span data-stu-id="1da7e-147">This downgrade pattern is allowed for all lock recursion policies, even <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span></span>  
  
 <span data-ttu-id="1da7e-148">Po zmiany na starszą wersję trybu odczytu, wątku nie można ponownie tryb możliwość uaktualnienia, dopóki nie zostało zakończone w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-148">After downgrading to read mode, a thread cannot reenter upgradeable mode until it has exited from read mode.</span></span>  
  
## <a name="entering-the-lock-recursively"></a><span data-ttu-id="1da7e-149">Wprowadzanie rekursywnie blokady</span><span class="sxs-lookup"><span data-stu-id="1da7e-149">Entering the Lock Recursively</span></span>  
 <span data-ttu-id="1da7e-150">Możesz utworzyć <xref:System.Threading.ReaderWriterLockSlim> obsługujący cyklicznego blokadę zapisu przy użyciu <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> Konstruktor, który określa zasady blokowania i określając <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1da7e-150">You can create a <xref:System.Threading.ReaderWriterLockSlim> that supports recursive lock entry by using the <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> constructor that specifies lock policy, and specifying <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-151">Rekursji nie jest zalecane w nowych wdrożeniach, ponieważ wprowadza niepotrzebnych komplikacji i sprawia, że Twój kod jest bardziej podatna na zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-151">The use of recursion is not recommended for new development, because it introduces unnecessary complications and makes your code more prone to deadlocks.</span></span>  
  
 <span data-ttu-id="1da7e-152">Aby uzyskać <xref:System.Threading.ReaderWriterLockSlim> umożliwiająca rekursji, następujące powiedzieć, informacje o trybach wątku można wprowadzić:</span><span class="sxs-lookup"><span data-stu-id="1da7e-152">For a <xref:System.Threading.ReaderWriterLockSlim> that allows recursion, the following can be said about the modes a thread can enter:</span></span>  
  
-   <span data-ttu-id="1da7e-153">Wątek w trybie do odczytu można wprowadzić cyklicznie w trybie do odczytu, ale nie można wprowadzić w trybie zapisu lub możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-153">A thread in read mode can enter read mode recursively, but cannot enter write mode or upgradeable mode.</span></span> <span data-ttu-id="1da7e-154">Jeśli spróbuje to zrobić, <xref:System.Threading.LockRecursionException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="1da7e-154">If it tries to do this, a <xref:System.Threading.LockRecursionException> is thrown.</span></span> <span data-ttu-id="1da7e-155">Wprowadzenie do odczytu trybu, a następnie wprowadzają tryb zapisu lub tryb możliwość uaktualnienia jest wzorcu przy użyciu silnego prawdopodobieństwo zakleszczenia, więc nie jest dozwolone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-155">Entering read mode and then entering write mode or upgradeable mode is a pattern with a strong probability of deadlocks, so it is not allowed.</span></span> <span data-ttu-id="1da7e-156">Zgodnie z wcześniejszym opisem tryb możliwość uaktualnienia znajduje się w sytuacjach, gdzie jest niezbędne do uaktualnienia blokady.</span><span class="sxs-lookup"><span data-stu-id="1da7e-156">As discussed earlier, upgradeable mode is provided for cases where it is necessary to upgrade a lock.</span></span>  
  
-   <span data-ttu-id="1da7e-157">Wątek w trybie możliwość uaktualnienia można wprowadzić w trybie zapisu i/lub w trybie do odczytu, a następnie wprowadzić dowolne rekursywnie trzech trybów.</span><span class="sxs-lookup"><span data-stu-id="1da7e-157">A thread in upgradeable mode can enter write mode and/or read mode, and can enter any of the three modes recursively.</span></span> <span data-ttu-id="1da7e-158">Jednak próba wprowadź napisać bloków w trybie czy istnieją inne wątki w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-158">However, an attempt to enter write mode blocks if there are other threads in read mode.</span></span>  
  
-   <span data-ttu-id="1da7e-159">Wątek w trybie zapisu można wprowadzić w trybie do odczytu i/lub tryb możliwość uaktualnienia, a następnie wprowadzić dowolne rekursywnie trzech trybów.</span><span class="sxs-lookup"><span data-stu-id="1da7e-159">A thread in write mode can enter read mode and/or upgradeable mode, and can enter any of the three modes recursively.</span></span>  
  
-   <span data-ttu-id="1da7e-160">Wątku, która nie została wprowadzona blokady można wprowadzić w dowolnym trybie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-160">A thread that has not entered the lock can enter any mode.</span></span> <span data-ttu-id="1da7e-161">Ta próba może zablokować powodów próba wprowadź blokadę niecyklicznego.</span><span class="sxs-lookup"><span data-stu-id="1da7e-161">This attempt can block for the same reasons as an attempt to enter a non-recursive lock.</span></span>  
  
 <span data-ttu-id="1da7e-162">Wątek wyjść tryby, wprowadzona w dowolnej kolejności, tak długo, jak kończy działanie każdego trybu dokładnie dowolną liczbę razy, ile on umieszczony ten tryb.</span><span class="sxs-lookup"><span data-stu-id="1da7e-162">A thread can exit the modes it has entered in any order, as long as it exits each mode exactly as many times as it entered that mode.</span></span> <span data-ttu-id="1da7e-163">Jeśli wątek spróbuje, aby wyjść z trybu zbyt wiele razy lub aby wyjść z trybu, nie została wprowadzona, <xref:System.Threading.SynchronizationLockException> zgłaszany.</span><span class="sxs-lookup"><span data-stu-id="1da7e-163">If a thread tries to exit a mode too many times, or to exit a mode it has not entered, a <xref:System.Threading.SynchronizationLockException> is thrown.</span></span>  
  
## <a name="lock-states"></a><span data-ttu-id="1da7e-164">Stany blokady</span><span class="sxs-lookup"><span data-stu-id="1da7e-164">Lock States</span></span>  
 <span data-ttu-id="1da7e-165">Może okazać się wyobrazić sobie blokady w warunkach użytkowania krajach.</span><span class="sxs-lookup"><span data-stu-id="1da7e-165">You may find it useful to think of the lock in terms of its states.</span></span> <span data-ttu-id="1da7e-166">Element <xref:System.Threading.ReaderWriterLockSlim> może mieć jeden z czterech stanów: nie wprowadzono, odczytu, uaktualniania i zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-166">A <xref:System.Threading.ReaderWriterLockSlim> can be in one of four states: not entered, read, upgrade, and write.</span></span>  
  
-   <span data-ttu-id="1da7e-167">Nie wprowadzono: W tym stanie żadne wątki nie zostały wprowadzone na blokadę (lub wszystkie wątki opuścili blokady).</span><span class="sxs-lookup"><span data-stu-id="1da7e-167">Not entered: In this state, no threads have entered the lock (or all threads have exited the lock).</span></span>  
  
-   <span data-ttu-id="1da7e-168">Odczyt: W tym stanie jeden lub więcej wątków wprowadzono Zablokuj dostęp do odczytu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-168">Read: In this state, one or more threads have entered the lock for read access to the protected resource.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1da7e-169">Wątek wprowadzić blokada w trybie do odczytu za pomocą <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> lub <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metod, lub z trybu możliwość uaktualnienia wersji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-169">A thread can enter the lock in read mode by using the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> methods, or by downgrading from upgradeable mode.</span></span>  
  
-   <span data-ttu-id="1da7e-170">Uaktualnienie: W tym stanie jeden wątek wprowadził Zablokuj dostęp do odczytu z opcji uaktualnienia do dostęp do zapisu (czyli w możliwość uaktualnienia tryb), oraz zero lub więcej wątków, wprowadzony Zablokuj dostęp do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-170">Upgrade: In this state, one thread has entered the lock for read access with the option to upgrade to write access (that is, in upgradeable mode), and zero or more threads have entered the lock for read access.</span></span> <span data-ttu-id="1da7e-171">Nie więcej niż jeden wątek jednocześnie można wprowadzić blokady przy użyciu opcji uaktualnienia; dodatkowe wątki, w których podejmowana jest próba przejść do trybu możliwość uaktualnienia są blokowane.</span><span class="sxs-lookup"><span data-stu-id="1da7e-171">No more than one thread at a time can enter the lock with the option to upgrade; additional threads that try to enter upgradeable mode are blocked.</span></span>  
  
-   <span data-ttu-id="1da7e-172">Zapis: W tym stanie jeden wątek został wprowadzony blokady dla dostępu do zapisu do chronionego zasobu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-172">Write: In this state, one thread has entered the lock for write access to the protected resource.</span></span> <span data-ttu-id="1da7e-173">Wątek znajduje się w posiadaniu wyłącznej blokady.</span><span class="sxs-lookup"><span data-stu-id="1da7e-173">That thread has exclusive possession of the lock.</span></span> <span data-ttu-id="1da7e-174">Innego wątku, który próbuje wprowadzić blokady dla jakiegokolwiek powodu jest zablokowany.</span><span class="sxs-lookup"><span data-stu-id="1da7e-174">Any other thread that tries to enter the lock for any reason is blocked.</span></span>  
  
 <span data-ttu-id="1da7e-175">W poniższej tabeli opisano przejścia między Stanami blokady, blokad, które nie zezwalają na rekursji, gdy wątek `t` podejmuje działania opisane w skrajnej lewej kolumnie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-175">The following table describes the transitions between lock states, for locks that do not allow recursion, when a thread `t` takes the action described in the leftmost column.</span></span> <span data-ttu-id="1da7e-176">W tym czasie zajmuje się akcji, `t` nie trybem.</span><span class="sxs-lookup"><span data-stu-id="1da7e-176">At the time it takes the action, `t` has no mode.</span></span> <span data-ttu-id="1da7e-177">(Szczególny przypadek gdzie `t` znajduje się w trybie możliwość uaktualnienia jest opisana w przypisy tabeli.) Pierwszy wiersz w tym artykule opisano początkowy stan blokady.</span><span class="sxs-lookup"><span data-stu-id="1da7e-177">(The special case where `t` is in upgradeable mode is described in the table footnotes.) The top row describes the starting state of the lock.</span></span> <span data-ttu-id="1da7e-178">Komórki opisano, co się dzieje z wątku, a następnie wyświetlać zmiany w stan blokady w nawiasach.</span><span class="sxs-lookup"><span data-stu-id="1da7e-178">The cells describe what happens to the thread, and show changes to the lock state in parentheses.</span></span>  
  
||<span data-ttu-id="1da7e-179">Nie podano (N)</span><span class="sxs-lookup"><span data-stu-id="1da7e-179">Not entered (N)</span></span>|<span data-ttu-id="1da7e-180">Read (R)</span><span class="sxs-lookup"><span data-stu-id="1da7e-180">Read (R)</span></span>|<span data-ttu-id="1da7e-181">Uaktualnienie (U)</span><span class="sxs-lookup"><span data-stu-id="1da7e-181">Upgrade (U)</span></span>|<span data-ttu-id="1da7e-182">Zapis (W)</span><span class="sxs-lookup"><span data-stu-id="1da7e-182">Write (W)</span></span>|  
|-|-----------------------|----------------|-------------------|-----------------|  
|<span data-ttu-id="1da7e-183">`t` Przechodzi trybie do odczytu</span><span class="sxs-lookup"><span data-stu-id="1da7e-183">`t` enters read mode</span></span>|<span data-ttu-id="1da7e-184">`t` wprowadzenie (R).</span><span class="sxs-lookup"><span data-stu-id="1da7e-184">`t` enters (R).</span></span>|<span data-ttu-id="1da7e-185">`t` bloki, jeśli wątków oczekują na tryb zapisu; w przeciwnym razie `t` przechodzi.</span><span class="sxs-lookup"><span data-stu-id="1da7e-185">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.</span></span>|<span data-ttu-id="1da7e-186">`t` bloki, jeśli wątków oczekują na tryb zapisu; w przeciwnym razie `t` wprowadza.<sup> 1</sup></span><span class="sxs-lookup"><span data-stu-id="1da7e-186">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.<sup>1</sup></span></span>|<span data-ttu-id="1da7e-187">`t` bloki.</span><span class="sxs-lookup"><span data-stu-id="1da7e-187">`t` blocks.</span></span>|  
|<span data-ttu-id="1da7e-188">`t` przechodzi w tryb możliwość uaktualnienia</span><span class="sxs-lookup"><span data-stu-id="1da7e-188">`t` enters upgradeable mode</span></span>|<span data-ttu-id="1da7e-189">`t` wprowadzenie (U).</span><span class="sxs-lookup"><span data-stu-id="1da7e-189">`t` enters (U).</span></span>|<span data-ttu-id="1da7e-190">`t` bloki, jeśli wątków oczekiwania na zapis trybu lub uaktualnienia; w przeciwnym razie `t` wprowadza (U).</span><span class="sxs-lookup"><span data-stu-id="1da7e-190">`t` blocks if threads are waiting for write mode or upgrade mode; otherwise, `t` enters (U).</span></span>|<span data-ttu-id="1da7e-191">`t` bloki.</span><span class="sxs-lookup"><span data-stu-id="1da7e-191">`t` blocks.</span></span>|<span data-ttu-id="1da7e-192">`t` bloki.</span><span class="sxs-lookup"><span data-stu-id="1da7e-192">`t` blocks.</span></span>|  
|<span data-ttu-id="1da7e-193">`t` przechodzi w tryb zapisu</span><span class="sxs-lookup"><span data-stu-id="1da7e-193">`t` enters write mode</span></span>|<span data-ttu-id="1da7e-194">`t` wprowadza (W).</span><span class="sxs-lookup"><span data-stu-id="1da7e-194">`t` enters (W).</span></span>|<span data-ttu-id="1da7e-195">`t` bloki.</span><span class="sxs-lookup"><span data-stu-id="1da7e-195">`t` blocks.</span></span>|<span data-ttu-id="1da7e-196">`t` bloki. <sup>2</sup></span><span class="sxs-lookup"><span data-stu-id="1da7e-196">`t` blocks.<sup>2</sup></span></span>|<span data-ttu-id="1da7e-197">`t` bloki.</span><span class="sxs-lookup"><span data-stu-id="1da7e-197">`t` blocks.</span></span>|  
  
 <span data-ttu-id="1da7e-198"><sup>1</sup> Jeśli `t` rozpoczyna się w trybie możliwość uaktualnienia, go przechodzi trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-198"><sup>1</sup> If `t` starts out in upgradeable mode, it enters read mode.</span></span> <span data-ttu-id="1da7e-199">Ta akcja nigdy nie blokuje.</span><span class="sxs-lookup"><span data-stu-id="1da7e-199">This action never blocks.</span></span> <span data-ttu-id="1da7e-200">Stan blokady nie zmienia się.</span><span class="sxs-lookup"><span data-stu-id="1da7e-200">The lock state does not change.</span></span> <span data-ttu-id="1da7e-201">(Wątek będziesz w stanie ukończyć starszą wersję trybu odczytu podczas zamykania trybu możliwość uaktualnienia.)</span><span class="sxs-lookup"><span data-stu-id="1da7e-201">(The thread can then complete a downgrade to read mode by exiting upgradeable mode.)</span></span>  
  
 <span data-ttu-id="1da7e-202"><sup>2</sup> Jeśli `t` jest uruchamiana w trybie możliwość uaktualnienia, blokuje w przypadku wątków w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-202"><sup>2</sup> If `t` starts out in upgradeable mode, it blocks if there are threads in read mode.</span></span> <span data-ttu-id="1da7e-203">W przeciwnym razie uaktualnienie do tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-203">Otherwise it upgrades to write mode.</span></span> <span data-ttu-id="1da7e-204">Zmiany stanu blokady zapisu (W).</span><span class="sxs-lookup"><span data-stu-id="1da7e-204">The lock state changes to Write (W).</span></span> <span data-ttu-id="1da7e-205">Jeśli `t` blokuje, ponieważ istnieją wątki w trybie do odczytu, go przechodzi w tryb zapisu tak szybko, jak ostatni wątek kończy działanie w trybie do odczytu, nawet w przypadku wątków oczekujących wprowadzenia tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-205">If `t` blocks because there are threads in read mode, it enters write mode as soon as the last thread exits read mode, even if there are threads waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="1da7e-206">W przypadku zmiany stanu występuje, ponieważ wątek kończy działanie blokady, następny wątek wznowione, zostaje wybrany w następujący sposób:</span><span class="sxs-lookup"><span data-stu-id="1da7e-206">When a state change occurs because a thread exits the lock, the next thread to be awakened is selected as follows:</span></span>  
  
-   <span data-ttu-id="1da7e-207">Po pierwsze wątek, który oczekuje na tryb zapisu i jest już w trybie możliwość uaktualnienia (może mieć co najwyżej jeden taki wątek).</span><span class="sxs-lookup"><span data-stu-id="1da7e-207">First, a thread that is waiting for write mode and is already in upgradeable mode (there can be at most one such thread).</span></span>  
  
-   <span data-ttu-id="1da7e-208">Kończy się niepowodzeniem, wątek, który jest Oczekiwanie w trybie zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-208">Failing that, a thread that is waiting for write mode.</span></span>  
  
-   <span data-ttu-id="1da7e-209">Kończy się niepowodzeniem, wątek, który oczekuje na tryb możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-209">Failing that, a thread that is waiting for upgradeable mode.</span></span>  
  
-   <span data-ttu-id="1da7e-210">Kończy niepowodzeniem, wszystkie wątki, które oczekują w trybie odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-210">Failing that, all threads that are waiting for read mode.</span></span>  
  
 <span data-ttu-id="1da7e-211">Kolejne stan blokady jest zawsze zapisu (W) w dwóch przypadkach pierwszy i uaktualnienia (U) w przypadku trzeciej, bez względu na stan blokady wyzwolenia istniejącej wątku zmiany stanu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-211">The subsequent state of the lock is always Write (W) in the first two cases and Upgrade (U) in the third case, regardless of the state of the lock when the exiting thread triggered the state change.</span></span> <span data-ttu-id="1da7e-212">W ostatnim przypadku stan blokady jest uaktualnienia (U), w przypadku wątku w trybie możliwość uaktualnienia po zmianie stanu i Read (R) w przeciwnym razie niezależnie od wcześniejszego stanu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-212">In the last case, the state of the lock is Upgrade (U) if there is a thread in upgradeable mode after the state change, and Read (R) otherwise, regardless of the prior state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-213">Poniższy przykład pokazuje prosty zsynchronizowane pamięć podręczna, która zawiera ciągi przy użyciu kluczy liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-213">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="1da7e-214">Wystąpienie <xref:System.Threading.ReaderWriterLockSlim> służy do synchronizowania dostępu do <xref:System.Collections.Generic.Dictionary%602> służy jako wewnętrzny pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-214">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span>  
  
 <span data-ttu-id="1da7e-215">Przykład zawiera prostego metod dodawania do pamięci podręcznej, Usuń z pamięci podręcznej i odczytu z pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-215">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="1da7e-216">Aby zademonstrować limity czasu, przykład zawiera metody, która dodaje do pamięci podręcznej, tylko wtedy, gdy go można to zrobić w określonym limicie czasu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-216">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="1da7e-217">Aby zaprezentować tryb możliwość uaktualnienia, przykład zawiera metodę, która pobiera wartość skojarzoną z kluczem i porównuje go z nową wartością.</span><span class="sxs-lookup"><span data-stu-id="1da7e-217">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="1da7e-218">Jeśli wartość jest bez zmian, metoda zwraca stan wskazujący bez zmian.</span><span class="sxs-lookup"><span data-stu-id="1da7e-218">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="1da7e-219">Jego wartość nie znajduje się klucza, jest wstawiany pary klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="1da7e-219">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="1da7e-220">Jeśli wartość została zmieniona, jest aktualizowana.</span><span class="sxs-lookup"><span data-stu-id="1da7e-220">If the value has changed, it is updated.</span></span> <span data-ttu-id="1da7e-221">Możliwość uaktualnienia tryb umożliwia wątku uaktualnić do odczytu dostęp do zapisu, zgodnie z potrzebami, bez ryzyka zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-221">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="1da7e-222">Przykład zawiera zagnieżdżone wyliczenie, które określa wartości zwracanych przez metodę, która pokazuje tryb możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-222">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="1da7e-223">W przykładzie użyto domyślnego konstruktora, tworzenie lock, rekursja jest niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-223">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="1da7e-224">Programowanie <xref:System.Threading.ReaderWriterLockSlim> jest prostsza i mniej podatne na błędy, jeśli blokada nie zezwalają na rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-224">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="1da7e-225">Poniższy kod używa następnie `SynchronizedCache` obiekt ma być przechowywany słownik nazw roślinnego.</span><span class="sxs-lookup"><span data-stu-id="1da7e-225">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="1da7e-226">Tworzy trzy zadania.</span><span class="sxs-lookup"><span data-stu-id="1da7e-226">It creates three tasks.</span></span> <span data-ttu-id="1da7e-227">Pierwszy zapisuje nazw warzyw przechowywane w tablicy `SynchronizedCache` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-227">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="1da7e-228">Drugie i trzecie zadanie wyświetlanie nazw warzywa, pierwszy w kolejności rosnącej (od niskiej indeksu indeks wysoką), drugi w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-228">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="1da7e-229">Ostatnim zadaniem wyszukuje ciąg "Ogórek" i, gdy znajdzie, wywołuje <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> metodę, aby zastąpić ciąg "zielony bean".</span><span class="sxs-lookup"><span data-stu-id="1da7e-229">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="1da7e-230">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1da7e-230">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-231">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ReaderWriterLockSlim" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-231">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-232">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ReaderWriterLockSlim" /> klasy przy użyciu domyślnych wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-232">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-233">A <xref:System.Threading.ReaderWriterLockSlim> który jest inicjowany za pomocą tego konstruktora nie zezwala na rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-233">A <xref:System.Threading.ReaderWriterLockSlim> that is initialized with this constructor does not allow recursion.</span></span> <span data-ttu-id="1da7e-234">Oznacza to, że <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> właściwość zwraca <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1da7e-234">That is, the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property returns <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1da7e-235">Aby uzyskać więcej informacji na temat zasad rekursji i jej wpływ, zobacz <xref:System.Threading.LockRecursionPolicy> wyliczenie i <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-235">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-236">Poniższy przykład pokazuje prosty zsynchronizowane pamięć podręczna, która zawiera ciągi przy użyciu kluczy liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-236">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="1da7e-237">Wystąpienie <xref:System.Threading.ReaderWriterLockSlim> służy do synchronizowania dostępu do <xref:System.Collections.Generic.Dictionary%602> służy jako wewnętrzny pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-237">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span> <span data-ttu-id="1da7e-238">Konstruktora bez parametrów jest używany do tworzenia blokady.</span><span class="sxs-lookup"><span data-stu-id="1da7e-238">The parameterless constructor is used to create the lock.</span></span>  
  
 <span data-ttu-id="1da7e-239">Przykład zawiera prostego metod dodawania do pamięci podręcznej, Usuń z pamięci podręcznej i odczytu z pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-239">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="1da7e-240">Aby zademonstrować limity czasu, przykład zawiera metody, która dodaje do pamięci podręcznej, tylko wtedy, gdy go można to zrobić w określonym limicie czasu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-240">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="1da7e-241">Aby zaprezentować tryb możliwość uaktualnienia, przykład zawiera metodę, która pobiera wartość skojarzoną z kluczem i porównuje go z nową wartością.</span><span class="sxs-lookup"><span data-stu-id="1da7e-241">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="1da7e-242">Jeśli wartość jest bez zmian, metoda zwraca stan wskazujący bez zmian.</span><span class="sxs-lookup"><span data-stu-id="1da7e-242">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="1da7e-243">Jego wartość nie znajduje się klucza, jest wstawiany pary klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="1da7e-243">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="1da7e-244">Jeśli wartość została zmieniona, jest aktualizowana.</span><span class="sxs-lookup"><span data-stu-id="1da7e-244">If the value has changed, it is updated.</span></span> <span data-ttu-id="1da7e-245">Możliwość uaktualnienia tryb umożliwia wątku uaktualnić do odczytu dostęp do zapisu, zgodnie z potrzebami, bez ryzyka zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-245">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="1da7e-246">Przykład zawiera zagnieżdżone wyliczenie, które określa wartości zwracanych przez metodę, która pokazuje tryb możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-246">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="1da7e-247">W przykładzie użyto domyślnego konstruktora, tworzenie lock, rekursja jest niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-247">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="1da7e-248">Programowanie <xref:System.Threading.ReaderWriterLockSlim> jest prostsza i mniej podatne na błędy, jeśli blokada nie zezwalają na rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-248">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="1da7e-249">Poniższy kod używa następnie `SynchronizedCache` obiekt ma być przechowywany słownik nazw roślinnego.</span><span class="sxs-lookup"><span data-stu-id="1da7e-249">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="1da7e-250">Tworzy trzy zadania.</span><span class="sxs-lookup"><span data-stu-id="1da7e-250">It creates three tasks.</span></span> <span data-ttu-id="1da7e-251">Pierwszy zapisuje nazw warzyw przechowywane w tablicy `SynchronizedCache` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-251">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="1da7e-252">Drugie i trzecie zadanie wyświetlanie nazw warzywa, pierwszy w kolejności rosnącej (od niskiej indeksu indeks wysoką), drugi w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-252">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="1da7e-253">Ostatnim zadaniem wyszukuje ciąg "Ogórek" i, gdy znajdzie, wywołuje <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> metodę, aby zastąpić ciąg "zielony bean".</span><span class="sxs-lookup"><span data-stu-id="1da7e-253">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim (System.Threading.LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LockRecursionPolicy recursionPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recursionPolicy As LockRecursionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim(System::Threading::LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="F#" Value="new System.Threading.ReaderWriterLockSlim : System.Threading.LockRecursionPolicy -&gt; System.Threading.ReaderWriterLockSlim" Usage="new System.Threading.ReaderWriterLockSlim recursionPolicy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recursionPolicy" Type="System.Threading.LockRecursionPolicy" />
      </Parameters>
      <Docs>
        <param name="recursionPolicy">
          <span data-ttu-id="1da7e-254">Jedna z wartości wyliczenia, które określa zasady rekursji blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-254">One of the enumeration values that specifies the lock recursion policy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1da7e-255">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.ReaderWriterLockSlim" /> klasy, określając zasady rekursji blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-255">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-256">Zasady rekursji określają ograniczenia w wątkach, które więcej niż jeden raz wprowadź blokadę.</span><span class="sxs-lookup"><span data-stu-id="1da7e-256">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="1da7e-257">Na przykład, jeśli blokada została utworzona przy użyciu <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> i wątku, który wprowadził blokada w trybie do odczytu, <xref:System.Threading.LockRecursionException> jest generowany, jeśli wątek próbuje ponownie blokady w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-257">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span> <span data-ttu-id="1da7e-258">Podobnie, jeśli wątek, który wprowadził blokada w trybie zapisu <xref:System.Threading.LockRecursionException> jest generowany, jeśli wątek próbuje ponownie blokady w dowolnym trybie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-258">Similarly, if a thread has entered the lock in write mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in any mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-259">Wątek w trybie możliwość uaktualnienia można uaktualnić do tryb zapisu lub starszą wersję trybu bez względu na ustawienie zasad rekursji blokady odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-259">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="1da7e-260">Niezależnie od tego, zasady rekursji wątek, który początkowo wprowadzone odczytu tryb nie jest dozwolona uaktualnić do trybu możliwość uaktualnienia lub zapisu, ponieważ tego wzorca tworzy silne prawdopodobieństwo zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-260">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="1da7e-261">Aby uzyskać więcej informacji na temat zasad rekursji i jej wpływ, zobacz <xref:System.Threading.LockRecursionPolicy> wyliczenie i <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-261">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-262">W poniższym przykładzie pokazano dwa scenariusze wyjątek, który jest zależny od <xref:System.Threading.LockRecursionPolicy> ustawienie i jedną, która nie ma.</span><span class="sxs-lookup"><span data-stu-id="1da7e-262">The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.</span></span>  
  
 <span data-ttu-id="1da7e-263">W pierwszego scenariusza wątku przechodzi trybie do odczytu, a następnie próbuje wprowadzić cyklicznie w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-263">In the first scenario, the thread enters read mode and then tries to enter read mode recursively.</span></span> <span data-ttu-id="1da7e-264">Jeśli <xref:System.Threading.ReaderWriterLockSlim> jest tworzona przy użyciu konstruktora domyślnego, który ustawia zasady rekursji <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="1da7e-264">If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="1da7e-265">Jeśli <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> służy do tworzenia <xref:System.Threading.ReaderWriterLockSlim>, jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="1da7e-265">If <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="1da7e-266">W drugim scenariuszu wątku przechodzi trybie do odczytu, a następnie próbuje wprowadzić tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-266">In the second scenario, the thread enters read mode and then tries to enter write mode.</span></span> <span data-ttu-id="1da7e-267"><xref:System.Threading.LockRecursionException> jest generowany, niezależnie od tego, zasady rekursji blokady.</span><span class="sxs-lookup"><span data-stu-id="1da7e-267"><xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#12)] 
[!code-vb[System.Threading.LockRecursionPolicy#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#12)]  
  
 <span data-ttu-id="1da7e-268">Poniższy kod używa następnie `SynchronizedCache` obiekt ma być przechowywany słownik nazw roślinnego.</span><span class="sxs-lookup"><span data-stu-id="1da7e-268">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="1da7e-269">Tworzy trzy zadania.</span><span class="sxs-lookup"><span data-stu-id="1da7e-269">It creates three tasks.</span></span> <span data-ttu-id="1da7e-270">Pierwszy zapisuje nazw warzyw przechowywane w tablicy `SynchronizedCache` wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-270">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="1da7e-271">Drugie i trzecie zadanie wyświetlanie nazw warzywa, pierwszy w kolejności rosnącej (od niskiej indeksu indeks wysoką), drugi w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-271">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="1da7e-272">Ostatnim zadaniem wyszukuje ciąg "Ogórek" i, gdy znajdzie, wywołuje <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> metodę, aby zastąpić ciąg "zielony bean".</span><span class="sxs-lookup"><span data-stu-id="1da7e-272">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#13)] 
[!code-vb[System.Threading.LockRecursionPolicy#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
        <altmember cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="CurrentReadCount">
      <MemberSignature Language="C#" Value="public int CurrentReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-273">Pobiera całkowitą liczbę unikatowych wątków, które zostały wprowadzone blokada w trybie do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-273">Gets the total number of unique threads that have entered the lock in read mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-274">Liczba unikatowych wątków, które zostały wprowadzone blokada w trybie do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-274">The number of unique threads that have entered the lock in read mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-275">Wątek tylko raz, nawet jeśli blokada umożliwia rekursji i wątku wprowadzony w trybie do odczytu wiele razy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-275">A thread is counted only once, even if the lock allows recursion and the thread has entered read mode multiple times.</span></span>  
  
 <span data-ttu-id="1da7e-276">Tylko w przypadku debugowania, profilowania i rejestrowania do celów, a nie kontrolują zachowanie algorytmu, należy użyć tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-276">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="1da7e-277">Wyniki można zmienić tak szybko, jak zostały obliczone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-277">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="1da7e-278">W związku z tym nie jest bezpieczne do podejmowania decyzji na podstawie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-278">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-279">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> właściwość Generuj wpis dziennika zdarzeń, jeśli liczba wątków w trybie do odczytu przekroczy próg.</span><span class="sxs-lookup"><span data-stu-id="1da7e-279">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> property to generate an event log entry if the number of threads in read mode exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#2)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#11)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="readerWriterLockSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-280">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Threading.ReaderWriterLockSlim" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-280">Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-281">Wywołaj <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> po zakończeniu przy użyciu <xref:System.Threading.ReaderWriterLockSlim>.</span><span class="sxs-lookup"><span data-stu-id="1da7e-281">Call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> when you are finished using the <xref:System.Threading.ReaderWriterLockSlim>.</span></span> <span data-ttu-id="1da7e-282"><xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> Pozostawia metoda <xref:System.Threading.ReaderWriterLockSlim> w stanie uniemożliwiającym jego używanie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-282">The <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> method leaves the <xref:System.Threading.ReaderWriterLockSlim> in an unusable state.</span></span> <span data-ttu-id="1da7e-283">Po wywołaniu <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, trzeba zwolnić wszystkie odwołania do <xref:System.Threading.ReaderWriterLockSlim> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć, <xref:System.Threading.ReaderWriterLockSlim> zajmowaną przez wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-283">After calling <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, you must release all references to the <xref:System.Threading.ReaderWriterLockSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ReaderWriterLockSlim> was occupying.</span></span> <span data-ttu-id="1da7e-284">Aby uzyskać więcej informacji, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) i [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="1da7e-284">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-285">Zawsze wywołuj <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> przed publikacją swoje ostatnie odwołanie do <xref:System.Threading.ReaderWriterLockSlim> obiektu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-285">Always call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> before you release your last reference to the <xref:System.Threading.ReaderWriterLockSlim> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="1da7e-286">
            <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> jest większa niż zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-286">
              <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> is greater than zero.</span>
          </span>
          <span data-ttu-id="1da7e-287">- lub - <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> jest większa niż zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-287">-or-  <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> is greater than zero.</span>
          </span>
          <span data-ttu-id="1da7e-288">- lub - <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> jest większa niż zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-288">-or-  <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> is greater than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnterReadLock">
      <MemberSignature Language="C#" Value="public void EnterReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-289">Maksymalna liczba prób wprowadzenia blokada w trybie do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-289">Tries to enter the lock in read mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-290">Tej metody bloki, aż wątek wywołujący przechodzi blokadę, a w związku z tym może nigdy nie zwraca.</span><span class="sxs-lookup"><span data-stu-id="1da7e-290">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="1da7e-291">Użyj <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> trybu odczytu metodę, aby zablokować na określonym przedziale czasu, a następnie wróć, jeśli wątek wywołujący nie została wprowadzona podczas tego interwału.</span><span class="sxs-lookup"><span data-stu-id="1da7e-291">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered read mode during that interval.</span></span>  
  
 <span data-ttu-id="1da7e-292">Wiele wątków można wprowadzić trybie do odczytu, w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-292">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="1da7e-293">Jeśli jeden lub więcej wątków oczekują na tryb zapisu, wątku wywołującym <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> bloków metody, dopóki te wątki mieć przekroczyła limit czasu lub wprowadzone w trybie zapisu i następnie zakończył działanie z niego.</span><span class="sxs-lookup"><span data-stu-id="1da7e-293">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-294">Jeśli blokada umożliwia rekursji, wątek, który wprowadził blokada w trybie do odczytu można wprowadzić cyklicznie w trybie do odczytu, nawet w przypadku innych wątków oczekujących na tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-294">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="1da7e-295">Co najwyżej jeden wątek może być w trybie możliwość uaktualnienia, podczas gdy inne wątki są w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-295">At most one thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="1da7e-296">Jeśli dodatkowe wątki nie oczekują na tryb możliwość uaktualnienia, a nie istnieją wątki oczekujące na tryb zapisu, wątki tego wywołania <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> metody odczytu tryb natychmiast i nie blokują.</span><span class="sxs-lookup"><span data-stu-id="1da7e-296">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-297">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> metodę, aby wprowadzić blokada w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-297">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method to enter the lock in read mode.</span></span> <span data-ttu-id="1da7e-298">Metoda pokazano w przykładzie pobiera wartość skojarzoną z kluczem.</span><span class="sxs-lookup"><span data-stu-id="1da7e-298">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="1da7e-299">Jeśli klucz nie zostanie znaleziony, wyjątek zgłaszany przez wewnętrzny <xref:System.Collections.Generic.Dictionary%602> mogła zakończyć metody.</span><span class="sxs-lookup"><span data-stu-id="1da7e-299">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="1da7e-300">A `finally` blok służy do wykonywania <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> metody, zapewniając, że obiekt wywołujący kończy pracę w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-300">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span>  
  
 <span data-ttu-id="1da7e-301">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-301">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="1da7e-302">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, oraz bieżący wątek próbował uzyskać blokadę odczytu, gdy już posiada blokadę odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-302">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the read lock.</span>
          </span>
          <span data-ttu-id="1da7e-303">- lub - <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, oraz bieżący wątek próbował uzyskać blokadę odczytu, gdy już posiada blokadę zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-303">-or-  The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the write lock.</span>
          </span>
          <span data-ttu-id="1da7e-304">- lub - Liczba rekursji spowoduje przekroczenie pojemności licznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-304">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="1da7e-305">Ten limit jest tak duża, że aplikacje nigdy nie powinni napotkać tego wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-305">This limit is so large that applications should never encounter this exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1da7e-306">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> Obiekt został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-306">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void EnterUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-307">Maksymalna liczba prób wprowadzenia blokada w trybie możliwość uaktualnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-307">Tries to enter the lock in upgradeable mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-308">Tej metody bloki, aż wątek wywołujący przechodzi blokadę, a w związku z tym może nigdy nie zwraca.</span><span class="sxs-lookup"><span data-stu-id="1da7e-308">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="1da7e-309">Użyj <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> metodę, aby zablokować na określonym przedziale czasu, a następnie wróć, jeśli wątek wywołujący nie wprowadził możliwość uaktualnienia tryb ten przedział czasu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-309">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered upgradeable mode during that interval.</span></span>  
  
 <span data-ttu-id="1da7e-310">Użyj trybu możliwość uaktualnienia gdy wątek uzyskuje dostęp zwykle do zasobu, który jest chroniony przez <xref:System.Threading.ReaderWriterLockSlim> w trybie odczytu, ale może być konieczne wprowadzenie tryb zapisu, jeśli są spełnione określone warunki.</span><span class="sxs-lookup"><span data-stu-id="1da7e-310">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="1da7e-311">Wątek w trybie możliwość uaktualnienia mogą obniżyć wersję trybu odczytu lub Uaktualnij do tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-311">A thread in upgradeable mode can downgrade to read mode or upgrade to write mode.</span></span>  
  
 <span data-ttu-id="1da7e-312">Tylko jeden wątek można wprowadzić możliwość uaktualnienia tryb, w dowolnym momencie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-312">Only one thread can enter upgradeable mode at any given time.</span></span> <span data-ttu-id="1da7e-313">Jeśli wątek jest w trybie możliwość uaktualnienia, a nie istnieją wątki oczekujące na tryb zapisu, dowolna liczba innych wątków można wprowadzić trybie do odczytu, nawet jeśli istnieją wątki oczekujące na tryb możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-313">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="1da7e-314">Jeśli jeden lub więcej wątków oczekują na tryb zapisu, wątku wywołującym <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> bloków metody, dopóki te wątki mieć przekroczyła limit czasu lub wprowadzone w trybie zapisu i następnie zakończył działanie z niego.</span><span class="sxs-lookup"><span data-stu-id="1da7e-314">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-315">Jeśli blokada umożliwia rekursji, wątek, który wprowadził blokada w trybie możliwość uaktualnienia można wprowadzić możliwość uaktualnienia tryb cyklicznie, nawet wtedy, gdy inne wątki oczekujące na tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-315">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-316">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> metodę, aby wprowadzić blokada w trybie możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-316">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method to enter the lock in upgradeable mode.</span></span> <span data-ttu-id="1da7e-317">A `finally` blok służy do wykonywania <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> metody, zapewniając, że obiekt wywołujący opuszcza tryb możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-317">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="1da7e-318">Metoda pokazano w przykładzie pobiera wartość skojarzoną z kluczem i porównuje go z nową wartością.</span><span class="sxs-lookup"><span data-stu-id="1da7e-318">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="1da7e-319">Jeśli wartość jest bez zmian, metoda zwraca stan wskazujący bez zmian.</span><span class="sxs-lookup"><span data-stu-id="1da7e-319">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="1da7e-320">Jego wartość nie znajduje się klucza, jest wstawiany pary klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="1da7e-320">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="1da7e-321">Jeśli wartość została zmieniona, jest aktualizowana.</span><span class="sxs-lookup"><span data-stu-id="1da7e-321">If the value has changed, it is updated.</span></span> <span data-ttu-id="1da7e-322">Możliwość uaktualnienia tryb umożliwia wątku do uaktualnienia blokady odczytu, zgodnie z potrzebami, bez ryzyka zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-322">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="1da7e-323">W przykładzie użyto domyślnego konstruktora, tworzenie lock, rekursja jest niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-323">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="1da7e-324">Programowanie <xref:System.Threading.ReaderWriterLockSlim> jest prostsza i mniej podatne na błędy, jeśli blokada nie zezwalają na rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-324">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="1da7e-325">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-325">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="1da7e-326">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> i bieżący wątek już została wprowadzona w dowolnym trybie blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-326">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span>
          </span>
          <span data-ttu-id="1da7e-327">- lub - bieżący wątek został wprowadzony w trybie do odczytu, więc próby możliwość uaktualnienia tryb spowodowałoby utworzenie możliwość zakleszczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-327">-or-  The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="1da7e-328">- lub - Liczba rekursji spowoduje przekroczenie pojemności licznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-328">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="1da7e-329">Limit jest tak duża, że aplikacje nigdy nie powinni napotkać go.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-329">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1da7e-330">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> Obiekt został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-330">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnterWriteLock">
      <MemberSignature Language="C#" Value="public void EnterWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterWriteLock();" />
      <MemberSignature Language="F#" Value="member this.EnterWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-331">Maksymalna liczba prób wprowadzenia blokada w trybie zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-331">Tries to enter the lock in write mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-332">Tej metody bloki, aż wątek wywołujący przechodzi blokadę, a w związku z tym może nigdy nie zwraca.</span><span class="sxs-lookup"><span data-stu-id="1da7e-332">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="1da7e-333">Użyj <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metodę, aby zablokować na określonym przedziale czasu, a następnie wróć, jeśli wątek wywołujący nie została wprowadzona trybie zapisu podczas tego interwału.</span><span class="sxs-lookup"><span data-stu-id="1da7e-333">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to block for a specified interval, and then return if the calling thread has not entered write mode during that interval.</span></span>  
  
 <span data-ttu-id="1da7e-334">Jeśli inne wątki wprowadzono blokada w trybie do odczytu, wątku wywołującym <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> trybu odczytu bloków metody, dopóki opuścili te wątki.</span><span class="sxs-lookup"><span data-stu-id="1da7e-334">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method blocks until those threads have exited read mode.</span></span> <span data-ttu-id="1da7e-335">W przypadku wątków oczekujących na tryb zapisu dodatkowe wątki, w których podejmowana jest próba wprowadź trybie do odczytu lub możliwość uaktualnienia tryb bloku, dopóki wszystkie wątki oczekujące na tryb zapisu mieć przekroczyło limit czasu lub wprowadzić tryb zapisu i następnie zakończył działanie z niego.</span><span class="sxs-lookup"><span data-stu-id="1da7e-335">When there are threads waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-336">Jeśli blokada umożliwia rekursji, wątek, który wprowadził blokada w trybie zapisu, można wprowadzić rekursywnie tryb zapisu, nawet wtedy, gdy inne wątki oczekujące na tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-336">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-337">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> metodę, aby wprowadzić blokada w trybie zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-337">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method to enter the lock in write mode.</span></span> <span data-ttu-id="1da7e-338">Metoda pokazano w przykładzie dodaje nową parę kluczy/wartości do synchronizowanych pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-338">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="1da7e-339">Jeśli klucz jest już w pamięci podręcznej, wyjątek zgłaszany przez wewnętrzny <xref:System.Collections.Generic.Dictionary%602> mogła zakończyć metody.</span><span class="sxs-lookup"><span data-stu-id="1da7e-339">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="1da7e-340">A `finally` blok służy do wykonywania <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> metody, zapewniając, że obiekt wywołujący opuszcza tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-340">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span>  
  
 <span data-ttu-id="1da7e-341">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-341">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="1da7e-342">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> i bieżący wątek już została wprowadzona w dowolnym trybie blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-342">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span>
          </span>
          <span data-ttu-id="1da7e-343">- lub - bieżący wątek wprowadzony w trybie do odczytu i nie już posiada blokadę zapisu, więc próby wprowadź blokada w trybie zapisu spowodowałoby utworzenie możliwość zakleszczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-343">-or-  The current thread has entered read mode and doesn't already own a write lock, so trying to enter the lock in write mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="1da7e-344">- lub - Liczba rekursji spowoduje przekroczenie pojemności licznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-344">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="1da7e-345">Limit jest tak duża, że aplikacje nigdy nie powinni napotkać go.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-345">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1da7e-346">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> Obiekt został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-346">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExitReadLock">
      <MemberSignature Language="C#" Value="public void ExitReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-347">Zmniejsza liczbę rekursji w trybie odczytu, a następnie kończy działanie trybie do odczytu, jeśli liczba wynikowy to 0 (zero).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-347">Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-348">Ta metoda nie jest wrażliwa na kolejność rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-348">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="1da7e-349">Na przykład jeśli wątek wchodzi blokadę w trybie możliwość uaktualnienia i następnie wprowadza blokada w trybie do odczytu, kolejność, w którym wątek kończy działanie dwa tryby nie ma znaczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-349">For example, if a thread enters a lock in upgradeable mode and then enters the lock in read mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="1da7e-350">Jeśli blokada umożliwia rekursji, wątku można wprowadzić blokada w trybie zapisu, a następnie wprowadzić cyklicznie w trybie do odczytu; kolejność, w którym kończy działanie wątku trybu odczytu i zapisu czy tryb nie ma znaczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-350">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="1da7e-351">Kończenie blokady może być sygnał innych wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="1da7e-351">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-352">Poniższy przykład pokazuje, jak używać `finally` bloku do wykonania <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> metody, zapewniając, że obiekt wywołujący kończy pracę w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-352">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span> <span data-ttu-id="1da7e-353">Metoda pokazano w przykładzie pobiera wartość skojarzoną z kluczem.</span><span class="sxs-lookup"><span data-stu-id="1da7e-353">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="1da7e-354">Jeśli klucz nie zostanie znaleziony, wyjątek zgłaszany przez wewnętrzny <xref:System.Collections.Generic.Dictionary%602> mogła zakończyć metody.</span><span class="sxs-lookup"><span data-stu-id="1da7e-354">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="1da7e-355"><xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> Metodę używaną do wprowadzania trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-355">The <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method is used to enter read mode.</span></span>  
  
 <span data-ttu-id="1da7e-356">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-356">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="1da7e-357">Bieżący wątek nie została wprowadzona blokada w trybie do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-357">The current thread has not entered the lock in read mode.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExitUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void ExitUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-358">Zmniejsza liczbę rekursji dla trybu możliwość uaktualnienia, a następnie zamyka tryb możliwość uaktualnienia, jeśli liczba wynikowy to 0 (zero).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-358">Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-359">Ta metoda nie jest wrażliwa na kolejność rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-359">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="1da7e-360">Na przykład jeśli wątek wchodzi blokadę w trybie możliwość uaktualnienia i następnie wprowadza blokada w trybie zapisu, kolejność, w którym wątek kończy działanie dwa tryby nie ma znaczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-360">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="1da7e-361">Jeśli blokada umożliwia rekursji, wątku można wprowadzić blokada w trybie zapisu, a następnie wprowadzić cyklicznie w trybie możliwość uaktualnienia; kolejność, w którym wątek kończy działanie możliwość uaktualnienia tryb zapisu i trybie nie ma znaczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-361">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in upgradeable mode; the order in which the thread exits upgradeable mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="1da7e-362">Kończenie blokady może być sygnał innych wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="1da7e-362">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-363">Poniższy przykład pokazuje, jak używać `finally` bloku do wykonania <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> metody, zapewniając, że obiekt wywołujący opuszcza tryb możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-363">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="1da7e-364">Metoda pokazano w przykładzie pobiera wartość skojarzoną z kluczem i porównuje go z nową wartością.</span><span class="sxs-lookup"><span data-stu-id="1da7e-364">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="1da7e-365">Jeśli wartość jest bez zmian, metoda zwraca stan wskazujący bez zmian.</span><span class="sxs-lookup"><span data-stu-id="1da7e-365">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="1da7e-366">Jego wartość nie znajduje się klucza, jest wstawiany pary klucz/wartość.</span><span class="sxs-lookup"><span data-stu-id="1da7e-366">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="1da7e-367">Jeśli wartość została zmieniona, jest aktualizowana.</span><span class="sxs-lookup"><span data-stu-id="1da7e-367">If the value has changed, it is updated.</span></span> <span data-ttu-id="1da7e-368">Możliwość uaktualnienia tryb umożliwia wątku do uaktualnienia blokady odczytu, zgodnie z potrzebami, bez ryzyka zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-368">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="1da7e-369">W przykładzie użyto domyślnego konstruktora, tworzenie lock, rekursja jest niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-369">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="1da7e-370">Programowanie <xref:System.Threading.ReaderWriterLockSlim> jest prostsza i mniej podatne na błędy, jeśli blokada nie zezwalają na rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-370">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="1da7e-371">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-371">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="1da7e-372">Bieżący wątek nie została wprowadzona blokada w trybie możliwość uaktualnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-372">The current thread has not entered the lock in upgradeable mode.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExitWriteLock">
      <MemberSignature Language="C#" Value="public void ExitWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitWriteLock();" />
      <MemberSignature Language="F#" Value="member this.ExitWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-373">Zmniejsza liczbę rekursji dla trybu zapisu, a następnie zamyka tryb zapisu, jeśli liczba wynikowy to 0 (zero).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-373">Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-374">Ta metoda nie jest wrażliwa na kolejność rekursji.</span><span class="sxs-lookup"><span data-stu-id="1da7e-374">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="1da7e-375">Na przykład jeśli wątek wchodzi blokadę w trybie możliwość uaktualnienia i następnie wprowadza blokada w trybie zapisu, kolejność, w którym wątek kończy działanie dwa tryby nie ma znaczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-375">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="1da7e-376">Jeśli blokada umożliwia rekursji, wątku można wprowadzić blokada w trybie zapisu, a następnie wprowadzić cyklicznie w trybie do odczytu; kolejność, w którym kończy działanie wątku trybu odczytu i zapisu czy tryb nie ma znaczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-376">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="1da7e-377">Kończenie blokady może być sygnał innych wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="1da7e-377">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-378">Poniższy przykład pokazuje, jak używać `finally` bloku do wykonania <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> metody, zapewniając, że obiekt wywołujący opuszcza tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-378">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span> <span data-ttu-id="1da7e-379">Metoda pokazano w przykładzie dodaje nową parę kluczy/wartości do synchronizowanych pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-379">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="1da7e-380">Jeśli klucz jest już w pamięci podręcznej, wyjątek zgłaszany przez wewnętrzny <xref:System.Collections.Generic.Dictionary%602> mogła zakończyć metody.</span><span class="sxs-lookup"><span data-stu-id="1da7e-380">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="1da7e-381"><xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> Metoda służy do wprowadzania blokada w trybie zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-381">The <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method is used to enter the lock in write mode.</span></span>  
  
 <span data-ttu-id="1da7e-382">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-382">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="1da7e-383">Bieżący wątek nie została wprowadzona blokada w trybie zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-383">The current thread has not entered the lock in write mode.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-384">Pobiera wartość wskazującą, czy bieżący wątek wprowadził blokada w trybie do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-384">Gets a value that indicates whether the current thread has entered the lock in read mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-385">
            <see langword="true" /> Jeśli bieżący wątek został wprowadzony zapoznaj się z trybu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-385">
              <see langword="true" /> if the current thread has entered read mode; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-386">Ta właściwość jest przeznaczona do użycia w deklaracji rozkazujących lub do innych celów debugowania.</span><span class="sxs-lookup"><span data-stu-id="1da7e-386">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="1da7e-387">Nie jest używana do sterowania przepływem wykonania programu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-387">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-388">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> nieoczekiwanie trybu odczytu właściwości Generuj potwierdzenie, jeśli wprowadzony w bieżącym wątku.</span><span class="sxs-lookup"><span data-stu-id="1da7e-388">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> property to generate an assert if the current thread has entered read mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#21)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpgradeableReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsUpgradeableReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUpgradeableReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUpgradeableReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUpgradeableReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUpgradeableReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-389">Pobiera wartość wskazującą, czy bieżący wątek wprowadził blokada w trybie możliwość uaktualnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-389">Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-390">
            <see langword="true" /> Jeśli bieżący wątek przeszedł do trybu możliwość uaktualnienia; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-390">
              <see langword="true" /> if the current thread has entered upgradeable mode; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-391">Ta właściwość jest przeznaczona do użycia w deklaracji rozkazujących lub do innych celów debugowania.</span><span class="sxs-lookup"><span data-stu-id="1da7e-391">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="1da7e-392">Nie jest używana do sterowania przepływem wykonania programu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-392">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-393">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> właściwość, aby wygenerować assert, jeśli bieżący wątek przeszła w tryb możliwość uaktualnienia nieoczekiwanie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-393">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> property to generate an assert if the current thread has entered upgradeable mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#22)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriteLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-394">Pobiera wartość wskazującą, czy bieżący wątek wprowadził blokada w trybie zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-394">Gets a value that indicates whether the current thread has entered the lock in write mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-395">
            <see langword="true" /> Jeśli bieżący wątek przeszła w tryb zapisu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-395">
              <see langword="true" /> if the current thread has entered write mode; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-396">Ta właściwość jest przeznaczona do użycia w deklaracji rozkazujących lub do innych celów debugowania.</span><span class="sxs-lookup"><span data-stu-id="1da7e-396">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="1da7e-397">Nie jest używana do sterowania przepływem wykonania programu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-397">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-398">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> właściwość, aby wygenerować assert, jeśli bieżący wątek przeszła w tryb zapisu nieoczekiwanie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-398">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> property to generate an assert if the current thread has entered write mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#23)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursionPolicy">
      <MemberSignature Language="C#" Value="public System.Threading.LockRecursionPolicy RecursionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.LockRecursionPolicy RecursionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursionPolicy As LockRecursionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::LockRecursionPolicy RecursionPolicy { System::Threading::LockRecursionPolicy get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursionPolicy : System.Threading.LockRecursionPolicy" Usage="System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-399">Pobiera wartość wskazującą, zasady rekursji dla bieżącego <see cref="T:System.Threading.ReaderWriterLockSlim" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-399">Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-400">Jedna z wartości wyliczenia, które określa zasady rekursji blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-400">One of the enumeration values that specifies the lock recursion policy.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-401">Zasady rekursji określają ograniczenia w wątkach, które więcej niż jeden raz wprowadź blokadę.</span><span class="sxs-lookup"><span data-stu-id="1da7e-401">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="1da7e-402">Na przykład, jeśli blokada została utworzona przy użyciu <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> i wątku, który wprowadził blokada w trybie do odczytu, <xref:System.Threading.LockRecursionException> jest generowany, jeśli wątek próbuje ponownie blokady w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-402">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-403">Wątek w trybie możliwość uaktualnienia można uaktualnić do tryb zapisu lub starszą wersję trybu bez względu na ustawienie zasad rekursji blokady odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-403">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="1da7e-404">Niezależnie od tego, zasady rekursji wątek, który początkowo wprowadzone odczytu tryb nie jest dozwolona uaktualnić do trybu możliwość uaktualnienia lub zapisu, ponieważ tego wzorca tworzy silne prawdopodobieństwo zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-404">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="1da7e-405">Aby uzyskać więcej informacji na temat zasad rekursji i jej wpływ, zobacz <xref:System.Threading.LockRecursionPolicy> wyliczenie i <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-405">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionException" />
      </Docs>
    </Member>
    <Member MemberName="RecursiveReadCount">
      <MemberSignature Language="C#" Value="public int RecursiveReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-406">Pobiera liczbę razy bieżącego wątku wprowadził blokada w trybie do odczytu w celu wskazania rekursji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-406">Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-407">0 (zero), jeśli bieżący wątek nie została wprowadzona. Zapoznaj się z trybu, 1, jeśli wątek wprowadzony w trybie do odczytu, ale nie został wprowadzony cyklicznie, lub * n * Jeśli wątek wprowadził rekursywnie blokady * n * - 1 godziny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-407">0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or *n* if the thread has entered the lock recursively *n* - 1 times.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-408">Tylko w przypadku debugowania, profilowania i rejestrowania do celów, a nie kontrolują zachowanie algorytmu, należy użyć tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-408">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="1da7e-409">Wyniki można zmienić tak szybko, jak zostały obliczone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-409">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="1da7e-410">W związku z tym nie jest bezpieczne do podejmowania decyzji na podstawie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-410">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveUpgradeCount">
      <MemberSignature Language="C#" Value="public int RecursiveUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-411">Pobiera liczbę razy bieżącego wątku wprowadził blokada w trybie możliwość uaktualnienia w celu wskazania rekursji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-411">Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-412">0, jeśli bieżący wątek nie przeszedł do trybu możliwość uaktualnienia, 1, jeśli wątek przeszła w tryb możliwość uaktualnienia, ale nie została wprowadzona go cyklicznie, lub * n * Jeśli wątek wprowadził możliwość uaktualnienia tryb rekursywnie * n * - 1 godziny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-412">0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or *n* if the thread has entered upgradeable mode recursively *n* - 1 times.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-413">Tylko w przypadku debugowania, profilowania i rejestrowania do celów, a nie kontrolują zachowanie algorytmu, należy użyć tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-413">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="1da7e-414">Wyniki można zmienić tak szybko, jak zostały obliczone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-414">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="1da7e-415">W związku z tym nie jest bezpieczne do podejmowania decyzji na podstawie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-415">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveWriteCount">
      <MemberSignature Language="C#" Value="public int RecursiveWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-416">Pobiera liczbę razy bieżącego wątku wprowadził blokada w trybie zapisu w celu wskazania rekursji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-416">Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-417">0, jeśli bieżący wątek nie została wprowadzona tryb zapisu, 1 Jeśli wątek przeszła w tryb zapisu, ale nie został wprowadzony cyklicznie, lub * n * Jeśli wątek wprowadził rekursywnie tryb zapisu * n * - 1 godziny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-417">0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or *n* if the thread has entered write mode recursively *n* - 1 times.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-418">Tylko w przypadku debugowania, profilowania i rejestrowania do celów, a nie kontrolują zachowanie algorytmu, należy użyć tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-418">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="1da7e-419">Wyniki można zmienić tak szybko, jak zostały obliczone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-419">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="1da7e-420">W związku z tym nie jest bezpieczne do podejmowania decyzji na podstawie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-420">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-421">Maksymalna liczba prób wprowadzenia blokada w trybie do odczytu, za pomocą opcjonalnych limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-421">Tries to enter the lock in read mode, with an optional time-out.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1da7e-422">Liczba milisekund oczekiwania lub wartość -1 (<see cref="F:System.Threading.Timeout.Infinite" />) czekanie w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-422">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1da7e-423">Maksymalna liczba prób wprowadzenia blokada w trybie do odczytu, z limitem czasu opcjonalną liczbą całkowitą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-423">Tries to enter the lock in read mode, with an optional integer time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1da7e-424">
            <see langword="true" /> Jeśli wątek wywołujący, wprowadzone do odczytu, tryb, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-424">
              <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-425">Jeśli `millisecondsTimeout` wynosi 0 (zero), ta metoda sprawdza stan blokady i zwraca `false` natychmiast, jeśli żądany stan jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="1da7e-425">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="1da7e-426">Wiele wątków można wprowadzić trybie do odczytu, w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-426">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="1da7e-427">Jeśli jeden lub więcej wątków oczekują na tryb zapisu, wątku wywołującym <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metoda blokuje, dopóki te wątki albo Przekroczono limit czasu lub wprowadzeniu tryb zapisu i następnie zakończył działanie z niego lub do czasu wygaśnięcia interwału limitu czasu wywołania dla wątku.</span><span class="sxs-lookup"><span data-stu-id="1da7e-427">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-428">Jeśli blokada umożliwia rekursji, wątek, który wprowadził blokada w trybie do odczytu można wprowadzić cyklicznie w trybie do odczytu, nawet w przypadku innych wątków oczekujących na tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-428">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="1da7e-429">Jeden wątek może być w trybie możliwość uaktualnienia, podczas gdy inne wątki są w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-429">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="1da7e-430">Jeśli dodatkowe wątki nie oczekują na tryb możliwość uaktualnienia, a nie istnieją wątki oczekujące na tryb zapisu, wątki tego wywołania <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metody odczytu tryb natychmiast i nie blokują.</span><span class="sxs-lookup"><span data-stu-id="1da7e-430">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="1da7e-431">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> i bieżący wątek ma już blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-431">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="1da7e-432">- lub - Liczba rekursji spowoduje przekroczenie pojemności licznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-432">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="1da7e-433">Limit jest tak duża, że aplikacje nigdy nie powinni napotkać go.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-433">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1da7e-434">Wartość <paramref name="millisecondsTimeout" /> jest ujemna, ale nie jest równa <see cref="F:System.Threading.Timeout.Infinite" /> (-1), który jest jedyną dozwoloną wartość ujemną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-434">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1da7e-435">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> Obiekt został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-435">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1da7e-436">Interwał oczekiwania, lub wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-436">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1da7e-437">Maksymalna liczba prób wprowadzenia blokada w trybie do odczytu, za pomocą opcjonalnych limitu czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-437">Tries to enter the lock in read mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1da7e-438">
            <see langword="true" /> Jeśli wątek wywołujący, wprowadzone do odczytu, tryb, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-438">
              <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-439">Jeśli `timeout` wynosi 0 (zero), ta metoda sprawdza stan blokady i zwraca `false` natychmiast, jeśli żądany stan jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="1da7e-439">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="1da7e-440">Wiele wątków można wprowadzić blokada w trybie do odczytu, w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-440">Multiple threads can enter the lock in read mode at the same time.</span></span>  
  
 <span data-ttu-id="1da7e-441">Jeśli jeden lub więcej wątków umieszczonych w kolejce do tryb zapisu, wątku wywołującym <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metoda blokuje, dopóki te wątki albo Przekroczono limit czasu lub wprowadzeniu tryb zapisu i następnie zakończył działanie z niego lub do czasu wygaśnięcia interwału limitu czasu wywołania dla wątku.</span><span class="sxs-lookup"><span data-stu-id="1da7e-441">If one or more threads are queued to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-442">Jeśli blokada umożliwia rekursji, wątek, który wprowadził blokada w trybie do odczytu można wprowadzić cyklicznie w trybie do odczytu, nawet w przypadku innych wątków oczekujących na tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-442">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="1da7e-443">Jeden wątek może być w trybie możliwość uaktualnienia, podczas gdy inne wątki są w trybie do odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-443">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="1da7e-444">Jeśli dodatkowe wątki nie oczekują na tryb możliwość uaktualnienia, a nie istnieją wątki oczekujące na tryb zapisu, wątki tego wywołania <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metody odczytu tryb natychmiast i nie blokują.</span><span class="sxs-lookup"><span data-stu-id="1da7e-444">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="1da7e-445">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> i bieżący wątek ma już blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-445">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="1da7e-446">- lub - Liczba rekursji spowoduje przekroczenie pojemności licznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-446">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="1da7e-447">Limit jest tak duża, że aplikacje nigdy nie powinni napotkać go.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-447">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1da7e-448">Wartość <paramref name="timeout" /> jest ujemna, ale nie jest równy MS-1, która jest jedyną dozwoloną wartość ujemną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-448">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          </span>
          <span data-ttu-id="1da7e-449">- lub - wartość <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-449">-or-  The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1da7e-450">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> Obiekt został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-450">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterUpgradeableReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-451">Maksymalna liczba prób wprowadzenia blokada w trybie możliwość uaktualnienia z opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-451">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1da7e-452">Liczba milisekund oczekiwania lub wartość -1 (<see cref="F:System.Threading.Timeout.Infinite" />) czekanie w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-452">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1da7e-453">Maksymalna liczba prób wprowadzenia blokada w trybie możliwość uaktualnienia z opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-453">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1da7e-454">
            <see langword="true" /> Jeśli wątek wywołujący wprowadzono możliwość uaktualnienia tryb, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-454">
              <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-455">Jeśli `millisecondsTimeout` wynosi 0 (zero), ta metoda sprawdza stan blokady i zwraca `false` natychmiast, jeśli żądany stan jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="1da7e-455">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="1da7e-456">Użyj trybu możliwość uaktualnienia gdy wątek uzyskuje dostęp zwykle do zasobu, który jest chroniony przez <xref:System.Threading.ReaderWriterLockSlim> w trybie odczytu, ale może być konieczne wprowadzenie tryb zapisu, jeśli są spełnione określone warunki.</span><span class="sxs-lookup"><span data-stu-id="1da7e-456">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="1da7e-457">Wątek w trybie możliwość uaktualnienia można uaktualnić do tryb zapisu lub starszą wersję trybu odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-457">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="1da7e-458">Tylko jeden wątek można wprowadzić w trybie możliwość uaktualnienia blokady w danym momencie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-458">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="1da7e-459">Jeśli wątek jest w trybie możliwość uaktualnienia, a nie istnieją wątki oczekujące na tryb zapisu, dowolna liczba innych wątków można wprowadzić trybie do odczytu, nawet jeśli istnieją wątki oczekujące na tryb możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-459">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="1da7e-460">Jeśli jeden lub więcej wątków oczekują na tryb zapisu, wątku wywołującym <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> metoda blokuje, dopóki te wątki albo Przekroczono limit czasu lub wprowadzeniu tryb zapisu i następnie zakończył działanie z niego lub do czasu wygaśnięcia interwału limitu czasu wywołania dla wątku.</span><span class="sxs-lookup"><span data-stu-id="1da7e-460">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-461">Jeśli blokada umożliwia rekursji, wątek, który wprowadził blokada w trybie możliwość uaktualnienia można wprowadzić możliwość uaktualnienia tryb cyklicznie, nawet wtedy, gdy inne wątki oczekujące na tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-461">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="1da7e-462">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> i bieżący wątek ma już blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-462">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="1da7e-463">- lub - bieżący wątek początkowo wprowadzona blokada w trybie do odczytu, a w związku z tym podjęcie próby, aby przejść do trybu możliwość uaktualnienia spowodowałoby utworzenie możliwość zakleszczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-463">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="1da7e-464">- lub - Liczba rekursji spowoduje przekroczenie pojemności licznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-464">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="1da7e-465">Limit jest tak duża, że aplikacje nigdy nie powinni napotkać go.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-465">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1da7e-466">Wartość <paramref name="millisecondsTimeout" /> jest ujemna, ale nie jest równa <see cref="F:System.Threading.Timeout.Infinite" /> (-1), który jest jedyną dozwoloną wartość ujemną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-466">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1da7e-467">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> Obiekt został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-467">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1da7e-468">Interwał oczekiwania, lub wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-468">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1da7e-469">Maksymalna liczba prób wprowadzenia blokada w trybie możliwość uaktualnienia z opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-469">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1da7e-470">
            <see langword="true" /> Jeśli wątek wywołujący wprowadzono możliwość uaktualnienia tryb, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-470">
              <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-471">Jeśli `timeout` wynosi 0 (zero), ta metoda sprawdza stan blokady i zwraca `false` natychmiast, jeśli żądany stan jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="1da7e-471">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="1da7e-472">Użyj trybu możliwość uaktualnienia gdy wątek uzyskuje dostęp zwykle do zasobów chronionych przez <xref:System.Threading.ReaderWriterLockSlim> w trybie odczytu, ale może być konieczne wprowadzenie tryb zapisu, jeśli są spełnione określone warunki.</span><span class="sxs-lookup"><span data-stu-id="1da7e-472">Use upgradeable mode when a thread usually accesses the resource protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="1da7e-473">Wątek w trybie możliwość uaktualnienia można uaktualnić do tryb zapisu lub starszą wersję trybu odczytu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-473">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="1da7e-474">Tylko jeden wątek można wprowadzić w trybie możliwość uaktualnienia blokady w danym momencie.</span><span class="sxs-lookup"><span data-stu-id="1da7e-474">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="1da7e-475">Jeśli wątek jest w trybie możliwość uaktualnienia, a nie istnieją wątki oczekujące na tryb zapisu, dowolna liczba innych wątków można wprowadzić trybie do odczytu, nawet jeśli istnieją wątki oczekujące na tryb możliwość uaktualnienia.</span><span class="sxs-lookup"><span data-stu-id="1da7e-475">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="1da7e-476">Jeśli jeden lub więcej wątków oczekują na tryb zapisu, wątku wywołującym <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> metoda blokuje, dopóki te wątki albo Przekroczono limit czasu lub wprowadzeniu tryb zapisu i następnie zakończył działanie z niego lub do czasu wygaśnięcia interwału limitu czasu wywołania dla wątku.</span><span class="sxs-lookup"><span data-stu-id="1da7e-476">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-477">Jeśli blokada umożliwia rekursji, wątek, który wprowadził blokada w trybie możliwość uaktualnienia można wprowadzić możliwość uaktualnienia tryb cyklicznie, nawet wtedy, gdy inne wątki oczekujące na tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-477">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="1da7e-478">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> i bieżący wątek ma już blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-478">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="1da7e-479">- lub - bieżący wątek początkowo wprowadzona blokada w trybie do odczytu, a w związku z tym podjęcie próby, aby przejść do trybu możliwość uaktualnienia spowodowałoby utworzenie możliwość zakleszczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-479">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="1da7e-480">- lub - Liczba rekursji spowoduje przekroczenie pojemności licznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-480">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="1da7e-481">Limit jest tak duża, że aplikacje nigdy nie powinni napotkać go.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-481">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1da7e-482">Wartość <paramref name="timeout" /> jest ujemna, ale nie jest równy MS-1, która jest jedyną dozwoloną wartość ujemną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-482">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          </span>
          <span data-ttu-id="1da7e-483">- lub - wartość <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-483">-or-  The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1da7e-484">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> Obiekt został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-484">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterWriteLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-485">Maksymalna liczba prób wprowadzenia blokada w trybie zapisu z opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-485">Tries to enter the lock in write mode, with an optional time-out.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="1da7e-486">Liczba milisekund oczekiwania lub wartość -1 (<see cref="F:System.Threading.Timeout.Infinite" />) czekanie w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-486">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1da7e-487">Maksymalna liczba prób wprowadzenia blokada w trybie zapisu z opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-487">Tries to enter the lock in write mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1da7e-488">
            <see langword="true" /> Jeśli wątek wywołujący wprowadzone tryb zapisu, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-488">
              <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-489">Jeśli `millisecondsTimeout` wynosi 0 (zero), ta metoda sprawdza stan blokady i zwraca `false` natychmiast, jeśli żądany stan jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="1da7e-489">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="1da7e-490">Jeśli inne wątki wprowadzono blokada w trybie do odczytu, wątku wywołującym <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metoda blokuje, dopóki te wątki opuścili trybie do odczytu lub dopóki nie upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-490">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="1da7e-491">Podczas oczekiwania na tryb zapisu są blokowane wątki, dodatkowe wątki, w których podejmowana jest próba wprowadzić w trybie odczytu lub możliwość uaktualnienia blokuje, dopóki wszystkie wątki oczekujące na Wprowadź tryb zapisu, albo Przekroczono limit czasu lub wprowadzeniu tryb zapisu i następnie zakończył działanie z niego.</span><span class="sxs-lookup"><span data-stu-id="1da7e-491">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-492">Jeśli blokada umożliwia rekursji, wątek, który wprowadził blokada w trybie zapisu, można wprowadzić rekursywnie tryb zapisu, nawet wtedy, gdy inne wątki oczekujące na tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-492">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-493">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metodę, aby wprowadzić blokada w trybie zapisu z upływu limitu czasu. Metoda pokazano w przykładzie dodaje nową parę kluczy/wartości do synchronizowanych pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="1da7e-493">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to enter the lock in write mode, with a time-out. The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="1da7e-494">Jeśli określony limit czasu musi upłynąć, zanim wątku przechodzi blokady, metoda zwraca `false`.</span><span class="sxs-lookup"><span data-stu-id="1da7e-494">If the specified time-out interval elapses before the thread enters the lock, the method returns `false`.</span></span> <span data-ttu-id="1da7e-495">Metoda ta zwraca `true` Jeśli para klucza i wartości jest dodawany.</span><span class="sxs-lookup"><span data-stu-id="1da7e-495">The method returns `true` if the key/value pair is added.</span></span>  
  
 <span data-ttu-id="1da7e-496">Jeśli klucz jest już w pamięci podręcznej, wyjątek zgłaszany przez wewnętrzny <xref:System.Collections.Generic.Dictionary%602> mogła zakończyć metody.</span><span class="sxs-lookup"><span data-stu-id="1da7e-496">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="1da7e-497">A `finally` blok służy do wykonywania <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> metody zapewnienia, że obiekt wywołujący zamyka blokady.</span><span class="sxs-lookup"><span data-stu-id="1da7e-497">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits the lock.</span></span>  
  
 <span data-ttu-id="1da7e-498">Ten kod jest częścią większego przykładu przewidzianego dla <xref:System.Threading.ReaderWriterLockSlim> klasy.</span><span class="sxs-lookup"><span data-stu-id="1da7e-498">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="1da7e-499">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> i bieżący wątek ma już blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-499">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="1da7e-500">- lub - bieżący wątek początkowo wprowadzona blokada w trybie do odczytu, a w związku z tym próby tryb zapisu spowodowałoby utworzenie możliwość zakleszczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-500">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="1da7e-501">- lub - Liczba rekursji spowoduje przekroczenie pojemności licznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-501">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="1da7e-502">Limit jest tak duża, że aplikacje nigdy nie powinni napotkać go.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-502">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1da7e-503">Wartość <paramref name="millisecondsTimeout" /> jest ujemna, ale nie jest równa <see cref="F:System.Threading.Timeout.Infinite" /> (-1), który jest jedyną dozwoloną wartość ujemną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-503">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1da7e-504">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> Obiekt został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-504">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1da7e-505">Interwał oczekiwania, lub wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-505">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1da7e-506">Maksymalna liczba prób wprowadzenia blokada w trybie zapisu z opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-506">Tries to enter the lock in write mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1da7e-507">
            <see langword="true" /> Jeśli wątek wywołujący wprowadzone tryb zapisu, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-507">
              <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-508">Jeśli `timeout` wynosi 0 (zero), ta metoda sprawdza stan blokady i zwraca `false` natychmiast, jeśli żądany stan jest niedostępny.</span><span class="sxs-lookup"><span data-stu-id="1da7e-508">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="1da7e-509">Jeśli inne wątki wprowadzono blokada w trybie do odczytu, wątku wywołującym <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metoda blokuje, dopóki te wątki opuścili trybie do odczytu lub dopóki nie upłynie limit czasu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-509">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="1da7e-510">Podczas oczekiwania na tryb zapisu są blokowane wątki, dodatkowe wątki, w których podejmowana jest próba wprowadzić w trybie odczytu lub możliwość uaktualnienia blokuje, dopóki wszystkie wątki oczekujące na Wprowadź tryb zapisu, albo Przekroczono limit czasu lub wprowadzeniu tryb zapisu i następnie zakończył działanie z niego.</span><span class="sxs-lookup"><span data-stu-id="1da7e-510">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1da7e-511">Jeśli blokada umożliwia rekursji, wątek, który wprowadził blokada w trybie zapisu, można wprowadzić rekursywnie tryb zapisu, nawet wtedy, gdy inne wątki oczekujące na tryb zapisu.</span><span class="sxs-lookup"><span data-stu-id="1da7e-511">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="1da7e-512">
            <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Właściwość <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> i bieżący wątek ma już blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-512">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="1da7e-513">- lub - bieżący wątek początkowo wprowadzona blokada w trybie do odczytu, a w związku z tym próby tryb zapisu spowodowałoby utworzenie możliwość zakleszczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-513">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="1da7e-514">- lub - Liczba rekursji spowoduje przekroczenie pojemności licznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-514">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="1da7e-515">Limit jest tak duża, że aplikacje nigdy nie powinni napotkać go.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-515">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="1da7e-516">Wartość <paramref name="timeout" /> jest ujemna, ale nie jest równy MS-1, która jest jedyną dozwoloną wartość ujemną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-516">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          </span>
          <span data-ttu-id="1da7e-517">- lub - wartość <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" /> milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-517">-or-  The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="1da7e-518">
            <see cref="T:System.Threading.ReaderWriterLockSlim" /> Obiekt został usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-518">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitingReadCount">
      <MemberSignature Language="C#" Value="public int WaitingReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-519">Pobiera całkowitą liczbę wątków, które oczekują na wprowadzanie blokada w trybie do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-519">Gets the total number of threads that are waiting to enter the lock in read mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-520">Całkowita liczba wątków, które oczekują, aby przejść do trybu odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-520">The total number of threads that are waiting to enter read mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-521">Tylko w przypadku debugowania, profilowania i rejestrowania do celów, a nie kontrolują zachowanie algorytmu, należy użyć tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-521">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="1da7e-522">Wyniki można zmienić tak szybko, jak zostały obliczone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-522">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="1da7e-523">W związku z tym nie jest bezpieczne do podejmowania decyzji na podstawie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-523">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-524">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> właściwość Generuj wpis dziennika zdarzeń, jeśli liczba wątków, które są zablokowane; Trwa oczekiwanie, aby przejść do trybu odczytu przekracza wartość progową.</span><span class="sxs-lookup"><span data-stu-id="1da7e-524">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter read mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#31)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingUpgradeCount">
      <MemberSignature Language="C#" Value="public int WaitingUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-525">Pobiera całkowitą liczbę wątków, które oczekują na wprowadzanie blokada w trybie możliwość uaktualnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-525">Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-526">Całkowita liczba wątków, które oczekują, aby przejść do trybu możliwość uaktualnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-526">The total number of threads that are waiting to enter upgradeable mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-527">Tylko w przypadku debugowania, profilowania i rejestrowania do celów, a nie kontrolują zachowanie algorytmu, należy użyć tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-527">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="1da7e-528">Wyniki można zmienić tak szybko, jak zostały obliczone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-528">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="1da7e-529">W związku z tym nie jest bezpieczne do podejmowania decyzji na podstawie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-529">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-530">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> właściwość Generuj wpis dziennika zdarzeń, jeśli liczba wątków, które są zablokowane; Trwa oczekiwanie na tryb możliwość uaktualnienia przekracza wartość progową.</span><span class="sxs-lookup"><span data-stu-id="1da7e-530">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter upgradeable mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#33)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingWriteCount">
      <MemberSignature Language="C#" Value="public int WaitingWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1da7e-531">Pobiera całkowitą liczbę wątków, które oczekują na wprowadzanie blokada w trybie zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-531">Gets the total number of threads that are waiting to enter the lock in write mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1da7e-532">Całkowita liczba wątków, które czekają na tryb zapisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1da7e-532">The total number of threads that are waiting to enter write mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1da7e-533">Tylko w przypadku debugowania, profilowania i rejestrowania do celów, a nie kontrolują zachowanie algorytmu, należy użyć tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-533">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="1da7e-534">Wyniki można zmienić tak szybko, jak zostały obliczone.</span><span class="sxs-lookup"><span data-stu-id="1da7e-534">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="1da7e-535">W związku z tym nie jest bezpieczne do podejmowania decyzji na podstawie tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1da7e-535">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1da7e-536">Poniższy przykład pokazuje, jak używać <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> właściwość Generuj wpis dziennika zdarzeń, jeśli liczba wątków, które są zablokowane; Trwa oczekiwanie na tryb zapisu przekracza wartość progową.</span><span class="sxs-lookup"><span data-stu-id="1da7e-536">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter write mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#32)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>