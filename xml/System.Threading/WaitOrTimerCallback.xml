<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1a2dd4ad85878912bdbddf89cd8d606de47b160" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605454" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Obiekt zawierający informacje używane przez metodę wywołania zwrotnego za każdym razem jest wykonywana.</param>
    <param name="timedOut">
      <see langword="true" /> Jeśli <see cref="T:System.Threading.WaitHandle" /> przekroczony; <see langword="false" /> Jeśli został on sygnalizowane.</param>
    <summary>Reprezentuje metodę można wywołać, gdy <see cref="T:System.Threading.WaitHandle" /> jest sygnalizowane lub limitu czasu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> reprezentuje metody wywołania zwrotnego, który ma zostać wykonany, gdy dojścia oczekiwania zarejestrowanych limitu czasu lub zostanie zasygnalizowane. Tworzenie obiektu delegowanego przez przekazanie metodę wywołania zwrotnego do <xref:System.Threading.WaitOrTimerCallback> konstruktora. Metodę musi mieć podpisu, pokazano poniżej.  
  
 Tworzenie dojścia oczekiwania zarejestrowanych przez przekazanie <xref:System.Threading.WaitOrTimerCallback> delegować i <xref:System.Threading.WaitHandle> do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>. Zawsze wykonuje metodę wywołania zwrotnego <xref:System.Threading.WaitHandle> limitu czasu lub zostanie zasygnalizowane.  
  
  
> [!NOTE]
>  Użytkownicy programu Visual Basic można pominąć <xref:System.Threading.WaitOrTimerCallback> Konstruktor i po prostu użyj `AddressOf` operator podczas przekazywania metody wywołania zwrotnego do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic automatycznie wywołuje konstruktor delegata poprawne.  
  
 Jeśli do przekazywania informacji do metody wywołania zwrotnego należy utworzyć obiekt, który zawiera niezbędne informacje i przekaż go do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> po utworzeniu dojście oczekiwania zarejestrowany. Zawsze wykonuje metodę wywołania zwrotnego, `state` parametr zawiera ten obiekt.  
  
 Aby uzyskać więcej informacji o synchronizacji wątków z puli wątków za pomocą metody wywołania zwrotnego, zobacz [puli wątków zarządzanych](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.Threading.WaitOrTimerCallback> delegata do reprezentowania metody wywołania zwrotnego, która jest wykonywana, gdy zostanie zasygnalizowane dojście oczekiwania.  
  
 W przykładzie przedstawiono również sposób użycia <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody próbę wykonania metody wywołania zwrotnego określony podczas oczekiwania określonego dojścia jest sygnalizowane. W tym przykładzie metoda wywołania zwrotnego jest `WaitProc` i dojście oczekiwania jest <xref:System.Threading.AutoResetEvent>.  
  
 W przykładzie zdefiniowano `TaskInfo` klasy do przechowywania informacji, który jest przekazywany do wywołania zwrotnego, podczas wykonywania. W przykładzie jest tworzony `TaskInfo` obiektów i przypisuje go niektórych danych ciągu. <xref:System.Threading.RegisteredWaitHandle> Zwróconego przez <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody jest przypisany do `Handle` pole `TaskInfo` obiektu, dzięki czemu metody wywołania zwrotnego ma dostęp do <xref:System.Threading.RegisteredWaitHandle>.  
  
 Oprócz `TaskInfo` obiektu, wywołanie <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> określa metodę <xref:System.Threading.AutoResetEvent> zadanie czeka na, <xref:System.Threading.WaitOrTimerCallback> delegata, który reprezentuje `WaitProc` metody wywołania zwrotnego, sekundę wartość limitu czasu i wielu wywołań zwrotnych .  
  
 Jeśli sygnały wątku głównego <xref:System.Threading.AutoResetEvent> przez wywołanie jego <xref:System.Threading.EventWaitHandle.Set%2A> metody <xref:System.Threading.WaitOrTimerCallback> jest wywoływany delegat. `WaitProc` Testy metody <xref:System.Threading.RegisteredWaitHandle> ustalenie, czy upłynął limit czasu. Jeśli wywołania zwrotnego został wywołany, ponieważ został sygnalizowane dojście oczekiwania, `WaitProc` wyrejestrowuje metody <xref:System.Threading.RegisteredWaitHandle>, dalsze zatrzymywanie wywołań zwrotnych. W przypadku przekroczenia limitu czasu zadanie będzie nadal oczekiwania. `WaitProc` Metoda kończy się wydrukowanie komunikat do konsoli.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>