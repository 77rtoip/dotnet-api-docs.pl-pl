<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e689e3c51fb3b9fb769b22344ec66072599632f8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69143650" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Obiekt zawierający informacje, które mają być używane przez metodę wywołania zwrotnego przy każdym jego uruchomieniu.</param>
    <param name="timedOut"><see langword="true" />w <see cref="T:System.Threading.WaitHandle" /> przypadku przekroczenia limitu czasu; <see langword="false" /> jeśli zostało zasygnalizowane.</param>
    <summary>Reprezentuje metodę, która ma być wywoływana, <see cref="T:System.Threading.WaitHandle" /> gdy występuje lub przekracza limit czasu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback>reprezentuje metodę wywołania zwrotnego, która ma zostać wykonana po przejściu lub zasygnalizowaniu zarejestrowanego dojścia oczekiwania. Utwórz delegata, przekazując metodę wywołania zwrotnego do <xref:System.Threading.WaitOrTimerCallback> konstruktora. W tym miejscu musi być podana sygnatura.  
  
 Utwórz zarejestrowane dojście oczekiwania, przekazując <xref:System.Threading.WaitOrTimerCallback> delegata <xref:System.Threading.WaitHandle> i do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>. Metoda wywołania zwrotnego jest wykonywana po <xref:System.Threading.WaitHandle> każdym przekroczeniu limitu czasu lub po zasygnalizowaniu.  
  
  
> [!NOTE]
>  Visual Basic użytkownicy mogą pominąć <xref:System.Threading.WaitOrTimerCallback> Konstruktor i po prostu `AddressOf` użyć operatora podczas przekazywania metody wywołania zwrotnego do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic automatycznie wywołuje poprawnego konstruktora delegatów.  
  
 Jeśli chcesz przekazać informacje do metody wywołania zwrotnego, Utwórz obiekt zawierający wymagane informacje i przekaż go do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> momentu utworzenia zarejestrowanego dojścia oczekiwania. Za każdym razem, gdy metoda wywołania zwrotnego jest `state` wykonywana, parametr zawiera ten obiekt.  
  
 Aby uzyskać więcej informacji o używaniu metod wywołania zwrotnego do synchronizowania wątków puli wątków, zobacz [Zarządzana pula wątków](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Threading.WaitOrTimerCallback> jak używać delegata do reprezentowania metody wywołania zwrotnego, która jest wykonywana po zasygnalizowaniu uchwytu oczekiwania.  
  
 W przykładzie pokazano również, <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> jak za pomocą metody wykonać określoną metodę wywołania zwrotnego, gdy zostanie zasygnalizowani określone dojście oczekiwania. W tym przykładzie metoda wywołania zwrotnego jest `WaitProc` i dojściem oczekiwania <xref:System.Threading.AutoResetEvent>jest.  
  
 W przykładzie zdefiniowano `TaskInfo` klasę zawierającą informacje, które są przesyłane do wywołania zwrotnego, gdy jest ono wykonywane. Przykład tworzy `TaskInfo` obiekt i przypisuje mu niektóre dane ciągu. Wartość <xref:System.Threading.RegisteredWaitHandle> zwracana `TaskInfo` <xref:System.Threading.RegisteredWaitHandle>przez <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodęjestprzypisywanadopolaobiektu,dziękiczemu`Handle` Metoda wywołania zwrotnego ma dostęp do.  
  
 Oprócz `TaskInfo` obiektu wywołanie <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody Określa <xref:System.Threading.AutoResetEvent> , że <xref:System.Threading.WaitOrTimerCallback> zadanie`WaitProc` oczekuje na, delegata, który reprezentuje metodę wywołania zwrotnego, jeden sekundowy interwał limitu czasu i wiele wywołań zwrotnych .  
  
 Gdy główny wątek sygnalizuje <xref:System.Threading.AutoResetEvent> <xref:System.Threading.EventWaitHandle.Set%2A> wywołanie metody, <xref:System.Threading.WaitOrTimerCallback> obiekt delegowany jest wywoływany. Metoda `WaitProc` sprawdza<xref:System.Threading.RegisteredWaitHandle> , czy upłynął limit czasu. Jeśli wywołanie zwrotne zostało wywołane, ponieważ dojście oczekiwania zostało zasygnalizowane, `WaitProc` Metoda wyrejestruje <xref:System.Threading.RegisteredWaitHandle>, zatrzymując dalsze wywołania zwrotne. W przypadku przekroczenia limitu czasu zadanie kontynuuje oczekiwanie. `WaitProc` Metoda zostaje zakończona, drukując komunikat do konsoli.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">Wątki i wątkowość</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Zarządzana pula wątków</related>
  </Docs>
</Type>
