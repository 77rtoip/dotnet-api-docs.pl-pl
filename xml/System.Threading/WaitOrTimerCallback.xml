<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1a2dd4ad85878912bdbddf89cd8d606de47b160" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605454" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">
      <span data-ttu-id="f5e75-101">Obiekt zawierający informacje używane przez metodę wywołania zwrotnego za każdym razem jest wykonywana.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5e75-101">An object containing information to be used by the callback method each time it executes.</span>
      </span>
    </param>
    <param name="timedOut">
      <span data-ttu-id="f5e75-102">
        <see langword="true" /> Jeśli <see cref="T:System.Threading.WaitHandle" /> przekroczony; <see langword="false" /> Jeśli został on sygnalizowane.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5e75-102">
          <see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="f5e75-103">Reprezentuje metodę można wywołać, gdy <see cref="T:System.Threading.WaitHandle" /> jest sygnalizowane lub limitu czasu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f5e75-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5e75-104"><xref:System.Threading.WaitOrTimerCallback> reprezentuje metody wywołania zwrotnego, który ma zostać wykonany, gdy dojścia oczekiwania zarejestrowanych limitu czasu lub zostanie zasygnalizowane.</span><span class="sxs-lookup"><span data-stu-id="f5e75-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="f5e75-105">Tworzenie obiektu delegowanego przez przekazanie metodę wywołania zwrotnego do <xref:System.Threading.WaitOrTimerCallback> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="f5e75-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="f5e75-106">Metodę musi mieć podpisu, pokazano poniżej.</span><span class="sxs-lookup"><span data-stu-id="f5e75-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="f5e75-107">Tworzenie dojścia oczekiwania zarejestrowanych przez przekazanie <xref:System.Threading.WaitOrTimerCallback> delegować i <xref:System.Threading.WaitHandle> do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f5e75-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f5e75-108">Zawsze wykonuje metodę wywołania zwrotnego <xref:System.Threading.WaitHandle> limitu czasu lub zostanie zasygnalizowane.</span><span class="sxs-lookup"><span data-stu-id="f5e75-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="f5e75-109">Użytkownicy programu Visual Basic można pominąć <xref:System.Threading.WaitOrTimerCallback> Konstruktor i po prostu użyj `AddressOf` operator podczas przekazywania metody wywołania zwrotnego do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5e75-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="f5e75-110">Visual Basic automatycznie wywołuje konstruktor delegata poprawne.</span><span class="sxs-lookup"><span data-stu-id="f5e75-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="f5e75-111">Jeśli do przekazywania informacji do metody wywołania zwrotnego należy utworzyć obiekt, który zawiera niezbędne informacje i przekaż go do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> po utworzeniu dojście oczekiwania zarejestrowany.</span><span class="sxs-lookup"><span data-stu-id="f5e75-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="f5e75-112">Zawsze wykonuje metodę wywołania zwrotnego, `state` parametr zawiera ten obiekt.</span><span class="sxs-lookup"><span data-stu-id="f5e75-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="f5e75-113">Aby uzyskać więcej informacji o synchronizacji wątków z puli wątków za pomocą metody wywołania zwrotnego, zobacz [puli wątków zarządzanych](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="f5e75-113">For more information about using callback methods to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5e75-114">Poniższy przykład przedstawia użycie <xref:System.Threading.WaitOrTimerCallback> delegata do reprezentowania metody wywołania zwrotnego, która jest wykonywana, gdy zostanie zasygnalizowane dojście oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="f5e75-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="f5e75-115">W przykładzie przedstawiono również sposób użycia <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody próbę wykonania metody wywołania zwrotnego określony podczas oczekiwania określonego dojścia jest sygnalizowane.</span><span class="sxs-lookup"><span data-stu-id="f5e75-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="f5e75-116">W tym przykładzie metoda wywołania zwrotnego jest `WaitProc` i dojście oczekiwania jest <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="f5e75-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="f5e75-117">W przykładzie zdefiniowano `TaskInfo` klasy do przechowywania informacji, który jest przekazywany do wywołania zwrotnego, podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="f5e75-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="f5e75-118">W przykładzie jest tworzony `TaskInfo` obiektów i przypisuje go niektórych danych ciągu.</span><span class="sxs-lookup"><span data-stu-id="f5e75-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="f5e75-119"><xref:System.Threading.RegisteredWaitHandle> Zwróconego przez <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody jest przypisany do `Handle` pole `TaskInfo` obiektu, dzięki czemu metody wywołania zwrotnego ma dostęp do <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="f5e75-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="f5e75-120">Oprócz `TaskInfo` obiektu, wywołanie <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> określa metodę <xref:System.Threading.AutoResetEvent> zadanie czeka na, <xref:System.Threading.WaitOrTimerCallback> delegata, który reprezentuje `WaitProc` metody wywołania zwrotnego, sekundę wartość limitu czasu i wielu wywołań zwrotnych .</span><span class="sxs-lookup"><span data-stu-id="f5e75-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="f5e75-121">Jeśli sygnały wątku głównego <xref:System.Threading.AutoResetEvent> przez wywołanie jego <xref:System.Threading.EventWaitHandle.Set%2A> metody <xref:System.Threading.WaitOrTimerCallback> jest wywoływany delegat.</span><span class="sxs-lookup"><span data-stu-id="f5e75-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="f5e75-122">`WaitProc` Testy metody <xref:System.Threading.RegisteredWaitHandle> ustalenie, czy upłynął limit czasu.</span><span class="sxs-lookup"><span data-stu-id="f5e75-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="f5e75-123">Jeśli wywołania zwrotnego został wywołany, ponieważ został sygnalizowane dojście oczekiwania, `WaitProc` wyrejestrowuje metody <xref:System.Threading.RegisteredWaitHandle>, dalsze zatrzymywanie wywołań zwrotnych.</span><span class="sxs-lookup"><span data-stu-id="f5e75-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="f5e75-124">W przypadku przekroczenia limitu czasu zadanie będzie nadal oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="f5e75-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="f5e75-125">`WaitProc` Metoda kończy się wydrukowanie komunikat do konsoli.</span><span class="sxs-lookup"><span data-stu-id="f5e75-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>