<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="af724dd6cd68f618205b75cc02a5a8db76787ff4" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37754244" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Obiekt zawierający informacje, które ma być używany przez metodę wywołania zwrotnego za każdym razem, gdy wykonuje.</param>
    <param name="timedOut">
      <see langword="true" /> Jeśli <see cref="T:System.Threading.WaitHandle" /> upłynął; <see langword="false" /> Jeśli został on zasygnalizowane.</param>
    <summary>Reprezentuje metodę do wywołania po <see cref="T:System.Threading.WaitHandle" /> zasygnalizowania lub przekroczeniem limitu czasu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> reprezentuje metodę wywołania zwrotnego, który chcesz wykonać, gdy dojście oczekiwania zarejestrowanych upłynie limit czasu lub jest sygnalizowane. Utwórz delegata, przekazując metodę wywołania zwrotnego do <xref:System.Threading.WaitOrTimerCallback> konstruktora. Metoda musi mieć podpis, pokazano poniżej.  
  
 Utwórz dojście oczekiwania zarejestrowanego przez przekazanie <xref:System.Threading.WaitOrTimerCallback> delegować i <xref:System.Threading.WaitHandle> do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>. Metoda wywołania zwrotnego wykonuje każdorazowo <xref:System.Threading.WaitHandle> limitu czasu lub jest sygnalizowane.  
  
  
> [!NOTE]
>  Użytkowników programu Visual Basic można pominąć <xref:System.Threading.WaitOrTimerCallback> Konstruktor i po prostu użyj `AddressOf` operator przy przekazywaniu Metoda wywołania zwrotnego do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic automatycznie wywołuje konstruktor poprawnym delegacie.  
  
 Jeśli chcesz przekazać informacje do metody wywołania zwrotnego, obiekt, który zawiera informacje potrzebne do tworzenia i przekazać ją do <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> po utworzeniu dojście oczekiwania zarejestrowane. Każdorazowo, wykonuje metodę wywołania zwrotnego, `state` parametr zawiera ten obiekt.  
  
 Aby uzyskać więcej informacji na temat przy użyciu metod wywołania zwrotnego do synchronizacji wątków z puli wątków, zobacz [puli wątków zarządzanych](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać <xref:System.Threading.WaitOrTimerCallback> delegata do reprezentowania metody wywołania zwrotnego, który jest wykonywany, gdy jest sygnalizowane dojście oczekiwania.  
  
 W przykładzie pokazano również sposób użycia <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody do wykonania metodą określonego wywołania zwrotnego, gdy jest sygnalizowane dojście oczekiwania określony. W tym przykładzie, metody wywołania zwrotnego jest `WaitProc` i dojście oczekiwania <xref:System.Threading.AutoResetEvent>.  
  
 W przykładzie zdefiniowano `TaskInfo` klasy do przechowywania informacji, który jest przekazywany do wywołania zwrotnego, podczas wykonywania. W przykładzie jest tworzony `TaskInfo` obiektu, a następnie przypisuje go niektóre dane ciągu. <xref:System.Threading.RegisteredWaitHandle> Zwracanym przez <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metody jest przypisany do `Handle` pole `TaskInfo` obiektów, umożliwiające dostęp do metody wywołania zwrotnego <xref:System.Threading.RegisteredWaitHandle>.  
  
 Oprócz `TaskInfo` obiektu, wywołanie <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> określa metodę <xref:System.Threading.AutoResetEvent> zadanie czeka na <xref:System.Threading.WaitOrTimerCallback> delegata, który reprezentuje `WaitProc` metody wywołania zwrotnego, jednosekundowych wartość limitu czasu i wiele wywołań zwrotnych .  
  
 Gdy sygnały w głównym wątku <xref:System.Threading.AutoResetEvent> przez wywołanie jego <xref:System.Threading.EventWaitHandle.Set%2A> metody <xref:System.Threading.WaitOrTimerCallback> obiekt delegowany jest wywoływany. `WaitProc` Testy metoda <xref:System.Threading.RegisteredWaitHandle> do określenia, czy upłynął limit czasu. Jeśli wywołano wywołanie zwrotne, ponieważ zostało zasygnalizowane dojście oczekiwania, `WaitProc` wyrejestrowuje metoda <xref:System.Threading.RegisteredWaitHandle>, zatrzymywanie, dodatkowo, wywołania zwrotne. W przypadku przekroczenia limitu czasu zadanie będzie nadal oczekiwania. `WaitProc` Metoda kończy się wydrukować komunikat do konsoli.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>