<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2e23183129f62f63c4589bc805d4ebc7b8b87041" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3a829-101">Umożliwia wykluczanie wzajemne pierwotnych blokady, gdzie oczekiwania wątku próby uzyskania blokady w pętli sprawdzanie wielokrotnie, dopóki blokada staje się dostępny.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3a829-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a829-102">Na przykład sposobu użycia blokady pokrętła zobacz [porady: Użyj struktury SpinLock do synchronizacji niższego poziomu](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span><span class="sxs-lookup"><span data-stu-id="3a829-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="3a829-103">SPIN blokad może służyć do blokady na poziomie liścia których alokacji obiektu niejawnego przy użyciu <xref:System.Threading.Monitor>, rozmiaru lub ze względu na duże wykorzystanie pamięci kolekcji jest zbyt drogie.</span><span class="sxs-lookup"><span data-stu-id="3a829-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="3a829-104">Zablokuj pokrętła mogą być przydatne w celu unikania blokowania; Jednak jeśli znaczną ilość blokuje, prawdopodobnie nie należy używać blokad pokrętła z powodu nadmiernego Obracająca.</span><span class="sxs-lookup"><span data-stu-id="3a829-104">A spin lock can be useful in to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="3a829-105">Kiedy blokady są szczegółowych i dużych wiele (na przykład blokady na węzeł listy połączonej), a także kiedy blokady z przyczyn razy zawsze są bardzo krótki Obracająca może być korzystne.</span><span class="sxs-lookup"><span data-stu-id="3a829-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="3a829-106">Ogólnie rzecz biorąc podczas utrzymywania blokady pokrętła, co należy unikać żadnego z następujących działań:</span><span class="sxs-lookup"><span data-stu-id="3a829-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="3a829-107">blokowanie,</span><span class="sxs-lookup"><span data-stu-id="3a829-107">blocking,</span></span>  
  
-   <span data-ttu-id="3a829-108">wywoływanie niczego tego samego mogą blokować,</span><span class="sxs-lookup"><span data-stu-id="3a829-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="3a829-109">jednocześnie, zawierający więcej niż jedną blokadę pokręteł</span><span class="sxs-lookup"><span data-stu-id="3a829-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="3a829-110">Tworzenie dynamicznie wysłane wywołania (interfejs i elementy wirtualne),</span><span class="sxs-lookup"><span data-stu-id="3a829-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="3a829-111">Tworzenie statycznie wysyłane wywołania do żadnego kodu, co nie posiada, lub</span><span class="sxs-lookup"><span data-stu-id="3a829-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="3a829-112">Przydzielanie pamięci.</span><span class="sxs-lookup"><span data-stu-id="3a829-112">allocating memory.</span></span>  
  
 <span data-ttu-id="3a829-113"><xref:System.Threading.SpinLock> należy używać tylko po ustaleniu zostały, że spowoduje to poprawi wydajność aplikacji.</span><span class="sxs-lookup"><span data-stu-id="3a829-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="3a829-114">Należy również zauważyć, że <xref:System.Threading.SpinLock> jest typem wartości ze względu na wydajność.</span><span class="sxs-lookup"><span data-stu-id="3a829-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="3a829-115">Z tego powodu należy zwrócić szczególną uwagę na nie skopiować przypadkowo <xref:System.Threading.SpinLock> wystąpienia jako dwa wystąpienia (oryginalny i kopii) przestaną być całkowicie niezależna od siebie, które prawdopodobnie doprowadziłoby do błędnych zachowanie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="3a829-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="3a829-116">Jeśli <xref:System.Threading.SpinLock> wystąpienia muszą być przekazywane wokół, powinny być przekazywane przez odwołanie, a nie przez wartość.</span><span class="sxs-lookup"><span data-stu-id="3a829-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="3a829-117">Nie należy przechowywać <xref:System.Threading.SpinLock> wystąpień w pola tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="3a829-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a829-118">Poniższy przykład przedstawia użycie <xref:System.Threading.SpinLock>:</span><span class="sxs-lookup"><span data-stu-id="3a829-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="3a829-119">Wszystkie elementy członkowskie <see cref="T:System.Threading.SpinLock" /> są wątkowo i mogą być używane przez wiele wątków jednocześnie.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3a829-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking">
          <span data-ttu-id="3a829-120">Identyfikatory czy do przechwytywania i użyj wątków na potrzeby debugowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-120">Whether to capture and use thread IDs for debugging purposes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a829-121">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.SpinLock" /> struktury z opcją do śledzenia identyfikatory zwiększające debugowanie wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-121">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a829-122">Domyślny konstruktor <xref:System.Threading.SpinLock> śledzi wątku własności.</span><span class="sxs-lookup"><span data-stu-id="3a829-122">The default constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a829-123">W poniższym przykładzie pokazano, jak mogą używać struktury SpinLock.</span><span class="sxs-lookup"><span data-stu-id="3a829-123">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="3a829-124">Wartość true, jeśli blokada jest uzyskiwana; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-124">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="3a829-125">
            <c>lockTaken</c> musi zostać zainicjowany jako wartość false przed wywołaniem tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-125">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a829-126">Uzyskuje blokadę w sposób niezawodny taki sposób, że nawet jeśli wystąpi wyjątek w wywołaniu metody <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została nabyta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-126">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a829-127"><xref:System.Threading.SpinLock> jest blokady nie obsługującą, co oznacza, że jeśli wątek utrzymuje blokadę, nie jest dozwolone ponowne wprowadzenie blokady.</span><span class="sxs-lookup"><span data-stu-id="3a829-127"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="3a829-128">Jeśli jest włączone śledzenie własność wątku (czy jest włączone jest dostępna za pośrednictwem <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), zostanie wygenerowany wyjątek, gdy wątek spróbuje ponownie wprowadzić już utrzymuje blokadę.</span><span class="sxs-lookup"><span data-stu-id="3a829-128">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="3a829-129">Jednak jeśli własność wątku śledzenie jest wyłączone, próby wprowadź już blokadzie spowoduje zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="3a829-129">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="3a829-130">Jeśli należy wywołać <xref:System.Threading.SpinLock.Exit%2A> bez najpierw wywołaniem <xref:System.Threading.SpinLock.Enter%2A> wewnętrzny stan klasy <xref:System.Threading.SpinLock> mogą ulec uszkodzeniu.</span><span class="sxs-lookup"><span data-stu-id="3a829-130">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3a829-131">
            <paramref name="lockTaken" /> Argument musi zostać zainicjowany jako wartość false przed wywołaniem Enter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-131">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3a829-132">Własność wątku śledzenia jest włączona, a bieżący wątek ustawił już blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-132">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3a829-133">Zwalnia blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-133">Releases the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3a829-134">Zwalnia blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-134">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a829-135">Przeciążenia domyślne <xref:System.Threading.SpinLock.Exit%2A> zawiera takie samo zachowanie tak, jakby wywoływania <xref:System.Threading.SpinLock.Exit%2A> przy użyciu true jako argument.</span><span class="sxs-lookup"><span data-stu-id="3a829-135">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="3a829-136">Jeśli należy wywołać <xref:System.Threading.SpinLock.Exit%2A> bez najpierw wywołaniem <xref:System.Threading.SpinLock.Enter%2A> wewnętrzny stan klasy <xref:System.Threading.SpinLock> mogą ulec uszkodzeniu.</span><span class="sxs-lookup"><span data-stu-id="3a829-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="3a829-137">Własność wątku śledzenia jest włączona, a bieżący wątek nie jest właścicielem blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-137">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier">
          <span data-ttu-id="3a829-138">Wartość logiczna wskazująca, czy ogranicznika pamięci powinno być wydane do natychmiast publikowania operacji zakończenia inne wątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-138">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a829-139">Zwalnia blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-139">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a829-140">Wywoływanie <xref:System.Threading.SpinLock.Exit%2A> z `useMemoryBarrier` argumentu o wartości true spowoduje zwiększenie sprawiedliwe przydzielanie zasobów blokady kosztem wydajności.</span><span class="sxs-lookup"><span data-stu-id="3a829-140">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="3a829-141">Wartość domyślna <xref:System.Threading.SpinLock.Exit%2A> przeciążenia zachowuje się tak, jakby określając wartość true dla `useMemoryBarrier`.</span><span class="sxs-lookup"><span data-stu-id="3a829-141">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="3a829-142">Jeśli należy wywołać <xref:System.Threading.SpinLock.Exit%2A> bez najpierw wywołaniem <xref:System.Threading.SpinLock.Enter%2A> wewnętrzny stan klasy <xref:System.Threading.SpinLock> mogą ulec uszkodzeniu.</span><span class="sxs-lookup"><span data-stu-id="3a829-142">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="3a829-143">Własność wątku śledzenia jest włączona, a bieżący wątek nie jest właścicielem blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-143">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3a829-144">Pobiera informacje, czy blokada jest obecnie używana przez wszystkie wątki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-144">Gets whether the lock is currently held by any thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3a829-145">wartość true, jeśli blokada jest obecnie używana przez wszystkie wątki; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-145">true if the lock is currently held by any thread; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3a829-146">Pobiera informacje, czy blokada jest używana przez bieżący wątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-146">Gets whether the lock is held by the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3a829-147">wartość true, jeśli blokada jest używana przez bieżący wątek; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-147">true if the lock is held by the current thread; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a829-148">W przypadku blokady zostało zainicjowane do śledzenia wątków właściciela, to zwraca czy blokady są uzyskiwane przez bieżący wątek.</span><span class="sxs-lookup"><span data-stu-id="3a829-148">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="3a829-149">Nie może używać tej właściwości, gdy blokady zostało zainicjowane do żądania nie Śledź własność wątku.</span><span class="sxs-lookup"><span data-stu-id="3a829-149">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3a829-150">Własność wątku śledzenie jest wyłączone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-150">Thread ownership tracking is disabled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3a829-151">Pobiera czy własność wątku śledzenia jest włączona dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-151">Gets whether thread ownership tracking is enabled for this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3a829-152">wartość true, jeśli wątek własność śledzenia jest włączona dla tego wystąpienia; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-152">true if thread ownership tracking is enabled for this instance; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3a829-153">Próbuje uzyskać blokady w sposób niezawodny taki sposób, że nawet jeśli wystąpi wyjątek w wywołaniu metody <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została nabyta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-153">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="3a829-154">Wartość true, jeśli blokada jest uzyskiwana; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-154">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="3a829-155">
            <c>lockTaken</c> musi zostać zainicjowany jako wartość false przed wywołaniem tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-155">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a829-156">Próbuje uzyskać blokady w sposób niezawodny taki sposób, że nawet jeśli wystąpi wyjątek w wywołaniu metody <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została nabyta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-156">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a829-157">W odróżnieniu od <xref:System.Threading.SpinLock.Enter%2A>, TryEnter nie powoduje blokowania oczekiwania na blokadę mają być dostępne.</span><span class="sxs-lookup"><span data-stu-id="3a829-157">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="3a829-158">Jeśli blokada nie jest dostępna, gdy jest wywoływana TryEnter, zwróci natychmiast bez dalszego obracać.</span><span class="sxs-lookup"><span data-stu-id="3a829-158">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3a829-159">
            <paramref name="lockTaken" /> Argument musi zostać zainicjowany jako wartość false przed wywołaniem TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-159">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3a829-160">Własność wątku śledzenia jest włączona, a bieżący wątek ustawił już blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-160">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="3a829-161">Wyrażony w milisekundach czas oczekiwania, lub <see cref="F:System.Threading.Timeout.Infinite" /> (-1) będzie czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-161">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="3a829-162">Wartość true, jeśli blokada jest uzyskiwana; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-162">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="3a829-163">
            <c>lockTaken</c> musi zostać zainicjowany jako wartość false przed wywołaniem tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-163">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a829-164">Próbuje uzyskać blokady w sposób niezawodny taki sposób, że nawet jeśli wystąpi wyjątek w wywołaniu metody <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została nabyta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-164">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a829-165">W odróżnieniu od <xref:System.Threading.SpinLock.Enter%2A>, TryEnter nie powoduje blokowania przez nieokreślony czas oczekiwania na blokadę mają być dostępne.</span><span class="sxs-lookup"><span data-stu-id="3a829-165">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="3a829-166">Blokuje momentu udostępnienia albo blokady lub do czasu `millisecondsTimeout` utracił ważność.</span><span class="sxs-lookup"><span data-stu-id="3a829-166">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3a829-167">
            <paramref name="millisecondsTimeout" /> jest to liczba ujemna niż -1, która reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-167">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3a829-168">
            <paramref name="lockTaken" /> Argument musi zostać zainicjowany jako wartość false przed wywołaniem TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-168">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3a829-169">Własność wątku śledzenia jest włączona, a bieżący wątek ustawił już blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-169">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="3a829-170">A <see cref="T:System.TimeSpan" /> reprezentujący wyrażony w milisekundach czas oczekiwania, lub <see cref="T:System.TimeSpan" /> reprezentujący wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-170">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="3a829-171">Wartość true, jeśli blokada jest uzyskiwana; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-171">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="3a829-172">
            <c>lockTaken</c> musi zostać zainicjowany jako wartość false przed wywołaniem tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-172">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a829-173">Próbuje uzyskać blokady w sposób niezawodny taki sposób, że nawet jeśli wystąpi wyjątek w wywołaniu metody <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została nabyta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-173">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a829-174">W odróżnieniu od <xref:System.Threading.SpinLock.Enter%2A>, TryEnter nie powoduje blokowania przez nieokreślony czas oczekiwania na blokadę mają być dostępne.</span><span class="sxs-lookup"><span data-stu-id="3a829-174">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="3a829-175">Blokuje momentu udostępnienia albo blokady lub do czasu `timeout` utracił ważność.</span><span class="sxs-lookup"><span data-stu-id="3a829-175">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3a829-176">
            <paramref name="timeout" /> jest to liczba ujemna niż-1 milisekund, która reprezentuje nieskończonego limitu czasu - lub - limitu czasu jest większy niż <see cref="F:System.Int32.MaxValue" /> milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-176">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3a829-177">
            <paramref name="lockTaken" /> Argument musi zostać zainicjowany jako wartość false przed wywołaniem TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-177">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="3a829-178">Własność wątku śledzenia jest włączona, a bieżący wątek ustawił już blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a829-178">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>