<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed335508483c31132ca9225eae61c1207873005c" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68393431" /></Metadata><TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <TypeSignature Language="F#" Value="type SpinLock = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cc803-101">Zapewnia wzajemne wykluczenie blokady pierwotnej, gdzie wątek próbujący uzyskać blokadę czeka w pętli wielokrotnie, dopóki blokada nie zostanie udostępniona.</span><span class="sxs-lookup"><span data-stu-id="cc803-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc803-102">Przykład korzystania z blokady pokrętła można znaleźć w temacie [How to: Użyj struktury spinlock do synchronizacji](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)niskiego poziomu.</span><span class="sxs-lookup"><span data-stu-id="cc803-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="cc803-103">Blokady pokrętła mogą być używane dla blokad na poziomie liścia, w których alokacja obiektu jest <xref:System.Threading.Monitor>implikowana przy użyciu, w rozmiarze lub z powodu siły wyrzucania elementów bezużytecznych, jest zbyt kosztowna.</span><span class="sxs-lookup"><span data-stu-id="cc803-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="cc803-104">Blokada pokrętła może być przydatna, aby uniknąć zablokowania; Jeśli jednak spodziewasz się znacznej ilości blokowania, prawdopodobnie nie należy używać blokad pokrętła ze względu na nadmierną wirowanie.</span><span class="sxs-lookup"><span data-stu-id="cc803-104">A spin lock can be useful to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="cc803-105">Wirowanie może być korzystne, gdy blokady są szczegółowe i duże w liczbie (na przykład blokada na węzeł na liście połączonej), a także gdy czasy wstrzymania blokady są zawsze bardzo krótkie.</span><span class="sxs-lookup"><span data-stu-id="cc803-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="cc803-106">Ogólnie rzecz biorąc, podczas utrzymywania blokady pokrętła, należy unikać jednej z następujących akcji:</span><span class="sxs-lookup"><span data-stu-id="cc803-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="cc803-107">blokad</span><span class="sxs-lookup"><span data-stu-id="cc803-107">blocking,</span></span>  
  
-   <span data-ttu-id="cc803-108">Wywołanie wszystkiego, co może być blokowane,</span><span class="sxs-lookup"><span data-stu-id="cc803-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="cc803-109">Jednoczesne trzymanie więcej niż jednej blokady pokrętła</span><span class="sxs-lookup"><span data-stu-id="cc803-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="cc803-110">wykonywanie wywołań dynamicznie wywoływanych (interfejs i wirtualne),</span><span class="sxs-lookup"><span data-stu-id="cc803-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="cc803-111">wykonywanie statycznie wysyłanych wywołań do dowolnego kodu, który nie jest własny, lub</span><span class="sxs-lookup"><span data-stu-id="cc803-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="cc803-112">Przydzielanie pamięci.</span><span class="sxs-lookup"><span data-stu-id="cc803-112">allocating memory.</span></span>  
  
 <span data-ttu-id="cc803-113"><xref:System.Threading.SpinLock>powinno być używane tylko po ustaleniu, że w ten sposób poprawi wydajność aplikacji.</span><span class="sxs-lookup"><span data-stu-id="cc803-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="cc803-114">Należy również pamiętać, że <xref:System.Threading.SpinLock> jest to typ wartości, ze względu na wydajność.</span><span class="sxs-lookup"><span data-stu-id="cc803-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="cc803-115">Z tego powodu należy zachować ostrożność bez przypadkowego kopiowania <xref:System.Threading.SpinLock> wystąpienia, ponieważ dwa wystąpienia (oryginał i kopia) byłyby całkowicie niezależne od siebie, co prawdopodobnie doprowadziłoby do błędnego zachowania aplikacji.</span><span class="sxs-lookup"><span data-stu-id="cc803-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="cc803-116"><xref:System.Threading.SpinLock> Jeśli wystąpienie musi być przesłane, powinno być przesyłane przez odwołanie, a nie przez wartość.</span><span class="sxs-lookup"><span data-stu-id="cc803-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="cc803-117">Nie należy przechowywać <xref:System.Threading.SpinLock> wystąpień w polach tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="cc803-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc803-118">Poniższy przykład pokazuje, <xref:System.Threading.SpinLock>jak używać:</span><span class="sxs-lookup"><span data-stu-id="cc803-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="cc803-119">Wszystkie elementy członkowskie <see cref="T:System.Threading.SpinLock" /> są bezpieczne dla wątków i mogą być używane jednocześnie z wielu wątków.</span><span class="sxs-lookup"><span data-stu-id="cc803-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-120">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-120">SpinLock</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-121">Instrukcje: Korzystanie z Metody SpinWait i struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-121">How to: Use SpinWait and SpinLock</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-122">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-122">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberSignature Language="F#" Value="new System.Threading.SpinLock : bool -&gt; System.Threading.SpinLock" Usage="new System.Threading.SpinLock enableThreadOwnerTracking" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking"><span data-ttu-id="cc803-123">Czy przechwytywać i używać identyfikatorów wątków do celów debugowania.</span><span class="sxs-lookup"><span data-stu-id="cc803-123">Whether to capture and use thread IDs for debugging purposes.</span></span></param>
        <summary><span data-ttu-id="cc803-124">Inicjuje nowe wystąpienie <see cref="T:System.Threading.SpinLock" /> struktury z opcją śledzenia identyfikatorów wątków w celu usprawnienia debugowania.</span><span class="sxs-lookup"><span data-stu-id="cc803-124">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc803-125">Konstruktor bez parametrów do <xref:System.Threading.SpinLock> śledzenia własności wątku.</span><span class="sxs-lookup"><span data-stu-id="cc803-125">The parameterless constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc803-126">W poniższym przykładzie pokazano, jak można używać struktury spinlock.</span><span class="sxs-lookup"><span data-stu-id="cc803-126">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```csharp  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```vb  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-127">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-127">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-128">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-128">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-129">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-129">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.Enter :  -&gt; unit" Usage="spinLock.Enter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken"><span data-ttu-id="cc803-130">Ma wartość true, jeśli blokada jest pozyskana; w przeciwnym razie false.</span><span class="sxs-lookup"><span data-stu-id="cc803-130">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="cc803-131"><paramref name="lockTaken" />musi być zainicjowany do wartości false przed wywołaniem tej metody.</span><span class="sxs-lookup"><span data-stu-id="cc803-131"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="cc803-132">Uzyskuje blokadę w niezawodny sposób, tak że nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby określić, czy blokada została pobrana.</span><span class="sxs-lookup"><span data-stu-id="cc803-132">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc803-133"><xref:System.Threading.SpinLock>jest blokadą niewspółpracującą, co oznacza, że jeśli wątek utrzymuje blokadę, nie można ponownie wprowadzić blokady.</span><span class="sxs-lookup"><span data-stu-id="cc803-133"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="cc803-134">Jeśli funkcja śledzenia własności wątku jest włączona (czy jest dostępna za pomocą <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>programu), zostanie zgłoszony wyjątek, gdy wątek spróbuje ponownie wprowadzić blokadę, która już mieści się.</span><span class="sxs-lookup"><span data-stu-id="cc803-134">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="cc803-135">Jeśli jednak śledzenie własności wątku jest wyłączone, próba wprowadzenia blokady jest już zablokowana.</span><span class="sxs-lookup"><span data-stu-id="cc803-135">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="cc803-136">W <xref:System.Threading.SpinLock.Enter%2A> <xref:System.Threading.SpinLock.Exit%2A> przypadku<xref:System.Threading.SpinLock> wywołania bez wcześniejszego wywołania stanu wewnętrznego może ulec uszkodzeniu.</span><span class="sxs-lookup"><span data-stu-id="cc803-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc803-137"><paramref name="lockTaken" /> Argument musi być zainicjowany do wartości false przed wywołaniem metody ENTER.</span><span class="sxs-lookup"><span data-stu-id="cc803-137">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="cc803-138">Śledzenie własności wątku jest włączone, a bieżący wątek już uzyskał tę blokadę.</span><span class="sxs-lookup"><span data-stu-id="cc803-138">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-139">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-139">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-140">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-140">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-141">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-141">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc803-142">Zwalnia blokadę.</span><span class="sxs-lookup"><span data-stu-id="cc803-142">Releases the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberSignature Language="F#" Value="member this.Exit : unit -&gt; unit" Usage="spinLock.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc803-143">Zwalnia blokadę.</span><span class="sxs-lookup"><span data-stu-id="cc803-143">Releases the lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc803-144">Domyślne Przeciążenie <xref:System.Threading.SpinLock.Exit%2A> zapewnia takie samo zachowanie, jak w przypadku wywołania <xref:System.Threading.SpinLock.Exit%2A> przy użyciu wartości true jako argumentu.</span><span class="sxs-lookup"><span data-stu-id="cc803-144">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="cc803-145">W <xref:System.Threading.SpinLock.Enter%2A> <xref:System.Threading.SpinLock.Exit%2A> przypadku<xref:System.Threading.SpinLock> wywołania bez wcześniejszego wywołania stanu wewnętrznego może ulec uszkodzeniu.</span><span class="sxs-lookup"><span data-stu-id="cc803-145">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="cc803-146">Śledzenie własności wątku jest włączone, a bieżący wątek nie jest właścicielem tej blokady.</span><span class="sxs-lookup"><span data-stu-id="cc803-146">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-147">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-147">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-148">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-148">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-149">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-149">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberSignature Language="F#" Value="member this.Exit : bool -&gt; unit" Usage="spinLock.Exit useMemoryBarrier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier"><span data-ttu-id="cc803-150">Wartość logiczna wskazująca, czy należy wydać ogranicznik pamięci, aby natychmiast opublikować operację wyjścia w innych wątkach.</span><span class="sxs-lookup"><span data-stu-id="cc803-150">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span></span></param>
        <summary><span data-ttu-id="cc803-151">Zwalnia blokadę.</span><span class="sxs-lookup"><span data-stu-id="cc803-151">Releases the lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc803-152"><xref:System.Threading.SpinLock.Exit%2A> Wywołanie`useMemoryBarrier` z argumentem ustawionym na wartość true poprawi atrakcyjność blokady kosztem pewnej wydajności.</span><span class="sxs-lookup"><span data-stu-id="cc803-152">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="cc803-153">Domyślne <xref:System.Threading.SpinLock.Exit%2A> Przeciążenie zachowuje się tak, jakby określono wartość true `useMemoryBarrier`dla.</span><span class="sxs-lookup"><span data-stu-id="cc803-153">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="cc803-154">W <xref:System.Threading.SpinLock.Enter%2A> <xref:System.Threading.SpinLock.Exit%2A> przypadku<xref:System.Threading.SpinLock> wywołania bez wcześniejszego wywołania stanu wewnętrznego może ulec uszkodzeniu.</span><span class="sxs-lookup"><span data-stu-id="cc803-154">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="cc803-155">Śledzenie własności wątku jest włączone, a bieżący wątek nie jest właścicielem tej blokady.</span><span class="sxs-lookup"><span data-stu-id="cc803-155">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-156">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-156">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-157">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-157">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-158">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-158">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeld : bool" Usage="System.Threading.SpinLock.IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc803-159">Pobiera czy blokada jest obecnie utrzymywana przez dowolny wątek.</span><span class="sxs-lookup"><span data-stu-id="cc803-159">Gets whether the lock is currently held by any thread.</span></span></summary>
        <value><span data-ttu-id="cc803-160">ma wartość true, jeśli blokada jest aktualnie utrzymywana przez dowolny wątek; w przeciwnym razie false.</span><span class="sxs-lookup"><span data-stu-id="cc803-160">true if the lock is currently held by any thread; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-161">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-161">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-162">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-162">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-163">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-163">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeldByCurrentThread : bool" Usage="System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc803-164">Pobiera czy blokada jest utrzymywana przez bieżący wątek.</span><span class="sxs-lookup"><span data-stu-id="cc803-164">Gets whether the lock is held by the current thread.</span></span></summary>
        <value><span data-ttu-id="cc803-165">ma wartość true, jeśli blokada jest utrzymywana przez bieżący wątek; w przeciwnym razie false.</span><span class="sxs-lookup"><span data-stu-id="cc803-165">true if the lock is held by the current thread; otherwise false.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc803-166">Jeśli blokada została zainicjowana do śledzenia wątków właściciela, spowoduje to zwrócenie tego, czy blokada jest pobierana przez bieżący wątek.</span><span class="sxs-lookup"><span data-stu-id="cc803-166">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="cc803-167">Nie można użyć tej właściwości, gdy blokada została zainicjowana, aby nie śledzić własności wątku.</span><span class="sxs-lookup"><span data-stu-id="cc803-167">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cc803-168">Śledzenie własności wątku jest wyłączone.</span><span class="sxs-lookup"><span data-stu-id="cc803-168">Thread ownership tracking is disabled.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-169">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-169">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-170">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-170">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-171">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-171">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadOwnerTrackingEnabled : bool" Usage="System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc803-172">Pobiera, czy dla tego wystąpienia jest włączone śledzenie własności wątków.</span><span class="sxs-lookup"><span data-stu-id="cc803-172">Gets whether thread ownership tracking is enabled for this instance.</span></span></summary>
        <value><span data-ttu-id="cc803-173">prawda, jeśli śledzenie własności wątku jest włączone dla tego wystąpienia; w przeciwnym razie false.</span><span class="sxs-lookup"><span data-stu-id="cc803-173">true if thread ownership tracking is enabled for this instance; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-174">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-174">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-175">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-175">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-176">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-176">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc803-177">Próbuje uzyskać blokadę w niezawodny sposób, tak że nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby określić, czy blokada została pobrana.</span><span class="sxs-lookup"><span data-stu-id="cc803-177">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-178">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-178">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-179">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-179">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-180">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-180">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter :  -&gt; unit" Usage="spinLock.TryEnter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken"><span data-ttu-id="cc803-181">Ma wartość true, jeśli blokada jest pozyskana; w przeciwnym razie false.</span><span class="sxs-lookup"><span data-stu-id="cc803-181">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="cc803-182"><paramref name="lockTaken" />musi być zainicjowany do wartości false przed wywołaniem tej metody.</span><span class="sxs-lookup"><span data-stu-id="cc803-182"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="cc803-183">Próbuje uzyskać blokadę w niezawodny sposób, tak że nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby określić, czy blokada została pobrana.</span><span class="sxs-lookup"><span data-stu-id="cc803-183">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc803-184">W przeciwieństwie <xref:System.Threading.SpinLock.Enter%2A>do TryEnter — nie będzie blokować oczekiwania na udostępnienie blokady.</span><span class="sxs-lookup"><span data-stu-id="cc803-184">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="cc803-185">Jeśli blokada jest niedostępna, gdy TryEnter — jest wywoływana, nastąpi natychmiastowe zwrócenie natychmiast bez dalszej wirowania.</span><span class="sxs-lookup"><span data-stu-id="cc803-185">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc803-186"><paramref name="lockTaken" /> Argument musi być zainicjowany do wartości false przed wywołaniem TryEnter —.</span><span class="sxs-lookup"><span data-stu-id="cc803-186">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="cc803-187">Śledzenie własności wątku jest włączone, a bieżący wątek już uzyskał tę blokadę.</span><span class="sxs-lookup"><span data-stu-id="cc803-187">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-188">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-188">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-189">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-189">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-190">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-190">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : int *  -&gt; unit" Usage="spinLock.TryEnter (millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="cc803-191">Liczba milisekund oczekiwania lub <see cref="F:System.Threading.Timeout.Infinite" /> (-1) oczekiwania na czas nieokreślony.</span><span class="sxs-lookup"><span data-stu-id="cc803-191">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="cc803-192">Ma wartość true, jeśli blokada jest pozyskana; w przeciwnym razie false.</span><span class="sxs-lookup"><span data-stu-id="cc803-192">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="cc803-193"><paramref name="lockTaken" />musi być zainicjowany do wartości false przed wywołaniem tej metody.</span><span class="sxs-lookup"><span data-stu-id="cc803-193"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="cc803-194">Próbuje uzyskać blokadę w niezawodny sposób, tak że nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby określić, czy blokada została pobrana.</span><span class="sxs-lookup"><span data-stu-id="cc803-194">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc803-195">W przeciwieństwie <xref:System.Threading.SpinLock.Enter%2A>do TryEnter — nie będzie blokować czas oczekiwania na udostępnienie blokady.</span><span class="sxs-lookup"><span data-stu-id="cc803-195">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="cc803-196">Zostanie ona Zablokowani do momentu udostępnienia blokady lub do `millisecondsTimeout` momentu wygaśnięcia.</span><span class="sxs-lookup"><span data-stu-id="cc803-196">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cc803-197"><paramref name="millisecondsTimeout" />jest liczbą ujemną inną niż-1, co oznacza nieskończony limit czasu.</span><span class="sxs-lookup"><span data-stu-id="cc803-197"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc803-198"><paramref name="lockTaken" /> Argument musi być zainicjowany do wartości false przed wywołaniem TryEnter —.</span><span class="sxs-lookup"><span data-stu-id="cc803-198">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="cc803-199">Śledzenie własności wątku jest włączone, a bieżący wątek już uzyskał tę blokadę.</span><span class="sxs-lookup"><span data-stu-id="cc803-199">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-200">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-200">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-201">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-201">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-202">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-202">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : TimeSpan *  -&gt; unit" Usage="spinLock.TryEnter (timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="cc803-203">Reprezentuje liczbę milisekund, które należy oczekiwać <see cref="T:System.TimeSpan" /> lub który reprezentuje-1 milisekund, aby czekać na czas nieokreślony. <see cref="T:System.TimeSpan" /></span><span class="sxs-lookup"><span data-stu-id="cc803-203">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="cc803-204">Ma wartość true, jeśli blokada jest pozyskana; w przeciwnym razie false.</span><span class="sxs-lookup"><span data-stu-id="cc803-204">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="cc803-205"><paramref name="lockTaken" />musi być zainicjowany do wartości false przed wywołaniem tej metody.</span><span class="sxs-lookup"><span data-stu-id="cc803-205"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="cc803-206">Próbuje uzyskać blokadę w niezawodny sposób, tak że nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby określić, czy blokada została pobrana.</span><span class="sxs-lookup"><span data-stu-id="cc803-206">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc803-207">W przeciwieństwie <xref:System.Threading.SpinLock.Enter%2A>do TryEnter — nie będzie blokować czas oczekiwania na udostępnienie blokady.</span><span class="sxs-lookup"><span data-stu-id="cc803-207">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="cc803-208">Zostanie ona Zablokowani do momentu udostępnienia blokady lub do `timeout` momentu wygaśnięcia.</span><span class="sxs-lookup"><span data-stu-id="cc803-208">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cc803-209"><paramref name="timeout" />jest liczbą ujemną inną niż-1 milisekund, która reprezentuje nieskończony limit czasu lub limit czasu jest większy niż <see cref="F:System.Int32.MaxValue" /> milisekunda.</span><span class="sxs-lookup"><span data-stu-id="cc803-209"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc803-210"><paramref name="lockTaken" /> Argument musi być zainicjowany do wartości false przed wywołaniem TryEnter —.</span><span class="sxs-lookup"><span data-stu-id="cc803-210">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="cc803-211">Śledzenie własności wątku jest włączone, a bieżący wątek już uzyskał tę blokadę.</span><span class="sxs-lookup"><span data-stu-id="cc803-211">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="cc803-212">SpinLock</span><span class="sxs-lookup"><span data-stu-id="cc803-212">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="cc803-213">Instrukcje: Użyj struktury spinlock do synchronizacji niskiego poziomu</span><span class="sxs-lookup"><span data-stu-id="cc803-213">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="cc803-214">Instrukcje: Włącz tryb śledzenia wątków w struktury spinlock</span><span class="sxs-lookup"><span data-stu-id="cc803-214">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>