<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c59e9333980e098ae85de5217b5fbd9769ec6870" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51896667" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <TypeSignature Language="F#" Value="type SpinLock = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9b219-101">Udostępnia podstawowego blokady wzajemne wykluczenie, gdzie wątek, próbując uzyskać blokadę czeka w pętli, sprawdzanie wielokrotnie, dopóki blokada staje się dostępna.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9b219-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b219-102">Na przykład jak używać blokadę pokrętła zobacz [porady: Użyj struktury SpinLock do synchronizacji niższego poziomu](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span><span class="sxs-lookup"><span data-stu-id="9b219-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="9b219-103">Pokrętła blokady może służyć do blokady na poziomie liścia gdzie Alokacja obiektu jest implikowane przy użyciu <xref:System.Threading.Monitor>, rozmiarze lub z powodu dużego wykorzystania kolekcji wyrzucania elementów, jest zbyt kosztowne.</span><span class="sxs-lookup"><span data-stu-id="9b219-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="9b219-104">Zablokuj pokrętła może być przydatne w celu unikania blokowania; Jednak jeśli oczekujesz, że znaczną ilość blokowania, prawdopodobnie nie należy używać blokad pokrętła z powodu nadmiernego obrotowych.</span><span class="sxs-lookup"><span data-stu-id="9b219-104">A spin lock can be useful to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="9b219-105">Rotowania może być korzystne, gdy blokady są szczegółowe, jak i dużych wiele (na przykład blokadę na węzeł połączonej liście), a także podczas blokady wstrzymania i godziny są zawsze bardzo krótko.</span><span class="sxs-lookup"><span data-stu-id="9b219-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="9b219-106">Ogólnie rzecz biorąc podczas utrzymywania blokady pokrętła, jeden należy unikać dowolnej z tych akcji:</span><span class="sxs-lookup"><span data-stu-id="9b219-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="9b219-107">blokuje,</span><span class="sxs-lookup"><span data-stu-id="9b219-107">blocking,</span></span>  
  
-   <span data-ttu-id="9b219-108">Cokolwiek wywołanie tej samej mogą blokować,</span><span class="sxs-lookup"><span data-stu-id="9b219-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="9b219-109">jednocześnie, zawierający więcej niż jedną blokadę pokrętła</span><span class="sxs-lookup"><span data-stu-id="9b219-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="9b219-110">dynamiczne tworzenie wysyłane wywołania (interfejs i elementy wirtualne)</span><span class="sxs-lookup"><span data-stu-id="9b219-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="9b219-111">Tworzenie statycznie wysyłane wywołania do jakiegokolwiek kodu, jeden nie posiada, lub</span><span class="sxs-lookup"><span data-stu-id="9b219-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="9b219-112">Przydzielanie pamięci.</span><span class="sxs-lookup"><span data-stu-id="9b219-112">allocating memory.</span></span>  
  
 <span data-ttu-id="9b219-113"><xref:System.Threading.SpinLock> należy używać tylko po użytkownik zostały uznane za, spowoduje to więc poprawi wydajność aplikacji.</span><span class="sxs-lookup"><span data-stu-id="9b219-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="9b219-114">Jest również pamiętać, że <xref:System.Threading.SpinLock> jest typem wartości w celu zapewnienia optymalnej wydajności.</span><span class="sxs-lookup"><span data-stu-id="9b219-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="9b219-115">Z tego powodu należy zwrócić szczególną uwagę na nie skopiować przypadkowo <xref:System.Threading.SpinLock> wystąpienia, tak, jak dwa wystąpienia (oryginału i kopii) będzie wówczas całkowicie niezależne od siebie nawzajem, które prawdopodobnie mogłyby prowadzić do błędne zachowanie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="9b219-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="9b219-116">Jeśli <xref:System.Threading.SpinLock> wystąpienia muszą być przekazywane w całym, powinien być przekazywany przez odwołanie, a nie przez wartość.</span><span class="sxs-lookup"><span data-stu-id="9b219-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="9b219-117">Nie należy przechowywać <xref:System.Threading.SpinLock> wystąpień w pola tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="9b219-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b219-118">Poniższy przykład pokazuje, jak używać <xref:System.Threading.SpinLock>:</span><span class="sxs-lookup"><span data-stu-id="9b219-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="9b219-119">Wszystkie elementy członkowskie <see cref="T:System.Threading.SpinLock" /> są odporne na wątki i mogą być używane jednocześnie z wielu wątków.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9b219-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
      <span data-ttu-id="9b219-120">SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="9b219-120">SpinLock</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
      <span data-ttu-id="9b219-121">Porady: Użyj metody SpinWait i strukturze SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="9b219-121">How to: Use SpinWait and SpinLock</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
      <span data-ttu-id="9b219-122">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="9b219-122">How to: Enable Thread-Tracking Mode in SpinLock</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberSignature Language="F#" Value="new System.Threading.SpinLock : bool -&gt; System.Threading.SpinLock" Usage="new System.Threading.SpinLock enableThreadOwnerTracking" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking">
          <span data-ttu-id="9b219-123">Identyfikatory czy przechwytywania i wykorzystania wątków na potrzeby debugowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-123">Whether to capture and use thread IDs for debugging purposes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9b219-124">Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.SpinLock" /> struktury z opcją do śledzenia wątków identyfikatorów w celu debugowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-124">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b219-125">Domyślny konstruktor dla <xref:System.Threading.SpinLock> śledzi wątku własności.</span><span class="sxs-lookup"><span data-stu-id="9b219-125">The default constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9b219-126">W poniższym przykładzie pokazano, jak może służyć w strukturze SpinLock.</span><span class="sxs-lookup"><span data-stu-id="9b219-126">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```csharp  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```vb  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-127">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-127">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-128">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-128">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-129">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-129">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.Enter :  -&gt; unit" Usage="spinLock.Enter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="9b219-130">Wartość true, jeśli jest blokada; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-130">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="9b219-131">
            <c>lockTaken</c> musi zostać zainicjowana na wartość false przed wywołaniem tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-131">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9b219-132">Uzyskuje blokadę w sposób niezawodny, nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została uzyskana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-132">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b219-133"><xref:System.Threading.SpinLock> blokady nie obsługującą to, co oznacza, że jeśli wątek nałoży blokadę, nie może ponownie wprowadź blokadę.</span><span class="sxs-lookup"><span data-stu-id="9b219-133"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="9b219-134">Jeśli wątek własność śledzenia jest włączona (czy jest włączony jest dostępna za pośrednictwem <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), wyjątek zostanie zgłoszony, gdy wątek spróbuje ponownie wprowadzić już posiada blokadę.</span><span class="sxs-lookup"><span data-stu-id="9b219-134">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="9b219-135">Jednak jeśli własność wątku śledzenie jest wyłączone, próby wprowadź blokadę z już posiadanych spowoduje zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="9b219-135">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="9b219-136">Jeśli wywołasz <xref:System.Threading.SpinLock.Exit%2A> bez konieczności najpierw wywołuje <xref:System.Threading.SpinLock.Enter%2A> wewnętrzny stan <xref:System.Threading.SpinLock> mogą ulec uszkodzeniu.</span><span class="sxs-lookup"><span data-stu-id="9b219-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9b219-137">
            <paramref name="lockTaken" /> Argument musi być zainicjowany na wartość false przed wywołaniem Enter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-137">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="9b219-138">Własność wątku śledzenia jest włączona, a bieżący wątek ustawił już tę blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-138">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-139">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-139">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-140">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-140">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-141">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-141">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9b219-142">Zwalnia blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-142">Releases the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberSignature Language="F#" Value="member this.Exit : unit -&gt; unit" Usage="spinLock.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9b219-143">Zwalnia blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-143">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b219-144">Przeciążenia domyślnego <xref:System.Threading.SpinLock.Exit%2A> zapewnia takie samo zachowanie, tak, jakby wywoływania <xref:System.Threading.SpinLock.Exit%2A> przy użyciu wartości true jako argument.</span><span class="sxs-lookup"><span data-stu-id="9b219-144">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="9b219-145">Jeśli wywołasz <xref:System.Threading.SpinLock.Exit%2A> bez konieczności najpierw wywołuje <xref:System.Threading.SpinLock.Enter%2A> wewnętrzny stan <xref:System.Threading.SpinLock> mogą ulec uszkodzeniu.</span><span class="sxs-lookup"><span data-stu-id="9b219-145">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="9b219-146">Własność wątku śledzenia jest włączona, a bieżący wątek nie jest właścicielem tego blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-146">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-147">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-147">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-148">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-148">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-149">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-149">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberSignature Language="F#" Value="member this.Exit : bool -&gt; unit" Usage="spinLock.Exit useMemoryBarrier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier">
          <span data-ttu-id="9b219-150">Wartość logiczna wskazująca, czy powinno być wydane horyzont pamięci, aby natychmiast opublikować operacji wyjścia dla innych wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-150">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9b219-151">Zwalnia blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-151">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b219-152">Wywoływanie <xref:System.Threading.SpinLock.Exit%2A> z `useMemoryBarrier` argument ma wartość true poprawia sprawiedliwe blokady kosztem wydajności.</span><span class="sxs-lookup"><span data-stu-id="9b219-152">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="9b219-153">Wartość domyślna <xref:System.Threading.SpinLock.Exit%2A> przeciążenia zachowuje się tak, określając wartość true dla `useMemoryBarrier`.</span><span class="sxs-lookup"><span data-stu-id="9b219-153">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="9b219-154">Jeśli wywołasz <xref:System.Threading.SpinLock.Exit%2A> bez konieczności najpierw wywołuje <xref:System.Threading.SpinLock.Enter%2A> wewnętrzny stan <xref:System.Threading.SpinLock> mogą ulec uszkodzeniu.</span><span class="sxs-lookup"><span data-stu-id="9b219-154">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="9b219-155">Własność wątku śledzenia jest włączona, a bieżący wątek nie jest właścicielem tego blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-155">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-156">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-156">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-157">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-157">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-158">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-158">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeld : bool" Usage="System.Threading.SpinLock.IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9b219-159">Pobiera informacje, czy blokada jest aktualnie trzymana w żadnym z wątków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-159">Gets whether the lock is currently held by any thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9b219-160">wartość true, jeśli blokada jest aktualnie trzymana przez wątek; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-160">true if the lock is currently held by any thread; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-161">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-161">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-162">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-162">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-163">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-163">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeldByCurrentThread : bool" Usage="System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9b219-164">Pobiera informacje, czy blokada jest używana przez bieżącego wątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-164">Gets whether the lock is held by the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9b219-165">wartość true, jeśli blokada jest używana przez bieżący wątek; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-165">true if the lock is held by the current thread; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b219-166">Jeśli blokada została zainicjowana do śledzenia wątków właściciela, spowoduje to zwrócenie czy jest blokada przez bieżącego wątku.</span><span class="sxs-lookup"><span data-stu-id="9b219-166">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="9b219-167">Jest on nieprawidłowy, aby używać tej właściwości, gdy blokady zostało zainicjowane do "nie Śledź" własność wątku.</span><span class="sxs-lookup"><span data-stu-id="9b219-167">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9b219-168">Własność wątku śledzenie jest wyłączone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-168">Thread ownership tracking is disabled.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-169">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-169">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-170">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-170">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-171">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-171">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadOwnerTrackingEnabled : bool" Usage="System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9b219-172">Pobiera informacje, czy wątek własność śledzenia jest włączona dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-172">Gets whether thread ownership tracking is enabled for this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9b219-173">wartość true, jeśli wątek własność śledzenia jest włączona dla tego wystąpienia; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-173">true if thread ownership tracking is enabled for this instance; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-174">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-174">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-175">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-175">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-176">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-176">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9b219-177">Próbuje uzyskać blokadę w sposób niezawodny, nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została uzyskana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-177">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-178">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-178">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-179">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-179">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-180">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-180">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter :  -&gt; unit" Usage="spinLock.TryEnter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="9b219-181">Wartość true, jeśli jest blokada; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-181">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="9b219-182">
            <c>lockTaken</c> musi zostać zainicjowana na wartość false przed wywołaniem tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-182">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9b219-183">Próbuje uzyskać blokadę w sposób niezawodny, nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została uzyskana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-183">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b219-184">W odróżnieniu od <xref:System.Threading.SpinLock.Enter%2A>, tryenter — nie będzie blokować oczekiwanie na blokadę, które mają być dostępne.</span><span class="sxs-lookup"><span data-stu-id="9b219-184">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="9b219-185">Jeśli blokada nie jest dostępna, gdy wywoływana jest tryenter —, zwróci natychmiast bez dalszego obrotowych.</span><span class="sxs-lookup"><span data-stu-id="9b219-185">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9b219-186">
            <paramref name="lockTaken" /> Argument musi być zainicjowany na wartość false przed wywołaniem tryenter —.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-186">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="9b219-187">Własność wątku śledzenia jest włączona, a bieżący wątek ustawił już tę blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-187">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-188">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-188">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-189">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-189">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-190">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-190">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : int *  -&gt; unit" Usage="spinLock.TryEnter (millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="9b219-191">Liczba milisekund, lub <see cref="F:System.Threading.Timeout.Infinite" /> (-1), aby czekać w nieskończoność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-191">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="9b219-192">Wartość true, jeśli jest blokada; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-192">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="9b219-193">
            <c>lockTaken</c> musi zostać zainicjowana na wartość false przed wywołaniem tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-193">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9b219-194">Próbuje uzyskać blokadę w sposób niezawodny, nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została uzyskana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-194">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b219-195">W odróżnieniu od <xref:System.Threading.SpinLock.Enter%2A>, tryenter — nie będzie blokować przez czas nieokreślony oczekujący na blokadę, które mają być dostępne.</span><span class="sxs-lookup"><span data-stu-id="9b219-195">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="9b219-196">Spowoduje to zablokowanie, dopóki blokada jest dostępny, lub do momentu `millisecondsTimeout` utracił ważność.</span><span class="sxs-lookup"><span data-stu-id="9b219-196">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9b219-197">
            <paramref name="millisecondsTimeout" /> jest liczbą ujemną od-1, który reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-197">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9b219-198">
            <paramref name="lockTaken" /> Argument musi być zainicjowany na wartość false przed wywołaniem tryenter —.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-198">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="9b219-199">Własność wątku śledzenia jest włączona, a bieżący wątek ustawił już tę blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-199">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-200">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-200">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-201">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-201">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-202">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-202">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : TimeSpan *  -&gt; unit" Usage="spinLock.TryEnter (timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="9b219-203">A <see cref="T:System.TimeSpan" /> reprezentujący liczbę milisekund oczekiwania, lub <see cref="T:System.TimeSpan" /> reprezentujący milisekund czekać w nieskończoność,-1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-203">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="9b219-204">Wartość true, jeśli jest blokada; w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-204">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="9b219-205">
            <c>lockTaken</c> musi zostać zainicjowana na wartość false przed wywołaniem tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-205">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9b219-206">Próbuje uzyskać blokadę w sposób niezawodny, nawet jeśli wystąpi wyjątek w wywołaniu metody, <paramref name="lockTaken" /> może być niezawodnie zbadane, aby ustalić, czy blokada została uzyskana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-206">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9b219-207">W odróżnieniu od <xref:System.Threading.SpinLock.Enter%2A>, tryenter — nie będzie blokować przez czas nieokreślony oczekujący na blokadę, które mają być dostępne.</span><span class="sxs-lookup"><span data-stu-id="9b219-207">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="9b219-208">Spowoduje to zablokowanie, dopóki blokada jest dostępny, lub do momentu `timeout` utracił ważność.</span><span class="sxs-lookup"><span data-stu-id="9b219-208">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9b219-209">
            <paramref name="timeout" /> jest to liczba ujemna, innych niż-1 MS, który reprezentuje nieskończony limit czasu — lub — limit czasu jest większy niż <see cref="F:System.Int32.MaxValue" /> milisekund.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-209">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9b219-210">
            <paramref name="lockTaken" /> Argument musi być zainicjowany na wartość false przed wywołaniem tryenter —.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-210">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="9b219-211">Własność wątku śledzenia jest włączona, a bieżący wątek ustawił już tę blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-211">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="9b219-212">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-212">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="9b219-213">Porady: używanie struktury SpinLock do synchronizacji niskiego poziomu</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-213">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="9b219-214">Porady: włączanie śledzenia wątków w strukturze SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="9b219-214">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>