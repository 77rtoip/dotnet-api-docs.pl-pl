<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Monitor.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cfafcfe91d4ef6eba6ebbbbe6d7101119c93823a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfafcfe91d4ef6eba6ebbbbe6d7101119c93823a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Monitor">
          <source>Provides a mechanism that synchronizes access to objects.</source>
          <target state="translated">Udostępnia mechanizm synchronizujący dostęp do obiektów.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Klasa umożliwia synchronizowanie dostęp do obszaru kodu przez pobranie i zwolnienie blokady dla określonego obiektu przez wywołanie metody <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType&gt;</ph>, i <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</source>
          <target state="translated">Obiekt blokady zapewniają możliwość ograniczenia dostępu do bloku kodu, często nazywane sekcja krytyczna.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>While a thread owns the lock for an object, no other thread can acquire that lock.</source>
          <target state="translated">Gdy wątek jest właścicielem blokady dla obiekt, żadnego innego wątku można uzyskać tego blokady.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</source>
          <target state="translated">Można również użyć <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klasę, aby zapewnić, że nie inne wątku jest zezwolenie dostępu do sekcji aplikacji kodu wykonywana przez właściciela blokady, chyba że innego wątku jest wykonywanie kodu przy użyciu innego obiektu zablokowanym.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>In this article:</source>
          <target state="translated">W tym artykule:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>The Monitor class: An overview<ept id="p1">](#Overview)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Klasa monitora: omówienie<ept id="p1">](#Overview)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>The lock object<ept id="p1">](#Lock)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Obiekt blokady<ept id="p1">](#Lock)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>The critical section<ept id="p1">](#CriticalSection)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Sekcja krytyczna<ept id="p1">](#CriticalSection)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>Pulse, PulseAll, and Wait<ept id="p1">](#Pulse)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Puls, PulseAll i oczekiwania<ept id="p1">](#Pulse)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>Monitors and wait handles<ept id="p1">](#WaitHandles)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Monitory i uchwyty oczekiwania<ept id="p1">](#WaitHandles)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The Monitor class: An overview</source>
          <target state="translated">Klasa monitora: omówienie</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> has the following features:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> zawiera następujące funkcje:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It is associated with an object on demand.</source>
          <target state="translated">Jest on skojarzony z obiektu na żądanie.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It is unbound, which means it can be called directly from any context.</source>
          <target state="translated">Jest on niezwiązany, co oznacza, że można wywołać bezpośrednio w dowolnym kontekście.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>An instance of the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class cannot be created; the methods of the <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> class are all static.</source>
          <target state="translated">Wystąpienie <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> nie można utworzyć klasy; metody <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> klasy są wszystkie statyczne.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each method is passed the synchronized object that controls access to the critical section.</source>
          <target state="translated">Każda metoda jest przekazywana synchronizowany obiekt, który kontroluje dostęp do sekcji krytycznych.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class to lock objects other than strings (that is, reference types other than <ph id="ph2">&lt;xref:System.String&gt;</ph>), not value types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klasy do obiektu blokady inne niż ciągi (odwoływać się typów innych niż <ph id="ph2">&lt;xref:System.String&gt;</ph>), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>For details, see the overloads of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> method and <bpt id="p1">[</bpt>The lock object<ept id="p1">](#Lock)</ept> section later in this article.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz przeciążeń <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> — metoda i <bpt id="p1">[</bpt>zablokować obiektu<ept id="p1">](#Lock)</ept> sekcji w dalszej części tego artykułu.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following table describes the actions that can be taken by threads that access synchronized objects:</source>
          <target state="translated">W poniższej tabeli opisano akcje, które można podjąć wątków, które uzyskują dostęp do synchronizowane obiekty:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Action</source>
          <target state="translated">Akcja</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Description</source>
          <target state="translated">Opis</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Acquires a lock for an object.</source>
          <target state="translated">Uzyskuje blokadę dla obiekt.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This action also marks the beginning of a critical section.</source>
          <target state="translated">Ta akcja również oznacza początek sekcja krytyczna.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</source>
          <target state="translated">Żadnego innego wątku można wprowadzić sekcja krytyczna, chyba że wykonuje zgodnie z instrukcjami w sekcji krytyczne przy użyciu innego obiektu zablokowanym.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Releases the lock on an object in order to permit other threads to lock and access the object.</source>
          <target state="translated">Zwalnia blokadę obiektu w celu umożliwienia innych wątków do blokowania i dostępu do obiektu.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The calling thread waits while another thread accesses the object.</source>
          <target state="translated">Wątek wywołujący czeka, podczas gdy inny wątek uzyskuje dostęp do obiektu.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Pulse signals are used to notify waiting threads about changes to an object's state.</source>
          <target state="translated">Sygnały Pulse są używane do powiadamiania wątków oczekujących o zmianach stanu obiektu.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> (signal), <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> (sygnał) <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Sends a signal to one or more waiting threads.</source>
          <target state="translated">Wysyła sygnał do jednego lub więcej wątków oczekujących.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</source>
          <target state="translated">Sygnał powiadamia oczekiwania wątku, który zmienił się stan zablokowany obiekt, a właścicielem blokady jest gotowy do zwolnienia blokady.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</source>
          <target state="translated">Oczekiwania wątku jest umieszczony w kolejce gotowy obiektu, tak aby po pewnym czasie może odbierać blokady dla obiekt.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</source>
          <target state="translated">Wątek ma blokady, on sprawdzić nowy stan obiektu, aby zobaczyć, czy osiągnięto wymaganym stanem.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Releases the lock on an object.</source>
          <target state="translated">Zwalnia blokadę obiektu.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This action also marks the end of a critical section protected by the locked object.</source>
          <target state="translated">Ta akcja również oznacza koniec sekcji krytycznej chronione przez zablokowany obiekt.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, there are two sets of overloads for the <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph> methods.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, istnieją dwa zestawy przeciążenia dla <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> i <ph id="ph3">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>One set of overloads has a <ph id="ph1">`ref`</ph> (in C#) or <ph id="ph2">`ByRef`</ph> (in Visual Basic) <ph id="ph3">&lt;xref:System.Boolean&gt;</ph> parameter that is atomically set to <ph id="ph4">`true`</ph> if the lock is acquired, even if an exception is thrown when acquiring the lock.</source>
          <target state="translated">Jeden zestaw przeciążenia zawiera <ph id="ph1">`ref`</ph> (w języku C#) lub <ph id="ph2">`ByRef`</ph> (w języku Visual Basic) <ph id="ph3">&lt;xref:System.Boolean&gt;</ph> atomowo ustawiono parametr <ph id="ph4">`true`</ph> Jeśli blokady są uzyskiwane, nawet jeśli jest zgłaszany wyjątek podczas pobierania blokady.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</source>
          <target state="translated">Użyj tych przeciążenia, jeśli jest bardzo istotne, aby zwolnić blokady we wszystkich przypadkach, nawet wtedy, gdy zasoby, które chroni blokady może nie być w stanie spójności.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The lock object</source>
          <target state="translated">Obiekt blokady</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The Monitor class consists of <ph id="ph1">`static`</ph> (in C#) or  <ph id="ph2">`Shared`</ph> (in Visual Basic) methods that operate on an object that controls access to the critical section.</source>
          <target state="translated">Klasa monitora składa się z <ph id="ph1">`static`</ph> (w języku C#) lub <ph id="ph2">`Shared`</ph> (w języku Visual Basic) metod, które pracują na obiekt czy kontroluje dostęp do sekcji krytycznych.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following information is maintained for each synchronized object:</source>
          <target state="translated">Następujące informacje są obsługiwane dla poszczególnych obiektów synchronizowanych:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>A reference to the thread that currently holds the lock.</source>
          <target state="translated">Odwołanie do wątku, który aktualnie posiada blokady.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>A reference to a ready queue, which contains the threads that are ready to obtain the lock.</source>
          <target state="translated">Odwołanie do kolejki gotowy, która zawiera wątków, które są gotowe do uzyskania blokady.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</source>
          <target state="translated">Odwołanie do kolejki oczekiwania, która zawiera wątków, które oczekują na powiadomienia o zmianie w stanie zablokowanym obiektu.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> locks objects (that is, reference types), not value types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> blokuje obiektów (czyli typów referencyjnych), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>While you can pass a value type to <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, it is boxed separately for each call.</source>
          <target state="translated">Można przekazać typu wartości do <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, jest opakowany osobno dla każdego wywołania.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Since each call creates a separate object, <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> never blocks, and the code it is supposedly protecting is not really synchronized.</source>
          <target state="translated">Ponieważ każde wywołanie tworzy oddzielny obiekt <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> nigdy nie bloków i kod jest prawdopodobnie ochrona nie jest naprawdę zsynchronizowany.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>In addition, the object passed to <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> is different from the object passed to <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, so <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> throws <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> exception with the message "Object synchronization method was called from an unsynchronized block of code."</source>
          <target state="translated">Ponadto obiekt przekazywany do <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> jest inny niż obiekt przekazany do <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, więc <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> zgłasza <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> wyjątek z komunikatem "Metoda synchronizacji obiektu została wywołana z niezsynchronizowanego bloku kodu."</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following example illustrates this problem.</source>
          <target state="translated">Poniższy przykład przedstawia ten problem.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It launches ten tasks, each of which just sleeps for 250 milliseconds.</source>
          <target state="translated">Jest uruchamiany dziesięciu zadań, z których każdy właśnie zostanie uśpiony na 250 milisekund.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each task then updates a counter variable, <ph id="ph1">`nTasks`</ph>, which is intended to count the number of tasks that actually launched and executed.</source>
          <target state="translated">Każde zadanie następnie aktualizuje zmienną licznika <ph id="ph1">`nTasks`</ph>, jest przeznaczony do zliczania faktycznie uruchamiana i wykonywane zadania.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Because <ph id="ph1">`nTasks`</ph> is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</source>
          <target state="translated">Ponieważ <ph id="ph1">`nTasks`</ph> jest zmienną globalną, który może być aktualizowany przez wielu zadań jednocześnie, monitor jest używane do ochrony przed awarią modyfikacji wielu zadań.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>However, as the output from the example shows, each of the tasks throws a <ph id="ph1">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> exception.</source>
          <target state="translated">Jednak jako dane wyjściowe w przykładzie pokazano, wszystkie zadania zgłasza <ph id="ph1">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> wyjątku.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each task throws a <ph id="ph1">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> exception because the <ph id="ph2">`nTasks`</ph> variable is boxed before the call to the <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> method in each task.</source>
          <target state="translated">Zgłasza wyjątek, każde zadanie <ph id="ph1">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> wyjątek ponieważ <ph id="ph2">`nTasks`</ph> zmiennej jest opakowany przed wywołaniem do <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> metody w każdym zadaniu.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>In other words, each method call is passed a separate variable that is independent of the others.</source>
          <target state="translated">Innymi słowy każde wywołanie metody jest przekazywany osobnej zmiennej, która jest niezależna od innych.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">`nTasks`</ph> is boxed again in the call to the <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`nTasks`</ph> jest ponownie opakowany w wywołaniu <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Once again, this creates ten new boxed variables, which are independent of each other, <ph id="ph1">`nTasks`</ph>, and the ten boxed variables created in the call to the <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Ponownie, spowoduje to utworzenie dziesięć nowe zmienne ramkach, które są od siebie niezależne, <ph id="ph1">`nTasks`</ph>, dziesięciu skrzynkach zmiennych utworzonych w wywołaniu <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</source>
          <target state="translated">Wyjątku, następnie, ponieważ próbuje zwolnić blokady na nowo utworzony zmiennej, która wcześniej nie był zablokowany naszego kodu.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Although you can box a value type variable before calling <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</source>
          <target state="translated">Mimo że można polu wartość typu zmienną przed wywołaniem <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, jak pokazano w przykładzie następujących i przebiegu tego samego obiektu spakowanego do obu metod, nie ma żadnych dodatkowych zalet w ten sposób.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</source>
          <target state="translated">Zmiany do zmiennej rozpakowany nie są widoczne w ramce kopii, a nie istnieje sposób zmianę wartości opakowanego kopiowania.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When selecting an object on which to synchronize, you should lock only on private or internal objects.</source>
          <target state="translated">Po wybraniu obiektu, w którym można zsynchronizować powinna zablokować tylko w obiektach prywatny lub wewnętrzny.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</source>
          <target state="translated">Blokowanie zewnętrznych obiektów może spowodować zakleszczenia, ponieważ kod niepowiązanych można wybrać te same obiekty do blokowania na różnych celach.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
          <target state="translated">Należy pamiętać, że można synchronizować obiektu w wielu domenach aplikacji, jeśli obiekt używany do blokowania pochodzi z <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The critical section</source>
          <target state="translated">Sekcja krytyczna</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> methods to mark the beginning and end of a critical section.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> metody, aby oznaczyć początek i koniec sekcja krytyczna.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The functionality provided by the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> methods is identical to that provided by the <bpt id="p1">[</bpt>lock<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> statement in C# and the <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> statement in Visual Basic, except that the language constructs wrap the <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType&gt;</ph> method overload and the <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> method in a <ph id="ph5">`try`</ph>…<ph id="ph6">`finally`</ph></source>
          <target state="translated">Funkcje zapewniane przez <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> metod jest taka sama jak zapewnianej przez <bpt id="p1">[</bpt>blokady<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> instrukcji w języku C# i <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> instrukcji w języku Visual Basic, z wyjątkiem Zawijaj konstrukcji językowych <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType&gt;</ph> przeciążenie metody i <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> metody w <ph id="ph5">`try`</ph>...<ph id="ph6">`finally`</ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>block to ensure that the monitor is released.</source>
          <target state="translated">blok do zapewnienia wydaniu monitora.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>If the critical section is a set of contiguous instructions, then the lock acquired by the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> method guarantees that only a single thread can execute the enclosed code with the locked object.</source>
          <target state="translated">Jeśli sekcja krytyczna jest zestawem ciągłe instrukcje, a następnie blokadę uzyskaną przez <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> — metoda gwarantuje, że tylko jednego wątku umożliwia wykonanie kodu objętego zablokowanym obiekcie.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>In this case, we recommend that you place that code in a <ph id="ph1">`try`</ph> block and place the call to the <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> method in a <ph id="ph3">`finally`</ph> block.</source>
          <target state="translated">W takim przypadku zaleca się umieszczenie kodu w <ph id="ph1">`try`</ph> zablokowaniu, Umieść wywołanie <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> metoda <ph id="ph3">`finally`</ph> bloku.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This ensures that the lock is released even if an exception occurs.</source>
          <target state="translated">Dzięki temu zwolnienie blokady, nawet jeśli wystąpi wyjątek.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following code fragment illustrates this pattern.</source>
          <target state="translated">Poniższy fragment kodu przedstawia tego wzorca.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This facility is typically used to synchronize access to a static or instance method of a class.</source>
          <target state="translated">Tej funkcji jest zwykle używane do synchronizowania, dostęp do statycznych lub metody wystąpienia klasy.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>If a critical section spans an entire method, the locking facility can be achieved by placing the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType&gt;</ph> on the method, and specifying the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized&gt;</ph> value in the constructor of <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Jeśli sekcja krytyczna obejmuje całą metody, funkcji blokowania można uzyskać przez umieszczenie <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType&gt;</ph> w metodzie i określając <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized&gt;</ph> wartość w Konstruktorze <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When you use this attribute, the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> method calls are not needed.</source>
          <target state="translated">Korzystając z tego atrybutu <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> wywołania metody nie są wymagane.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following code fragment illustrates this pattern:</source>
          <target state="translated">Poniższy fragment kodu przedstawia tego wzorca:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class, the C# <bpt id="p1">[</bpt>lock<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> statement, or the Visual Basic <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> statement inside of the method instead of the attribute.</source>
          <target state="translated">Należy pamiętać, że atrybut powoduje, że bieżący wątek utrzymuje blokady, dopóki metoda zwraca; Jeśli wcześniej może być zwolnione blokady, użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klas C# <bpt id="p1">[</bpt>blokady<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> instrukcji lub Visual Basic <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> instrukcji wewnątrz metody zamiast atrybutu.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>While it is possible for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</source>
          <target state="translated">Gdy istnieje możliwość <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> instrukcji, które zablokować, a następnie zwolnij danego obiektu do elementu członkowskiego lub klasy granic lub oba, takie rozwiązanie nie jest zalecane.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Pulse, PulseAll, and Wait</source>
          <target state="translated">Puls, PulseAll i oczekiwania</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">Gdy wątek jest właścicielem blokady i przeszedł sekcja krytyczna, która chroni blokady, może wywołać <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType&gt;</ph>, i <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> zwalnia blokadę, jeżeli jest utrzymywana, umożliwia oczekiwania wątku lub wątków, aby uzyskać blokady i wprowadź sekcja krytyczna i czeka zgłaszane przez wywołanie do <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType&gt;</ph> lub <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> is notified, it returns and obtains the lock again.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> zostanie powiadomiony, zwraca i ponownie uzyskuje blokady.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Both <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> signal for the next thread in the wait queue to proceed.</source>
          <target state="translated">Zarówno <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> sygnale następnego wątku w kolejce oczekiwania, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Monitors and wait handles</source>
          <target state="translated">Monitory i uchwyty oczekiwania</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It is important to note the distinction between the use of the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class and <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> objects.</source>
          <target state="translated">Jest trzeba zwrócić uwagę na różnicę między stosowania <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klasy i <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Klasy to czysto zarządzanych, pełni przenośny i może być skuteczniejsza pod względem wymagań dotyczących zasobów systemu operacyjnego.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> obiekty reprezentowała obiekty waitable systemu operacyjnego, są przydatne w przypadku synchronizacji między zarządzanymi i niezarządzanymi kodu i Udostępnianie zaawansowane funkcje systemu operacyjnego, takich jak możliwość czekać na wiele obiektów jednocześnie.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class to synchronize access to a single instance of a random number generator represented by the <ph id="ph2">&lt;xref:System.Random&gt;</ph> class.</source>
          <target state="translated">W poniższym przykładzie użyto <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klasy synchronizujący dostęp do pojedynczego wystąpienia generator liczb losowych reprezentowany przez <ph id="ph2">&lt;xref:System.Random&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</source>
          <target state="translated">W przykładzie jest tworzony dziesięciu zadań, które wykonuje asynchronicznie w wątku puli wątków.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</source>
          <target state="translated">Każde zadanie generuje 10 000 liczb losowych, oblicza średnią ich i aktualizuje dwie zmienne na poziomie procedury zapewniające sumę Liczba wygenerowanych wartości, a ich sumę.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>After all tasks have executed, these two values are then used to calculate the overall mean.</source>
          <target state="translated">Po wykonaniu wszystkich zadań, te dwie wartości są następnie używane do obliczania średniej ogólnej.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Because they can be accessed from any task running on a thread pool thread, access to the variables <ph id="ph1">`total`</ph> and <ph id="ph2">`n`</ph> must also be synchronized.</source>
          <target state="translated">Ponieważ są one dostępne z dowolnego zadania uruchamiane w wątku puli wątków, uzyskać dostęp do zmiennych <ph id="ph1">`total`</ph> i <ph id="ph2">`n`</ph> również musi być synchronizowany.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType&gt;</ph> method is used for this purpose.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType&gt;</ph> Metoda jest używana w tym celu.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following example demonstrates the combined use of the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class (implemented with the <ph id="ph2">`lock`</ph> or <ph id="ph3">`SyncLock`</ph> language construct), the <ph id="ph4">&lt;xref:System.Threading.Interlocked&gt;</ph> class, and the <ph id="ph5">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class.</source>
          <target state="translated">W poniższym przykładzie pokazano połączone zastosowanie <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klasy (zaimplementowany przy użyciu <ph id="ph2">`lock`</ph> lub <ph id="ph3">`SyncLock`</ph> konstrukcji języka), <ph id="ph4">&lt;xref:System.Threading.Interlocked&gt;</ph> klasy i <ph id="ph5">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It defines two <ph id="ph1">`internal`</ph> (in C#) or <ph id="ph2">`Friend`</ph> (in Visual Basic) classes, <ph id="ph3">`SyncResource`</ph> and <ph id="ph4">`UnSyncResource`</ph>, that respectively provide synchronized and unsynchronized access to a resource.</source>
          <target state="translated">Definiuje dwie <ph id="ph1">`internal`</ph> (w języku C#) lub <ph id="ph2">`Friend`</ph> (w języku Visual Basic) klas, <ph id="ph3">`SyncResource`</ph> i <ph id="ph4">`UnSyncResource`</ph>, które zapewniają odpowiednio zsynchronizowane i niezsynchronizowane dostęp do zasobu.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType&gt;</ph> property is even, the method calls <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> to introduce a delay of 2,000 milliseconds.</source>
          <target state="translated">Aby upewnić się, że pokazano w przykładzie różnica między zsynchronizowane i niezsynchronizowane dostępu (co może wystąpić w przypadku każdego wywołania metody wykona szybko), metoda obejmuje losowe opóźnienie: dla wątków, których <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType&gt;</ph> właściwości jest parzysta, wywołania metody <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> do wprowadzania opóźnienia 2000 milisekund.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Note that, because the <ph id="ph1">`SyncResource`</ph> class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</source>
          <target state="translated">Należy zauważyć, że ponieważ <ph id="ph1">`SyncResource`</ph> klasa nie jest publiczny, żaden kod klienta przyjmuje blokady zsynchronizowanych zasobów; samej klasy wewnętrzny przyjmuje blokady.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This prevents malicious code from taking a lock on a public object.</source>
          <target state="translated">Zapobiega to pobranie blokady obiektu publicznego złośliwego kodu.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The example defines a variable, <ph id="ph1">`numOps`</ph>, that defines the number of threads that will attempt to access the resource.</source>
          <target state="translated">W przykładzie zdefiniowano zmiennej, <ph id="ph1">`numOps`</ph>, który definiuje liczbę wątków, które próbują uzyskać dostęp do zasobu.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The application thread calls the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> method for synchronized and unsynchronized access five times each.</source>
          <target state="translated">Wywołania wątku aplikacji <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> metody zsynchronizowane i niezsynchronizowane dostępne pięć razy.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> method has a single parameter, a delegate that accepts no parameters and returns no value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> Metoda ma jeden parametr delegata, który akceptuje Brak parametrów i nie zwraca żadnej wartości.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>For synchronized access, it invokes the <ph id="ph1">`SyncUpdateResource`</ph> method; for unsynchronized access, it invokes the <ph id="ph2">`UnSyncUpdateResource`</ph> method.</source>
          <target state="translated">Zsynchronizowane dostępu wywołuje <ph id="ph1">`SyncUpdateResource`</ph> metody; niezsynchronizowane dostępu wywołuje <ph id="ph2">`UnSyncUpdateResource`</ph> metody.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>After each set of method calls, the application thread calls the <bpt id="p1">[</bpt>AutoResetEvent.WaitOne<ept id="p1">](xref:System.Threading.WaitHandle.WaitOne*)</ept> method so that it blocks until the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> instance is signaled.</source>
          <target state="translated">Po każdym zestawie wywołania metody, wywołuje wątku aplikacji <bpt id="p1">[</bpt>AutoResetEvent.WaitOne<ept id="p1">](xref:System.Threading.WaitHandle.WaitOne*)</ept> metodę, tak że blokuje do <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> zostanie zasygnalizowane wystąpienia.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each call to the <ph id="ph1">`SyncUpdateResource`</ph> method calls the internal <ph id="ph2">`SyncResource.Access`</ph> method and then calls the <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> method to decrement the <ph id="ph4">`numOps`</ph> counter.</source>
          <target state="translated">Każde wywołanie <ph id="ph1">`SyncUpdateResource`</ph> metoda wywołuje wewnętrznej <ph id="ph2">`SyncResource.Access`</ph> metody, a następnie wywołania <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> metody, aby zmniejszyć <ph id="ph4">`numOps`</ph> licznika.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> Metoda jest używana do dekrementacji licznika, ponieważ w przeciwnym razie użytkownik nie może być określone, czy drugi wątek będą uzyskiwać dostęp do wartości, przed pierwszym wątkiem zmniejszany wartość została przechowywana w zmiennej.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the <ph id="ph1">`SyncUpdateResource`</ph> method calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType&gt;</ph> method, which signals the main thread to continue execution.</source>
          <target state="translated">Ostatniego synchronizowane zmniejsza wątku roboczego licznik do zera, wskazujący, że synchronizowane wszystkie wątki zostały wykonane, dostęp do zasobu, <ph id="ph1">`SyncUpdateResource`</ph> wywołania metody <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType&gt;</ph> metodę, która sygnalizuje wątku głównego, aby kontynuować wykonanie.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each call to the <ph id="ph1">`UnSyncUpdateResource`</ph> method calls the internal <ph id="ph2">`UnSyncResource.Access`</ph> method and then calls the <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> method to decrement the <ph id="ph4">`numOps`</ph> counter.</source>
          <target state="translated">Każde wywołanie <ph id="ph1">`UnSyncUpdateResource`</ph> metoda wywołuje wewnętrznej <ph id="ph2">`UnSyncResource.Access`</ph> metody, a następnie wywołania <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> metody, aby zmniejszyć <ph id="ph4">`numOps`</ph> licznika.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Once again, the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</source>
          <target state="translated">Jeszcze raz <ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> metodę zmniejszyć licznika czy drugi wątek nie dostępu wartość przed pierwszym wątkiem zmniejszona wartość została już przypisana do zmiennej.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the <ph id="ph1">`UnSyncUpdateResource`</ph> method calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType&gt;</ph> method, which signals the main thread to continue execution.</source>
          <target state="translated">Podczas ostatniego niezsynchronizowane zmniejsza wątku roboczego licznik do zera, wskazujący, że nie więcej niezsynchronizowane wątków muszą uzyskać dostęp do zasobu <ph id="ph1">`UnSyncUpdateResource`</ph> wywołania metody <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType&gt;</ph> metodę, która sygnalizuje wątku głównego do kontynuowania wykonywania .</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</source>
          <target state="translated">Jak dane wyjściowe w przykładzie pokazano, zsynchronizowane dostęp zapewnia wątek wywołujący opuszcza zasobu chronionego, zanim inny wątek do niego dostęp; Każdy wątek oczekuje na jego poprzednik.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>On the other hand, without the lock, the <ph id="ph1">`UnSyncResource.Access`</ph> method is called in the order in which threads reach it.</source>
          <target state="translated">Z drugiej strony, bez blokady <ph id="ph1">`UnSyncResource.Access`</ph> metoda jest wywoływana w kolejności, w którym wątków uzyskać do niej dostęp.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This type is thread safe.</source>
          <target state="translated">Ten typ jest bezpieczny wątkowo.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="T:System.Threading.Monitor">
          <source>Acquires an exclusive lock on a specified object.</source>
          <target state="translated">Uzyskuje blokadę wyłączności dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>The object on which to acquire the monitor lock.</source>
          <target state="translated">Obiekt, na którym na uzyskanie blokady monitora.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Acquires an exclusive lock on the specified object.</source>
          <target state="translated">Uzyskuje blokadę wyłączności na określony obiekt.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Use <ph id="ph1">`Enter`</ph> to acquire the <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> on the object passed as the parameter.</source>
          <target state="translated">Użyj <ph id="ph1">`Enter`</ph> uzyskanie <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> na obiekt przekazany jako parametr.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>If another thread has executed an <ph id="ph1">`Enter`</ph> on the object but has not yet executed the corresponding <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, the current thread will block until the other thread releases the object.</source>
          <target state="translated">Jeśli inny wątek zostało wykonane <ph id="ph1">`Enter`</ph> obiektu, ale nie ma jeszcze wykonać odpowiednie <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, bieżący wątek zablokuje aż do innego wątku zwalnia obiekt.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>It is legal for the same thread to invoke <ph id="ph1">`Enter`</ph> more than once without it blocking; however, an equal number of <ph id="ph2">`Exit`</ph> calls must be invoked before other threads waiting on the object will unblock.</source>
          <target state="translated">Jest dozwolony dla tego samego wątku wywołać <ph id="ph1">`Enter`</ph> więcej niż jeden raz bez blokowania; jednak równej liczby <ph id="ph2">`Exit`</ph> wywołania należy wywołać przed odblokowanie innych wątków oczekujących na obiekcie.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>When you pass a value type variable to <ph id="ph1">`Enter`</ph>, it is boxed as an object.</source>
          <target state="translated">Podczas przekazywania wartości typu zmienną do <ph id="ph1">`Enter`</ph>, jest opakowany jako obiekt.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>If you pass the same variable to <ph id="ph1">`Enter`</ph> again, it is boxed as a separate object, and the thread does not block.</source>
          <target state="translated">W przypadku przekazania tej samej zmiennej <ph id="ph1">`Enter`</ph> ponownie, jest opakowany jako oddzielny obiekt i wątku nie są blokowane.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>In this case, the code that <ph id="ph1">`Monitor`</ph> is supposedly protecting is not protected.</source>
          <target state="translated">W tym przypadku kod który <ph id="ph1">`Monitor`</ph> jest prawdopodobnie ochrona nie jest chroniony.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Furthermore, when you pass the variable to <ph id="ph1">`Exit`</ph>, still another separate object is created.</source>
          <target state="translated">Ponadto podczas przekazywania zmiennej <ph id="ph1">`Exit`</ph>, jest tworzony oddzielny obiekt inny.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Because the object passed to <ph id="ph1">`Exit`</ph> is different from the object passed to <ph id="ph2">`Enter`</ph>, <ph id="ph3">`Monitor`</ph> throws <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph>.</source>
          <target state="translated">Ponieważ obiekt przekazywany do <ph id="ph1">`Exit`</ph> jest inny niż obiekt przekazany do <ph id="ph2">`Enter`</ph>, <ph id="ph3">`Monitor`</ph> zgłasza <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>For more information, see the conceptual topic <bpt id="p1">[</bpt>Monitors<ept id="p1">](xref:System.Threading.Monitor)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz temat dotyczący pojęć <bpt id="p1">[</bpt>monitorów<ept id="p1">](xref:System.Threading.Monitor)</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> can interrupt threads that are waiting to enter a <ph id="ph2">`Monitor`</ph> on an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> można przerywać wątków, które oczekują na wprowadzanie <ph id="ph2">`Monitor`</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> will be thrown.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> zostanie wygenerowany.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Use a C# <ph id="ph1">`try`</ph>…<ph id="ph2">`finally`</ph></source>
          <target state="translated">Użyj C# <ph id="ph1">`try`</ph>...<ph id="ph2">`finally`</ph></target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>block (<ph id="ph1">`Try`</ph>…<ph id="ph2">`Finally`</ph></source>
          <target state="translated">blok (<ph id="ph1">`Try`</ph>...<ph id="ph2">`Finally`</ph></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>in Visual Basic) to ensure that you release the monitor, or use the C# <ph id="ph1">`lock`</ph> statement (<ph id="ph2">`SyncLock`</ph> statement in Visual Basic), which wraps the <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> methods in a <ph id="ph5">`try`</ph>…<ph id="ph6">`finally`</ph></source>
          <target state="translated">w Visual Basic) zapewniające wersji monitora lub użyj C# <ph id="ph1">`lock`</ph> instrukcji (<ph id="ph2">`SyncLock`</ph> instrukcji w języku Visual Basic), który opakowuje <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> i <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> metod w <ph id="ph5">`try`</ph>...<ph id="ph6">`finally`</ph></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>block.</source>
          <target state="translated">Blok.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>The following example demonstrates how to use the <ph id="ph1">`Enter`</ph> method.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">`Enter`</ph> metody.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The object on which to wait.</source>
          <target state="translated">Obiekt, na którym oczekiwania.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The result of the attempt to acquire the lock, passed by reference.</source>
          <target state="translated">Wynik próba uzyskania blokady przekazywana przez odwołanie.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The input must be <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wartość wejściowa musi być <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The output is <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock is acquired; otherwise, the output is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dane wyjściowe <ph id="ph1">&lt;see langword="true" /&gt;</ph> jeżeli blokady; w przeciwnym razie dane wyjściowe są <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The output is set even if an exception occurs during the attempt to acquire the lock.</source>
          <target state="translated">Dane wyjściowe jest ustawiona, nawet jeśli wystąpi wyjątek podczas próby uzyskania blokady.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Note   If no exception occurs, the output of this method is always <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Jeśli wystąpi żaden wyjątek, dane wyjściowe tej metody jest zawsze <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</source>
          <target state="translated">Uzyskuje blokadę wyłączności na określony obiekt i automatycznie ustawia wartość wskazującą, czy blokada została wykonana.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Use <ph id="ph1">`Enter`</ph> to acquire the <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> on the object passed as the <ph id="ph3">`obj`</ph> parameter.</source>
          <target state="translated">Użyj <ph id="ph1">`Enter`</ph> uzyskanie <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> obiektu przekazanych jako <ph id="ph3">`obj`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>If another thread has executed an <ph id="ph1">`Enter`</ph> on the object but has not yet executed the corresponding <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, the current thread will block until the other thread releases the object.</source>
          <target state="translated">Jeśli inny wątek zostało wykonane <ph id="ph1">`Enter`</ph> obiektu, ale nie ma jeszcze wykonać odpowiednie <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, bieżący wątek zablokuje aż do innego wątku zwalnia obiekt.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>It is legal for the same thread to invoke <ph id="ph1">`Enter`</ph> more than once without it blocking; however, an equal number of <ph id="ph2">`Exit`</ph> calls must be invoked before other threads waiting on the object will unblock.</source>
          <target state="translated">Jest dozwolony dla tego samego wątku wywołać <ph id="ph1">`Enter`</ph> więcej niż jeden raz bez blokowania; jednak równej liczby <ph id="ph2">`Exit`</ph> wywołania należy wywołać przed odblokowanie innych wątków oczekujących na obiekcie.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>If the lock was not taken because an exception was thrown, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is <ph id="ph2">`false`</ph> after this method ends.</source>
          <target state="translated">Jeśli blokada nie została wykonana, ponieważ wystąpił wyjątek, zmienna określony dla <ph id="ph1">`lockTaken`</ph> parametr jest <ph id="ph2">`false`</ph> po zakończeniu tej metody.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>This allows the program to determine, in all cases, whether it is necessary to release the lock.</source>
          <target state="translated">Dzięki temu program ustalić, we wszystkich przypadkach, czy jest to konieczne zwolnić blokady.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>If this method returns without throwing an exception, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is always <ph id="ph2">`true`</ph>, and there is no need to test it.</source>
          <target state="translated">Jeśli ta metoda zwraca bez generowania wyjątku, zmienna określony dla <ph id="ph1">`lockTaken`</ph> parametr jest zawsze <ph id="ph2">`true`</ph>, i nie ma konieczności przetestować go.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>When you pass a value type variable to <ph id="ph1">`Enter`</ph>, it is boxed as an object.</source>
          <target state="translated">Podczas przekazywania wartości typu zmienną do <ph id="ph1">`Enter`</ph>, jest opakowany jako obiekt.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>If you pass the same variable to <ph id="ph1">`Enter`</ph> again, it is boxed as a separate object, and the thread does not block.</source>
          <target state="translated">W przypadku przekazania tej samej zmiennej <ph id="ph1">`Enter`</ph> ponownie, jest opakowany jako oddzielny obiekt i wątku nie są blokowane.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>In this case, the code that <ph id="ph1">`Monitor`</ph> is supposedly protecting is not protected.</source>
          <target state="translated">W tym przypadku kod który <ph id="ph1">`Monitor`</ph> jest prawdopodobnie ochrona nie jest chroniony.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Furthermore, when you pass the variable to <ph id="ph1">`Exit`</ph>, another separate object is created.</source>
          <target state="translated">Ponadto podczas przekazywania zmiennej <ph id="ph1">`Exit`</ph>, jest tworzony oddzielny obiekt innego.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Because the object passed to <ph id="ph1">`Exit`</ph> is different from the object passed to <ph id="ph2">`Enter`</ph>, <ph id="ph3">`Monitor`</ph> throws <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph>.</source>
          <target state="translated">Ponieważ obiekt przekazywany do <ph id="ph1">`Exit`</ph> jest inny niż obiekt przekazany do <ph id="ph2">`Enter`</ph>, <ph id="ph3">`Monitor`</ph> zgłasza <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>For more information, see the conceptual topic <bpt id="p1">[</bpt>Monitors<ept id="p1">](xref:System.Threading.Monitor)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz temat dotyczący pojęć <bpt id="p1">[</bpt>monitorów<ept id="p1">](xref:System.Threading.Monitor)</ept>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> can interrupt threads that are waiting to enter a <ph id="ph2">`Monitor`</ph> on an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> można przerywać wątków, które oczekują na wprowadzanie <ph id="ph2">`Monitor`</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> will be thrown.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> zostanie wygenerowany.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The following code shows the basic pattern for using the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> method overload.</source>
          <target state="translated">Poniższy kod przedstawia podstawowy wzorzec dla przy użyciu <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> przeciążenie metody.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>This overload always sets the value of the variable that is passed to the <ph id="ph1">`ref`</ph> parameter (<ph id="ph2">`ByRef`</ph> in Visual Basic) <ph id="ph3">`lockTaken`</ph>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</source>
          <target state="translated">To przeciążenie zawsze ustawia wartości zmiennej, która została przekazana do <ph id="ph1">`ref`</ph> parametr (<ph id="ph2">`ByRef`</ph> w języku Visual Basic) <ph id="ph3">`lockTaken`</ph>nawet wtedy, gdy metoda zgłasza wyjątek, dlatego wartość zmiennej jest to niezawodny sposób, aby sprawdzić, czy blokady musi być zwolnione.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The input to <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Dane wejściowe <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> jest <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The object on which to release the lock.</source>
          <target state="translated">Obiekt do zwolnienia blokady.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>Releases an exclusive lock on the specified object.</source>
          <target state="translated">Zwalnia określony obiekt wyłącznej blokady.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The calling thread must own the lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Wątek wywołujący musi być właścicielem blokady na <ph id="ph1">`obj`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>If the calling thread owns the lock on the specified object, and has made an equal number of <ph id="ph1">`Exit`</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> calls for the object, then the lock is released.</source>
          <target state="translated">Jeśli wątek wywołujący jest właścicielem blokady na określony obiekt i wprowadził równej liczby <ph id="ph1">`Exit`</ph> i <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> odwołuje się do obiektu, a następnie zwolnienia blokady.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>If the calling thread has not invoked <ph id="ph1">`Exit`</ph> as many times as <ph id="ph2">`Enter`</ph>, the lock is not released.</source>
          <target state="translated">Jeśli wątek wywołujący nie wywołał <ph id="ph1">`Exit`</ph> tyle razy, ile <ph id="ph2">`Enter`</ph>, blokada nie jest zwalniany.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</source>
          <target state="translated">Jeśli zwolnienia blokady i inne wątki są gotowe kolejki dla obiekt, jeden z wątków uzyskuje blokady.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls <ph id="ph1">`Exit`</ph>.</source>
          <target state="translated">W przypadku innych wątków w kolejce oczekiwania oczekiwania na uzyskanie blokady, ich nie są automatycznie przenoszone do kolejki gotowy podczas wywołania właściciela blokady <ph id="ph1">`Exit`</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>To move one or more waiting threads into the ready queue, call <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> before invoking <ph id="ph3">`Exit`</ph>.</source>
          <target state="translated">Aby przenieść jeden lub więcej wątków oczekujących w kolejce gotowy, należy wywołać <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> przed wywołaniem <ph id="ph3">`Exit`</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The following example demonstrates how to use the <ph id="ph1">`Exit`</ph> method.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia <ph id="ph1">`Exit`</ph> metody.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The current thread does not own the lock for the specified object.</source>
          <target state="translated">Bieżący wątek nie jest właścicielem blokady dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source>The object to test.</source>
          <target state="translated">Obiekt do przetestowania.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source>Determines whether the current thread holds the lock on the specified object.</source>
          <target state="translated">Określa, czy bieżący wątek utrzymuje blokadę określonego obiektu.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds the lock on <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżący wątek utrzymuje blokadę <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source>This method works only for locks that are acquired by using the methods of the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class, or by using the C# <ph id="ph2">`lock`</ph> statement or the Visual Basic <ph id="ph3">`SyncLock`</ph> statement, which are implemented with <ph id="ph4">&lt;xref:System.Threading.Monitor&gt;</ph>.</source>
          <target state="translated">Ta metoda działa tylko w przypadku blokad, które zostały nabyte za pomocą metody <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klas, lub przy użyciu języka C# <ph id="ph2">`lock`</ph> instrukcji lub Visual Basic <ph id="ph3">`SyncLock`</ph> instrukcji, które są implementowane przy użyciu <ph id="ph4">&lt;xref:System.Threading.Monitor&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source>Use this method with diagnostic tools, such as the <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract&gt;</ph> class, to debug locking issues that involve the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class.</source>
          <target state="translated">Ta metoda z narzędzia diagnostyczne, takie jak <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A&gt;</ph> — metoda i <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract&gt;</ph> klasy, aby debugować problemy wymagające <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The object a thread is waiting for.</source>
          <target state="translated">Obiekt wątek oczekuje.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Notifies a thread in the waiting queue of a change in the locked object's state.</source>
          <target state="translated">Powiadamia wątku w kolejce oczekujących zmian w stanie zablokowanym obiekcie.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Only the current owner of the lock can signal a waiting object using <ph id="ph1">`Pulse`</ph>.</source>
          <target state="translated">Tylko do bieżącego właściciela blokady można zasygnalizować obiekt oczekiwania przy użyciu <ph id="ph1">`Pulse`</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</source>
          <target state="translated">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zasygnalizowania następnego wątku w wierszu dla blokady.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Upon receiving the pulse, the waiting thread is moved to the ready queue.</source>
          <target state="translated">Po odebraniu Puls, oczekiwania wątku zostanie przeniesiona do kolejki gotowe.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>When the thread that invoked <ph id="ph1">`Pulse`</ph> releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</source>
          <target state="translated">Gdy wątek która wywołana <ph id="ph1">`Pulse`</ph> zwalnia blokadę następnego wątku w kolejce gotowy (który nie musi być wątku, który został impulsu) uzyskuje blokady.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class does not maintain state indicating that the <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method has been called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Klasy nie przechowuje stanu wskazujący, że <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> została wywołana metoda.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Thus, if you call <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> when no threads are waiting, the next thread that calls <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> blocks as if <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> had never been called.</source>
          <target state="translated">W związku z tym jeśli wywołujesz <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> po nie wątków oczekujących, następnego wątku, który wywołuje <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> bloki tak, jakby <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> nigdy nie została wywołana.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>If two threads are using <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> to interact, this could result in a deadlock.</source>
          <target state="translated">Jeśli z dwoma wątkami <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> wchodzić w interakcje, to może doprowadzić do zakleszczenia.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Contrast this with the behavior of the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class: If you signal an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, and there are no threads waiting, the <ph id="ph4">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> remains in a signaled state until a thread calls <ph id="ph5">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or <ph id="ph7">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>.</source>
          <target state="translated">Kontrastu to z zachowaniem <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> klasy: Jeśli użytkownik sygnału <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> przez wywołanie jego <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> metody i nie ma żadnych wątków oczekujących, <ph id="ph4">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> pozostaje w stanie sygnalizacji do momentu wywołania wątku <ph id="ph5">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, lub <ph id="ph7">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> releases that thread and returns to the unsignaled state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> Zwalnia wątek i powróci do stanu unsignaled.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Należy pamiętać, że synchronizowany obiekt posiada kilka odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, które zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The <ph id="ph1">`Pulse`</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">`Pulse`</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, I <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>To signal multiple threads, use the <ph id="ph1">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Aby sygnału wiele wątków, użyj <ph id="ph1">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The object that sends the pulse.</source>
          <target state="translated">Obiekt, który wysyła Puls.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>Notifies all waiting threads of a change in the object's state.</source>
          <target state="translated">Powiadamia o wszystkich wątków oczekujących zmian stanu obiektu.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</source>
          <target state="translated">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu sygnału wszystkie wątki oczekiwania na uzyskanie blokady obiektu.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>After the signal is sent, the waiting threads are moved to the ready queue.</source>
          <target state="translated">Po wysłaniu sygnał wątków oczekujących są przenoszone do kolejki gotowe.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>When the thread that invoked <ph id="ph1">`PulseAll`</ph> releases the lock, the next thread in the ready queue acquires the lock.</source>
          <target state="translated">Gdy wątek która wywołana <ph id="ph1">`PulseAll`</ph> zwalnia blokadę następnego wątku w kolejce gotowy uzyskuje blokady.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Należy pamiętać, że synchronizowany obiekt posiada kilka odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, które zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">`PulseAll`</ph>, and <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">`PulseAll`</ph>, I <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Uwagi dla <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> metody opisano, co się stanie, jeśli <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> jest wywoływane, gdy nie ma wątków oczekujących.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>To signal a single thread, use the <ph id="ph1">`Pulse`</ph> method.</source>
          <target state="translated">Aby sygnału pojedynczego wątku, należy użyć <ph id="ph1">`Pulse`</ph> metody.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="T:System.Threading.Monitor">
          <source>Attempts to acquire an exclusive lock on the specified object.</source>
          <target state="translated">Próbuje uzyskać wyłącznej blokady na określony obiekt.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Obiekt, w którym można uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>Attempts to acquire an exclusive lock on the specified object.</source>
          <target state="translated">Próbuje uzyskać wyłącznej blokady na określony obiekt.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread acquires the lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżący wątek uzyskuje blokadę; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>If successful, this method acquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Jeśli się powiedzie, ta metoda uzyskuje w trybie wyłączności na <ph id="ph1">`obj`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>This method returns immediately, whether or not the lock is available.</source>
          <target state="translated">Ta metoda zwraca od razu, czy blokada jest dostępna.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>This method is similar to <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, but it will never block the current thread.</source>
          <target state="translated">Ta metoda jest podobna do <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, ale nigdy nie blokuje bieżącego wątku.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>If the thread cannot enter without blocking, the method returns <ph id="ph1">`false,`</ph>.</source>
          <target state="translated">Jeśli wątek nie można wprowadzić bez blokowania, metoda zwraca <ph id="ph1">`false,`</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>For details, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> article.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> artykułu.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartości zwracanej przez metodę i wykonać kod w sekcji krytycznej tylko wtedy, gdy jego wartość zwracana jest <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Należy pamiętać, że należy wywołać <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> w <ph id="ph2">`finally`</ph> bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>The following code example demonstrates how to use the <ph id="ph1">`TryEnter`</ph> method.</source>
          <target state="translated">Poniższy przykład kodu pokazuje sposób użycia <ph id="ph1">`TryEnter`</ph> metody.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Obiekt, w którym można uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The result of the attempt to acquire the lock, passed by reference.</source>
          <target state="translated">Wynik próba uzyskania blokady przekazywana przez odwołanie.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The input must be <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wartość wejściowa musi być <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The output is <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock is acquired; otherwise, the output is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dane wyjściowe <ph id="ph1">&lt;see langword="true" /&gt;</ph> jeżeli blokady; w przeciwnym razie dane wyjściowe są <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The output is set even if an exception occurs during the attempt to acquire the lock.</source>
          <target state="translated">Dane wyjściowe jest ustawiona, nawet jeśli wystąpi wyjątek podczas próby uzyskania blokady.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</source>
          <target state="translated">Próbuje uzyskać wyłącznej blokady w określonym obiekcie i automatycznie ustawia wartość wskazującą, czy blokada została wykonana.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>If successful, this method acquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Jeśli się powiedzie, ta metoda uzyskuje w trybie wyłączności na <ph id="ph1">`obj`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>This method returns immediately, whether or not the lock is available.</source>
          <target state="translated">Ta metoda zwraca od razu, czy blokada jest dostępna.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>If the lock was not taken because an exception was thrown, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is <ph id="ph2">`false`</ph> after this method ends.</source>
          <target state="translated">Jeśli blokada nie została wykonana, ponieważ wystąpił wyjątek, zmienna określony dla <ph id="ph1">`lockTaken`</ph> parametr jest <ph id="ph2">`false`</ph> po zakończeniu tej metody.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>This allows the program to determine, in all cases, whether it is necessary to release the lock.</source>
          <target state="translated">Dzięki temu program ustalić, we wszystkich przypadkach, czy jest to konieczne zwolnić blokady.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>This method is similar to <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29&gt;</ph>, but it will never block the current thread.</source>
          <target state="translated">Ta metoda jest podobna do <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29&gt;</ph>, ale nigdy nie blokuje bieżącego wątku.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>If the thread cannot enter without blocking, the <ph id="ph1">`lockTaken`</ph> argument is set to <ph id="ph2">`false`</ph> when the method returns.</source>
          <target state="translated">Jeśli wątek nie można wprowadzić bez blokowania, <ph id="ph1">`lockTaken`</ph> argument ma wartość <ph id="ph2">`false`</ph> kiedy metoda zwraca.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> article.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> artykułu.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>To ensure that the thread does not enter the critical section, you should examine the value of <ph id="ph1">`lockTaken`</ph> and  execute code in the critical section only if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartość <ph id="ph1">`lockTaken`</ph> i wykonywanie kodu w sekcji krytycznej tylko wtedy, gdy jego wartość wynosi <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Należy pamiętać, że należy wywołać <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> w <ph id="ph2">`finally`</ph> bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The following code shows the basic pattern for using the <ph id="ph1">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> method overload.</source>
          <target state="translated">Poniższy kod przedstawia podstawowy wzorzec dla przy użyciu <ph id="ph1">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> przeciążenie metody.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>This overload always sets the value of the variable that is passed to the <ph id="ph1">`ref`</ph> parameter (<ph id="ph2">`ByRef`</ph> in Visual Basic) <ph id="ph3">`lockTaken`</ph>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</source>
          <target state="translated">To przeciążenie zawsze ustawia wartości zmiennej, która została przekazana do <ph id="ph1">`ref`</ph> parametr (<ph id="ph2">`ByRef`</ph> w języku Visual Basic) <ph id="ph3">`lockTaken`</ph>nawet wtedy, gdy metoda zgłasza wyjątek, dlatego wartość zmiennej jest to niezawodny sposób, aby sprawdzić, czy blokady musi być zwolnione.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The input to <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Dane wejściowe <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> jest <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Obiekt, w którym można uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>The number of milliseconds to wait for the lock.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania na blokadę.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</source>
          <target state="translated">Próbuje, określoną liczbę milisekund, uzyskać wyłącznej blokady określony obiekt.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread acquires the lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżący wątek uzyskuje blokadę; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>If the <ph id="ph1">`millisecondsTimeout`</ph> parameter equals <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>, this method is equivalent to <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> parametr ma wartość <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>, ta metoda jest odpowiednikiem <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> equals 0, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> jest równa 0, ta metoda jest odpowiednikiem <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>For details, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> article.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> artykułu.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartości zwracanej przez metodę i wykonać kod w sekcji krytycznej tylko wtedy, gdy jego wartość zwracana jest <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Należy pamiętać, że należy wywołać <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> w <ph id="ph2">`finally`</ph> bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is negative, and not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> jest ujemna i nie jest równa <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Obiekt, w którym można uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> representing the amount of time to wait for the lock.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący ilość czasu oczekiwania na blokadę.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>A value of –1 millisecond specifies an infinite wait.</source>
          <target state="translated">Wartość-1 milisekund określa nieskończone oczekiwanie.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</source>
          <target state="translated">Próbuje określoną ilość czasu, można uzyskać wyłącznej blokady określony obiekt.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread acquires the lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżący wątek uzyskuje blokadę; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>If the value of the <ph id="ph1">`timeout`</ph> parameter converted to milliseconds equals –1, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>.</source>
          <target state="translated">Jeśli wartość <ph id="ph1">`timeout`</ph> parametru przekonwertować milisekund równa -1, ta metoda jest odpowiednikiem <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>If the value of <ph id="ph1">`timeout`</ph> equals 0, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph>.</source>
          <target state="translated">Jeśli wartość <ph id="ph1">`timeout`</ph> jest równa 0, ta metoda jest odpowiednikiem <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>For details, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klasy tematu.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartości zwracanej przez metodę i wykonać kod w sekcji krytycznej tylko wtedy, gdy jego wartość zwracana jest <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Należy pamiętać, że należy wywołać <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> w <ph id="ph2">`finally`</ph> bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>The value of <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> in milliseconds is negative and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (–1 millisecond), or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Wartość <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> w milisekundach jest ujemna i nie jest równa <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1 milisekund), albo jest większa niż <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Obiekt, w którym można uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The number of milliseconds to wait for the lock.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania na blokadę.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The result of the attempt to acquire the lock, passed by reference.</source>
          <target state="translated">Wynik próba uzyskania blokady przekazywana przez odwołanie.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The input must be <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wartość wejściowa musi być <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The output is <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock is acquired; otherwise, the output is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dane wyjściowe <ph id="ph1">&lt;see langword="true" /&gt;</ph> jeżeli blokady; w przeciwnym razie dane wyjściowe są <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The output is set even if an exception occurs during the attempt to acquire the lock.</source>
          <target state="translated">Dane wyjściowe jest ustawiona, nawet jeśli wystąpi wyjątek podczas próby uzyskania blokady.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</source>
          <target state="translated">Próbuje określoną liczbę milisekund, można uzyskać wyłącznej blokady określony obiekt i automatycznie ustawia wartość wskazującą, czy blokada została wykonana.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>If the <ph id="ph1">`millisecondsTimeout`</ph> parameter equals <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>, this method is equivalent to <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%28System.Object%29&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> parametr ma wartość <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>, ta metoda jest odpowiednikiem <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%28System.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> equals 0, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%29&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> jest równa 0, ta metoda jest odpowiednikiem <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>If the lock was not taken because an exception was thrown, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is <ph id="ph2">`false`</ph> after this method ends.</source>
          <target state="translated">Jeśli blokada nie została wykonana, ponieważ wystąpił wyjątek, zmienna określony dla <ph id="ph1">`lockTaken`</ph> parametr jest <ph id="ph2">`false`</ph> po zakończeniu tej metody.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>This allows the program to determine, in all cases, whether it is necessary to release the lock.</source>
          <target state="translated">Dzięki temu program ustalić, we wszystkich przypadkach, czy jest to konieczne zwolnić blokady.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klasy tematu.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>To ensure that the thread does not enter the critical section, you should examine the value of <ph id="ph1">`lockTaken`</ph> and  execute code in the critical section only if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartość <ph id="ph1">`lockTaken`</ph> i wykonywanie kodu w sekcji krytycznej tylko wtedy, gdy jego wartość wynosi <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Należy pamiętać, że należy wywołać <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> w <ph id="ph2">`finally`</ph> bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The following code shows the basic pattern for using the <ph id="ph1">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> method overload.</source>
          <target state="translated">Poniższy kod przedstawia podstawowy wzorzec dla przy użyciu <ph id="ph1">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> przeciążenie metody.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>This overload always sets the value of the variable that is passed to the <ph id="ph1">`ref`</ph> parameter (<ph id="ph2">`ByRef`</ph> in Visual Basic) <ph id="ph3">`lockTaken`</ph>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</source>
          <target state="translated">To przeciążenie zawsze ustawia wartości zmiennej, która została przekazana do <ph id="ph1">`ref`</ph> parametr (<ph id="ph2">`ByRef`</ph> w języku Visual Basic) <ph id="ph3">`lockTaken`</ph>nawet wtedy, gdy metoda zgłasza wyjątek, dlatego wartość zmiennej jest to niezawodny sposób, aby sprawdzić, czy blokady musi być zwolnione.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The input to <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Dane wejściowe <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> jest <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is negative, and not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> jest ujemna i nie jest równa <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Obiekt, w którym można uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The amount of time to wait for the lock.</source>
          <target state="translated">Ilość czasu oczekiwania na blokadę.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>A value of –1 millisecond specifies an infinite wait.</source>
          <target state="translated">Wartość-1 milisekund określa nieskończone oczekiwanie.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The result of the attempt to acquire the lock, passed by reference.</source>
          <target state="translated">Wynik próba uzyskania blokady przekazywana przez odwołanie.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The input must be <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Wartość wejściowa musi być <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The output is <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock is acquired; otherwise, the output is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Dane wyjściowe <ph id="ph1">&lt;see langword="true" /&gt;</ph> jeżeli blokady; w przeciwnym razie dane wyjściowe są <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The output is set even if an exception occurs during the attempt to acquire the lock.</source>
          <target state="translated">Dane wyjściowe jest ustawiona, nawet jeśli wystąpi wyjątek podczas próby uzyskania blokady.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</source>
          <target state="translated">Próbuje określoną ilość czasu, można uzyskać wyłącznej blokady określony obiekt i automatycznie ustawia wartość wskazującą, czy blokada została wykonana.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>If the value of the <ph id="ph1">`timeout`</ph> parameter converted to milliseconds equals –1, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%28System.Object%29&gt;</ph>.</source>
          <target state="translated">Jeśli wartość <ph id="ph1">`timeout`</ph> parametru przekonwertować milisekund równa -1, ta metoda jest odpowiednikiem <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%28System.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>If the value of <ph id="ph1">`timeout`</ph> equals 0, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%29&gt;</ph>.</source>
          <target state="translated">Jeśli wartość <ph id="ph1">`timeout`</ph> jest równa 0, ta metoda jest odpowiednikiem <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>If the lock was not taken because an exception was thrown, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is <ph id="ph2">`false`</ph> after this method ends.</source>
          <target state="translated">Jeśli blokada nie została wykonana, ponieważ wystąpił wyjątek, zmienna określony dla <ph id="ph1">`lockTaken`</ph> parametr jest <ph id="ph2">`false`</ph> po zakończeniu tej metody.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>This allows the program to determine, in all cases, whether it is necessary to release the lock.</source>
          <target state="translated">Dzięki temu program ustalić, we wszystkich przypadkach, czy jest to konieczne zwolnić blokady.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Użyj <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class topic.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> klasy tematu.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>To ensure that the thread does not enter the critical section, you should examine the value of <ph id="ph1">`lockTaken`</ph> and  execute code in the critical section only if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartość <ph id="ph1">`lockTaken`</ph> i wykonywanie kodu w sekcji krytycznej tylko wtedy, gdy jego wartość wynosi <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Należy pamiętać, że należy wywołać <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> w <ph id="ph2">`finally`</ph> bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The input to <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Dane wejściowe <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> jest <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The value of <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> in milliseconds is negative and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (–1 millisecond), or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Wartość <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> w milisekundach jest ujemna i nie jest równa <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1 milisekund), albo jest większa niż <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="T:System.Threading.Monitor">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The object on which to wait.</source>
          <target state="translated">Obiekt, na którym oczekiwania.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the call returned because the caller reacquired the lock for the specified object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli wywołanie zwracany, ponieważ obiekt wywołujący reacquired blokady dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>This method does not return if the lock is not reacquired.</source>
          <target state="translated">Ta metoda nie zwraca Jeśli blokada nie jest reacquired.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock on the object and enters the object's waiting queue.</source>
          <target state="translated">Gdy wywołuje wątku <ph id="ph1">`Wait`</ph>, zwalnia blokadę na obiekcie i wprowadza kolejki oczekiwanie obiektu.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</source>
          <target state="translated">Następny wątek w kolejce gotowy obiektu (jeśli istnieje) uzyskuje blokadę i ma wyłącznego użytku obiektu.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>All threads that call <ph id="ph1">`Wait`</ph> remain in the waiting queue until they receive a signal from <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, sent by the owner of the lock.</source>
          <target state="translated">Wszystkie wątki, które wywołują <ph id="ph1">`Wait`</ph> pozostają w kolejce oczekiwania do czasu ich odebrał sygnału z <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, wysłanych przez właściciela blokady.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>If <ph id="ph1">`Pulse`</ph> is sent, only the thread at the head of the waiting queue is affected.</source>
          <target state="translated">Jeśli <ph id="ph1">`Pulse`</ph> wysłaniu dotyczy tylko wątek na head kolejki oczekiwania.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>If <ph id="ph1">`PulseAll`</ph> is sent, all threads that are waiting for the object are affected.</source>
          <target state="translated">Jeśli <ph id="ph1">`PulseAll`</ph> wysłaniu dotyczy wszystkich wątków oczekujących dla obiekt.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</source>
          <target state="translated">Po odebraniu sygnału jeden lub więcej wątków pozostaw kolejki oczekiwania, a następnie wprowadź gotowy kolejki.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>A thread in the ready queue is permitted to reacquire the lock.</source>
          <target state="translated">Wątek w kolejce gotowy może ponownie uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>This method returns when the calling thread reacquires the lock on the object.</source>
          <target state="translated">Ta metoda zwraca wartość, gdy wątek wywołujący reacquires blokady obiektu.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Note that this method blocks indefinitely if the holder of the lock does not call <ph id="ph1">`Pulse`</ph> or <ph id="ph2">`PulseAll`</ph>.</source>
          <target state="translated">Należy pamiętać, że ta metoda blokuje nieskończoność, jeśli właściciel blokady nie mogą wywoływać <ph id="ph1">`Pulse`</ph> lub <ph id="ph2">`PulseAll`</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Element wywołujący wykonuje <ph id="ph1">`Wait`</ph> raz, niezależnie od tego, ile razy <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> została wywołana dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">`Enter`</ph> on the object and invokes <ph id="ph3">`Exit`</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">Koncepcyjnie <ph id="ph1">`Wait`</ph> metody przechowuje liczbę razy wywołać obiekt wywołujący <ph id="ph2">`Enter`</ph> dla obiektu, a następnie wywołuje <ph id="ph3">`Exit`</ph> tyle razy, aby całkowicie zwolnić zablokowany obiekt.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">`Enter`</ph> as many times as necessary to restore the saved <ph id="ph2">`Enter`</ph> count for the caller.</source>
          <target state="translated">Gdy obiekt wywołujący reacquires blokady, system wywołuje <ph id="ph1">`Enter`</ph> tyle razy, aby przywrócić zapisanego <ph id="ph2">`Enter`</ph> count do obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Wywoływanie <ph id="ph1">`Wait`</ph> zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Należy pamiętać, że synchronizowany obiekt posiada kilka odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, które zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, I <ph id="ph3">`Wait`</ph> metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Uwagi dla <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> metody opisano, co się stanie, jeśli <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> jest wywoływane, gdy nie ma wątków oczekujących.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The thread that invokes <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is later interrupted from the waiting state.</source>
          <target state="translated">Wątek, który wywołuje <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> później zostało przerwane ze stanu oczekiwania.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Dzieje się tak, gdy inny wątek wywołuje ten wątek <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The object on which to wait.</source>
          <target state="translated">Obiekt, na którym oczekiwania.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The number of milliseconds to wait before the thread enters the ready queue.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania przed wątek przechodzi gotowy kolejki.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>If the specified time-out interval elapses, the thread enters the ready queue.</source>
          <target state="translated">Jeśli upłynie określony limit czasu, wątek przechodzi gotowy kolejki.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock was reacquired before the specified time elapsed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the lock was reacquired after the specified time elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli blokada została reacquired przed upływem określonego czasu; <ph id="ph2">&lt;see langword="false" /&gt;</ph> Jeśli blokada została reacquired po upływie określonego czasu.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The method does not return until the lock is reacquired.</source>
          <target state="translated">Metoda nie zwraca dopóki blokada jest reacquired.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>This method does not return until it reacquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Ta metoda wraca do momentu jego reacquires na wyłączność <ph id="ph1">`obj`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Limit czasu gwarantuje, że bieżący wątek nie blokuje nieskończoność Jeśli inny wątek zwalnia blokadę bez wywoływania pierwszego elementu <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</source>
          <target state="translated">Przenosi także wątku do kolejki gotowy, pomijanie inne wątki wcześniejsze go w kolejce oczekiwania tak, aby go ponownie wcześniej uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The thread can test the return value of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method again.</source>
          <target state="translated">Wątek można przetestować wartość zwracaną <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metodę, aby określić, czy jego reacquired blokady przed limit czasu. Wątek może służyć do oceny warunków, które spowodował wprowadź czas oczekiwania, i w razie potrzeby wywołania <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> ponownie — metoda.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock on the object and enters the object's waiting queue.</source>
          <target state="translated">Gdy wywołuje wątku <ph id="ph1">`Wait`</ph>, zwalnia blokadę na obiekcie i wprowadza kolejki oczekiwanie obiektu.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</source>
          <target state="translated">Następny wątek w kolejce gotowy obiektu (jeśli istnieje) uzyskuje blokadę i ma wyłącznego użytku obiektu.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The thread that invoked <ph id="ph1">`Wait`</ph> remains in the waiting queue until either a thread that holds the lock invokes <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, or it is the next in the queue and a thread that holds the lock invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</source>
          <target state="translated">Wątek, który wywołał <ph id="ph1">`Wait`</ph> wywołuje wątku, który utrzymuje blokadę pozostaje w kolejce oczekiwania, aż do otrzymania <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, lub jest dalej w kolejce i wywołuje wątku, który utrzymuje blokadę <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>However, if <ph id="ph1">`millisecondsTimeout`</ph> elapses before another thread invokes this object's <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method, the original thread is moved to the ready queue in order to regain the lock.</source>
          <target state="translated">Jednak jeśli <ph id="ph1">`millisecondsTimeout`</ph> musi upłynąć, zanim inny wątek wywołuje ten obiekt <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> metody oryginalnego wątku zostanie przeniesiona do kolejki gotowy w celu odzyskania blokady.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>If <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> is specified for the <ph id="ph2">`millisecondsTimeout`</ph> parameter, this method blocks indefinitely unless the holder of the lock calls <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> określono <ph id="ph2">`millisecondsTimeout`</ph> parametru tej metody nieskończoność blokuje chyba, że właściciel blokady wywołuje <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> equals 0, the thread that calls <ph id="ph2">`Wait`</ph> releases the lock and then immediately enters the ready queue in order to regain the lock.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> jest równe 0, wątku, który wywołuje <ph id="ph2">`Wait`</ph> zwalnia blokadę i następnie natychmiast wprowadzenia gotowy kolejki w celu odzyskania blokady.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Element wywołujący wykonuje <ph id="ph1">`Wait`</ph> raz, niezależnie od tego, ile razy <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> została wywołana dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> on the object and invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">Koncepcyjnie <ph id="ph1">`Wait`</ph> metody przechowuje liczbę razy wywołać obiekt wywołujący <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> dla obiektu, a następnie wywołuje <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> tyle razy, aby całkowicie zwolnić zablokowany obiekt.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> as many times as necessary to restore the saved <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count for the caller.</source>
          <target state="translated">Gdy obiekt wywołujący reacquires blokady, system wywołuje <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> tyle razy, aby przywrócić zapisanego <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count do obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Wywoływanie <ph id="ph1">`Wait`</ph> zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Synchronizowany obiekt zawiera wiele odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, który zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, I <ph id="ph3">`Wait`</ph> metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Uwagi dla <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> metody opisano, co się stanie, jeśli <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> jest wywoływane, gdy nie ma wątków oczekujących.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The thread that invokes <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is later interrupted from the waiting state.</source>
          <target state="translated">Wątek, który wywołuje <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> później zostało przerwane ze stanu oczekiwania.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Dzieje się tak, gdy inny wątek wywołuje ten wątek <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> parameter is negative, and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">Wartość <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> parametr jest ujemna i nie jest równa <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The object on which to wait.</source>
          <target state="translated">Obiekt, na którym oczekiwania.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> representing the amount of time to wait before the thread enters the ready queue.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący ilość czasu oczekiwania na wątek wprowadza gotowy kolejki.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>If the specified time-out interval elapses, the thread enters the ready queue.</source>
          <target state="translated">Jeśli upłynie określony limit czasu, wątek przechodzi gotowy kolejki.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock was reacquired before the specified time elapsed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the lock was reacquired after the specified time elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli blokada została reacquired przed upływem określonego czasu; <ph id="ph2">&lt;see langword="false" /&gt;</ph> Jeśli blokada została reacquired po upływie określonego czasu.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The method does not return until the lock is reacquired.</source>
          <target state="translated">Metoda nie zwraca dopóki blokada jest reacquired.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>This method does not return until it reacquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Ta metoda wraca do momentu jego reacquires na wyłączność <ph id="ph1">`obj`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Limit czasu gwarantuje, że bieżący wątek nie blokuje nieskończoność Jeśli inny wątek zwalnia blokadę bez wywoływania pierwszego elementu <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</source>
          <target state="translated">Przenosi także wątku do kolejki gotowy, pomijanie inne wątki wcześniejsze go w kolejce oczekiwania tak, aby go ponownie wcześniej uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The thread can test the return value of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method again.</source>
          <target state="translated">Wątek można przetestować wartość zwracaną <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metodę, aby określić, czy jego reacquired blokady przed limit czasu. Wątek może służyć do oceny warunków, które spowodował wprowadź czas oczekiwania, i w razie potrzeby wywołania <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> ponownie — metoda.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock on the object and enters the object's waiting queue.</source>
          <target state="translated">Gdy wywołuje wątku <ph id="ph1">`Wait`</ph>, zwalnia blokadę na obiekcie i wprowadza kolejki oczekiwanie obiektu.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</source>
          <target state="translated">Następny wątek w kolejce gotowy obiektu (jeśli istnieje) uzyskuje blokadę i ma wyłącznego użytku obiektu.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The thread that invoked <ph id="ph1">`Wait`</ph> remains in the waiting queue until either a thread that holds the lock invokes <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, or it is the next in the queue and a thread that holds the lock invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</source>
          <target state="translated">Wątek, który wywołał <ph id="ph1">`Wait`</ph> wywołuje wątku, który utrzymuje blokadę pozostaje w kolejce oczekiwania, aż do otrzymania <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, lub jest dalej w kolejce i wywołuje wątku, który utrzymuje blokadę <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>However, if <ph id="ph1">`timeout`</ph> elapses before another thread invokes this object's <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method, the original thread is moved to the ready queue in order to regain the lock.</source>
          <target state="translated">Jednak jeśli <ph id="ph1">`timeout`</ph> musi upłynąć, zanim inny wątek wywołuje ten obiekt <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> metody oryginalnego wątku zostanie przeniesiona do kolejki gotowy w celu odzyskania blokady.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>If a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> representing –1 millisecond is specified for the <ph id="ph2">`timeout`</ph> parameter, this method blocks indefinitely unless the holder of the lock calls <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> reprezentujący-1 milisekund jest określony dla <ph id="ph2">`timeout`</ph> parametru tej metody nieskończoność blokuje chyba, że właściciel blokady wywołuje <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>If <ph id="ph1">`timeout`</ph> is 0 milliseconds, the thread that calls <ph id="ph2">`Wait`</ph> releases the lock and then immediately enters the ready queue in order to regain the lock.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> 0 milisekund, wątku, który wywołuje <ph id="ph2">`Wait`</ph> zwalnia blokadę i następnie natychmiast wprowadzenia gotowy kolejki w celu odzyskania blokady.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Element wywołujący wykonuje <ph id="ph1">`Wait`</ph> raz, niezależnie od tego, ile razy <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> została wywołana dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> on the object and invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">Koncepcyjnie <ph id="ph1">`Wait`</ph> metody przechowuje liczbę razy wywołać obiekt wywołujący <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> dla obiektu, a następnie wywołuje <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> tyle razy, aby całkowicie zwolnić zablokowany obiekt.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> as many times as necessary to restore the saved <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count for the caller.</source>
          <target state="translated">Gdy obiekt wywołujący reacquires blokady, system wywołuje <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> tyle razy, aby przywrócić zapisanego <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count do obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Wywoływanie <ph id="ph1">`Wait`</ph> zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Synchronizowany obiekt zawiera wiele odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, który zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, I <ph id="ph3">`Wait`</ph> metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Uwagi dla <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> metody opisano, co się stanie, jeśli <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> jest wywoływane, gdy nie ma wątków oczekujących.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The thread that invokes <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is later interrupted from the waiting state.</source>
          <target state="translated">Wątek, który wywołuje <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> później zostało przerwane ze stanu oczekiwania.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Dzieje się tak, gdy inny wątek wywołuje ten wątek <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The value of the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter in milliseconds is negative and does not represent <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (–1 millisecond), or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Wartość <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parametru w milisekundach jest ujemna, a nie reprezentuje <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1 milisekund), albo jest większa niż <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The object on which to wait.</source>
          <target state="translated">Obiekt, na którym oczekiwania.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The number of milliseconds to wait before the thread enters the ready queue.</source>
          <target state="translated">Wyrażony w milisekundach czas oczekiwania przed wątek przechodzi gotowy kolejki.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć pracę i ponownie pozyskać domeny synchronizacji dla kontekstu (Jeśli w kontekście zsynchronizowane) przed oczekiwaniem; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>If the specified time-out interval elapses, the thread enters the ready queue.</source>
          <target state="translated">Jeśli upłynie określony limit czasu, wątek przechodzi gotowy kolejki.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</source>
          <target state="translated">Ta metoda także określa, czy domeny synchronizacji dla kontekstu (jeśli są w synchronizowane kontekst) jest zakończony przed czas oczekiwania i reacquired później.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock was reacquired before the specified time elapsed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the lock was reacquired after the specified time elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli blokada została reacquired przed upływem określonego czasu; <ph id="ph2">&lt;see langword="false" /&gt;</ph> Jeśli blokada została reacquired po upływie określonego czasu.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The method does not return until the lock is reacquired.</source>
          <target state="translated">Metoda nie zwraca dopóki blokada jest reacquired.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This method does not return until it reacquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Ta metoda wraca do momentu jego reacquires na wyłączność <ph id="ph1">`obj`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Limit czasu gwarantuje, że bieżący wątek nie blokuje nieskończoność Jeśli inny wątek zwalnia blokadę bez wywoływania pierwszego elementu <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</source>
          <target state="translated">Przenosi także wątku do kolejki gotowy, pomijanie inne wątki wcześniejsze go w kolejce oczekiwania tak, aby go ponownie wcześniej uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The thread can test the return value of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method again.</source>
          <target state="translated">Wątek można przetestować wartość zwracaną <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metodę, aby określić, czy jego reacquired blokady przed limit czasu. Wątek może służyć do oceny warunków, które spowodował wprowadź czas oczekiwania, i w razie potrzeby wywołania <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> ponownie — metoda.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock and enters the waiting queue.</source>
          <target state="translated">Gdy wywołuje wątku <ph id="ph1">`Wait`</ph>, zwalnia blokadę i wprowadza kolejki oczekiwania.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</source>
          <target state="translated">W tym momencie następnego wątku w kolejce gotowy (jeśli istnieje) może przejąć kontrolę nad blokady.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The thread that invoked <ph id="ph1">`Wait`</ph> remains in the waiting queue until either a thread that holds the lock invokes <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, or it is the next in the queue and a thread that holds the lock invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</source>
          <target state="translated">Wątek, który wywołał <ph id="ph1">`Wait`</ph> wywołuje wątku, który utrzymuje blokadę pozostaje w kolejce oczekiwania, aż do otrzymania <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, lub jest dalej w kolejce i wywołuje wątku, który utrzymuje blokadę <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>However, if <ph id="ph1">`millisecondsTimeout`</ph> elapses before another thread invokes this object's <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method, the original thread is moved to the ready queue in order to regain the lock.</source>
          <target state="translated">Jednak jeśli <ph id="ph1">`millisecondsTimeout`</ph> musi upłynąć, zanim inny wątek wywołuje ten obiekt <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> metody oryginalnego wątku zostanie przeniesiona do kolejki gotowy w celu odzyskania blokady.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> is specified for the <ph id="ph2">`millisecondsTimeout`</ph> parameter, this method blocks indefinitely unless the holder of the lock calls <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> określono <ph id="ph2">`millisecondsTimeout`</ph> parametru tej metody nieskończoność blokuje chyba, że właściciel blokady wywołuje <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> equals 0, the thread that calls <ph id="ph2">`Wait`</ph> releases the lock and then immediately enters the ready queue in order to regain the lock.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeout`</ph> jest równe 0, wątku, który wywołuje <ph id="ph2">`Wait`</ph> zwalnia blokadę i następnie natychmiast wprowadzenia gotowy kolejki w celu odzyskania blokady.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Element wywołujący wykonuje <ph id="ph1">`Wait`</ph> raz, niezależnie od tego, ile razy <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> została wywołana dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> on the object and invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">Koncepcyjnie <ph id="ph1">`Wait`</ph> metody przechowuje liczbę razy wywołać obiekt wywołujący <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> dla obiektu, a następnie wywołuje <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> tyle razy, aby całkowicie zwolnić zablokowany obiekt.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> as many times as necessary to restore the saved <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count for the caller.</source>
          <target state="translated">Gdy obiekt wywołujący reacquires blokady, system wywołuje <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> tyle razy, aby przywrócić zapisanego <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count do obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Wywoływanie <ph id="ph1">`Wait`</ph> zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Synchronizowany obiekt zawiera wiele odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, który zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, I <ph id="ph3">`Wait`</ph> metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Uwagi dla <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> metody opisano, co się stanie, jeśli <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> jest wywoływane, gdy nie ma wątków oczekujących.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The<ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Even if you are currently executing a method on a class that is not derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie jest pochodną <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>It returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method completes.</source>
          <target state="translated">Zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This can be useful when the context-bound class has the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> attribute applied.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> atrybut zastosowany.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is not invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Wait" /&gt;</ph> w bloku zsynchronizowanego kodu nie jest wywoływany z.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The thread that invokes <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is later interrupted from the waiting state.</source>
          <target state="translated">Wątek, który wywołuje <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> później zostało przerwane ze stanu oczekiwania.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Dzieje się tak, gdy inny wątek wywołuje ten wątek <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The value of the <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> parameter is negative, and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">Wartość <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> parametr jest ujemna i nie jest równa <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The object on which to wait.</source>
          <target state="translated">Obiekt, na którym oczekiwania.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> representing the amount of time to wait before the thread enters the ready queue.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> reprezentujący ilość czasu oczekiwania na wątek wprowadza gotowy kolejki.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zakończyć pracę i ponownie pozyskać domeny synchronizacji dla kontekstu (Jeśli w kontekście zsynchronizowane) przed oczekiwaniem; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>If the specified time-out interval elapses, the thread enters the ready queue.</source>
          <target state="translated">Jeśli upłynie określony limit czasu, wątek przechodzi gotowy kolejki.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</source>
          <target state="translated">Opcjonalnie przed czas oczekiwania kończy działanie domeny synchronizacji dla kontekstu zsynchronizowane i reacquires domeny później.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock was reacquired before the specified time elapsed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the lock was reacquired after the specified time elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli blokada została reacquired przed upływem określonego czasu; <ph id="ph2">&lt;see langword="false" /&gt;</ph> Jeśli blokada została reacquired po upływie określonego czasu.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The method does not return until the lock is reacquired.</source>
          <target state="translated">Metoda nie zwraca dopóki blokada jest reacquired.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This method does not return until it reacquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Ta metoda wraca do momentu jego reacquires na wyłączność <ph id="ph1">`obj`</ph> parametru.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Limit czasu gwarantuje, że bieżący wątek nie blokuje nieskończoność Jeśli inny wątek zwalnia blokadę bez wywoływania pierwszego elementu <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</source>
          <target state="translated">Przenosi także wątku do kolejki gotowy, pomijanie inne wątki wcześniejsze go w kolejce oczekiwania tak, aby go ponownie wcześniej uzyskać blokady.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The thread can test the return value of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method again.</source>
          <target state="translated">Wątek można przetestować wartość zwracaną <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metodę, aby określić, czy jego reacquired blokady przed limit czasu. Wątek może służyć do oceny warunków, które spowodował wprowadź czas oczekiwania, i w razie potrzeby wywołania <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> ponownie — metoda.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock and enters the waiting queue.</source>
          <target state="translated">Gdy wywołuje wątku <ph id="ph1">`Wait`</ph>, zwalnia blokadę i wprowadza kolejki oczekiwania.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</source>
          <target state="translated">W tym momencie następnego wątku w kolejce gotowy (jeśli istnieje) może przejąć kontrolę nad blokady.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The thread that invoked <ph id="ph1">`Wait`</ph> remains in the waiting queue until either a thread that holds the lock invokes <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, or it is the next in the queue and a thread that holds the lock invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</source>
          <target state="translated">Wątek, który wywołał <ph id="ph1">`Wait`</ph> wywołuje wątku, który utrzymuje blokadę pozostaje w kolejce oczekiwania, aż do otrzymania <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, lub jest dalej w kolejce i wywołuje wątku, który utrzymuje blokadę <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>However, if <ph id="ph1">`timeout`</ph> milliseconds elapse before another thread invokes this object's <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method, the original thread is moved to the ready queue in order to regain the lock.</source>
          <target state="translated">Jednak jeśli <ph id="ph1">`timeout`</ph> milisekund, po jakim inny wątek wywołuje ten obiekt <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> metody oryginalnego wątku zostanie przeniesiona do kolejki gotowy w celu odzyskania blokady.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>If a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> representing -1 millisecond is specified for the <ph id="ph2">`timeout`</ph> parameter, this method blocks indefinitely unless the holder of the lock calls <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</source>
          <target state="translated">Jeśli <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> reprezentujący wartość-1 milisekund jest określony dla <ph id="ph2">`timeout`</ph> parametru tej metody nieskończoność blokuje chyba, że właściciel blokady wywołuje <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> lub <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>If <ph id="ph1">`timeout`</ph> is 0 milliseconds, the thread that calls <ph id="ph2">`Wait`</ph> releases the lock and then immediately enters the ready queue in order to regain the lock.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> 0 milisekund, wątku, który wywołuje <ph id="ph2">`Wait`</ph> zwalnia blokadę i następnie natychmiast wprowadzenia gotowy kolejki w celu odzyskania blokady.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Element wywołujący wykonuje <ph id="ph1">`Wait`</ph> raz, niezależnie od tego, ile razy <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> została wywołana dla określonego obiektu.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> on the object and invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">Koncepcyjnie <ph id="ph1">`Wait`</ph> metody przechowuje liczbę razy wywołać obiekt wywołujący <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> dla obiektu, a następnie wywołuje <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> tyle razy, aby całkowicie zwolnić zablokowany obiekt.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> as many times as necessary to restore the saved <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count for the caller.</source>
          <target state="translated">Gdy obiekt wywołujący reacquires blokady, system wywołuje <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> tyle razy, aby przywrócić zapisanego <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count do obiektu wywołującego.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Wywoływanie <ph id="ph1">`Wait`</ph> zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Synchronizowany obiekt zawiera wiele odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, który zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, I <ph id="ph3">`Wait`</ph> metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Uwagi dla <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> metody opisano, co się stanie, jeśli <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> jest wywoływane, gdy nie ma wątków oczekujących.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Uwagi dotyczące zamykania kontekstu</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The<ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Parametru nie obowiązuje, chyba że <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Even if you are currently executing a method on a class that is not derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie jest pochodną <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, takiej jak <ph id="ph2">&lt;xref:System.String&gt;</ph>, może być w kontekście innych niż domyślne Jeśli <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> jest na stosie w bieżącej domenie aplikacji.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method.</source>
          <target state="translated">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając <ph id="ph1">`true`</ph> dla <ph id="ph2">`exitContext`</ph> powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>It returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method completes.</source>
          <target state="translated">Zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> ukończeniu metody.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This can be useful when the context-bound class has the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> attribute applied.</source>
          <target state="translated">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> atrybut zastosowany.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> — metoda i określa <ph id="ph2">`true`</ph> dla <ph id="ph3">`exitContext`</ph>, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Gdy <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is not invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Wait" /&gt;</ph> w bloku zsynchronizowanego kodu nie jest wywoływany z.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The thread that invokes Wait is later interrupted from the waiting state.</source>
          <target state="translated">Wątek, który wywołuje oczekiwania później zostało przerwane ze stanu oczekiwania.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Dzieje się tak, gdy inny wątek wywołuje ten wątek <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is negative and does not represent <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (–1 millisecond), or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> Parametru jest ujemna, a nie reprezentuje <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1 milisekund), albo jest większa niż <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>