<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cfafcfe91d4ef6eba6ebbbbe6d7101119c93823a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579949" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="acb20-101">Udostępnia mechanizm synchronizujący dostęp do obiektów.</span>
      <span class="sxs-lookup">
        <span data-stu-id="acb20-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-102"><xref:System.Threading.Monitor> Klasa umożliwia synchronizowanie dostęp do obszaru kodu przez pobranie i zwolnienie blokady dla określonego obiektu przez wywołanie metody <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, i <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="acb20-103">Obiekt blokady zapewniają możliwość ograniczenia dostępu do bloku kodu, często nazywane sekcja krytyczna.</span><span class="sxs-lookup"><span data-stu-id="acb20-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="acb20-104">Gdy wątek jest właścicielem blokady dla obiekt, żadnego innego wątku można uzyskać tego blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="acb20-105">Można również użyć <xref:System.Threading.Monitor> klasę, aby zapewnić, że nie inne wątku jest zezwolenie dostępu do sekcji aplikacji kodu wykonywana przez właściciela blokady, chyba że innego wątku jest wykonywanie kodu przy użyciu innego obiektu zablokowanym.</span><span class="sxs-lookup"><span data-stu-id="acb20-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="acb20-106">W tym artykule:</span><span class="sxs-lookup"><span data-stu-id="acb20-106">In this article:</span></span>  
  
 <span data-ttu-id="acb20-107">[Klasa monitora: omówienie](#Overview) </span><span class="sxs-lookup"><span data-stu-id="acb20-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="acb20-108">[Obiekt blokady](#Lock) </span><span class="sxs-lookup"><span data-stu-id="acb20-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="acb20-109">[Sekcja krytyczna](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="acb20-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="acb20-110">[Puls, PulseAll i oczekiwania](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="acb20-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="acb20-111">Monitory i uchwyty oczekiwania</span><span class="sxs-lookup"><span data-stu-id="acb20-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="acb20-112">Klasa monitora: omówienie</span><span class="sxs-lookup"><span data-stu-id="acb20-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="acb20-113"><xref:System.Threading.Monitor> zawiera następujące funkcje:</span><span class="sxs-lookup"><span data-stu-id="acb20-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="acb20-114">Jest on skojarzony z obiektu na żądanie.</span><span class="sxs-lookup"><span data-stu-id="acb20-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="acb20-115">Jest on niezwiązany, co oznacza, że można wywołać bezpośrednio w dowolnym kontekście.</span><span class="sxs-lookup"><span data-stu-id="acb20-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="acb20-116">Wystąpienie <xref:System.Threading.Monitor> nie można utworzyć klasy; metody <xref:System.Threading.Monitor> klasy są wszystkie statyczne.</span><span class="sxs-lookup"><span data-stu-id="acb20-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="acb20-117">Każda metoda jest przekazywana synchronizowany obiekt, który kontroluje dostęp do sekcji krytycznych.</span><span class="sxs-lookup"><span data-stu-id="acb20-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-118">Użyj <xref:System.Threading.Monitor> klasy do obiektu blokady inne niż ciągi (odwoływać się typów innych niż <xref:System.String>), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="acb20-119">Aby uzyskać więcej informacji, zobacz przeciążeń <xref:System.Threading.Monitor.Enter%2A> — metoda i [zablokować obiektu](#Lock) sekcji w dalszej części tego artykułu.</span><span class="sxs-lookup"><span data-stu-id="acb20-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="acb20-120">W poniższej tabeli opisano akcje, które można podjąć wątków, które uzyskują dostęp do synchronizowane obiekty:</span><span class="sxs-lookup"><span data-stu-id="acb20-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="acb20-121">Akcja</span><span class="sxs-lookup"><span data-stu-id="acb20-121">Action</span></span>|<span data-ttu-id="acb20-122">Opis</span><span class="sxs-lookup"><span data-stu-id="acb20-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="acb20-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="acb20-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="acb20-124">Uzyskuje blokadę dla obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-124">Acquires a lock for an object.</span></span> <span data-ttu-id="acb20-125">Ta akcja również oznacza początek sekcja krytyczna.</span><span class="sxs-lookup"><span data-stu-id="acb20-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="acb20-126">Żadnego innego wątku można wprowadzić sekcja krytyczna, chyba że wykonuje zgodnie z instrukcjami w sekcji krytyczne przy użyciu innego obiektu zablokowanym.</span><span class="sxs-lookup"><span data-stu-id="acb20-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="acb20-127">Zwalnia blokadę obiektu w celu umożliwienia innych wątków do blokowania i dostępu do obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="acb20-128">Wątek wywołujący czeka, podczas gdy inny wątek uzyskuje dostęp do obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="acb20-129">Sygnały Pulse są używane do powiadamiania wątków oczekujących o zmianach stanu obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="acb20-130"><xref:System.Threading.Monitor.Pulse%2A> (sygnał) <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="acb20-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="acb20-131">Wysyła sygnał do jednego lub więcej wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="acb20-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="acb20-132">Sygnał powiadamia oczekiwania wątku, który zmienił się stan zablokowany obiekt, a właścicielem blokady jest gotowy do zwolnienia blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="acb20-133">Oczekiwania wątku jest umieszczony w kolejce gotowy obiektu, tak aby po pewnym czasie może odbierać blokady dla obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="acb20-134">Wątek ma blokady, on sprawdzić nowy stan obiektu, aby zobaczyć, czy osiągnięto wymaganym stanem.</span><span class="sxs-lookup"><span data-stu-id="acb20-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="acb20-135">Zwalnia blokadę obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-135">Releases the lock on an object.</span></span> <span data-ttu-id="acb20-136">Ta akcja również oznacza koniec sekcji krytycznej chronione przez zablokowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="acb20-137">Począwszy od [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], istnieją dwa zestawy przeciążenia dla <xref:System.Threading.Monitor.Enter%2A> i <xref:System.Threading.Monitor.TryEnter%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="acb20-138">Jeden zestaw przeciążenia zawiera `ref` (w języku C#) lub `ByRef` (w języku Visual Basic) <xref:System.Boolean> atomowo ustawiono parametr `true` Jeśli blokady są uzyskiwane, nawet jeśli jest zgłaszany wyjątek podczas pobierania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="acb20-139">Użyj tych przeciążenia, jeśli jest bardzo istotne, aby zwolnić blokady we wszystkich przypadkach, nawet wtedy, gdy zasoby, które chroni blokady może nie być w stanie spójności.</span><span class="sxs-lookup"><span data-stu-id="acb20-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="acb20-140">Obiekt blokady</span><span class="sxs-lookup"><span data-stu-id="acb20-140">The lock object</span></span>  
 <span data-ttu-id="acb20-141">Klasa monitora składa się z `static` (w języku C#) lub `Shared` (w języku Visual Basic) metod, które pracują na obiekt czy kontroluje dostęp do sekcji krytycznych.</span><span class="sxs-lookup"><span data-stu-id="acb20-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="acb20-142">Następujące informacje są obsługiwane dla poszczególnych obiektów synchronizowanych:</span><span class="sxs-lookup"><span data-stu-id="acb20-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="acb20-143">Odwołanie do wątku, który aktualnie posiada blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="acb20-144">Odwołanie do kolejki gotowy, która zawiera wątków, które są gotowe do uzyskania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="acb20-145">Odwołanie do kolejki oczekiwania, która zawiera wątków, które oczekują na powiadomienia o zmianie w stanie zablokowanym obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="acb20-146"><xref:System.Threading.Monitor> blokuje obiektów (czyli typów referencyjnych), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="acb20-147">Można przekazać typu wartości do <xref:System.Threading.Monitor.Enter%2A> i <xref:System.Threading.Monitor.Exit%2A>, jest opakowany osobno dla każdego wywołania.</span><span class="sxs-lookup"><span data-stu-id="acb20-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="acb20-148">Ponieważ każde wywołanie tworzy oddzielny obiekt <xref:System.Threading.Monitor.Enter%2A> nigdy nie bloków i kod jest prawdopodobnie ochrona nie jest naprawdę zsynchronizowany.</span><span class="sxs-lookup"><span data-stu-id="acb20-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="acb20-149">Ponadto obiekt przekazywany do <xref:System.Threading.Monitor.Exit%2A> jest inny niż obiekt przekazany do <xref:System.Threading.Monitor.Enter%2A>, więc <xref:System.Threading.Monitor> zgłasza <xref:System.Threading.SynchronizationLockException> wyjątek z komunikatem "Metoda synchronizacji obiektu została wywołana z niezsynchronizowanego bloku kodu."</span><span class="sxs-lookup"><span data-stu-id="acb20-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="acb20-150">Poniższy przykład przedstawia ten problem.</span><span class="sxs-lookup"><span data-stu-id="acb20-150">The following example illustrates this problem.</span></span> <span data-ttu-id="acb20-151">Jest uruchamiany dziesięciu zadań, z których każdy właśnie zostanie uśpiony na 250 milisekund.</span><span class="sxs-lookup"><span data-stu-id="acb20-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="acb20-152">Każde zadanie następnie aktualizuje zmienną licznika `nTasks`, jest przeznaczony do zliczania faktycznie uruchamiana i wykonywane zadania.</span><span class="sxs-lookup"><span data-stu-id="acb20-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="acb20-153">Ponieważ `nTasks` jest zmienną globalną, który może być aktualizowany przez wielu zadań jednocześnie, monitor jest używane do ochrony przed awarią modyfikacji wielu zadań.</span><span class="sxs-lookup"><span data-stu-id="acb20-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="acb20-154">Jednak jako dane wyjściowe w przykładzie pokazano, wszystkie zadania zgłasza <xref:System.Threading.SynchronizationLockException> wyjątku.</span><span class="sxs-lookup"><span data-stu-id="acb20-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="acb20-155">Zgłasza wyjątek, każde zadanie <xref:System.Threading.SynchronizationLockException> wyjątek ponieważ `nTasks` zmiennej jest opakowany przed wywołaniem do <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> metody w każdym zadaniu.</span><span class="sxs-lookup"><span data-stu-id="acb20-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="acb20-156">Innymi słowy każde wywołanie metody jest przekazywany osobnej zmiennej, która jest niezależna od innych.</span><span class="sxs-lookup"><span data-stu-id="acb20-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="acb20-157">`nTasks` jest ponownie opakowany w wywołaniu <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="acb20-158">Ponownie, spowoduje to utworzenie dziesięć nowe zmienne ramkach, które są od siebie niezależne, `nTasks`, dziesięciu skrzynkach zmiennych utworzonych w wywołaniu <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="acb20-159">Wyjątku, następnie, ponieważ próbuje zwolnić blokady na nowo utworzony zmiennej, która wcześniej nie był zablokowany naszego kodu.</span><span class="sxs-lookup"><span data-stu-id="acb20-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="acb20-160">Mimo że można polu wartość typu zmienną przed wywołaniem <xref:System.Threading.Monitor.Enter%2A> i <xref:System.Threading.Monitor.Exit%2A>, jak pokazano w przykładzie następujących i przebiegu tego samego obiektu spakowanego do obu metod, nie ma żadnych dodatkowych zalet w ten sposób.</span><span class="sxs-lookup"><span data-stu-id="acb20-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="acb20-161">Zmiany do zmiennej rozpakowany nie są widoczne w ramce kopii, a nie istnieje sposób zmianę wartości opakowanego kopiowania.</span><span class="sxs-lookup"><span data-stu-id="acb20-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="acb20-162">Po wybraniu obiektu, w którym można zsynchronizować powinna zablokować tylko w obiektach prywatny lub wewnętrzny.</span><span class="sxs-lookup"><span data-stu-id="acb20-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="acb20-163">Blokowanie zewnętrznych obiektów może spowodować zakleszczenia, ponieważ kod niepowiązanych można wybrać te same obiekty do blokowania na różnych celach.</span><span class="sxs-lookup"><span data-stu-id="acb20-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="acb20-164">Należy pamiętać, że można synchronizować obiektu w wielu domenach aplikacji, jeśli obiekt używany do blokowania pochodzi z <xref:System.MarshalByRefObject>.</span><span class="sxs-lookup"><span data-stu-id="acb20-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="acb20-165">Sekcja krytyczna</span><span class="sxs-lookup"><span data-stu-id="acb20-165">The critical section</span></span>  
 <span data-ttu-id="acb20-166">Użyj <xref:System.Threading.Monitor.Enter%2A> i <xref:System.Threading.Monitor.Exit%2A> metody, aby oznaczyć początek i koniec sekcja krytyczna.</span><span class="sxs-lookup"><span data-stu-id="acb20-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-167">Funkcje zapewniane przez <xref:System.Threading.Monitor.Enter%2A> i <xref:System.Threading.Monitor.Exit%2A> metod jest taka sama jak zapewnianej przez [blokady](~/docs/csharp/language-reference/keywords/lock-statement.md) instrukcji w języku C# i [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) instrukcji w języku Visual Basic, z wyjątkiem Zawijaj konstrukcji językowych <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> przeciążenie metody i <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> metody w `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="acb20-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="acb20-168">blok do zapewnienia wydaniu monitora.</span><span class="sxs-lookup"><span data-stu-id="acb20-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="acb20-169">Jeśli sekcja krytyczna jest zestawem ciągłe instrukcje, a następnie blokadę uzyskaną przez <xref:System.Threading.Monitor.Enter%2A> — metoda gwarantuje, że tylko jednego wątku umożliwia wykonanie kodu objętego zablokowanym obiekcie.</span><span class="sxs-lookup"><span data-stu-id="acb20-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="acb20-170">W takim przypadku zaleca się umieszczenie kodu w `try` zablokowaniu, Umieść wywołanie <xref:System.Threading.Monitor.Exit%2A> metoda `finally` bloku.</span><span class="sxs-lookup"><span data-stu-id="acb20-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="acb20-171">Dzięki temu zwolnienie blokady, nawet jeśli wystąpi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="acb20-172">Poniższy fragment kodu przedstawia tego wzorca.</span><span class="sxs-lookup"><span data-stu-id="acb20-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="acb20-173">Tej funkcji jest zwykle używane do synchronizowania, dostęp do statycznych lub metody wystąpienia klasy.</span><span class="sxs-lookup"><span data-stu-id="acb20-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="acb20-174">Jeśli sekcja krytyczna obejmuje całą metody, funkcji blokowania można uzyskać przez umieszczenie <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> w metodzie i określając <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> wartość w Konstruktorze <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="acb20-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="acb20-175">Korzystając z tego atrybutu <xref:System.Threading.Monitor.Enter%2A> i <xref:System.Threading.Monitor.Exit%2A> wywołania metody nie są wymagane.</span><span class="sxs-lookup"><span data-stu-id="acb20-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="acb20-176">Poniższy fragment kodu przedstawia tego wzorca:</span><span class="sxs-lookup"><span data-stu-id="acb20-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="acb20-177">Należy pamiętać, że atrybut powoduje, że bieżący wątek utrzymuje blokady, dopóki metoda zwraca; Jeśli wcześniej może być zwolnione blokady, użyj <xref:System.Threading.Monitor> klas C# [blokady](~/docs/csharp/language-reference/keywords/lock-statement.md) instrukcji lub Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) instrukcji wewnątrz metody zamiast atrybutu.</span><span class="sxs-lookup"><span data-stu-id="acb20-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="acb20-178">Gdy istnieje możliwość <xref:System.Threading.Monitor.Enter%2A> i <xref:System.Threading.Monitor.Exit%2A> instrukcji, które zablokować, a następnie zwolnij danego obiektu do elementu członkowskiego lub klasy granic lub oba, takie rozwiązanie nie jest zalecane.</span><span class="sxs-lookup"><span data-stu-id="acb20-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="acb20-179">Puls, PulseAll i oczekiwania</span><span class="sxs-lookup"><span data-stu-id="acb20-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="acb20-180">Gdy wątek jest właścicielem blokady i przeszedł sekcja krytyczna, która chroni blokady, może wywołać <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, i <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="acb20-181"><xref:System.Threading.Monitor.Wait%2A> zwalnia blokadę, jeżeli jest utrzymywana, umożliwia oczekiwania wątku lub wątków, aby uzyskać blokady i wprowadź sekcja krytyczna i czeka zgłaszane przez wywołanie do <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> lub <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="acb20-182">Gdy <xref:System.Threading.Monitor.Wait%2A> zostanie powiadomiony, zwraca i ponownie uzyskuje blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="acb20-183">Zarówno <xref:System.Threading.Monitor.Pulse%2A> i <xref:System.Threading.Monitor.PulseAll%2A> sygnale następnego wątku w kolejce oczekiwania, aby kontynuować.</span><span class="sxs-lookup"><span data-stu-id="acb20-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="acb20-184">Monitory i uchwyty oczekiwania</span><span class="sxs-lookup"><span data-stu-id="acb20-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="acb20-185">Jest trzeba zwrócić uwagę na różnicę między stosowania <xref:System.Threading.Monitor> klasy i <xref:System.Threading.WaitHandle> obiektów.</span><span class="sxs-lookup"><span data-stu-id="acb20-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="acb20-186"><xref:System.Threading.Monitor> Klasy to czysto zarządzanych, pełni przenośny i może być skuteczniejsza pod względem wymagań dotyczących zasobów systemu operacyjnego.</span><span class="sxs-lookup"><span data-stu-id="acb20-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="acb20-187"><xref:System.Threading.WaitHandle> obiekty reprezentowała obiekty waitable systemu operacyjnego, są przydatne w przypadku synchronizacji między zarządzanymi i niezarządzanymi kodu i Udostępnianie zaawansowane funkcje systemu operacyjnego, takich jak możliwość czekać na wiele obiektów jednocześnie.</span><span class="sxs-lookup"><span data-stu-id="acb20-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acb20-188">W poniższym przykładzie użyto <xref:System.Threading.Monitor> klasy synchronizujący dostęp do pojedynczego wystąpienia generator liczb losowych reprezentowany przez <xref:System.Random> klasy.</span><span class="sxs-lookup"><span data-stu-id="acb20-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="acb20-189">W przykładzie jest tworzony dziesięciu zadań, które wykonuje asynchronicznie w wątku puli wątków.</span><span class="sxs-lookup"><span data-stu-id="acb20-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="acb20-190">Każde zadanie generuje 10 000 liczb losowych, oblicza średnią ich i aktualizuje dwie zmienne na poziomie procedury zapewniające sumę Liczba wygenerowanych wartości, a ich sumę.</span><span class="sxs-lookup"><span data-stu-id="acb20-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="acb20-191">Po wykonaniu wszystkich zadań, te dwie wartości są następnie używane do obliczania średniej ogólnej.</span><span class="sxs-lookup"><span data-stu-id="acb20-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="acb20-192">Ponieważ są one dostępne z dowolnego zadania uruchamiane w wątku puli wątków, uzyskać dostęp do zmiennych `total` i `n` również musi być synchronizowany.</span><span class="sxs-lookup"><span data-stu-id="acb20-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="acb20-193"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> Metoda jest używana w tym celu.</span><span class="sxs-lookup"><span data-stu-id="acb20-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="acb20-194">W poniższym przykładzie pokazano połączone zastosowanie <xref:System.Threading.Monitor> klasy (zaimplementowany przy użyciu `lock` lub `SyncLock` konstrukcji języka), <xref:System.Threading.Interlocked> klasy i <xref:System.Threading.AutoResetEvent> klasy.</span><span class="sxs-lookup"><span data-stu-id="acb20-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="acb20-195">Definiuje dwie `internal` (w języku C#) lub `Friend` (w języku Visual Basic) klas, `SyncResource` i `UnSyncResource`, które zapewniają odpowiednio zsynchronizowane i niezsynchronizowane dostęp do zasobu.</span><span class="sxs-lookup"><span data-stu-id="acb20-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="acb20-196">Aby upewnić się, że pokazano w przykładzie różnica między zsynchronizowane i niezsynchronizowane dostępu (co może wystąpić w przypadku każdego wywołania metody wykona szybko), metoda obejmuje losowe opóźnienie: dla wątków, których <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> właściwości jest parzysta, wywołania metody <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> do wprowadzania opóźnienia 2000 milisekund.</span><span class="sxs-lookup"><span data-stu-id="acb20-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="acb20-197">Należy zauważyć, że ponieważ `SyncResource` klasa nie jest publiczny, żaden kod klienta przyjmuje blokady zsynchronizowanych zasobów; samej klasy wewnętrzny przyjmuje blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="acb20-198">Zapobiega to pobranie blokady obiektu publicznego złośliwego kodu.</span><span class="sxs-lookup"><span data-stu-id="acb20-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="acb20-199">W przykładzie zdefiniowano zmiennej, `numOps`, który definiuje liczbę wątków, które próbują uzyskać dostęp do zasobu.</span><span class="sxs-lookup"><span data-stu-id="acb20-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="acb20-200">Wywołania wątku aplikacji <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> metody zsynchronizowane i niezsynchronizowane dostępne pięć razy.</span><span class="sxs-lookup"><span data-stu-id="acb20-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="acb20-201"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> Metoda ma jeden parametr delegata, który akceptuje Brak parametrów i nie zwraca żadnej wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="acb20-202">Zsynchronizowane dostępu wywołuje `SyncUpdateResource` metody; niezsynchronizowane dostępu wywołuje `UnSyncUpdateResource` metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="acb20-203">Po każdym zestawie wywołania metody, wywołuje wątku aplikacji [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) metodę, tak że blokuje do <xref:System.Threading.AutoResetEvent> zostanie zasygnalizowane wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="acb20-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="acb20-204">Każde wywołanie `SyncUpdateResource` metoda wywołuje wewnętrznej `SyncResource.Access` metody, a następnie wywołania <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metody, aby zmniejszyć `numOps` licznika.</span><span class="sxs-lookup"><span data-stu-id="acb20-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="acb20-205"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> Metoda jest używana do dekrementacji licznika, ponieważ w przeciwnym razie użytkownik nie może być określone, czy drugi wątek będą uzyskiwać dostęp do wartości, przed pierwszym wątkiem zmniejszany wartość została przechowywana w zmiennej.</span><span class="sxs-lookup"><span data-stu-id="acb20-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="acb20-206">Ostatniego synchronizowane zmniejsza wątku roboczego licznik do zera, wskazujący, że synchronizowane wszystkie wątki zostały wykonane, dostęp do zasobu, `SyncUpdateResource` wywołania metody <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> metodę, która sygnalizuje wątku głównego, aby kontynuować wykonanie.</span><span class="sxs-lookup"><span data-stu-id="acb20-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="acb20-207">Każde wywołanie `UnSyncUpdateResource` metoda wywołuje wewnętrznej `UnSyncResource.Access` metody, a następnie wywołania <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metody, aby zmniejszyć `numOps` licznika.</span><span class="sxs-lookup"><span data-stu-id="acb20-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="acb20-208">Jeszcze raz <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metodę zmniejszyć licznika czy drugi wątek nie dostępu wartość przed pierwszym wątkiem zmniejszona wartość została już przypisana do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="acb20-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="acb20-209">Podczas ostatniego niezsynchronizowane zmniejsza wątku roboczego licznik do zera, wskazujący, że nie więcej niezsynchronizowane wątków muszą uzyskać dostęp do zasobu `UnSyncUpdateResource` wywołania metody <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> metodę, która sygnalizuje wątku głównego do kontynuowania wykonywania .</span><span class="sxs-lookup"><span data-stu-id="acb20-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="acb20-210">Jak dane wyjściowe w przykładzie pokazano, zsynchronizowane dostęp zapewnia wątek wywołujący opuszcza zasobu chronionego, zanim inny wątek do niego dostęp; Każdy wątek oczekuje na jego poprzednik.</span><span class="sxs-lookup"><span data-stu-id="acb20-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="acb20-211">Z drugiej strony, bez blokady `UnSyncResource.Access` metoda jest wywoływana w kolejności, w którym wątków uzyskać do niej dostęp.</span><span class="sxs-lookup"><span data-stu-id="acb20-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="acb20-212">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="acb20-212">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="acb20-213">Uzyskuje blokadę wyłączności dla określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-213">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-214">Obiekt, na którym na uzyskanie blokady monitora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-214">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-215">Uzyskuje blokadę wyłączności na określony obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-215">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-216">Użyj `Enter` uzyskanie <xref:System.Threading.Monitor> na obiekt przekazany jako parametr.</span><span class="sxs-lookup"><span data-stu-id="acb20-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="acb20-217">Jeśli inny wątek zostało wykonane `Enter` obiektu, ale nie ma jeszcze wykonać odpowiednie <xref:System.Threading.Monitor.Exit%2A>, bieżący wątek zablokuje aż do innego wątku zwalnia obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="acb20-218">Jest dozwolony dla tego samego wątku wywołać `Enter` więcej niż jeden raz bez blokowania; jednak równej liczby `Exit` wywołania należy wywołać przed odblokowanie innych wątków oczekujących na obiekcie.</span><span class="sxs-lookup"><span data-stu-id="acb20-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="acb20-219">Użyj <xref:System.Threading.Monitor> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="acb20-220">Podczas przekazywania wartości typu zmienną do `Enter`, jest opakowany jako obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="acb20-221">W przypadku przekazania tej samej zmiennej `Enter` ponownie, jest opakowany jako oddzielny obiekt i wątku nie są blokowane.</span><span class="sxs-lookup"><span data-stu-id="acb20-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="acb20-222">W tym przypadku kod który `Monitor` jest prawdopodobnie ochrona nie jest chroniony.</span><span class="sxs-lookup"><span data-stu-id="acb20-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="acb20-223">Ponadto podczas przekazywania zmiennej `Exit`, jest tworzony oddzielny obiekt inny.</span><span class="sxs-lookup"><span data-stu-id="acb20-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="acb20-224">Ponieważ obiekt przekazywany do `Exit` jest inny niż obiekt przekazany do `Enter`, `Monitor` zgłasza <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="acb20-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="acb20-225">Aby uzyskać więcej informacji, zobacz temat dotyczący pojęć [monitorów](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="acb20-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="acb20-226"><xref:System.Threading.Thread.Interrupt%2A> można przerywać wątków, które oczekują na wprowadzanie `Monitor` obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="acb20-227">A <xref:System.Threading.ThreadInterruptedException> zostanie wygenerowany.</span><span class="sxs-lookup"><span data-stu-id="acb20-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="acb20-228">Użyj C# `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="acb20-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="acb20-229">blok (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="acb20-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="acb20-230">w Visual Basic) zapewniające wersji monitora lub użyj C# `lock` instrukcji (`SyncLock` instrukcji w języku Visual Basic), który opakowuje <xref:System.Threading.Monitor.Enter%2A> i <xref:System.Threading.Monitor.Exit%2A> metod w `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="acb20-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="acb20-231">Blok.</span><span class="sxs-lookup"><span data-stu-id="acb20-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acb20-232">W poniższym przykładzie pokazano sposób użycia `Enter` metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-233">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-234">Obiekt, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-234">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="acb20-235">Wynik próba uzyskania blokady przekazywana przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-235">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="acb20-236">Wartość wejściowa musi być <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-236">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="acb20-237">Dane wyjściowe <see langword="true" /> jeżeli blokady; w przeciwnym razie dane wyjściowe są <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="acb20-238">Dane wyjściowe jest ustawiona, nawet jeśli wystąpi wyjątek podczas próby uzyskania blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="acb20-239">Jeśli wystąpi żaden wyjątek, dane wyjściowe tej metody jest zawsze <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-240">Uzyskuje blokadę wyłączności na określony obiekt i automatycznie ustawia wartość wskazującą, czy blokada została wykonana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-241">Użyj `Enter` uzyskanie <xref:System.Threading.Monitor> obiektu przekazanych jako `obj` parametru.</span><span class="sxs-lookup"><span data-stu-id="acb20-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="acb20-242">Jeśli inny wątek zostało wykonane `Enter` obiektu, ale nie ma jeszcze wykonać odpowiednie <xref:System.Threading.Monitor.Exit%2A>, bieżący wątek zablokuje aż do innego wątku zwalnia obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="acb20-243">Jest dozwolony dla tego samego wątku wywołać `Enter` więcej niż jeden raz bez blokowania; jednak równej liczby `Exit` wywołania należy wywołać przed odblokowanie innych wątków oczekujących na obiekcie.</span><span class="sxs-lookup"><span data-stu-id="acb20-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="acb20-244">Jeśli blokada nie została wykonana, ponieważ wystąpił wyjątek, zmienna określony dla `lockTaken` parametr jest `false` po zakończeniu tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="acb20-245">Dzięki temu program ustalić, we wszystkich przypadkach, czy jest to konieczne zwolnić blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="acb20-246">Jeśli ta metoda zwraca bez generowania wyjątku, zmienna określony dla `lockTaken` parametr jest zawsze `true`, i nie ma konieczności przetestować go.</span><span class="sxs-lookup"><span data-stu-id="acb20-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="acb20-247">Użyj <xref:System.Threading.Monitor> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="acb20-248">Podczas przekazywania wartości typu zmienną do `Enter`, jest opakowany jako obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="acb20-249">W przypadku przekazania tej samej zmiennej `Enter` ponownie, jest opakowany jako oddzielny obiekt i wątku nie są blokowane.</span><span class="sxs-lookup"><span data-stu-id="acb20-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="acb20-250">W tym przypadku kod który `Monitor` jest prawdopodobnie ochrona nie jest chroniony.</span><span class="sxs-lookup"><span data-stu-id="acb20-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="acb20-251">Ponadto podczas przekazywania zmiennej `Exit`, jest tworzony oddzielny obiekt innego.</span><span class="sxs-lookup"><span data-stu-id="acb20-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="acb20-252">Ponieważ obiekt przekazywany do `Exit` jest inny niż obiekt przekazany do `Enter`, `Monitor` zgłasza <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="acb20-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="acb20-253">Aby uzyskać więcej informacji, zobacz temat dotyczący pojęć [monitorów](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="acb20-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="acb20-254"><xref:System.Threading.Thread.Interrupt%2A> można przerywać wątków, które oczekują na wprowadzanie `Monitor` obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="acb20-255">A <xref:System.Threading.ThreadInterruptedException> zostanie wygenerowany.</span><span class="sxs-lookup"><span data-stu-id="acb20-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acb20-256">Poniższy kod przedstawia podstawowy wzorzec dla przy użyciu <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="acb20-257">To przeciążenie zawsze ustawia wartości zmiennej, która została przekazana do `ref` parametr (`ByRef` w języku Visual Basic) `lockTaken`nawet wtedy, gdy metoda zgłasza wyjątek, dlatego wartość zmiennej jest to niezawodny sposób, aby sprawdzić, czy blokady musi być zwolnione.</span><span class="sxs-lookup"><span data-stu-id="acb20-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acb20-258">Dane wejściowe <paramref name="lockTaken" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-259">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-260">Obiekt do zwolnienia blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-260">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-261">Zwalnia określony obiekt wyłącznej blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-261">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-262">Wątek wywołujący musi być właścicielem blokady na `obj` parametru.</span><span class="sxs-lookup"><span data-stu-id="acb20-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="acb20-263">Jeśli wątek wywołujący jest właścicielem blokady na określony obiekt i wprowadził równej liczby `Exit` i <xref:System.Threading.Monitor.Enter%2A> odwołuje się do obiektu, a następnie zwolnienia blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="acb20-264">Jeśli wątek wywołujący nie wywołał `Exit` tyle razy, ile `Enter`, blokada nie jest zwalniany.</span><span class="sxs-lookup"><span data-stu-id="acb20-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="acb20-265">Jeśli zwolnienia blokady i inne wątki są gotowe kolejki dla obiekt, jeden z wątków uzyskuje blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="acb20-266">W przypadku innych wątków w kolejce oczekiwania oczekiwania na uzyskanie blokady, ich nie są automatycznie przenoszone do kolejki gotowy podczas wywołania właściciela blokady `Exit`.</span><span class="sxs-lookup"><span data-stu-id="acb20-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="acb20-267">Aby przenieść jeden lub więcej wątków oczekujących w kolejce gotowy, należy wywołać <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A> przed wywołaniem `Exit`.</span><span class="sxs-lookup"><span data-stu-id="acb20-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="acb20-268">W poniższym przykładzie pokazano sposób użycia `Exit` metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-269">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="acb20-270">Bieżący wątek nie jest właścicielem blokady dla określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-270">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-271">Obiekt do przetestowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-271">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-272">Określa, czy bieżący wątek utrzymuje blokadę określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-272">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acb20-273">
            <see langword="true" /> Jeśli bieżący wątek utrzymuje blokadę <paramref name="obj" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-273">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-274">Ta metoda działa tylko w przypadku blokad, które zostały nabyte za pomocą metody <xref:System.Threading.Monitor> klas, lub przy użyciu języka C# `lock` instrukcji lub Visual Basic `SyncLock` instrukcji, które są implementowane przy użyciu <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="acb20-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="acb20-275">Ta metoda z narzędzia diagnostyczne, takie jak <xref:System.Diagnostics.Debug.Assert%2A> — metoda i <xref:System.Diagnostics.Contracts.Contract> klasy, aby debugować problemy wymagające <xref:System.Threading.Monitor> klasy.</span><span class="sxs-lookup"><span data-stu-id="acb20-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-276">
            <paramref name="obj" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-276">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-277">Obiekt wątek oczekuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-277">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-278">Powiadamia wątku w kolejce oczekujących zmian w stanie zablokowanym obiekcie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-279">Tylko do bieżącego właściciela blokady można zasygnalizować obiekt oczekiwania przy użyciu `Pulse`.</span><span class="sxs-lookup"><span data-stu-id="acb20-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="acb20-280">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zasygnalizowania następnego wątku w wierszu dla blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="acb20-281">Po odebraniu Puls, oczekiwania wątku zostanie przeniesiona do kolejki gotowe.</span><span class="sxs-lookup"><span data-stu-id="acb20-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="acb20-282">Gdy wątek która wywołana `Pulse` zwalnia blokadę następnego wątku w kolejce gotowy (który nie musi być wątku, który został impulsu) uzyskuje blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="acb20-283"><xref:System.Threading.Monitor> Klasy nie przechowuje stanu wskazujący, że <xref:System.Threading.Monitor.Pulse%2A> została wywołana metoda.</span><span class="sxs-lookup"><span data-stu-id="acb20-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="acb20-284">W związku z tym jeśli wywołujesz <xref:System.Threading.Monitor.Pulse%2A> po nie wątków oczekujących, następnego wątku, który wywołuje <xref:System.Threading.Monitor.Wait%2A> bloki tak, jakby <xref:System.Threading.Monitor.Pulse%2A> nigdy nie została wywołana.</span><span class="sxs-lookup"><span data-stu-id="acb20-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="acb20-285">Jeśli z dwoma wątkami <xref:System.Threading.Monitor.Pulse%2A> i <xref:System.Threading.Monitor.Wait%2A> wchodzić w interakcje, to może doprowadzić do zakleszczenia.</span><span class="sxs-lookup"><span data-stu-id="acb20-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="acb20-286">Kontrastu to z zachowaniem <xref:System.Threading.AutoResetEvent> klasy: Jeśli użytkownik sygnału <xref:System.Threading.AutoResetEvent> przez wywołanie jego <xref:System.Threading.EventWaitHandle.Set%2A> metody i nie ma żadnych wątków oczekujących, <xref:System.Threading.AutoResetEvent> pozostaje w stanie sygnalizacji do momentu wywołania wątku <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, lub <xref:System.Threading.WaitHandle.WaitAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="acb20-287"><xref:System.Threading.AutoResetEvent> Zwalnia wątek i powróci do stanu unsignaled.</span><span class="sxs-lookup"><span data-stu-id="acb20-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="acb20-288">Należy pamiętać, że synchronizowany obiekt posiada kilka odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, które zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="acb20-289">`Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, I <xref:System.Threading.Monitor.Wait%2A> metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="acb20-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="acb20-290">Aby sygnału wiele wątków, użyj <xref:System.Threading.Monitor.PulseAll%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-291">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="acb20-292">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-292">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-293">Obiekt, który wysyła Puls.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-293">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-294">Powiadamia o wszystkich wątków oczekujących zmian stanu obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-294">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-295">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu sygnału wszystkie wątki oczekiwania na uzyskanie blokady obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="acb20-296">Po wysłaniu sygnał wątków oczekujących są przenoszone do kolejki gotowe.</span><span class="sxs-lookup"><span data-stu-id="acb20-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="acb20-297">Gdy wątek która wywołana `PulseAll` zwalnia blokadę następnego wątku w kolejce gotowy uzyskuje blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="acb20-298">Należy pamiętać, że synchronizowany obiekt posiada kilka odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, które zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="acb20-299"><xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, I <xref:System.Threading.Monitor.Wait%2A> metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="acb20-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="acb20-300">Uwagi dla <xref:System.Threading.Monitor.Pulse%2A> metody opisano, co się stanie, jeśli <xref:System.Threading.Monitor.Pulse%2A> jest wywoływane, gdy nie ma wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="acb20-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="acb20-301">Aby sygnału pojedynczego wątku, należy użyć `Pulse` metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-302">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="acb20-303">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-303">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="acb20-304">Próbuje uzyskać wyłącznej blokady na określony obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-304">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-305">Obiekt, w którym można uzyskać blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-305">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-306">Próbuje uzyskać wyłącznej blokady na określony obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-306">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acb20-307">
            <see langword="true" /> Jeśli bieżący wątek uzyskuje blokadę; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-307">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-308">Jeśli się powiedzie, ta metoda uzyskuje w trybie wyłączności na `obj` parametru.</span><span class="sxs-lookup"><span data-stu-id="acb20-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="acb20-309">Ta metoda zwraca od razu, czy blokada jest dostępna.</span><span class="sxs-lookup"><span data-stu-id="acb20-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="acb20-310">Ta metoda jest podobna do <xref:System.Threading.Monitor.Enter%2A>, ale nigdy nie blokuje bieżącego wątku.</span><span class="sxs-lookup"><span data-stu-id="acb20-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="acb20-311">Jeśli wątek nie można wprowadzić bez blokowania, metoda zwraca `false,`.</span><span class="sxs-lookup"><span data-stu-id="acb20-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-312">Użyj <xref:System.Threading.Monitor> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="acb20-313">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Monitor> artykułu.</span><span class="sxs-lookup"><span data-stu-id="acb20-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="acb20-314">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartości zwracanej przez metodę i wykonać kod w sekcji krytycznej tylko wtedy, gdy jego wartość zwracana jest `true`.</span><span class="sxs-lookup"><span data-stu-id="acb20-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="acb20-315">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="acb20-316">Należy pamiętać, że należy wywołać <xref:System.Threading.Monitor.Exit%2A> w `finally` bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="acb20-317">Poniższy przykład kodu pokazuje sposób użycia `TryEnter` metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-318">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-319">Obiekt, w którym można uzyskać blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-319">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="acb20-320">Wynik próba uzyskania blokady przekazywana przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-320">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="acb20-321">Wartość wejściowa musi być <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-321">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="acb20-322">Dane wyjściowe <see langword="true" /> jeżeli blokady; w przeciwnym razie dane wyjściowe są <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="acb20-323">Dane wyjściowe jest ustawiona, nawet jeśli wystąpi wyjątek podczas próby uzyskania blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-324">Próbuje uzyskać wyłącznej blokady w określonym obiekcie i automatycznie ustawia wartość wskazującą, czy blokada została wykonana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-325">Jeśli się powiedzie, ta metoda uzyskuje w trybie wyłączności na `obj` parametru.</span><span class="sxs-lookup"><span data-stu-id="acb20-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="acb20-326">Ta metoda zwraca od razu, czy blokada jest dostępna.</span><span class="sxs-lookup"><span data-stu-id="acb20-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="acb20-327">Jeśli blokada nie została wykonana, ponieważ wystąpił wyjątek, zmienna określony dla `lockTaken` parametr jest `false` po zakończeniu tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="acb20-328">Dzięki temu program ustalić, we wszystkich przypadkach, czy jest to konieczne zwolnić blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="acb20-329">Ta metoda jest podobna do <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, ale nigdy nie blokuje bieżącego wątku.</span><span class="sxs-lookup"><span data-stu-id="acb20-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="acb20-330">Jeśli wątek nie można wprowadzić bez blokowania, `lockTaken` argument ma wartość `false` kiedy metoda zwraca.</span><span class="sxs-lookup"><span data-stu-id="acb20-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-331">Użyj <xref:System.Threading.Monitor> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="acb20-332">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Monitor> artykułu.</span><span class="sxs-lookup"><span data-stu-id="acb20-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="acb20-333">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartość `lockTaken` i wykonywanie kodu w sekcji krytycznej tylko wtedy, gdy jego wartość wynosi `true`.</span><span class="sxs-lookup"><span data-stu-id="acb20-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="acb20-334">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="acb20-335">Należy pamiętać, że należy wywołać <xref:System.Threading.Monitor.Exit%2A> w `finally` bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="acb20-336">Poniższy kod przedstawia podstawowy wzorzec dla przy użyciu <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="acb20-337">To przeciążenie zawsze ustawia wartości zmiennej, która została przekazana do `ref` parametr (`ByRef` w języku Visual Basic) `lockTaken`nawet wtedy, gdy metoda zgłasza wyjątek, dlatego wartość zmiennej jest to niezawodny sposób, aby sprawdzić, czy blokady musi być zwolnione.</span><span class="sxs-lookup"><span data-stu-id="acb20-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acb20-338">Dane wejściowe <paramref name="lockTaken" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-339">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-340">Obiekt, w którym można uzyskać blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-340">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="acb20-341">Wyrażony w milisekundach czas oczekiwania na blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-341">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-342">Próbuje, określoną liczbę milisekund, uzyskać wyłącznej blokady określony obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acb20-343">
            <see langword="true" /> Jeśli bieżący wątek uzyskuje blokadę; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-343">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-344">Jeśli `millisecondsTimeout` parametr ma wartość <xref:System.Threading.Timeout.Infinite>, ta metoda jest odpowiednikiem <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="acb20-345">Jeśli `millisecondsTimeout` jest równa 0, ta metoda jest odpowiednikiem <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-346">Użyj <xref:System.Threading.Monitor> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="acb20-347">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Monitor> artykułu.</span><span class="sxs-lookup"><span data-stu-id="acb20-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="acb20-348">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartości zwracanej przez metodę i wykonać kod w sekcji krytycznej tylko wtedy, gdy jego wartość zwracana jest `true`.</span><span class="sxs-lookup"><span data-stu-id="acb20-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="acb20-349">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="acb20-350">Należy pamiętać, że należy wywołać <xref:System.Threading.Monitor.Exit%2A> w `finally` bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-351">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="acb20-352">
            <paramref name="millisecondsTimeout" /> jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-352">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-353">Obiekt, w którym można uzyskać blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-353">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="acb20-354">A <see cref="T:System.TimeSpan" /> reprezentujący ilość czasu oczekiwania na blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="acb20-355">Wartość-1 milisekund określa nieskończone oczekiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-355">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-356">Próbuje określoną ilość czasu, można uzyskać wyłącznej blokady określony obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acb20-357">
            <see langword="true" /> Jeśli bieżący wątek uzyskuje blokadę; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-357">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-358">Jeśli wartość `timeout` parametru przekonwertować milisekund równa -1, ta metoda jest odpowiednikiem <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="acb20-359">Jeśli wartość `timeout` jest równa 0, ta metoda jest odpowiednikiem <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-360">Użyj <xref:System.Threading.Monitor> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="acb20-361">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Monitor> klasy tematu.</span><span class="sxs-lookup"><span data-stu-id="acb20-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="acb20-362">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartości zwracanej przez metodę i wykonać kod w sekcji krytycznej tylko wtedy, gdy jego wartość zwracana jest `true`.</span><span class="sxs-lookup"><span data-stu-id="acb20-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="acb20-363">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="acb20-364">Należy pamiętać, że należy wywołać <xref:System.Threading.Monitor.Exit%2A> w `finally` bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-365">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="acb20-366">Wartość <paramref name="timeout" /> w milisekundach jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" /> (-1 milisekund), albo jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-367">Obiekt, w którym można uzyskać blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-367">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="acb20-368">Wyrażony w milisekundach czas oczekiwania na blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-368">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="acb20-369">Wynik próba uzyskania blokady przekazywana przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-369">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="acb20-370">Wartość wejściowa musi być <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-370">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="acb20-371">Dane wyjściowe <see langword="true" /> jeżeli blokady; w przeciwnym razie dane wyjściowe są <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="acb20-372">Dane wyjściowe jest ustawiona, nawet jeśli wystąpi wyjątek podczas próby uzyskania blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-373">Próbuje określoną liczbę milisekund, można uzyskać wyłącznej blokady określony obiekt i automatycznie ustawia wartość wskazującą, czy blokada została wykonana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-374">Jeśli `millisecondsTimeout` parametr ma wartość <xref:System.Threading.Timeout.Infinite>, ta metoda jest odpowiednikiem <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="acb20-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="acb20-375">Jeśli `millisecondsTimeout` jest równa 0, ta metoda jest odpowiednikiem <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="acb20-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="acb20-376">Jeśli blokada nie została wykonana, ponieważ wystąpił wyjątek, zmienna określony dla `lockTaken` parametr jest `false` po zakończeniu tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="acb20-377">Dzięki temu program ustalić, we wszystkich przypadkach, czy jest to konieczne zwolnić blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-378">Użyj <xref:System.Threading.Monitor> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="acb20-379">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Monitor> klasy tematu.</span><span class="sxs-lookup"><span data-stu-id="acb20-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="acb20-380">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartość `lockTaken` i wykonywanie kodu w sekcji krytycznej tylko wtedy, gdy jego wartość wynosi `true`.</span><span class="sxs-lookup"><span data-stu-id="acb20-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="acb20-381">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="acb20-382">Należy pamiętać, że należy wywołać <xref:System.Threading.Monitor.Exit%2A> w `finally` bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="acb20-383">Poniższy kod przedstawia podstawowy wzorzec dla przy użyciu <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> przeciążenie metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="acb20-384">To przeciążenie zawsze ustawia wartości zmiennej, która została przekazana do `ref` parametr (`ByRef` w języku Visual Basic) `lockTaken`nawet wtedy, gdy metoda zgłasza wyjątek, dlatego wartość zmiennej jest to niezawodny sposób, aby sprawdzić, czy blokady musi być zwolnione.</span><span class="sxs-lookup"><span data-stu-id="acb20-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acb20-385">Dane wejściowe <paramref name="lockTaken" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-386">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="acb20-387">
            <paramref name="millisecondsTimeout" /> jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-387">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-388">Obiekt, w którym można uzyskać blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-388">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="acb20-389">Ilość czasu oczekiwania na blokadę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-389">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="acb20-390">Wartość-1 milisekund określa nieskończone oczekiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-390">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="acb20-391">Wynik próba uzyskania blokady przekazywana przez odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-391">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="acb20-392">Wartość wejściowa musi być <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-392">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="acb20-393">Dane wyjściowe <see langword="true" /> jeżeli blokady; w przeciwnym razie dane wyjściowe są <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="acb20-394">Dane wyjściowe jest ustawiona, nawet jeśli wystąpi wyjątek podczas próby uzyskania blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-395">Próbuje określoną ilość czasu, można uzyskać wyłącznej blokady określony obiekt i automatycznie ustawia wartość wskazującą, czy blokada została wykonana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-396">Jeśli wartość `timeout` parametru przekonwertować milisekund równa -1, ta metoda jest odpowiednikiem <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="acb20-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="acb20-397">Jeśli wartość `timeout` jest równa 0, ta metoda jest odpowiednikiem <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="acb20-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="acb20-398">Jeśli blokada nie została wykonana, ponieważ wystąpił wyjątek, zmienna określony dla `lockTaken` parametr jest `false` po zakończeniu tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="acb20-399">Dzięki temu program ustalić, we wszystkich przypadkach, czy jest to konieczne zwolnić blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-400">Użyj <xref:System.Threading.Monitor> Aby zablokować obiekty (to znaczy typy referencyjne), nie typów wartości.</span><span class="sxs-lookup"><span data-stu-id="acb20-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="acb20-401">Aby uzyskać więcej informacji, zobacz <xref:System.Threading.Monitor> klasy tematu.</span><span class="sxs-lookup"><span data-stu-id="acb20-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="acb20-402">Aby upewnić się, że wątek nie wprowadził sekcja krytyczna, należy sprawdzić wartość `lockTaken` i wykonywanie kodu w sekcji krytycznej tylko wtedy, gdy jego wartość wynosi `true`.</span><span class="sxs-lookup"><span data-stu-id="acb20-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="acb20-403">Poniższy fragment kodu przedstawia wzorzec służący do wywołania tej metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="acb20-404">Należy pamiętać, że należy wywołać <xref:System.Threading.Monitor.Exit%2A> w `finally` bloku, aby upewnić się, czy wątek wywołujący zwalnia jego blokadę sekcja krytyczna, jeśli wystąpi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="acb20-405">Dane wejściowe <paramref name="lockTaken" /> jest <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-406">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="acb20-407">Wartość <paramref name="timeout" /> w milisekundach jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" /> (-1 milisekund), albo jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="acb20-408">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-409">Obiekt, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-409">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-410">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acb20-411">
            <see langword="true" /> Jeśli wywołanie zwracany, ponieważ obiekt wywołujący reacquired blokady dla określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-411">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="acb20-412">Ta metoda nie zwraca Jeśli blokada nie jest reacquired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-412">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-413">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</span><span class="sxs-lookup"><span data-stu-id="acb20-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="acb20-414">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="acb20-415">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="acb20-416">Gdy wywołuje wątku `Wait`, zwalnia blokadę na obiekcie i wprowadza kolejki oczekiwanie obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="acb20-417">Następny wątek w kolejce gotowy obiektu (jeśli istnieje) uzyskuje blokadę i ma wyłącznego użytku obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="acb20-418">Wszystkie wątki, które wywołują `Wait` pozostają w kolejce oczekiwania do czasu ich odebrał sygnału z <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A>, wysłanych przez właściciela blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="acb20-419">Jeśli `Pulse` wysłaniu dotyczy tylko wątek na head kolejki oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="acb20-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="acb20-420">Jeśli `PulseAll` wysłaniu dotyczy wszystkich wątków oczekujących dla obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="acb20-421">Po odebraniu sygnału jeden lub więcej wątków pozostaw kolejki oczekiwania, a następnie wprowadź gotowy kolejki.</span><span class="sxs-lookup"><span data-stu-id="acb20-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="acb20-422">Wątek w kolejce gotowy może ponownie uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="acb20-423">Ta metoda zwraca wartość, gdy wątek wywołujący reacquires blokady obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="acb20-424">Należy pamiętać, że ta metoda blokuje nieskończoność, jeśli właściciel blokady nie mogą wywoływać `Pulse` lub `PulseAll`.</span><span class="sxs-lookup"><span data-stu-id="acb20-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="acb20-425">Element wywołujący wykonuje `Wait` raz, niezależnie od tego, ile razy <xref:System.Threading.Monitor.Enter%2A> została wywołana dla określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="acb20-426">Koncepcyjnie `Wait` metody przechowuje liczbę razy wywołać obiekt wywołujący `Enter` dla obiektu, a następnie wywołuje `Exit` tyle razy, aby całkowicie zwolnić zablokowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="acb20-427">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="acb20-428">Gdy obiekt wywołujący reacquires blokady, system wywołuje `Enter` tyle razy, aby przywrócić zapisanego `Enter` count do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="acb20-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="acb20-429">Wywoływanie `Wait` zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</span><span class="sxs-lookup"><span data-stu-id="acb20-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="acb20-430">Należy pamiętać, że synchronizowany obiekt posiada kilka odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, które zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="acb20-431"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, I `Wait` metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="acb20-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="acb20-432">Uwagi dla <xref:System.Threading.Monitor.Pulse%2A> metody opisano, co się stanie, jeśli <xref:System.Threading.Monitor.Pulse%2A> jest wywoływane, gdy nie ma wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="acb20-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-433">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="acb20-434">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-434">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="acb20-435">Wątek, który wywołuje <see langword="Wait" /> później zostało przerwane ze stanu oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="acb20-436">Dzieje się tak, gdy inny wątek wywołuje ten wątek <see cref="M:System.Threading.Thread.Interrupt" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-437">Obiekt, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-437">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="acb20-438">Wyrażony w milisekundach czas oczekiwania przed wątek przechodzi gotowy kolejki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-438">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-439">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="acb20-440">Jeśli upłynie określony limit czasu, wątek przechodzi gotowy kolejki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-440">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acb20-441">
            <see langword="true" /> Jeśli blokada została reacquired przed upływem określonego czasu; <see langword="false" /> Jeśli blokada została reacquired po upływie określonego czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-441">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="acb20-442">Metoda nie zwraca dopóki blokada jest reacquired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-442">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-443">Ta metoda wraca do momentu jego reacquires na wyłączność `obj` parametru.</span><span class="sxs-lookup"><span data-stu-id="acb20-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="acb20-444">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</span><span class="sxs-lookup"><span data-stu-id="acb20-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="acb20-445">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="acb20-446">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="acb20-447">Limit czasu gwarantuje, że bieżący wątek nie blokuje nieskończoność Jeśli inny wątek zwalnia blokadę bez wywoływania pierwszego elementu <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="acb20-448">Przenosi także wątku do kolejki gotowy, pomijanie inne wątki wcześniejsze go w kolejce oczekiwania tak, aby go ponownie wcześniej uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="acb20-449">Wątek można przetestować wartość zwracaną <xref:System.Threading.Monitor.Wait%2A> metodę, aby określić, czy jego reacquired blokady przed limit czasu. Wątek może służyć do oceny warunków, które spowodował wprowadź czas oczekiwania, i w razie potrzeby wywołania <xref:System.Threading.Monitor.Wait%2A> ponownie — metoda.</span><span class="sxs-lookup"><span data-stu-id="acb20-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="acb20-450">Gdy wywołuje wątku `Wait`, zwalnia blokadę na obiekcie i wprowadza kolejki oczekiwanie obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="acb20-451">Następny wątek w kolejce gotowy obiektu (jeśli istnieje) uzyskuje blokadę i ma wyłącznego użytku obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="acb20-452">Wątek, który wywołał `Wait` wywołuje wątku, który utrzymuje blokadę pozostaje w kolejce oczekiwania, aż do otrzymania <xref:System.Threading.Monitor.PulseAll%2A>, lub jest dalej w kolejce i wywołuje wątku, który utrzymuje blokadę <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="acb20-453">Jednak jeśli `millisecondsTimeout` musi upłynąć, zanim inny wątek wywołuje ten obiekt <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A> metody oryginalnego wątku zostanie przeniesiona do kolejki gotowy w celu odzyskania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-454">Jeśli <xref:System.Threading.Timeout.Infinite> określono `millisecondsTimeout` parametru tej metody nieskończoność blokuje chyba, że właściciel blokady wywołuje <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="acb20-455">Jeśli `millisecondsTimeout` jest równe 0, wątku, który wywołuje `Wait` zwalnia blokadę i następnie natychmiast wprowadzenia gotowy kolejki w celu odzyskania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="acb20-456">Element wywołujący wykonuje `Wait` raz, niezależnie od tego, ile razy <xref:System.Threading.Monitor.Enter%2A> została wywołana dla określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="acb20-457">Koncepcyjnie `Wait` metody przechowuje liczbę razy wywołać obiekt wywołujący <xref:System.Threading.Monitor.Enter%2A> dla obiektu, a następnie wywołuje <xref:System.Threading.Monitor.Exit%2A> tyle razy, aby całkowicie zwolnić zablokowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="acb20-458">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="acb20-459">Gdy obiekt wywołujący reacquires blokady, system wywołuje <xref:System.Threading.Monitor.Enter%2A> tyle razy, aby przywrócić zapisanego <xref:System.Threading.Monitor.Enter%2A> count do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="acb20-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="acb20-460">Wywoływanie `Wait` zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</span><span class="sxs-lookup"><span data-stu-id="acb20-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-461">Synchronizowany obiekt zawiera wiele odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, który zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="acb20-462"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, I `Wait` metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="acb20-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="acb20-463">Uwagi dla <xref:System.Threading.Monitor.Pulse%2A> metody opisano, co się stanie, jeśli <xref:System.Threading.Monitor.Pulse%2A> jest wywoływane, gdy nie ma wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="acb20-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-464">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="acb20-465">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-465">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="acb20-466">Wątek, który wywołuje <see langword="Wait" /> później zostało przerwane ze stanu oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="acb20-467">Dzieje się tak, gdy inny wątek wywołuje ten wątek <see cref="M:System.Threading.Thread.Interrupt" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="acb20-468">Wartość <paramref name="millisecondsTimeout" /> parametr jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-469">Obiekt, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-469">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="acb20-470">A <see cref="T:System.TimeSpan" /> reprezentujący ilość czasu oczekiwania na wątek wprowadza gotowy kolejki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-471">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="acb20-472">Jeśli upłynie określony limit czasu, wątek przechodzi gotowy kolejki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-472">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acb20-473">
            <see langword="true" /> Jeśli blokada została reacquired przed upływem określonego czasu; <see langword="false" /> Jeśli blokada została reacquired po upływie określonego czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-473">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="acb20-474">Metoda nie zwraca dopóki blokada jest reacquired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-474">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-475">Ta metoda wraca do momentu jego reacquires na wyłączność `obj` parametru.</span><span class="sxs-lookup"><span data-stu-id="acb20-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="acb20-476">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</span><span class="sxs-lookup"><span data-stu-id="acb20-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="acb20-477">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="acb20-478">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="acb20-479">Limit czasu gwarantuje, że bieżący wątek nie blokuje nieskończoność Jeśli inny wątek zwalnia blokadę bez wywoływania pierwszego elementu <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="acb20-480">Przenosi także wątku do kolejki gotowy, pomijanie inne wątki wcześniejsze go w kolejce oczekiwania tak, aby go ponownie wcześniej uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="acb20-481">Wątek można przetestować wartość zwracaną <xref:System.Threading.Monitor.Wait%2A> metodę, aby określić, czy jego reacquired blokady przed limit czasu. Wątek może służyć do oceny warunków, które spowodował wprowadź czas oczekiwania, i w razie potrzeby wywołania <xref:System.Threading.Monitor.Wait%2A> ponownie — metoda.</span><span class="sxs-lookup"><span data-stu-id="acb20-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="acb20-482">Gdy wywołuje wątku `Wait`, zwalnia blokadę na obiekcie i wprowadza kolejki oczekiwanie obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="acb20-483">Następny wątek w kolejce gotowy obiektu (jeśli istnieje) uzyskuje blokadę i ma wyłącznego użytku obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="acb20-484">Wątek, który wywołał `Wait` wywołuje wątku, który utrzymuje blokadę pozostaje w kolejce oczekiwania, aż do otrzymania <xref:System.Threading.Monitor.PulseAll%2A>, lub jest dalej w kolejce i wywołuje wątku, który utrzymuje blokadę <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="acb20-485">Jednak jeśli `timeout` musi upłynąć, zanim inny wątek wywołuje ten obiekt <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A> metody oryginalnego wątku zostanie przeniesiona do kolejki gotowy w celu odzyskania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-486">Jeśli <xref:System.TimeSpan> reprezentujący-1 milisekund jest określony dla `timeout` parametru tej metody nieskończoność blokuje chyba, że właściciel blokady wywołuje <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="acb20-487">Jeśli `timeout` 0 milisekund, wątku, który wywołuje `Wait` zwalnia blokadę i następnie natychmiast wprowadzenia gotowy kolejki w celu odzyskania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="acb20-488">Element wywołujący wykonuje `Wait` raz, niezależnie od tego, ile razy <xref:System.Threading.Monitor.Enter%2A> została wywołana dla określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="acb20-489">Koncepcyjnie `Wait` metody przechowuje liczbę razy wywołać obiekt wywołujący <xref:System.Threading.Monitor.Enter%2A> dla obiektu, a następnie wywołuje <xref:System.Threading.Monitor.Exit%2A> tyle razy, aby całkowicie zwolnić zablokowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="acb20-490">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="acb20-491">Gdy obiekt wywołujący reacquires blokady, system wywołuje <xref:System.Threading.Monitor.Enter%2A> tyle razy, aby przywrócić zapisanego <xref:System.Threading.Monitor.Enter%2A> count do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="acb20-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="acb20-492">Wywoływanie `Wait` zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</span><span class="sxs-lookup"><span data-stu-id="acb20-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-493">Synchronizowany obiekt zawiera wiele odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, który zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="acb20-494"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, I `Wait` metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="acb20-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="acb20-495">Uwagi dla <xref:System.Threading.Monitor.Pulse%2A> metody opisano, co się stanie, jeśli <xref:System.Threading.Monitor.Pulse%2A> jest wywoływane, gdy nie ma wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="acb20-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-496">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="acb20-497">Wątek wywołujący nie jest właścicielem blokady dla określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-497">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="acb20-498">Wątek, który wywołuje <see langword="Wait" /> później zostało przerwane ze stanu oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="acb20-499">Dzieje się tak, gdy inny wątek wywołuje ten wątek <see cref="M:System.Threading.Thread.Interrupt" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="acb20-500">Wartość <paramref name="timeout" /> parametru w milisekundach jest ujemna, a nie reprezentuje <see cref="F:System.Threading.Timeout.Infinite" /> (-1 milisekund), albo jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-501">Obiekt, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-501">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="acb20-502">Wyrażony w milisekundach czas oczekiwania przed wątek przechodzi gotowy kolejki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-502">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="acb20-503">
            <see langword="true" /> Aby zakończyć pracę i ponownie pozyskać domeny synchronizacji dla kontekstu (Jeśli w kontekście zsynchronizowane) przed oczekiwaniem; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-503">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-504">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="acb20-505">Jeśli upłynie określony limit czasu, wątek przechodzi gotowy kolejki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-505">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="acb20-506">Ta metoda także określa, czy domeny synchronizacji dla kontekstu (jeśli są w synchronizowane kontekst) jest zakończony przed czas oczekiwania i reacquired później.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acb20-507">
            <see langword="true" /> Jeśli blokada została reacquired przed upływem określonego czasu; <see langword="false" /> Jeśli blokada została reacquired po upływie określonego czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-507">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="acb20-508">Metoda nie zwraca dopóki blokada jest reacquired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-508">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-509">Ta metoda wraca do momentu jego reacquires na wyłączność `obj` parametru.</span><span class="sxs-lookup"><span data-stu-id="acb20-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="acb20-510">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</span><span class="sxs-lookup"><span data-stu-id="acb20-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="acb20-511">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="acb20-512">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="acb20-513">Limit czasu gwarantuje, że bieżący wątek nie blokuje nieskończoność Jeśli inny wątek zwalnia blokadę bez wywoływania pierwszego elementu <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="acb20-514">Przenosi także wątku do kolejki gotowy, pomijanie inne wątki wcześniejsze go w kolejce oczekiwania tak, aby go ponownie wcześniej uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="acb20-515">Wątek można przetestować wartość zwracaną <xref:System.Threading.Monitor.Wait%2A> metodę, aby określić, czy jego reacquired blokady przed limit czasu. Wątek może służyć do oceny warunków, które spowodował wprowadź czas oczekiwania, i w razie potrzeby wywołania <xref:System.Threading.Monitor.Wait%2A> ponownie — metoda.</span><span class="sxs-lookup"><span data-stu-id="acb20-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="acb20-516">Gdy wywołuje wątku `Wait`, zwalnia blokadę i wprowadza kolejki oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="acb20-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="acb20-517">W tym momencie następnego wątku w kolejce gotowy (jeśli istnieje) może przejąć kontrolę nad blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="acb20-518">Wątek, który wywołał `Wait` wywołuje wątku, który utrzymuje blokadę pozostaje w kolejce oczekiwania, aż do otrzymania <xref:System.Threading.Monitor.PulseAll%2A>, lub jest dalej w kolejce i wywołuje wątku, który utrzymuje blokadę <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="acb20-519">Jednak jeśli `millisecondsTimeout` musi upłynąć, zanim inny wątek wywołuje ten obiekt <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A> metody oryginalnego wątku zostanie przeniesiona do kolejki gotowy w celu odzyskania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-520">Jeśli <xref:System.Threading.Timeout.Infinite> określono `millisecondsTimeout` parametru tej metody nieskończoność blokuje chyba, że właściciel blokady wywołuje <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="acb20-521">Jeśli `millisecondsTimeout` jest równe 0, wątku, który wywołuje `Wait` zwalnia blokadę i następnie natychmiast wprowadzenia gotowy kolejki w celu odzyskania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="acb20-522">Element wywołujący wykonuje `Wait` raz, niezależnie od tego, ile razy <xref:System.Threading.Monitor.Enter%2A> została wywołana dla określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="acb20-523">Koncepcyjnie `Wait` metody przechowuje liczbę razy wywołać obiekt wywołujący <xref:System.Threading.Monitor.Enter%2A> dla obiektu, a następnie wywołuje <xref:System.Threading.Monitor.Exit%2A> tyle razy, aby całkowicie zwolnić zablokowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="acb20-524">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="acb20-525">Gdy obiekt wywołujący reacquires blokady, system wywołuje <xref:System.Threading.Monitor.Enter%2A> tyle razy, aby przywrócić zapisanego <xref:System.Threading.Monitor.Enter%2A> count do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="acb20-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="acb20-526">Wywoływanie `Wait` zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</span><span class="sxs-lookup"><span data-stu-id="acb20-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-527">Synchronizowany obiekt zawiera wiele odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, który zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="acb20-528"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, I `Wait` metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="acb20-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="acb20-529">Uwagi dla <xref:System.Threading.Monitor.Pulse%2A> metody opisano, co się stanie, jeśli <xref:System.Threading.Monitor.Pulse%2A> jest wywoływane, gdy nie ma wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="acb20-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="acb20-530">Uwagi dotyczące zamykania kontekstu</span><span class="sxs-lookup"><span data-stu-id="acb20-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="acb20-531">`exitContext` Parametru nie obowiązuje, chyba że <xref:System.Threading.Monitor.Wait%2A> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</span><span class="sxs-lookup"><span data-stu-id="acb20-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="acb20-532">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="acb20-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="acb20-533">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie jest pochodną <xref:System.ContextBoundObject>, takiej jak <xref:System.String>, może być w kontekście innych niż domyślne Jeśli <xref:System.ContextBoundObject> jest na stosie w bieżącej domenie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="acb20-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="acb20-534">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając `true` dla `exitContext` powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <xref:System.Threading.Monitor.Wait%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="acb20-535">Zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <xref:System.Threading.Monitor.Wait%2A> ukończeniu metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="acb20-536">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> atrybut zastosowany.</span><span class="sxs-lookup"><span data-stu-id="acb20-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="acb20-537">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</span><span class="sxs-lookup"><span data-stu-id="acb20-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="acb20-538">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <xref:System.Threading.Monitor.Wait%2A> — metoda i określa `true` dla `exitContext`, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</span><span class="sxs-lookup"><span data-stu-id="acb20-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="acb20-539">Gdy <xref:System.Threading.Monitor.Wait%2A> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</span><span class="sxs-lookup"><span data-stu-id="acb20-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-540">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="acb20-541">
            <see langword="Wait" /> w bloku zsynchronizowanego kodu nie jest wywoływany z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-541">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="acb20-542">Wątek, który wywołuje <see langword="Wait" /> później zostało przerwane ze stanu oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="acb20-543">Dzieje się tak, gdy inny wątek wywołuje ten wątek <see cref="M:System.Threading.Thread.Interrupt" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="acb20-544">Wartość <paramref name="millisecondsTimeout" /> parametr jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="acb20-545">Obiekt, na którym oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-545">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="acb20-546">A <see cref="T:System.TimeSpan" /> reprezentujący ilość czasu oczekiwania na wątek wprowadza gotowy kolejki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="acb20-547">
            <see langword="true" /> Aby zakończyć pracę i ponownie pozyskać domeny synchronizacji dla kontekstu (Jeśli w kontekście zsynchronizowane) przed oczekiwaniem; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-547">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="acb20-548">Zwalnia blokadę obiektu i blokuje bieżący wątek, do momentu jej reacquires blokady.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="acb20-549">Jeśli upłynie określony limit czasu, wątek przechodzi gotowy kolejki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-549">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="acb20-550">Opcjonalnie przed czas oczekiwania kończy działanie domeny synchronizacji dla kontekstu zsynchronizowane i reacquires domeny później.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="acb20-551">
            <see langword="true" /> Jeśli blokada została reacquired przed upływem określonego czasu; <see langword="false" /> Jeśli blokada została reacquired po upływie określonego czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-551">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="acb20-552">Metoda nie zwraca dopóki blokada jest reacquired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-552">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="acb20-553">Ta metoda wraca do momentu jego reacquires na wyłączność `obj` parametru.</span><span class="sxs-lookup"><span data-stu-id="acb20-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="acb20-554">Wątek, który jest bieżącym właścicielem blokady w określonym obiekcie wywołuje tę metodę w celu zwolnienia obiektu tak, aby inny wątek do niego dostęp.</span><span class="sxs-lookup"><span data-stu-id="acb20-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="acb20-555">Element wywołujący jest blokowane podczas oczekiwania na ponownie uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="acb20-556">Ta metoda jest wywoływana, gdy obiekt wywołujący musi czekać na zmiany stanu, która będzie wyniknąć operacji inny wątek.</span><span class="sxs-lookup"><span data-stu-id="acb20-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="acb20-557">Limit czasu gwarantuje, że bieżący wątek nie blokuje nieskończoność Jeśli inny wątek zwalnia blokadę bez wywoływania pierwszego elementu <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="acb20-558">Przenosi także wątku do kolejki gotowy, pomijanie inne wątki wcześniejsze go w kolejce oczekiwania tak, aby go ponownie wcześniej uzyskać blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="acb20-559">Wątek można przetestować wartość zwracaną <xref:System.Threading.Monitor.Wait%2A> metodę, aby określić, czy jego reacquired blokady przed limit czasu. Wątek może służyć do oceny warunków, które spowodował wprowadź czas oczekiwania, i w razie potrzeby wywołania <xref:System.Threading.Monitor.Wait%2A> ponownie — metoda.</span><span class="sxs-lookup"><span data-stu-id="acb20-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="acb20-560">Gdy wywołuje wątku `Wait`, zwalnia blokadę i wprowadza kolejki oczekiwania.</span><span class="sxs-lookup"><span data-stu-id="acb20-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="acb20-561">W tym momencie następnego wątku w kolejce gotowy (jeśli istnieje) może przejąć kontrolę nad blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="acb20-562">Wątek, który wywołał `Wait` wywołuje wątku, który utrzymuje blokadę pozostaje w kolejce oczekiwania, aż do otrzymania <xref:System.Threading.Monitor.PulseAll%2A>, lub jest dalej w kolejce i wywołuje wątku, który utrzymuje blokadę <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="acb20-563">Jednak jeśli `timeout` milisekund, po jakim inny wątek wywołuje ten obiekt <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A> metody oryginalnego wątku zostanie przeniesiona do kolejki gotowy w celu odzyskania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-564">Jeśli <xref:System.TimeSpan> reprezentujący wartość-1 milisekund jest określony dla `timeout` parametru tej metody nieskończoność blokuje chyba, że właściciel blokady wywołuje <xref:System.Threading.Monitor.Pulse%2A> lub <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="acb20-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="acb20-565">Jeśli `timeout` 0 milisekund, wątku, który wywołuje `Wait` zwalnia blokadę i następnie natychmiast wprowadzenia gotowy kolejki w celu odzyskania blokady.</span><span class="sxs-lookup"><span data-stu-id="acb20-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="acb20-566">Element wywołujący wykonuje `Wait` raz, niezależnie od tego, ile razy <xref:System.Threading.Monitor.Enter%2A> została wywołana dla określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="acb20-567">Koncepcyjnie `Wait` metody przechowuje liczbę razy wywołać obiekt wywołujący <xref:System.Threading.Monitor.Enter%2A> dla obiektu, a następnie wywołuje <xref:System.Threading.Monitor.Exit%2A> tyle razy, aby całkowicie zwolnić zablokowany obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="acb20-568">Obiekt wywołujący następnie blokuje podczas oczekiwania na ponownie pobrać obiekt.</span><span class="sxs-lookup"><span data-stu-id="acb20-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="acb20-569">Gdy obiekt wywołujący reacquires blokady, system wywołuje <xref:System.Threading.Monitor.Enter%2A> tyle razy, aby przywrócić zapisanego <xref:System.Threading.Monitor.Enter%2A> count do obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="acb20-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="acb20-570">Wywoływanie `Wait` zwalnia blokadę dla określonego obiektu Jeśli element wywołujący jest właścicielem blokady na inne obiekty, te nie zwolnienia blokad.</span><span class="sxs-lookup"><span data-stu-id="acb20-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="acb20-571">Synchronizowany obiekt zawiera wiele odwołań, łącznie z odwołaniem do wątku, który aktualnie posiada blokady, odwołanie do kolejki gotowy zawiera wątków, które są gotowe do uzyskania blokady, i odwołanie do kolejki oczekiwania, który zawiera wątków, które oczekują na powiadomienia o zmianie stanu obiektu.</span><span class="sxs-lookup"><span data-stu-id="acb20-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="acb20-572"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, I `Wait` metody muszą być wywoływane z wewnątrz bloku zsynchronizowanego kodu.</span><span class="sxs-lookup"><span data-stu-id="acb20-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="acb20-573">Uwagi dla <xref:System.Threading.Monitor.Pulse%2A> metody opisano, co się stanie, jeśli <xref:System.Threading.Monitor.Pulse%2A> jest wywoływane, gdy nie ma wątków oczekujących.</span><span class="sxs-lookup"><span data-stu-id="acb20-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="acb20-574">Uwagi dotyczące zamykania kontekstu</span><span class="sxs-lookup"><span data-stu-id="acb20-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="acb20-575">`exitContext` Parametru nie obowiązuje, chyba że <xref:System.Threading.Monitor.Wait%2A> metoda jest wywoływana z wewnątrz w kontekście zarządzanych niestandardowy.</span><span class="sxs-lookup"><span data-stu-id="acb20-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="acb20-576">Może się to zdarzyć, jeśli Twoje wątek znajduje się wewnątrz wywołania do wystąpienia klasy pochodzącej od <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="acb20-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="acb20-577">Nawet wtedy, gdy metody są aktualnie wykonywanych na klasę, która nie jest pochodną <xref:System.ContextBoundObject>, takiej jak <xref:System.String>, może być w kontekście innych niż domyślne Jeśli <xref:System.ContextBoundObject> jest na stosie w bieżącej domenie aplikacji.</span><span class="sxs-lookup"><span data-stu-id="acb20-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="acb20-578">Gdy kod jest wykonywany w kontekście innych niż domyślne, określając `true` dla `exitContext` powoduje, że na zakończenie niestandardowy kontekst zarządzanego wątku (oznacza to, przejście do domyślnego kontekstu) przed wykonaniem <xref:System.Threading.Monitor.Wait%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="acb20-579">Zwraca do oryginalnego kontekstu niestandardowy po wywołaniu <xref:System.Threading.Monitor.Wait%2A> ukończeniu metody.</span><span class="sxs-lookup"><span data-stu-id="acb20-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="acb20-580">Może to być przydatne, gdy zawiera klasy powiązane z kontekstem <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> atrybut zastosowany.</span><span class="sxs-lookup"><span data-stu-id="acb20-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="acb20-581">W takim przypadku wszystkie wywołania do elementów członkowskich klasy są synchronizowane automatycznie, a domena synchronizacji jest cały kod klasy.</span><span class="sxs-lookup"><span data-stu-id="acb20-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="acb20-582">Jeśli kod w stosie wywołań elementu członkowskiego wywołuje <xref:System.Threading.Monitor.Wait%2A> — metoda i określa `true` dla `exitContext`, wątek opuszcza domeny synchronizacji, dzięki czemu wątek, który jest zablokowany na wywołanie członków obiektu, aby kontynuować.</span><span class="sxs-lookup"><span data-stu-id="acb20-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="acb20-583">Gdy <xref:System.Threading.Monitor.Wait%2A> metoda zwróci wartość, oczekiwania wątku, który zgłosił wywołanie ponownie wprowadzić domeny synchronizacji.</span><span class="sxs-lookup"><span data-stu-id="acb20-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="acb20-584">
            <paramref name="obj" /> Parametr jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="acb20-585">
            <see langword="Wait" /> w bloku zsynchronizowanego kodu nie jest wywoływany z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-585">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="acb20-586">Wątek, który wywołuje oczekiwania później zostało przerwane ze stanu oczekiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-586">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="acb20-587">Dzieje się tak, gdy inny wątek wywołuje ten wątek <see cref="M:System.Threading.Thread.Interrupt" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="acb20-588">
            <paramref name="timeout" /> Parametru jest ujemna, a nie reprezentuje <see cref="F:System.Threading.Timeout.Infinite" /> (-1 milisekund), albo jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="acb20-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>