<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5bbfabdbae5b1d279368715b246f3372001f343c" /><Meta Name="ms.sourcegitcommit" Value="74239f3977d28923e5020663db2c4e91601bea79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/24/2019" /><Meta Name="ms.locfileid" Value="68437662" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia mechanizm wykonywania metody w wątku puli wątków w określonych odstępach czasu. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj delegata, aby określić metodę, która <xref:System.Threading.Timer> ma zostać wykonana. <xref:System.Threading.TimerCallback> Podpis <xref:System.Threading.TimerCallback> delegata:  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 Obiekt delegowany czasomierza jest określany podczas konstruowania czasomierza i nie można go zmienić. Metoda nie jest wykonywana w wątku, który utworzył czasomierz; jest ono wykonywane na <xref:System.Threading.ThreadPool> wątku dostarczanym przez system.  
  
> [!TIP]
> Platforma .NET zawiera cztery klasy `Timer`o nazwie, z których każda oferuje różne funkcje:  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>, które uruchamia zdarzenie i wykonuje kod w co najmniej jednym ujścia zdarzeń w regularnych odstępach czasu. Klasa jest przeznaczona do użycia jako składnik serwera lub usługi w środowisku wielowątkowym. nie ma interfejsu użytkownika i nie jest widoczny w czasie wykonywania.
> - <xref:System.Threading.Timer?displayProperty=nameWithType>, która wykonuje pojedynczą metodę wywołania zwrotnego w wątku puli wątków w regularnych odstępach czasu. Metoda wywołania zwrotnego jest definiowana podczas tworzenia wystąpienia czasomierza i nie można jej zmienić. Podobnie jak <xref:System.Timers.Timer?displayProperty=nameWithType> w przypadku klasy, ta klasa jest przeznaczona do użycia jako składnik serwera lub usługi w środowisku wielowątkowym. nie ma interfejsu użytkownika i nie jest widoczna w czasie wykonywania.
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType>(Tylko .NET Framework), składnik Windows Forms, który uruchamia zdarzenie i wykonuje kod w co najmniej jednym ujścia zdarzeń w regularnych odstępach czasu. Składnik nie ma interfejsu użytkownika i jest przeznaczony do użytku w środowisku jednowątkowym. jest ono wykonywane w wątku interfejsu użytkownika.
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType>(Tylko .NET Framework), składnik ASP.NET, który wykonuje asynchroniczne lub synchroniczne ogłaszanie stron sieci Web w regularnych odstępach czasu.
  
 Podczas tworzenia czasomierza można określić czas oczekiwania przed pierwszym wykonaniem metody (Godzina ukończenia) i czas oczekiwania między kolejnymi wykonaniami (kropką). <xref:System.Threading.Timer> Klasa ma takie samo rozwiązanie jak zegar systemowy. Oznacza to, że jeśli okres jest krótszy niż rozdzielczość zegara systemowego, <xref:System.Threading.TimerCallback> delegat zostanie wykonany w odstępach czasu zdefiniowanych przez rozwiązanie zegara systemowego, czyli około 15 milisekund w systemach Windows 7 i Windows 8. Można zmienić czas i okres obowiązywania lub wyłączyć czasomierz przy użyciu <xref:System.Threading.Timer.Change%2A> metody.  
  
> [!NOTE]
>  Dopóki nie używasz, musisz zachować odwołanie do niego. <xref:System.Threading.Timer> Podobnie jak w przypadku każdego zarządzanego obiektu <xref:System.Threading.Timer> , jest on objęty odzyskiwaniem pamięci, gdy nie ma odwołań do niego. Fakt, że <xref:System.Threading.Timer> jest nadal aktywny, nie uniemożliwia jego zebrania.  
  
 Gdy czasomierz nie jest już wymagany, użyj <xref:System.Threading.Timer.Dispose%2A> metody, aby zwolnić zasoby przechowywane przez czasomierz. Należy zauważyć, że wywołania zwrotne mogą <xref:System.Threading.Timer.Dispose> wystąpić po wywołaniu metody przeciążenia, ponieważ czasomierze kolejki wywołania zwrotnego do wykonania przez wątki puli wątków. Można użyć przeciążenia metody <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> , aby poczekać, aż wszystkie wywołania zwrotne zostaną zakończone.  
  
 Metoda wywołania zwrotnego wykonywana przez czasomierz powinien być współużytkowana, ponieważ jest wywoływana w <xref:System.Threading.ThreadPool> wątkach. Wywołanie zwrotne można wykonać jednocześnie w dwóch wątkach puli wątków, jeśli interwał czasomierza jest krótszy niż czas wymagany do wykonania wywołania zwrotnego lub jeśli wszystkie wątki puli wątków są używane, a wywołanie zwrotne jest kolejkowane wielokrotnie.  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType>jest prostym, lekkim czasomierzem, który używa metod wywołania zwrotnego i jest obsługiwany przez wątki puli wątków. Nie zaleca się używania z Windows Forms, ponieważ jego wywołania zwrotne nie występują w wątku interfejsu użytkownika. <xref:System.Windows.Forms.Timer?displayProperty=nameWithType>jest lepszym wyborem do użycia z Windows Forms. W przypadku funkcji czasomierza opartego na serwerze warto rozważyć <xref:System.Timers.Timer?displayProperty=nameWithType>użycie, które wywołuje zdarzenia i ma dodatkowe funkcje.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `StatusChecker` klasę, która `CheckStatus` zawiera metodę, której sygnatura <xref:System.Threading.TimerCallback> jest taka sama jak delegat. `state` Argument metody`CheckStatus` jest obiektem,któryjestużywanydosynchronizacjiwątkuaplikacjiiwątkupuliwątków<xref:System.Threading.AutoResetEvent> , który wykonuje delegat wywołania zwrotnego. `StatusChecker` Klasa zawiera również dwie zmienne stanu:  
  
 `invokeCount`  
 Wskazuje, ile razy Metoda wywołania zwrotnego została wywołana.  
  
 `maxCount`  
 Określa maksymalną liczbę przypadków wywoływania metody wywołania zwrotnego.  
  
 Wątek aplikacji tworzy czasomierz, który czeka jeden sekund, a następnie wykonuje `CheckStatus` metodę wywołania zwrotnego co 250 milisekund. Wątek aplikacji jest następnie blokowany do momentu <xref:System.Threading.AutoResetEvent> zasygnalizowania obiektu. Gdy metoda `maxCount` `AutoResetEvent.Set` wywołania zwrotnego wykonuje czas, wywołuje metodę w celu ustawienia stanu <xref:System.Threading.AutoResetEvent> obiektu. `CheckStatus` Przy pierwszym wykonaniu tej operacji wątek aplikacji wywołuje <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> metodę, aby metoda wywołania zwrotnego była wykonywana co pół sekundy. Jest on ponownie blokowany do momentu <xref:System.Threading.AutoResetEvent> zasygnalizowania obiektu. W takim przypadku czasomierz jest niszczony przez wywołanie jego <xref:System.Threading.Timer.Dispose%2A> metody i zakończenie działania aplikacji.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Zarządzana pula wątków</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.Threading.TimerCallback" /> Delegat reprezentujący metodę do wykonania.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Threading.Timer" /> klasy o nieskończonym okresie i nieskończonym czasie oczekiwania, używając nowo utworzonego <see cref="T:System.Threading.Timer" /> obiektu jako obiektu stanu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj ten Konstruktor, gdy chcesz użyć <xref:System.Threading.Timer> obiektu jako obiektu stanu. Po utworzeniu czasomierza Użyj <xref:System.Threading.Timer.Change%2A> metody, aby ustawić interwał i czas ukończenia.  
  
 Ten konstruktor określa nieskończony czas oczekiwania przed pierwszym wywołaniem zwrotnym i nieskończonym interwałem między wywołaniami zwrotnymi, aby zapobiec wystąpieniu pierwszego wywołania zwrotnego przed <xref:System.Threading.Timer> przypisaniem obiektu do obiektu stanu.  
  
 Metoda określona dla `callback` powinna być współużytkowana, ponieważ jest wywoływana w <xref:System.Threading.ThreadPool> wątkach. Metodę można wykonać jednocześnie w dwóch wątkach puli wątków, jeśli interwał czasomierza jest krótszy niż czas wymagany do wykonania metody lub jeśli wszystkie wątki puli wątków są używane, a metoda została umieszczona wiele razy.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy nowy czasomierz przy użyciu samego czasomierza jako obiektu stanu. <xref:System.Threading.Timer.Change%2A> Metoda jest używana do uruchomienia czasomierza. Gdy nastąpi wywołanie zwrotne czasomierza, obiekt stanu jest używany do wyłączania czasomierza.  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.Threading.TimerCallback" /> Delegat reprezentujący metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje, które mają być używane przez metodę wywołania zwrotnego <see langword="null" />lub.</param>
        <param name="dueTime">Czas oczekiwania przed <paramref name="callback" /> wywołaniem (w milisekundach). Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby zapobiec uruchamianiu czasomierza. Określ zero (0), aby natychmiast uruchomić czasomierz.</param>
        <param name="period">Przedział czasu między wywołaniami <paramref name="callback" />, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby wyłączyć okresowe sygnalizowanie.</param>
        <summary>Inicjuje nowe wystąpienie <see langword="Timer" /> klasy, używając 32-bitowej podpisanej liczby całkowitej w celu określenia interwału czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametr jest wywoływany raz po `dueTime` upłynięciu, `period` a następnie za każdym razem, gdy upłynie interwał czasu.  
  
 Jeśli `dueTime` jest równa zero (0 `callback` ), jest wywoływana od razu. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> <xref:System.Threading.Timer.Change%2A> , niejestwywoływana;czasomierzjestwyłączony,alemożnagowłączyć,wywołującmetodę.`callback`  
  
 Ponieważ Klasa ma takie samo rozwiązanie jak zegar systemowy, który jest około 15 milisekund w systemach Windows 7 i Windows 8, delegat wykonuje `callback` się w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli <xref:System.Threading.Timer> `period`jest mniejsza niż rozdzielczość zegara systemowego. Jeśli `period` jest równa zero (0 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> ) `dueTime` lub i <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>nie `callback` jest, jest wywoływana raz; okresowe zachowanie czasomierza jest wyłączone, ale można je ponownie włączyć przy użyciu <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinna być współużytkowana, ponieważ jest wywoływana w <xref:System.Threading.ThreadPool> wątkach. Metodę można wykonać jednocześnie w dwóch wątkach puli wątków, jeśli interwał czasomierza jest krótszy niż czas wymagany do wykonania metody lub jeśli wszystkie wątki puli wątków są używane, a metoda została umieszczona wiele razy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć `TimerCallback` delegata i zainicjować nowe wystąpienie `Timer` klasy.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr <paramref name="dueTime" /> <see cref="F:System.Threading.Timeout.Infinite" />lub <paramref name="period" /> jest wartością ujemną i nie jest równy.</exception>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="callback" /></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.Threading.TimerCallback" /> Delegat reprezentujący metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje, które mają być używane przez metodę wywołania zwrotnego <see langword="null" />lub.</param>
        <param name="dueTime">Czas oczekiwania przed <paramref name="callback" /> wywołaniem (w milisekundach). Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby zapobiec uruchamianiu czasomierza. Określ zero (0), aby natychmiast uruchomić czasomierz.</param>
        <param name="period">Przedział czasu między wywołaniami <paramref name="callback" />, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby wyłączyć okresowe sygnalizowanie.</param>
        <summary>Inicjuje nowe wystąpienie <see langword="Timer" /> klasy, używając 64-bitowych liczb całkowitych ze znakiem do mierzenia interwałów czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametr jest wywoływany raz po `dueTime` upłynięciu, `period` a następnie za każdym razem, gdy upłynie interwał czasu.  
  
 Jeśli `dueTime` jest równa zero (0 `callback` ), jest wywoływana od razu. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> <xref:System.Threading.Timer.Change%2A> , niejestwywoływana;czasomierzjestwyłączony,alemożnagowłączyć,wywołującmetodę.`callback`  
  
 Ponieważ Klasa ma takie samo rozwiązanie jak zegar systemowy, który jest około 15 milisekund w systemach Windows 7 i Windows 8, delegat wykonuje `callback` się w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli <xref:System.Threading.Timer> `period`jest mniejsza niż rozdzielczość zegara systemowego. Jeśli `period` jest równa zero (0 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> ) `dueTime` lub i <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>nie `callback` jest, jest wywoływana raz; okresowe zachowanie czasomierza jest wyłączone, ale można je ponownie włączyć przy użyciu <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinna być współużytkowana, ponieważ jest wywoływana w <xref:System.Threading.ThreadPool> wątkach. Metodę można wykonać jednocześnie w dwóch wątkach puli wątków, jeśli interwał czasomierza jest krótszy niż czas wymagany do wykonania metody lub jeśli wszystkie wątki puli wątków są używane, a metoda została umieszczona wiele razy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr <paramref name="dueTime" /> <see cref="F:System.Threading.Timeout.Infinite" />lub <paramref name="period" /> jest wartością ujemną i nie jest równy.</exception>
        <exception cref="T:System.NotSupportedException">Parametr <paramref name="dueTime" /> lub<paramref name="period" /> jest większy niż 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">Delegat reprezentujący metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje, które mają być używane przez metodę wywołania zwrotnego <see langword="null" />lub.</param>
        <param name="dueTime">Czas oczekiwania przed wywołaniem przez <paramref name="callback" /> parametr metod. Określ ujemną liczbę milisekund (-1), aby zapobiec uruchamianiu czasomierza. Określ zero (0), aby natychmiast uruchomić czasomierz.</param>
        <param name="period">Przedział czasu między wywołaniami metod, do których odwołuje <paramref name="callback" />się. Określ ujemną liczbę (-1) milisekund, aby wyłączyć okresowe sygnalizowanie.</param>
        <summary>Inicjuje nowe wystąpienie <see langword="Timer" /> klasy, używając <see cref="T:System.TimeSpan" /> wartości do mierzenia interwałów czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametr jest wywoływany raz po `dueTime` upłynięciu, `period` a następnie za każdym razem, gdy upłynie interwał czasu.  
  
 Jeśli `dueTime` jest równa zero (0 `callback` ), jest wywoływana od razu. Jeśli `dueTime` wartość jest ujemna (-1) milisekund, `callback` nie jest wywoływana; czasomierz jest wyłączony, ale można go włączyć, wywołując <xref:System.Threading.Timer.Change%2A> metodę.  
  
 Ponieważ Klasa ma takie samo rozwiązanie jak zegar systemowy, który jest około 15 milisekund w systemach Windows 7 i Windows 8, delegat wykonuje `callback` się w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli <xref:System.Threading.Timer> `period`jest mniejsza niż rozdzielczość zegara systemowego. Jeśli `period` wartość jest równa zero (0) lub negatywna (-1 `dueTime` ) milisekund i `callback` jest dodatnia, jest wywoływana raz; okresowe zachowanie czasomierza jest wyłączone, <xref:System.Threading.Timer.Change%2A> ale można je ponownie włączyć przy użyciu metody.  
  
 Metoda określona dla `callback` powinna być współużytkowana, ponieważ jest wywoływana w <xref:System.Threading.ThreadPool> wątkach. Metodę można wykonać jednocześnie w dwóch wątkach puli wątków, jeśli interwał czasomierza jest krótszy niż czas wymagany do wykonania metody lub jeśli wszystkie wątki puli wątków są używane, a metoda została umieszczona wiele razy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć `TimerCallback` delegata i zainicjować nowe wystąpienie `Timer` klasy.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Liczba milisekund w <paramref name="dueTime" /> wartości lub <paramref name="period" /> jest <see cref="F:System.Threading.Timeout.Infinite" />ujemna, nierówna lub większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="callback" /></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">Delegat reprezentujący metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje, które mają być używane przez metodę wywołania zwrotnego <see langword="null" />lub.</param>
        <param name="dueTime">Czas oczekiwania przed <paramref name="callback" /> wywołaniem (w milisekundach). Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby zapobiec uruchamianiu czasomierza. Określ zero (0), aby natychmiast uruchomić czasomierz.</param>
        <param name="period">Przedział czasu między wywołaniami <paramref name="callback" />, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby wyłączyć okresowe sygnalizowanie.</param>
        <summary>Inicjuje nowe wystąpienie <see langword="Timer" /> klasy, używając 32-bitowych liczb całkowitych bez znaku do mierzenia interwałów czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametr jest wywoływany raz po `dueTime` upłynięciu, `period` a następnie za każdym razem, gdy upłynie interwał czasu.  
  
 Jeśli `dueTime` jest równa zero (0 `callback` ), jest wywoływana od razu. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> <xref:System.Threading.Timer.Change%2A> , niejestwywoływana;czasomierzjestwyłączony,alemożnagowłączyć,wywołującmetodę.`callback`  
  
 Ponieważ Klasa ma takie samo rozwiązanie jak zegar systemowy, który jest około 15 milisekund w systemach Windows 7 i Windows 8, delegat wykonuje `callback` się w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli <xref:System.Threading.Timer> `period`jest mniejsza niż rozdzielczość zegara systemowego. Jeśli `period` jest równa zero (0 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> ) `dueTime` lub i <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>nie `callback` jest, jest wywoływana raz; okresowe zachowanie czasomierza jest wyłączone, ale można je ponownie włączyć przy użyciu <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinna być współużytkowana, ponieważ jest wywoływana w <xref:System.Threading.ThreadPool> wątkach. Metodę można wykonać jednocześnie w dwóch wątkach puli wątków, jeśli interwał czasomierza jest krótszy niż czas wymagany do wykonania metody lub jeśli wszystkie wątki puli wątków są używane, a metoda została umieszczona wiele razy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr <paramref name="dueTime" /> <see cref="F:System.Threading.Timeout.Infinite" />lub <paramref name="period" /> jest wartością ujemną i nie jest równy.</exception>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="callback" /></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="ActiveCount">
      <MemberSignature Language="C#" Value="public static long ActiveCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 ActiveCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Timer.ActiveCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ActiveCount As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long ActiveCount { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveCount : int64" Usage="System.Threading.Timer.ActiveCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zmienia godzinę rozpoczęcia i interwał między wywołaniami metody dla czasomierza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">Czas oczekiwania przed wywołaniem metody wywołania zwrotnego określonej podczas <see cref="T:System.Threading.Timer" /> konstruowania, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby zapobiec ponownemu uruchamianiu czasomierza. Określ zero (0), aby natychmiast ponownie uruchomić czasomierz.</param>
        <param name="period">Przedział czasu między wywołaniami metody wywołania zwrotnego określonego podczas <see cref="T:System.Threading.Timer" /> konstruowania, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby wyłączyć okresowe sygnalizowanie.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołaniami metody dla czasomierza, używając 32-bitowych liczb całkowitych ze znakiem do mierzenia interwałów czasu.</summary>
        <returns><see langword="true" />Jeśli czasomierz został pomyślnie zaktualizowany; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana jednokrotnie `dueTime` , a następnie za każdym razem, gdy upłynie interwał czasu określony przez. `period`  
  
 Jeśli `dueTime` jest równa zero (0), metoda wywołania zwrotnego jest wywoływana natychmiast. Jeśli `dueTime` <xref:System.Threading.Timer.Change%2A> `dueTime`jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, metoda wywołania zwrotnego nigdy nie zostanie wywołana; czasomierz jest wyłączony, ale można go włączyć, wywołując i określając wartość dodatnią.  
  
 Jeśli `period` jest równa zero (0 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) lub `dueTime` , i <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>nie jest, metoda wywołania zwrotnego jest wywoływana raz; okresowe zachowanie czasomierza jest wyłączone, ale można je ponownie włączyć, <xref:System.Threading.Timer.Change%2A> wywołując i określając wartość dodatnią dla `period`.  
  
 Metodę można wywołać <xref:System.Threading.TimerCallback> z delegata. <xref:System.Threading.Timer.Change%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak uruchomić `Timer` a i, po ustawieniu liczby wywołań, zmienić jego okres.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr <paramref name="dueTime" /> <see cref="F:System.Threading.Timeout.Infinite" />lub <paramref name="period" /> jest wartością ujemną i nie jest równy.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">Czas oczekiwania przed wywołaniem metody wywołania zwrotnego określonej podczas <see cref="T:System.Threading.Timer" /> konstruowania, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby zapobiec ponownemu uruchamianiu czasomierza. Określ zero (0), aby natychmiast ponownie uruchomić czasomierz.</param>
        <param name="period">Przedział czasu między wywołaniami metody wywołania zwrotnego określonego podczas <see cref="T:System.Threading.Timer" /> konstruowania, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby wyłączyć okresowe sygnalizowanie.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołaniami metody dla czasomierza, używając 64-bitowych liczb całkowitych ze znakiem do mierzenia interwałów czasu.</summary>
        <returns><see langword="true" />Jeśli czasomierz został pomyślnie zaktualizowany; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana jednokrotnie `dueTime` , a następnie za każdym razem, gdy upłynie interwał czasu określony przez. `period`  
  
 Jeśli `dueTime` jest równa zero (0), metoda wywołania zwrotnego jest wywoływana natychmiast. Jeśli `dueTime` <xref:System.Threading.Timer.Change%2A> `dueTime`jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, metoda wywołania zwrotnego nigdy nie zostanie wywołana; czasomierz jest wyłączony, ale można go włączyć, wywołując i określając wartość dodatnią.  
  
 Jeśli `period` jest równa zero (0 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) lub `dueTime` , i <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>nie jest, metoda wywołania zwrotnego jest wywoływana raz; okresowe zachowanie czasomierza jest wyłączone, ale można je ponownie włączyć, <xref:System.Threading.Timer.Change%2A> wywołując i określając wartość dodatnią dla `period`.  
  
 Metodę można wywołać <xref:System.Threading.TimerCallback> z delegata. <xref:System.Threading.Timer.Change%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr <paramref name="dueTime" /> lub<paramref name="period" /> jest mniejszy niż-1.</exception>
        <exception cref="T:System.NotSupportedException">Parametr <paramref name="dueTime" /> lub<paramref name="period" /> jest większy niż 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">Reprezentuje czas opóźnienia przed wywołaniem metody wywołania zwrotnego określonej <see cref="T:System.Threading.Timer" /> podczas konstruowania. <see cref="T:System.TimeSpan" /> Określ ujemną liczbę milisekund (-1), aby zapobiec ponownemu uruchomieniu czasomierza. Określ zero (0), aby natychmiast ponownie uruchomić czasomierz.</param>
        <param name="period">Przedział czasu między wywołaniami metody wywołania zwrotnego określonego podczas <see cref="T:System.Threading.Timer" /> konstruowania. Określ ujemną liczbę (-1) milisekund, aby wyłączyć okresowe sygnalizowanie.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołaniami metody dla czasomierza przy użyciu <see cref="T:System.TimeSpan" /> wartości do mierzenia interwałów czasu.</summary>
        <returns><see langword="true" />Jeśli czasomierz został pomyślnie zaktualizowany; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana jednokrotnie `dueTime` , a następnie za każdym razem, gdy upłynie interwał czasu określony przez. `period`  
  
 Jeśli `dueTime` jest równa zero (0), metoda wywołania zwrotnego jest wywoływana natychmiast. Jeśli `dueTime` jest to ujemna wartość (-1) milisekund, metoda wywołania zwrotnego nigdy nie jest wywoływana; czasomierz jest wyłączony, ale można go włączyć, wywołując <xref:System.Threading.Timer.Change%2A> i `dueTime`podając wartość dodatnią.  
  
 Jeśli `period` wartość jest równa zero (0) lub ujemna (-1) milisekundy, a `dueTime` jest dodatnia, metoda wywołania zwrotnego jest wywoływana raz; okresowe zachowanie czasomierza jest wyłączone, ale można je ponownie <xref:System.Threading.Timer.Change%2A> włączyć przez wywołanie i określenie wartości większej niż zero dla `period`.  
  
 Metodę można wywołać <xref:System.Threading.TimerCallback> z delegata. <xref:System.Threading.Timer.Change%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak uruchomić `Timer` a i, po ustawieniu liczby wywołań, zmienić jego okres.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr <paramref name="dueTime" /> lub<paramref name="period" /> (w milisekundach) jest mniejszy niż-1.</exception>
        <exception cref="T:System.NotSupportedException">Parametr <paramref name="dueTime" /> lub<paramref name="period" /> w milisekundach jest większy niż 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">Czas oczekiwania przed wywołaniem metody wywołania zwrotnego określonej podczas <see cref="T:System.Threading.Timer" /> konstruowania, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby zapobiec ponownemu uruchamianiu czasomierza. Określ zero (0), aby natychmiast ponownie uruchomić czasomierz.</param>
        <param name="period">Przedział czasu między wywołaniami metody wywołania zwrotnego określonego podczas <see cref="T:System.Threading.Timer" /> konstruowania, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> , aby wyłączyć okresowe sygnalizowanie.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołaniami metody dla czasomierza, używając 32-bitowych liczb całkowitych bez znaku do mierzenia interwałów czasu.</summary>
        <returns><see langword="true" />Jeśli czasomierz został pomyślnie zaktualizowany; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana jednokrotnie `dueTime` , a następnie za każdym razem, gdy upłynie interwał czasu określony przez. `period`  
  
 Jeśli `dueTime` jest równa zero (0), metoda wywołania zwrotnego jest wywoływana natychmiast. Jeśli `dueTime` <xref:System.Threading.Timer.Change%2A> `dueTime`jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, metoda wywołania zwrotnego nigdy nie zostanie wywołana; czasomierz jest wyłączony, ale można go włączyć, wywołując i określając wartość dodatnią.  
  
 Jeśli `period` jest równa zero (0 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) lub `dueTime` , i <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>nie jest, metoda wywołania zwrotnego jest wywoływana raz; okresowe zachowanie czasomierza jest wyłączone, ale można je ponownie włączyć, <xref:System.Threading.Timer.Change%2A> wywołując i określając wartość dodatnią dla `period`.  
  
 Metodę można wywołać <xref:System.Threading.TimerCallback> z delegata. <xref:System.Threading.Timer.Change%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez bieżące wystąpienie programu <see cref="T:System.Threading.Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez bieżące wystąpienie programu <see cref="T:System.Threading.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie `Dispose` zezwala na przydzielenie zasobów używanych <xref:System.Threading.Timer> przez program do innych celów. Aby uzyskać więcej informacji `Dispose`na temat, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md).  
  
> [!NOTE]
>  Wywołania zwrotne mogą wystąpić po <xref:System.Threading.Timer.Dispose> wywołaniu metody przeciążenia, ponieważ czasomierze kolejki wywołania zwrotnego do wykonania przez wątki puli wątków. Można użyć przeciążenia metody <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> , aby poczekać, aż wszystkie wywołania zwrotne zostaną zakończone.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zwolnić zasoby przechowywane przez `Timer`.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="notifyObject">Do <see cref="T:System.Threading.WaitHandle" /> zasygnalizowania, <see langword="Timer" /> gdy został usunięty.</param>
        <summary>Zwalnia wszystkie zasoby używane przez bieżące wystąpienie programu <see cref="T:System.Threading.Timer" /> i sygnalizuje, kiedy czasomierz został usunięty.</summary>
        <returns><see langword="true" />Jeśli funkcja się powiedzie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie `Dispose` zezwala na przydzielenie zasobów używanych <xref:System.Threading.Timer> przez program do innych celów. Aby uzyskać więcej informacji `Dispose`na temat, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md).  
  
 Gdy ta metoda zostanie zakończona, sygnalizuje <xref:System.Threading.WaitHandle> określony `notifyObject` parametr. Użyj tego przeciążenia metody, <xref:System.Threading.Timer.Dispose%2A> Jeśli chcesz mieć możliwość blokowania, dopóki nie masz pewności, że czasomierz został usunięty. Czasomierz nie jest usuwany, dopóki wszystkie wywołania zwrotne znajdujące się w kolejce nie zostały ukończone.  
  
> [!NOTE]
>  Jeśli wywołanie zwrotne używa <xref:System.Threading.Timer.Change%2A> metody do `dueTime` ustawienia parametru na zero, może wystąpić <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> sytuacja wyścigu, gdy zostanie wywołane Przeciążenie metody: Jeśli czasomierz ustawi nowe wywołanie zwrotne przed <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> przeciążeniem metody wykryje, że żadne wywołania zwrotne nie znajdują się w kolejce, program <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> kontynuuje blokowanie; w przeciwnym razie czasomierz jest usuwany podczas umieszczania nowego wywołania zwrotnego i <xref:System.ObjectDisposedException> jest zgłaszany, gdy nowe wywołanie zwrotne wywołuje <xref:System.Threading.Timer.Change%2A> metodę.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="notifyObject" /></exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektowi podjęcie próby zwolnienia zasobów i wykonywanie innych operacji czyszczenia przed odinstalowaniem ich przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>