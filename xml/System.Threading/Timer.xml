<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f5514bf512db37c78e68399a108c5126414fd2d" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56369772" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia mechanizm wykonywanie metody na wątku z puli wątków w określonych odstępach czasu. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Threading.TimerCallback> delegata, aby określić metodę, która ma <xref:System.Threading.Timer> do wykonania. Podpis <xref:System.Threading.TimerCallback> delegat jest:  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 Delegat czasomierza określono czasomierza jest tworzony, gdy nie można jej zmienić. Metoda nie jest wykonywane na wątek, który utworzył czasomierza; wykonuje na <xref:System.Threading.ThreadPool> wątku dostarczane przez system.  
  
> [!TIP]
> .NET zawiera cztery klasy o nazwie `Timer`, każdy z której oferuje różne funkcje:  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>, która wyzwala zdarzenie i wykonuje kod w jednym lub więcej zdarzenia sink w regularnych odstępach czasu. Klasa jest przeznaczone do użytku jako na serwerze lub składnik usługi w środowisku wielowątkowym. go nie ma interfejsu użytkownika i nie jest widoczny w czasie wykonywania.
> - <xref:System.Threading.Timer?displayProperty=nameWithType>, który wykonuje metodę pojedynczego wywołania zwrotnego w wątku z puli wątków w regularnych odstępach czasu. Metoda wywołania zwrotnego jest określona, gdy czasomierz zostanie uruchomiony i nie można zmienić. Podobnie jak <xref:System.Timers.Timer?displayProperty=nameWithType> klasy, ta klasa jest przeznaczona do użytku jako składnik serwera lub usługi w środowisku wielowątkowym; nie ma interfejsu użytkownika, a nie jest widoczny w czasie wykonywania.
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (Tylko platforma .NET framework), składnik Windows Forms, który wyzwala zdarzenie i wykonuje kod w co najmniej jeden obiekty sink zdarzenia w regularnych odstępach czasu. Składnik nie ma interfejsu użytkownika i jest przeznaczony do użytku w środowisku apartamentem. wykonuje w wątku interfejsu użytkownika.
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (Tylko platforma .NET framework), składnik ASP.NET, który wykonuje ogłaszania zwrotnego asynchronicznego lub synchronicznego strony sieci web w regularnych odstępach czasu.
  
 Kiedy tworzysz czasomierz, możesz określić ilość czasu oczekiwania przed pierwszym wykonywanie metody (czas ukończenia), a czas do odczekania między kolejne wykonania (okres). <xref:System.Threading.Timer> Klasa ma taką samą rozdzielczość zegara systemowego. Oznacza to, że jeśli okresu jest mniejsza od rozdzielczości zegara systemowego <xref:System.Threading.TimerCallback> delegata będą wykonywane w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, czyli około 15 milisekund w systemach Windows 7 i Windows 8. Możesz zmienić termin przypada czasu i okres lub wyłącz czasomierz, za pomocą <xref:System.Threading.Timer.Change%2A> metody.  
  
> [!NOTE]
>  Tak długo, jak długo używasz <xref:System.Threading.Timer>, należy pozostawić odwołanie do niej. Podobnie jak w przypadku dowolny obiekt zarządzany, <xref:System.Threading.Timer> podlega wyrzucania elementów bezużytecznych, gdy nie odwołania do niego. Fakt, <xref:System.Threading.Timer> jest nadal aktywny nie zapobiega on są zbierane.  
  
 Gdy czasomierz nie jest już potrzebny, należy użyć <xref:System.Threading.Timer.Dispose%2A> metody, aby zwolnić zasoby utrzymywane przez czasomierz. Należy pamiętać, że wywołania zwrotne może wystąpić po <xref:System.Threading.Timer.Dispose> została wywołana metoda przeciążenia, ponieważ czasomierz kolejki wywołania zwrotne do wykonania przez wątków z puli wątków. Możesz użyć <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> przeciążenia metody, aby poczekać, aż wszystkie wywołania zwrotne została ukończona.  
  
 Metoda wywołania zwrotnego, wykonywane przez czasomierz powinna być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Wywołanie zwrotne można wykonać jednocześnie na dwóch wątków z puli wątków, jeśli interwału czasomierza jest krótszy niż czas wymagany do wykonania wywołania zwrotnego lub wszystkich wątków z puli wątków, które są używane, i wywołanie zwrotne znajduje się w kolejce wiele razy.  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> to proste, uproszczone czasomierza, korzysta z metody wywołania zwrotnego, która jest obsługiwana przez wątków z puli wątków. Nie zaleca do użytku z programem Windows Forms, ponieważ jego wywołania zwrotne nie występują w wątku interfejsu użytkownika. <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> jest lepszym rozwiązaniem do użytku z programem Windows Forms. Dla funkcji serwerowych czasomierza, należy rozważyć przy użyciu <xref:System.Timers.Timer?displayProperty=nameWithType>, która wywołuje zdarzenia i ma dodatkowe funkcje.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `StatusChecker` klasy, która obejmuje `CheckStatus` ma taki sam podpis metody jako <xref:System.Threading.TimerCallback> delegować. `state` Argument `CheckStatus` metodą jest <xref:System.Threading.AutoResetEvent> obiekt, który służy do synchronizowania wątku aplikacji i puli wątków wątek, który jest wykonywany delegata wywołania zwrotnego. `StatusChecker` Klasa zawiera także dwie zmienne stanu:  
  
 `invokeCount`  
 Wskazuje, ile razy zostało wywołane metody wywołania zwrotnego.  
  
 `maxCount`  
 Określa maksymalną liczbę przypadków, gdy powinna ona zostać wywołana metoda wywołania zwrotnego.  
  
 Wątek aplikacji tworzy się czasomierz, która oczekuje na sekundę, a następnie wykonuje `CheckStatus` metody wywołania zwrotnego co 250 milisekund. Wątek aplikacji blokuje wtedy dane do momentu <xref:System.Threading.AutoResetEvent> zasygnalizowania obiektu. Gdy `CheckStatus` wykonuje metodę wywołania zwrotnego `maxCount` razy, wywoływanych przez nią `AutoResetEvent.Set` metodę, aby ustawić stan <xref:System.Threading.AutoResetEvent> obiektu zasygnalizowane. Po raz pierwszy dzieje się tak, wywołań wątku aplikacji <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> metody, aby metoda wywołania zwrotnego jest teraz wykonywana co pół sekundy. Blokuje go ponownie do <xref:System.Threading.AutoResetEvent> zasygnalizowania obiektu. W takim przypadku czasomierza jest niszczony, przez wywołanie jego <xref:System.Threading.Timer.Dispose%2A> kończy się metody i aplikacji.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Zarządzana pula wątków</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegować reprezentujący metodę do wykonania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Timer" /> klasie z atrybutem przez nieograniczony czas i termin nieograniczony czas i przy użyciu nowo utworzonego <see cref="T:System.Threading.Timer" /> obiektu jako obiekt stanu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołania tego konstruktora, jeśli chcesz użyć <xref:System.Threading.Timer> sam obiekt jako obiekt stanu. Po utworzeniu czasomierza, użyj <xref:System.Threading.Timer.Change%2A> metodę, aby ustawić interwał i czas ukończenia.  
  
 Ten konstruktor określa termin nieskończony czas przed pierwszym wywołanie zwrotne i nieskończona interwału wywołań zwrotnych, aby zapobiec pierwszego wywołania zwrotnego przed <xref:System.Threading.Timer> obiekt jest przypisany do obiektu stanu.  
  
 Metoda określona dla `callback` powinien być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metoda może być wykonywane jednocześnie na dwóch wątków z puli wątków Jeśli interwału czasomierza jest mniejsza niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków, które są używane, i metoda znajduje się w kolejce wiele razy.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy nowy czasomierz, za pomocą czasomierza, sama jako obiekt stanu. <xref:System.Threading.Timer.Change%2A> Metoda jest używana do uruchomienia czasomierza. W przypadku wywołania zwrotnego czasomierza obiekt stanu umożliwia wyłączyć czasomierza.  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegować reprezentujący metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje używane przez metodę wywołania zwrotnego lub <see langword="null" />.</param>
        <param name="dueTime">Czas opóźnienia przed <paramref name="callback" /> jest wywoływana w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> uniemożliwia czasomierza. Określ zero (0) aby natychmiast uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań <paramref name="callback" />, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowanie okresowo.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> klasy przy użyciu całkowita 32-bitowych, aby określić interwał czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametru jest wywoływana jeden raz po `dueTime` upłynie, a następnie za każdym razem `period` upłynie interwał czasu.  
  
 Jeśli `dueTime` ma wartość zero (0), `callback` jest wywoływany bezpośrednio. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` nie jest wywoływany; czasomierza jest wyłączony, ale można włączyć ponownie, wywołując <xref:System.Threading.Timer.Change%2A> metody.  
  
 Ponieważ <xref:System.Threading.Timer> klasa ma taką samą rozdzielczość zegara systemowego, czyli około 15 milisekund w systemach Windows 7 i Windows 8, `callback` delegata jest wykonywana w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli `period`jest mniejsza od rozdzielczości zegara systemowego. Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> i `dueTime` nie <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` jest wywoływana raz, a okresowe zachowanie czasomierza jest wyłączona, ale można ją ponownie włączyć przy użyciu <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinien być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metoda może być wykonywane jednocześnie na dwóch wątków z puli wątków Jeśli interwału czasomierza jest mniejsza niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków, które są używane, i metoda znajduje się w kolejce wiele razy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób tworzenia `TimerCallback` delegować i inicjuje nowe wystąpienie klasy `Timer` klasy.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Lub <paramref name="period" /> parametr ma wartość ujemną i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> Parametr <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegować reprezentujący metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje używane przez metodę wywołania zwrotnego lub <see langword="null" />.</param>
        <param name="dueTime">Czas opóźnienia przed <paramref name="callback" /> jest wywoływana w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> uniemożliwia czasomierza. Określ zero (0) aby natychmiast uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań <paramref name="callback" />, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowanie okresowo.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> klasy przy użyciu liczb całkowitych ze znakiem 64-bitowego do mierzenia odstępach czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametru jest wywoływana jeden raz po `dueTime` upłynie, a następnie za każdym razem `period` upłynie interwał czasu.  
  
 Jeśli `dueTime` ma wartość zero (0), `callback` jest wywoływany bezpośrednio. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` nie jest wywoływany; czasomierza jest wyłączony, ale można włączyć ponownie, wywołując <xref:System.Threading.Timer.Change%2A> metody.  
  
 Ponieważ <xref:System.Threading.Timer> klasa ma taką samą rozdzielczość zegara systemowego, czyli około 15 milisekund w systemach Windows 7 i Windows 8, `callback` delegata jest wykonywana w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli `period`jest mniejsza od rozdzielczości zegara systemowego. Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> i `dueTime` nie <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` jest wywoływana raz, a okresowe zachowanie czasomierza jest wyłączona, ale można ją ponownie włączyć przy użyciu <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinien być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metoda może być wykonywane jednocześnie na dwóch wątków z puli wątków Jeśli interwału czasomierza jest mniejsza niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków, które są używane, i metoda znajduje się w kolejce wiele razy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Lub <paramref name="period" /> parametr ma wartość ujemną i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> Lub <paramref name="period" /> parametru jest większa niż 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">Delegat metody reprezentująca do wykonania.</param>
        <param name="state">Obiekt zawierający informacje używane przez metodę wywołania zwrotnego lub <see langword="null" />.</param>
        <param name="dueTime">Czas opóźnienia przed <paramref name="callback" /> parametru wywołuje jej metody. Określ ujemna (-1) do jednego milisekund uniemożliwia uruchomienie czasomierza. Określ zero (0) aby natychmiast uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołania metody odwołuje się <paramref name="callback" />. Określ ujemna jeden (-1) milisekund, wyłącz sygnalizowanie okresowo.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> klasy przy użyciu <see cref="T:System.TimeSpan" /> wartości do mierzenia odstępach czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametru jest wywoływana jeden raz po `dueTime` upłynie, a następnie za każdym razem `period` upłynie interwał czasu.  
  
 Jeśli `dueTime` ma wartość zero (0), `callback` jest wywoływany bezpośrednio. Jeśli `dueTime` jest ujemna (-1) jeden milisekund, `callback` nie jest wywoływany; czasomierza jest wyłączony, ale można włączyć ponownie, wywołując <xref:System.Threading.Timer.Change%2A> metody.  
  
 Ponieważ <xref:System.Threading.Timer> klasa ma taką samą rozdzielczość zegara systemowego, czyli około 15 milisekund w systemach Windows 7 i Windows 8, `callback` delegata jest wykonywana w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli `period`jest mniejsza od rozdzielczości zegara systemowego. Jeśli `period` jest 0 (zero) lub ujemna (-1) jeden milisekund i `dueTime` jest dodatnia, `callback` jest wywoływana raz, a okresowe zachowanie czasomierza jest wyłączona, ale można ją ponownie włączyć przy użyciu <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinien być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metoda może być wykonywane jednocześnie na dwóch wątków z puli wątków Jeśli interwału czasomierza jest mniejsza niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków, które są używane, i metoda znajduje się w kolejce wiele razy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób tworzenia `TimerCallback` delegować i inicjuje nowe wystąpienie klasy `Timer` klasy.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Liczba milisekund w wartości <paramref name="dueTime" /> lub <paramref name="period" /> jest ujemny i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />, lub jest większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> Parametr <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">Delegat metody reprezentująca do wykonania.</param>
        <param name="state">Obiekt zawierający informacje używane przez metodę wywołania zwrotnego lub <see langword="null" />.</param>
        <param name="dueTime">Czas opóźnienia przed <paramref name="callback" /> jest wywoływana w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> uniemożliwia czasomierza. Określ zero (0) aby natychmiast uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań <paramref name="callback" />, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowanie okresowo.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> klasy przy użyciu liczb całkowitych bez znaku 32-bitowego do mierzenia odstępach czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametru jest wywoływana jeden raz po `dueTime` upłynie, a następnie za każdym razem `period` upłynie interwał czasu.  
  
 Jeśli `dueTime` ma wartość zero (0), `callback` jest wywoływany bezpośrednio. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` nie jest wywoływany; czasomierza jest wyłączony, ale można włączyć ponownie, wywołując <xref:System.Threading.Timer.Change%2A> metody.  
  
 Ponieważ <xref:System.Threading.Timer> klasa ma taką samą rozdzielczość zegara systemowego, czyli około 15 milisekund w systemach Windows 7 i Windows 8, `callback` delegata jest wykonywana w odstępach czasu zdefiniowanych przez rozdzielczość zegara systemowego, jeśli `period`jest mniejsza od rozdzielczości zegara systemowego. Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> i `dueTime` nie <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` jest wywoływana raz, a okresowe zachowanie czasomierza jest wyłączona, ale można ją ponownie włączyć przy użyciu <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinien być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metoda może być wykonywane jednocześnie na dwóch wątków z puli wątków Jeśli interwału czasomierza jest mniejsza niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków, które są używane, i metoda znajduje się w kolejce wiele razy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Lub <paramref name="period" /> parametr ma wartość ujemną i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> Parametr <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierz.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">Ilość czasu, opóźnienie przed wywołaniem metody wywołania zwrotnego jest określony, gdy <see cref="T:System.Threading.Timer" /> został zbudowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> aby uniemożliwić ponowne uruchomienie czasomierza. Określ zero (0) aby natychmiast ponownie uruchomić czasomierza.</param>
        <param name="period">Określony przedział czasu między wywołania metody wywołania zwrotnego, gdy <see cref="T:System.Threading.Timer" /> został zbudowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowanie okresowo.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierz, przy użyciu 32-bitowe podpisane liczby całkowite do mierzenia odstępach czasu.</summary>
        <returns><see langword="true" /> Jeśli Czasomierz został pomyślnie zaktualizowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana jeden raz po `dueTime` upłynie, a następnie każda godzina przedział czasu określony parametrem `period` upływa.  
  
 Jeśli `dueTime` wynosi zero (0), metody wywołania zwrotnego jest wywoływany bezpośrednio. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, nigdy nie zostanie wywołana metoda wywołania zwrotnego; czasomierza jest wyłączone, ale można ponownie włączona, wywołując <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnia `dueTime`.  
  
 Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, i `dueTime` nie <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, metody wywołania zwrotnego jest wywoływana jeden raz; okresowe zachowanie czasomierza jest wyłączone, ale można ponownie włączona, wywołując <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnia `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Metoda może być wywoływana z <xref:System.Threading.TimerCallback> delegować.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób uruchamiania `Timer` i po określona liczba wywołań, zmienić jego okresu.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Lub <paramref name="period" /> parametr ma wartość ujemną i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime">Ilość czasu, opóźnienie przed wywołaniem metody wywołania zwrotnego jest określony, gdy <see cref="T:System.Threading.Timer" /> został zbudowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> aby uniemożliwić ponowne uruchomienie czasomierza. Określ zero (0) aby natychmiast ponownie uruchomić czasomierza.</param>
        <param name="period">Określony przedział czasu między wywołania metody wywołania zwrotnego, gdy <see cref="T:System.Threading.Timer" /> został zbudowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowanie okresowo.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierz, przy użyciu liczb całkowitych ze znakiem 64-bitowego do mierzenia odstępach czasu.</summary>
        <returns><see langword="true" /> Jeśli Czasomierz został pomyślnie zaktualizowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana jeden raz po `dueTime` upłynie, a następnie każda godzina przedział czasu określony parametrem `period` upływa.  
  
 Jeśli `dueTime` wynosi zero (0), metody wywołania zwrotnego jest wywoływany bezpośrednio. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, nigdy nie zostanie wywołana metoda wywołania zwrotnego; czasomierza jest wyłączone, ale można ponownie włączona, wywołując <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnia `dueTime`.  
  
 Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, i `dueTime` nie <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, metody wywołania zwrotnego jest wywoływana jeden raz; okresowe zachowanie czasomierza jest wyłączone, ale można ponownie włączona, wywołując <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnia `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Metoda może być wywoływana z <xref:System.Threading.TimerCallback> delegować.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Lub <paramref name="period" /> parametr jest mniejsza niż -1.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> Lub <paramref name="period" /> parametru jest większa niż 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">A <see cref="T:System.TimeSpan" /> reprezentujący ilość czasu, opóźnienie przed wywołaniem metody wywołania zwrotnego jest określony, gdy <see cref="T:System.Threading.Timer" /> został zbudowany. Określ ujemna jeden (-1) milisekund i uniemożliwia ponowne uruchomienie czasomierza. Określ zero (0) aby natychmiast ponownie uruchomić czasomierza.</param>
        <param name="period">Określony przedział czasu między wywołania metody wywołania zwrotnego, gdy <see cref="T:System.Threading.Timer" /> został zbudowany. Określ ujemna jeden (-1) milisekund, wyłącz sygnalizowanie okresowo.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierz przy użyciu <see cref="T:System.TimeSpan" /> wartości do mierzenia odstępach czasu.</summary>
        <returns><see langword="true" /> Jeśli Czasomierz został pomyślnie zaktualizowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana jeden raz po `dueTime` upłynie, a następnie każda godzina przedział czasu określony parametrem `period` upływa.  
  
 Jeśli `dueTime` wynosi zero (0), metody wywołania zwrotnego jest wywoływany bezpośrednio. Jeśli `dueTime` jest ujemna (-1) jeden milisekund, nigdy nie zostanie wywołana metoda wywołania zwrotnego; czasomierza jest wyłączone, ale można ponownie włączona, wywołując <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnia `dueTime`.  
  
 Jeśli `period` jest 0 (zero) lub ujemna (-1) jeden milisekund, a `dueTime` jest dodatnia, metody wywołania zwrotnego jest wywoływana jeden raz; okresowe zachowanie czasomierza jest wyłączony, ale można włączyć ponownie, wywołując <xref:System.Threading.Timer.Change%2A> i określając wartość większą niż zero dla `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Metoda może być wywoływana z <xref:System.Threading.TimerCallback> delegować.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób uruchamiania `Timer` i po określona liczba wywołań, zmienić jego okresu.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime" /> Lub <paramref name="period" /> parametr, w milisekundach, jest mniejsza niż -1.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="dueTime" /> Lub <paramref name="period" /> parametru, w milisekundach, jest większa niż 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime">Ilość czasu, opóźnienie przed wywołaniem metody wywołania zwrotnego jest określony, gdy <see cref="T:System.Threading.Timer" /> został zbudowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> aby uniemożliwić ponowne uruchomienie czasomierza. Określ zero (0) aby natychmiast ponownie uruchomić czasomierza.</param>
        <param name="period">Określony przedział czasu między wywołania metody wywołania zwrotnego, gdy <see cref="T:System.Threading.Timer" /> został zbudowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowanie okresowo.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierz, przy użyciu liczb całkowitych bez znaku 32-bitowego do mierzenia odstępach czasu.</summary>
        <returns><see langword="true" /> Jeśli Czasomierz został pomyślnie zaktualizowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana jeden raz po `dueTime` upłynie, a następnie każda godzina przedział czasu określony parametrem `period` upływa.  
  
 Jeśli `dueTime` wynosi zero (0), metody wywołania zwrotnego jest wywoływany bezpośrednio. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, nigdy nie zostanie wywołana metoda wywołania zwrotnego; czasomierza jest wyłączone, ale można ponownie włączona, wywołując <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnia `dueTime`.  
  
 Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, i `dueTime` nie <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, metody wywołania zwrotnego jest wywoływana jeden raz; okresowe zachowanie czasomierza jest wyłączone, ale można ponownie włączona, wywołując <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnia `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Metoda może być wywoływana z <xref:System.Threading.TimerCallback> delegować.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Threading.Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Threading.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie `Dispose` umożliwia zasoby używane przez <xref:System.Threading.Timer> zostają przeniesione do innych celów. Aby uzyskać więcej informacji na temat `Dispose`, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  
  
> [!NOTE]
>  Wywołania zwrotne może wystąpić po <xref:System.Threading.Timer.Dispose> została wywołana metoda przeciążenia, ponieważ czasomierz kolejki wywołania zwrotne do wykonania przez wątków z puli wątków. Możesz użyć <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> przeciążenia metody, aby poczekać, aż wszystkie wywołania zwrotne została ukończona.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje jak bezpłatne zasoby utrzymywane przez `Timer`.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><see cref="T:System.Threading.WaitHandle" /> Ma być zasygnalizowany po <see langword="Timer" /> został zlikwidowany.</param>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Threading.Timer" /> i sygnałów, gdy Czasomierz został zlikwidowany.</summary>
        <returns><see langword="true" /> Jeśli funkcja się powiedzie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie `Dispose` umożliwia zasoby używane przez <xref:System.Threading.Timer> zostają przeniesione do innych celów. Aby uzyskać więcej informacji na temat `Dispose`, zobacz [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  
  
 Po tej metody zakończeniu jego sygnalizuje <xref:System.Threading.WaitHandle> określony przez `notifyObject` parametru. Użyj tego przeciążenia <xref:System.Threading.Timer.Dispose%2A> metody, jeśli chcesz można było blokowane, aż masz pewność, że Czasomierz został usunięty. Czasomierz nie jest usuwane, aż wszystkie wywołania zwrotne aktualnie w kolejce została ukończona.  
  
> [!NOTE]
>  Jeśli wywołanie zwrotne używa <xref:System.Threading.Timer.Change%2A> metodę, aby ustawić `dueTime` parametru na wartość zero, może wystąpić sytuacja wyścigu podczas <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> nosi nazwę przeciążenie metody: Jeśli czasomierza kolejki zwrotnym nowe zanim <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> przeciążenie metody wykrywa, że ma żadnych wywołań zwrotnych w kolejce, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> w dalszym ciągu Blokuj; w przeciwnym razie usunięciu czasomierz, gdy nowe wywołanie zwrotne są umieszczane w kolejce i las usługi <xref:System.ObjectDisposedException> jest generowany, gdy nowe wywołania zwrotnego <xref:System.Threading.Timer.Change%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="notifyObject" /> Parametr <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Czasomierze</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="member this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>