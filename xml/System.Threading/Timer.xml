<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="67fe19429800288028bf5585c9bd4f03134790db" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30579781" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia mechanizm wykonywanie metody w wątku puli wątków w określonych odstępach czasu. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Threading.TimerCallback> pełnomocnika, aby określić metodę, która ma <xref:System.Threading.Timer> do wykonania. Podpis <xref:System.Threading.TimerCallback> delegat jest:  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 Delegat czasomierza jest określona, gdy czasomierz jest tworzony i nie można zmienić. Metoda nie wykonuj na wątek, który utworzył czasomierza; dla wykonuje <xref:System.Threading.ThreadPool> wątku dostarczane przez system.  
  
> [!TIP]
> .NET zawiera cztery klasy o nazwie `Timer`, każdy z którym znajdują się różne funkcje:  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>, które wyzwala zdarzenie i wykonuje kod w jednym lub więcej zdarzeń wychwytywanie w regularnych odstępach czasu. Klasa jest przeznaczony do użycia jako oparte na serwerze lub składnik usługi w środowisku wielowątkowym; nie ma interfejsu użytkownika, a nie jest widoczny w czasie wykonywania.
> - <xref:System.Threading.Timer?displayProperty=nameWithType>, która wykonuje metodę jednego wywołania zwrotnego w wątku puli wątków w regularnych odstępach czasu. Metody wywołania zwrotnego jest zdefiniowany, gdy zegar zostanie uruchomiony i nie można zmienić. Podobnie jak <xref:System.Timers.Timer?displayProperty=nameWithType> klasy, ta klasa jest przeznaczona do użycia jako składnik serwera lub usługi w środowisku wielowątkowym; nie ma interfejsu użytkownika, a nie jest widoczny w czasie wykonywania.
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (Tylko platforma .NET), składnik formularzy systemu Windows, który wyzwala zdarzenie i wykonuje kod w co najmniej jeden wychwytywanie zdarzeń w regularnych odstępach czasu. Składnik nie ma interfejsu użytkownika i jest przeznaczony do użytku w środowisku jednowątkowe; jest wykonywana w wątku interfejsu użytkownika.
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (Tylko platforma .NET), składnik ASP.NET, który wykonuje asynchroniczne i synchroniczne strony sieci web ogłaszania zwrotnego w regularnych odstępach czasu.
  
 Podczas tworzenia czasomierza, możesz określić ilość czasu oczekiwania przed pierwszym wykonywanie metody (czas ukończenia), a ilość czasu między podczas kolejnych wykonań kodu (okres). <xref:System.Threading.Timer> Klasa ma taką samą rozdzielczość zegara systemowego. Oznacza to, że jeśli okres jest mniejsza niż rozdzielczość zegara systemowego <xref:System.Threading.TimerCallback> delegata będą wykonywane w odstępach czasu zdefiniowanych przez rozwiązanie zegar systemowy, czyli około 15 milisekund w systemach Windows 7 i Windows 8. Termin można zmienić czas i okres lub wyłącz czasomierz, za pomocą <xref:System.Threading.Timer.Change%2A> metody.  
  
> [!NOTE]
>  Tak długo, jak używasz <xref:System.Threading.Timer>, należy pozostawić odwołanie do niej. Podobnie jak w przypadku dowolny obiekt zarządzany, <xref:System.Threading.Timer> podlega wyrzucanie elementów bezużytecznych, gdy nie odwołania do niego. Fakt który <xref:System.Threading.Timer> jest nadal aktywny nie uniemożliwia jej są zbierane.  
  
 Czasomierz jest już potrzebne, użyj <xref:System.Threading.Timer.Dispose%2A> metody, aby zwolnić zasoby posiadanych przez czasomierz. Należy pamiętać, że wywołań zwrotnych, może wystąpić po <xref:System.Threading.Timer.Dispose> przeciążenie metody została wywołana, ponieważ czasomierza kolejki wywołań zwrotnych do wykonania przez wątków z puli wątków. Można użyć <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> przeciążenie metody poczekać, aż wszystkie wywołania zwrotne została ukończona.  
  
 Metoda wywołania zwrotnego wykonywane przez czasomierz powinna być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Wywołanie zwrotne mogą być wykonywane jednocześnie na dwóch wątków z puli wątków, jeśli dla interwału czasomierza jest krótszy niż czas wymagany do wykonania wywołania zwrotnego lub wszystkich wątków z puli wątków są używane i wywołanie zwrotne znajduje się w kolejce wiele razy.  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> jest proste, lekkie czasomierza używa metody wywołania zwrotnego i obsługiwanej przez wątków z puli wątków. Nie zaleca używane w formularzach systemu Windows, ponieważ jego wywołania zwrotne nie są wykonywane w wątku interfejsu użytkownika. <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> jest lepszym rozwiązaniem używane w formularzach systemu Windows. Dla funkcji czasomierza na serwerze, należy rozważyć przy użyciu <xref:System.Timers.Timer?displayProperty=nameWithType>, która informuje o zdarzeniach i ma dodatkowe funkcje.  
  
   
  
## Examples  
 W poniższym przykładzie zdefiniowano `StatusChecker` klasa, która zawiera `CheckStatus` metody, której sygnatura jest taka sama jak <xref:System.Threading.TimerCallback> delegowanie. `state` Argument `CheckStatus` jest metoda <xref:System.Threading.AutoResetEvent> obiekt, który służy do synchronizowania wątku aplikacji i wątku puli wątków, który wykonuje delegata wywołania zwrotnego. `StatusChecker` Klasa zawiera również dwie zmienne stanu:  
  
 `invokeCount`  
 Wskazuje, ile razy została wywołana metoda wywołania zwrotnego.  
  
 `maxCount`  
 Określa maksymalną liczbę razy, który można wywołać metody wywołania zwrotnego.  
  
 Wątek aplikacji tworzy czasomierz, który oczekuje jednej sekundy, a następnie wykonuje `CheckStatus` metody wywołania zwrotnego co 250 milisekund. Wątek aplikacji następnie blokuje do <xref:System.Threading.AutoResetEvent> zostanie zasygnalizowane obiektu. Gdy `CheckStatus` wykonuje wywołanie zwrotne metody `maxCount` razy, wywołuje `AutoResetEvent.Set` metodę, aby ustawić stan <xref:System.Threading.AutoResetEvent> obiektu sygnalizowane. Po raz pierwszy dzieje się tak, wywołania wątku aplikacji <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> metody, aby metody wywołania zwrotnego teraz wykonuje co pół sekundy. Blokuje ponownie do czasu <xref:System.Threading.AutoResetEvent> zostanie zasygnalizowane obiektu. W takim przypadku czasomierza zostanie zniszczony przez wywołanie jego <xref:System.Threading.Timer.Dispose%2A> kończy — metoda i aplikacji.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ten typ jest bezpieczny wątkowo.</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegata reprezentującego metodę do wykonania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Threading.Timer" /> z przez nieograniczony czas i termin nieskończone czasu, przy użyciu nowo utworzony <see cref="T:System.Threading.Timer" /> obiektu jako obiektu stanu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tego konstruktora, jeśli chcesz użyć <xref:System.Threading.Timer> sam obiekt jako obiekt stanu. Po utworzeniu czasomierza, użyj <xref:System.Threading.Timer.Change%2A> metodę, aby ustawić interwał i czas ukończenia.  
  
 Ten konstruktor określa nieskończone termin czasie przed pierwszym wywołania zwrotnego i nieskończone interwał między wywołaniami zwrotnymi, aby zapobiec pierwsze wywołanie zwrotne przed <xref:System.Threading.Timer> obiekt jest przypisany do obiektu stanu.  
  
 Metoda określona dla `callback` powinna być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metody mogą być wykonywane jednocześnie na dwóch wątków z puli wątków dla interwału czasomierza jest krótszy niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków są używane, jeśli metoda znajduje się w kolejce wiele razy.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy nowy czasomierz, za pomocą czasomierza się jako obiekt stanu. <xref:System.Threading.Timer.Change%2A> Metody są używane do uruchamiania czasomierza. W przypadku wywołanie zwrotne czasomierza obiekt stanu służy do wyłącz czasomierz.  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegata reprezentującego metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje mają być używane przez metodę wywołania zwrotnego lub <see langword="null" />.</param>
        <param name="dueTime">Czas opóźnienia przed <c>wywołania zwrotnego</c> jest wywoływana w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> uniemożliwia uruchomienie czasomierza. Określ zero (0), aby natychmiast uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań <c>wywołania zwrotnego</c>, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowania okresowe.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> przy użyciu całkowita 32-bitowy, aby określić interwał czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametru jest wywoływana raz po `dueTime` upłynie, a następnie każdorazowo `period` upłynie interwał czasu.  
  
 Jeśli `dueTime` wynosi zero (0), `callback` jest wywoływana natychmiast. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` nie jest wywoływany; czasomierz jest wyłączona, ale można włączyć ponownie przez wywołanie metody <xref:System.Threading.Timer.Change%2A> metody.  
  
 Ponieważ <xref:System.Threading.Timer> klasa ma taką samą rozdzielczość zegar systemowy, czyli około 15 milisekund w systemach Windows 7 i Windows 8, `callback` wykonuje delegata w odstępach czasu zdefiniowanych przez rozwiązanie zegar systemowy, jeśli `period`jest mniejsza niż rozdzielczość zegara systemowego. Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> i `dueTime` nie jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` jest wywoływana raz; okresowe zachowanie czasomierz jest wyłączona, ale można ją ponownie włączyć za pomocą <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinna być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metody mogą być wykonywane jednocześnie na dwóch wątków z puli wątków dla interwału czasomierza jest krótszy niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków są używane, jeśli metoda znajduje się w kolejce wiele razy.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono sposób tworzenia `TimerCallback` delegować i zainicjować nowe wystąpienie klasy `Timer` klasy.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> Lub <paramref name="period" /> parametr jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> Parametr jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> delegata reprezentującego metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje mają być używane przez metodę wywołania zwrotnego lub <see langword="null" />.</param>
        <param name="dueTime">Czas opóźnienia przed <c>wywołania zwrotnego</c> jest wywoływana w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> uniemożliwia uruchomienie czasomierza. Określ zero (0), aby natychmiast uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań <c>wywołania zwrotnego</c>, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowania okresowe.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> przy użyciu 64-bitowych liczb całkowitych ze znakiem do mierzenia odstępach czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametru jest wywoływana raz po `dueTime` upłynie, a następnie każdorazowo `period` upłynie interwał czasu.  
  
 Jeśli `dueTime` wynosi zero (0), `callback` jest wywoływana natychmiast. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` nie jest wywoływany; czasomierz jest wyłączona, ale można włączyć ponownie przez wywołanie metody <xref:System.Threading.Timer.Change%2A> metody.  
  
 Ponieważ <xref:System.Threading.Timer> klasa ma taką samą rozdzielczość zegar systemowy, czyli około 15 milisekund w systemach Windows 7 i Windows 8, `callback` wykonuje delegata w odstępach czasu zdefiniowanych przez rozwiązanie zegar systemowy, jeśli `period`jest mniejsza niż rozdzielczość zegara systemowego. Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> i `dueTime` nie jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` jest wywoływana raz; okresowe zachowanie czasomierz jest wyłączona, ale można ją ponownie włączyć za pomocą <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinna być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metody mogą być wykonywane jednocześnie na dwóch wątków z puli wątków dla interwału czasomierza jest krótszy niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków są używane, jeśli metoda znajduje się w kolejce wiele razy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> Lub <paramref name="period" /> parametr jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> Lub <paramref name="period" /> parametru jest większa niż 4294967294.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">Delegat reprezentujący metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje mają być używane przez metodę wywołania zwrotnego lub <see langword="null" />.</param>
        <param name="dueTime">Czas opóźnienia przed <c>wywołania zwrotnego</c> parametru wywołuje metody. Określ ujemną (-1) MS, aby uniemożliwić uruchomienie czasomierza. Określ zero (0), aby natychmiast uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań metody odwołuje się <c>wywołania zwrotnego</c>. Określ ujemną (-1) MS, aby wyłączyć sygnalizowania okresowe.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> przy użyciu <see cref="T:System.TimeSpan" /> wartości do mierzenia odstępach czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametru jest wywoływana raz po `dueTime` upłynie, a następnie każdorazowo `period` upłynie interwał czasu.  
  
 Jeśli `dueTime` wynosi zero (0), `callback` jest wywoływana natychmiast. Jeśli `dueTime` ujemną (-1) milisekund, `callback` nie jest wywoływany; czasomierz jest wyłączona, ale można włączyć ponownie przez wywołanie metody <xref:System.Threading.Timer.Change%2A> metody.  
  
 Ponieważ <xref:System.Threading.Timer> klasa ma taką samą rozdzielczość zegar systemowy, czyli około 15 milisekund w systemach Windows 7 i Windows 8, `callback` wykonuje delegata w odstępach czasu zdefiniowanych przez rozwiązanie zegar systemowy, jeśli `period`jest mniejsza niż rozdzielczość zegara systemowego. Jeśli `period` jest 0 (zero) lub ujemną (-1) w milisekundach i `dueTime` jest dodatnia, `callback` jest wywoływana raz; okresowe zachowanie czasomierz jest wyłączona, ale można ją ponownie włączyć za pomocą <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinna być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metody mogą być wykonywane jednocześnie na dwóch wątków z puli wątków dla interwału czasomierza jest krótszy niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków są używane, jeśli metoda znajduje się w kolejce wiele razy.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono sposób tworzenia `TimerCallback` delegować i zainicjować nowe wystąpienie klasy `Timer` klasy.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Liczba milisekund wartości <paramref name="dueTime" /> lub <paramref name="period" /> jest ujemny i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />, albo jest większa niż <see cref="F:System.Int32.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> Parametr jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">Delegat reprezentujący metodę do wykonania.</param>
        <param name="state">Obiekt zawierający informacje mają być używane przez metodę wywołania zwrotnego lub <see langword="null" />.</param>
        <param name="dueTime">Czas opóźnienia przed <c>wywołania zwrotnego</c> jest wywoływana w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> uniemożliwia uruchomienie czasomierza. Określ zero (0), aby natychmiast uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań <c>wywołania zwrotnego</c>, w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowania okresowe.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="Timer" /> przy użyciu 32-bitowych liczb całkowitych bez znaku do mierzenia odstępach czasu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Delegat określony przez `callback` parametru jest wywoływana raz po `dueTime` upłynie, a następnie każdorazowo `period` upłynie interwał czasu.  
  
 Jeśli `dueTime` wynosi zero (0), `callback` jest wywoływana natychmiast. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` nie jest wywoływany; czasomierz jest wyłączona, ale można włączyć ponownie przez wywołanie metody <xref:System.Threading.Timer.Change%2A> metody.  
  
 Ponieważ <xref:System.Threading.Timer> klasa ma taką samą rozdzielczość zegar systemowy, czyli około 15 milisekund w systemach Windows 7 i Windows 8, `callback` wykonuje delegata w odstępach czasu zdefiniowanych przez rozwiązanie zegar systemowy, jeśli `period`jest mniejsza niż rozdzielczość zegara systemowego. Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> i `dueTime` nie jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` jest wywoływana raz; okresowe zachowanie czasomierz jest wyłączona, ale można ją ponownie włączyć za pomocą <xref:System.Threading.Timer.Change%2A> metody.  
  
 Metoda określona dla `callback` powinna być współużytkowane, ponieważ jest ona wywoływana na <xref:System.Threading.ThreadPool> wątków. Metody mogą być wykonywane jednocześnie na dwóch wątków z puli wątków dla interwału czasomierza jest krótszy niż czas wymagany do wykonania metody lub wszystkich wątków z puli wątków są używane, jeśli metoda znajduje się w kolejce wiele razy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> Lub <paramref name="period" /> parametr jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> Parametr jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">Czas opóźnienia przed wywołaniem metody wywołania zwrotnego kiedy <see cref="T:System.Threading.Timer" /> został skonstruowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> aby zapobiec ponownemu uruchomieniu przez czasomierz. Określ zero (0) natychmiast ponownie uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań metody wywołania zwrotnego określić, kiedy <see cref="T:System.Threading.Timer" /> został skonstruowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowania okresowe.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierza, przy użyciu 32-bitowych liczb całkowitych ze znakiem do mierzenia odstępach czasu.</summary>
        <returns>
          <see langword="true" /> Jeśli zegar został pomyślnie zaktualizowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana raz po `dueTime` upłynie, a następnie każdy czas przedział czasu określony przez `period` upływa.  
  
 Jeśli `dueTime` wynosi zero (0), metody wywołania zwrotnego jest wywoływana natychmiast. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, nigdy nie zostanie wywołana metoda wywołania zwrotnego; czasomierz jest wyłączona, ale można włączyć ponownie za wywoływanie <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnią dla `dueTime`.  
  
 Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, i `dueTime` nie jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, po wywołaniu metody wywołania zwrotnego; okresowe zachowanie czasomierz jest wyłączona, ale można włączyć ponownie za wywoływanie <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnią dla `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Metodę można wywołać z <xref:System.Threading.TimerCallback> delegowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób uruchamiania `Timer` i po zestaw liczby wywołań, zmień jej okresu.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> Lub <paramref name="period" /> parametr jest ujemna i nie jest równa <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime">Czas opóźnienia przed wywołaniem metody wywołania zwrotnego kiedy <see cref="T:System.Threading.Timer" /> został skonstruowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> aby zapobiec ponownemu uruchomieniu przez czasomierz. Określ zero (0) natychmiast ponownie uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań metody wywołania zwrotnego określić, kiedy <see cref="T:System.Threading.Timer" /> został skonstruowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowania okresowe.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierza, przy użyciu 64-bitowych liczb całkowitych ze znakiem do mierzenia odstępach czasu.</summary>
        <returns>
          <see langword="true" /> Jeśli zegar został pomyślnie zaktualizowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana raz po `dueTime` upłynie, a następnie każdy czas przedział czasu określony przez `period` upływa.  
  
 Jeśli `dueTime` wynosi zero (0), metody wywołania zwrotnego jest wywoływana natychmiast. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, nigdy nie zostanie wywołana metoda wywołania zwrotnego; czasomierz jest wyłączona, ale można włączyć ponownie za wywoływanie <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnią dla `dueTime`.  
  
 Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, i `dueTime` nie jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, po wywołaniu metody wywołania zwrotnego; okresowe zachowanie czasomierz jest wyłączona, ale można włączyć ponownie za wywoływanie <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnią dla `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Metodę można wywołać z <xref:System.Threading.TimerCallback> delegowanie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> Lub <paramref name="period" /> parametr jest mniejsza niż -1.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> Lub <paramref name="period" /> parametru jest większa niż 4294967294.</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">A <see cref="T:System.TimeSpan" /> reprezentujący ilość czasu opóźnienia przed wywołaniem metody wywołania zwrotnego określony podczas <see cref="T:System.Threading.Timer" /> został skonstruowany. Określ ujemną (-1) MS, aby zapobiec ponownemu uruchomieniu przez czasomierz. Określ zero (0) natychmiast ponownie uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań metody wywołania zwrotnego określić, kiedy <see cref="T:System.Threading.Timer" /> został skonstruowany. Określ ujemną (-1) MS, aby wyłączyć sygnalizowania okresowe.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierza, za pomocą <see cref="T:System.TimeSpan" /> wartości do mierzenia odstępach czasu.</summary>
        <returns>
          <see langword="true" /> Jeśli zegar został pomyślnie zaktualizowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana raz po `dueTime` upłynie, a następnie każdy czas przedział czasu określony przez `period` upływa.  
  
 Jeśli `dueTime` wynosi zero (0), metody wywołania zwrotnego jest wywoływana natychmiast. Jeśli `dueTime` ujemną (-1) milisekund, nigdy nie zostanie wywołana metoda wywołania zwrotnego; czasomierz jest wyłączona, ale można włączyć ponownie za wywoływanie <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnią dla `dueTime`.  
  
 Jeśli `period` jest 0 (zero) lub ujemną (-1) w milisekundach, i `dueTime` jest dodatnia, po wywołaniu metody wywołania zwrotnego; okresowe zachowanie czasomierz jest wyłączona, ale można włączyć ponownie przez wywołanie metody <xref:System.Threading.Timer.Change%2A> i określając wartość większą niż zero dla `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Metodę można wywołać z <xref:System.Threading.TimerCallback> delegowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób uruchamiania `Timer` i po zestaw liczby wywołań, zmień jej okresu.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> Lub <paramref name="period" /> parametru w milisekundach jest mniejsza niż -1.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> Lub <paramref name="period" /> parametru w milisekundach jest większe niż 4294967294.</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime">Czas opóźnienia przed wywołaniem metody wywołania zwrotnego kiedy <see cref="T:System.Threading.Timer" /> został skonstruowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> aby zapobiec ponownemu uruchomieniu przez czasomierz. Określ zero (0) natychmiast ponownie uruchomić czasomierza.</param>
        <param name="period">Odstęp czasu między wywołań metody wywołania zwrotnego określić, kiedy <see cref="T:System.Threading.Timer" /> został skonstruowany w milisekundach. Określ <see cref="F:System.Threading.Timeout.Infinite" /> wyłączyć sygnalizowania okresowe.</param>
        <summary>Zmienia czas rozpoczęcia i interwał między wywołań metody opisywanego czasomierza, przy użyciu 32-bitowych liczb całkowitych bez znaku do mierzenia odstępach czasu.</summary>
        <returns>
          <see langword="true" /> Jeśli zegar został pomyślnie zaktualizowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda wywołania zwrotnego jest wywoływana raz po `dueTime` upłynie, a następnie każdy czas przedział czasu określony przez `period` upływa.  
  
 Jeśli `dueTime` wynosi zero (0), metody wywołania zwrotnego jest wywoływana natychmiast. Jeśli `dueTime` jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, nigdy nie zostanie wywołana metoda wywołania zwrotnego; czasomierz jest wyłączona, ale można włączyć ponownie za wywoływanie <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnią dla `dueTime`.  
  
 Jeśli `period` wynosi zero (0) lub <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, i `dueTime` nie jest <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, po wywołaniu metody wywołania zwrotnego; okresowe zachowanie czasomierz jest wyłączona, ale można włączyć ponownie za wywoływanie <xref:System.Threading.Timer.Change%2A> i określając wartość dodatnią dla `period`.  
  
 <xref:System.Threading.Timer.Change%2A> Metodę można wywołać z <xref:System.Threading.TimerCallback> delegowanie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> Został już usunięty.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.Threading.Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.Threading.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie `Dispose` umożliwia zasoby używane przez <xref:System.Threading.Timer> odbiorczego do innych celów. Aby uzyskać więcej informacji na temat `Dispose`, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md).  
  
> [!NOTE]
>  Wywołania zwrotne może wystąpić po <xref:System.Threading.Timer.Dispose> przeciążenie metody została wywołana, ponieważ czasomierza kolejki wywołań zwrotnych do wykonania przez wątków z puli wątków. Można użyć <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> przeciążenie metody poczekać, aż wszystkie wywołania zwrotne została ukończona.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób zwolnić zasoby zajmowane przez `Timer`.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject">
          <see cref="T:System.Threading.WaitHandle" /> Do kiedy zasygnalizować <see langword="Timer" /> został zlikwidowany.</param>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.Threading.Timer" /> i sygnałów, gdy zegar został zlikwidowany.</summary>
        <returns>
          <see langword="true" /> Jeśli funkcja zakończy się pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie `Dispose` umożliwia zasoby używane przez <xref:System.Threading.Timer> odbiorczego do innych celów. Aby uzyskać więcej informacji na temat `Dispose`, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md).  
  
 Gdy ta metoda zakończeniu go sygnalizuje <xref:System.Threading.WaitHandle> określonego przez `notifyObject` parametru. Użyj tego przeciążenia <xref:System.Threading.Timer.Dispose%2A> metodę, jeśli chcesz mieć możliwość blokowania do momentu czasomierza został usunięty. Czasomierz nie jest usunięty, dopóki wszystkie obecnie w kolejce wywołania zwrotne została ukończona.  
  
> [!NOTE]
>  Jeśli używa wywołania zwrotnego <xref:System.Threading.Timer.Change%2A> metodę, aby ustawić `dueTime` parametru na wartość zero, może wystąpić sytuacja wyścigu podczas <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> jest wywoływana metoda przeciążenia: Jeśli czasomierza kolejki nowe wywołanie zwrotne przed <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> przeciążenie metody wykrycia, że istnieje są nie wywołania zwrotne w kolejce, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> nadal Blokuj; w przeciwnym razie wartość czasomierza zostanie usunięty, gdy nowe wywołanie zwrotne jest umieszczany w kolejce, a jako <xref:System.ObjectDisposedException> jest generowany, gdy nowe wywołanie zwrotne wywołuje <xref:System.Threading.Timer.Change%2A> — metoda.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="notifyObject" /> Parametr jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>