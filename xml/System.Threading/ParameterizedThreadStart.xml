<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="33bf1e7037d4fd595a1fa1ff8e3d19fffbfa234b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58740086" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">Obiekt, który zawiera dane dla procedury wątku.</param>
    <summary>Reprezentuje metodę, która wykonuje na <see cref="T:System.Threading.Thread" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia wątków zarządzanych metodę, która jest wykonywana w wątku jest reprezentowany przez:  
  
-   A <xref:System.Threading.ThreadStart> delegata, który jest przekazywany do <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> konstruktora.  Każda metoda, która nie ma parametrów i który zwraca `void` w języku C# lub `Sub` procedury w Visual Basic mogą reprezentować delegat.  
  
-   A <xref:System.Threading.ParameterizedThreadStart> delegata, który jest przekazywany do <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> konstruktora. Wszystkie metody, która ma jeden parametr typu <xref:System.Object> i który zwraca wartość void w języku C# lub procedurę Sub w języku Visual Basic mogą reprezentować delegat.  
  
 Wątek nie rozpoczyna się ich wykonywanie aż do <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> metoda jest wywoływana. <xref:System.Threading.ThreadStart> Lub <xref:System.Threading.ParameterizedThreadStart> obiekt delegowany jest wywoływany w wątku i wykonywanie programu rozpoczyna się w pierwszym wierszu metody reprezentowanej przez delegata. W przypadku właściwości <xref:System.Threading.ParameterizedThreadStart> delegować, obiekt, który jest przekazywany do <xref:System.Threading.Thread.Start%28System.Object%29> metody jest przekazywany do pełnomocnika.  
  
> [!NOTE]
>  Użytkownicy programu Visual Basic i C# można pominąć <xref:System.Threading.ThreadStart> lub <xref:System.Threading.ParameterizedThreadStart> konstruktora delegata podczas tworzenia wątku. W języku Visual Basic należy używać `AddressOf` operator przy przekazywaniu metodę do <xref:System.Threading.Thread.%23ctor%2A> konstruktora, na przykład `Dim t As New Thread(AddressOf ThreadProc)`. W języku C# wystarczy określić nazwę procedury wątku. Kompilator wybiera Konstruktor poprawnym delegacie.  
  
> [!NOTE]
>  Po utworzeniu <xref:System.Threading.ParameterizedThreadStart> delegowanie dla metody wystąpienia w języku C++, pierwszy parametr konstruktora jest zmienną instance. W przypadku statycznej metody pierwszy parametr konstruktora wynosi zero. W przypadku statycznej metody konstruktora delegata wymaga tylko jednego parametru: adres metody wywołania zwrotnego, kwalifikowana przez nazwę klasy.  
  
 <xref:System.Threading.ParameterizedThreadStart> Delegować i <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> przeciążenie metody ułatwiają przekazywanie danych do procedury wątku, ale ta technika nie jest bezpiecznym typem, ponieważ każdy obiekt może być przekazywany do <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>. Bardziej niezawodny sposób przekazywania danych do procedury wątku jest umieszczenie procedury wątku i pola danych do obiektu procesu roboczego. Aby uzyskać więcej informacji, zobacz [Tworzenie wątków i przekazywanie danych na czas rozpoczęcia](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  
  
 <xref:System.Threading.ParameterizedThreadStart> Delegat obsługuje tylko jeden parametr. Można przekazać wiele elementów danych, aby <xref:System.Threading.ParameterizedThreadStart> przez określenie tego parametru, jedną z następujących czynności:  
  
-   Tablica.  
  
-   Typ kolekcji, jeśli wszystkie elementy danych są tego samego typu.  
  
-   Typ krotki, taki jak <xref:System.Tuple%602> lub <xref:System.Tuple%604>.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Threading.ParameterizedThreadStart> delegata, aby wykonać metodę statyczną i metodą wystąpienia. Pierwszy <xref:System.Threading.ParameterizedThreadStart> delegata jest reprezentowany przez statyczną `DoWork` metody, a druga jest reprezentowany przez wystąpienie `DoMoreWork` metody. Obie metody dopasowania <xref:System.Threading.ParameterizedThreadStart> podpis delegata; oznacza to, że mają jeden parametr typu <xref:System.Object> i nie zwraca wartości.  
  
> [!NOTE]
>  Kompilatory języków Visual Basic i C# wywnioskować <xref:System.Threading.ParameterizedThreadStart> delegatem sygnatur `DoWork` i `DoMoreWork` metody i wywołanie konstruktora poprawne. W efekcie jest Brak wywołania jawny Konstruktor w kodzie.  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">Tworzenie wątków</related>
  </Docs>
</Type>