<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="25665763c2a90aa6f0cdf11213c7944c2511e822" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69143974" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">Obiekt, który zawiera dane dla procedury wątku.</param>
    <summary>Reprezentuje metodę, która jest <see cref="T:System.Threading.Thread" />wykonywana w.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu wątku zarządzanego Metoda wykonywana na wątku jest reprezentowana przez:  
  
-   Delegat, który jest przesyłany <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> do konstruktora. <xref:System.Threading.ThreadStart>  Każda metoda, która nie ma parametrów i która `void` zwraca C# w lub jest `Sub` procedurą w Visual Basic może reprezentować delegata.  
  
-   Delegat, który jest przesyłany <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> do konstruktora. <xref:System.Threading.ParameterizedThreadStart> Każda metoda, która ma jeden parametr typu <xref:System.Object> i zwracająca wartość void w C# lub jest procedurą Sub w Visual Basic może reprezentować delegata.  
  
 Wątek nie rozpoczyna wykonywania do momentu <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> wywołania metody. Obiekt <xref:System.Threading.ThreadStart> or<xref:System.Threading.ParameterizedThreadStart> jest wywoływany w wątku, a wykonywanie rozpoczyna się w pierwszym wierszu metody reprezentowanej przez delegata. W przypadku <xref:System.Threading.ParameterizedThreadStart> delegata obiekt, który jest przesyłany <xref:System.Threading.Thread.Start%28System.Object%29> do metody jest przenoszona do obiektu delegowanego.  
  
> [!NOTE]
>  Visual Basic i C# użytkownicy mogą pominąć <xref:System.Threading.ThreadStart> <xref:System.Threading.ParameterizedThreadStart> Konstruktor delegata podczas tworzenia wątku. W Visual Basic Użyj `AddressOf` operatora podczas przekazywania metody <xref:System.Threading.Thread.%23ctor%2A> do `Dim t As New Thread(AddressOf ThreadProc)`konstruktora; na przykład. W C#programie wystarczy określić nazwę procedury wątku. Kompilator wybiera prawidłowy Konstruktor delegatów.  
  
> [!NOTE]
>  Podczas tworzenia <xref:System.Threading.ParameterizedThreadStart> delegata dla metody wystąpienia w programie C++pierwszy parametr konstruktora jest zmienną wystąpienia. Dla metody statycznej pierwszy parametr konstruktora ma wartość zero. Dla metody statycznej Konstruktor delegata wymaga tylko jednego parametru: adres metody wywołania zwrotnego, kwalifikowana przez nazwę klasy.  
  
 Delegat i Przeciążenie <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>metody ułatwiają przekazywanie danych do procedury wątku, ale ta technika nie jest bezpieczna, ponieważ każdy obiekt może zostać przekazany do. <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> <xref:System.Threading.ParameterizedThreadStart> Bardziej niezawodny sposób przekazywania danych do procedury wątku polega na umieszczeniu procedury wątku i pól danych w obiekcie Worker. Aby uzyskać więcej informacji, zobacz [Tworzenie wątków i przekazywanie danych w czasie rozpoczęcia](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  
  
 <xref:System.Threading.ParameterizedThreadStart> Delegat obsługuje tylko jeden parametr. Można przekazać wiele elementów danych do obiektu, <xref:System.Threading.ParameterizedThreadStart> tworząc jeden z następujących parametrów:  
  
-   Tablica.  
  
-   Typ kolekcji, jeśli wszystkie elementy danych są tego samego typu.  
  
-   Typ krotki, taki jak <xref:System.Tuple%602> lub. <xref:System.Tuple%604>  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Threading.ParameterizedThreadStart> delegata, aby wykonać metodę statyczną i metodę wystąpienia. Pierwszy <xref:System.Threading.ParameterizedThreadStart> delegat jest reprezentowany przez metodę statyczną `DoWork` , a drugi jest reprezentowany przez metodę wystąpienia `DoMoreWork` . Obie metody pasują <xref:System.Threading.ParameterizedThreadStart> do podpisu delegata; oznacza to, że mają jeden parametr typu <xref:System.Object> i nie zwracają wartości.  
  
> [!NOTE]
>  C# Visual Basic i kompilatory <xref:System.Threading.ParameterizedThreadStart> wnioskują delegata z podpisów `DoWork` metod i `DoMoreWork` i wywołują poprawny Konstruktor. W ten sposób nie istnieje jawne wywołanie konstruktora w kodzie.  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">Tworzenie wątków</related>
  </Docs>
</Type>
