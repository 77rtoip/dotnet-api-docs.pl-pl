<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="25665763c2a90aa6f0cdf11213c7944c2511e822" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69143974" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="58d85-101">Obiekt, który zawiera dane dla procedury wątku.</span><span class="sxs-lookup"><span data-stu-id="58d85-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="58d85-102">Reprezentuje metodę, która jest <see cref="T:System.Threading.Thread" />wykonywana w.</span><span class="sxs-lookup"><span data-stu-id="58d85-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="58d85-103">Po utworzeniu wątku zarządzanego Metoda wykonywana na wątku jest reprezentowana przez:</span><span class="sxs-lookup"><span data-stu-id="58d85-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="58d85-104">Delegat, który jest przesyłany <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> do konstruktora. <xref:System.Threading.ThreadStart></span><span class="sxs-lookup"><span data-stu-id="58d85-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="58d85-105">Każda metoda, która nie ma parametrów i która `void` zwraca C# w lub jest `Sub` procedurą w Visual Basic może reprezentować delegata.</span><span class="sxs-lookup"><span data-stu-id="58d85-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="58d85-106">Delegat, który jest przesyłany <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> do konstruktora. <xref:System.Threading.ParameterizedThreadStart></span><span class="sxs-lookup"><span data-stu-id="58d85-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="58d85-107">Każda metoda, która ma jeden parametr typu <xref:System.Object> i zwracająca wartość void w C# lub jest procedurą Sub w Visual Basic może reprezentować delegata.</span><span class="sxs-lookup"><span data-stu-id="58d85-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="58d85-108">Wątek nie rozpoczyna wykonywania do momentu <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="58d85-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="58d85-109">Obiekt <xref:System.Threading.ThreadStart> or<xref:System.Threading.ParameterizedThreadStart> jest wywoływany w wątku, a wykonywanie rozpoczyna się w pierwszym wierszu metody reprezentowanej przez delegata.</span><span class="sxs-lookup"><span data-stu-id="58d85-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="58d85-110">W przypadku <xref:System.Threading.ParameterizedThreadStart> delegata obiekt, który jest przesyłany <xref:System.Threading.Thread.Start%28System.Object%29> do metody jest przenoszona do obiektu delegowanego.</span><span class="sxs-lookup"><span data-stu-id="58d85-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="58d85-111">Visual Basic i C# użytkownicy mogą pominąć <xref:System.Threading.ThreadStart> <xref:System.Threading.ParameterizedThreadStart> Konstruktor delegata podczas tworzenia wątku.</span><span class="sxs-lookup"><span data-stu-id="58d85-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="58d85-112">W Visual Basic Użyj `AddressOf` operatora podczas przekazywania metody <xref:System.Threading.Thread.%23ctor%2A> do `Dim t As New Thread(AddressOf ThreadProc)`konstruktora; na przykład.</span><span class="sxs-lookup"><span data-stu-id="58d85-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="58d85-113">W C#programie wystarczy określić nazwę procedury wątku.</span><span class="sxs-lookup"><span data-stu-id="58d85-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="58d85-114">Kompilator wybiera prawidłowy Konstruktor delegatów.</span><span class="sxs-lookup"><span data-stu-id="58d85-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="58d85-115">Podczas tworzenia <xref:System.Threading.ParameterizedThreadStart> delegata dla metody wystąpienia w programie C++pierwszy parametr konstruktora jest zmienną wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="58d85-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="58d85-116">Dla metody statycznej pierwszy parametr konstruktora ma wartość zero.</span><span class="sxs-lookup"><span data-stu-id="58d85-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="58d85-117">Dla metody statycznej Konstruktor delegata wymaga tylko jednego parametru: adres metody wywołania zwrotnego, kwalifikowana przez nazwę klasy.</span><span class="sxs-lookup"><span data-stu-id="58d85-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="58d85-118">Delegat i Przeciążenie <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>metody ułatwiają przekazywanie danych do procedury wątku, ale ta technika nie jest bezpieczna, ponieważ każdy obiekt może zostać przekazany do. <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> <xref:System.Threading.ParameterizedThreadStart></span><span class="sxs-lookup"><span data-stu-id="58d85-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="58d85-119">Bardziej niezawodny sposób przekazywania danych do procedury wątku polega na umieszczeniu procedury wątku i pól danych w obiekcie Worker.</span><span class="sxs-lookup"><span data-stu-id="58d85-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="58d85-120">Aby uzyskać więcej informacji, zobacz [Tworzenie wątków i przekazywanie danych w czasie rozpoczęcia](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="58d85-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="58d85-121"><xref:System.Threading.ParameterizedThreadStart> Delegat obsługuje tylko jeden parametr.</span><span class="sxs-lookup"><span data-stu-id="58d85-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="58d85-122">Można przekazać wiele elementów danych do obiektu, <xref:System.Threading.ParameterizedThreadStart> tworząc jeden z następujących parametrów:</span><span class="sxs-lookup"><span data-stu-id="58d85-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="58d85-123">Tablica.</span><span class="sxs-lookup"><span data-stu-id="58d85-123">An array.</span></span>  
  
-   <span data-ttu-id="58d85-124">Typ kolekcji, jeśli wszystkie elementy danych są tego samego typu.</span><span class="sxs-lookup"><span data-stu-id="58d85-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="58d85-125">Typ krotki, taki jak <xref:System.Tuple%602> lub. <xref:System.Tuple%604></span><span class="sxs-lookup"><span data-stu-id="58d85-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="58d85-126">Poniższy przykład kodu używa <xref:System.Threading.ParameterizedThreadStart> delegata, aby wykonać metodę statyczną i metodę wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="58d85-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="58d85-127">Pierwszy <xref:System.Threading.ParameterizedThreadStart> delegat jest reprezentowany przez metodę statyczną `DoWork` , a drugi jest reprezentowany przez metodę wystąpienia `DoMoreWork` .</span><span class="sxs-lookup"><span data-stu-id="58d85-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="58d85-128">Obie metody pasują <xref:System.Threading.ParameterizedThreadStart> do podpisu delegata; oznacza to, że mają jeden parametr typu <xref:System.Object> i nie zwracają wartości.</span><span class="sxs-lookup"><span data-stu-id="58d85-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="58d85-129">C# Visual Basic i kompilatory <xref:System.Threading.ParameterizedThreadStart> wnioskują delegata z podpisów `DoWork` metod i `DoMoreWork` i wywołują poprawny Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="58d85-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="58d85-130">W ten sposób nie istnieje jawne wywołanie konstruktora w kodzie.</span><span class="sxs-lookup"><span data-stu-id="58d85-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="58d85-131">Tworzenie wątków</span><span class="sxs-lookup"><span data-stu-id="58d85-131">Creating Threads</span></span></related>
  </Docs>
</Type>
