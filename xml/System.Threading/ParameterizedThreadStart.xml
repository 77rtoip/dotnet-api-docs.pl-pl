<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f89ab27a5d48225389ff0ad41c3bbc265121c09" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30578956" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">
      <span data-ttu-id="1cbf8-101">Obiekt, który zawiera dane dla procedury wątku.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1cbf8-101">An object that contains data for the thread procedure.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="1cbf8-102">Reprezentuje metodę, która wykonuje na <see cref="T:System.Threading.Thread" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1cbf8-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cbf8-103">Podczas tworzenia wątku zarządzanego metodę, która wykonuje w wątku jest reprezentowana przez:</span><span class="sxs-lookup"><span data-stu-id="1cbf8-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="1cbf8-104">A <xref:System.Threading.ThreadStart> delegata, który jest przekazywany do <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="1cbf8-105">Każda metoda, która nie ma parametrów i zwracającą `void` w języku C# lub jest `Sub` procedury w Visual Basic może reprezentować delegata.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="1cbf8-106">A <xref:System.Threading.ParameterizedThreadStart> delegata, który jest przekazywany do <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> konstruktora.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="1cbf8-107">Wszystkie metody, która ma jeden parametr typu <xref:System.Object> i który zwraca typ void w języku C# lub procedurę Sub w języku Visual Basic może reprezentować delegata.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="1cbf8-108">Wątek nie rozpocznie się wykonywanie do momentu <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="1cbf8-109"><xref:System.Threading.ThreadStart> Lub <xref:System.Threading.ParameterizedThreadStart> delegata jest wywoływane w wątku i wykonywania zaczyna się od pierwszego wiersza metodę reprezentowaną przez delegata.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="1cbf8-110">W przypadku liczby <xref:System.Threading.ParameterizedThreadStart> delegować, obiekt, który jest przekazywany do <xref:System.Threading.Thread.Start%28System.Object%29> metody jest przekazywany do delegata.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1cbf8-111">Visual Basic i C# użytkowników można pominąć <xref:System.Threading.ThreadStart> lub <xref:System.Threading.ParameterizedThreadStart> konstruktora delegata podczas tworzenia wątku.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="1cbf8-112">W języku Visual Basic, użyj `AddressOf` operator podczas przekazywania metodę do <xref:System.Threading.Thread.%23ctor%2A> konstruktora, na przykład `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="1cbf8-113">W języku C# wystarczy określić nazwę procedury wątku.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="1cbf8-114">Kompilator wybiera konstruktora delegata poprawne.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1cbf8-115">Po utworzeniu <xref:System.Threading.ParameterizedThreadStart> delegować metody wystąpienia w języku C++ pierwszego parametru konstruktora jest zmienna wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="1cbf8-116">W przypadku statycznej metody pierwszego parametru konstruktora wynosi zero.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="1cbf8-117">Dla metody statycznej, konstruktora delegata wymaga tylko jeden parametr: adres metody wywołania zwrotnego kwalifikowana przez nazwę klasy.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="1cbf8-118"><xref:System.Threading.ParameterizedThreadStart> Delegować i <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> przeciążenie metody ułatwiają przekazywanie danych do procedury wątku, ale ta metoda nie jest typem bezpieczne, ponieważ każdy obiekt mogą zostać przekazane do <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1cbf8-119">Bardziej niezawodna sposobem przekazywania danych do procedury wątku jest poddane zarówno procedury wątku i pola danych z obiektu procesu roboczego.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="1cbf8-120">Aby uzyskać więcej informacji, zobacz [Tworzenie wątków i przekazywanie danych w chwili uruchomienia](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="1cbf8-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="1cbf8-121"><xref:System.Threading.ParameterizedThreadStart> Delegat obsługuje tylko jeden parametr.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="1cbf8-122">Można przekazać wielu elementów danych do <xref:System.Threading.ParameterizedThreadStart> dokonując parametru jedną z następujących czynności:</span><span class="sxs-lookup"><span data-stu-id="1cbf8-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="1cbf8-123">Tablica.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-123">An array.</span></span>  
  
-   <span data-ttu-id="1cbf8-124">Typ kolekcji, jeśli wszystkie elementy danych są tego samego typu.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="1cbf8-125">Typ krotki, takich jak <xref:System.Tuple%602> lub <xref:System.Tuple%604>.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cbf8-126">Poniższy przykład kodu wykorzystuje <xref:System.Threading.ParameterizedThreadStart> delegat do realizacji metody statycznej i metody wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="1cbf8-127">Pierwszy <xref:System.Threading.ParameterizedThreadStart> delegata jest reprezentowana przez statycznych `DoWork` metody, a druga jest reprezentowany przez wystąpienie `DoMoreWork` metody.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="1cbf8-128">Obie metody odpowiada <xref:System.Threading.ParameterizedThreadStart> podpisu delegata; oznacza to, że mają jeden parametr typu <xref:System.Object> i nie zwraca wartości.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1cbf8-129">Kompilatory języka Visual Basic i C# wnioskować <xref:System.Threading.ParameterizedThreadStart> delegatem sygnatur `DoWork` i `DoMoreWork` metody i wywołanie konstruktora poprawne.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="1cbf8-130">W związku z tym nie ma żadnych wywołania jawny Konstruktor w kodzie.</span><span class="sxs-lookup"><span data-stu-id="1cbf8-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>