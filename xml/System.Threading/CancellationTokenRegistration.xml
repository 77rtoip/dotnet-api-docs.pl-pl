<Type Name="CancellationTokenRegistration" FullName="System.Threading.CancellationTokenRegistration">
  <Metadata><Meta Name="ms.openlocfilehash" Value="03ec267229dc845d09481a4371582f1e61a607af" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68541292" /></Metadata><TypeSignature Language="C#" Value="public struct CancellationTokenRegistration : IDisposable, IEquatable&lt;System.Threading.CancellationTokenRegistration&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationTokenRegistration extends System.ValueType implements class System.IDisposable, class System.IEquatable`1&lt;valuetype System.Threading.CancellationTokenRegistration&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationTokenRegistration" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationTokenRegistration&#xA;Implements IDisposable, IEquatable(Of CancellationTokenRegistration)" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationTokenRegistration : IDisposable, IEquatable&lt;System::Threading::CancellationTokenRegistration&gt;" />
  <TypeSignature Language="F#" Value="type CancellationTokenRegistration = struct&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Threading.CancellationTokenRegistration&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="53542-101">Reprezentuje delegata wywołania zwrotnego, który został zarejestrowany <see cref="T:System.Threading.CancellationToken" />w.</span><span class="sxs-lookup"><span data-stu-id="53542-101">Represents a callback delegate that has been registered with a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53542-102">Wywołanie zwrotne jest wywoływane, gdy token zostanie anulowany.</span><span class="sxs-lookup"><span data-stu-id="53542-102">The callback is called when the token is canceled.</span></span> <span data-ttu-id="53542-103">Aby wyrejestrować wywołanie zwrotne, usuń odpowiednie wystąpienie rejestracji.</span><span class="sxs-lookup"><span data-stu-id="53542-103">To unregister a callback, dispose the corresponding Registration instance.</span></span> <span data-ttu-id="53542-104">Aby uzyskać więcej informacji i przykładów kodu, zobacz [Anulowanie w zarządzanych wątkach](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="53542-104">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="53542-105">Wszystkie publiczne i chronione elementy członkowskie <see cref="T:System.Threading.CancellationTokenRegistration" /> są bezpieczne dla wątków i mogą być używane współbieżnie z wielu wątków, z wyjątkiem Dispose, które muszą być używane tylko wtedy, gdy wszystkie inne operacje <see cref="T:System.Threading.CancellationTokenRegistration" /> na zakończono.</span><span class="sxs-lookup"><span data-stu-id="53542-105">All public and protected members of <see cref="T:System.Threading.CancellationTokenRegistration" /> are thread-safe and may be used concurrently from multiple threads, with the exception of Dispose, which must only be used when all other operations on the <see cref="T:System.Threading.CancellationTokenRegistration" /> have completed.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="53542-106">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="53542-106">Cancellation</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="53542-107">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="53542-107">Task Cancellation</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="53542-108">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="53542-108">How to: Register Callbacks for Cancellation Requests</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenRegistration.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cancellationTokenRegistration.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53542-109">Zwalnia wszystkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Threading.CancellationTokenRegistration" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="53542-109">Releases all resources used by the current instance of the <see cref="T:System.Threading.CancellationTokenRegistration" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53542-110">Wywołaj `Dispose` po zakończeniu korzystania z <xref:System.Threading.CancellationTokenRegistration>.</span><span class="sxs-lookup"><span data-stu-id="53542-110">Call `Dispose` when you are finished using the <xref:System.Threading.CancellationTokenRegistration>.</span></span> <span data-ttu-id="53542-111">`Dispose` Metoda<xref:System.Threading.CancellationTokenRegistration> pozostawia w stanie niezdatnym do użytku.</span><span class="sxs-lookup"><span data-stu-id="53542-111">The `Dispose` method leaves the <xref:System.Threading.CancellationTokenRegistration> in an unusable state.</span></span> <span data-ttu-id="53542-112">Po wywołaniu `Dispose`należy wydać wszystkie odwołania <xref:System.Threading.CancellationTokenRegistration> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.Threading.CancellationTokenRegistration> , którą zajmował.</span><span class="sxs-lookup"><span data-stu-id="53542-112">After calling `Dispose`, you must release all references to the <xref:System.Threading.CancellationTokenRegistration> so the garbage collector can reclaim the memory that the <xref:System.Threading.CancellationTokenRegistration> was occupying.</span></span>  
  
 <span data-ttu-id="53542-113">Aby uzyskać więcej informacji, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i implementowanie [metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="53542-113">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53542-114">Zawsze wywołuj `Dispose` przed wydaniem ostatniego odwołania <xref:System.Threading.CancellationTokenRegistration>do.</span><span class="sxs-lookup"><span data-stu-id="53542-114">Always call `Dispose` before you release your last reference to the <xref:System.Threading.CancellationTokenRegistration>.</span></span> <span data-ttu-id="53542-115">W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.Threading.CancellationTokenRegistration> `Finalize` metody obiektu przez moduł zbierający elementy bezużyteczne.</span><span class="sxs-lookup"><span data-stu-id="53542-115">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CancellationTokenRegistration> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="53542-116">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="53542-116">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenRegistration.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="cancellationTokenRegistration.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53542-117">Usuwa rejestrację i wyrejestrowuje docelowe wywołanie zwrotne z skojarzonego <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="53542-117">Disposes of the registration and unregisters the target callback from the associated <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="53542-118">Zadanie, które reprezentuje asynchroniczną operację Dispose.</span><span class="sxs-lookup"><span data-stu-id="53542-118">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="53542-119">Zwrócona <xref:System.Threading.Tasks.ValueTask> wartość kończy się po wyrejestrowaniu skojarzonego wywołania zwrotnego bez wykonywania lub po zakończeniu wykonywania, z wyjątkiem sytuacji, gdy wywołanie zwrotne jest Wyrejestrowanie samego siebie.</span><span class="sxs-lookup"><span data-stu-id="53542-119">The returned <xref:System.Threading.Tasks.ValueTask> completes once the associated callback is unregistered without having executed or once it's finished executing, except in the degenerate case where the callback is unregistering itself.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53542-120">Określa, czy bieżące <see cref="T:System.Threading.CancellationTokenRegistration" /> wystąpienie jest równe określonemu. <see cref="T:System.Threading.CancellationTokenRegistration" /></span><span class="sxs-lookup"><span data-stu-id="53542-120">Determines whether the current <see cref="T:System.Threading.CancellationTokenRegistration" /> instance is equal to the specified <see cref="T:System.Threading.CancellationTokenRegistration" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenRegistration.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationTokenRegistration.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="53542-121">Inny obiekt, do którego należy porównać to wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="53542-121">The other object to which to compare this instance.</span></span></param>
        <summary><span data-ttu-id="53542-122">Określa, czy bieżące <see cref="T:System.Threading.CancellationTokenRegistration" /> wystąpienie jest równe określonemu. <see cref="T:System.Threading.CancellationTokenRegistration" /></span><span class="sxs-lookup"><span data-stu-id="53542-122">Determines whether the current <see cref="T:System.Threading.CancellationTokenRegistration" /> instance is equal to the specified <see cref="T:System.Threading.CancellationTokenRegistration" />.</span></span></summary>
        <returns><span data-ttu-id="53542-123">Prawda, jeśli oba te i <paramref name="obj" /> są równe.</span><span class="sxs-lookup"><span data-stu-id="53542-123">True, if both this and <paramref name="obj" /> are equal.</span></span> <span data-ttu-id="53542-124">FAŁSZ, w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="53542-124">False, otherwise.</span></span>  
  
<span data-ttu-id="53542-125">Dwa <see cref="T:System.Threading.CancellationTokenRegistration" /> wystąpienia są równe, jeśli oba te odnoszą się do danych wyjściowych pojedynczego wywołania do tej samej metody <see cref="T:System.Threading.CancellationToken" />rejestru.</span><span class="sxs-lookup"><span data-stu-id="53542-125">Two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are equal if they both refer to the output of a single call to the same Register method of a <see cref="T:System.Threading.CancellationToken" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="53542-126">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="53542-126">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="53542-127">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="53542-127">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="53542-128">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="53542-128">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationTokenRegistration other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Threading.CancellationTokenRegistration other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationTokenRegistration) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Threading::CancellationTokenRegistration other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationTokenRegistration -&gt; bool" Usage="cancellationTokenRegistration.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationTokenRegistration" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="53542-129">Druga <see cref="T:System.Threading.CancellationTokenRegistration" /> , do której ma zostać porównane to wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="53542-129">The other <see cref="T:System.Threading.CancellationTokenRegistration" /> to which to compare this instance.</span></span></param>
        <summary><span data-ttu-id="53542-130">Określa, czy bieżące <see cref="T:System.Threading.CancellationTokenRegistration" /> wystąpienie jest równe określonemu. <see cref="T:System.Threading.CancellationTokenRegistration" /></span><span class="sxs-lookup"><span data-stu-id="53542-130">Determines whether the current <see cref="T:System.Threading.CancellationTokenRegistration" /> instance is equal to the specified <see cref="T:System.Threading.CancellationTokenRegistration" />.</span></span></summary>
        <returns><span data-ttu-id="53542-131">Prawda, jeśli oba te i <paramref name="other" /> są równe.</span><span class="sxs-lookup"><span data-stu-id="53542-131">True, if both this and <paramref name="other" /> are equal.</span></span> <span data-ttu-id="53542-132">FAŁSZ, w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="53542-132">False, otherwise.</span></span>  
  
<span data-ttu-id="53542-133">Dwa <see cref="T:System.Threading.CancellationTokenRegistration" /> wystąpienia są równe, jeśli oba te odnoszą się do danych wyjściowych pojedynczego wywołania do tej samej metody <see cref="T:System.Threading.CancellationToken" />rejestru.</span><span class="sxs-lookup"><span data-stu-id="53542-133">Two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are equal if they both refer to the output of a single call to the same Register method of a <see cref="T:System.Threading.CancellationToken" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="53542-134">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="53542-134">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="53542-135">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="53542-135">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="53542-136">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="53542-136">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenRegistration.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationTokenRegistration.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53542-137">Służy jako funkcja skrótu dla elementu <see cref="T:System.Threading.CancellationTokenRegistration" />.</span><span class="sxs-lookup"><span data-stu-id="53542-137">Serves as a hash function for a <see cref="T:System.Threading.CancellationTokenRegistration" />.</span></span></summary>
        <returns><span data-ttu-id="53542-138">Kod skrótu dla bieżącego <see cref="T:System.Threading.CancellationTokenRegistration" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="53542-138">A hash code for the current <see cref="T:System.Threading.CancellationTokenRegistration" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="53542-139">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="53542-139">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="53542-140">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="53542-140">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="53542-141">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="53542-141">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationTokenRegistration left, System.Threading.CancellationTokenRegistration right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationTokenRegistration left, valuetype System.Threading.CancellationTokenRegistration right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationTokenRegistration, right As CancellationTokenRegistration) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationTokenRegistration left, System::Threading::CancellationTokenRegistration right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationTokenRegistration * System.Threading.CancellationTokenRegistration -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationTokenRegistration" />
        <Parameter Name="right" Type="System.Threading.CancellationTokenRegistration" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="53542-142">Pierwsze wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="53542-142">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="53542-143">Drugie wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="53542-143">The second instance.</span></span></param>
        <summary><span data-ttu-id="53542-144">Określa, czy <see cref="T:System.Threading.CancellationTokenRegistration" /> dwa wystąpienia są równe.</span><span class="sxs-lookup"><span data-stu-id="53542-144">Determines whether two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="53542-145">Ma wartość true, jeśli wystąpienia są równe; w przeciwnym razie false.</span><span class="sxs-lookup"><span data-stu-id="53542-145">True if the instances are equal; otherwise, false.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="53542-146">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="53542-146">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="53542-147">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="53542-147">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="53542-148">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="53542-148">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationTokenRegistration left, System.Threading.CancellationTokenRegistration right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationTokenRegistration left, valuetype System.Threading.CancellationTokenRegistration right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationTokenRegistration, right As CancellationTokenRegistration) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationTokenRegistration left, System::Threading::CancellationTokenRegistration right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationTokenRegistration * System.Threading.CancellationTokenRegistration -&gt; bool" Usage="System.Threading.CancellationTokenRegistration.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationTokenRegistration" />
        <Parameter Name="right" Type="System.Threading.CancellationTokenRegistration" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="53542-149">Pierwsze wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="53542-149">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="53542-150">Drugie wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="53542-150">The second instance.</span></span></param>
        <summary><span data-ttu-id="53542-151">Określa, czy <see cref="T:System.Threading.CancellationTokenRegistration" /> dwa wystąpienia nie są równe.</span><span class="sxs-lookup"><span data-stu-id="53542-151">Determines whether two <see cref="T:System.Threading.CancellationTokenRegistration" /> instances are not equal.</span></span></summary>
        <returns><span data-ttu-id="53542-152">Ma wartość true, jeśli wystąpienia nie są równe; w przeciwnym razie false.</span><span class="sxs-lookup"><span data-stu-id="53542-152">True if the instances are not equal; otherwise, false.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="53542-153">Anulowanie</span><span class="sxs-lookup"><span data-stu-id="53542-153">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="53542-154">Anulowanie zadania</span><span class="sxs-lookup"><span data-stu-id="53542-154">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="53542-155">Instrukcje: Rejestrowanie wywołań zwrotnych żądań anulowania</span><span class="sxs-lookup"><span data-stu-id="53542-155">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken Token" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationTokenRegistration.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken Token { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.Token : System.Threading.CancellationToken" Usage="System.Threading.CancellationTokenRegistration.Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53542-156">Pobiera, <see cref="T:System.Threading.CancellationToken" /> z którym skojarzona jest ta rejestracja.</span><span class="sxs-lookup"><span data-stu-id="53542-156">Gets the <see cref="T:System.Threading.CancellationToken" /> with which this registration is associated.</span></span>  <span data-ttu-id="53542-157">Jeśli rejestracja nie jest skojarzona z tokenem (na przykład po usunięciu rejestracji), spowoduje to zwrócenie domyślnego tokenu.</span><span class="sxs-lookup"><span data-stu-id="53542-157">If the registration isn't associated with a token (such as after the registration has been disposed), this will return a default token.</span></span></summary>
        <value><span data-ttu-id="53542-158">Token anulowania, z którym jest skojarzona ta rejestracja, lub token domyślny, jeśli rejestracja nie jest skojarzona z tokenem (na przykład po usunięciu rejestracji).</span><span class="sxs-lookup"><span data-stu-id="53542-158">The cancellation token with which this registration is associated, or a default token if the registration isn't associated with a token (such as after the registration has been disposed).</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationTokenRegistration.Unregister" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister();" />
      <MemberSignature Language="F#" Value="member this.Unregister : unit -&gt; bool" Usage="cancellationTokenRegistration.Unregister " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53542-159">Usuwa rejestrację i wyrejestrowuje docelowe wywołanie zwrotne z skojarzonego <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="53542-159">Disposes of the registration and unregisters the target callback from the associated <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="53542-160"><see langword="true" />Jeśli metoda się powiedzie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="53542-160"><see langword="true" /> if the method succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>