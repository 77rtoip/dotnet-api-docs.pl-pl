<Type Name="ManagementCommitAttribute" FullName="System.Management.Instrumentation.ManagementCommitAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd7c2a99d9dbd28d8933225f4126e3b84e46f656" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69277378" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManagementCommitAttribute : System.Management.Instrumentation.ManagementMemberAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementCommitAttribute extends System.Management.Instrumentation.ManagementMemberAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementCommitAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementCommitAttribute&#xA;Inherits ManagementMemberAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementCommitAttribute sealed : System::Management::Instrumentation::ManagementMemberAttribute" />
  <TypeSignature Language="F#" Value="type ManagementCommitAttribute = class&#xA;    inherit ManagementMemberAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Instrumentation.ManagementMemberAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Atrybut ManagementCommit oznacza metodę, która jest wywoływana, gdy konieczne jest zaktualizowanie zestawu właściwości do odczytu i zapisu w jednej, niepodzielnej operacji.  
  
Uwaga: biblioteki WMI .NET są teraz uwzględniane w stanie końcowym i nie będą dostępne żadne dalsze programowanie, ulepszenia ani aktualizacje dla problemów związanych z niebezpieczeństwem, które mają wpływ na te biblioteki. [Interfejsy API mi](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) powinny być używane dla wszystkich nowych rozwiązań programistycznych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwości odczytu i zapisu klasy są oznaczone <xref:System.Management.Instrumentation.ManagementConfigurationAttribute> atrybutem. Ponadto każda właściwość odczytu i zapisu może być jednym z dwóch typów: <xref:System.Management.Instrumentation.ManagementConfigurationType.Apply> lub. <xref:System.Management.Instrumentation.ManagementConfigurationType.OnCommit> Jeśli klasa ma właściwości do odczytu i zapisu, które są skonfigurowane jako OnCommit, Klasa powinna mieć metodę, która jest oznaczona za pomocą atrybutu ManagementCommit. Skojarzona Metoda zostanie wywołana, jeśli zostały ustawione wszystkie właściwości OnCommit.  
  
 Oznaczona Metoda nie jest bezpieczna wątkowo.  
  
 Jeśli żadna metoda nie jest oznaczona atrybutem ManagementCommit, Klasa zarządza aktualizacjami samego samego programu bez wskazywania, że aktualizacja została ukończona.  
  
 Metoda oznaczona atrybutem ManagementCommit nie przyjmuje żadnych parametrów i ma zwracany typ void.  
  
   
  
## Examples  
  
```csharp  
public class Process  
{  
    /// Key attribute marks a key property. Keys are not changeable.  
    /// Keys have to be unique information.  
    [ManagementKey]  
    public int Id   
    {  
        get {    }  
    }  
  
    /// ManagementConfiguration stands for read/write manageable  
    /// property from a read/write field.  
    [ManagementConfiguration]  
    public string UserDefinedString;  
  
    [ManagementCommit]  
    void SaveOnDevice();  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Management.Instrumentation.ManagementConfigurationType" />
    <altmember cref="T:System.Management.Instrumentation.ManagementConfigurationAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementCommitAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementCommitAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementCommitAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Management.Instrumentation.ManagementCommitAttribute" /> klasy. To jest Konstruktor bez parametrów.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
