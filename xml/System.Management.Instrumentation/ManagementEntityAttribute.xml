<Type Name="ManagementEntityAttribute" FullName="System.Management.Instrumentation.ManagementEntityAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="67aec8c22a51190e16fce0b4601a1773892f1913" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30457311" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManagementEntityAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementEntityAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementEntityAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementEntityAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementEntityAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ten atrybut ManagementEntity wskazuje, że klasa dostarcza informacji zarządzania udostępniany przez dostawcę WMI.  
  
 Uwaga: do bibliotek WMI .NET są teraz wziąć pod uwagę stanu końcowego, a nie dalszy rozwój, ulepszenia lub aktualizacje będą dostępne dla problemy związane z zabezpieczeniami wpływu na te biblioteki. [API MI](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) powinna być używana do wszystkich nowych wdrożeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy oznaczona przez atrybut musi być publiczna.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie atrybutu ManagementEntity, aby oznaczyć klasę.  
  
```  
// Use the ManagementEntity attribute on the class to specify that this // class contains management information that is available from  
// provider.  
  
    [ManagementEntity(Name = "MortgageCalc")]  
    public class MortgageCalcWMIProvider  
    {  
    }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementEntityAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementEntityAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Management.ManagementEntityAttribute" /> klasy. Jest to domyślny konstruktor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor nie przyjmuje parametr name. Jeśli nie określisz nazwy przy użyciu <xref:System.Management.Instrumentation.ManagementEntityAttribute.Name> parametru nazwę klasy WMI skojarzone domyślnie zostanie ustawiona nazwa klasy oparte na atrybutach.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="External">
      <MemberSignature Language="C#" Value="public bool External { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool External" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.External" />
      <MemberSignature Language="VB.NET" Value="Public Property External As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool External { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy klasa reprezentuje klasę WMI dostawcy zaimplementowana zewnętrznych do bieżącego zestawu.</summary>
        <value>Wartość logiczna, która ma wartość true, jeśli klasa reprezentuje zewnętrzne klasy usługi WMI i wartość false w przeciwnym razie wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To jest używany podczas implementowania dostawcy zawierający implementację klasy, które rozszerzyć istniejących klas abstrakcyjnych usługi WMI.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę klasy usługi WMI.</summary>
        <value>Ciąg zawierający nazwę klasy usługi WMI.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie określisz nazwy klasy usługi WMI przez ustawienie dla tej właściwości, klasy usługi WMI domyślnie zostanie ustawiona nazwa klasy oparte na atrybutach.  
  
   
  
## Examples  
 W poniższym przykładzie parametr Name jest używana można ustawić nazwy reprezentowany przez klasę MortgageCalcWMIProvider klasy usługi WMI. Ustawia nazwę MortgageCalculator. Jeśli nazwa parametru nie jest używana, odpowiednich C# nazwy klasy, MortgageCalcWMIProvider w tym przypadku jest używana jako nazwa klasy usługi WMI.  
  
```  
[ManagementEntity(Name = "MortgageCalculator")]  
public class MortgageCalcWMIProvider  
{  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Singleton">
      <MemberSignature Language="C#" Value="public bool Singleton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Singleton" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton" />
      <MemberSignature Language="VB.NET" Value="Public Property Singleton As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Singleton { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy skojarzona klasa reprezentuje pojedynczą klasę WMI.</summary>
        <value>Wartość logiczna, która ma wartość true, jeśli klasa reprezentuje pojedyncze klasy usługi WMI i wartość false w przeciwnym razie wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pojedyncza klasa usługi WMI jest jednym którego tylko kiedykolwiek można pojedynczego wystąpienia. Mimo że można kodem logiki, aby upewnić się, że kiedykolwiek tworzony jest tylko jedno wystąpienie klasy WMI, ten atrybut parametru zapewnia ustawić zadanie prosty i spójny.  
  
 Podczas pracy z pojedynczego wystąpienia klasy usługi WMI, aplikacje klienckie należy użyć składni specjalnych. Aby uzyskać więcej informacji, zobacz Describing wystąpienia obiektu ścieżka tematu w bibliotece MSDN online na [ http://www.msdn.com ](http://www.msdn.com/).  
  
   
  
## Examples  
 Poniższy fragment kodu przedstawia sposób Użyj parametru Singleton, aby wskazać, że klasa C# odpowiada pojedynczą klasę WMI.  
  
```  
[ManagementEntity(Singleton=true)]  
public class SingletonSample  
```  
  
 Na przykład pełna, praca dostawcy, który implementuje klasy pojedynczej, zobacz [porady: Tworzenie podstawowego dostawcy całkowicie niezależna](http://msdn.microsoft.com/library/1dabd442-c1ff-40a1-bb0e-d7b3566c2300).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>