<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InstrumentationManager.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac557c8f02f177566e76601df0b5d3378d1209f62ea.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57c8f02f177566e76601df0b5d3378d1209f62ea</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Provides methods that manage the lifetime and the model used for decoupled providers.</source>
          <target state="translated">Udostępnia metody zarządzające okres istnienia i z modelem użytym rozdzielonymi dostawców.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</source>
          <target state="translated">Uwaga: do bibliotek WMI .NET są teraz wziąć pod uwagę stanu końcowego, a nie dalszy rozwój, ulepszenia lub aktualizacje będą dostępne dla problemy związane z zabezpieczeniami wpływu na te biblioteki.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The <bpt id="p1">[</bpt>MI APIs<ept id="p1">](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx)</ept> should be used for all new development.</source>
          <target state="translated"><bpt id="p1">[</bpt>API MI<ept id="p1">](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx)</ept> powinna być używana do wszystkich nowych wdrożeń.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Decoupled providers are hosted by an application.</source>
          <target state="translated">Rozdzielonymi dostawców są obsługiwane przez aplikację.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</source>
          <target state="translated">Dwie metody może służyć przez aplikację do udostępnienia wystąpienia klas usługi WMI: publikowanie/revoke lub metody wywołania zwrotnego.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The callback method uses the <ph id="ph1">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph> methods.</source>
          <target state="translated">Używa metody wywołania zwrotnego <ph id="ph1">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph> i <ph id="ph2">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</source>
          <target state="translated">W modelu publikowania/revoke infrastruktury WMI zawiera domyślne zachowanie dla wielu metod trzeba napisać samodzielnie w metody wywołania zwrotnego.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>These include the enumeration and bind methods.</source>
          <target state="translated">Te obejmują wyliczenia i powiązać metody.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>In this model, the application creates instances and publishes them.</source>
          <target state="translated">W tym modelu aplikacja tworzy wystąpienia i je opublikował.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The application is responsible for ensuring that the key properties of the classes are respected.</source>
          <target state="translated">Aplikacja jest odpowiedzialny za zapewnienie, że właściwości klucza klasy są przestrzegane.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The application is also responsible for deleting instances.</source>
          <target state="translated">Aplikacja jest również odpowiedzialne za usuwanie instancji.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</source>
          <target state="translated">W modelu wywołania zwrotnego infrastruktury WMI oczekuje, że aplikacja ma metod, które wyliczenia, powiązania i inne metody wymagane do implementowania dostawcy.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</source>
          <target state="translated">Wywołuje aplikację dla tej funkcji, a nie powiedzie się, jeśli nie istnieje lub nie została zaimplementowana właściwie.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The application registers the type of its WMI classes with the infrastructure by calling <ph id="ph1">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph> and indicates that it no longer wants the WMI classes exposed by calling <ph id="ph2">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph>.</source>
          <target state="translated">Aplikacja rejestruje typ z jej klas WMI przy użyciu infrastruktury przez wywołanie metody <ph id="ph1">&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</ph> oraz wskazuje, że nie chce klas WMI udostępniane przez wywołanie metody <ph id="ph2">&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>The following example demonstrates how to use the publish/revoke model.</source>
          <target state="translated">W poniższym przykładzie pokazano sposób użycia modelu publikowania/odwołania.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>Two instances of the router class are created and published.</source>
          <target state="translated">Dwa wystąpienia klasy router są utworzonych i opublikowanych.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>They are later revoked.</source>
          <target state="translated">Później są odwołane.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Management.Instrumentation.InstrumentationManager">
          <source>In the next example, the callback method of registration is used to expose the RouterNew class.</source>
          <target state="translated">W następnym przykładzie metoda wywołania zwrotnego rejestracji jest używany do udostępnienia klasy RouterNew.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)">
          <source>An instance of the class that implements the provider to publish.</source>
          <target state="translated">Wystąpienie klasy, która implementuje dostawcę, aby opublikować.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)">
          <source>Makes an instance of a provider available within the WMI infrastructure.</source>
          <target state="translated">Udostępnia wystąpienie dostawcy w ramach infrastruktury WMI.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)">
          <source>The assembly to register.</source>
          <target state="translated">Zestaw do zarejestrowania.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)">
          <source>Registers an assembly with the WMI infrastructure.</source>
          <target state="translated">Rejestruje zestawu przy użyciu infrastruktury WMI.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)">
          <source>The type of the class.</source>
          <target state="translated">Typ klasy.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)">
          <source>Registers a class with the WMI infrastructure.</source>
          <target state="translated">Rejestruje klasę z infrastruktury WMI.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)">
          <source>An instance of the class that implements the provider to revoke.</source>
          <target state="translated">Wystąpienie klasy, która implementuje dostawcę, aby można było odwołać.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)">
          <source>Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</source>
          <target state="translated">Pobiera wystąpienia dostawcy obecnie dostępna i staje się niedostępny w ramach infrastruktury WMI.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)">
          <source>The registered assembly to unregister.</source>
          <target state="translated">Zestaw zarejestrowany wyrejestrować.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)">
          <source>Unregisters an assembly currently registered with the WMI infrastructure.</source>
          <target state="translated">Wyrejestrowuje zestawu obecnie zarejestrowane przy użyciu infrastruktury WMI.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)">
          <source>The registered type to unregister.</source>
          <target state="translated">Zarejestrowanego typu wyrejestrować.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)">
          <source>Unregisters a class registered with the WMI infrastructure.</source>
          <target state="translated">Wyrejestrowuje klasy zarejestrowana przy użyciu infrastruktury WMI.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>