<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2c7d0-101">Udostępnia metody zarządzające okres istnienia i z modelem użytym rozdzielonymi dostawców.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span></span>  
  
 <span data-ttu-id="2c7d0-102">Uwaga: do bibliotek WMI .NET są teraz wziąć pod uwagę stanu końcowego, a nie dalszy rozwój, ulepszenia lub aktualizacje będą dostępne dla problemy związane z zabezpieczeniami wpływu na te biblioteki.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="2c7d0-103">[API MI](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) powinna być używana do wszystkich nowych wdrożeń.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c7d0-104">Rozdzielonymi dostawców są obsługiwane przez aplikację.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-104">Decoupled providers are hosted by an application.</span></span> <span data-ttu-id="2c7d0-105">Dwie metody może służyć przez aplikację do udostępnienia wystąpienia klas usługi WMI: publikowanie/revoke lub metody wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-105">Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</span></span> <span data-ttu-id="2c7d0-106">Używa metody wywołania zwrotnego <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> i <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-106">The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.</span></span>  
  
 <span data-ttu-id="2c7d0-107">W modelu publikowania/revoke infrastruktury WMI zawiera domyślne zachowanie dla wielu metod trzeba napisać samodzielnie w metody wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-107">In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</span></span> <span data-ttu-id="2c7d0-108">Te obejmują wyliczenia i powiązać metody.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-108">These include the enumeration and bind methods.</span></span> <span data-ttu-id="2c7d0-109">W tym modelu aplikacja tworzy wystąpienia i je opublikował.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-109">In this model, the application creates instances and publishes them.</span></span> <span data-ttu-id="2c7d0-110">Aplikacja jest odpowiedzialny za zapewnienie, że właściwości klucza klasy są przestrzegane.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-110">The application is responsible for ensuring that the key properties of the classes are respected.</span></span> <span data-ttu-id="2c7d0-111">Aplikacja jest również odpowiedzialne za usuwanie instancji.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-111">The application is also responsible for deleting instances.</span></span>  
  
 <span data-ttu-id="2c7d0-112">W modelu wywołania zwrotnego infrastruktury WMI oczekuje, że aplikacja ma metod, które wyliczenia, powiązania i inne metody wymagane do implementowania dostawcy.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-112">In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</span></span> <span data-ttu-id="2c7d0-113">Wywołuje aplikację dla tej funkcji, a nie powiedzie się, jeśli nie istnieje lub nie została zaimplementowana właściwie.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-113">It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</span></span> <span data-ttu-id="2c7d0-114">Aplikacja rejestruje typ z jej klas WMI przy użyciu infrastruktury przez wywołanie metody <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> oraz wskazuje, że nie chce klas WMI udostępniane przez wywołanie metody <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-114">The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c7d0-115">W poniższym przykładzie pokazano sposób użycia modelu publikowania/odwołania.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-115">The following example demonstrates how to use the publish/revoke model.</span></span> <span data-ttu-id="2c7d0-116">Dwa wystąpienia klasy router są utworzonych i opublikowanych.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-116">Two instances of the router class are created and published.</span></span> <span data-ttu-id="2c7d0-117">Później są odwołane.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-117">They are later revoked.</span></span>  
  
```  
public class Sample_InstanceProvider  
{  
public int Main (string[] args)   
{  
Router r_one = new Router ();  
r_one.Name = "one";  
InstrumentationManager.Publish(r_one);  
Router r_two = new Router ();  
r_two.Name = "two";  
InstrumentationManager.Publish(r_two);  
// ....  
InstrumentationManager.Revoke(r_one);  
InstrumentationManager.Revoke(r_two);  
return 0;  
}  
}  
```  
  
 <span data-ttu-id="2c7d0-118">W następnym przykładzie metoda wywołania zwrotnego rejestracji jest używany do udostępnienia klasy RouterNew.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-118">In the next example, the callback method of registration is used to expose the RouterNew class.</span></span>  
  
```  
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2c7d0-119">Wystąpienie klasy, która implementuje dostawcę, aby opublikować.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-119">An instance of the class that implements the provider to publish.</span></span></param>
        <summary><span data-ttu-id="2c7d0-120">Udostępnia wystąpienie dostawcy w ramach infrastruktury WMI.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-120">Makes an instance of a provider available within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="2c7d0-121">Zestaw do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-121">The assembly to register.</span></span></param>
        <summary><span data-ttu-id="2c7d0-122">Rejestruje zestawu przy użyciu infrastruktury WMI.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-122">Registers an assembly with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="2c7d0-123">Typ klasy.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-123">The type of the class.</span></span></param>
        <summary><span data-ttu-id="2c7d0-124">Rejestruje klasę z infrastruktury WMI.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-124">Registers a class with the WMI infrastructure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```  
static int Main(string[] args)  
{  
   InstrumentationManager.RegisterType(typeof(MySampleProvider));  
   return 0;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2c7d0-125">Wystąpienie klasy, która implementuje dostawcę, aby można było odwołać.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-125">An instance of the class that implements the provider to revoke.</span></span></param>
        <summary><span data-ttu-id="2c7d0-126">Pobiera wystąpienia dostawcy obecnie dostępna i staje się niedostępny w ramach infrastruktury WMI.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-126">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="2c7d0-127">Zestaw zarejestrowany wyrejestrować.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-127">The registered assembly to unregister.</span></span></param>
        <summary><span data-ttu-id="2c7d0-128">Wyrejestrowuje zestawu obecnie zarejestrowane przy użyciu infrastruktury WMI.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-128">Unregisters an assembly currently registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="2c7d0-129">Zarejestrowanego typu wyrejestrować.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-129">The registered type to unregister.</span></span></param>
        <summary><span data-ttu-id="2c7d0-130">Wyrejestrowuje klasy zarejestrowana przy użyciu infrastruktury WMI.</span><span class="sxs-lookup"><span data-stu-id="2c7d0-130">Unregisters a class registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>