<Type Name="DbEnumerator" FullName="System.Data.Common.DbEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="01965ddc4d8c8d775cc7f496815d91557276767f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36692177" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DbEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class DbEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbEnumerator : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type DbEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Przedstawia <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> metodę, która obsługuje prosty iteracji w kolekcji przez dostawcę danych .NET Framework.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbEnumerator> Klasy jest implementowany przez dostawcy danych .NET Framework w celu zapewnienia obsługi powiązania danych.  
  
 Zgodnie z projektem <xref:System.Data.Common.DbEnumerator> obiekt jest przeznaczony do użycia z tylko jeden zestaw wyników. Na przykład wykonywania instrukcji przetwarzania wsadowego zawierającego dwa instrukcji SQL SELECT zwracających różnych schematów, druga instrukcja może nie zwracają cały schemat. Aby tego uniknąć, należy uzyskać <xref:System.Data.Common.DbEnumerator> dla każdego zestawu wyników, a następnie wywołania `NextResult` metody obiektu DataReader dostawcy danych .NET Framework.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Common.DbEnumerator" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbEnumerator (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DbEnumerator(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbEnumerator : System.Data.Common.DbDataReader -&gt; System.Data.Common.DbEnumerator" Usage="new System.Data.Common.DbEnumerator reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">DataReader za pośrednictwem której do wykonywania iteracji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Common.DbEnumerator" /> klasy z czytnika danych n podać.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbEnumerator (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DbEnumerator(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbEnumerator : System.Data.IDataReader -&gt; System.Data.Common.DbEnumerator" Usage="new System.Data.Common.DbEnumerator reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see langword="DataReader" /> Za pośrednictwem której do wykonywania iteracji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Common.DbEnumerator" /> przy użyciu określonego <see langword="DataReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbEnumerator (System.Data.Common.DbDataReader reader, bool closeReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataReader reader, bool closeReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As DbDataReader, closeReader As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DbEnumerator(System::Data::Common::DbDataReader ^ reader, bool closeReader);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbEnumerator : System.Data.Common.DbDataReader * bool -&gt; System.Data.Common.DbEnumerator" Usage="new System.Data.Common.DbEnumerator (reader, closeReader)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="closeReader" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">DataReader za pośrednictwem której do wykonywania iteracji.</param>
        <param name="closeReader">
          <see langword="true" /> Aby automatycznie zamknąć elementu DataReader po wykonaniu jej danych; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Common.DbEnumerator" /> przy użyciu określonego czytnika i wskazuje, czy automatycznie zamykać czytnik po wykonaniu jej danych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbEnumerator (System.Data.IDataReader reader, bool closeReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.IDataReader reader, bool closeReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As IDataReader, closeReader As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DbEnumerator(System::Data::IDataReader ^ reader, bool closeReader);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbEnumerator : System.Data.IDataReader * bool -&gt; System.Data.Common.DbEnumerator" Usage="new System.Data.Common.DbEnumerator (reader, closeReader)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="closeReader" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see langword="DataReader" /> Za pośrednictwem której do wykonywania iteracji.</param>
        <param name="closeReader">
          <see langword="true" /> Aby automatycznie zamknąć <see langword="DataReader" /> po wykonaniu jej danych; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.Common.DbEnumerator" /> przy użyciu określonego <see langword="DataReader" />oraz wskazuje, czy automatycznie zamykać <see langword="DataReader" /> po wykonaniu jej danych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : obj" Usage="System.Data.Common.DbEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący element w kolekcji.</summary>
        <value>Bieżący element w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu modułu wyliczającego lub po <xref:System.Data.Common.DbEnumerator.Reset%2A>, <xref:System.Data.Common.DbEnumerator.MoveNext%2A> musi zostać wywołana można poprawić modułu wyliczającego pierwszy element do kolekcji przed odczytywania wartości <xref:System.Data.Common.DbEnumerator.Current%2A>; w przeciwnym razie <xref:System.Data.Common.DbEnumerator.Current%2A> jest niezdefiniowana. <xref:System.Data.Common.DbEnumerator.Current%2A> również zgłasza wyjątek, jeśli przez ostatnie wywołanie <xref:System.Data.Common.DbEnumerator.MoveNext%2A> zwrócił wartość false, co oznacza koniec kolekcji. <xref:System.Data.Common.DbEnumerator.Current%2A> nie powoduje przeniesienia pozycja modułu wyliczającego i kolejne wywołania <xref:System.Data.Common.DbEnumerator.Current%2A> zwracać ten sam obiekt do momentu <xref:System.Data.Common.DbEnumerator.MoveNext%2A> lub <xref:System.Data.Common.DbEnumerator.Reset%2A> jest wywoływana. Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli wprowadzono zmiany w kolekcji, takie jak dodawanie, modyfikowanie lub usuwanie elementów, moduł wyliczający jest bezpowrotnie nieważne, a następne wywołanie <xref:System.Data.Common.DbEnumerator.MoveNext%2A> lub <xref:System.Data.Common.DbEnumerator.Reset%2A> generuje <xref:System.InvalidOperationException>. Jeśli kolekcja jest zmodyfikowany między <xref:System.Data.Common.DbEnumerator.MoveNext%2A> i <xref:System.Data.Common.DbEnumerator.Current%2A>, <xref:System.Data.Common.DbEnumerator.Current%2A> zwraca element, do którego jest ustawiona, nawet wtedy, gdy moduł wyliczający jest już unieważnione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Moduł wyliczający jest umieszczony przed pierwszym elementem kolekcji lub po ostatnim elemencie.</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="dbEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moduł wyliczający należy przechodzi do następnego elementu kolekcji.</summary>
        <returns>
          <see langword="true" /> Jeśli moduł wyliczający został pomyślnie poprawionym do następnego elementu; <see langword="false" /> po zakończeniu zbierania moduł wyliczający.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu modułu wyliczającego lub po wywołaniu <xref:System.Data.Common.DbEnumerator.Reset%2A>, moduł wyliczający jest umieszczony przed pierwszym elementem kolekcji i w pierwszym wywołaniu <xref:System.Data.Common.DbEnumerator.MoveNext%2A> moduł wyliczający jest przemieszczane nad pierwszym elementem kolekcji. Po przekazany, kolejne wywołania do końca kolekcji <xref:System.Data.Common.DbEnumerator.MoveNext%2A> zwróci wartość false, dopóki <xref:System.Data.Common.DbEnumerator.Reset%2A> jest wywoływana. Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli wprowadzono zmiany w kolekcji, takie jak dodawanie, modyfikowanie lub usuwanie elementów, moduł wyliczający jest bezpowrotnie nieważne, a następne wywołanie <xref:System.Data.Common.DbEnumerator.MoveNext%2A> lub <xref:System.Data.Common.DbEnumerator.Reset%2A> zgłasza <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Kolekcja została zmodyfikowana po utworzeniu modułu wyliczającego.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="dbEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia modułu wyliczającego pozycji początkowej, czyli przed pierwszym elementem w kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli wprowadzono zmiany w kolekcji, takie jak dodawanie, modyfikowanie lub usuwanie elementów, moduł wyliczający jest bezpowrotnie nieważne, a następne wywołanie <xref:System.Data.Common.DbEnumerator.MoveNext%2A> lub <xref:System.Data.Common.DbEnumerator.Reset%2A> zgłasza <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Kolekcja została zmodyfikowana po utworzeniu modułu wyliczającego.</exception>
      </Docs>
    </Member>
  </Members>
</Type>